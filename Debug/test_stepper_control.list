
test_stepper_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f04  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080040dc  080040dc  000140dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800410c  0800410c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800410c  0800410c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800410c  0800410c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800410c  0800410c  0001410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004110  08004110  00014110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000005c  08004170  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08004170  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b85f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f28  00000000  00000000  0002b92e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  0002d858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ac  00000000  00000000  0002e4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e7ed  00000000  00000000  0002ee9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ca52  00000000  00000000  0004d689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc380  00000000  00000000  0005a0db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003904  00000000  00000000  0011645c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00119d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080040c4 	.word	0x080040c4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	080040c4 	.word	0x080040c4

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <_ZN6CmdVelC1Ev>:
#define HOLONOMICDRIVE3_H_


#include "Stepper.h"

struct CmdVel {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f04f 0200 	mov.w	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f04f 0200 	mov.w	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f04f 0200 	mov.w	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_ZN7StepperaSERKS_>:
#ifndef SRC_STEPPER_H_
#define SRC_STEPPER_H_

#include "stm32g4xx_hal.h"

class Stepper {
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	1d10      	adds	r0, r2, #4
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	224c      	movs	r2, #76	; 0x4c
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f003 fa92 	bl	8004010 <memcpy>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	651a      	str	r2, [r3, #80]	; 0x50
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	659a      	str	r2, [r3, #88]	; 0x58
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	0000      	movs	r0, r0
 8000b1c:	0000      	movs	r0, r0
	...

08000b20 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>:

#define PI 3.14159265359
#define SQRT_2_OVER_2 0.70710678118
#define SQRT_3_OVER_2 0.86602540378

HolonomicDrive3::HolonomicDrive3(Stepper stepper0, Stepper stepper1, Stepper stepper2, float wheel_radius, float wheel_distance) {
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6178      	str	r0, [r7, #20]
 8000b28:	6139      	str	r1, [r7, #16]
 8000b2a:	60fa      	str	r2, [r7, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b32:	edc7 0a00 	vstr	s1, [r7]
 8000b36:	4a28      	ldr	r2, [pc, #160]	; (8000bd8 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xb8>)
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	3304      	adds	r3, #4
 8000b40:	2402      	movs	r4, #2
 8000b42:	461d      	mov	r5, r3
 8000b44:	e004      	b.n	8000b50 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x30>
 8000b46:	4628      	mov	r0, r5
 8000b48:	f000 f9f6 	bl	8000f38 <_ZN7StepperC1Ev>
 8000b4c:	3560      	adds	r5, #96	; 0x60
 8000b4e:	3c01      	subs	r4, #1
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	daf8      	bge.n	8000b46 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x26>
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ffa2 	bl	8000aa4 <_ZN6CmdVelC1Ev>
	this->steppers[0] = stepper0;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	3304      	adds	r3, #4
 8000b64:	6939      	ldr	r1, [r7, #16]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ffb3 	bl	8000ad2 <_ZN7StepperaSERKS_>
	this->steppers[1] = stepper1;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	3364      	adds	r3, #100	; 0x64
 8000b70:	68f9      	ldr	r1, [r7, #12]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ffad 	bl	8000ad2 <_ZN7StepperaSERKS_>
	this->steppers[2] = stepper2;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	33c4      	adds	r3, #196	; 0xc4
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ffa7 	bl	8000ad2 <_ZN7StepperaSERKS_>
	this->wheel_circumference = wheel_radius * 2.0 * PI;
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff fcab 	bl	80004e0 <__aeabi_f2d>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	f7ff fb49 	bl	8000224 <__adddf3>
 8000b92:	4602      	mov	r2, r0
 8000b94:	460b      	mov	r3, r1
 8000b96:	4610      	mov	r0, r2
 8000b98:	4619      	mov	r1, r3
 8000b9a:	a30d      	add	r3, pc, #52	; (adr r3, 8000bd0 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xb0>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	f7ff fcf6 	bl	8000590 <__aeabi_dmul>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4610      	mov	r0, r2
 8000baa:	4619      	mov	r1, r3
 8000bac:	f7ff ff2a 	bl	8000a04 <__aeabi_d2f>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	this->wheel_distance = wheel_distance;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	f3af 8000 	nop.w
 8000bd0:	54442eea 	.word	0x54442eea
 8000bd4:	400921fb 	.word	0x400921fb
 8000bd8:	080040e4 	.word	0x080040e4

08000bdc <_ZN15HolonomicDrive311set_cmd_velE6CmdVel>:

void HolonomicDrive3::set_cmd_vel(CmdVel cmd) {
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	eef0 6a40 	vmov.f32	s13, s0
 8000be8:	eeb0 7a60 	vmov.f32	s14, s1
 8000bec:	eef0 7a41 	vmov.f32	s15, s2
 8000bf0:	edc7 6a00 	vstr	s13, [r7]
 8000bf4:	ed87 7a01 	vstr	s14, [r7, #4]
 8000bf8:	edc7 7a02 	vstr	s15, [r7, #8]
	this->cmd_vel = cmd;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000c02:	463a      	mov	r2, r7
 8000c04:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <_ZN15HolonomicDrive324spin_once_motors_controlEv>:

void HolonomicDrive3::spin_once_motors_control() {
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    float wheel0_mps = 0.5 * this->cmd_vel.x - SQRT_3_OVER_2 * this->cmd_vel.y - this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fc5a 	bl	80004e0 <__aeabi_f2d>
 8000c2c:	f04f 0200 	mov.w	r2, #0
 8000c30:	4b7d      	ldr	r3, [pc, #500]	; (8000e28 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x210>)
 8000c32:	f7ff fcad 	bl	8000590 <__aeabi_dmul>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4614      	mov	r4, r2
 8000c3c:	461d      	mov	r5, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fc4b 	bl	80004e0 <__aeabi_f2d>
 8000c4a:	a373      	add	r3, pc, #460	; (adr r3, 8000e18 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x200>)
 8000c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c50:	f7ff fc9e 	bl	8000590 <__aeabi_dmul>
 8000c54:	4602      	mov	r2, r0
 8000c56:	460b      	mov	r3, r1
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	f7ff fae0 	bl	8000220 <__aeabi_dsub>
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	4614      	mov	r4, r2
 8000c66:	461d      	mov	r5, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	ee17 0a90 	vmov	r0, s15
 8000c7c:	f7ff fc30 	bl	80004e0 <__aeabi_f2d>
 8000c80:	a367      	add	r3, pc, #412	; (adr r3, 8000e20 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x208>)
 8000c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c86:	f7ff fc83 	bl	8000590 <__aeabi_dmul>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4610      	mov	r0, r2
 8000c90:	4619      	mov	r1, r3
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	4b65      	ldr	r3, [pc, #404]	; (8000e2c <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x214>)
 8000c98:	f7ff fda4 	bl	80007e4 <__aeabi_ddiv>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	f7ff fabc 	bl	8000220 <__aeabi_dsub>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f7ff fea8 	bl	8000a04 <__aeabi_d2f>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	61fb      	str	r3, [r7, #28]
    float wheel1_mps = 0.5 * this->cmd_vel.x + SQRT_3_OVER_2 * this->cmd_vel.y - this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fc0e 	bl	80004e0 <__aeabi_f2d>
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	4b57      	ldr	r3, [pc, #348]	; (8000e28 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x210>)
 8000cca:	f7ff fc61 	bl	8000590 <__aeabi_dmul>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4614      	mov	r4, r2
 8000cd4:	461d      	mov	r5, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fbff 	bl	80004e0 <__aeabi_f2d>
 8000ce2:	a34d      	add	r3, pc, #308	; (adr r3, 8000e18 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x200>)
 8000ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce8:	f7ff fc52 	bl	8000590 <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	f7ff fa96 	bl	8000224 <__adddf3>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4614      	mov	r4, r2
 8000cfe:	461d      	mov	r5, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8000d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d10:	ee17 0a90 	vmov	r0, s15
 8000d14:	f7ff fbe4 	bl	80004e0 <__aeabi_f2d>
 8000d18:	a341      	add	r3, pc, #260	; (adr r3, 8000e20 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x208>)
 8000d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1e:	f7ff fc37 	bl	8000590 <__aeabi_dmul>
 8000d22:	4602      	mov	r2, r0
 8000d24:	460b      	mov	r3, r1
 8000d26:	4610      	mov	r0, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f04f 0200 	mov.w	r2, #0
 8000d2e:	4b3f      	ldr	r3, [pc, #252]	; (8000e2c <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x214>)
 8000d30:	f7ff fd58 	bl	80007e4 <__aeabi_ddiv>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	f7ff fa70 	bl	8000220 <__aeabi_dsub>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	f7ff fe5c 	bl	8000a04 <__aeabi_d2f>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	61bb      	str	r3, [r7, #24]
    float wheel2_mps = this->cmd_vel.x - this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fbc2 	bl	80004e0 <__aeabi_f2d>
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	460d      	mov	r5, r1
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8000d6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d70:	ee17 0a90 	vmov	r0, s15
 8000d74:	f7ff fbb4 	bl	80004e0 <__aeabi_f2d>
 8000d78:	a329      	add	r3, pc, #164	; (adr r3, 8000e20 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x208>)
 8000d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7e:	f7ff fc07 	bl	8000590 <__aeabi_dmul>
 8000d82:	4602      	mov	r2, r0
 8000d84:	460b      	mov	r3, r1
 8000d86:	4610      	mov	r0, r2
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x214>)
 8000d90:	f7ff fd28 	bl	80007e4 <__aeabi_ddiv>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	4620      	mov	r0, r4
 8000d9a:	4629      	mov	r1, r5
 8000d9c:	f7ff fa40 	bl	8000220 <__aeabi_dsub>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4610      	mov	r0, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	f7ff fe2c 	bl	8000a04 <__aeabi_d2f>
 8000dac:	4603      	mov	r3, r0
 8000dae:	617b      	str	r3, [r7, #20]
    // wheel mps -> wheel rps
    float wheel0_rps = wheel0_mps / this->wheel_circumference;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8000db6:	edd7 6a07 	vldr	s13, [r7, #28]
 8000dba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dbe:	edc7 7a04 	vstr	s15, [r7, #16]
    float wheel1_rps = wheel1_mps / this->wheel_circumference;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8000dc8:	edd7 6a06 	vldr	s13, [r7, #24]
 8000dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dd0:	edc7 7a03 	vstr	s15, [r7, #12]
    float wheel2_rps = wheel2_mps / this->wheel_circumference;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8000dda:	edd7 6a05 	vldr	s13, [r7, #20]
 8000dde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000de2:	edc7 7a02 	vstr	s15, [r7, #8]

    this->steppers[0].set_speed_rps(wheel0_rps);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	3304      	adds	r3, #4
 8000dea:	ed97 0a04 	vldr	s0, [r7, #16]
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 f924 	bl	800103c <_ZN7Stepper13set_speed_rpsEf>
    this->steppers[1].set_speed_rps(wheel1_rps);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3364      	adds	r3, #100	; 0x64
 8000df8:	ed97 0a03 	vldr	s0, [r7, #12]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f000 f91d 	bl	800103c <_ZN7Stepper13set_speed_rpsEf>
    this->steppers[2].set_speed_rps(wheel2_rps);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	33c4      	adds	r3, #196	; 0xc4
 8000e06:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f916 	bl	800103c <_ZN7Stepper13set_speed_rpsEf>
}
 8000e10:	bf00      	nop
 8000e12:	3720      	adds	r7, #32
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bdb0      	pop	{r4, r5, r7, pc}
 8000e18:	e857b07f 	.word	0xe857b07f
 8000e1c:	3febb67a 	.word	0x3febb67a
 8000e20:	54442eea 	.word	0x54442eea
 8000e24:	400921fb 	.word	0x400921fb
 8000e28:	3fe00000 	.word	0x3fe00000
 8000e2c:	40668000 	.word	0x40668000

08000e30 <_ZN15HolonomicDrive3D1Ev>:

HolonomicDrive3::~HolonomicDrive3() {
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	4a0d      	ldr	r2, [pc, #52]	; (8000e70 <_ZN15HolonomicDrive3D1Ev+0x40>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3304      	adds	r3, #4
	// TODO Auto-generated destructor stub
}
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d00d      	beq.n	8000e62 <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3304      	adds	r3, #4
 8000e4a:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3304      	adds	r3, #4
}
 8000e52:	429c      	cmp	r4, r3
 8000e54:	d005      	beq.n	8000e62 <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 8000e56:	3c60      	subs	r4, #96	; 0x60
 8000e58:	6823      	ldr	r3, [r4, #0]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	4798      	blx	r3
}
 8000e60:	e7f5      	b.n	8000e4e <_ZN15HolonomicDrive3D1Ev+0x1e>
HolonomicDrive3::~HolonomicDrive3() {
 8000e62:	bf00      	nop
}
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	4618      	mov	r0, r3
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd90      	pop	{r4, r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	080040e4 	.word	0x080040e4

08000e74 <_ZN15HolonomicDrive3D0Ev>:
HolonomicDrive3::~HolonomicDrive3() {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
}
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ffd7 	bl	8000e30 <_ZN15HolonomicDrive3D1Ev>
 8000e82:	f44f 719c 	mov.w	r1, #312	; 0x138
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f003 f87c 	bl	8003f84 <_ZdlPvj>
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
	...

08000e98 <_Z21PWM_set_high_durationP11TIM_TypeDefi>:
 */

#include "Stepper.h"


void PWM_set_high_duration(TIM_TypeDef *timx, int us) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	int ccr = 16./25. * us;
 8000ea2:	6838      	ldr	r0, [r7, #0]
 8000ea4:	f7ff fb0a 	bl	80004bc <__aeabi_i2d>
 8000ea8:	a309      	add	r3, pc, #36	; (adr r3, 8000ed0 <_Z21PWM_set_high_durationP11TIM_TypeDefi+0x38>)
 8000eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eae:	f7ff fb6f 	bl	8000590 <__aeabi_dmul>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	460b      	mov	r3, r1
 8000eb6:	4610      	mov	r0, r2
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f7ff fd7b 	bl	80009b4 <__aeabi_d2iz>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	60fb      	str	r3, [r7, #12]
	timx->CCR1 = ccr;
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	47ae147b 	.word	0x47ae147b
 8000ed4:	3fe47ae1 	.word	0x3fe47ae1

08000ed8 <_Z12PWM_set_freqP11TIM_TypeDefi>:

void PWM_set_freq(TIM_TypeDef *timx, int hz) {
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	6039      	str	r1, [r7, #0]
	int arr = 16000000./(25*(float)hz);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	ee07 3a90 	vmov	s15, r3
 8000ee8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000eec:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ef4:	ee17 0a90 	vmov	r0, s15
 8000ef8:	f7ff faf2 	bl	80004e0 <__aeabi_f2d>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	a10b      	add	r1, pc, #44	; (adr r1, 8000f30 <_Z12PWM_set_freqP11TIM_TypeDefi+0x58>)
 8000f02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f06:	f7ff fc6d 	bl	80007e4 <__aeabi_ddiv>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fd4f 	bl	80009b4 <__aeabi_d2iz>
 8000f16:	4603      	mov	r3, r0
 8000f18:	60fb      	str	r3, [r7, #12]
	timx->CNT = 0;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	625a      	str	r2, [r3, #36]	; 0x24
	timx->ARR = arr;
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f26:	bf00      	nop
 8000f28:	3710      	adds	r7, #16
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	00000000 	.word	0x00000000
 8000f34:	416e8480 	.word	0x416e8480

08000f38 <_ZN7StepperC1Ev>:

Stepper::Stepper() {}
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <_ZN7StepperC1Ev+0x1c>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	370c      	adds	r7, #12
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	080040f4 	.word	0x080040f4

08000f58 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>:

Stepper::Stepper(TIM_HandleTypeDef tim_handle_step, GPIO_TypeDef *GPIOx_dir, uint16_t GPIO_Pin_dir) {
 8000f58:	b084      	sub	sp, #16
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b082      	sub	sp, #8
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
 8000f62:	f107 0014 	add.w	r0, r7, #20
 8000f66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft+0x6c>)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->tim_handle = tim_handle_step;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	3304      	adds	r3, #4
 8000f74:	f107 0114 	add.w	r1, r7, #20
 8000f78:	224c      	movs	r2, #76	; 0x4c
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 f848 	bl	8004010 <memcpy>
	this->GPIOx_dir = GPIOx_dir;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f84:	651a      	str	r2, [r3, #80]	; 0x50
	this->GPIO_Pin_dir = GPIO_Pin_dir;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000f8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	PWM_set_high_duration(this->tim_handle.Instance, 10);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	210a      	movs	r1, #10
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff7e 	bl	8000e98 <_Z21PWM_set_high_durationP11TIM_TypeDefi>
	HAL_TIM_PWM_Stop(&this->tim_handle, TIM_CHANNEL_1);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3304      	adds	r3, #4
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f001 ffe8 	bl	8002f78 <HAL_TIM_PWM_Stop>

	this->current_dir = 0;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	65da      	str	r2, [r3, #92]	; 0x5c
	this->current_freq = 0;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fc0:	b004      	add	sp, #16
 8000fc2:	4770      	bx	lr
 8000fc4:	080040f4 	.word	0x080040f4

08000fc8 <_ZN7Stepper19set_speed_step_freqEii>:

void Stepper::set_speed_step_freq(int hz, int dir) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
	if(hz < 15){// todo calculer freq min automatiquement
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	2b0e      	cmp	r3, #14
 8000fd8:	dc06      	bgt.n	8000fe8 <_ZN7Stepper19set_speed_step_freqEii+0x20>
		HAL_TIM_PWM_Stop(&this->tim_handle, TIM_CHANNEL_1);
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f001 ffc9 	bl	8002f78 <HAL_TIM_PWM_Stop>
		return;
 8000fe6:	e025      	b.n	8001034 <_ZN7Stepper19set_speed_step_freqEii+0x6c>
	}
	if(!this->current_freq) {
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d105      	bne.n	8000ffc <_ZN7Stepper19set_speed_step_freqEii+0x34>
		// stepper stopped, start pwm
		HAL_TIM_PWM_Start(&this->tim_handle, TIM_CHANNEL_1);
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	3304      	adds	r3, #4
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f001 febe 	bl	8002d78 <HAL_TIM_PWM_Start>
	}
	PWM_set_freq(this->tim_handle.Instance, hz);
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	4618      	mov	r0, r3
 8001004:	f7ff ff68 	bl	8000ed8 <_Z12PWM_set_freqP11TIM_TypeDefi>

	if(dir==1) {
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d109      	bne.n	8001022 <_ZN7Stepper19set_speed_step_freqEii+0x5a>
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001018:	2201      	movs	r2, #1
 800101a:	4619      	mov	r1, r3
 800101c:	f001 f832 	bl	8002084 <HAL_GPIO_WritePin>
 8001020:	e008      	b.n	8001034 <_ZN7Stepper19set_speed_step_freqEii+0x6c>
	}else {
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_RESET);
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800102c:	2200      	movs	r2, #0
 800102e:	4619      	mov	r1, r3
 8001030:	f001 f828 	bl	8002084 <HAL_GPIO_WritePin>
	}
}
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <_ZN7Stepper13set_speed_rpsEf>:

void Stepper::set_speed_rps(float rps) {
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	ed87 0a00 	vstr	s0, [r7]
	// 3200 steps per revolution
	int hz = rps * 3200.0;
 8001048:	6838      	ldr	r0, [r7, #0]
 800104a:	f7ff fa49 	bl	80004e0 <__aeabi_f2d>
 800104e:	f04f 0200 	mov.w	r2, #0
 8001052:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <_ZN7Stepper13set_speed_rpsEf+0x54>)
 8001054:	f7ff fa9c 	bl	8000590 <__aeabi_dmul>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4610      	mov	r0, r2
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fca8 	bl	80009b4 <__aeabi_d2iz>
 8001064:	4603      	mov	r3, r0
 8001066:	60fb      	str	r3, [r7, #12]
	if(hz>=0) {
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	db05      	blt.n	800107a <_ZN7Stepper13set_speed_rpsEf+0x3e>
		this->set_speed_step_freq(hz, 1);
 800106e:	2201      	movs	r2, #1
 8001070:	68f9      	ldr	r1, [r7, #12]
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff ffa8 	bl	8000fc8 <_ZN7Stepper19set_speed_step_freqEii>
	}
	else {
		this->set_speed_step_freq(-hz, 0);
	}
}
 8001078:	e006      	b.n	8001088 <_ZN7Stepper13set_speed_rpsEf+0x4c>
		this->set_speed_step_freq(-hz, 0);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	425b      	negs	r3, r3
 800107e:	2200      	movs	r2, #0
 8001080:	4619      	mov	r1, r3
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa0 	bl	8000fc8 <_ZN7Stepper19set_speed_step_freqEii>
}
 8001088:	bf00      	nop
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40a90000 	.word	0x40a90000

08001094 <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <_ZN7StepperD1Ev+0x1c>)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4618      	mov	r0, r3
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	080040f4 	.word	0x080040f4

080010b4 <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
}
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ffe9 	bl	8001094 <_ZN7StepperD1Ev>
 80010c2:	2160      	movs	r1, #96	; 0x60
 80010c4:	6878      	ldr	r0, [r7, #4]
 80010c6:	f002 ff5d 	bl	8003f84 <_ZdlPvj>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <_ZN7StepperC1ERKS_>:
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <_ZN7StepperC1ERKS_+0x50>)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	1d10      	adds	r0, r2, #4
 80010ea:	3304      	adds	r3, #4
 80010ec:	224c      	movs	r2, #76	; 0x4c
 80010ee:	4619      	mov	r1, r3
 80010f0:	f002 ff8e 	bl	8004010 <memcpy>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	651a      	str	r2, [r3, #80]	; 0x50
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	659a      	str	r2, [r3, #88]	; 0x58
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	65da      	str	r2, [r3, #92]	; 0x5c
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	080040f4 	.word	0x080040f4

08001128 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112a:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
 800112e:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001130:	f000 fcd1 	bl	8001ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001134:	f000 f8ce 	bl	80012d4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001138:	f000 fb42 	bl	80017c0 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 800113c:	f000 f914 	bl	8001368 <_ZL12MX_TIM1_Initv>
  MX_TIM4_Init();
 8001140:	f000 f9e0 	bl	8001504 <_ZL12MX_TIM4_Initv>
  MX_TIM8_Init();
 8001144:	f000 fa6e 	bl	8001624 <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */

  Stepper stepper1 = Stepper(htim1, GPIOA, GPIO_PIN_0);
 8001148:	4e5c      	ldr	r6, [pc, #368]	; (80012bc <main+0x194>)
 800114a:	f507 7c02 	add.w	ip, r7, #520	; 0x208
 800114e:	2301      	movs	r3, #1
 8001150:	9311      	str	r3, [sp, #68]	; 0x44
 8001152:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001156:	9310      	str	r3, [sp, #64]	; 0x40
 8001158:	466d      	mov	r5, sp
 800115a:	f106 040c 	add.w	r4, r6, #12
 800115e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800116a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800116e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001172:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001176:	4660      	mov	r0, ip
 8001178:	f7ff feee 	bl	8000f58 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>
  Stepper stepper2 = Stepper(htim4, GPIOA, GPIO_PIN_1);
 800117c:	4e50      	ldr	r6, [pc, #320]	; (80012c0 <main+0x198>)
 800117e:	f507 7cd4 	add.w	ip, r7, #424	; 0x1a8
 8001182:	2302      	movs	r3, #2
 8001184:	9311      	str	r3, [sp, #68]	; 0x44
 8001186:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800118a:	9310      	str	r3, [sp, #64]	; 0x40
 800118c:	466d      	mov	r5, sp
 800118e:	f106 040c 	add.w	r4, r6, #12
 8001192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011a6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80011aa:	4660      	mov	r0, ip
 80011ac:	f7ff fed4 	bl	8000f58 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>
  Stepper stepper3 = Stepper(htim8, GPIOA, GPIO_PIN_4);
 80011b0:	4e44      	ldr	r6, [pc, #272]	; (80012c4 <main+0x19c>)
 80011b2:	f507 7ca4 	add.w	ip, r7, #328	; 0x148
 80011b6:	2310      	movs	r3, #16
 80011b8:	9311      	str	r3, [sp, #68]	; 0x44
 80011ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011be:	9310      	str	r3, [sp, #64]	; 0x40
 80011c0:	466d      	mov	r5, sp
 80011c2:	f106 040c 	add.w	r4, r6, #12
 80011c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011d2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011d6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011da:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80011de:	4660      	mov	r0, ip
 80011e0:	f7ff feba 	bl	8000f58 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>

  HolonomicDrive3 holo_drive = HolonomicDrive3(stepper1, stepper2, stepper3, 0.029, 0.175);
 80011e4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80011e8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80011ec:	4611      	mov	r1, r2
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ff70 	bl	80010d4 <_ZN7StepperC1ERKS_>
 80011f4:	f507 72d4 	add.w	r2, r7, #424	; 0x1a8
 80011f8:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff68 	bl	80010d4 <_ZN7StepperC1ERKS_>
 8001204:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8001208:	f507 734a 	add.w	r3, r7, #808	; 0x328
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff60 	bl	80010d4 <_ZN7StepperC1ERKS_>
 8001214:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001218:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 800121c:	f507 711a 	add.w	r1, r7, #616	; 0x268
 8001220:	f107 0010 	add.w	r0, r7, #16
 8001224:	eddf 0a28 	vldr	s1, [pc, #160]	; 80012c8 <main+0x1a0>
 8001228:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80012cc <main+0x1a4>
 800122c:	f7ff fc78 	bl	8000b20 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>
 8001230:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff2d 	bl	8001094 <_ZN7StepperD1Ev>
 800123a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff28 	bl	8001094 <_ZN7StepperD1Ev>
 8001244:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff ff23 	bl	8001094 <_ZN7StepperD1Ev>

  CmdVel cmd = {};
 800124e:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001252:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001260:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800126e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  cmd.y = 0.1822;
 8001278:	f507 7362 	add.w	r3, r7, #904	; 0x388
 800127c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001280:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <main+0x1a8>)
 8001282:	605a      	str	r2, [r3, #4]
//  cmd.theta = 20.0;

  holo_drive.set_cmd_vel(cmd);
 8001284:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8001288:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800128c:	edd3 6a00 	vldr	s13, [r3]
 8001290:	ed93 7a01 	vldr	s14, [r3, #4]
 8001294:	edd3 7a02 	vldr	s15, [r3, #8]
 8001298:	f107 0310 	add.w	r3, r7, #16
 800129c:	eeb0 0a66 	vmov.f32	s0, s13
 80012a0:	eef0 0a47 	vmov.f32	s1, s14
 80012a4:	eeb0 1a67 	vmov.f32	s2, s15
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff fc97 	bl	8000bdc <_ZN15HolonomicDrive311set_cmd_velE6CmdVel>
  holo_drive.spin_once_motors_control();
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fcb0 	bl	8000c18 <_ZN15HolonomicDrive324spin_once_motors_controlEv>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012b8:	e7fe      	b.n	80012b8 <main+0x190>
 80012ba:	bf00      	nop
 80012bc:	20000078 	.word	0x20000078
 80012c0:	200000c4 	.word	0x200000c4
 80012c4:	20000110 	.word	0x20000110
 80012c8:	3e333333 	.word	0x3e333333
 80012cc:	3ced9168 	.word	0x3ced9168
 80012d0:	3e3a92a3 	.word	0x3e3a92a3

080012d4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b094      	sub	sp, #80	; 0x50
 80012d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012da:	f107 0318 	add.w	r3, r7, #24
 80012de:	2238      	movs	r2, #56	; 0x38
 80012e0:	2100      	movs	r1, #0
 80012e2:	4618      	mov	r0, r3
 80012e4:	f002 fe66 	bl	8003fb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e8:	1d3b      	adds	r3, r7, #4
 80012ea:	2200      	movs	r2, #0
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	605a      	str	r2, [r3, #4]
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	60da      	str	r2, [r3, #12]
 80012f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80012fa:	f000 fedb 	bl	80020b4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001302:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001308:	2340      	movs	r3, #64	; 0x40
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001310:	f107 0318 	add.w	r3, r7, #24
 8001314:	4618      	mov	r0, r3
 8001316:	f000 ff81 	bl	800221c <HAL_RCC_OscConfig>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf14      	ite	ne
 8001320:	2301      	movne	r3, #1
 8001322:	2300      	moveq	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 800132a:	f000 fa79 	bl	8001820 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800132e:	230f      	movs	r3, #15
 8001330:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001332:	2301      	movs	r3, #1
 8001334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800133a:	2300      	movs	r3, #0
 800133c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001342:	1d3b      	adds	r3, r7, #4
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f001 fa7a 	bl	8002840 <HAL_RCC_ClockConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	bf14      	ite	ne
 8001352:	2301      	movne	r3, #1
 8001354:	2300      	moveq	r3, #0
 8001356:	b2db      	uxtb	r3, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 800135c:	f000 fa60 	bl	8001820 <Error_Handler>
  }
}
 8001360:	bf00      	nop
 8001362:	3750      	adds	r7, #80	; 0x50
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b09c      	sub	sp, #112	; 0x70
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800136e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
 8001376:	605a      	str	r2, [r3, #4]
 8001378:	609a      	str	r2, [r3, #8]
 800137a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800137c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001388:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
 8001398:	615a      	str	r2, [r3, #20]
 800139a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2234      	movs	r2, #52	; 0x34
 80013a0:	2100      	movs	r1, #0
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 fe06 	bl	8003fb4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013a8:	4b54      	ldr	r3, [pc, #336]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 80013aa:	4a55      	ldr	r2, [pc, #340]	; (8001500 <_ZL12MX_TIM1_Initv+0x198>)
 80013ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 80013ae:	4b53      	ldr	r3, [pc, #332]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 80013b0:	2218      	movs	r2, #24
 80013b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b4:	4b51      	ldr	r3, [pc, #324]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013ba:	4b50      	ldr	r3, [pc, #320]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 80013bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013c0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c2:	4b4e      	ldr	r3, [pc, #312]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013c8:	4b4c      	ldr	r3, [pc, #304]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013d4:	4849      	ldr	r0, [pc, #292]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 80013d6:	f001 fc17 	bl	8002c08 <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	bf14      	ite	ne
 80013e0:	2301      	movne	r3, #1
 80013e2:	2300      	moveq	r3, #0
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 80013ea:	f000 fa19 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013f4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013f8:	4619      	mov	r1, r3
 80013fa:	4840      	ldr	r0, [pc, #256]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 80013fc:	f001 ff66 	bl	80032cc <HAL_TIM_ConfigClockSource>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	bf14      	ite	ne
 8001406:	2301      	movne	r3, #1
 8001408:	2300      	moveq	r3, #0
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8001410:	f000 fa06 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001414:	4839      	ldr	r0, [pc, #228]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 8001416:	f001 fc4e 	bl	8002cb6 <HAL_TIM_PWM_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	bf14      	ite	ne
 8001420:	2301      	movne	r3, #1
 8001422:	2300      	moveq	r3, #0
 8001424:	b2db      	uxtb	r3, r3
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 800142a:	f000 f9f9 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142e:	2300      	movs	r3, #0
 8001430:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800143a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800143e:	4619      	mov	r1, r3
 8001440:	482e      	ldr	r0, [pc, #184]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 8001442:	f002 fc91 	bl	8003d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	bf14      	ite	ne
 800144c:	2301      	movne	r3, #1
 800144e:	2300      	moveq	r3, #0
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 8001456:	f000 f9e3 	bl	8001820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145a:	2360      	movs	r3, #96	; 0x60
 800145c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001462:	2300      	movs	r3, #0
 8001464:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001466:	2300      	movs	r3, #0
 8001468:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001476:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800147a:	2200      	movs	r2, #0
 800147c:	4619      	mov	r1, r3
 800147e:	481f      	ldr	r0, [pc, #124]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 8001480:	f001 fe10 	bl	80030a4 <HAL_TIM_PWM_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	bf14      	ite	ne
 800148a:	2301      	movne	r3, #1
 800148c:	2300      	moveq	r3, #0
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <_ZL12MX_TIM1_Initv+0x130>
  {
    Error_Handler();
 8001494:	f000 f9c4 	bl	8001820 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80014a4:	2300      	movs	r3, #0
 80014a6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80014ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80014b6:	2300      	movs	r3, #0
 80014b8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80014be:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014d0:	1d3b      	adds	r3, r7, #4
 80014d2:	4619      	mov	r1, r3
 80014d4:	4809      	ldr	r0, [pc, #36]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 80014d6:	f002 fcc9 	bl	8003e6c <HAL_TIMEx_ConfigBreakDeadTime>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	bf14      	ite	ne
 80014e0:	2301      	movne	r3, #1
 80014e2:	2300      	moveq	r3, #0
 80014e4:	b2db      	uxtb	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <_ZL12MX_TIM1_Initv+0x186>
  {
    Error_Handler();
 80014ea:	f000 f999 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014ee:	4803      	ldr	r0, [pc, #12]	; (80014fc <_ZL12MX_TIM1_Initv+0x194>)
 80014f0:	f000 fa08 	bl	8001904 <HAL_TIM_MspPostInit>

}
 80014f4:	bf00      	nop
 80014f6:	3770      	adds	r7, #112	; 0x70
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	20000078 	.word	0x20000078
 8001500:	40012c00 	.word	0x40012c00

08001504 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b08e      	sub	sp, #56	; 0x38
 8001508:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800150a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]
 8001512:	605a      	str	r2, [r3, #4]
 8001514:	609a      	str	r2, [r3, #8]
 8001516:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001524:	463b      	mov	r3, r7
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
 8001532:	615a      	str	r2, [r3, #20]
 8001534:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001536:	4b39      	ldr	r3, [pc, #228]	; (800161c <_ZL12MX_TIM4_Initv+0x118>)
 8001538:	4a39      	ldr	r2, [pc, #228]	; (8001620 <_ZL12MX_TIM4_Initv+0x11c>)
 800153a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24;
 800153c:	4b37      	ldr	r3, [pc, #220]	; (800161c <_ZL12MX_TIM4_Initv+0x118>)
 800153e:	2218      	movs	r2, #24
 8001540:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b36      	ldr	r3, [pc, #216]	; (800161c <_ZL12MX_TIM4_Initv+0x118>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001548:	4b34      	ldr	r3, [pc, #208]	; (800161c <_ZL12MX_TIM4_Initv+0x118>)
 800154a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800154e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b32      	ldr	r3, [pc, #200]	; (800161c <_ZL12MX_TIM4_Initv+0x118>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <_ZL12MX_TIM4_Initv+0x118>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800155c:	482f      	ldr	r0, [pc, #188]	; (800161c <_ZL12MX_TIM4_Initv+0x118>)
 800155e:	f001 fb53 	bl	8002c08 <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	bf14      	ite	ne
 8001568:	2301      	movne	r3, #1
 800156a:	2300      	moveq	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8001572:	f000 f955 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001576:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800157c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001580:	4619      	mov	r1, r3
 8001582:	4826      	ldr	r0, [pc, #152]	; (800161c <_ZL12MX_TIM4_Initv+0x118>)
 8001584:	f001 fea2 	bl	80032cc <HAL_TIM_ConfigClockSource>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf14      	ite	ne
 800158e:	2301      	movne	r3, #1
 8001590:	2300      	moveq	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d001      	beq.n	800159c <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8001598:	f000 f942 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800159c:	481f      	ldr	r0, [pc, #124]	; (800161c <_ZL12MX_TIM4_Initv+0x118>)
 800159e:	f001 fb8a 	bl	8002cb6 <HAL_TIM_PWM_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	bf14      	ite	ne
 80015a8:	2301      	movne	r3, #1
 80015aa:	2300      	moveq	r3, #0
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 80015b2:	f000 f935 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ba:	2300      	movs	r3, #0
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80015be:	f107 031c 	add.w	r3, r7, #28
 80015c2:	4619      	mov	r1, r3
 80015c4:	4815      	ldr	r0, [pc, #84]	; (800161c <_ZL12MX_TIM4_Initv+0x118>)
 80015c6:	f002 fbcf 	bl	8003d68 <HAL_TIMEx_MasterConfigSynchronization>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bf14      	ite	ne
 80015d0:	2301      	movne	r3, #1
 80015d2:	2300      	moveq	r3, #0
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 80015da:	f000 f921 	bl	8001820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015de:	2360      	movs	r3, #96	; 0x60
 80015e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015ee:	463b      	mov	r3, r7
 80015f0:	2200      	movs	r2, #0
 80015f2:	4619      	mov	r1, r3
 80015f4:	4809      	ldr	r0, [pc, #36]	; (800161c <_ZL12MX_TIM4_Initv+0x118>)
 80015f6:	f001 fd55 	bl	80030a4 <HAL_TIM_PWM_ConfigChannel>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf14      	ite	ne
 8001600:	2301      	movne	r3, #1
 8001602:	2300      	moveq	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 800160a:	f000 f909 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800160e:	4803      	ldr	r0, [pc, #12]	; (800161c <_ZL12MX_TIM4_Initv+0x118>)
 8001610:	f000 f978 	bl	8001904 <HAL_TIM_MspPostInit>

}
 8001614:	bf00      	nop
 8001616:	3738      	adds	r7, #56	; 0x38
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	200000c4 	.word	0x200000c4
 8001620:	40000800 	.word	0x40000800

08001624 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b09c      	sub	sp, #112	; 0x70
 8001628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800162a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001638:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001644:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
 8001654:	615a      	str	r2, [r3, #20]
 8001656:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	2234      	movs	r2, #52	; 0x34
 800165c:	2100      	movs	r1, #0
 800165e:	4618      	mov	r0, r3
 8001660:	f002 fca8 	bl	8003fb4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001664:	4b54      	ldr	r3, [pc, #336]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 8001666:	4a55      	ldr	r2, [pc, #340]	; (80017bc <_ZL12MX_TIM8_Initv+0x198>)
 8001668:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 24;
 800166a:	4b53      	ldr	r3, [pc, #332]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 800166c:	2218      	movs	r2, #24
 800166e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001670:	4b51      	ldr	r3, [pc, #324]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001676:	4b50      	ldr	r3, [pc, #320]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 8001678:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800167c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800167e:	4b4e      	ldr	r3, [pc, #312]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 8001680:	2200      	movs	r2, #0
 8001682:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001684:	4b4c      	ldr	r3, [pc, #304]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800168a:	4b4b      	ldr	r3, [pc, #300]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001690:	4849      	ldr	r0, [pc, #292]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 8001692:	f001 fab9 	bl	8002c08 <HAL_TIM_Base_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	bf14      	ite	ne
 800169c:	2301      	movne	r3, #1
 800169e:	2300      	moveq	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <_ZL12MX_TIM8_Initv+0x86>
  {
    Error_Handler();
 80016a6:	f000 f8bb 	bl	8001820 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ae:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80016b0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80016b4:	4619      	mov	r1, r3
 80016b6:	4840      	ldr	r0, [pc, #256]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 80016b8:	f001 fe08 	bl	80032cc <HAL_TIM_ConfigClockSource>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	bf14      	ite	ne
 80016c2:	2301      	movne	r3, #1
 80016c4:	2300      	moveq	r3, #0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <_ZL12MX_TIM8_Initv+0xac>
  {
    Error_Handler();
 80016cc:	f000 f8a8 	bl	8001820 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016d0:	4839      	ldr	r0, [pc, #228]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 80016d2:	f001 faf0 	bl	8002cb6 <HAL_TIM_PWM_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf14      	ite	ne
 80016dc:	2301      	movne	r3, #1
 80016de:	2300      	moveq	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <_ZL12MX_TIM8_Initv+0xc6>
  {
    Error_Handler();
 80016e6:	f000 f89b 	bl	8001820 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016ea:	2300      	movs	r3, #0
 80016ec:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80016ee:	2300      	movs	r3, #0
 80016f0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016f2:	2300      	movs	r3, #0
 80016f4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016f6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80016fa:	4619      	mov	r1, r3
 80016fc:	482e      	ldr	r0, [pc, #184]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 80016fe:	f002 fb33 	bl	8003d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	bf14      	ite	ne
 8001708:	2301      	movne	r3, #1
 800170a:	2300      	moveq	r3, #0
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <_ZL12MX_TIM8_Initv+0xf2>
  {
    Error_Handler();
 8001712:	f000 f885 	bl	8001820 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001716:	2360      	movs	r3, #96	; 0x60
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800171a:	2300      	movs	r3, #0
 800171c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800171e:	2300      	movs	r3, #0
 8001720:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001722:	2300      	movs	r3, #0
 8001724:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001726:	2300      	movs	r3, #0
 8001728:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800172a:	2300      	movs	r3, #0
 800172c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001732:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001736:	2200      	movs	r2, #0
 8001738:	4619      	mov	r1, r3
 800173a:	481f      	ldr	r0, [pc, #124]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 800173c:	f001 fcb2 	bl	80030a4 <HAL_TIM_PWM_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	bf14      	ite	ne
 8001746:	2301      	movne	r3, #1
 8001748:	2300      	moveq	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 8001750:	f000 f866 	bl	8001820 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001754:	2300      	movs	r3, #0
 8001756:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001768:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800176c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800177a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800177e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001784:	2300      	movs	r3, #0
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800178c:	1d3b      	adds	r3, r7, #4
 800178e:	4619      	mov	r1, r3
 8001790:	4809      	ldr	r0, [pc, #36]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 8001792:	f002 fb6b 	bl	8003e6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <_ZL12MX_TIM8_Initv+0x186>
  {
    Error_Handler();
 80017a6:	f000 f83b 	bl	8001820 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80017aa:	4803      	ldr	r0, [pc, #12]	; (80017b8 <_ZL12MX_TIM8_Initv+0x194>)
 80017ac:	f000 f8aa 	bl	8001904 <HAL_TIM_MspPostInit>

}
 80017b0:	bf00      	nop
 80017b2:	3770      	adds	r7, #112	; 0x70
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000110 	.word	0x20000110
 80017bc:	40013400 	.word	0x40013400

080017c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
 80017ce:	609a      	str	r2, [r3, #8]
 80017d0:	60da      	str	r2, [r3, #12]
 80017d2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	4b11      	ldr	r3, [pc, #68]	; (800181c <_ZL12MX_GPIO_Initv+0x5c>)
 80017d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d8:	4a10      	ldr	r2, [pc, #64]	; (800181c <_ZL12MX_GPIO_Initv+0x5c>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017e0:	4b0e      	ldr	r3, [pc, #56]	; (800181c <_ZL12MX_GPIO_Initv+0x5c>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	603b      	str	r3, [r7, #0]
 80017ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2113      	movs	r1, #19
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f000 fc46 	bl	8002084 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80017f8:	2313      	movs	r3, #19
 80017fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fc:	2301      	movs	r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	4619      	mov	r1, r3
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001810:	f000 fab6 	bl	8001d80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001814:	bf00      	nop
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	40021000 	.word	0x40021000

08001820 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001824:	b672      	cpsid	i
}
 8001826:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001828:	e7fe      	b.n	8001828 <Error_Handler+0x8>
	...

0800182c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001832:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_MspInit+0x44>)
 8001834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001836:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_MspInit+0x44>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6613      	str	r3, [r2, #96]	; 0x60
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_MspInit+0x44>)
 8001840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <HAL_MspInit+0x44>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	4a08      	ldr	r2, [pc, #32]	; (8001870 <HAL_MspInit+0x44>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6593      	str	r3, [r2, #88]	; 0x58
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_MspInit+0x44>)
 8001858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	603b      	str	r3, [r7, #0]
 8001860:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001862:	f000 fccb 	bl	80021fc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1c      	ldr	r2, [pc, #112]	; (80018f4 <HAL_TIM_Base_MspInit+0x80>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d10c      	bne.n	80018a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <HAL_TIM_Base_MspInit+0x84>)
 8001888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800188a:	4a1b      	ldr	r2, [pc, #108]	; (80018f8 <HAL_TIM_Base_MspInit+0x84>)
 800188c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001890:	6613      	str	r3, [r2, #96]	; 0x60
 8001892:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_TIM_Base_MspInit+0x84>)
 8001894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800189e:	e022      	b.n	80018e6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a15      	ldr	r2, [pc, #84]	; (80018fc <HAL_TIM_Base_MspInit+0x88>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d10c      	bne.n	80018c4 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018aa:	4b13      	ldr	r3, [pc, #76]	; (80018f8 <HAL_TIM_Base_MspInit+0x84>)
 80018ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ae:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <HAL_TIM_Base_MspInit+0x84>)
 80018b0:	f043 0304 	orr.w	r3, r3, #4
 80018b4:	6593      	str	r3, [r2, #88]	; 0x58
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <HAL_TIM_Base_MspInit+0x84>)
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	f003 0304 	and.w	r3, r3, #4
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]
}
 80018c2:	e010      	b.n	80018e6 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM8)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <HAL_TIM_Base_MspInit+0x8c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d10b      	bne.n	80018e6 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_TIM_Base_MspInit+0x84>)
 80018d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_TIM_Base_MspInit+0x84>)
 80018d4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018d8:	6613      	str	r3, [r2, #96]	; 0x60
 80018da:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <HAL_TIM_Base_MspInit+0x84>)
 80018dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
}
 80018e6:	bf00      	nop
 80018e8:	371c      	adds	r7, #28
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	40021000 	.word	0x40021000
 80018fc:	40000800 	.word	0x40000800
 8001900:	40013400 	.word	0x40013400

08001904 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	2200      	movs	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	605a      	str	r2, [r3, #4]
 8001916:	609a      	str	r2, [r3, #8]
 8001918:	60da      	str	r2, [r3, #12]
 800191a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <HAL_TIM_MspPostInit+0xf8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d11e      	bne.n	8001964 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	4b36      	ldr	r3, [pc, #216]	; (8001a00 <HAL_TIM_MspPostInit+0xfc>)
 8001928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800192a:	4a35      	ldr	r2, [pc, #212]	; (8001a00 <HAL_TIM_MspPostInit+0xfc>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001932:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <HAL_TIM_MspPostInit+0xfc>)
 8001934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	613b      	str	r3, [r7, #16]
 800193c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800193e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001942:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001944:	2302      	movs	r3, #2
 8001946:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001950:	2306      	movs	r3, #6
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	4619      	mov	r1, r3
 800195a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195e:	f000 fa0f 	bl	8001d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001962:	e046      	b.n	80019f2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a26      	ldr	r2, [pc, #152]	; (8001a04 <HAL_TIM_MspPostInit+0x100>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d11e      	bne.n	80019ac <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800196e:	4b24      	ldr	r3, [pc, #144]	; (8001a00 <HAL_TIM_MspPostInit+0xfc>)
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a23      	ldr	r2, [pc, #140]	; (8001a00 <HAL_TIM_MspPostInit+0xfc>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_TIM_MspPostInit+0xfc>)
 800197c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	60fb      	str	r3, [r7, #12]
 8001984:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001986:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800198a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800198c:	2302      	movs	r3, #2
 800198e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001994:	2300      	movs	r3, #0
 8001996:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001998:	230a      	movs	r3, #10
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800199c:	f107 0314 	add.w	r3, r7, #20
 80019a0:	4619      	mov	r1, r3
 80019a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019a6:	f000 f9eb 	bl	8001d80 <HAL_GPIO_Init>
}
 80019aa:	e022      	b.n	80019f2 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM8)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a15      	ldr	r2, [pc, #84]	; (8001a08 <HAL_TIM_MspPostInit+0x104>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d11d      	bne.n	80019f2 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b6:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_TIM_MspPostInit+0xfc>)
 80019b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ba:	4a11      	ldr	r2, [pc, #68]	; (8001a00 <HAL_TIM_MspPostInit+0xfc>)
 80019bc:	f043 0301 	orr.w	r3, r3, #1
 80019c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_TIM_MspPostInit+0xfc>)
 80019c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80019ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80019e0:	2302      	movs	r3, #2
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	4619      	mov	r1, r3
 80019ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ee:	f000 f9c7 	bl	8001d80 <HAL_GPIO_Init>
}
 80019f2:	bf00      	nop
 80019f4:	3728      	adds	r7, #40	; 0x28
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40012c00 	.word	0x40012c00
 8001a00:	40021000 	.word	0x40021000
 8001a04:	40000800 	.word	0x40000800
 8001a08:	40013400 	.word	0x40013400

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a10:	e7fe      	b.n	8001a10 <NMI_Handler+0x4>

08001a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <MemManage_Handler+0x4>

08001a1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a22:	e7fe      	b.n	8001a22 <BusFault_Handler+0x4>

08001a24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a28:	e7fe      	b.n	8001a28 <UsageFault_Handler+0x4>

08001a2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a2a:	b480      	push	{r7}
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a46:	b480      	push	{r7}
 8001a48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a58:	f000 f890 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <SystemInit+0x20>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <SystemInit+0x20>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a84:	480d      	ldr	r0, [pc, #52]	; (8001abc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a86:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a88:	f7ff ffea 	bl	8001a60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a8c:	480c      	ldr	r0, [pc, #48]	; (8001ac0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a8e:	490d      	ldr	r1, [pc, #52]	; (8001ac4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a90:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <LoopForever+0xe>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa4:	4c0a      	ldr	r4, [pc, #40]	; (8001ad0 <LoopForever+0x16>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001ab2:	f002 fa87 	bl	8003fc4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ab6:	f7ff fb37 	bl	8001128 <main>

08001aba <LoopForever>:

LoopForever:
    b LoopForever
 8001aba:	e7fe      	b.n	8001aba <LoopForever>
  ldr   r0, =_estack
 8001abc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001ac0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001ac8:	08004114 	.word	0x08004114
  ldr r2, =_sbss
 8001acc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001ad0:	200002a0 	.word	0x200002a0

08001ad4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad4:	e7fe      	b.n	8001ad4 <ADC1_2_IRQHandler>

08001ad6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001adc:	2300      	movs	r3, #0
 8001ade:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae0:	2003      	movs	r0, #3
 8001ae2:	f000 f91b 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae6:	200f      	movs	r0, #15
 8001ae8:	f000 f80e 	bl	8001b08 <HAL_InitTick>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	71fb      	strb	r3, [r7, #7]
 8001af6:	e001      	b.n	8001afc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001af8:	f7ff fe98 	bl	800182c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001afc:	79fb      	ldrb	r3, [r7, #7]

}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
	...

08001b08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_InitTick+0x68>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d022      	beq.n	8001b62 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <HAL_InitTick+0x6c>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4b13      	ldr	r3, [pc, #76]	; (8001b70 <HAL_InitTick+0x68>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b28:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f918 	bl	8001d66 <HAL_SYSTICK_Config>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10f      	bne.n	8001b5c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b0f      	cmp	r3, #15
 8001b40:	d809      	bhi.n	8001b56 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b42:	2200      	movs	r2, #0
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b4a:	f000 f8f2 	bl	8001d32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_InitTick+0x70>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	e007      	b.n	8001b66 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
 8001b5a:	e004      	b.n	8001b66 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	e001      	b.n	8001b66 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	20000008 	.word	0x20000008
 8001b74:	20000000 	.word	0x20000000
 8001b78:	20000004 	.word	0x20000004

08001b7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b80:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_IncTick+0x1c>)
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	4b05      	ldr	r3, [pc, #20]	; (8001b9c <HAL_IncTick+0x20>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a03      	ldr	r2, [pc, #12]	; (8001b98 <HAL_IncTick+0x1c>)
 8001b8c:	6013      	str	r3, [r2, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	2000015c 	.word	0x2000015c
 8001b9c:	20000008 	.word	0x20000008

08001ba0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba4:	4b03      	ldr	r3, [pc, #12]	; (8001bb4 <HAL_GetTick+0x14>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	2000015c 	.word	0x2000015c

08001bb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001be8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bea:	4a04      	ldr	r2, [pc, #16]	; (8001bfc <__NVIC_SetPriorityGrouping+0x44>)
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	60d3      	str	r3, [r2, #12]
}
 8001bf0:	bf00      	nop
 8001bf2:	3714      	adds	r7, #20
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	e000ed00 	.word	0xe000ed00

08001c00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c04:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <__NVIC_GetPriorityGrouping+0x18>)
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	0a1b      	lsrs	r3, r3, #8
 8001c0a:	f003 0307 	and.w	r3, r3, #7
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	e000ed00 	.word	0xe000ed00

08001c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	6039      	str	r1, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	db0a      	blt.n	8001c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	b2da      	uxtb	r2, r3
 8001c34:	490c      	ldr	r1, [pc, #48]	; (8001c68 <__NVIC_SetPriority+0x4c>)
 8001c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3a:	0112      	lsls	r2, r2, #4
 8001c3c:	b2d2      	uxtb	r2, r2
 8001c3e:	440b      	add	r3, r1
 8001c40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c44:	e00a      	b.n	8001c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	b2da      	uxtb	r2, r3
 8001c4a:	4908      	ldr	r1, [pc, #32]	; (8001c6c <__NVIC_SetPriority+0x50>)
 8001c4c:	79fb      	ldrb	r3, [r7, #7]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	3b04      	subs	r3, #4
 8001c54:	0112      	lsls	r2, r2, #4
 8001c56:	b2d2      	uxtb	r2, r2
 8001c58:	440b      	add	r3, r1
 8001c5a:	761a      	strb	r2, [r3, #24]
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	e000e100 	.word	0xe000e100
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b089      	sub	sp, #36	; 0x24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	f1c3 0307 	rsb	r3, r3, #7
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	bf28      	it	cs
 8001c8e:	2304      	movcs	r3, #4
 8001c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	3304      	adds	r3, #4
 8001c96:	2b06      	cmp	r3, #6
 8001c98:	d902      	bls.n	8001ca0 <NVIC_EncodePriority+0x30>
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	3b03      	subs	r3, #3
 8001c9e:	e000      	b.n	8001ca2 <NVIC_EncodePriority+0x32>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	401a      	ands	r2, r3
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cb8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc2:	43d9      	mvns	r1, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cc8:	4313      	orrs	r3, r2
         );
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3724      	adds	r7, #36	; 0x24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cfc:	f7ff ff8e 	bl	8001c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff47 	bl	8001bb8 <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d40:	f7ff ff5e 	bl	8001c00 <__NVIC_GetPriorityGrouping>
 8001d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	68b9      	ldr	r1, [r7, #8]
 8001d4a:	6978      	ldr	r0, [r7, #20]
 8001d4c:	f7ff ff90 	bl	8001c70 <NVIC_EncodePriority>
 8001d50:	4602      	mov	r2, r0
 8001d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d56:	4611      	mov	r1, r2
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff5f 	bl	8001c1c <__NVIC_SetPriority>
}
 8001d5e:	bf00      	nop
 8001d60:	3718      	adds	r7, #24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b082      	sub	sp, #8
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f7ff ffb2 	bl	8001cd8 <SysTick_Config>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
	...

08001d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d8e:	e15a      	b.n	8002046 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	2101      	movs	r1, #1
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 814c 	beq.w	8002040 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 0303 	and.w	r3, r3, #3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d005      	beq.n	8001dc0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d130      	bne.n	8001e22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001df6:	2201      	movs	r2, #1
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	091b      	lsrs	r3, r3, #4
 8001e0c:	f003 0201 	and.w	r2, r3, #1
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d017      	beq.n	8001e5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	4013      	ands	r3, r2
 8001e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d123      	bne.n	8001eb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	08da      	lsrs	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3208      	adds	r2, #8
 8001e72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	220f      	movs	r2, #15
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	691a      	ldr	r2, [r3, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	08da      	lsrs	r2, r3, #3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3208      	adds	r2, #8
 8001eac:	6939      	ldr	r1, [r7, #16]
 8001eae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f003 0203 	and.w	r2, r3, #3
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	f000 80a6 	beq.w	8002040 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef4:	4b5b      	ldr	r3, [pc, #364]	; (8002064 <HAL_GPIO_Init+0x2e4>)
 8001ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef8:	4a5a      	ldr	r2, [pc, #360]	; (8002064 <HAL_GPIO_Init+0x2e4>)
 8001efa:	f043 0301 	orr.w	r3, r3, #1
 8001efe:	6613      	str	r3, [r2, #96]	; 0x60
 8001f00:	4b58      	ldr	r3, [pc, #352]	; (8002064 <HAL_GPIO_Init+0x2e4>)
 8001f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	60bb      	str	r3, [r7, #8]
 8001f0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f0c:	4a56      	ldr	r2, [pc, #344]	; (8002068 <HAL_GPIO_Init+0x2e8>)
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	3302      	adds	r3, #2
 8001f14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f1a:	697b      	ldr	r3, [r7, #20]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	220f      	movs	r2, #15
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f36:	d01f      	beq.n	8001f78 <HAL_GPIO_Init+0x1f8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	4a4c      	ldr	r2, [pc, #304]	; (800206c <HAL_GPIO_Init+0x2ec>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d019      	beq.n	8001f74 <HAL_GPIO_Init+0x1f4>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a4b      	ldr	r2, [pc, #300]	; (8002070 <HAL_GPIO_Init+0x2f0>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d013      	beq.n	8001f70 <HAL_GPIO_Init+0x1f0>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a4a      	ldr	r2, [pc, #296]	; (8002074 <HAL_GPIO_Init+0x2f4>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00d      	beq.n	8001f6c <HAL_GPIO_Init+0x1ec>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a49      	ldr	r2, [pc, #292]	; (8002078 <HAL_GPIO_Init+0x2f8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d007      	beq.n	8001f68 <HAL_GPIO_Init+0x1e8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a48      	ldr	r2, [pc, #288]	; (800207c <HAL_GPIO_Init+0x2fc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d101      	bne.n	8001f64 <HAL_GPIO_Init+0x1e4>
 8001f60:	2305      	movs	r3, #5
 8001f62:	e00a      	b.n	8001f7a <HAL_GPIO_Init+0x1fa>
 8001f64:	2306      	movs	r3, #6
 8001f66:	e008      	b.n	8001f7a <HAL_GPIO_Init+0x1fa>
 8001f68:	2304      	movs	r3, #4
 8001f6a:	e006      	b.n	8001f7a <HAL_GPIO_Init+0x1fa>
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e004      	b.n	8001f7a <HAL_GPIO_Init+0x1fa>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e002      	b.n	8001f7a <HAL_GPIO_Init+0x1fa>
 8001f74:	2301      	movs	r3, #1
 8001f76:	e000      	b.n	8001f7a <HAL_GPIO_Init+0x1fa>
 8001f78:	2300      	movs	r3, #0
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	f002 0203 	and.w	r2, r2, #3
 8001f80:	0092      	lsls	r2, r2, #2
 8001f82:	4093      	lsls	r3, r2
 8001f84:	693a      	ldr	r2, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f8a:	4937      	ldr	r1, [pc, #220]	; (8002068 <HAL_GPIO_Init+0x2e8>)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	693a      	ldr	r2, [r7, #16]
 8001f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f98:	4b39      	ldr	r3, [pc, #228]	; (8002080 <HAL_GPIO_Init+0x300>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	43db      	mvns	r3, r3
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fbc:	4a30      	ldr	r2, [pc, #192]	; (8002080 <HAL_GPIO_Init+0x300>)
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fc2:	4b2f      	ldr	r3, [pc, #188]	; (8002080 <HAL_GPIO_Init+0x300>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fe6:	4a26      	ldr	r2, [pc, #152]	; (8002080 <HAL_GPIO_Init+0x300>)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001fec:	4b24      	ldr	r3, [pc, #144]	; (8002080 <HAL_GPIO_Init+0x300>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	d003      	beq.n	8002010 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4313      	orrs	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002010:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <HAL_GPIO_Init+0x300>)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002016:	4b1a      	ldr	r3, [pc, #104]	; (8002080 <HAL_GPIO_Init+0x300>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43db      	mvns	r3, r3
 8002020:	693a      	ldr	r2, [r7, #16]
 8002022:	4013      	ands	r3, r2
 8002024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4313      	orrs	r3, r2
 8002038:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800203a:	4a11      	ldr	r2, [pc, #68]	; (8002080 <HAL_GPIO_Init+0x300>)
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3301      	adds	r3, #1
 8002044:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	f47f ae9d 	bne.w	8001d90 <HAL_GPIO_Init+0x10>
  }
}
 8002056:	bf00      	nop
 8002058:	bf00      	nop
 800205a:	371c      	adds	r7, #28
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr
 8002064:	40021000 	.word	0x40021000
 8002068:	40010000 	.word	0x40010000
 800206c:	48000400 	.word	0x48000400
 8002070:	48000800 	.word	0x48000800
 8002074:	48000c00 	.word	0x48000c00
 8002078:	48001000 	.word	0x48001000
 800207c:	48001400 	.word	0x48001400
 8002080:	40010400 	.word	0x40010400

08002084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	807b      	strh	r3, [r7, #2]
 8002090:	4613      	mov	r3, r2
 8002092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002094:	787b      	ldrb	r3, [r7, #1]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800209a:	887a      	ldrh	r2, [r7, #2]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020a0:	e002      	b.n	80020a8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d141      	bne.n	8002146 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80020c2:	4b4b      	ldr	r3, [pc, #300]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ce:	d131      	bne.n	8002134 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020d0:	4b47      	ldr	r3, [pc, #284]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020d6:	4a46      	ldr	r2, [pc, #280]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e0:	4b43      	ldr	r3, [pc, #268]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020e8:	4a41      	ldr	r2, [pc, #260]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020f0:	4b40      	ldr	r3, [pc, #256]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2232      	movs	r2, #50	; 0x32
 80020f6:	fb02 f303 	mul.w	r3, r2, r3
 80020fa:	4a3f      	ldr	r2, [pc, #252]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002100:	0c9b      	lsrs	r3, r3, #18
 8002102:	3301      	adds	r3, #1
 8002104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002106:	e002      	b.n	800210e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	3b01      	subs	r3, #1
 800210c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800210e:	4b38      	ldr	r3, [pc, #224]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002110:	695b      	ldr	r3, [r3, #20]
 8002112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800211a:	d102      	bne.n	8002122 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d1f2      	bne.n	8002108 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002122:	4b33      	ldr	r3, [pc, #204]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800212e:	d158      	bne.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002130:	2303      	movs	r3, #3
 8002132:	e057      	b.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002134:	4b2e      	ldr	r3, [pc, #184]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800213a:	4a2d      	ldr	r2, [pc, #180]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800213c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002144:	e04d      	b.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800214c:	d141      	bne.n	80021d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800214e:	4b28      	ldr	r3, [pc, #160]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215a:	d131      	bne.n	80021c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800215c:	4b24      	ldr	r3, [pc, #144]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800215e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002162:	4a23      	ldr	r2, [pc, #140]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002168:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800216c:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002174:	4a1e      	ldr	r2, [pc, #120]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800217a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2232      	movs	r2, #50	; 0x32
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002188:	fba2 2303 	umull	r2, r3, r2, r3
 800218c:	0c9b      	lsrs	r3, r3, #18
 800218e:	3301      	adds	r3, #1
 8002190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002192:	e002      	b.n	800219a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3b01      	subs	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a6:	d102      	bne.n	80021ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f2      	bne.n	8002194 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021ae:	4b10      	ldr	r3, [pc, #64]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ba:	d112      	bne.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e011      	b.n	80021e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021c6:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021d0:	e007      	b.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021d2:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021da:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021e0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr
 80021f0:	40007000 	.word	0x40007000
 80021f4:	20000000 	.word	0x20000000
 80021f8:	431bde83 	.word	0x431bde83

080021fc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800220a:	6093      	str	r3, [r2, #8]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40007000 	.word	0x40007000

0800221c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e2fe      	b.n	800282c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d075      	beq.n	8002326 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223a:	4b97      	ldr	r3, [pc, #604]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002244:	4b94      	ldr	r3, [pc, #592]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	f003 0303 	and.w	r3, r3, #3
 800224c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	d102      	bne.n	800225a <HAL_RCC_OscConfig+0x3e>
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b03      	cmp	r3, #3
 8002258:	d002      	beq.n	8002260 <HAL_RCC_OscConfig+0x44>
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b08      	cmp	r3, #8
 800225e:	d10b      	bne.n	8002278 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002260:	4b8d      	ldr	r3, [pc, #564]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d05b      	beq.n	8002324 <HAL_RCC_OscConfig+0x108>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d157      	bne.n	8002324 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e2d9      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002280:	d106      	bne.n	8002290 <HAL_RCC_OscConfig+0x74>
 8002282:	4b85      	ldr	r3, [pc, #532]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a84      	ldr	r2, [pc, #528]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800228c:	6013      	str	r3, [r2, #0]
 800228e:	e01d      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002298:	d10c      	bne.n	80022b4 <HAL_RCC_OscConfig+0x98>
 800229a:	4b7f      	ldr	r3, [pc, #508]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a7e      	ldr	r2, [pc, #504]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	4b7c      	ldr	r3, [pc, #496]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a7b      	ldr	r2, [pc, #492]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022b0:	6013      	str	r3, [r2, #0]
 80022b2:	e00b      	b.n	80022cc <HAL_RCC_OscConfig+0xb0>
 80022b4:	4b78      	ldr	r3, [pc, #480]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a77      	ldr	r2, [pc, #476]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b75      	ldr	r3, [pc, #468]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a74      	ldr	r2, [pc, #464]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d013      	beq.n	80022fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022d4:	f7ff fc64 	bl	8001ba0 <HAL_GetTick>
 80022d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022da:	e008      	b.n	80022ee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022dc:	f7ff fc60 	bl	8001ba0 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	2b64      	cmp	r3, #100	; 0x64
 80022e8:	d901      	bls.n	80022ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ea:	2303      	movs	r3, #3
 80022ec:	e29e      	b.n	800282c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ee:	4b6a      	ldr	r3, [pc, #424]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0f0      	beq.n	80022dc <HAL_RCC_OscConfig+0xc0>
 80022fa:	e014      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7ff fc50 	bl	8001ba0 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7ff fc4c 	bl	8001ba0 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e28a      	b.n	800282c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002316:	4b60      	ldr	r3, [pc, #384]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f0      	bne.n	8002304 <HAL_RCC_OscConfig+0xe8>
 8002322:	e000      	b.n	8002326 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002324:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 0302 	and.w	r3, r3, #2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d075      	beq.n	800241e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002332:	4b59      	ldr	r3, [pc, #356]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800233c:	4b56      	ldr	r3, [pc, #344]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	2b0c      	cmp	r3, #12
 800234a:	d102      	bne.n	8002352 <HAL_RCC_OscConfig+0x136>
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2b02      	cmp	r3, #2
 8002350:	d002      	beq.n	8002358 <HAL_RCC_OscConfig+0x13c>
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	2b04      	cmp	r3, #4
 8002356:	d11f      	bne.n	8002398 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002358:	4b4f      	ldr	r3, [pc, #316]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_OscConfig+0x154>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e25d      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002370:	4b49      	ldr	r3, [pc, #292]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	4946      	ldr	r1, [pc, #280]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002380:	4313      	orrs	r3, r2
 8002382:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002384:	4b45      	ldr	r3, [pc, #276]	; (800249c <HAL_RCC_OscConfig+0x280>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4618      	mov	r0, r3
 800238a:	f7ff fbbd 	bl	8001b08 <HAL_InitTick>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d043      	beq.n	800241c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e249      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d023      	beq.n	80023e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023a0:	4b3d      	ldr	r3, [pc, #244]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a3c      	ldr	r2, [pc, #240]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7ff fbf8 	bl	8001ba0 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b4:	f7ff fbf4 	bl	8001ba0 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e232      	b.n	800282c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023c6:	4b34      	ldr	r3, [pc, #208]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d2:	4b31      	ldr	r3, [pc, #196]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	061b      	lsls	r3, r3, #24
 80023e0:	492d      	ldr	r1, [pc, #180]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	604b      	str	r3, [r1, #4]
 80023e6:	e01a      	b.n	800241e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a2a      	ldr	r2, [pc, #168]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 80023ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7ff fbd4 	bl	8001ba0 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023fc:	f7ff fbd0 	bl	8001ba0 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e20e      	b.n	800282c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800240e:	4b22      	ldr	r3, [pc, #136]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f0      	bne.n	80023fc <HAL_RCC_OscConfig+0x1e0>
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800241c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d041      	beq.n	80024ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d01c      	beq.n	800246c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002432:	4b19      	ldr	r3, [pc, #100]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002438:	4a17      	ldr	r2, [pc, #92]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002442:	f7ff fbad 	bl	8001ba0 <HAL_GetTick>
 8002446:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244a:	f7ff fba9 	bl	8001ba0 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e1e7      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800245c:	4b0e      	ldr	r3, [pc, #56]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 800245e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0ef      	beq.n	800244a <HAL_RCC_OscConfig+0x22e>
 800246a:	e020      	b.n	80024ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800246c:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 800246e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002472:	4a09      	ldr	r2, [pc, #36]	; (8002498 <HAL_RCC_OscConfig+0x27c>)
 8002474:	f023 0301 	bic.w	r3, r3, #1
 8002478:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247c:	f7ff fb90 	bl	8001ba0 <HAL_GetTick>
 8002480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002482:	e00d      	b.n	80024a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002484:	f7ff fb8c 	bl	8001ba0 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d906      	bls.n	80024a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e1ca      	b.n	800282c <HAL_RCC_OscConfig+0x610>
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80024a0:	4b8c      	ldr	r3, [pc, #560]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80024a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1ea      	bne.n	8002484 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	f000 80a6 	beq.w	8002608 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024bc:	2300      	movs	r3, #0
 80024be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024c0:	4b84      	ldr	r3, [pc, #528]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d101      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2b4>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_RCC_OscConfig+0x2b6>
 80024d0:	2300      	movs	r3, #0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	4b7f      	ldr	r3, [pc, #508]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80024d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024da:	4a7e      	ldr	r2, [pc, #504]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80024dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e0:	6593      	str	r3, [r2, #88]	; 0x58
 80024e2:	4b7c      	ldr	r3, [pc, #496]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024ee:	2301      	movs	r3, #1
 80024f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f2:	4b79      	ldr	r3, [pc, #484]	; (80026d8 <HAL_RCC_OscConfig+0x4bc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d118      	bne.n	8002530 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024fe:	4b76      	ldr	r3, [pc, #472]	; (80026d8 <HAL_RCC_OscConfig+0x4bc>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a75      	ldr	r2, [pc, #468]	; (80026d8 <HAL_RCC_OscConfig+0x4bc>)
 8002504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002508:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250a:	f7ff fb49 	bl	8001ba0 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002512:	f7ff fb45 	bl	8001ba0 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e183      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002524:	4b6c      	ldr	r3, [pc, #432]	; (80026d8 <HAL_RCC_OscConfig+0x4bc>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d108      	bne.n	800254a <HAL_RCC_OscConfig+0x32e>
 8002538:	4b66      	ldr	r3, [pc, #408]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	4a65      	ldr	r2, [pc, #404]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002540:	f043 0301 	orr.w	r3, r3, #1
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002548:	e024      	b.n	8002594 <HAL_RCC_OscConfig+0x378>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b05      	cmp	r3, #5
 8002550:	d110      	bne.n	8002574 <HAL_RCC_OscConfig+0x358>
 8002552:	4b60      	ldr	r3, [pc, #384]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	4a5e      	ldr	r2, [pc, #376]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800255a:	f043 0304 	orr.w	r3, r3, #4
 800255e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002562:	4b5c      	ldr	r3, [pc, #368]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	4a5a      	ldr	r2, [pc, #360]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002572:	e00f      	b.n	8002594 <HAL_RCC_OscConfig+0x378>
 8002574:	4b57      	ldr	r3, [pc, #348]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	4a56      	ldr	r2, [pc, #344]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002584:	4b53      	ldr	r3, [pc, #332]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	4a52      	ldr	r2, [pc, #328]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800258c:	f023 0304 	bic.w	r3, r3, #4
 8002590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d016      	beq.n	80025ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7ff fb00 	bl	8001ba0 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a2:	e00a      	b.n	80025ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025a4:	f7ff fafc 	bl	8001ba0 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d901      	bls.n	80025ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80025b6:	2303      	movs	r3, #3
 80025b8:	e138      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ba:	4b46      	ldr	r3, [pc, #280]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	f003 0302 	and.w	r3, r3, #2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d0ed      	beq.n	80025a4 <HAL_RCC_OscConfig+0x388>
 80025c8:	e015      	b.n	80025f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7ff fae9 	bl	8001ba0 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7ff fae5 	bl	8001ba0 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e121      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025e8:	4b3a      	ldr	r3, [pc, #232]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80025ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ed      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025f6:	7ffb      	ldrb	r3, [r7, #31]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d105      	bne.n	8002608 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025fc:	4b35      	ldr	r3, [pc, #212]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	4a34      	ldr	r2, [pc, #208]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002606:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0320 	and.w	r3, r3, #32
 8002610:	2b00      	cmp	r3, #0
 8002612:	d03c      	beq.n	800268e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01c      	beq.n	8002656 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800261c:	4b2d      	ldr	r3, [pc, #180]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800261e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002622:	4a2c      	ldr	r2, [pc, #176]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7ff fab8 	bl	8001ba0 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002634:	f7ff fab4 	bl	8001ba0 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e0f2      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002646:	4b23      	ldr	r3, [pc, #140]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002648:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0ef      	beq.n	8002634 <HAL_RCC_OscConfig+0x418>
 8002654:	e01b      	b.n	800268e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002656:	4b1f      	ldr	r3, [pc, #124]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002658:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800265c:	4a1d      	ldr	r2, [pc, #116]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800265e:	f023 0301 	bic.w	r3, r3, #1
 8002662:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002666:	f7ff fa9b 	bl	8001ba0 <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800266e:	f7ff fa97 	bl	8001ba0 <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e0d5      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002680:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 8002682:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1ef      	bne.n	800266e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80c9 	beq.w	800282a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b0c      	cmp	r3, #12
 80026a2:	f000 8083 	beq.w	80027ac <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	69db      	ldr	r3, [r3, #28]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d15e      	bne.n	800276c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a08      	ldr	r2, [pc, #32]	; (80026d4 <HAL_RCC_OscConfig+0x4b8>)
 80026b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7ff fa71 	bl	8001ba0 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c0:	e00c      	b.n	80026dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c2:	f7ff fa6d 	bl	8001ba0 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d905      	bls.n	80026dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e0ab      	b.n	800282c <HAL_RCC_OscConfig+0x610>
 80026d4:	40021000 	.word	0x40021000
 80026d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026dc:	4b55      	ldr	r3, [pc, #340]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ec      	bne.n	80026c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026e8:	4b52      	ldr	r3, [pc, #328]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	4b52      	ldr	r3, [pc, #328]	; (8002838 <HAL_RCC_OscConfig+0x61c>)
 80026ee:	4013      	ands	r3, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6a11      	ldr	r1, [r2, #32]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026f8:	3a01      	subs	r2, #1
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	4311      	orrs	r1, r2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002702:	0212      	lsls	r2, r2, #8
 8002704:	4311      	orrs	r1, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800270a:	0852      	lsrs	r2, r2, #1
 800270c:	3a01      	subs	r2, #1
 800270e:	0552      	lsls	r2, r2, #21
 8002710:	4311      	orrs	r1, r2
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002716:	0852      	lsrs	r2, r2, #1
 8002718:	3a01      	subs	r2, #1
 800271a:	0652      	lsls	r2, r2, #25
 800271c:	4311      	orrs	r1, r2
 800271e:	687a      	ldr	r2, [r7, #4]
 8002720:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002722:	06d2      	lsls	r2, r2, #27
 8002724:	430a      	orrs	r2, r1
 8002726:	4943      	ldr	r1, [pc, #268]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 8002728:	4313      	orrs	r3, r2
 800272a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800272c:	4b41      	ldr	r3, [pc, #260]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a40      	ldr	r2, [pc, #256]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 8002732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002736:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002738:	4b3e      	ldr	r3, [pc, #248]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	4a3d      	ldr	r2, [pc, #244]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 800273e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002742:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7ff fa2c 	bl	8001ba0 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274c:	f7ff fa28 	bl	8001ba0 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e066      	b.n	800282c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800275e:	4b35      	ldr	r3, [pc, #212]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x530>
 800276a:	e05e      	b.n	800282a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276c:	4b31      	ldr	r3, [pc, #196]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a30      	ldr	r2, [pc, #192]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 8002772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002778:	f7ff fa12 	bl	8001ba0 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002780:	f7ff fa0e 	bl	8001ba0 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e04c      	b.n	800282c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002792:	4b28      	ldr	r3, [pc, #160]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f0      	bne.n	8002780 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800279e:	4b25      	ldr	r3, [pc, #148]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	4924      	ldr	r1, [pc, #144]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 80027a4:	4b25      	ldr	r3, [pc, #148]	; (800283c <HAL_RCC_OscConfig+0x620>)
 80027a6:	4013      	ands	r3, r2
 80027a8:	60cb      	str	r3, [r1, #12]
 80027aa:	e03e      	b.n	800282a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	69db      	ldr	r3, [r3, #28]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e039      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80027b8:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <HAL_RCC_OscConfig+0x618>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f003 0203 	and.w	r2, r3, #3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d12c      	bne.n	8002826 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	3b01      	subs	r3, #1
 80027d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027da:	429a      	cmp	r2, r3
 80027dc:	d123      	bne.n	8002826 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d11b      	bne.n	8002826 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d113      	bne.n	8002826 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	085b      	lsrs	r3, r3, #1
 800280a:	3b01      	subs	r3, #1
 800280c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800280e:	429a      	cmp	r2, r3
 8002810:	d109      	bne.n	8002826 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281c:	085b      	lsrs	r3, r3, #1
 800281e:	3b01      	subs	r3, #1
 8002820:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002822:	429a      	cmp	r2, r3
 8002824:	d001      	beq.n	800282a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	019f800c 	.word	0x019f800c
 800283c:	feeefffc 	.word	0xfeeefffc

08002840 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e11e      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b91      	ldr	r3, [pc, #580]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 030f 	and.w	r3, r3, #15
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d910      	bls.n	8002888 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b8e      	ldr	r3, [pc, #568]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 020f 	bic.w	r2, r3, #15
 800286e:	498c      	ldr	r1, [pc, #560]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b8a      	ldr	r3, [pc, #552]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 030f 	and.w	r3, r3, #15
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e106      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b00      	cmp	r3, #0
 8002892:	d073      	beq.n	800297c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b03      	cmp	r3, #3
 800289a:	d129      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289c:	4b81      	ldr	r3, [pc, #516]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0f4      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80028ac:	f000 f966 	bl	8002b7c <RCC_GetSysClockFreqFromPLLSource>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4a7c      	ldr	r2, [pc, #496]	; (8002aa8 <HAL_RCC_ClockConfig+0x268>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d93f      	bls.n	800293a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028ba:	4b7a      	ldr	r3, [pc, #488]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d009      	beq.n	80028da <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d033      	beq.n	800293a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d12f      	bne.n	800293a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028da:	4b72      	ldr	r3, [pc, #456]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e2:	4a70      	ldr	r2, [pc, #448]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80028e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	e024      	b.n	800293a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d107      	bne.n	8002908 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028f8:	4b6a      	ldr	r3, [pc, #424]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d109      	bne.n	8002918 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e0c6      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002908:	4b66      	ldr	r3, [pc, #408]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0be      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002918:	f000 f8ce 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 800291c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800291e:	693b      	ldr	r3, [r7, #16]
 8002920:	4a61      	ldr	r2, [pc, #388]	; (8002aa8 <HAL_RCC_ClockConfig+0x268>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d909      	bls.n	800293a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002926:	4b5f      	ldr	r3, [pc, #380]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800292e:	4a5d      	ldr	r2, [pc, #372]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002934:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800293a:	4b5a      	ldr	r3, [pc, #360]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	f023 0203 	bic.w	r2, r3, #3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4957      	ldr	r1, [pc, #348]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002948:	4313      	orrs	r3, r2
 800294a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800294c:	f7ff f928 	bl	8001ba0 <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002952:	e00a      	b.n	800296a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	f7ff f924 	bl	8001ba0 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e095      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296a:	4b4e      	ldr	r3, [pc, #312]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 020c 	and.w	r2, r3, #12
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	429a      	cmp	r2, r3
 800297a:	d1eb      	bne.n	8002954 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d023      	beq.n	80029d0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d005      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002994:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	4a42      	ldr	r2, [pc, #264]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 800299a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800299e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d007      	beq.n	80029bc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80029ac:	4b3d      	ldr	r3, [pc, #244]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80029b4:	4a3b      	ldr	r2, [pc, #236]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80029b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80029ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029bc:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	4936      	ldr	r1, [pc, #216]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	608b      	str	r3, [r1, #8]
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	2b80      	cmp	r3, #128	; 0x80
 80029d4:	d105      	bne.n	80029e2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80029d6:	4b33      	ldr	r3, [pc, #204]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	4a32      	ldr	r2, [pc, #200]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 80029dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029e0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029e2:	4b2f      	ldr	r3, [pc, #188]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d21d      	bcs.n	8002a2c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f0:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f023 020f 	bic.w	r2, r3, #15
 80029f8:	4929      	ldr	r1, [pc, #164]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a00:	f7ff f8ce 	bl	8001ba0 <HAL_GetTick>
 8002a04:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a08:	f7ff f8ca 	bl	8001ba0 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e03b      	b.n	8002a96 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b20      	ldr	r3, [pc, #128]	; (8002aa0 <HAL_RCC_ClockConfig+0x260>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d1ed      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0304 	and.w	r3, r3, #4
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d008      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	4917      	ldr	r1, [pc, #92]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0308 	and.w	r3, r3, #8
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d009      	beq.n	8002a6a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	490f      	ldr	r1, [pc, #60]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a6a:	f000 f825 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <HAL_RCC_ClockConfig+0x264>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	091b      	lsrs	r3, r3, #4
 8002a76:	f003 030f 	and.w	r3, r3, #15
 8002a7a:	490c      	ldr	r1, [pc, #48]	; (8002aac <HAL_RCC_ClockConfig+0x26c>)
 8002a7c:	5ccb      	ldrb	r3, [r1, r3]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <HAL_RCC_ClockConfig+0x270>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	; (8002ab4 <HAL_RCC_ClockConfig+0x274>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff f83a 	bl	8001b08 <HAL_InitTick>
 8002a94:	4603      	mov	r3, r0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40022000 	.word	0x40022000
 8002aa4:	40021000 	.word	0x40021000
 8002aa8:	04c4b400 	.word	0x04c4b400
 8002aac:	080040fc 	.word	0x080040fc
 8002ab0:	20000000 	.word	0x20000000
 8002ab4:	20000004 	.word	0x20000004

08002ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b087      	sub	sp, #28
 8002abc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002abe:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d102      	bne.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002aca:	4b2a      	ldr	r3, [pc, #168]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	e047      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ad0:	4b27      	ldr	r3, [pc, #156]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d102      	bne.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002adc:	4b26      	ldr	r3, [pc, #152]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	e03e      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002ae2:	4b23      	ldr	r3, [pc, #140]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 030c 	and.w	r3, r3, #12
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d136      	bne.n	8002b5c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002af8:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	091b      	lsrs	r3, r3, #4
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3301      	adds	r3, #1
 8002b04:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2b03      	cmp	r3, #3
 8002b0a:	d10c      	bne.n	8002b26 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b0c:	4a1a      	ldr	r2, [pc, #104]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	4a16      	ldr	r2, [pc, #88]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b16:	68d2      	ldr	r2, [r2, #12]
 8002b18:	0a12      	lsrs	r2, r2, #8
 8002b1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	617b      	str	r3, [r7, #20]
      break;
 8002b24:	e00c      	b.n	8002b40 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002b26:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2e:	4a10      	ldr	r2, [pc, #64]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b30:	68d2      	ldr	r2, [r2, #12]
 8002b32:	0a12      	lsrs	r2, r2, #8
 8002b34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002b38:	fb02 f303 	mul.w	r3, r2, r3
 8002b3c:	617b      	str	r3, [r7, #20]
      break;
 8002b3e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	0e5b      	lsrs	r3, r3, #25
 8002b46:	f003 0303 	and.w	r3, r3, #3
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	e001      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b60:	693b      	ldr	r3, [r7, #16]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40021000 	.word	0x40021000
 8002b74:	00f42400 	.word	0x00f42400
 8002b78:	007a1200 	.word	0x007a1200

08002b7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b82:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b8c:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	091b      	lsrs	r3, r3, #4
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	3301      	adds	r3, #1
 8002b98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d10c      	bne.n	8002bba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ba0:	4a17      	ldr	r2, [pc, #92]	; (8002c00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba8:	4a14      	ldr	r2, [pc, #80]	; (8002bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002baa:	68d2      	ldr	r2, [r2, #12]
 8002bac:	0a12      	lsrs	r2, r2, #8
 8002bae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	617b      	str	r3, [r7, #20]
    break;
 8002bb8:	e00c      	b.n	8002bd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc2:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bc4:	68d2      	ldr	r2, [r2, #12]
 8002bc6:	0a12      	lsrs	r2, r2, #8
 8002bc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bcc:	fb02 f303 	mul.w	r3, r2, r3
 8002bd0:	617b      	str	r3, [r7, #20]
    break;
 8002bd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bd4:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	0e5b      	lsrs	r3, r3, #25
 8002bda:	f003 0303 	and.w	r3, r3, #3
 8002bde:	3301      	adds	r3, #1
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002bee:	687b      	ldr	r3, [r7, #4]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	371c      	adds	r7, #28
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	007a1200 	.word	0x007a1200
 8002c04:	00f42400 	.word	0x00f42400

08002c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e049      	b.n	8002cae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fe fe20 	bl	8001874 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f000 fc3a 	bl	80034c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d101      	bne.n	8002cc8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e049      	b.n	8002d5c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d106      	bne.n	8002ce2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 f841 	bl	8002d64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2202      	movs	r2, #2
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	f000 fbe3 	bl	80034c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3708      	adds	r7, #8
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d109      	bne.n	8002d9c <HAL_TIM_PWM_Start+0x24>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	e03c      	b.n	8002e16 <HAL_TIM_PWM_Start+0x9e>
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d109      	bne.n	8002db6 <HAL_TIM_PWM_Start+0x3e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	bf14      	ite	ne
 8002dae:	2301      	movne	r3, #1
 8002db0:	2300      	moveq	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	e02f      	b.n	8002e16 <HAL_TIM_PWM_Start+0x9e>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b08      	cmp	r3, #8
 8002dba:	d109      	bne.n	8002dd0 <HAL_TIM_PWM_Start+0x58>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	bf14      	ite	ne
 8002dc8:	2301      	movne	r3, #1
 8002dca:	2300      	moveq	r3, #0
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	e022      	b.n	8002e16 <HAL_TIM_PWM_Start+0x9e>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	2b0c      	cmp	r3, #12
 8002dd4:	d109      	bne.n	8002dea <HAL_TIM_PWM_Start+0x72>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	bf14      	ite	ne
 8002de2:	2301      	movne	r3, #1
 8002de4:	2300      	moveq	r3, #0
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	e015      	b.n	8002e16 <HAL_TIM_PWM_Start+0x9e>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d109      	bne.n	8002e04 <HAL_TIM_PWM_Start+0x8c>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	bf14      	ite	ne
 8002dfc:	2301      	movne	r3, #1
 8002dfe:	2300      	moveq	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	e008      	b.n	8002e16 <HAL_TIM_PWM_Start+0x9e>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d001      	beq.n	8002e1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e097      	b.n	8002f4e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d104      	bne.n	8002e2e <HAL_TIM_PWM_Start+0xb6>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2202      	movs	r2, #2
 8002e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e2c:	e023      	b.n	8002e76 <HAL_TIM_PWM_Start+0xfe>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d104      	bne.n	8002e3e <HAL_TIM_PWM_Start+0xc6>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2202      	movs	r2, #2
 8002e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e3c:	e01b      	b.n	8002e76 <HAL_TIM_PWM_Start+0xfe>
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b08      	cmp	r3, #8
 8002e42:	d104      	bne.n	8002e4e <HAL_TIM_PWM_Start+0xd6>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2202      	movs	r2, #2
 8002e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e4c:	e013      	b.n	8002e76 <HAL_TIM_PWM_Start+0xfe>
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	2b0c      	cmp	r3, #12
 8002e52:	d104      	bne.n	8002e5e <HAL_TIM_PWM_Start+0xe6>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2202      	movs	r2, #2
 8002e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e5c:	e00b      	b.n	8002e76 <HAL_TIM_PWM_Start+0xfe>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2b10      	cmp	r3, #16
 8002e62:	d104      	bne.n	8002e6e <HAL_TIM_PWM_Start+0xf6>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e6c:	e003      	b.n	8002e76 <HAL_TIM_PWM_Start+0xfe>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	6839      	ldr	r1, [r7, #0]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 ff4c 	bl	8003d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a33      	ldr	r2, [pc, #204]	; (8002f58 <HAL_TIM_PWM_Start+0x1e0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d013      	beq.n	8002eb6 <HAL_TIM_PWM_Start+0x13e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a32      	ldr	r2, [pc, #200]	; (8002f5c <HAL_TIM_PWM_Start+0x1e4>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d00e      	beq.n	8002eb6 <HAL_TIM_PWM_Start+0x13e>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a30      	ldr	r2, [pc, #192]	; (8002f60 <HAL_TIM_PWM_Start+0x1e8>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_TIM_PWM_Start+0x13e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a2f      	ldr	r2, [pc, #188]	; (8002f64 <HAL_TIM_PWM_Start+0x1ec>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_TIM_PWM_Start+0x13e>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a2d      	ldr	r2, [pc, #180]	; (8002f68 <HAL_TIM_PWM_Start+0x1f0>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <HAL_TIM_PWM_Start+0x142>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_TIM_PWM_Start+0x144>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d007      	beq.n	8002ed0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a20      	ldr	r2, [pc, #128]	; (8002f58 <HAL_TIM_PWM_Start+0x1e0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d018      	beq.n	8002f0c <HAL_TIM_PWM_Start+0x194>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d013      	beq.n	8002f0c <HAL_TIM_PWM_Start+0x194>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a20      	ldr	r2, [pc, #128]	; (8002f6c <HAL_TIM_PWM_Start+0x1f4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d00e      	beq.n	8002f0c <HAL_TIM_PWM_Start+0x194>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1f      	ldr	r2, [pc, #124]	; (8002f70 <HAL_TIM_PWM_Start+0x1f8>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d009      	beq.n	8002f0c <HAL_TIM_PWM_Start+0x194>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a17      	ldr	r2, [pc, #92]	; (8002f5c <HAL_TIM_PWM_Start+0x1e4>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d004      	beq.n	8002f0c <HAL_TIM_PWM_Start+0x194>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a16      	ldr	r2, [pc, #88]	; (8002f60 <HAL_TIM_PWM_Start+0x1e8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d115      	bne.n	8002f38 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	4b18      	ldr	r3, [pc, #96]	; (8002f74 <HAL_TIM_PWM_Start+0x1fc>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d015      	beq.n	8002f4a <HAL_TIM_PWM_Start+0x1d2>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f24:	d011      	beq.n	8002f4a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f36:	e008      	b.n	8002f4a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	e000      	b.n	8002f4c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f4a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40012c00 	.word	0x40012c00
 8002f5c:	40013400 	.word	0x40013400
 8002f60:	40014000 	.word	0x40014000
 8002f64:	40014400 	.word	0x40014400
 8002f68:	40014800 	.word	0x40014800
 8002f6c:	40000400 	.word	0x40000400
 8002f70:	40000800 	.word	0x40000800
 8002f74:	00010007 	.word	0x00010007

08002f78 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	2200      	movs	r2, #0
 8002f88:	6839      	ldr	r1, [r7, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f000 fec6 	bl	8003d1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a3e      	ldr	r2, [pc, #248]	; (8003090 <HAL_TIM_PWM_Stop+0x118>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d013      	beq.n	8002fc2 <HAL_TIM_PWM_Stop+0x4a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a3d      	ldr	r2, [pc, #244]	; (8003094 <HAL_TIM_PWM_Stop+0x11c>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00e      	beq.n	8002fc2 <HAL_TIM_PWM_Stop+0x4a>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a3b      	ldr	r2, [pc, #236]	; (8003098 <HAL_TIM_PWM_Stop+0x120>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_TIM_PWM_Stop+0x4a>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a3a      	ldr	r2, [pc, #232]	; (800309c <HAL_TIM_PWM_Stop+0x124>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d004      	beq.n	8002fc2 <HAL_TIM_PWM_Stop+0x4a>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a38      	ldr	r2, [pc, #224]	; (80030a0 <HAL_TIM_PWM_Stop+0x128>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d101      	bne.n	8002fc6 <HAL_TIM_PWM_Stop+0x4e>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_TIM_PWM_Stop+0x50>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d017      	beq.n	8002ffc <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6a1a      	ldr	r2, [r3, #32]
 8002fd2:	f241 1311 	movw	r3, #4369	; 0x1111
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10f      	bne.n	8002ffc <HAL_TIM_PWM_Stop+0x84>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6a1a      	ldr	r2, [r3, #32]
 8002fe2:	f244 4344 	movw	r3, #17476	; 0x4444
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_PWM_Stop+0x84>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ffa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	6a1a      	ldr	r2, [r3, #32]
 8003002:	f241 1311 	movw	r3, #4369	; 0x1111
 8003006:	4013      	ands	r3, r2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10f      	bne.n	800302c <HAL_TIM_PWM_Stop+0xb4>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6a1a      	ldr	r2, [r3, #32]
 8003012:	f244 4344 	movw	r3, #17476	; 0x4444
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d107      	bne.n	800302c <HAL_TIM_PWM_Stop+0xb4>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d104      	bne.n	800303c <HAL_TIM_PWM_Stop+0xc4>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800303a:	e023      	b.n	8003084 <HAL_TIM_PWM_Stop+0x10c>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b04      	cmp	r3, #4
 8003040:	d104      	bne.n	800304c <HAL_TIM_PWM_Stop+0xd4>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800304a:	e01b      	b.n	8003084 <HAL_TIM_PWM_Stop+0x10c>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	2b08      	cmp	r3, #8
 8003050:	d104      	bne.n	800305c <HAL_TIM_PWM_Stop+0xe4>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800305a:	e013      	b.n	8003084 <HAL_TIM_PWM_Stop+0x10c>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	2b0c      	cmp	r3, #12
 8003060:	d104      	bne.n	800306c <HAL_TIM_PWM_Stop+0xf4>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800306a:	e00b      	b.n	8003084 <HAL_TIM_PWM_Stop+0x10c>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b10      	cmp	r3, #16
 8003070:	d104      	bne.n	800307c <HAL_TIM_PWM_Stop+0x104>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800307a:	e003      	b.n	8003084 <HAL_TIM_PWM_Stop+0x10c>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003084:	2300      	movs	r3, #0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	40012c00 	.word	0x40012c00
 8003094:	40013400 	.word	0x40013400
 8003098:	40014000 	.word	0x40014000
 800309c:	40014400 	.word	0x40014400
 80030a0:	40014800 	.word	0x40014800

080030a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d101      	bne.n	80030c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030be:	2302      	movs	r3, #2
 80030c0:	e0ff      	b.n	80032c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2201      	movs	r2, #1
 80030c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b14      	cmp	r3, #20
 80030ce:	f200 80f0 	bhi.w	80032b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80030d2:	a201      	add	r2, pc, #4	; (adr r2, 80030d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80030d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d8:	0800312d 	.word	0x0800312d
 80030dc:	080032b3 	.word	0x080032b3
 80030e0:	080032b3 	.word	0x080032b3
 80030e4:	080032b3 	.word	0x080032b3
 80030e8:	0800316d 	.word	0x0800316d
 80030ec:	080032b3 	.word	0x080032b3
 80030f0:	080032b3 	.word	0x080032b3
 80030f4:	080032b3 	.word	0x080032b3
 80030f8:	080031af 	.word	0x080031af
 80030fc:	080032b3 	.word	0x080032b3
 8003100:	080032b3 	.word	0x080032b3
 8003104:	080032b3 	.word	0x080032b3
 8003108:	080031ef 	.word	0x080031ef
 800310c:	080032b3 	.word	0x080032b3
 8003110:	080032b3 	.word	0x080032b3
 8003114:	080032b3 	.word	0x080032b3
 8003118:	08003231 	.word	0x08003231
 800311c:	080032b3 	.word	0x080032b3
 8003120:	080032b3 	.word	0x080032b3
 8003124:	080032b3 	.word	0x080032b3
 8003128:	08003271 	.word	0x08003271
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68b9      	ldr	r1, [r7, #8]
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fa60 	bl	80035f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f042 0208 	orr.w	r2, r2, #8
 8003146:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0204 	bic.w	r2, r2, #4
 8003156:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6999      	ldr	r1, [r3, #24]
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	691a      	ldr	r2, [r3, #16]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	619a      	str	r2, [r3, #24]
      break;
 800316a:	e0a5      	b.n	80032b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	68b9      	ldr	r1, [r7, #8]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fad0 	bl	8003718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	699a      	ldr	r2, [r3, #24]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003186:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	699a      	ldr	r2, [r3, #24]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003196:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6999      	ldr	r1, [r3, #24]
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	021a      	lsls	r2, r3, #8
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	619a      	str	r2, [r3, #24]
      break;
 80031ac:	e084      	b.n	80032b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fb39 	bl	800382c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69da      	ldr	r2, [r3, #28]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 0208 	orr.w	r2, r2, #8
 80031c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	69da      	ldr	r2, [r3, #28]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0204 	bic.w	r2, r2, #4
 80031d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	69d9      	ldr	r1, [r3, #28]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	61da      	str	r2, [r3, #28]
      break;
 80031ec:	e064      	b.n	80032b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68b9      	ldr	r1, [r7, #8]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f000 fba1 	bl	800393c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69da      	ldr	r2, [r3, #28]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003208:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	69da      	ldr	r2, [r3, #28]
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003218:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	69d9      	ldr	r1, [r3, #28]
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	021a      	lsls	r2, r3, #8
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	61da      	str	r2, [r3, #28]
      break;
 800322e:	e043      	b.n	80032b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68b9      	ldr	r1, [r7, #8]
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fc0a 	bl	8003a50 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0208 	orr.w	r2, r2, #8
 800324a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f022 0204 	bic.w	r2, r2, #4
 800325a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	691a      	ldr	r2, [r3, #16]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800326e:	e023      	b.n	80032b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	4618      	mov	r0, r3
 8003278:	f000 fc4e 	bl	8003b18 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800328a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800329a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	021a      	lsls	r2, r3, #8
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80032b0:	e002      	b.n	80032b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	75fb      	strb	r3, [r7, #23]
      break;
 80032b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3718      	adds	r7, #24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop

080032cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032d6:	2300      	movs	r3, #0
 80032d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d101      	bne.n	80032e8 <HAL_TIM_ConfigClockSource+0x1c>
 80032e4:	2302      	movs	r3, #2
 80032e6:	e0de      	b.n	80034a6 <HAL_TIM_ConfigClockSource+0x1da>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003306:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800330a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a63      	ldr	r2, [pc, #396]	; (80034b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003322:	4293      	cmp	r3, r2
 8003324:	f000 80a9 	beq.w	800347a <HAL_TIM_ConfigClockSource+0x1ae>
 8003328:	4a61      	ldr	r2, [pc, #388]	; (80034b0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800332a:	4293      	cmp	r3, r2
 800332c:	f200 80ae 	bhi.w	800348c <HAL_TIM_ConfigClockSource+0x1c0>
 8003330:	4a60      	ldr	r2, [pc, #384]	; (80034b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	f000 80a1 	beq.w	800347a <HAL_TIM_ConfigClockSource+0x1ae>
 8003338:	4a5e      	ldr	r2, [pc, #376]	; (80034b4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	f200 80a6 	bhi.w	800348c <HAL_TIM_ConfigClockSource+0x1c0>
 8003340:	4a5d      	ldr	r2, [pc, #372]	; (80034b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003342:	4293      	cmp	r3, r2
 8003344:	f000 8099 	beq.w	800347a <HAL_TIM_ConfigClockSource+0x1ae>
 8003348:	4a5b      	ldr	r2, [pc, #364]	; (80034b8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800334a:	4293      	cmp	r3, r2
 800334c:	f200 809e 	bhi.w	800348c <HAL_TIM_ConfigClockSource+0x1c0>
 8003350:	4a5a      	ldr	r2, [pc, #360]	; (80034bc <HAL_TIM_ConfigClockSource+0x1f0>)
 8003352:	4293      	cmp	r3, r2
 8003354:	f000 8091 	beq.w	800347a <HAL_TIM_ConfigClockSource+0x1ae>
 8003358:	4a58      	ldr	r2, [pc, #352]	; (80034bc <HAL_TIM_ConfigClockSource+0x1f0>)
 800335a:	4293      	cmp	r3, r2
 800335c:	f200 8096 	bhi.w	800348c <HAL_TIM_ConfigClockSource+0x1c0>
 8003360:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003364:	f000 8089 	beq.w	800347a <HAL_TIM_ConfigClockSource+0x1ae>
 8003368:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800336c:	f200 808e 	bhi.w	800348c <HAL_TIM_ConfigClockSource+0x1c0>
 8003370:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003374:	d03e      	beq.n	80033f4 <HAL_TIM_ConfigClockSource+0x128>
 8003376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800337a:	f200 8087 	bhi.w	800348c <HAL_TIM_ConfigClockSource+0x1c0>
 800337e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003382:	f000 8086 	beq.w	8003492 <HAL_TIM_ConfigClockSource+0x1c6>
 8003386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338a:	d87f      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x1c0>
 800338c:	2b70      	cmp	r3, #112	; 0x70
 800338e:	d01a      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0xfa>
 8003390:	2b70      	cmp	r3, #112	; 0x70
 8003392:	d87b      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x1c0>
 8003394:	2b60      	cmp	r3, #96	; 0x60
 8003396:	d050      	beq.n	800343a <HAL_TIM_ConfigClockSource+0x16e>
 8003398:	2b60      	cmp	r3, #96	; 0x60
 800339a:	d877      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x1c0>
 800339c:	2b50      	cmp	r3, #80	; 0x50
 800339e:	d03c      	beq.n	800341a <HAL_TIM_ConfigClockSource+0x14e>
 80033a0:	2b50      	cmp	r3, #80	; 0x50
 80033a2:	d873      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x1c0>
 80033a4:	2b40      	cmp	r3, #64	; 0x40
 80033a6:	d058      	beq.n	800345a <HAL_TIM_ConfigClockSource+0x18e>
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d86f      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x1c0>
 80033ac:	2b30      	cmp	r3, #48	; 0x30
 80033ae:	d064      	beq.n	800347a <HAL_TIM_ConfigClockSource+0x1ae>
 80033b0:	2b30      	cmp	r3, #48	; 0x30
 80033b2:	d86b      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x1c0>
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d060      	beq.n	800347a <HAL_TIM_ConfigClockSource+0x1ae>
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d867      	bhi.n	800348c <HAL_TIM_ConfigClockSource+0x1c0>
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d05c      	beq.n	800347a <HAL_TIM_ConfigClockSource+0x1ae>
 80033c0:	2b10      	cmp	r3, #16
 80033c2:	d05a      	beq.n	800347a <HAL_TIM_ConfigClockSource+0x1ae>
 80033c4:	e062      	b.n	800348c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033d6:	f000 fc81 	bl	8003cdc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	609a      	str	r2, [r3, #8]
      break;
 80033f2:	e04f      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003404:	f000 fc6a 	bl	8003cdc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003416:	609a      	str	r2, [r3, #8]
      break;
 8003418:	e03c      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003426:	461a      	mov	r2, r3
 8003428:	f000 fbdc 	bl	8003be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2150      	movs	r1, #80	; 0x50
 8003432:	4618      	mov	r0, r3
 8003434:	f000 fc35 	bl	8003ca2 <TIM_ITRx_SetConfig>
      break;
 8003438:	e02c      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003446:	461a      	mov	r2, r3
 8003448:	f000 fbfb 	bl	8003c42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2160      	movs	r1, #96	; 0x60
 8003452:	4618      	mov	r0, r3
 8003454:	f000 fc25 	bl	8003ca2 <TIM_ITRx_SetConfig>
      break;
 8003458:	e01c      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003466:	461a      	mov	r2, r3
 8003468:	f000 fbbc 	bl	8003be4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2140      	movs	r1, #64	; 0x40
 8003472:	4618      	mov	r0, r3
 8003474:	f000 fc15 	bl	8003ca2 <TIM_ITRx_SetConfig>
      break;
 8003478:	e00c      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4619      	mov	r1, r3
 8003484:	4610      	mov	r0, r2
 8003486:	f000 fc0c 	bl	8003ca2 <TIM_ITRx_SetConfig>
      break;
 800348a:	e003      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	73fb      	strb	r3, [r7, #15]
      break;
 8003490:	e000      	b.n	8003494 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003492:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	00100070 	.word	0x00100070
 80034b4:	00100040 	.word	0x00100040
 80034b8:	00100030 	.word	0x00100030
 80034bc:	00100020 	.word	0x00100020

080034c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b085      	sub	sp, #20
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a42      	ldr	r2, [pc, #264]	; (80035dc <TIM_Base_SetConfig+0x11c>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d00f      	beq.n	80034f8 <TIM_Base_SetConfig+0x38>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034de:	d00b      	beq.n	80034f8 <TIM_Base_SetConfig+0x38>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a3f      	ldr	r2, [pc, #252]	; (80035e0 <TIM_Base_SetConfig+0x120>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d007      	beq.n	80034f8 <TIM_Base_SetConfig+0x38>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a3e      	ldr	r2, [pc, #248]	; (80035e4 <TIM_Base_SetConfig+0x124>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d003      	beq.n	80034f8 <TIM_Base_SetConfig+0x38>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a3d      	ldr	r2, [pc, #244]	; (80035e8 <TIM_Base_SetConfig+0x128>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d108      	bne.n	800350a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	4313      	orrs	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a33      	ldr	r2, [pc, #204]	; (80035dc <TIM_Base_SetConfig+0x11c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01b      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003518:	d017      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a30      	ldr	r2, [pc, #192]	; (80035e0 <TIM_Base_SetConfig+0x120>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d013      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a2f      	ldr	r2, [pc, #188]	; (80035e4 <TIM_Base_SetConfig+0x124>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d00f      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2e      	ldr	r2, [pc, #184]	; (80035e8 <TIM_Base_SetConfig+0x128>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d00b      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a2d      	ldr	r2, [pc, #180]	; (80035ec <TIM_Base_SetConfig+0x12c>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d007      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2c      	ldr	r2, [pc, #176]	; (80035f0 <TIM_Base_SetConfig+0x130>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d003      	beq.n	800354a <TIM_Base_SetConfig+0x8a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <TIM_Base_SetConfig+0x134>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d108      	bne.n	800355c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003550:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	4313      	orrs	r3, r2
 800355a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	4313      	orrs	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	689a      	ldr	r2, [r3, #8]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a16      	ldr	r2, [pc, #88]	; (80035dc <TIM_Base_SetConfig+0x11c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00f      	beq.n	80035a8 <TIM_Base_SetConfig+0xe8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a17      	ldr	r2, [pc, #92]	; (80035e8 <TIM_Base_SetConfig+0x128>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00b      	beq.n	80035a8 <TIM_Base_SetConfig+0xe8>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a16      	ldr	r2, [pc, #88]	; (80035ec <TIM_Base_SetConfig+0x12c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d007      	beq.n	80035a8 <TIM_Base_SetConfig+0xe8>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <TIM_Base_SetConfig+0x130>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d003      	beq.n	80035a8 <TIM_Base_SetConfig+0xe8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a14      	ldr	r2, [pc, #80]	; (80035f4 <TIM_Base_SetConfig+0x134>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d103      	bne.n	80035b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d105      	bne.n	80035ce <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	691b      	ldr	r3, [r3, #16]
 80035c6:	f023 0201 	bic.w	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	611a      	str	r2, [r3, #16]
  }
}
 80035ce:	bf00      	nop
 80035d0:	3714      	adds	r7, #20
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	40012c00 	.word	0x40012c00
 80035e0:	40000400 	.word	0x40000400
 80035e4:	40000800 	.word	0x40000800
 80035e8:	40013400 	.word	0x40013400
 80035ec:	40014000 	.word	0x40014000
 80035f0:	40014400 	.word	0x40014400
 80035f4:	40014800 	.word	0x40014800

080035f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	f023 0201 	bic.w	r2, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800362a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68fa      	ldr	r2, [r7, #12]
 800363a:	4313      	orrs	r3, r2
 800363c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f023 0302 	bic.w	r3, r3, #2
 8003644:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a2c      	ldr	r2, [pc, #176]	; (8003704 <TIM_OC1_SetConfig+0x10c>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d00f      	beq.n	8003678 <TIM_OC1_SetConfig+0x80>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a2b      	ldr	r2, [pc, #172]	; (8003708 <TIM_OC1_SetConfig+0x110>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d00b      	beq.n	8003678 <TIM_OC1_SetConfig+0x80>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a2a      	ldr	r2, [pc, #168]	; (800370c <TIM_OC1_SetConfig+0x114>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d007      	beq.n	8003678 <TIM_OC1_SetConfig+0x80>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a29      	ldr	r2, [pc, #164]	; (8003710 <TIM_OC1_SetConfig+0x118>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d003      	beq.n	8003678 <TIM_OC1_SetConfig+0x80>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a28      	ldr	r2, [pc, #160]	; (8003714 <TIM_OC1_SetConfig+0x11c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d10c      	bne.n	8003692 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	f023 0308 	bic.w	r3, r3, #8
 800367e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	697a      	ldr	r2, [r7, #20]
 8003686:	4313      	orrs	r3, r2
 8003688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	f023 0304 	bic.w	r3, r3, #4
 8003690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a1b      	ldr	r2, [pc, #108]	; (8003704 <TIM_OC1_SetConfig+0x10c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00f      	beq.n	80036ba <TIM_OC1_SetConfig+0xc2>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a1a      	ldr	r2, [pc, #104]	; (8003708 <TIM_OC1_SetConfig+0x110>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00b      	beq.n	80036ba <TIM_OC1_SetConfig+0xc2>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a19      	ldr	r2, [pc, #100]	; (800370c <TIM_OC1_SetConfig+0x114>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d007      	beq.n	80036ba <TIM_OC1_SetConfig+0xc2>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a18      	ldr	r2, [pc, #96]	; (8003710 <TIM_OC1_SetConfig+0x118>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d003      	beq.n	80036ba <TIM_OC1_SetConfig+0xc2>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a17      	ldr	r2, [pc, #92]	; (8003714 <TIM_OC1_SetConfig+0x11c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d111      	bne.n	80036de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4313      	orrs	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	621a      	str	r2, [r3, #32]
}
 80036f8:	bf00      	nop
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40013400 	.word	0x40013400
 800370c:	40014000 	.word	0x40014000
 8003710:	40014400 	.word	0x40014400
 8003714:	40014800 	.word	0x40014800

08003718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	f023 0210 	bic.w	r2, r3, #16
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003746:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003752:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	021b      	lsls	r3, r3, #8
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	f023 0320 	bic.w	r3, r3, #32
 8003766:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	011b      	lsls	r3, r3, #4
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4313      	orrs	r3, r2
 8003772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a28      	ldr	r2, [pc, #160]	; (8003818 <TIM_OC2_SetConfig+0x100>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d003      	beq.n	8003784 <TIM_OC2_SetConfig+0x6c>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a27      	ldr	r2, [pc, #156]	; (800381c <TIM_OC2_SetConfig+0x104>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d10d      	bne.n	80037a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800378a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a1d      	ldr	r2, [pc, #116]	; (8003818 <TIM_OC2_SetConfig+0x100>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d00f      	beq.n	80037c8 <TIM_OC2_SetConfig+0xb0>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a1c      	ldr	r2, [pc, #112]	; (800381c <TIM_OC2_SetConfig+0x104>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d00b      	beq.n	80037c8 <TIM_OC2_SetConfig+0xb0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	4a1b      	ldr	r2, [pc, #108]	; (8003820 <TIM_OC2_SetConfig+0x108>)
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d007      	beq.n	80037c8 <TIM_OC2_SetConfig+0xb0>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a1a      	ldr	r2, [pc, #104]	; (8003824 <TIM_OC2_SetConfig+0x10c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d003      	beq.n	80037c8 <TIM_OC2_SetConfig+0xb0>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	4a19      	ldr	r2, [pc, #100]	; (8003828 <TIM_OC2_SetConfig+0x110>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d113      	bne.n	80037f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80037ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80037d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	699b      	ldr	r3, [r3, #24]
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685a      	ldr	r2, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	621a      	str	r2, [r3, #32]
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40012c00 	.word	0x40012c00
 800381c:	40013400 	.word	0x40013400
 8003820:	40014000 	.word	0x40014000
 8003824:	40014400 	.word	0x40014400
 8003828:	40014800 	.word	0x40014800

0800382c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800382c:	b480      	push	{r7}
 800382e:	b087      	sub	sp, #28
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4313      	orrs	r3, r2
 8003870:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003878:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	021b      	lsls	r3, r3, #8
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	4313      	orrs	r3, r2
 8003884:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a27      	ldr	r2, [pc, #156]	; (8003928 <TIM_OC3_SetConfig+0xfc>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d003      	beq.n	8003896 <TIM_OC3_SetConfig+0x6a>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a26      	ldr	r2, [pc, #152]	; (800392c <TIM_OC3_SetConfig+0x100>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d10d      	bne.n	80038b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800389c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	021b      	lsls	r3, r3, #8
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a1c      	ldr	r2, [pc, #112]	; (8003928 <TIM_OC3_SetConfig+0xfc>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d00f      	beq.n	80038da <TIM_OC3_SetConfig+0xae>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a1b      	ldr	r2, [pc, #108]	; (800392c <TIM_OC3_SetConfig+0x100>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00b      	beq.n	80038da <TIM_OC3_SetConfig+0xae>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a1a      	ldr	r2, [pc, #104]	; (8003930 <TIM_OC3_SetConfig+0x104>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d007      	beq.n	80038da <TIM_OC3_SetConfig+0xae>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a19      	ldr	r2, [pc, #100]	; (8003934 <TIM_OC3_SetConfig+0x108>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d003      	beq.n	80038da <TIM_OC3_SetConfig+0xae>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a18      	ldr	r2, [pc, #96]	; (8003938 <TIM_OC3_SetConfig+0x10c>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d113      	bne.n	8003902 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80038e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80038e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	693a      	ldr	r2, [r7, #16]
 80038fe:	4313      	orrs	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	621a      	str	r2, [r3, #32]
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40013400 	.word	0x40013400
 8003930:	40014000 	.word	0x40014000
 8003934:	40014400 	.word	0x40014400
 8003938:	40014800 	.word	0x40014800

0800393c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800396a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800396e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	021b      	lsls	r3, r3, #8
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	4313      	orrs	r3, r2
 8003982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003984:	697b      	ldr	r3, [r7, #20]
 8003986:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800398a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	031b      	lsls	r3, r3, #12
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	4313      	orrs	r3, r2
 8003996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a28      	ldr	r2, [pc, #160]	; (8003a3c <TIM_OC4_SetConfig+0x100>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d003      	beq.n	80039a8 <TIM_OC4_SetConfig+0x6c>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a27      	ldr	r2, [pc, #156]	; (8003a40 <TIM_OC4_SetConfig+0x104>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d10d      	bne.n	80039c4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	031b      	lsls	r3, r3, #12
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	4313      	orrs	r3, r2
 80039ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <TIM_OC4_SetConfig+0x100>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d00f      	beq.n	80039ec <TIM_OC4_SetConfig+0xb0>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a1c      	ldr	r2, [pc, #112]	; (8003a40 <TIM_OC4_SetConfig+0x104>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00b      	beq.n	80039ec <TIM_OC4_SetConfig+0xb0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <TIM_OC4_SetConfig+0x108>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d007      	beq.n	80039ec <TIM_OC4_SetConfig+0xb0>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	4a1a      	ldr	r2, [pc, #104]	; (8003a48 <TIM_OC4_SetConfig+0x10c>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d003      	beq.n	80039ec <TIM_OC4_SetConfig+0xb0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <TIM_OC4_SetConfig+0x110>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d113      	bne.n	8003a14 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	019b      	lsls	r3, r3, #6
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	699b      	ldr	r3, [r3, #24]
 8003a0c:	019b      	lsls	r3, r3, #6
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40012c00 	.word	0x40012c00
 8003a40:	40013400 	.word	0x40013400
 8003a44:	40014000 	.word	0x40014000
 8003a48:	40014400 	.word	0x40014400
 8003a4c:	40014800 	.word	0x40014800

08003a50 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
 8003a5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68fa      	ldr	r2, [r7, #12]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a94:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	041b      	lsls	r3, r3, #16
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	4a17      	ldr	r2, [pc, #92]	; (8003b04 <TIM_OC5_SetConfig+0xb4>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d00f      	beq.n	8003aca <TIM_OC5_SetConfig+0x7a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a16      	ldr	r2, [pc, #88]	; (8003b08 <TIM_OC5_SetConfig+0xb8>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <TIM_OC5_SetConfig+0x7a>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <TIM_OC5_SetConfig+0xbc>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d007      	beq.n	8003aca <TIM_OC5_SetConfig+0x7a>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a14      	ldr	r2, [pc, #80]	; (8003b10 <TIM_OC5_SetConfig+0xc0>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d003      	beq.n	8003aca <TIM_OC5_SetConfig+0x7a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a13      	ldr	r2, [pc, #76]	; (8003b14 <TIM_OC5_SetConfig+0xc4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d109      	bne.n	8003ade <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ad0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	021b      	lsls	r3, r3, #8
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	697a      	ldr	r2, [r7, #20]
 8003ae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	621a      	str	r2, [r3, #32]
}
 8003af8:	bf00      	nop
 8003afa:	371c      	adds	r7, #28
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr
 8003b04:	40012c00 	.word	0x40012c00
 8003b08:	40013400 	.word	0x40013400
 8003b0c:	40014000 	.word	0x40014000
 8003b10:	40014400 	.word	0x40014400
 8003b14:	40014800 	.word	0x40014800

08003b18 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b087      	sub	sp, #28
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	021b      	lsls	r3, r3, #8
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	051b      	lsls	r3, r3, #20
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a18      	ldr	r2, [pc, #96]	; (8003bd0 <TIM_OC6_SetConfig+0xb8>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00f      	beq.n	8003b94 <TIM_OC6_SetConfig+0x7c>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <TIM_OC6_SetConfig+0xbc>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d00b      	beq.n	8003b94 <TIM_OC6_SetConfig+0x7c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a16      	ldr	r2, [pc, #88]	; (8003bd8 <TIM_OC6_SetConfig+0xc0>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d007      	beq.n	8003b94 <TIM_OC6_SetConfig+0x7c>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a15      	ldr	r2, [pc, #84]	; (8003bdc <TIM_OC6_SetConfig+0xc4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d003      	beq.n	8003b94 <TIM_OC6_SetConfig+0x7c>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a14      	ldr	r2, [pc, #80]	; (8003be0 <TIM_OC6_SetConfig+0xc8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d109      	bne.n	8003ba8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	029b      	lsls	r3, r3, #10
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	693a      	ldr	r2, [r7, #16]
 8003bc0:	621a      	str	r2, [r3, #32]
}
 8003bc2:	bf00      	nop
 8003bc4:	371c      	adds	r7, #28
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40013400 	.word	0x40013400
 8003bd8:	40014000 	.word	0x40014000
 8003bdc:	40014400 	.word	0x40014400
 8003be0:	40014800 	.word	0x40014800

08003be4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b087      	sub	sp, #28
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6a1b      	ldr	r3, [r3, #32]
 8003bfa:	f023 0201 	bic.w	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f023 030a 	bic.w	r3, r3, #10
 8003c20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c22:	697a      	ldr	r2, [r7, #20]
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b087      	sub	sp, #28
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f023 0210 	bic.w	r2, r3, #16
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	699b      	ldr	r3, [r3, #24]
 8003c64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	031b      	lsls	r3, r3, #12
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c7e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	697a      	ldr	r2, [r7, #20]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	697a      	ldr	r2, [r7, #20]
 8003c94:	621a      	str	r2, [r3, #32]
}
 8003c96:	bf00      	nop
 8003c98:	371c      	adds	r7, #28
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b085      	sub	sp, #20
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003cb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	f043 0307 	orr.w	r3, r3, #7
 8003cc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	609a      	str	r2, [r3, #8]
}
 8003cd0:	bf00      	nop
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cf6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	021a      	lsls	r2, r3, #8
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	431a      	orrs	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	609a      	str	r2, [r3, #8]
}
 8003d10:	bf00      	nop
 8003d12:	371c      	adds	r7, #28
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	2201      	movs	r2, #1
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	6a1a      	ldr	r2, [r3, #32]
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	401a      	ands	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6a1a      	ldr	r2, [r3, #32]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	f003 031f 	and.w	r3, r3, #31
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	fa01 f303 	lsl.w	r3, r1, r3
 8003d54:	431a      	orrs	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	621a      	str	r2, [r3, #32]
}
 8003d5a:	bf00      	nop
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
	...

08003d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e065      	b.n	8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a2c      	ldr	r2, [pc, #176]	; (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d004      	beq.n	8003db4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a2b      	ldr	r2, [pc, #172]	; (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d108      	bne.n	8003dc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003dba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003dcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68fa      	ldr	r2, [r7, #12]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d018      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df6:	d013      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a18      	ldr	r2, [pc, #96]	; (8003e60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00e      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a17      	ldr	r2, [pc, #92]	; (8003e64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d009      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a12      	ldr	r2, [pc, #72]	; (8003e5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d004      	beq.n	8003e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a13      	ldr	r2, [pc, #76]	; (8003e68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d10c      	bne.n	8003e3a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40012c00 	.word	0x40012c00
 8003e5c:	40013400 	.word	0x40013400
 8003e60:	40000400 	.word	0x40000400
 8003e64:	40000800 	.word	0x40000800
 8003e68:	40014000 	.word	0x40014000

08003e6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e76:	2300      	movs	r3, #0
 8003e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e073      	b.n	8003f70 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	695b      	ldr	r3, [r3, #20]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	041b      	lsls	r3, r3, #16
 8003efe:	4313      	orrs	r3, r2
 8003f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d004      	beq.n	8003f24 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a18      	ldr	r2, [pc, #96]	; (8003f80 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d11c      	bne.n	8003f5e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	051b      	lsls	r3, r3, #20
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6a1b      	ldr	r3, [r3, #32]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3714      	adds	r7, #20
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40013400 	.word	0x40013400

08003f84 <_ZdlPvj>:
 8003f84:	f000 b800 	b.w	8003f88 <_ZdlPv>

08003f88 <_ZdlPv>:
 8003f88:	f000 b800 	b.w	8003f8c <free>

08003f8c <free>:
 8003f8c:	4b02      	ldr	r3, [pc, #8]	; (8003f98 <free+0xc>)
 8003f8e:	4601      	mov	r1, r0
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	f000 b84b 	b.w	800402c <_free_r>
 8003f96:	bf00      	nop
 8003f98:	20000058 	.word	0x20000058

08003f9c <__malloc_lock>:
 8003f9c:	4801      	ldr	r0, [pc, #4]	; (8003fa4 <__malloc_lock+0x8>)
 8003f9e:	f000 b835 	b.w	800400c <__retarget_lock_acquire_recursive>
 8003fa2:	bf00      	nop
 8003fa4:	2000029c 	.word	0x2000029c

08003fa8 <__malloc_unlock>:
 8003fa8:	4801      	ldr	r0, [pc, #4]	; (8003fb0 <__malloc_unlock+0x8>)
 8003faa:	f000 b830 	b.w	800400e <__retarget_lock_release_recursive>
 8003fae:	bf00      	nop
 8003fb0:	2000029c 	.word	0x2000029c

08003fb4 <memset>:
 8003fb4:	4402      	add	r2, r0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d100      	bne.n	8003fbe <memset+0xa>
 8003fbc:	4770      	bx	lr
 8003fbe:	f803 1b01 	strb.w	r1, [r3], #1
 8003fc2:	e7f9      	b.n	8003fb8 <memset+0x4>

08003fc4 <__libc_init_array>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	4d0d      	ldr	r5, [pc, #52]	; (8003ffc <__libc_init_array+0x38>)
 8003fc8:	4c0d      	ldr	r4, [pc, #52]	; (8004000 <__libc_init_array+0x3c>)
 8003fca:	1b64      	subs	r4, r4, r5
 8003fcc:	10a4      	asrs	r4, r4, #2
 8003fce:	2600      	movs	r6, #0
 8003fd0:	42a6      	cmp	r6, r4
 8003fd2:	d109      	bne.n	8003fe8 <__libc_init_array+0x24>
 8003fd4:	4d0b      	ldr	r5, [pc, #44]	; (8004004 <__libc_init_array+0x40>)
 8003fd6:	4c0c      	ldr	r4, [pc, #48]	; (8004008 <__libc_init_array+0x44>)
 8003fd8:	f000 f874 	bl	80040c4 <_init>
 8003fdc:	1b64      	subs	r4, r4, r5
 8003fde:	10a4      	asrs	r4, r4, #2
 8003fe0:	2600      	movs	r6, #0
 8003fe2:	42a6      	cmp	r6, r4
 8003fe4:	d105      	bne.n	8003ff2 <__libc_init_array+0x2e>
 8003fe6:	bd70      	pop	{r4, r5, r6, pc}
 8003fe8:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fec:	4798      	blx	r3
 8003fee:	3601      	adds	r6, #1
 8003ff0:	e7ee      	b.n	8003fd0 <__libc_init_array+0xc>
 8003ff2:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff6:	4798      	blx	r3
 8003ff8:	3601      	adds	r6, #1
 8003ffa:	e7f2      	b.n	8003fe2 <__libc_init_array+0x1e>
 8003ffc:	0800410c 	.word	0x0800410c
 8004000:	0800410c 	.word	0x0800410c
 8004004:	0800410c 	.word	0x0800410c
 8004008:	08004110 	.word	0x08004110

0800400c <__retarget_lock_acquire_recursive>:
 800400c:	4770      	bx	lr

0800400e <__retarget_lock_release_recursive>:
 800400e:	4770      	bx	lr

08004010 <memcpy>:
 8004010:	440a      	add	r2, r1
 8004012:	4291      	cmp	r1, r2
 8004014:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004018:	d100      	bne.n	800401c <memcpy+0xc>
 800401a:	4770      	bx	lr
 800401c:	b510      	push	{r4, lr}
 800401e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004022:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004026:	4291      	cmp	r1, r2
 8004028:	d1f9      	bne.n	800401e <memcpy+0xe>
 800402a:	bd10      	pop	{r4, pc}

0800402c <_free_r>:
 800402c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800402e:	2900      	cmp	r1, #0
 8004030:	d044      	beq.n	80040bc <_free_r+0x90>
 8004032:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004036:	9001      	str	r0, [sp, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	f1a1 0404 	sub.w	r4, r1, #4
 800403e:	bfb8      	it	lt
 8004040:	18e4      	addlt	r4, r4, r3
 8004042:	f7ff ffab 	bl	8003f9c <__malloc_lock>
 8004046:	4a1e      	ldr	r2, [pc, #120]	; (80040c0 <_free_r+0x94>)
 8004048:	9801      	ldr	r0, [sp, #4]
 800404a:	6813      	ldr	r3, [r2, #0]
 800404c:	b933      	cbnz	r3, 800405c <_free_r+0x30>
 800404e:	6063      	str	r3, [r4, #4]
 8004050:	6014      	str	r4, [r2, #0]
 8004052:	b003      	add	sp, #12
 8004054:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004058:	f7ff bfa6 	b.w	8003fa8 <__malloc_unlock>
 800405c:	42a3      	cmp	r3, r4
 800405e:	d908      	bls.n	8004072 <_free_r+0x46>
 8004060:	6825      	ldr	r5, [r4, #0]
 8004062:	1961      	adds	r1, r4, r5
 8004064:	428b      	cmp	r3, r1
 8004066:	bf01      	itttt	eq
 8004068:	6819      	ldreq	r1, [r3, #0]
 800406a:	685b      	ldreq	r3, [r3, #4]
 800406c:	1949      	addeq	r1, r1, r5
 800406e:	6021      	streq	r1, [r4, #0]
 8004070:	e7ed      	b.n	800404e <_free_r+0x22>
 8004072:	461a      	mov	r2, r3
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	b10b      	cbz	r3, 800407c <_free_r+0x50>
 8004078:	42a3      	cmp	r3, r4
 800407a:	d9fa      	bls.n	8004072 <_free_r+0x46>
 800407c:	6811      	ldr	r1, [r2, #0]
 800407e:	1855      	adds	r5, r2, r1
 8004080:	42a5      	cmp	r5, r4
 8004082:	d10b      	bne.n	800409c <_free_r+0x70>
 8004084:	6824      	ldr	r4, [r4, #0]
 8004086:	4421      	add	r1, r4
 8004088:	1854      	adds	r4, r2, r1
 800408a:	42a3      	cmp	r3, r4
 800408c:	6011      	str	r1, [r2, #0]
 800408e:	d1e0      	bne.n	8004052 <_free_r+0x26>
 8004090:	681c      	ldr	r4, [r3, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	6053      	str	r3, [r2, #4]
 8004096:	440c      	add	r4, r1
 8004098:	6014      	str	r4, [r2, #0]
 800409a:	e7da      	b.n	8004052 <_free_r+0x26>
 800409c:	d902      	bls.n	80040a4 <_free_r+0x78>
 800409e:	230c      	movs	r3, #12
 80040a0:	6003      	str	r3, [r0, #0]
 80040a2:	e7d6      	b.n	8004052 <_free_r+0x26>
 80040a4:	6825      	ldr	r5, [r4, #0]
 80040a6:	1961      	adds	r1, r4, r5
 80040a8:	428b      	cmp	r3, r1
 80040aa:	bf04      	itt	eq
 80040ac:	6819      	ldreq	r1, [r3, #0]
 80040ae:	685b      	ldreq	r3, [r3, #4]
 80040b0:	6063      	str	r3, [r4, #4]
 80040b2:	bf04      	itt	eq
 80040b4:	1949      	addeq	r1, r1, r5
 80040b6:	6021      	streq	r1, [r4, #0]
 80040b8:	6054      	str	r4, [r2, #4]
 80040ba:	e7ca      	b.n	8004052 <_free_r+0x26>
 80040bc:	b003      	add	sp, #12
 80040be:	bd30      	pop	{r4, r5, pc}
 80040c0:	20000160 	.word	0x20000160

080040c4 <_init>:
 80040c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040c6:	bf00      	nop
 80040c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ca:	bc08      	pop	{r3}
 80040cc:	469e      	mov	lr, r3
 80040ce:	4770      	bx	lr

080040d0 <_fini>:
 80040d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040d2:	bf00      	nop
 80040d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d6:	bc08      	pop	{r3}
 80040d8:	469e      	mov	lr, r3
 80040da:	4770      	bx	lr

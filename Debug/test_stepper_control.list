
test_stepper_control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b8  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004290  08004290  00014290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042c0  080042c0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080042c0  080042c0  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080042c0  080042c0  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042c0  080042c0  000142c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080042c4  080042c4  000142c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080042c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000005c  08004324  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  08004324  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b8a2  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f15  00000000  00000000  0002b971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c98  00000000  00000000  0002d888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009ac  00000000  00000000  0002e520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e7ed  00000000  00000000  0002eecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000caaf  00000000  00000000  0004d6b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc394  00000000  00000000  0005a168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003904  00000000  00000000  001164fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00119e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004278 	.word	0x08004278

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08004278 	.word	0x08004278

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <_ZN6CmdVelC1Ev>:
#define HOLONOMICDRIVE3_H_


#include "Stepper.h"

struct CmdVel {
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	f04f 0200 	mov.w	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f04f 0200 	mov.w	r2, #0
 8000aba:	605a      	str	r2, [r3, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	f04f 0200 	mov.w	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_ZN7StepperaSERKS_>:
#ifndef SRC_STEPPER_H_
#define SRC_STEPPER_H_

#include "stm32g4xx_hal.h"

class Stepper {
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	b082      	sub	sp, #8
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
 8000adc:	687a      	ldr	r2, [r7, #4]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	1d10      	adds	r0, r2, #4
 8000ae2:	3304      	adds	r3, #4
 8000ae4:	224c      	movs	r2, #76	; 0x4c
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	f003 fb6c 	bl	80041c4 <memcpy>
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	651a      	str	r2, [r3, #80]	; 0x50
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	659a      	str	r2, [r3, #88]	; 0x58
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	65da      	str	r2, [r3, #92]	; 0x5c
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	0000      	movs	r0, r0
 8000b1c:	0000      	movs	r0, r0
	...

08000b20 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>:

#define PI 3.14159265359
#define SQRT_2_OVER_2 0.70710678118
#define SQRT_3_OVER_2 0.86602540378

HolonomicDrive3::HolonomicDrive3(Stepper stepper0, Stepper stepper1, Stepper stepper2, float wheel_radius, float wheel_distance) {
 8000b20:	b5b0      	push	{r4, r5, r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6178      	str	r0, [r7, #20]
 8000b28:	6139      	str	r1, [r7, #16]
 8000b2a:	60fa      	str	r2, [r7, #12]
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000b32:	edc7 0a00 	vstr	s1, [r7]
 8000b36:	4a28      	ldr	r2, [pc, #160]	; (8000bd8 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xb8>)
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	3304      	adds	r3, #4
 8000b40:	2402      	movs	r4, #2
 8000b42:	461d      	mov	r5, r3
 8000b44:	e004      	b.n	8000b50 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x30>
 8000b46:	4628      	mov	r0, r5
 8000b48:	f000 f9fa 	bl	8000f40 <_ZN7StepperC1Ev>
 8000b4c:	3560      	adds	r5, #96	; 0x60
 8000b4e:	3c01      	subs	r4, #1
 8000b50:	2c00      	cmp	r4, #0
 8000b52:	daf8      	bge.n	8000b46 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x26>
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f7ff ffa2 	bl	8000aa4 <_ZN6CmdVelC1Ev>
	this->steppers[0] = stepper0;
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	3304      	adds	r3, #4
 8000b64:	6939      	ldr	r1, [r7, #16]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ffb3 	bl	8000ad2 <_ZN7StepperaSERKS_>
	this->steppers[1] = stepper1;
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	3364      	adds	r3, #100	; 0x64
 8000b70:	68f9      	ldr	r1, [r7, #12]
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff ffad 	bl	8000ad2 <_ZN7StepperaSERKS_>
	this->steppers[2] = stepper2;
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	33c4      	adds	r3, #196	; 0xc4
 8000b7c:	68b9      	ldr	r1, [r7, #8]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f7ff ffa7 	bl	8000ad2 <_ZN7StepperaSERKS_>
	this->wheel_circumference = wheel_radius * 2.0 * PI;
 8000b84:	6878      	ldr	r0, [r7, #4]
 8000b86:	f7ff fcab 	bl	80004e0 <__aeabi_f2d>
 8000b8a:	4602      	mov	r2, r0
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	f7ff fb49 	bl	8000224 <__adddf3>
 8000b92:	4602      	mov	r2, r0
 8000b94:	460b      	mov	r3, r1
 8000b96:	4610      	mov	r0, r2
 8000b98:	4619      	mov	r1, r3
 8000b9a:	a30d      	add	r3, pc, #52	; (adr r3, 8000bd0 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xb0>)
 8000b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ba0:	f7ff fcf6 	bl	8000590 <__aeabi_dmul>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	4610      	mov	r0, r2
 8000baa:	4619      	mov	r1, r3
 8000bac:	f7ff ff2a 	bl	8000a04 <__aeabi_d2f>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	this->wheel_distance = wheel_distance;
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	683a      	ldr	r2, [r7, #0]
 8000bbc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bdb0      	pop	{r4, r5, r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	f3af 8000 	nop.w
 8000bd0:	54442eea 	.word	0x54442eea
 8000bd4:	400921fb 	.word	0x400921fb
 8000bd8:	08004298 	.word	0x08004298

08000bdc <_ZN15HolonomicDrive311set_cmd_velE6CmdVel>:

void HolonomicDrive3::set_cmd_vel(CmdVel cmd) {
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	60f8      	str	r0, [r7, #12]
 8000be4:	eef0 6a40 	vmov.f32	s13, s0
 8000be8:	eeb0 7a60 	vmov.f32	s14, s1
 8000bec:	eef0 7a41 	vmov.f32	s15, s2
 8000bf0:	edc7 6a00 	vstr	s13, [r7]
 8000bf4:	ed87 7a01 	vstr	s14, [r7, #4]
 8000bf8:	edc7 7a02 	vstr	s15, [r7, #8]
	this->cmd_vel = cmd;
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000c02:	463a      	mov	r2, r7
 8000c04:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000c0a:	bf00      	nop
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
	...

08000c18 <_ZN15HolonomicDrive324spin_once_motors_controlEv>:

void HolonomicDrive3::spin_once_motors_control() {
 8000c18:	b5b0      	push	{r4, r5, r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    float wheel0_mps = 0.5 * this->cmd_vel.x - SQRT_3_OVER_2 * this->cmd_vel.y - this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000c26:	4618      	mov	r0, r3
 8000c28:	f7ff fc5a 	bl	80004e0 <__aeabi_f2d>
 8000c2c:	f04f 0200 	mov.w	r2, #0
 8000c30:	4b7f      	ldr	r3, [pc, #508]	; (8000e30 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x218>)
 8000c32:	f7ff fcad 	bl	8000590 <__aeabi_dmul>
 8000c36:	4602      	mov	r2, r0
 8000c38:	460b      	mov	r3, r1
 8000c3a:	4614      	mov	r4, r2
 8000c3c:	461d      	mov	r5, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fc4b 	bl	80004e0 <__aeabi_f2d>
 8000c4a:	a375      	add	r3, pc, #468	; (adr r3, 8000e20 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x208>)
 8000c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c50:	f7ff fc9e 	bl	8000590 <__aeabi_dmul>
 8000c54:	4602      	mov	r2, r0
 8000c56:	460b      	mov	r3, r1
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	f7ff fae0 	bl	8000220 <__aeabi_dsub>
 8000c60:	4602      	mov	r2, r0
 8000c62:	460b      	mov	r3, r1
 8000c64:	4614      	mov	r4, r2
 8000c66:	461d      	mov	r5, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8000c74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c78:	ee17 0a90 	vmov	r0, s15
 8000c7c:	f7ff fc30 	bl	80004e0 <__aeabi_f2d>
 8000c80:	a369      	add	r3, pc, #420	; (adr r3, 8000e28 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x210>)
 8000c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c86:	f7ff fc83 	bl	8000590 <__aeabi_dmul>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	460b      	mov	r3, r1
 8000c8e:	4610      	mov	r0, r2
 8000c90:	4619      	mov	r1, r3
 8000c92:	f04f 0200 	mov.w	r2, #0
 8000c96:	4b67      	ldr	r3, [pc, #412]	; (8000e34 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x21c>)
 8000c98:	f7ff fda4 	bl	80007e4 <__aeabi_ddiv>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	460b      	mov	r3, r1
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	4629      	mov	r1, r5
 8000ca4:	f7ff fabc 	bl	8000220 <__aeabi_dsub>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	460b      	mov	r3, r1
 8000cac:	4610      	mov	r0, r2
 8000cae:	4619      	mov	r1, r3
 8000cb0:	f7ff fea8 	bl	8000a04 <__aeabi_d2f>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	61fb      	str	r3, [r7, #28]
    float wheel1_mps = 0.5 * this->cmd_vel.x + SQRT_3_OVER_2 * this->cmd_vel.y - this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f7ff fc0e 	bl	80004e0 <__aeabi_f2d>
 8000cc4:	f04f 0200 	mov.w	r2, #0
 8000cc8:	4b59      	ldr	r3, [pc, #356]	; (8000e30 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x218>)
 8000cca:	f7ff fc61 	bl	8000590 <__aeabi_dmul>
 8000cce:	4602      	mov	r2, r0
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	4614      	mov	r4, r2
 8000cd4:	461d      	mov	r5, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fbff 	bl	80004e0 <__aeabi_f2d>
 8000ce2:	a34f      	add	r3, pc, #316	; (adr r3, 8000e20 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x208>)
 8000ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce8:	f7ff fc52 	bl	8000590 <__aeabi_dmul>
 8000cec:	4602      	mov	r2, r0
 8000cee:	460b      	mov	r3, r1
 8000cf0:	4620      	mov	r0, r4
 8000cf2:	4629      	mov	r1, r5
 8000cf4:	f7ff fa96 	bl	8000224 <__adddf3>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4614      	mov	r4, r2
 8000cfe:	461d      	mov	r5, r3
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8000d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d10:	ee17 0a90 	vmov	r0, s15
 8000d14:	f7ff fbe4 	bl	80004e0 <__aeabi_f2d>
 8000d18:	a343      	add	r3, pc, #268	; (adr r3, 8000e28 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x210>)
 8000d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1e:	f7ff fc37 	bl	8000590 <__aeabi_dmul>
 8000d22:	4602      	mov	r2, r0
 8000d24:	460b      	mov	r3, r1
 8000d26:	4610      	mov	r0, r2
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f04f 0200 	mov.w	r2, #0
 8000d2e:	4b41      	ldr	r3, [pc, #260]	; (8000e34 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x21c>)
 8000d30:	f7ff fd58 	bl	80007e4 <__aeabi_ddiv>
 8000d34:	4602      	mov	r2, r0
 8000d36:	460b      	mov	r3, r1
 8000d38:	4620      	mov	r0, r4
 8000d3a:	4629      	mov	r1, r5
 8000d3c:	f7ff fa70 	bl	8000220 <__aeabi_dsub>
 8000d40:	4602      	mov	r2, r0
 8000d42:	460b      	mov	r3, r1
 8000d44:	4610      	mov	r0, r2
 8000d46:	4619      	mov	r1, r3
 8000d48:	f7ff fe5c 	bl	8000a04 <__aeabi_d2f>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	61bb      	str	r3, [r7, #24]
    float wheel2_mps = - this->cmd_vel.x + this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 8000d56:	eef1 7a67 	vneg.f32	s15, s15
 8000d5a:	ee17 3a90 	vmov	r3, s15
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f7ff fbbe 	bl	80004e0 <__aeabi_f2d>
 8000d64:	4604      	mov	r4, r0
 8000d66:	460d      	mov	r5, r1
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8000d74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d78:	ee17 0a90 	vmov	r0, s15
 8000d7c:	f7ff fbb0 	bl	80004e0 <__aeabi_f2d>
 8000d80:	a329      	add	r3, pc, #164	; (adr r3, 8000e28 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x210>)
 8000d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d86:	f7ff fc03 	bl	8000590 <__aeabi_dmul>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	f04f 0200 	mov.w	r2, #0
 8000d96:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x21c>)
 8000d98:	f7ff fd24 	bl	80007e4 <__aeabi_ddiv>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4620      	mov	r0, r4
 8000da2:	4629      	mov	r1, r5
 8000da4:	f7ff fa3e 	bl	8000224 <__adddf3>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4610      	mov	r0, r2
 8000dae:	4619      	mov	r1, r3
 8000db0:	f7ff fe28 	bl	8000a04 <__aeabi_d2f>
 8000db4:	4603      	mov	r3, r0
 8000db6:	617b      	str	r3, [r7, #20]
    // wheel mps -> wheel rps
    float wheel0_rps = wheel0_mps / this->wheel_circumference;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8000dbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8000dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dc6:	edc7 7a04 	vstr	s15, [r7, #16]
    float wheel1_rps = wheel1_mps / this->wheel_circumference;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8000dd0:	edd7 6a06 	vldr	s13, [r7, #24]
 8000dd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dd8:	edc7 7a03 	vstr	s15, [r7, #12]
    float wheel2_rps = wheel2_mps / this->wheel_circumference;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8000de2:	edd7 6a05 	vldr	s13, [r7, #20]
 8000de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000dea:	edc7 7a02 	vstr	s15, [r7, #8]

    this->steppers[0].set_speed_rps(wheel0_rps);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3304      	adds	r3, #4
 8000df2:	ed97 0a04 	vldr	s0, [r7, #16]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 f928 	bl	800104c <_ZN7Stepper13set_speed_rpsEf>
    this->steppers[1].set_speed_rps(wheel1_rps);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3364      	adds	r3, #100	; 0x64
 8000e00:	ed97 0a03 	vldr	s0, [r7, #12]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 f921 	bl	800104c <_ZN7Stepper13set_speed_rpsEf>
    this->steppers[2].set_speed_rps(wheel2_rps);
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	33c4      	adds	r3, #196	; 0xc4
 8000e0e:	ed97 0a02 	vldr	s0, [r7, #8]
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f91a 	bl	800104c <_ZN7Stepper13set_speed_rpsEf>
}
 8000e18:	bf00      	nop
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000e20:	e857b07f 	.word	0xe857b07f
 8000e24:	3febb67a 	.word	0x3febb67a
 8000e28:	54442eea 	.word	0x54442eea
 8000e2c:	400921fb 	.word	0x400921fb
 8000e30:	3fe00000 	.word	0x3fe00000
 8000e34:	40668000 	.word	0x40668000

08000e38 <_ZN15HolonomicDrive3D1Ev>:

HolonomicDrive3::~HolonomicDrive3() {
 8000e38:	b590      	push	{r4, r7, lr}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	4a0d      	ldr	r2, [pc, #52]	; (8000e78 <_ZN15HolonomicDrive3D1Ev+0x40>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	3304      	adds	r3, #4
	// TODO Auto-generated destructor stub
}
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d00d      	beq.n	8000e6a <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3304      	adds	r3, #4
 8000e52:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3304      	adds	r3, #4
}
 8000e5a:	429c      	cmp	r4, r3
 8000e5c:	d005      	beq.n	8000e6a <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 8000e5e:	3c60      	subs	r4, #96	; 0x60
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4620      	mov	r0, r4
 8000e66:	4798      	blx	r3
}
 8000e68:	e7f5      	b.n	8000e56 <_ZN15HolonomicDrive3D1Ev+0x1e>
HolonomicDrive3::~HolonomicDrive3() {
 8000e6a:	bf00      	nop
}
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd90      	pop	{r4, r7, pc}
 8000e76:	bf00      	nop
 8000e78:	08004298 	.word	0x08004298

08000e7c <_ZN15HolonomicDrive3D0Ev>:
HolonomicDrive3::~HolonomicDrive3() {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
}
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ffd7 	bl	8000e38 <_ZN15HolonomicDrive3D1Ev>
 8000e8a:	f44f 719c 	mov.w	r1, #312	; 0x138
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f003 f952 	bl	8004138 <_ZdlPvj>
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <_Z21PWM_set_high_durationP11TIM_TypeDefi>:
 */

#include "Stepper.h"


void PWM_set_high_duration(TIM_TypeDef *timx, int us) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
	int ccr = 16./25. * us;
 8000eaa:	6838      	ldr	r0, [r7, #0]
 8000eac:	f7ff fb06 	bl	80004bc <__aeabi_i2d>
 8000eb0:	a309      	add	r3, pc, #36	; (adr r3, 8000ed8 <_Z21PWM_set_high_durationP11TIM_TypeDefi+0x38>)
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	f7ff fb6b 	bl	8000590 <__aeabi_dmul>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	4610      	mov	r0, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	f7ff fd77 	bl	80009b4 <__aeabi_d2iz>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	60fb      	str	r3, [r7, #12]
	timx->CCR1 = ccr;
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	47ae147b 	.word	0x47ae147b
 8000edc:	3fe47ae1 	.word	0x3fe47ae1

08000ee0 <_Z12PWM_set_freqP11TIM_TypeDefi>:

void PWM_set_freq(TIM_TypeDef *timx, int hz) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	int arr = 16000000./(25*(float)hz);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	ee07 3a90 	vmov	s15, r3
 8000ef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ef4:	eeb3 7a09 	vmov.f32	s14, #57	; 0x41c80000  25.0
 8000ef8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efc:	ee17 0a90 	vmov	r0, s15
 8000f00:	f7ff faee 	bl	80004e0 <__aeabi_f2d>
 8000f04:	4602      	mov	r2, r0
 8000f06:	460b      	mov	r3, r1
 8000f08:	a10b      	add	r1, pc, #44	; (adr r1, 8000f38 <_Z12PWM_set_freqP11TIM_TypeDefi+0x58>)
 8000f0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f0e:	f7ff fc69 	bl	80007e4 <__aeabi_ddiv>
 8000f12:	4602      	mov	r2, r0
 8000f14:	460b      	mov	r3, r1
 8000f16:	4610      	mov	r0, r2
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f7ff fd4b 	bl	80009b4 <__aeabi_d2iz>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	60fb      	str	r3, [r7, #12]
	timx->CNT = 0;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24
	timx->ARR = arr;
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	00000000 	.word	0x00000000
 8000f3c:	416e8480 	.word	0x416e8480

08000f40 <_ZN7StepperC1Ev>:

Stepper::Stepper() {}
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
 8000f48:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <_ZN7StepperC1Ev+0x1c>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4618      	mov	r0, r3
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	080042a8 	.word	0x080042a8

08000f60 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>:

Stepper::Stepper(TIM_HandleTypeDef tim_handle_step, GPIO_TypeDef *GPIOx_dir, uint16_t GPIO_Pin_dir) {
 8000f60:	b084      	sub	sp, #16
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	6078      	str	r0, [r7, #4]
 8000f6a:	f107 0014 	add.w	r0, r7, #20
 8000f6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft+0x74>)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->tim_handle = tim_handle_step;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3304      	adds	r3, #4
 8000f7c:	f107 0114 	add.w	r1, r7, #20
 8000f80:	224c      	movs	r2, #76	; 0x4c
 8000f82:	4618      	mov	r0, r3
 8000f84:	f003 f91e 	bl	80041c4 <memcpy>
	this->GPIOx_dir = GPIOx_dir;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f8c:	651a      	str	r2, [r3, #80]	; 0x50
	this->GPIO_Pin_dir = GPIO_Pin_dir;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 8000f94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	PWM_set_high_duration(this->tim_handle.Instance, 10);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	210a      	movs	r1, #10
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff ff7e 	bl	8000ea0 <_Z21PWM_set_high_durationP11TIM_TypeDefi>
	HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000fae:	2201      	movs	r2, #1
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f001 f941 	bl	8002238 <HAL_GPIO_WritePin>

	this->current_dir = 0;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	65da      	str	r2, [r3, #92]	; 0x5c
	this->current_freq = 0;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fce:	b004      	add	sp, #16
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	080042a8 	.word	0x080042a8

08000fd8 <_ZN7Stepper19set_speed_step_freqEii>:

void Stepper::set_speed_step_freq(int hz, int dir) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
	if(hz < 15){// todo calculer freq min automatiquement
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b0e      	cmp	r3, #14
 8000fe8:	dc06      	bgt.n	8000ff8 <_ZN7Stepper19set_speed_step_freqEii+0x20>
		HAL_TIM_PWM_Stop(&this->tim_handle, TIM_CHANNEL_1);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	3304      	adds	r3, #4
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f002 f89b 	bl	800312c <HAL_TIM_PWM_Stop>
		return;
 8000ff6:	e025      	b.n	8001044 <_ZN7Stepper19set_speed_step_freqEii+0x6c>
	}
	if(!this->current_freq) {
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d105      	bne.n	800100c <_ZN7Stepper19set_speed_step_freqEii+0x34>
		// stepper stopped, start pwm
		HAL_TIM_PWM_Start(&this->tim_handle, TIM_CHANNEL_1);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	3304      	adds	r3, #4
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f001 ff90 	bl	8002f2c <HAL_TIM_PWM_Start>
	}
	PWM_set_freq(this->tim_handle.Instance, hz);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	68b9      	ldr	r1, [r7, #8]
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ff64 	bl	8000ee0 <_Z12PWM_set_freqP11TIM_TypeDefi>

	if(dir==1) {
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d109      	bne.n	8001032 <_ZN7Stepper19set_speed_step_freqEii+0x5a>
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001028:	2201      	movs	r2, #1
 800102a:	4619      	mov	r1, r3
 800102c:	f001 f904 	bl	8002238 <HAL_GPIO_WritePin>
 8001030:	e008      	b.n	8001044 <_ZN7Stepper19set_speed_step_freqEii+0x6c>
	}else {
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_RESET);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800103c:	2200      	movs	r2, #0
 800103e:	4619      	mov	r1, r3
 8001040:	f001 f8fa 	bl	8002238 <HAL_GPIO_WritePin>
	}
}
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <_ZN7Stepper13set_speed_rpsEf>:

void Stepper::set_speed_rps(float rps) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	ed87 0a00 	vstr	s0, [r7]
	// 3200 steps per revolution
	int hz = rps * 3200.0;
 8001058:	6838      	ldr	r0, [r7, #0]
 800105a:	f7ff fa41 	bl	80004e0 <__aeabi_f2d>
 800105e:	f04f 0200 	mov.w	r2, #0
 8001062:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <_ZN7Stepper13set_speed_rpsEf+0x54>)
 8001064:	f7ff fa94 	bl	8000590 <__aeabi_dmul>
 8001068:	4602      	mov	r2, r0
 800106a:	460b      	mov	r3, r1
 800106c:	4610      	mov	r0, r2
 800106e:	4619      	mov	r1, r3
 8001070:	f7ff fca0 	bl	80009b4 <__aeabi_d2iz>
 8001074:	4603      	mov	r3, r0
 8001076:	60fb      	str	r3, [r7, #12]
	if(hz>=0) {
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	db05      	blt.n	800108a <_ZN7Stepper13set_speed_rpsEf+0x3e>
		this->set_speed_step_freq(hz, 1);
 800107e:	2201      	movs	r2, #1
 8001080:	68f9      	ldr	r1, [r7, #12]
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff ffa8 	bl	8000fd8 <_ZN7Stepper19set_speed_step_freqEii>
	}
	else {
		this->set_speed_step_freq(-hz, 0);
	}
}
 8001088:	e006      	b.n	8001098 <_ZN7Stepper13set_speed_rpsEf+0x4c>
		this->set_speed_step_freq(-hz, 0);
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	425b      	negs	r3, r3
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffa0 	bl	8000fd8 <_ZN7Stepper19set_speed_step_freqEii>
}
 8001098:	bf00      	nop
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40a90000 	.word	0x40a90000

080010a4 <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <_ZN7StepperD1Ev+0x1c>)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	080042a8 	.word	0x080042a8

080010c4 <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
}
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff ffe9 	bl	80010a4 <_ZN7StepperD1Ev>
 80010d2:	2160      	movs	r1, #96	; 0x60
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f003 f82f 	bl	8004138 <_ZdlPvj>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZN7StepperC1ERKS_>:
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
 80010ee:	4a11      	ldr	r2, [pc, #68]	; (8001134 <_ZN7StepperC1ERKS_+0x50>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	1d10      	adds	r0, r2, #4
 80010fa:	3304      	adds	r3, #4
 80010fc:	224c      	movs	r2, #76	; 0x4c
 80010fe:	4619      	mov	r1, r3
 8001100:	f003 f860 	bl	80041c4 <memcpy>
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	651a      	str	r2, [r3, #80]	; 0x50
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	659a      	str	r2, [r3, #88]	; 0x58
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	65da      	str	r2, [r3, #92]	; 0x5c
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	080042a8 	.word	0x080042a8

08001138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001138:	b5f0      	push	{r4, r5, r6, r7, lr}
 800113a:	f5ad 7d7d 	sub.w	sp, sp, #1012	; 0x3f4
 800113e:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001140:	f000 fd81 	bl	8001c46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001144:	f000 f97e 	bl	8001444 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001148:	f000 fbf2 	bl	8001930 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 800114c:	f000 f9c4 	bl	80014d8 <_ZL12MX_TIM1_Initv>
  MX_TIM4_Init();
 8001150:	f000 fa90 	bl	8001674 <_ZL12MX_TIM4_Initv>
  MX_TIM8_Init();
 8001154:	f000 fb1e 	bl	8001794 <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */

  Stepper stepper1 = Stepper(htim1, GPIOA, GPIO_PIN_0);
 8001158:	4eb3      	ldr	r6, [pc, #716]	; (8001428 <main+0x2f0>)
 800115a:	f507 7c0a 	add.w	ip, r7, #552	; 0x228
 800115e:	2301      	movs	r3, #1
 8001160:	9311      	str	r3, [sp, #68]	; 0x44
 8001162:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001166:	9310      	str	r3, [sp, #64]	; 0x40
 8001168:	466d      	mov	r5, sp
 800116a:	f106 040c 	add.w	r4, r6, #12
 800116e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001176:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001178:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800117a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800117e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001182:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001186:	4660      	mov	r0, ip
 8001188:	f7ff feea 	bl	8000f60 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>
  Stepper stepper2 = Stepper(htim4, GPIOA, GPIO_PIN_1);
 800118c:	4ea7      	ldr	r6, [pc, #668]	; (800142c <main+0x2f4>)
 800118e:	f507 7ce4 	add.w	ip, r7, #456	; 0x1c8
 8001192:	2302      	movs	r3, #2
 8001194:	9311      	str	r3, [sp, #68]	; 0x44
 8001196:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800119a:	9310      	str	r3, [sp, #64]	; 0x40
 800119c:	466d      	mov	r5, sp
 800119e:	f106 040c 	add.w	r4, r6, #12
 80011a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ae:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011b2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011b6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80011ba:	4660      	mov	r0, ip
 80011bc:	f7ff fed0 	bl	8000f60 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>
  Stepper stepper3 = Stepper(htim8, GPIOA, GPIO_PIN_4);
 80011c0:	4e9b      	ldr	r6, [pc, #620]	; (8001430 <main+0x2f8>)
 80011c2:	f507 7cb4 	add.w	ip, r7, #360	; 0x168
 80011c6:	2310      	movs	r3, #16
 80011c8:	9311      	str	r3, [sp, #68]	; 0x44
 80011ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011ce:	9310      	str	r3, [sp, #64]	; 0x40
 80011d0:	466d      	mov	r5, sp
 80011d2:	f106 040c 	add.w	r4, r6, #12
 80011d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011ea:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80011ee:	4660      	mov	r0, ip
 80011f0:	f7ff feb6 	bl	8000f60 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>

  HolonomicDrive3 holo_drive = HolonomicDrive3(stepper3, stepper1, stepper2, 0.029, 0.175);
 80011f4:	f507 72b4 	add.w	r2, r7, #360	; 0x168
 80011f8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80011fc:	4611      	mov	r1, r2
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff70 	bl	80010e4 <_ZN7StepperC1ERKS_>
 8001204:	f507 720a 	add.w	r2, r7, #552	; 0x228
 8001208:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800120c:	4611      	mov	r1, r2
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ff68 	bl	80010e4 <_ZN7StepperC1ERKS_>
 8001214:	f507 72e4 	add.w	r2, r7, #456	; 0x1c8
 8001218:	f507 7352 	add.w	r3, r7, #840	; 0x348
 800121c:	4611      	mov	r1, r2
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff ff60 	bl	80010e4 <_ZN7StepperC1ERKS_>
 8001224:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001228:	f507 723a 	add.w	r2, r7, #744	; 0x2e8
 800122c:	f507 7122 	add.w	r1, r7, #648	; 0x288
 8001230:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8001234:	eddf 0a7f 	vldr	s1, [pc, #508]	; 8001434 <main+0x2fc>
 8001238:	ed9f 0a7f 	vldr	s0, [pc, #508]	; 8001438 <main+0x300>
 800123c:	f7ff fc70 	bl	8000b20 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>
 8001240:	f507 7352 	add.w	r3, r7, #840	; 0x348
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff2d 	bl	80010a4 <_ZN7StepperD1Ev>
 800124a:	f507 733a 	add.w	r3, r7, #744	; 0x2e8
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff28 	bl	80010a4 <_ZN7StepperD1Ev>
 8001254:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff23 	bl	80010a4 <_ZN7StepperD1Ev>

  CmdVel cmd1 = {};
 800125e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001262:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001266:	f04f 0200 	mov.w	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001270:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
 800127a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800127e:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001282:	f04f 0200 	mov.w	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  cmd1.x = 0.1;
 8001288:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800128c:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 8001290:	4a6a      	ldr	r2, [pc, #424]	; (800143c <main+0x304>)
 8001292:	601a      	str	r2, [r3, #0]
  CmdVel cmd2 = {};
 8001294:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001298:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800129c:	f04f 0200 	mov.w	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
 80012a2:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012a6:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012b4:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  cmd2.y = 0.1;
 80012be:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012c2:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 80012c6:	4a5d      	ldr	r2, [pc, #372]	; (800143c <main+0x304>)
 80012c8:	605a      	str	r2, [r3, #4]
  CmdVel cmd3 = {};
 80012ca:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012ce:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80012d2:	f04f 0200 	mov.w	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012dc:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012ea:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	609a      	str	r2, [r3, #8]
  cmd3.x = -0.1;
 80012f4:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80012f8:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80012fc:	4a50      	ldr	r2, [pc, #320]	; (8001440 <main+0x308>)
 80012fe:	601a      	str	r2, [r3, #0]
  CmdVel cmd4 = {};
 8001300:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001304:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001312:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	605a      	str	r2, [r3, #4]
 800131c:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001320:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001324:	f04f 0200 	mov.w	r2, #0
 8001328:	609a      	str	r2, [r3, #8]
  cmd4.y = -0.1;
 800132a:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800132e:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 8001332:	4a43      	ldr	r2, [pc, #268]	; (8001440 <main+0x308>)
 8001334:	605a      	str	r2, [r3, #4]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //  cmd.theta = 20.0;
	  holo_drive.set_cmd_vel(cmd1);
 8001336:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 800133a:	f5a3 7361 	sub.w	r3, r3, #900	; 0x384
 800133e:	edd3 6a00 	vldr	s13, [r3]
 8001342:	ed93 7a01 	vldr	s14, [r3, #4]
 8001346:	edd3 7a02 	vldr	s15, [r3, #8]
 800134a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800134e:	eeb0 0a66 	vmov.f32	s0, s13
 8001352:	eef0 0a47 	vmov.f32	s1, s14
 8001356:	eeb0 1a67 	vmov.f32	s2, s15
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fc3e 	bl	8000bdc <_ZN15HolonomicDrive311set_cmd_velE6CmdVel>
	  holo_drive.spin_once_motors_control();
 8001360:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fc57 	bl	8000c18 <_ZN15HolonomicDrive324spin_once_motors_controlEv>
	  HAL_Delay(2000);
 800136a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800136e:	f000 fcdb 	bl	8001d28 <HAL_Delay>
	  holo_drive.set_cmd_vel(cmd2);
 8001372:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 8001376:	f5a3 7364 	sub.w	r3, r3, #912	; 0x390
 800137a:	edd3 6a00 	vldr	s13, [r3]
 800137e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001382:	edd3 7a02 	vldr	s15, [r3, #8]
 8001386:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800138a:	eeb0 0a66 	vmov.f32	s0, s13
 800138e:	eef0 0a47 	vmov.f32	s1, s14
 8001392:	eeb0 1a67 	vmov.f32	s2, s15
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fc20 	bl	8000bdc <_ZN15HolonomicDrive311set_cmd_velE6CmdVel>
	  holo_drive.spin_once_motors_control();
 800139c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff fc39 	bl	8000c18 <_ZN15HolonomicDrive324spin_once_motors_controlEv>
	  HAL_Delay(2000);
 80013a6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013aa:	f000 fcbd 	bl	8001d28 <HAL_Delay>
	  holo_drive.set_cmd_vel(cmd3);
 80013ae:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80013b2:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80013b6:	edd3 6a00 	vldr	s13, [r3]
 80013ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80013be:	edd3 7a02 	vldr	s15, [r3, #8]
 80013c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013c6:	eeb0 0a66 	vmov.f32	s0, s13
 80013ca:	eef0 0a47 	vmov.f32	s1, s14
 80013ce:	eeb0 1a67 	vmov.f32	s2, s15
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fc02 	bl	8000bdc <_ZN15HolonomicDrive311set_cmd_velE6CmdVel>
	  holo_drive.spin_once_motors_control();
 80013d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff fc1b 	bl	8000c18 <_ZN15HolonomicDrive324spin_once_motors_controlEv>
	  HAL_Delay(2000);
 80013e2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013e6:	f000 fc9f 	bl	8001d28 <HAL_Delay>
	  holo_drive.set_cmd_vel(cmd4);
 80013ea:	f507 736a 	add.w	r3, r7, #936	; 0x3a8
 80013ee:	f5a3 736a 	sub.w	r3, r3, #936	; 0x3a8
 80013f2:	edd3 6a00 	vldr	s13, [r3]
 80013f6:	ed93 7a01 	vldr	s14, [r3, #4]
 80013fa:	edd3 7a02 	vldr	s15, [r3, #8]
 80013fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001402:	eeb0 0a66 	vmov.f32	s0, s13
 8001406:	eef0 0a47 	vmov.f32	s1, s14
 800140a:	eeb0 1a67 	vmov.f32	s2, s15
 800140e:	4618      	mov	r0, r3
 8001410:	f7ff fbe4 	bl	8000bdc <_ZN15HolonomicDrive311set_cmd_velE6CmdVel>
	  holo_drive.spin_once_motors_control();
 8001414:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff fbfd 	bl	8000c18 <_ZN15HolonomicDrive324spin_once_motors_controlEv>
	  HAL_Delay(2000);
 800141e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001422:	f000 fc81 	bl	8001d28 <HAL_Delay>
	  holo_drive.set_cmd_vel(cmd1);
 8001426:	e786      	b.n	8001336 <main+0x1fe>
 8001428:	20000078 	.word	0x20000078
 800142c:	200000c4 	.word	0x200000c4
 8001430:	20000110 	.word	0x20000110
 8001434:	3e333333 	.word	0x3e333333
 8001438:	3ced9168 	.word	0x3ced9168
 800143c:	3dcccccd 	.word	0x3dcccccd
 8001440:	bdcccccd 	.word	0xbdcccccd

08001444 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b094      	sub	sp, #80	; 0x50
 8001448:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144a:	f107 0318 	add.w	r3, r7, #24
 800144e:	2238      	movs	r2, #56	; 0x38
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f002 fe88 	bl	8004168 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001458:	1d3b      	adds	r3, r7, #4
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
 8001460:	609a      	str	r2, [r3, #8]
 8001462:	60da      	str	r2, [r3, #12]
 8001464:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001466:	f44f 7000 	mov.w	r0, #512	; 0x200
 800146a:	f000 fefd 	bl	8002268 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800146e:	2302      	movs	r3, #2
 8001470:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001472:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001478:	2340      	movs	r3, #64	; 0x40
 800147a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800147c:	2300      	movs	r3, #0
 800147e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001480:	f107 0318 	add.w	r3, r7, #24
 8001484:	4618      	mov	r0, r3
 8001486:	f000 ffa3 	bl	80023d0 <HAL_RCC_OscConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	bf14      	ite	ne
 8001490:	2301      	movne	r3, #1
 8001492:	2300      	moveq	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 800149a:	f000 fa79 	bl	8001990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149e:	230f      	movs	r3, #15
 80014a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014a2:	2301      	movs	r3, #1
 80014a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a6:	2300      	movs	r3, #0
 80014a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014b2:	1d3b      	adds	r3, r7, #4
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f001 fa9c 	bl	80029f4 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	bf14      	ite	ne
 80014c2:	2301      	movne	r3, #1
 80014c4:	2300      	moveq	r3, #0
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 80014cc:	f000 fa60 	bl	8001990 <Error_Handler>
  }
}
 80014d0:	bf00      	nop
 80014d2:	3750      	adds	r7, #80	; 0x50
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b09c      	sub	sp, #112	; 0x70
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014de:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	605a      	str	r2, [r3, #4]
 80014e8:	609a      	str	r2, [r3, #8]
 80014ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
 8001508:	615a      	str	r2, [r3, #20]
 800150a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2234      	movs	r2, #52	; 0x34
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f002 fe28 	bl	8004168 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001518:	4b54      	ldr	r3, [pc, #336]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 800151a:	4a55      	ldr	r2, [pc, #340]	; (8001670 <_ZL12MX_TIM1_Initv+0x198>)
 800151c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 800151e:	4b53      	ldr	r3, [pc, #332]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 8001520:	2218      	movs	r2, #24
 8001522:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001524:	4b51      	ldr	r3, [pc, #324]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800152a:	4b50      	ldr	r3, [pc, #320]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 800152c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001530:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001532:	4b4e      	ldr	r3, [pc, #312]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001538:	4b4c      	ldr	r3, [pc, #304]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 800153a:	2200      	movs	r2, #0
 800153c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b4b      	ldr	r3, [pc, #300]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001544:	4849      	ldr	r0, [pc, #292]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 8001546:	f001 fc39 	bl	8002dbc <HAL_TIM_Base_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	bf14      	ite	ne
 8001550:	2301      	movne	r3, #1
 8001552:	2300      	moveq	r3, #0
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 800155a:	f000 fa19 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800155e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001562:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001564:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001568:	4619      	mov	r1, r3
 800156a:	4840      	ldr	r0, [pc, #256]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 800156c:	f001 ff88 	bl	8003480 <HAL_TIM_ConfigClockSource>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	bf14      	ite	ne
 8001576:	2301      	movne	r3, #1
 8001578:	2300      	moveq	r3, #0
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8001580:	f000 fa06 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001584:	4839      	ldr	r0, [pc, #228]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 8001586:	f001 fc70 	bl	8002e6a <HAL_TIM_PWM_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf14      	ite	ne
 8001590:	2301      	movne	r3, #1
 8001592:	2300      	moveq	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 800159a:	f000 f9f9 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159e:	2300      	movs	r3, #0
 80015a0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015a2:	2300      	movs	r3, #0
 80015a4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80015ae:	4619      	mov	r1, r3
 80015b0:	482e      	ldr	r0, [pc, #184]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 80015b2:	f002 fcb3 	bl	8003f1c <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	bf14      	ite	ne
 80015bc:	2301      	movne	r3, #1
 80015be:	2300      	moveq	r3, #0
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 80015c6:	f000 f9e3 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ca:	2360      	movs	r3, #96	; 0x60
 80015cc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80015ce:	2300      	movs	r3, #0
 80015d0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015d2:	2300      	movs	r3, #0
 80015d4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80015d6:	2300      	movs	r3, #0
 80015d8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015e2:	2300      	movs	r3, #0
 80015e4:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015ea:	2200      	movs	r2, #0
 80015ec:	4619      	mov	r1, r3
 80015ee:	481f      	ldr	r0, [pc, #124]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 80015f0:	f001 fe32 	bl	8003258 <HAL_TIM_PWM_ConfigChannel>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	bf14      	ite	ne
 80015fa:	2301      	movne	r3, #1
 80015fc:	2300      	moveq	r3, #0
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <_ZL12MX_TIM1_Initv+0x130>
  {
    Error_Handler();
 8001604:	f000 f9c4 	bl	8001990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001610:	2300      	movs	r3, #0
 8001612:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001614:	2300      	movs	r3, #0
 8001616:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800161c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001620:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800162e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001634:	2300      	movs	r3, #0
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001638:	2300      	movs	r3, #0
 800163a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001640:	1d3b      	adds	r3, r7, #4
 8001642:	4619      	mov	r1, r3
 8001644:	4809      	ldr	r0, [pc, #36]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 8001646:	f002 fceb 	bl	8004020 <HAL_TIMEx_ConfigBreakDeadTime>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	bf14      	ite	ne
 8001650:	2301      	movne	r3, #1
 8001652:	2300      	moveq	r3, #0
 8001654:	b2db      	uxtb	r3, r3
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <_ZL12MX_TIM1_Initv+0x186>
  {
    Error_Handler();
 800165a:	f000 f999 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800165e:	4803      	ldr	r0, [pc, #12]	; (800166c <_ZL12MX_TIM1_Initv+0x194>)
 8001660:	f000 fa08 	bl	8001a74 <HAL_TIM_MspPostInit>

}
 8001664:	bf00      	nop
 8001666:	3770      	adds	r7, #112	; 0x70
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000078 	.word	0x20000078
 8001670:	40012c00 	.word	0x40012c00

08001674 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08e      	sub	sp, #56	; 0x38
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	f107 031c 	add.w	r3, r7, #28
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
 8001692:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001694:	463b      	mov	r3, r7
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]
 80016a2:	615a      	str	r2, [r3, #20]
 80016a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016a6:	4b39      	ldr	r3, [pc, #228]	; (800178c <_ZL12MX_TIM4_Initv+0x118>)
 80016a8:	4a39      	ldr	r2, [pc, #228]	; (8001790 <_ZL12MX_TIM4_Initv+0x11c>)
 80016aa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24;
 80016ac:	4b37      	ldr	r3, [pc, #220]	; (800178c <_ZL12MX_TIM4_Initv+0x118>)
 80016ae:	2218      	movs	r2, #24
 80016b0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b2:	4b36      	ldr	r3, [pc, #216]	; (800178c <_ZL12MX_TIM4_Initv+0x118>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80016b8:	4b34      	ldr	r3, [pc, #208]	; (800178c <_ZL12MX_TIM4_Initv+0x118>)
 80016ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016c0:	4b32      	ldr	r3, [pc, #200]	; (800178c <_ZL12MX_TIM4_Initv+0x118>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c6:	4b31      	ldr	r3, [pc, #196]	; (800178c <_ZL12MX_TIM4_Initv+0x118>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016cc:	482f      	ldr	r0, [pc, #188]	; (800178c <_ZL12MX_TIM4_Initv+0x118>)
 80016ce:	f001 fb75 	bl	8002dbc <HAL_TIM_Base_Init>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bf14      	ite	ne
 80016d8:	2301      	movne	r3, #1
 80016da:	2300      	moveq	r3, #0
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 80016e2:	f000 f955 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016f0:	4619      	mov	r1, r3
 80016f2:	4826      	ldr	r0, [pc, #152]	; (800178c <_ZL12MX_TIM4_Initv+0x118>)
 80016f4:	f001 fec4 	bl	8003480 <HAL_TIM_ConfigClockSource>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf14      	ite	ne
 80016fe:	2301      	movne	r3, #1
 8001700:	2300      	moveq	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8001708:	f000 f942 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800170c:	481f      	ldr	r0, [pc, #124]	; (800178c <_ZL12MX_TIM4_Initv+0x118>)
 800170e:	f001 fbac 	bl	8002e6a <HAL_TIM_PWM_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	bf14      	ite	ne
 8001718:	2301      	movne	r3, #1
 800171a:	2300      	moveq	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d001      	beq.n	8001726 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8001722:	f000 f935 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001726:	2300      	movs	r3, #0
 8001728:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800172a:	2300      	movs	r3, #0
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800172e:	f107 031c 	add.w	r3, r7, #28
 8001732:	4619      	mov	r1, r3
 8001734:	4815      	ldr	r0, [pc, #84]	; (800178c <_ZL12MX_TIM4_Initv+0x118>)
 8001736:	f002 fbf1 	bl	8003f1c <HAL_TIMEx_MasterConfigSynchronization>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf14      	ite	ne
 8001740:	2301      	movne	r3, #1
 8001742:	2300      	moveq	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 800174a:	f000 f921 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174e:	2360      	movs	r3, #96	; 0x60
 8001750:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001752:	2300      	movs	r3, #0
 8001754:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001756:	2300      	movs	r3, #0
 8001758:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	2200      	movs	r2, #0
 8001762:	4619      	mov	r1, r3
 8001764:	4809      	ldr	r0, [pc, #36]	; (800178c <_ZL12MX_TIM4_Initv+0x118>)
 8001766:	f001 fd77 	bl	8003258 <HAL_TIM_PWM_ConfigChannel>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf14      	ite	ne
 8001770:	2301      	movne	r3, #1
 8001772:	2300      	moveq	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 800177a:	f000 f909 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800177e:	4803      	ldr	r0, [pc, #12]	; (800178c <_ZL12MX_TIM4_Initv+0x118>)
 8001780:	f000 f978 	bl	8001a74 <HAL_TIM_MspPostInit>

}
 8001784:	bf00      	nop
 8001786:	3738      	adds	r7, #56	; 0x38
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	200000c4 	.word	0x200000c4
 8001790:	40000800 	.word	0x40000800

08001794 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b09c      	sub	sp, #112	; 0x70
 8001798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800179a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800179e:	2200      	movs	r2, #0
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	605a      	str	r2, [r3, #4]
 80017a4:	609a      	str	r2, [r3, #8]
 80017a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
 80017c4:	615a      	str	r2, [r3, #20]
 80017c6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2234      	movs	r2, #52	; 0x34
 80017cc:	2100      	movs	r1, #0
 80017ce:	4618      	mov	r0, r3
 80017d0:	f002 fcca 	bl	8004168 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80017d4:	4b54      	ldr	r3, [pc, #336]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 80017d6:	4a55      	ldr	r2, [pc, #340]	; (800192c <_ZL12MX_TIM8_Initv+0x198>)
 80017d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 24;
 80017da:	4b53      	ldr	r3, [pc, #332]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 80017dc:	2218      	movs	r2, #24
 80017de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e0:	4b51      	ldr	r3, [pc, #324]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80017e6:	4b50      	ldr	r3, [pc, #320]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 80017e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017ec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017ee:	4b4e      	ldr	r3, [pc, #312]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017f4:	4b4c      	ldr	r3, [pc, #304]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fa:	4b4b      	ldr	r3, [pc, #300]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001800:	4849      	ldr	r0, [pc, #292]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 8001802:	f001 fadb 	bl	8002dbc <HAL_TIM_Base_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	bf14      	ite	ne
 800180c:	2301      	movne	r3, #1
 800180e:	2300      	moveq	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <_ZL12MX_TIM8_Initv+0x86>
  {
    Error_Handler();
 8001816:	f000 f8bb 	bl	8001990 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800181e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001820:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001824:	4619      	mov	r1, r3
 8001826:	4840      	ldr	r0, [pc, #256]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 8001828:	f001 fe2a 	bl	8003480 <HAL_TIM_ConfigClockSource>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	bf14      	ite	ne
 8001832:	2301      	movne	r3, #1
 8001834:	2300      	moveq	r3, #0
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <_ZL12MX_TIM8_Initv+0xac>
  {
    Error_Handler();
 800183c:	f000 f8a8 	bl	8001990 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001840:	4839      	ldr	r0, [pc, #228]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 8001842:	f001 fb12 	bl	8002e6a <HAL_TIM_PWM_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	bf14      	ite	ne
 800184c:	2301      	movne	r3, #1
 800184e:	2300      	moveq	r3, #0
 8001850:	b2db      	uxtb	r3, r3
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <_ZL12MX_TIM8_Initv+0xc6>
  {
    Error_Handler();
 8001856:	f000 f89b 	bl	8001990 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185a:	2300      	movs	r3, #0
 800185c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800185e:	2300      	movs	r3, #0
 8001860:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001866:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800186a:	4619      	mov	r1, r3
 800186c:	482e      	ldr	r0, [pc, #184]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 800186e:	f002 fb55 	bl	8003f1c <HAL_TIMEx_MasterConfigSynchronization>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf14      	ite	ne
 8001878:	2301      	movne	r3, #1
 800187a:	2300      	moveq	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <_ZL12MX_TIM8_Initv+0xf2>
  {
    Error_Handler();
 8001882:	f000 f885 	bl	8001990 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001886:	2360      	movs	r3, #96	; 0x60
 8001888:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800188a:	2300      	movs	r3, #0
 800188c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800188e:	2300      	movs	r3, #0
 8001890:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001892:	2300      	movs	r3, #0
 8001894:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001896:	2300      	movs	r3, #0
 8001898:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800189e:	2300      	movs	r3, #0
 80018a0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018a2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018a6:	2200      	movs	r2, #0
 80018a8:	4619      	mov	r1, r3
 80018aa:	481f      	ldr	r0, [pc, #124]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 80018ac:	f001 fcd4 	bl	8003258 <HAL_TIM_PWM_ConfigChannel>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf14      	ite	ne
 80018b6:	2301      	movne	r3, #1
 80018b8:	2300      	moveq	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 80018c0:	f000 f866 	bl	8001990 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018c4:	2300      	movs	r3, #0
 80018c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018d0:	2300      	movs	r3, #0
 80018d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018e2:	2300      	movs	r3, #0
 80018e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80018f4:	2300      	movs	r3, #0
 80018f6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	4619      	mov	r1, r3
 8001900:	4809      	ldr	r0, [pc, #36]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 8001902:	f002 fb8d 	bl	8004020 <HAL_TIMEx_ConfigBreakDeadTime>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	bf14      	ite	ne
 800190c:	2301      	movne	r3, #1
 800190e:	2300      	moveq	r3, #0
 8001910:	b2db      	uxtb	r3, r3
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <_ZL12MX_TIM8_Initv+0x186>
  {
    Error_Handler();
 8001916:	f000 f83b 	bl	8001990 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800191a:	4803      	ldr	r0, [pc, #12]	; (8001928 <_ZL12MX_TIM8_Initv+0x194>)
 800191c:	f000 f8aa 	bl	8001a74 <HAL_TIM_MspPostInit>

}
 8001920:	bf00      	nop
 8001922:	3770      	adds	r7, #112	; 0x70
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000110 	.word	0x20000110
 800192c:	40013400 	.word	0x40013400

08001930 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b086      	sub	sp, #24
 8001934:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001936:	1d3b      	adds	r3, r7, #4
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001944:	4b11      	ldr	r3, [pc, #68]	; (800198c <_ZL12MX_GPIO_Initv+0x5c>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	4a10      	ldr	r2, [pc, #64]	; (800198c <_ZL12MX_GPIO_Initv+0x5c>)
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <_ZL12MX_GPIO_Initv+0x5c>)
 8001952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	603b      	str	r3, [r7, #0]
 800195a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4, GPIO_PIN_RESET);
 800195c:	2200      	movs	r2, #0
 800195e:	2113      	movs	r1, #19
 8001960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001964:	f000 fc68 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001968:	2313      	movs	r3, #19
 800196a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800196c:	2301      	movs	r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4619      	mov	r1, r3
 800197c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001980:	f000 fad8 	bl	8001f34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001984:	bf00      	nop
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40021000 	.word	0x40021000

08001990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001994:	b672      	cpsid	i
}
 8001996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001998:	e7fe      	b.n	8001998 <Error_Handler+0x8>
	...

0800199c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_MspInit+0x44>)
 80019a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <HAL_MspInit+0x44>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6613      	str	r3, [r2, #96]	; 0x60
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_MspInit+0x44>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_MspInit+0x44>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_MspInit+0x44>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	6593      	str	r3, [r2, #88]	; 0x58
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_MspInit+0x44>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019d2:	f000 fced 	bl	80023b0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40021000 	.word	0x40021000

080019e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b087      	sub	sp, #28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_TIM_Base_MspInit+0x80>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d10c      	bne.n	8001a10 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 80019f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019fa:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 80019fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a00:	6613      	str	r3, [r2, #96]	; 0x60
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 8001a04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001a0e:	e022      	b.n	8001a56 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <HAL_TIM_Base_MspInit+0x88>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d10c      	bne.n	8001a34 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a1a:	4b13      	ldr	r3, [pc, #76]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 8001a20:	f043 0304 	orr.w	r3, r3, #4
 8001a24:	6593      	str	r3, [r2, #88]	; 0x58
 8001a26:	4b10      	ldr	r3, [pc, #64]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	f003 0304 	and.w	r3, r3, #4
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]
}
 8001a32:	e010      	b.n	8001a56 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM8)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <HAL_TIM_Base_MspInit+0x8c>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d10b      	bne.n	8001a56 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	4a09      	ldr	r2, [pc, #36]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 8001a44:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a48:	6613      	str	r3, [r2, #96]	; 0x60
 8001a4a:	4b07      	ldr	r3, [pc, #28]	; (8001a68 <HAL_TIM_Base_MspInit+0x84>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
}
 8001a56:	bf00      	nop
 8001a58:	371c      	adds	r7, #28
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40012c00 	.word	0x40012c00
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40000800 	.word	0x40000800
 8001a70:	40013400 	.word	0x40013400

08001a74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a36      	ldr	r2, [pc, #216]	; (8001b6c <HAL_TIM_MspPostInit+0xf8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d11e      	bne.n	8001ad4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a96:	4b36      	ldr	r3, [pc, #216]	; (8001b70 <HAL_TIM_MspPostInit+0xfc>)
 8001a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9a:	4a35      	ldr	r2, [pc, #212]	; (8001b70 <HAL_TIM_MspPostInit+0xfc>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa2:	4b33      	ldr	r3, [pc, #204]	; (8001b70 <HAL_TIM_MspPostInit+0xfc>)
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	613b      	str	r3, [r7, #16]
 8001aac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001aae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ab2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ac0:	2306      	movs	r3, #6
 8001ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ac4:	f107 0314 	add.w	r3, r7, #20
 8001ac8:	4619      	mov	r1, r3
 8001aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ace:	f000 fa31 	bl	8001f34 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001ad2:	e046      	b.n	8001b62 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <HAL_TIM_MspPostInit+0x100>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d11e      	bne.n	8001b1c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <HAL_TIM_MspPostInit+0xfc>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	4a23      	ldr	r2, [pc, #140]	; (8001b70 <HAL_TIM_MspPostInit+0xfc>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <HAL_TIM_MspPostInit+0xfc>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001af6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b00:	2302      	movs	r3, #2
 8001b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001b08:	230a      	movs	r3, #10
 8001b0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b16:	f000 fa0d 	bl	8001f34 <HAL_GPIO_Init>
}
 8001b1a:	e022      	b.n	8001b62 <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM8)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a15      	ldr	r2, [pc, #84]	; (8001b78 <HAL_TIM_MspPostInit+0x104>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d11d      	bne.n	8001b62 <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b26:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <HAL_TIM_MspPostInit+0xfc>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	4a11      	ldr	r2, [pc, #68]	; (8001b70 <HAL_TIM_MspPostInit+0xfc>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_TIM_MspPostInit+0xfc>)
 8001b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	60bb      	str	r3, [r7, #8]
 8001b3c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b44:	2302      	movs	r3, #2
 8001b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001b50:	2302      	movs	r3, #2
 8001b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b5e:	f000 f9e9 	bl	8001f34 <HAL_GPIO_Init>
}
 8001b62:	bf00      	nop
 8001b64:	3728      	adds	r7, #40	; 0x28
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	40012c00 	.word	0x40012c00
 8001b70:	40021000 	.word	0x40021000
 8001b74:	40000800 	.word	0x40000800
 8001b78:	40013400 	.word	0x40013400

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b80:	e7fe      	b.n	8001b80 <NMI_Handler+0x4>

08001b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <MemManage_Handler+0x4>

08001b8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc8:	f000 f890 	bl	8001cec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bd4:	4b06      	ldr	r3, [pc, #24]	; (8001bf0 <SystemInit+0x20>)
 8001bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <SystemInit+0x20>)
 8001bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001be4:	bf00      	nop
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bf6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bf8:	f7ff ffea 	bl	8001bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bfc:	480c      	ldr	r0, [pc, #48]	; (8001c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bfe:	490d      	ldr	r1, [pc, #52]	; (8001c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c00:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <LoopForever+0xe>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c04:	e002      	b.n	8001c0c <LoopCopyDataInit>

08001c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c0a:	3304      	adds	r3, #4

08001c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c10:	d3f9      	bcc.n	8001c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c12:	4a0a      	ldr	r2, [pc, #40]	; (8001c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c14:	4c0a      	ldr	r4, [pc, #40]	; (8001c40 <LoopForever+0x16>)
  movs r3, #0
 8001c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c18:	e001      	b.n	8001c1e <LoopFillZerobss>

08001c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c1c:	3204      	adds	r2, #4

08001c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c20:	d3fb      	bcc.n	8001c1a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001c22:	f002 faa9 	bl	8004178 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c26:	f7ff fa87 	bl	8001138 <main>

08001c2a <LoopForever>:

LoopForever:
    b LoopForever
 8001c2a:	e7fe      	b.n	8001c2a <LoopForever>
  ldr   r0, =_estack
 8001c2c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c34:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001c38:	080042c8 	.word	0x080042c8
  ldr r2, =_sbss
 8001c3c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001c40:	200002a0 	.word	0x200002a0

08001c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c44:	e7fe      	b.n	8001c44 <ADC1_2_IRQHandler>

08001c46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c50:	2003      	movs	r0, #3
 8001c52:	f000 f93d 	bl	8001ed0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c56:	200f      	movs	r0, #15
 8001c58:	f000 f80e 	bl	8001c78 <HAL_InitTick>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	71fb      	strb	r3, [r7, #7]
 8001c66:	e001      	b.n	8001c6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c68:	f7ff fe98 	bl	800199c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c6c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
	...

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c80:	2300      	movs	r3, #0
 8001c82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001c84:	4b16      	ldr	r3, [pc, #88]	; (8001ce0 <HAL_InitTick+0x68>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d022      	beq.n	8001cd2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001c8c:	4b15      	ldr	r3, [pc, #84]	; (8001ce4 <HAL_InitTick+0x6c>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_InitTick+0x68>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f000 f93a 	bl	8001f1a <HAL_SYSTICK_Config>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10f      	bne.n	8001ccc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b0f      	cmp	r3, #15
 8001cb0:	d809      	bhi.n	8001cc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cba:	f000 f914 	bl	8001ee6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	; (8001ce8 <HAL_InitTick+0x70>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6013      	str	r3, [r2, #0]
 8001cc4:	e007      	b.n	8001cd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	73fb      	strb	r3, [r7, #15]
 8001cca:	e004      	b.n	8001cd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
 8001cd0:	e001      	b.n	8001cd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3710      	adds	r7, #16
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000008 	.word	0x20000008
 8001ce4:	20000000 	.word	0x20000000
 8001ce8:	20000004 	.word	0x20000004

08001cec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cf0:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_IncTick+0x1c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <HAL_IncTick+0x20>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	4a03      	ldr	r2, [pc, #12]	; (8001d08 <HAL_IncTick+0x1c>)
 8001cfc:	6013      	str	r3, [r2, #0]
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	2000015c 	.word	0x2000015c
 8001d0c:	20000008 	.word	0x20000008

08001d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_GetTick+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	2000015c 	.word	0x2000015c

08001d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff ffee 	bl	8001d10 <HAL_GetTick>
 8001d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d40:	d004      	beq.n	8001d4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d42:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_Delay+0x40>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4413      	add	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d4c:	bf00      	nop
 8001d4e:	f7ff ffdf 	bl	8001d10 <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	68fa      	ldr	r2, [r7, #12]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d8f7      	bhi.n	8001d4e <HAL_Delay+0x26>
  {
  }
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000008 	.word	0x20000008

08001d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d82:	68ba      	ldr	r2, [r7, #8]
 8001d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d88:	4013      	ands	r3, r2
 8001d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d9e:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <__NVIC_SetPriorityGrouping+0x44>)
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	60d3      	str	r3, [r2, #12]
}
 8001da4:	bf00      	nop
 8001da6:	3714      	adds	r7, #20
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <__NVIC_GetPriorityGrouping+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	0a1b      	lsrs	r3, r3, #8
 8001dbe:	f003 0307 	and.w	r3, r3, #7
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	e000ed00 	.word	0xe000ed00

08001dd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	db0a      	blt.n	8001dfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	b2da      	uxtb	r2, r3
 8001de8:	490c      	ldr	r1, [pc, #48]	; (8001e1c <__NVIC_SetPriority+0x4c>)
 8001dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dee:	0112      	lsls	r2, r2, #4
 8001df0:	b2d2      	uxtb	r2, r2
 8001df2:	440b      	add	r3, r1
 8001df4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df8:	e00a      	b.n	8001e10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	4908      	ldr	r1, [pc, #32]	; (8001e20 <__NVIC_SetPriority+0x50>)
 8001e00:	79fb      	ldrb	r3, [r7, #7]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	3b04      	subs	r3, #4
 8001e08:	0112      	lsls	r2, r2, #4
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	440b      	add	r3, r1
 8001e0e:	761a      	strb	r2, [r3, #24]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000e100 	.word	0xe000e100
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b089      	sub	sp, #36	; 0x24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f1c3 0307 	rsb	r3, r3, #7
 8001e3e:	2b04      	cmp	r3, #4
 8001e40:	bf28      	it	cs
 8001e42:	2304      	movcs	r3, #4
 8001e44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3304      	adds	r3, #4
 8001e4a:	2b06      	cmp	r3, #6
 8001e4c:	d902      	bls.n	8001e54 <NVIC_EncodePriority+0x30>
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3b03      	subs	r3, #3
 8001e52:	e000      	b.n	8001e56 <NVIC_EncodePriority+0x32>
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43da      	mvns	r2, r3
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	401a      	ands	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e6c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	fa01 f303 	lsl.w	r3, r1, r3
 8001e76:	43d9      	mvns	r1, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e7c:	4313      	orrs	r3, r2
         );
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3724      	adds	r7, #36	; 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3b01      	subs	r3, #1
 8001e98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e9c:	d301      	bcc.n	8001ea2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e00f      	b.n	8001ec2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ea2:	4a0a      	ldr	r2, [pc, #40]	; (8001ecc <SysTick_Config+0x40>)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3b01      	subs	r3, #1
 8001ea8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001eaa:	210f      	movs	r1, #15
 8001eac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001eb0:	f7ff ff8e 	bl	8001dd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eb4:	4b05      	ldr	r3, [pc, #20]	; (8001ecc <SysTick_Config+0x40>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eba:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <SysTick_Config+0x40>)
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	e000e010 	.word	0xe000e010

08001ed0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff ff47 	bl	8001d6c <__NVIC_SetPriorityGrouping>
}
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b086      	sub	sp, #24
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	4603      	mov	r3, r0
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
 8001ef2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef4:	f7ff ff5e 	bl	8001db4 <__NVIC_GetPriorityGrouping>
 8001ef8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	68b9      	ldr	r1, [r7, #8]
 8001efe:	6978      	ldr	r0, [r7, #20]
 8001f00:	f7ff ff90 	bl	8001e24 <NVIC_EncodePriority>
 8001f04:	4602      	mov	r2, r0
 8001f06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f0a:	4611      	mov	r1, r2
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff5f 	bl	8001dd0 <__NVIC_SetPriority>
}
 8001f12:	bf00      	nop
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffb2 	bl	8001e8c <SysTick_Config>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b087      	sub	sp, #28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f42:	e15a      	b.n	80021fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	2101      	movs	r1, #1
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f50:	4013      	ands	r3, r2
 8001f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 814c 	beq.w	80021f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d005      	beq.n	8001f74 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d130      	bne.n	8001fd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	2203      	movs	r2, #3
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68da      	ldr	r2, [r3, #12]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	693a      	ldr	r2, [r7, #16]
 8001fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001faa:	2201      	movs	r2, #1
 8001fac:	697b      	ldr	r3, [r7, #20]
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	091b      	lsrs	r3, r3, #4
 8001fc0:	f003 0201 	and.w	r2, r3, #1
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d017      	beq.n	8002012 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d123      	bne.n	8002066 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	08da      	lsrs	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	3208      	adds	r2, #8
 8002026:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800202a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	4013      	ands	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	691a      	ldr	r2, [r3, #16]
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4313      	orrs	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	08da      	lsrs	r2, r3, #3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	3208      	adds	r2, #8
 8002060:	6939      	ldr	r1, [r7, #16]
 8002062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	693a      	ldr	r2, [r7, #16]
 800207a:	4013      	ands	r3, r2
 800207c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0203 	and.w	r2, r3, #3
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	4313      	orrs	r3, r2
 8002092:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	693a      	ldr	r2, [r7, #16]
 8002098:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 80a6 	beq.w	80021f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a8:	4b5b      	ldr	r3, [pc, #364]	; (8002218 <HAL_GPIO_Init+0x2e4>)
 80020aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ac:	4a5a      	ldr	r2, [pc, #360]	; (8002218 <HAL_GPIO_Init+0x2e4>)
 80020ae:	f043 0301 	orr.w	r3, r3, #1
 80020b2:	6613      	str	r3, [r2, #96]	; 0x60
 80020b4:	4b58      	ldr	r3, [pc, #352]	; (8002218 <HAL_GPIO_Init+0x2e4>)
 80020b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	60bb      	str	r3, [r7, #8]
 80020be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020c0:	4a56      	ldr	r2, [pc, #344]	; (800221c <HAL_GPIO_Init+0x2e8>)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	089b      	lsrs	r3, r3, #2
 80020c6:	3302      	adds	r3, #2
 80020c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	220f      	movs	r2, #15
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4013      	ands	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80020ea:	d01f      	beq.n	800212c <HAL_GPIO_Init+0x1f8>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	4a4c      	ldr	r2, [pc, #304]	; (8002220 <HAL_GPIO_Init+0x2ec>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d019      	beq.n	8002128 <HAL_GPIO_Init+0x1f4>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	4a4b      	ldr	r2, [pc, #300]	; (8002224 <HAL_GPIO_Init+0x2f0>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d013      	beq.n	8002124 <HAL_GPIO_Init+0x1f0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a4a      	ldr	r2, [pc, #296]	; (8002228 <HAL_GPIO_Init+0x2f4>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d00d      	beq.n	8002120 <HAL_GPIO_Init+0x1ec>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a49      	ldr	r2, [pc, #292]	; (800222c <HAL_GPIO_Init+0x2f8>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d007      	beq.n	800211c <HAL_GPIO_Init+0x1e8>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a48      	ldr	r2, [pc, #288]	; (8002230 <HAL_GPIO_Init+0x2fc>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d101      	bne.n	8002118 <HAL_GPIO_Init+0x1e4>
 8002114:	2305      	movs	r3, #5
 8002116:	e00a      	b.n	800212e <HAL_GPIO_Init+0x1fa>
 8002118:	2306      	movs	r3, #6
 800211a:	e008      	b.n	800212e <HAL_GPIO_Init+0x1fa>
 800211c:	2304      	movs	r3, #4
 800211e:	e006      	b.n	800212e <HAL_GPIO_Init+0x1fa>
 8002120:	2303      	movs	r3, #3
 8002122:	e004      	b.n	800212e <HAL_GPIO_Init+0x1fa>
 8002124:	2302      	movs	r3, #2
 8002126:	e002      	b.n	800212e <HAL_GPIO_Init+0x1fa>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <HAL_GPIO_Init+0x1fa>
 800212c:	2300      	movs	r3, #0
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	f002 0203 	and.w	r2, r2, #3
 8002134:	0092      	lsls	r2, r2, #2
 8002136:	4093      	lsls	r3, r2
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	4313      	orrs	r3, r2
 800213c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800213e:	4937      	ldr	r1, [pc, #220]	; (800221c <HAL_GPIO_Init+0x2e8>)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	693a      	ldr	r2, [r7, #16]
 8002148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800214c:	4b39      	ldr	r3, [pc, #228]	; (8002234 <HAL_GPIO_Init+0x300>)
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	43db      	mvns	r3, r3
 8002156:	693a      	ldr	r2, [r7, #16]
 8002158:	4013      	ands	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002170:	4a30      	ldr	r2, [pc, #192]	; (8002234 <HAL_GPIO_Init+0x300>)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002176:	4b2f      	ldr	r3, [pc, #188]	; (8002234 <HAL_GPIO_Init+0x300>)
 8002178:	68db      	ldr	r3, [r3, #12]
 800217a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	43db      	mvns	r3, r3
 8002180:	693a      	ldr	r2, [r7, #16]
 8002182:	4013      	ands	r3, r2
 8002184:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d003      	beq.n	800219a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800219a:	4a26      	ldr	r2, [pc, #152]	; (8002234 <HAL_GPIO_Init+0x300>)
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_GPIO_Init+0x300>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d003      	beq.n	80021c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80021c4:	4a1b      	ldr	r2, [pc, #108]	; (8002234 <HAL_GPIO_Init+0x300>)
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80021ca:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <HAL_GPIO_Init+0x300>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	43db      	mvns	r3, r3
 80021d4:	693a      	ldr	r2, [r7, #16]
 80021d6:	4013      	ands	r3, r2
 80021d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d003      	beq.n	80021ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4313      	orrs	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_GPIO_Init+0x300>)
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa22 f303 	lsr.w	r3, r2, r3
 8002204:	2b00      	cmp	r3, #0
 8002206:	f47f ae9d 	bne.w	8001f44 <HAL_GPIO_Init+0x10>
  }
}
 800220a:	bf00      	nop
 800220c:	bf00      	nop
 800220e:	371c      	adds	r7, #28
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	40021000 	.word	0x40021000
 800221c:	40010000 	.word	0x40010000
 8002220:	48000400 	.word	0x48000400
 8002224:	48000800 	.word	0x48000800
 8002228:	48000c00 	.word	0x48000c00
 800222c:	48001000 	.word	0x48001000
 8002230:	48001400 	.word	0x48001400
 8002234:	40010400 	.word	0x40010400

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002254:	e002      	b.n	800225c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002256:	887a      	ldrh	r2, [r7, #2]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d141      	bne.n	80022fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002276:	4b4b      	ldr	r3, [pc, #300]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800227e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002282:	d131      	bne.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002284:	4b47      	ldr	r3, [pc, #284]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800228a:	4a46      	ldr	r2, [pc, #280]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002290:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002294:	4b43      	ldr	r3, [pc, #268]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800229c:	4a41      	ldr	r2, [pc, #260]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800229e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022a4:	4b40      	ldr	r3, [pc, #256]	; (80023a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2232      	movs	r2, #50	; 0x32
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	4a3f      	ldr	r2, [pc, #252]	; (80023ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022b0:	fba2 2303 	umull	r2, r3, r2, r3
 80022b4:	0c9b      	lsrs	r3, r3, #18
 80022b6:	3301      	adds	r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ba:	e002      	b.n	80022c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3b01      	subs	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022c2:	4b38      	ldr	r3, [pc, #224]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ce:	d102      	bne.n	80022d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1f2      	bne.n	80022bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022d6:	4b33      	ldr	r3, [pc, #204]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d8:	695b      	ldr	r3, [r3, #20]
 80022da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022e2:	d158      	bne.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e057      	b.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022e8:	4b2e      	ldr	r3, [pc, #184]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ee:	4a2d      	ldr	r2, [pc, #180]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022f8:	e04d      	b.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002300:	d141      	bne.n	8002386 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002302:	4b28      	ldr	r3, [pc, #160]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800230a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230e:	d131      	bne.n	8002374 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002310:	4b24      	ldr	r3, [pc, #144]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002316:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002320:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002328:	4a1e      	ldr	r2, [pc, #120]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800232a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800232e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2232      	movs	r2, #50	; 0x32
 8002336:	fb02 f303 	mul.w	r3, r2, r3
 800233a:	4a1c      	ldr	r2, [pc, #112]	; (80023ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800233c:	fba2 2303 	umull	r2, r3, r2, r3
 8002340:	0c9b      	lsrs	r3, r3, #18
 8002342:	3301      	adds	r3, #1
 8002344:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002346:	e002      	b.n	800234e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3b01      	subs	r3, #1
 800234c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800235a:	d102      	bne.n	8002362 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1f2      	bne.n	8002348 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800236e:	d112      	bne.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e011      	b.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002376:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002380:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002384:	e007      	b.n	8002396 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800238e:	4a05      	ldr	r2, [pc, #20]	; (80023a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002390:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002394:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40007000 	.word	0x40007000
 80023a8:	20000000 	.word	0x20000000
 80023ac:	431bde83 	.word	0x431bde83

080023b0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80023ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023be:	6093      	str	r3, [r2, #8]
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40007000 	.word	0x40007000

080023d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e2fe      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d075      	beq.n	80024da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ee:	4b97      	ldr	r3, [pc, #604]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 030c 	and.w	r3, r3, #12
 80023f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f8:	4b94      	ldr	r3, [pc, #592]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b0c      	cmp	r3, #12
 8002406:	d102      	bne.n	800240e <HAL_RCC_OscConfig+0x3e>
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d002      	beq.n	8002414 <HAL_RCC_OscConfig+0x44>
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d10b      	bne.n	800242c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002414:	4b8d      	ldr	r3, [pc, #564]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d05b      	beq.n	80024d8 <HAL_RCC_OscConfig+0x108>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d157      	bne.n	80024d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e2d9      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002434:	d106      	bne.n	8002444 <HAL_RCC_OscConfig+0x74>
 8002436:	4b85      	ldr	r3, [pc, #532]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a84      	ldr	r2, [pc, #528]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800243c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	e01d      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800244c:	d10c      	bne.n	8002468 <HAL_RCC_OscConfig+0x98>
 800244e:	4b7f      	ldr	r3, [pc, #508]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7e      	ldr	r2, [pc, #504]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	4b7c      	ldr	r3, [pc, #496]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a7b      	ldr	r2, [pc, #492]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	e00b      	b.n	8002480 <HAL_RCC_OscConfig+0xb0>
 8002468:	4b78      	ldr	r3, [pc, #480]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a77      	ldr	r2, [pc, #476]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800246e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b75      	ldr	r3, [pc, #468]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a74      	ldr	r2, [pc, #464]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800247a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800247e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d013      	beq.n	80024b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7ff fc42 	bl	8001d10 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff fc3e 	bl	8001d10 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b64      	cmp	r3, #100	; 0x64
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e29e      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a2:	4b6a      	ldr	r3, [pc, #424]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d0f0      	beq.n	8002490 <HAL_RCC_OscConfig+0xc0>
 80024ae:	e014      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b0:	f7ff fc2e 	bl	8001d10 <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff fc2a 	bl	8001d10 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e28a      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ca:	4b60      	ldr	r3, [pc, #384]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d1f0      	bne.n	80024b8 <HAL_RCC_OscConfig+0xe8>
 80024d6:	e000      	b.n	80024da <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d075      	beq.n	80025d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e6:	4b59      	ldr	r3, [pc, #356]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	f003 030c 	and.w	r3, r3, #12
 80024ee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f0:	4b56      	ldr	r3, [pc, #344]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	2b0c      	cmp	r3, #12
 80024fe:	d102      	bne.n	8002506 <HAL_RCC_OscConfig+0x136>
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b02      	cmp	r3, #2
 8002504:	d002      	beq.n	800250c <HAL_RCC_OscConfig+0x13c>
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b04      	cmp	r3, #4
 800250a:	d11f      	bne.n	800254c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800250c:	4b4f      	ldr	r3, [pc, #316]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_OscConfig+0x154>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e25d      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002524:	4b49      	ldr	r3, [pc, #292]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	061b      	lsls	r3, r3, #24
 8002532:	4946      	ldr	r1, [pc, #280]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002538:	4b45      	ldr	r3, [pc, #276]	; (8002650 <HAL_RCC_OscConfig+0x280>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fb9b 	bl	8001c78 <HAL_InitTick>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d043      	beq.n	80025d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e249      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d023      	beq.n	800259c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002554:	4b3d      	ldr	r3, [pc, #244]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a3c      	ldr	r2, [pc, #240]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800255a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800255e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7ff fbd6 	bl	8001d10 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002568:	f7ff fbd2 	bl	8001d10 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e232      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800257a:	4b34      	ldr	r3, [pc, #208]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0f0      	beq.n	8002568 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002586:	4b31      	ldr	r3, [pc, #196]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	061b      	lsls	r3, r3, #24
 8002594:	492d      	ldr	r1, [pc, #180]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002596:	4313      	orrs	r3, r2
 8002598:	604b      	str	r3, [r1, #4]
 800259a:	e01a      	b.n	80025d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259c:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a2a      	ldr	r2, [pc, #168]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80025a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a8:	f7ff fbb2 	bl	8001d10 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025ae:	e008      	b.n	80025c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b0:	f7ff fbae 	bl	8001d10 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e20e      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c2:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1f0      	bne.n	80025b0 <HAL_RCC_OscConfig+0x1e0>
 80025ce:	e000      	b.n	80025d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0308 	and.w	r3, r3, #8
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d041      	beq.n	8002662 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d01c      	beq.n	8002620 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80025e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ec:	4a17      	ldr	r2, [pc, #92]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f6:	f7ff fb8b 	bl	8001d10 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fe:	f7ff fb87 	bl	8001d10 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e1e7      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002610:	4b0e      	ldr	r3, [pc, #56]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0ef      	beq.n	80025fe <HAL_RCC_OscConfig+0x22e>
 800261e:	e020      	b.n	8002662 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002620:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002622:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002626:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_RCC_OscConfig+0x27c>)
 8002628:	f023 0301 	bic.w	r3, r3, #1
 800262c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002630:	f7ff fb6e 	bl	8001d10 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002636:	e00d      	b.n	8002654 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002638:	f7ff fb6a 	bl	8001d10 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d906      	bls.n	8002654 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e1ca      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002654:	4b8c      	ldr	r3, [pc, #560]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002656:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ea      	bne.n	8002638 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b00      	cmp	r3, #0
 800266c:	f000 80a6 	beq.w	80027bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002670:	2300      	movs	r3, #0
 8002672:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002674:	4b84      	ldr	r3, [pc, #528]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_RCC_OscConfig+0x2b4>
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x2b6>
 8002684:	2300      	movs	r3, #0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00d      	beq.n	80026a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800268a:	4b7f      	ldr	r3, [pc, #508]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	4a7e      	ldr	r2, [pc, #504]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
 8002696:	4b7c      	ldr	r3, [pc, #496]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80026a2:	2301      	movs	r3, #1
 80026a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026a6:	4b79      	ldr	r3, [pc, #484]	; (800288c <HAL_RCC_OscConfig+0x4bc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d118      	bne.n	80026e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026b2:	4b76      	ldr	r3, [pc, #472]	; (800288c <HAL_RCC_OscConfig+0x4bc>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a75      	ldr	r2, [pc, #468]	; (800288c <HAL_RCC_OscConfig+0x4bc>)
 80026b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026be:	f7ff fb27 	bl	8001d10 <HAL_GetTick>
 80026c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026c6:	f7ff fb23 	bl	8001d10 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e183      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026d8:	4b6c      	ldr	r3, [pc, #432]	; (800288c <HAL_RCC_OscConfig+0x4bc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d108      	bne.n	80026fe <HAL_RCC_OscConfig+0x32e>
 80026ec:	4b66      	ldr	r3, [pc, #408]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80026ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f2:	4a65      	ldr	r2, [pc, #404]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026fc:	e024      	b.n	8002748 <HAL_RCC_OscConfig+0x378>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b05      	cmp	r3, #5
 8002704:	d110      	bne.n	8002728 <HAL_RCC_OscConfig+0x358>
 8002706:	4b60      	ldr	r3, [pc, #384]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270c:	4a5e      	ldr	r2, [pc, #376]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800270e:	f043 0304 	orr.w	r3, r3, #4
 8002712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002716:	4b5c      	ldr	r3, [pc, #368]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271c:	4a5a      	ldr	r2, [pc, #360]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800271e:	f043 0301 	orr.w	r3, r3, #1
 8002722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002726:	e00f      	b.n	8002748 <HAL_RCC_OscConfig+0x378>
 8002728:	4b57      	ldr	r3, [pc, #348]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800272a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272e:	4a56      	ldr	r2, [pc, #344]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002730:	f023 0301 	bic.w	r3, r3, #1
 8002734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002738:	4b53      	ldr	r3, [pc, #332]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800273a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800273e:	4a52      	ldr	r2, [pc, #328]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002740:	f023 0304 	bic.w	r3, r3, #4
 8002744:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d016      	beq.n	800277e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002750:	f7ff fade 	bl	8001d10 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7ff fada 	bl	8001d10 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	; 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e138      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800276e:	4b46      	ldr	r3, [pc, #280]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b00      	cmp	r3, #0
 800277a:	d0ed      	beq.n	8002758 <HAL_RCC_OscConfig+0x388>
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277e:	f7ff fac7 	bl	8001d10 <HAL_GetTick>
 8002782:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002784:	e00a      	b.n	800279c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002786:	f7ff fac3 	bl	8001d10 <HAL_GetTick>
 800278a:	4602      	mov	r2, r0
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	f241 3288 	movw	r2, #5000	; 0x1388
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e121      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800279c:	4b3a      	ldr	r3, [pc, #232]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800279e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1ed      	bne.n	8002786 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027aa:	7ffb      	ldrb	r3, [r7, #31]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d105      	bne.n	80027bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027b0:	4b35      	ldr	r3, [pc, #212]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80027b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b4:	4a34      	ldr	r2, [pc, #208]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80027b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d03c      	beq.n	8002842 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d01c      	beq.n	800280a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027d0:	4b2d      	ldr	r3, [pc, #180]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80027d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027d6:	4a2c      	ldr	r2, [pc, #176]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e0:	f7ff fa96 	bl	8001d10 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027e8:	f7ff fa92 	bl	8001d10 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e0f2      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027fa:	4b23      	ldr	r3, [pc, #140]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 80027fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0ef      	beq.n	80027e8 <HAL_RCC_OscConfig+0x418>
 8002808:	e01b      	b.n	8002842 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800280a:	4b1f      	ldr	r3, [pc, #124]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800280c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002810:	4a1d      	ldr	r2, [pc, #116]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281a:	f7ff fa79 	bl	8001d10 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002822:	f7ff fa75 	bl	8001d10 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e0d5      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002836:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ef      	bne.n	8002822 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69db      	ldr	r3, [r3, #28]
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 80c9 	beq.w	80029de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b0c      	cmp	r3, #12
 8002856:	f000 8083 	beq.w	8002960 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	2b02      	cmp	r3, #2
 8002860:	d15e      	bne.n	8002920 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002862:	4b09      	ldr	r3, [pc, #36]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_RCC_OscConfig+0x4b8>)
 8002868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286e:	f7ff fa4f 	bl	8001d10 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002874:	e00c      	b.n	8002890 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002876:	f7ff fa4b 	bl	8001d10 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d905      	bls.n	8002890 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e0ab      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
 8002888:	40021000 	.word	0x40021000
 800288c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002890:	4b55      	ldr	r3, [pc, #340]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1ec      	bne.n	8002876 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800289c:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 800289e:	68da      	ldr	r2, [r3, #12]
 80028a0:	4b52      	ldr	r3, [pc, #328]	; (80029ec <HAL_RCC_OscConfig+0x61c>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6a11      	ldr	r1, [r2, #32]
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ac:	3a01      	subs	r2, #1
 80028ae:	0112      	lsls	r2, r2, #4
 80028b0:	4311      	orrs	r1, r2
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80028b6:	0212      	lsls	r2, r2, #8
 80028b8:	4311      	orrs	r1, r2
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028be:	0852      	lsrs	r2, r2, #1
 80028c0:	3a01      	subs	r2, #1
 80028c2:	0552      	lsls	r2, r2, #21
 80028c4:	4311      	orrs	r1, r2
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028ca:	0852      	lsrs	r2, r2, #1
 80028cc:	3a01      	subs	r2, #1
 80028ce:	0652      	lsls	r2, r2, #25
 80028d0:	4311      	orrs	r1, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028d6:	06d2      	lsls	r2, r2, #27
 80028d8:	430a      	orrs	r2, r1
 80028da:	4943      	ldr	r1, [pc, #268]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e0:	4b41      	ldr	r3, [pc, #260]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a40      	ldr	r2, [pc, #256]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 80028e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028ec:	4b3e      	ldr	r3, [pc, #248]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	4a3d      	ldr	r2, [pc, #244]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 80028f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f8:	f7ff fa0a 	bl	8001d10 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002900:	f7ff fa06 	bl	8001d10 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e066      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002912:	4b35      	ldr	r3, [pc, #212]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x530>
 800291e:	e05e      	b.n	80029de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002920:	4b31      	ldr	r3, [pc, #196]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a30      	ldr	r2, [pc, #192]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 8002926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff f9f0 	bl	8001d10 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7ff f9ec 	bl	8001d10 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e04c      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002946:	4b28      	ldr	r3, [pc, #160]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002952:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 8002954:	68da      	ldr	r2, [r3, #12]
 8002956:	4924      	ldr	r1, [pc, #144]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 8002958:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <HAL_RCC_OscConfig+0x620>)
 800295a:	4013      	ands	r3, r2
 800295c:	60cb      	str	r3, [r1, #12]
 800295e:	e03e      	b.n	80029de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d101      	bne.n	800296c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e039      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800296c:	4b1e      	ldr	r3, [pc, #120]	; (80029e8 <HAL_RCC_OscConfig+0x618>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f003 0203 	and.w	r2, r3, #3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	429a      	cmp	r2, r3
 800297e:	d12c      	bne.n	80029da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298a:	3b01      	subs	r3, #1
 800298c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d123      	bne.n	80029da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800299e:	429a      	cmp	r2, r3
 80029a0:	d11b      	bne.n	80029da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d113      	bne.n	80029da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029bc:	085b      	lsrs	r3, r3, #1
 80029be:	3b01      	subs	r3, #1
 80029c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d109      	bne.n	80029da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d0:	085b      	lsrs	r3, r3, #1
 80029d2:	3b01      	subs	r3, #1
 80029d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d001      	beq.n	80029de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80029de:	2300      	movs	r3, #0
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3720      	adds	r7, #32
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40021000 	.word	0x40021000
 80029ec:	019f800c 	.word	0x019f800c
 80029f0:	feeefffc 	.word	0xfeeefffc

080029f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b086      	sub	sp, #24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d101      	bne.n	8002a0c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e11e      	b.n	8002c4a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b91      	ldr	r3, [pc, #580]	; (8002c54 <HAL_RCC_ClockConfig+0x260>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d910      	bls.n	8002a3c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b8e      	ldr	r3, [pc, #568]	; (8002c54 <HAL_RCC_ClockConfig+0x260>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f023 020f 	bic.w	r2, r3, #15
 8002a22:	498c      	ldr	r1, [pc, #560]	; (8002c54 <HAL_RCC_ClockConfig+0x260>)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a2a:	4b8a      	ldr	r3, [pc, #552]	; (8002c54 <HAL_RCC_ClockConfig+0x260>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	683a      	ldr	r2, [r7, #0]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d001      	beq.n	8002a3c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e106      	b.n	8002c4a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d073      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d129      	bne.n	8002aa4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a50:	4b81      	ldr	r3, [pc, #516]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0f4      	b.n	8002c4a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002a60:	f000 f966 	bl	8002d30 <RCC_GetSysClockFreqFromPLLSource>
 8002a64:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4a7c      	ldr	r2, [pc, #496]	; (8002c5c <HAL_RCC_ClockConfig+0x268>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d93f      	bls.n	8002aee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a6e:	4b7a      	ldr	r3, [pc, #488]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d033      	beq.n	8002aee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d12f      	bne.n	8002aee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a8e:	4b72      	ldr	r3, [pc, #456]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a96:	4a70      	ldr	r2, [pc, #448]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	617b      	str	r3, [r7, #20]
 8002aa2:	e024      	b.n	8002aee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d107      	bne.n	8002abc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aac:	4b6a      	ldr	r3, [pc, #424]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0c6      	b.n	8002c4a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002abc:	4b66      	ldr	r3, [pc, #408]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0be      	b.n	8002c4a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002acc:	f000 f8ce 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	4a61      	ldr	r2, [pc, #388]	; (8002c5c <HAL_RCC_ClockConfig+0x268>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d909      	bls.n	8002aee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002ada:	4b5f      	ldr	r3, [pc, #380]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ae2:	4a5d      	ldr	r2, [pc, #372]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aee:	4b5a      	ldr	r3, [pc, #360]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	f023 0203 	bic.w	r2, r3, #3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	4957      	ldr	r1, [pc, #348]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002afc:	4313      	orrs	r3, r2
 8002afe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b00:	f7ff f906 	bl	8001d10 <HAL_GetTick>
 8002b04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b06:	e00a      	b.n	8002b1e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b08:	f7ff f902 	bl	8001d10 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e095      	b.n	8002c4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1e:	4b4e      	ldr	r3, [pc, #312]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f003 020c 	and.w	r2, r3, #12
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d1eb      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0302 	and.w	r3, r3, #2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d023      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b48:	4b43      	ldr	r3, [pc, #268]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a42      	ldr	r2, [pc, #264]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002b4e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b52:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d007      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002b60:	4b3d      	ldr	r3, [pc, #244]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002b68:	4a3b      	ldr	r2, [pc, #236]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002b6a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b70:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	4936      	ldr	r1, [pc, #216]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	608b      	str	r3, [r1, #8]
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b80      	cmp	r3, #128	; 0x80
 8002b88:	d105      	bne.n	8002b96 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b8a:	4b33      	ldr	r3, [pc, #204]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4a32      	ldr	r2, [pc, #200]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b94:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b96:	4b2f      	ldr	r3, [pc, #188]	; (8002c54 <HAL_RCC_ClockConfig+0x260>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d21d      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba4:	4b2b      	ldr	r3, [pc, #172]	; (8002c54 <HAL_RCC_ClockConfig+0x260>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f023 020f 	bic.w	r2, r3, #15
 8002bac:	4929      	ldr	r1, [pc, #164]	; (8002c54 <HAL_RCC_ClockConfig+0x260>)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bb4:	f7ff f8ac 	bl	8001d10 <HAL_GetTick>
 8002bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bba:	e00a      	b.n	8002bd2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bbc:	f7ff f8a8 	bl	8001d10 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e03b      	b.n	8002c4a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bd2:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <HAL_RCC_ClockConfig+0x260>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d1ed      	bne.n	8002bbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d008      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bec:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	4917      	ldr	r1, [pc, #92]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d009      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c0a:	4b13      	ldr	r3, [pc, #76]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	490f      	ldr	r1, [pc, #60]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c1e:	f000 f825 	bl	8002c6c <HAL_RCC_GetSysClockFreq>
 8002c22:	4602      	mov	r2, r0
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <HAL_RCC_ClockConfig+0x264>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	490c      	ldr	r1, [pc, #48]	; (8002c60 <HAL_RCC_ClockConfig+0x26c>)
 8002c30:	5ccb      	ldrb	r3, [r1, r3]
 8002c32:	f003 031f 	and.w	r3, r3, #31
 8002c36:	fa22 f303 	lsr.w	r3, r2, r3
 8002c3a:	4a0a      	ldr	r2, [pc, #40]	; (8002c64 <HAL_RCC_ClockConfig+0x270>)
 8002c3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <HAL_RCC_ClockConfig+0x274>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff f818 	bl	8001c78 <HAL_InitTick>
 8002c48:	4603      	mov	r3, r0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40022000 	.word	0x40022000
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	04c4b400 	.word	0x04c4b400
 8002c60:	080042b0 	.word	0x080042b0
 8002c64:	20000000 	.word	0x20000000
 8002c68:	20000004 	.word	0x20000004

08002c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b087      	sub	sp, #28
 8002c70:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c72:	4b2c      	ldr	r3, [pc, #176]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b04      	cmp	r3, #4
 8002c7c:	d102      	bne.n	8002c84 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c7e:	4b2a      	ldr	r3, [pc, #168]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c80:	613b      	str	r3, [r7, #16]
 8002c82:	e047      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002c84:	4b27      	ldr	r3, [pc, #156]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c86:	689b      	ldr	r3, [r3, #8]
 8002c88:	f003 030c 	and.w	r3, r3, #12
 8002c8c:	2b08      	cmp	r3, #8
 8002c8e:	d102      	bne.n	8002c96 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c90:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	e03e      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c96:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	f003 030c 	and.w	r3, r3, #12
 8002c9e:	2b0c      	cmp	r3, #12
 8002ca0:	d136      	bne.n	8002d10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ca2:	4b20      	ldr	r3, [pc, #128]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cac:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	091b      	lsrs	r3, r3, #4
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d10c      	bne.n	8002cda <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cc0:	4a1a      	ldr	r2, [pc, #104]	; (8002d2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	4a16      	ldr	r2, [pc, #88]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cca:	68d2      	ldr	r2, [r2, #12]
 8002ccc:	0a12      	lsrs	r2, r2, #8
 8002cce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cd2:	fb02 f303 	mul.w	r3, r2, r3
 8002cd6:	617b      	str	r3, [r7, #20]
      break;
 8002cd8:	e00c      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cda:	4a13      	ldr	r2, [pc, #76]	; (8002d28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce2:	4a10      	ldr	r2, [pc, #64]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ce4:	68d2      	ldr	r2, [r2, #12]
 8002ce6:	0a12      	lsrs	r2, r2, #8
 8002ce8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cec:	fb02 f303 	mul.w	r3, r2, r3
 8002cf0:	617b      	str	r3, [r7, #20]
      break;
 8002cf2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cf4:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0e5b      	lsrs	r3, r3, #25
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002d04:	697a      	ldr	r2, [r7, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	e001      	b.n	8002d14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002d14:	693b      	ldr	r3, [r7, #16]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	371c      	adds	r7, #28
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	00f42400 	.word	0x00f42400
 8002d2c:	007a1200 	.word	0x007a1200

08002d30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b087      	sub	sp, #28
 8002d34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d36:	4b1e      	ldr	r3, [pc, #120]	; (8002db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	f003 0303 	and.w	r3, r3, #3
 8002d3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d40:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d10c      	bne.n	8002d6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d54:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5c:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d5e:	68d2      	ldr	r2, [r2, #12]
 8002d60:	0a12      	lsrs	r2, r2, #8
 8002d62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d66:	fb02 f303 	mul.w	r3, r2, r3
 8002d6a:	617b      	str	r3, [r7, #20]
    break;
 8002d6c:	e00c      	b.n	8002d88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d6e:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d76:	4a0e      	ldr	r2, [pc, #56]	; (8002db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d78:	68d2      	ldr	r2, [r2, #12]
 8002d7a:	0a12      	lsrs	r2, r2, #8
 8002d7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d80:	fb02 f303 	mul.w	r3, r2, r3
 8002d84:	617b      	str	r3, [r7, #20]
    break;
 8002d86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	0e5b      	lsrs	r3, r3, #25
 8002d8e:	f003 0303 	and.w	r3, r3, #3
 8002d92:	3301      	adds	r3, #1
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d98:	697a      	ldr	r2, [r7, #20]
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002da2:	687b      	ldr	r3, [r7, #4]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	371c      	adds	r7, #28
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40021000 	.word	0x40021000
 8002db4:	007a1200 	.word	0x007a1200
 8002db8:	00f42400 	.word	0x00f42400

08002dbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b082      	sub	sp, #8
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e049      	b.n	8002e62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d106      	bne.n	8002de8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe fdfe 	bl	80019e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	3304      	adds	r3, #4
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f000 fc3a 	bl	8003674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}

08002e6a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d101      	bne.n	8002e7c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e049      	b.n	8002f10 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d106      	bne.n	8002e96 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f841 	bl	8002f18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2202      	movs	r2, #2
 8002e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	4610      	mov	r0, r2
 8002eaa:	f000 fbe3 	bl	8003674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3708      	adds	r7, #8
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f20:	bf00      	nop
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d109      	bne.n	8002f50 <HAL_TIM_PWM_Start+0x24>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e03c      	b.n	8002fca <HAL_TIM_PWM_Start+0x9e>
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d109      	bne.n	8002f6a <HAL_TIM_PWM_Start+0x3e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	e02f      	b.n	8002fca <HAL_TIM_PWM_Start+0x9e>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d109      	bne.n	8002f84 <HAL_TIM_PWM_Start+0x58>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	bf14      	ite	ne
 8002f7c:	2301      	movne	r3, #1
 8002f7e:	2300      	moveq	r3, #0
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	e022      	b.n	8002fca <HAL_TIM_PWM_Start+0x9e>
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	2b0c      	cmp	r3, #12
 8002f88:	d109      	bne.n	8002f9e <HAL_TIM_PWM_Start+0x72>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	bf14      	ite	ne
 8002f96:	2301      	movne	r3, #1
 8002f98:	2300      	moveq	r3, #0
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	e015      	b.n	8002fca <HAL_TIM_PWM_Start+0x9e>
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	2b10      	cmp	r3, #16
 8002fa2:	d109      	bne.n	8002fb8 <HAL_TIM_PWM_Start+0x8c>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	bf14      	ite	ne
 8002fb0:	2301      	movne	r3, #1
 8002fb2:	2300      	moveq	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	e008      	b.n	8002fca <HAL_TIM_PWM_Start+0x9e>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	bf14      	ite	ne
 8002fc4:	2301      	movne	r3, #1
 8002fc6:	2300      	moveq	r3, #0
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e097      	b.n	8003102 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d104      	bne.n	8002fe2 <HAL_TIM_PWM_Start+0xb6>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2202      	movs	r2, #2
 8002fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe0:	e023      	b.n	800302a <HAL_TIM_PWM_Start+0xfe>
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	2b04      	cmp	r3, #4
 8002fe6:	d104      	bne.n	8002ff2 <HAL_TIM_PWM_Start+0xc6>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff0:	e01b      	b.n	800302a <HAL_TIM_PWM_Start+0xfe>
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d104      	bne.n	8003002 <HAL_TIM_PWM_Start+0xd6>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003000:	e013      	b.n	800302a <HAL_TIM_PWM_Start+0xfe>
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	2b0c      	cmp	r3, #12
 8003006:	d104      	bne.n	8003012 <HAL_TIM_PWM_Start+0xe6>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2202      	movs	r2, #2
 800300c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003010:	e00b      	b.n	800302a <HAL_TIM_PWM_Start+0xfe>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	2b10      	cmp	r3, #16
 8003016:	d104      	bne.n	8003022 <HAL_TIM_PWM_Start+0xf6>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003020:	e003      	b.n	800302a <HAL_TIM_PWM_Start+0xfe>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2202      	movs	r2, #2
 8003026:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2201      	movs	r2, #1
 8003030:	6839      	ldr	r1, [r7, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f000 ff4c 	bl	8003ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a33      	ldr	r2, [pc, #204]	; (800310c <HAL_TIM_PWM_Start+0x1e0>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d013      	beq.n	800306a <HAL_TIM_PWM_Start+0x13e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a32      	ldr	r2, [pc, #200]	; (8003110 <HAL_TIM_PWM_Start+0x1e4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d00e      	beq.n	800306a <HAL_TIM_PWM_Start+0x13e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a30      	ldr	r2, [pc, #192]	; (8003114 <HAL_TIM_PWM_Start+0x1e8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d009      	beq.n	800306a <HAL_TIM_PWM_Start+0x13e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a2f      	ldr	r2, [pc, #188]	; (8003118 <HAL_TIM_PWM_Start+0x1ec>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_TIM_PWM_Start+0x13e>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a2d      	ldr	r2, [pc, #180]	; (800311c <HAL_TIM_PWM_Start+0x1f0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d101      	bne.n	800306e <HAL_TIM_PWM_Start+0x142>
 800306a:	2301      	movs	r3, #1
 800306c:	e000      	b.n	8003070 <HAL_TIM_PWM_Start+0x144>
 800306e:	2300      	movs	r3, #0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d007      	beq.n	8003084 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003082:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a20      	ldr	r2, [pc, #128]	; (800310c <HAL_TIM_PWM_Start+0x1e0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d018      	beq.n	80030c0 <HAL_TIM_PWM_Start+0x194>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003096:	d013      	beq.n	80030c0 <HAL_TIM_PWM_Start+0x194>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a20      	ldr	r2, [pc, #128]	; (8003120 <HAL_TIM_PWM_Start+0x1f4>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00e      	beq.n	80030c0 <HAL_TIM_PWM_Start+0x194>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1f      	ldr	r2, [pc, #124]	; (8003124 <HAL_TIM_PWM_Start+0x1f8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d009      	beq.n	80030c0 <HAL_TIM_PWM_Start+0x194>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a17      	ldr	r2, [pc, #92]	; (8003110 <HAL_TIM_PWM_Start+0x1e4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d004      	beq.n	80030c0 <HAL_TIM_PWM_Start+0x194>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a16      	ldr	r2, [pc, #88]	; (8003114 <HAL_TIM_PWM_Start+0x1e8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d115      	bne.n	80030ec <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689a      	ldr	r2, [r3, #8]
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <HAL_TIM_PWM_Start+0x1fc>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2b06      	cmp	r3, #6
 80030d0:	d015      	beq.n	80030fe <HAL_TIM_PWM_Start+0x1d2>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030d8:	d011      	beq.n	80030fe <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0201 	orr.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030ea:	e008      	b.n	80030fe <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f042 0201 	orr.w	r2, r2, #1
 80030fa:	601a      	str	r2, [r3, #0]
 80030fc:	e000      	b.n	8003100 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	40012c00 	.word	0x40012c00
 8003110:	40013400 	.word	0x40013400
 8003114:	40014000 	.word	0x40014000
 8003118:	40014400 	.word	0x40014400
 800311c:	40014800 	.word	0x40014800
 8003120:	40000400 	.word	0x40000400
 8003124:	40000800 	.word	0x40000800
 8003128:	00010007 	.word	0x00010007

0800312c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2200      	movs	r2, #0
 800313c:	6839      	ldr	r1, [r7, #0]
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fec6 	bl	8003ed0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a3e      	ldr	r2, [pc, #248]	; (8003244 <HAL_TIM_PWM_Stop+0x118>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <HAL_TIM_PWM_Stop+0x4a>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a3d      	ldr	r2, [pc, #244]	; (8003248 <HAL_TIM_PWM_Stop+0x11c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00e      	beq.n	8003176 <HAL_TIM_PWM_Stop+0x4a>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3b      	ldr	r2, [pc, #236]	; (800324c <HAL_TIM_PWM_Stop+0x120>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d009      	beq.n	8003176 <HAL_TIM_PWM_Stop+0x4a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a3a      	ldr	r2, [pc, #232]	; (8003250 <HAL_TIM_PWM_Stop+0x124>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d004      	beq.n	8003176 <HAL_TIM_PWM_Stop+0x4a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a38      	ldr	r2, [pc, #224]	; (8003254 <HAL_TIM_PWM_Stop+0x128>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d101      	bne.n	800317a <HAL_TIM_PWM_Stop+0x4e>
 8003176:	2301      	movs	r3, #1
 8003178:	e000      	b.n	800317c <HAL_TIM_PWM_Stop+0x50>
 800317a:	2300      	movs	r3, #0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d017      	beq.n	80031b0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6a1a      	ldr	r2, [r3, #32]
 8003186:	f241 1311 	movw	r3, #4369	; 0x1111
 800318a:	4013      	ands	r3, r2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10f      	bne.n	80031b0 <HAL_TIM_PWM_Stop+0x84>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6a1a      	ldr	r2, [r3, #32]
 8003196:	f244 4344 	movw	r3, #17476	; 0x4444
 800319a:	4013      	ands	r3, r2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d107      	bne.n	80031b0 <HAL_TIM_PWM_Stop+0x84>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6a1a      	ldr	r2, [r3, #32]
 80031b6:	f241 1311 	movw	r3, #4369	; 0x1111
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d10f      	bne.n	80031e0 <HAL_TIM_PWM_Stop+0xb4>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6a1a      	ldr	r2, [r3, #32]
 80031c6:	f244 4344 	movw	r3, #17476	; 0x4444
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d107      	bne.n	80031e0 <HAL_TIM_PWM_Stop+0xb4>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d104      	bne.n	80031f0 <HAL_TIM_PWM_Stop+0xc4>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031ee:	e023      	b.n	8003238 <HAL_TIM_PWM_Stop+0x10c>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b04      	cmp	r3, #4
 80031f4:	d104      	bne.n	8003200 <HAL_TIM_PWM_Stop+0xd4>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031fe:	e01b      	b.n	8003238 <HAL_TIM_PWM_Stop+0x10c>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	2b08      	cmp	r3, #8
 8003204:	d104      	bne.n	8003210 <HAL_TIM_PWM_Stop+0xe4>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320e:	e013      	b.n	8003238 <HAL_TIM_PWM_Stop+0x10c>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2b0c      	cmp	r3, #12
 8003214:	d104      	bne.n	8003220 <HAL_TIM_PWM_Stop+0xf4>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800321e:	e00b      	b.n	8003238 <HAL_TIM_PWM_Stop+0x10c>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b10      	cmp	r3, #16
 8003224:	d104      	bne.n	8003230 <HAL_TIM_PWM_Stop+0x104>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800322e:	e003      	b.n	8003238 <HAL_TIM_PWM_Stop+0x10c>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	3708      	adds	r7, #8
 800323e:	46bd      	mov	sp, r7
 8003240:	bd80      	pop	{r7, pc}
 8003242:	bf00      	nop
 8003244:	40012c00 	.word	0x40012c00
 8003248:	40013400 	.word	0x40013400
 800324c:	40014000 	.word	0x40014000
 8003250:	40014400 	.word	0x40014400
 8003254:	40014800 	.word	0x40014800

08003258 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003272:	2302      	movs	r3, #2
 8003274:	e0ff      	b.n	8003476 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b14      	cmp	r3, #20
 8003282:	f200 80f0 	bhi.w	8003466 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003286:	a201      	add	r2, pc, #4	; (adr r2, 800328c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800328c:	080032e1 	.word	0x080032e1
 8003290:	08003467 	.word	0x08003467
 8003294:	08003467 	.word	0x08003467
 8003298:	08003467 	.word	0x08003467
 800329c:	08003321 	.word	0x08003321
 80032a0:	08003467 	.word	0x08003467
 80032a4:	08003467 	.word	0x08003467
 80032a8:	08003467 	.word	0x08003467
 80032ac:	08003363 	.word	0x08003363
 80032b0:	08003467 	.word	0x08003467
 80032b4:	08003467 	.word	0x08003467
 80032b8:	08003467 	.word	0x08003467
 80032bc:	080033a3 	.word	0x080033a3
 80032c0:	08003467 	.word	0x08003467
 80032c4:	08003467 	.word	0x08003467
 80032c8:	08003467 	.word	0x08003467
 80032cc:	080033e5 	.word	0x080033e5
 80032d0:	08003467 	.word	0x08003467
 80032d4:	08003467 	.word	0x08003467
 80032d8:	08003467 	.word	0x08003467
 80032dc:	08003425 	.word	0x08003425
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fa60 	bl	80037ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0208 	orr.w	r2, r2, #8
 80032fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 0204 	bic.w	r2, r2, #4
 800330a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6999      	ldr	r1, [r3, #24]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	691a      	ldr	r2, [r3, #16]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	430a      	orrs	r2, r1
 800331c:	619a      	str	r2, [r3, #24]
      break;
 800331e:	e0a5      	b.n	800346c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68b9      	ldr	r1, [r7, #8]
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fad0 	bl	80038cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800333a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699a      	ldr	r2, [r3, #24]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6999      	ldr	r1, [r3, #24]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	691b      	ldr	r3, [r3, #16]
 8003356:	021a      	lsls	r2, r3, #8
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	619a      	str	r2, [r3, #24]
      break;
 8003360:	e084      	b.n	800346c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fb39 	bl	80039e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f042 0208 	orr.w	r2, r2, #8
 800337c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f022 0204 	bic.w	r2, r2, #4
 800338c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69d9      	ldr	r1, [r3, #28]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	61da      	str	r2, [r3, #28]
      break;
 80033a0:	e064      	b.n	800346c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 fba1 	bl	8003af0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69da      	ldr	r2, [r3, #28]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	69d9      	ldr	r1, [r3, #28]
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	021a      	lsls	r2, r3, #8
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	61da      	str	r2, [r3, #28]
      break;
 80033e2:	e043      	b.n	800346c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f000 fc0a 	bl	8003c04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0208 	orr.w	r2, r2, #8
 80033fe:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f022 0204 	bic.w	r2, r2, #4
 800340e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	691a      	ldr	r2, [r3, #16]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	430a      	orrs	r2, r1
 8003420:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003422:	e023      	b.n	800346c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68b9      	ldr	r1, [r7, #8]
 800342a:	4618      	mov	r0, r3
 800342c:	f000 fc4e 	bl	8003ccc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800343e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	021a      	lsls	r2, r3, #8
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003464:	e002      	b.n	800346c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
      break;
 800346a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003474:	7dfb      	ldrb	r3, [r7, #23]
}
 8003476:	4618      	mov	r0, r3
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop

08003480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_TIM_ConfigClockSource+0x1c>
 8003498:	2302      	movs	r3, #2
 800349a:	e0de      	b.n	800365a <HAL_TIM_ConfigClockSource+0x1da>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80034b4:	68bb      	ldr	r3, [r7, #8]
 80034b6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80034ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80034be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68ba      	ldr	r2, [r7, #8]
 80034ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a63      	ldr	r2, [pc, #396]	; (8003664 <HAL_TIM_ConfigClockSource+0x1e4>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	f000 80a9 	beq.w	800362e <HAL_TIM_ConfigClockSource+0x1ae>
 80034dc:	4a61      	ldr	r2, [pc, #388]	; (8003664 <HAL_TIM_ConfigClockSource+0x1e4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	f200 80ae 	bhi.w	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
 80034e4:	4a60      	ldr	r2, [pc, #384]	; (8003668 <HAL_TIM_ConfigClockSource+0x1e8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	f000 80a1 	beq.w	800362e <HAL_TIM_ConfigClockSource+0x1ae>
 80034ec:	4a5e      	ldr	r2, [pc, #376]	; (8003668 <HAL_TIM_ConfigClockSource+0x1e8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	f200 80a6 	bhi.w	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
 80034f4:	4a5d      	ldr	r2, [pc, #372]	; (800366c <HAL_TIM_ConfigClockSource+0x1ec>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	f000 8099 	beq.w	800362e <HAL_TIM_ConfigClockSource+0x1ae>
 80034fc:	4a5b      	ldr	r2, [pc, #364]	; (800366c <HAL_TIM_ConfigClockSource+0x1ec>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	f200 809e 	bhi.w	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
 8003504:	4a5a      	ldr	r2, [pc, #360]	; (8003670 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003506:	4293      	cmp	r3, r2
 8003508:	f000 8091 	beq.w	800362e <HAL_TIM_ConfigClockSource+0x1ae>
 800350c:	4a58      	ldr	r2, [pc, #352]	; (8003670 <HAL_TIM_ConfigClockSource+0x1f0>)
 800350e:	4293      	cmp	r3, r2
 8003510:	f200 8096 	bhi.w	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
 8003514:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003518:	f000 8089 	beq.w	800362e <HAL_TIM_ConfigClockSource+0x1ae>
 800351c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003520:	f200 808e 	bhi.w	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
 8003524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003528:	d03e      	beq.n	80035a8 <HAL_TIM_ConfigClockSource+0x128>
 800352a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352e:	f200 8087 	bhi.w	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
 8003532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003536:	f000 8086 	beq.w	8003646 <HAL_TIM_ConfigClockSource+0x1c6>
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353e:	d87f      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
 8003540:	2b70      	cmp	r3, #112	; 0x70
 8003542:	d01a      	beq.n	800357a <HAL_TIM_ConfigClockSource+0xfa>
 8003544:	2b70      	cmp	r3, #112	; 0x70
 8003546:	d87b      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
 8003548:	2b60      	cmp	r3, #96	; 0x60
 800354a:	d050      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x16e>
 800354c:	2b60      	cmp	r3, #96	; 0x60
 800354e:	d877      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
 8003550:	2b50      	cmp	r3, #80	; 0x50
 8003552:	d03c      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0x14e>
 8003554:	2b50      	cmp	r3, #80	; 0x50
 8003556:	d873      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d058      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x18e>
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d86f      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
 8003560:	2b30      	cmp	r3, #48	; 0x30
 8003562:	d064      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x1ae>
 8003564:	2b30      	cmp	r3, #48	; 0x30
 8003566:	d86b      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
 8003568:	2b20      	cmp	r3, #32
 800356a:	d060      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x1ae>
 800356c:	2b20      	cmp	r3, #32
 800356e:	d867      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d05c      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x1ae>
 8003574:	2b10      	cmp	r3, #16
 8003576:	d05a      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x1ae>
 8003578:	e062      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800358a:	f000 fc81 	bl	8003e90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800359c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	609a      	str	r2, [r3, #8]
      break;
 80035a6:	e04f      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80035b8:	f000 fc6a 	bl	8003e90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ca:	609a      	str	r2, [r3, #8]
      break;
 80035cc:	e03c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035da:	461a      	mov	r2, r3
 80035dc:	f000 fbdc 	bl	8003d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2150      	movs	r1, #80	; 0x50
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 fc35 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 80035ec:	e02c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035fa:	461a      	mov	r2, r3
 80035fc:	f000 fbfb 	bl	8003df6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2160      	movs	r1, #96	; 0x60
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fc25 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 800360c:	e01c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800361a:	461a      	mov	r2, r3
 800361c:	f000 fbbc 	bl	8003d98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2140      	movs	r1, #64	; 0x40
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fc15 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 800362c:	e00c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f000 fc0c 	bl	8003e56 <TIM_ITRx_SetConfig>
      break;
 800363e:	e003      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      break;
 8003644:	e000      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003658:	7bfb      	ldrb	r3, [r7, #15]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	00100070 	.word	0x00100070
 8003668:	00100040 	.word	0x00100040
 800366c:	00100030 	.word	0x00100030
 8003670:	00100020 	.word	0x00100020

08003674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a42      	ldr	r2, [pc, #264]	; (8003790 <TIM_Base_SetConfig+0x11c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00f      	beq.n	80036ac <TIM_Base_SetConfig+0x38>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003692:	d00b      	beq.n	80036ac <TIM_Base_SetConfig+0x38>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a3f      	ldr	r2, [pc, #252]	; (8003794 <TIM_Base_SetConfig+0x120>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d007      	beq.n	80036ac <TIM_Base_SetConfig+0x38>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a3e      	ldr	r2, [pc, #248]	; (8003798 <TIM_Base_SetConfig+0x124>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_Base_SetConfig+0x38>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a3d      	ldr	r2, [pc, #244]	; (800379c <TIM_Base_SetConfig+0x128>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d108      	bne.n	80036be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a33      	ldr	r2, [pc, #204]	; (8003790 <TIM_Base_SetConfig+0x11c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d01b      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036cc:	d017      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a30      	ldr	r2, [pc, #192]	; (8003794 <TIM_Base_SetConfig+0x120>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d013      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a2f      	ldr	r2, [pc, #188]	; (8003798 <TIM_Base_SetConfig+0x124>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00f      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a2e      	ldr	r2, [pc, #184]	; (800379c <TIM_Base_SetConfig+0x128>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d00b      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a2d      	ldr	r2, [pc, #180]	; (80037a0 <TIM_Base_SetConfig+0x12c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d007      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	4a2c      	ldr	r2, [pc, #176]	; (80037a4 <TIM_Base_SetConfig+0x130>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d003      	beq.n	80036fe <TIM_Base_SetConfig+0x8a>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a2b      	ldr	r2, [pc, #172]	; (80037a8 <TIM_Base_SetConfig+0x134>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d108      	bne.n	8003710 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003704:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	4313      	orrs	r3, r2
 800370e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	4313      	orrs	r3, r2
 800371c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a16      	ldr	r2, [pc, #88]	; (8003790 <TIM_Base_SetConfig+0x11c>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d00f      	beq.n	800375c <TIM_Base_SetConfig+0xe8>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	4a17      	ldr	r2, [pc, #92]	; (800379c <TIM_Base_SetConfig+0x128>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00b      	beq.n	800375c <TIM_Base_SetConfig+0xe8>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a16      	ldr	r2, [pc, #88]	; (80037a0 <TIM_Base_SetConfig+0x12c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d007      	beq.n	800375c <TIM_Base_SetConfig+0xe8>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	4a15      	ldr	r2, [pc, #84]	; (80037a4 <TIM_Base_SetConfig+0x130>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d003      	beq.n	800375c <TIM_Base_SetConfig+0xe8>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a14      	ldr	r2, [pc, #80]	; (80037a8 <TIM_Base_SetConfig+0x134>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d103      	bne.n	8003764 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b01      	cmp	r3, #1
 8003774:	d105      	bne.n	8003782 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f023 0201 	bic.w	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	611a      	str	r2, [r3, #16]
  }
}
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40012c00 	.word	0x40012c00
 8003794:	40000400 	.word	0x40000400
 8003798:	40000800 	.word	0x40000800
 800379c:	40013400 	.word	0x40013400
 80037a0:	40014000 	.word	0x40014000
 80037a4:	40014400 	.word	0x40014400
 80037a8:	40014800 	.word	0x40014800

080037ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a1b      	ldr	r3, [r3, #32]
 80037c0:	f023 0201 	bic.w	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	699b      	ldr	r3, [r3, #24]
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f023 0303 	bic.w	r3, r3, #3
 80037e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f023 0302 	bic.w	r3, r3, #2
 80037f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a2c      	ldr	r2, [pc, #176]	; (80038b8 <TIM_OC1_SetConfig+0x10c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d00f      	beq.n	800382c <TIM_OC1_SetConfig+0x80>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	4a2b      	ldr	r2, [pc, #172]	; (80038bc <TIM_OC1_SetConfig+0x110>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d00b      	beq.n	800382c <TIM_OC1_SetConfig+0x80>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a2a      	ldr	r2, [pc, #168]	; (80038c0 <TIM_OC1_SetConfig+0x114>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d007      	beq.n	800382c <TIM_OC1_SetConfig+0x80>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a29      	ldr	r2, [pc, #164]	; (80038c4 <TIM_OC1_SetConfig+0x118>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d003      	beq.n	800382c <TIM_OC1_SetConfig+0x80>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a28      	ldr	r2, [pc, #160]	; (80038c8 <TIM_OC1_SetConfig+0x11c>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d10c      	bne.n	8003846 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f023 0308 	bic.w	r3, r3, #8
 8003832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	4313      	orrs	r3, r2
 800383c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	f023 0304 	bic.w	r3, r3, #4
 8003844:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a1b      	ldr	r2, [pc, #108]	; (80038b8 <TIM_OC1_SetConfig+0x10c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00f      	beq.n	800386e <TIM_OC1_SetConfig+0xc2>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a1a      	ldr	r2, [pc, #104]	; (80038bc <TIM_OC1_SetConfig+0x110>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d00b      	beq.n	800386e <TIM_OC1_SetConfig+0xc2>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <TIM_OC1_SetConfig+0x114>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d007      	beq.n	800386e <TIM_OC1_SetConfig+0xc2>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a18      	ldr	r2, [pc, #96]	; (80038c4 <TIM_OC1_SetConfig+0x118>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d003      	beq.n	800386e <TIM_OC1_SetConfig+0xc2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a17      	ldr	r2, [pc, #92]	; (80038c8 <TIM_OC1_SetConfig+0x11c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d111      	bne.n	8003892 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800387c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4313      	orrs	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	699b      	ldr	r3, [r3, #24]
 800388c:	693a      	ldr	r2, [r7, #16]
 800388e:	4313      	orrs	r3, r2
 8003890:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	68fa      	ldr	r2, [r7, #12]
 800389c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	621a      	str	r2, [r3, #32]
}
 80038ac:	bf00      	nop
 80038ae:	371c      	adds	r7, #28
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	40012c00 	.word	0x40012c00
 80038bc:	40013400 	.word	0x40013400
 80038c0:	40014000 	.word	0x40014000
 80038c4:	40014400 	.word	0x40014400
 80038c8:	40014800 	.word	0x40014800

080038cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f023 0210 	bic.w	r2, r3, #16
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003906:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	021b      	lsls	r3, r3, #8
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	f023 0320 	bic.w	r3, r3, #32
 800391a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	4a28      	ldr	r2, [pc, #160]	; (80039cc <TIM_OC2_SetConfig+0x100>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d003      	beq.n	8003938 <TIM_OC2_SetConfig+0x6c>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a27      	ldr	r2, [pc, #156]	; (80039d0 <TIM_OC2_SetConfig+0x104>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d10d      	bne.n	8003954 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800393e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	697a      	ldr	r2, [r7, #20]
 8003948:	4313      	orrs	r3, r2
 800394a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003952:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a1d      	ldr	r2, [pc, #116]	; (80039cc <TIM_OC2_SetConfig+0x100>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d00f      	beq.n	800397c <TIM_OC2_SetConfig+0xb0>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a1c      	ldr	r2, [pc, #112]	; (80039d0 <TIM_OC2_SetConfig+0x104>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d00b      	beq.n	800397c <TIM_OC2_SetConfig+0xb0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a1b      	ldr	r2, [pc, #108]	; (80039d4 <TIM_OC2_SetConfig+0x108>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d007      	beq.n	800397c <TIM_OC2_SetConfig+0xb0>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	4a1a      	ldr	r2, [pc, #104]	; (80039d8 <TIM_OC2_SetConfig+0x10c>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d003      	beq.n	800397c <TIM_OC2_SetConfig+0xb0>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a19      	ldr	r2, [pc, #100]	; (80039dc <TIM_OC2_SetConfig+0x110>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d113      	bne.n	80039a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003982:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800398a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	621a      	str	r2, [r3, #32]
}
 80039be:	bf00      	nop
 80039c0:	371c      	adds	r7, #28
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	40012c00 	.word	0x40012c00
 80039d0:	40013400 	.word	0x40013400
 80039d4:	40014000 	.word	0x40014000
 80039d8:	40014400 	.word	0x40014400
 80039dc:	40014800 	.word	0x40014800

080039e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b087      	sub	sp, #28
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a1b      	ldr	r3, [r3, #32]
 80039ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	69db      	ldr	r3, [r3, #28]
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f023 0303 	bic.w	r3, r3, #3
 8003a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	021b      	lsls	r3, r3, #8
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	4313      	orrs	r3, r2
 8003a38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a27      	ldr	r2, [pc, #156]	; (8003adc <TIM_OC3_SetConfig+0xfc>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d003      	beq.n	8003a4a <TIM_OC3_SetConfig+0x6a>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a26      	ldr	r2, [pc, #152]	; (8003ae0 <TIM_OC3_SetConfig+0x100>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d10d      	bne.n	8003a66 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003a50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	021b      	lsls	r3, r3, #8
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003a64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <TIM_OC3_SetConfig+0xfc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00f      	beq.n	8003a8e <TIM_OC3_SetConfig+0xae>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1b      	ldr	r2, [pc, #108]	; (8003ae0 <TIM_OC3_SetConfig+0x100>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00b      	beq.n	8003a8e <TIM_OC3_SetConfig+0xae>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a1a      	ldr	r2, [pc, #104]	; (8003ae4 <TIM_OC3_SetConfig+0x104>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <TIM_OC3_SetConfig+0xae>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a19      	ldr	r2, [pc, #100]	; (8003ae8 <TIM_OC3_SetConfig+0x108>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d003      	beq.n	8003a8e <TIM_OC3_SetConfig+0xae>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a18      	ldr	r2, [pc, #96]	; (8003aec <TIM_OC3_SetConfig+0x10c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d113      	bne.n	8003ab6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003a94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	693a      	ldr	r2, [r7, #16]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	697a      	ldr	r2, [r7, #20]
 8003ace:	621a      	str	r2, [r3, #32]
}
 8003ad0:	bf00      	nop
 8003ad2:	371c      	adds	r7, #28
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	40012c00 	.word	0x40012c00
 8003ae0:	40013400 	.word	0x40013400
 8003ae4:	40014000 	.word	0x40014000
 8003ae8:	40014400 	.word	0x40014400
 8003aec:	40014800 	.word	0x40014800

08003af0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	021b      	lsls	r3, r3, #8
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	031b      	lsls	r3, r3, #12
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a28      	ldr	r2, [pc, #160]	; (8003bf0 <TIM_OC4_SetConfig+0x100>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_OC4_SetConfig+0x6c>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a27      	ldr	r2, [pc, #156]	; (8003bf4 <TIM_OC4_SetConfig+0x104>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d10d      	bne.n	8003b78 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	031b      	lsls	r3, r3, #12
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a1d      	ldr	r2, [pc, #116]	; (8003bf0 <TIM_OC4_SetConfig+0x100>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d00f      	beq.n	8003ba0 <TIM_OC4_SetConfig+0xb0>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a1c      	ldr	r2, [pc, #112]	; (8003bf4 <TIM_OC4_SetConfig+0x104>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00b      	beq.n	8003ba0 <TIM_OC4_SetConfig+0xb0>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a1b      	ldr	r2, [pc, #108]	; (8003bf8 <TIM_OC4_SetConfig+0x108>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d007      	beq.n	8003ba0 <TIM_OC4_SetConfig+0xb0>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a1a      	ldr	r2, [pc, #104]	; (8003bfc <TIM_OC4_SetConfig+0x10c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d003      	beq.n	8003ba0 <TIM_OC4_SetConfig+0xb0>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	4a19      	ldr	r2, [pc, #100]	; (8003c00 <TIM_OC4_SetConfig+0x110>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d113      	bne.n	8003bc8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ba6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003bae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	695b      	ldr	r3, [r3, #20]
 8003bb4:	019b      	lsls	r3, r3, #6
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	019b      	lsls	r3, r3, #6
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685a      	ldr	r2, [r3, #4]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	621a      	str	r2, [r3, #32]
}
 8003be2:	bf00      	nop
 8003be4:	371c      	adds	r7, #28
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40012c00 	.word	0x40012c00
 8003bf4:	40013400 	.word	0x40013400
 8003bf8:	40014000 	.word	0x40014000
 8003bfc:	40014400 	.word	0x40014400
 8003c00:	40014800 	.word	0x40014800

08003c04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003c48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	041b      	lsls	r3, r3, #16
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a17      	ldr	r2, [pc, #92]	; (8003cb8 <TIM_OC5_SetConfig+0xb4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d00f      	beq.n	8003c7e <TIM_OC5_SetConfig+0x7a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a16      	ldr	r2, [pc, #88]	; (8003cbc <TIM_OC5_SetConfig+0xb8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00b      	beq.n	8003c7e <TIM_OC5_SetConfig+0x7a>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <TIM_OC5_SetConfig+0xbc>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d007      	beq.n	8003c7e <TIM_OC5_SetConfig+0x7a>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <TIM_OC5_SetConfig+0xc0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d003      	beq.n	8003c7e <TIM_OC5_SetConfig+0x7a>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a13      	ldr	r2, [pc, #76]	; (8003cc8 <TIM_OC5_SetConfig+0xc4>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d109      	bne.n	8003c92 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	021b      	lsls	r3, r3, #8
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	685a      	ldr	r2, [r3, #4]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	621a      	str	r2, [r3, #32]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	40012c00 	.word	0x40012c00
 8003cbc:	40013400 	.word	0x40013400
 8003cc0:	40014000 	.word	0x40014000
 8003cc4:	40014400 	.word	0x40014400
 8003cc8:	40014800 	.word	0x40014800

08003ccc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	021b      	lsls	r3, r3, #8
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	051b      	lsls	r3, r3, #20
 8003d1a:	693a      	ldr	r2, [r7, #16]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a18      	ldr	r2, [pc, #96]	; (8003d84 <TIM_OC6_SetConfig+0xb8>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00f      	beq.n	8003d48 <TIM_OC6_SetConfig+0x7c>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a17      	ldr	r2, [pc, #92]	; (8003d88 <TIM_OC6_SetConfig+0xbc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d00b      	beq.n	8003d48 <TIM_OC6_SetConfig+0x7c>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a16      	ldr	r2, [pc, #88]	; (8003d8c <TIM_OC6_SetConfig+0xc0>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d007      	beq.n	8003d48 <TIM_OC6_SetConfig+0x7c>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a15      	ldr	r2, [pc, #84]	; (8003d90 <TIM_OC6_SetConfig+0xc4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_OC6_SetConfig+0x7c>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a14      	ldr	r2, [pc, #80]	; (8003d94 <TIM_OC6_SetConfig+0xc8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d109      	bne.n	8003d5c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	695b      	ldr	r3, [r3, #20]
 8003d54:	029b      	lsls	r3, r3, #10
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	621a      	str	r2, [r3, #32]
}
 8003d76:	bf00      	nop
 8003d78:	371c      	adds	r7, #28
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	40012c00 	.word	0x40012c00
 8003d88:	40013400 	.word	0x40013400
 8003d8c:	40014000 	.word	0x40014000
 8003d90:	40014400 	.word	0x40014400
 8003d94:	40014800 	.word	0x40014800

08003d98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6a1b      	ldr	r3, [r3, #32]
 8003da8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	f023 0201 	bic.w	r2, r3, #1
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f023 030a 	bic.w	r3, r3, #10
 8003dd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	697a      	ldr	r2, [r7, #20]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	bf00      	nop
 8003dec:	371c      	adds	r7, #28
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b087      	sub	sp, #28
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	60f8      	str	r0, [r7, #12]
 8003dfe:	60b9      	str	r1, [r7, #8]
 8003e00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	f023 0210 	bic.w	r2, r3, #16
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	699b      	ldr	r3, [r3, #24]
 8003e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	031b      	lsls	r3, r3, #12
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	621a      	str	r2, [r3, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b085      	sub	sp, #20
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
 8003e5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f043 0307 	orr.w	r3, r3, #7
 8003e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	609a      	str	r2, [r3, #8]
}
 8003e84:	bf00      	nop
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
 8003e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	021a      	lsls	r2, r3, #8
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	431a      	orrs	r2, r3
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	609a      	str	r2, [r3, #8]
}
 8003ec4:	bf00      	nop
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	f003 031f 	and.w	r3, r3, #31
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	43db      	mvns	r3, r3
 8003ef2:	401a      	ands	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6a1a      	ldr	r2, [r3, #32]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 031f 	and.w	r3, r3, #31
 8003f02:	6879      	ldr	r1, [r7, #4]
 8003f04:	fa01 f303 	lsl.w	r3, r1, r3
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	621a      	str	r2, [r3, #32]
}
 8003f0e:	bf00      	nop
 8003f10:	371c      	adds	r7, #28
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d101      	bne.n	8003f34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f30:	2302      	movs	r3, #2
 8003f32:	e065      	b.n	8004000 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a2c      	ldr	r2, [pc, #176]	; (800400c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d004      	beq.n	8003f68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a2b      	ldr	r2, [pc, #172]	; (8004010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d108      	bne.n	8003f7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003f80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a1b      	ldr	r2, [pc, #108]	; (800400c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d018      	beq.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003faa:	d013      	beq.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a18      	ldr	r2, [pc, #96]	; (8004014 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d00e      	beq.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4a17      	ldr	r2, [pc, #92]	; (8004018 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d009      	beq.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a12      	ldr	r2, [pc, #72]	; (8004010 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d004      	beq.n	8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a13      	ldr	r2, [pc, #76]	; (800401c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d10c      	bne.n	8003fee <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	68ba      	ldr	r2, [r7, #8]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3714      	adds	r7, #20
 8004004:	46bd      	mov	sp, r7
 8004006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400a:	4770      	bx	lr
 800400c:	40012c00 	.word	0x40012c00
 8004010:	40013400 	.word	0x40013400
 8004014:	40000400 	.word	0x40000400
 8004018:	40000800 	.word	0x40000800
 800401c:	40014000 	.word	0x40014000

08004020 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
 8004028:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d101      	bne.n	800403c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004038:	2302      	movs	r3, #2
 800403a:	e073      	b.n	8004124 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	4313      	orrs	r3, r2
 800405e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4313      	orrs	r3, r2
 800407a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	041b      	lsls	r3, r3, #16
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a19      	ldr	r2, [pc, #100]	; (8004130 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a18      	ldr	r2, [pc, #96]	; (8004134 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d11c      	bne.n	8004112 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	051b      	lsls	r3, r3, #20
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3714      	adds	r7, #20
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40013400 	.word	0x40013400

08004138 <_ZdlPvj>:
 8004138:	f000 b800 	b.w	800413c <_ZdlPv>

0800413c <_ZdlPv>:
 800413c:	f000 b800 	b.w	8004140 <free>

08004140 <free>:
 8004140:	4b02      	ldr	r3, [pc, #8]	; (800414c <free+0xc>)
 8004142:	4601      	mov	r1, r0
 8004144:	6818      	ldr	r0, [r3, #0]
 8004146:	f000 b84b 	b.w	80041e0 <_free_r>
 800414a:	bf00      	nop
 800414c:	20000058 	.word	0x20000058

08004150 <__malloc_lock>:
 8004150:	4801      	ldr	r0, [pc, #4]	; (8004158 <__malloc_lock+0x8>)
 8004152:	f000 b835 	b.w	80041c0 <__retarget_lock_acquire_recursive>
 8004156:	bf00      	nop
 8004158:	2000029c 	.word	0x2000029c

0800415c <__malloc_unlock>:
 800415c:	4801      	ldr	r0, [pc, #4]	; (8004164 <__malloc_unlock+0x8>)
 800415e:	f000 b830 	b.w	80041c2 <__retarget_lock_release_recursive>
 8004162:	bf00      	nop
 8004164:	2000029c 	.word	0x2000029c

08004168 <memset>:
 8004168:	4402      	add	r2, r0
 800416a:	4603      	mov	r3, r0
 800416c:	4293      	cmp	r3, r2
 800416e:	d100      	bne.n	8004172 <memset+0xa>
 8004170:	4770      	bx	lr
 8004172:	f803 1b01 	strb.w	r1, [r3], #1
 8004176:	e7f9      	b.n	800416c <memset+0x4>

08004178 <__libc_init_array>:
 8004178:	b570      	push	{r4, r5, r6, lr}
 800417a:	4d0d      	ldr	r5, [pc, #52]	; (80041b0 <__libc_init_array+0x38>)
 800417c:	4c0d      	ldr	r4, [pc, #52]	; (80041b4 <__libc_init_array+0x3c>)
 800417e:	1b64      	subs	r4, r4, r5
 8004180:	10a4      	asrs	r4, r4, #2
 8004182:	2600      	movs	r6, #0
 8004184:	42a6      	cmp	r6, r4
 8004186:	d109      	bne.n	800419c <__libc_init_array+0x24>
 8004188:	4d0b      	ldr	r5, [pc, #44]	; (80041b8 <__libc_init_array+0x40>)
 800418a:	4c0c      	ldr	r4, [pc, #48]	; (80041bc <__libc_init_array+0x44>)
 800418c:	f000 f874 	bl	8004278 <_init>
 8004190:	1b64      	subs	r4, r4, r5
 8004192:	10a4      	asrs	r4, r4, #2
 8004194:	2600      	movs	r6, #0
 8004196:	42a6      	cmp	r6, r4
 8004198:	d105      	bne.n	80041a6 <__libc_init_array+0x2e>
 800419a:	bd70      	pop	{r4, r5, r6, pc}
 800419c:	f855 3b04 	ldr.w	r3, [r5], #4
 80041a0:	4798      	blx	r3
 80041a2:	3601      	adds	r6, #1
 80041a4:	e7ee      	b.n	8004184 <__libc_init_array+0xc>
 80041a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80041aa:	4798      	blx	r3
 80041ac:	3601      	adds	r6, #1
 80041ae:	e7f2      	b.n	8004196 <__libc_init_array+0x1e>
 80041b0:	080042c0 	.word	0x080042c0
 80041b4:	080042c0 	.word	0x080042c0
 80041b8:	080042c0 	.word	0x080042c0
 80041bc:	080042c4 	.word	0x080042c4

080041c0 <__retarget_lock_acquire_recursive>:
 80041c0:	4770      	bx	lr

080041c2 <__retarget_lock_release_recursive>:
 80041c2:	4770      	bx	lr

080041c4 <memcpy>:
 80041c4:	440a      	add	r2, r1
 80041c6:	4291      	cmp	r1, r2
 80041c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80041cc:	d100      	bne.n	80041d0 <memcpy+0xc>
 80041ce:	4770      	bx	lr
 80041d0:	b510      	push	{r4, lr}
 80041d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80041d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80041da:	4291      	cmp	r1, r2
 80041dc:	d1f9      	bne.n	80041d2 <memcpy+0xe>
 80041de:	bd10      	pop	{r4, pc}

080041e0 <_free_r>:
 80041e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80041e2:	2900      	cmp	r1, #0
 80041e4:	d044      	beq.n	8004270 <_free_r+0x90>
 80041e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041ea:	9001      	str	r0, [sp, #4]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f1a1 0404 	sub.w	r4, r1, #4
 80041f2:	bfb8      	it	lt
 80041f4:	18e4      	addlt	r4, r4, r3
 80041f6:	f7ff ffab 	bl	8004150 <__malloc_lock>
 80041fa:	4a1e      	ldr	r2, [pc, #120]	; (8004274 <_free_r+0x94>)
 80041fc:	9801      	ldr	r0, [sp, #4]
 80041fe:	6813      	ldr	r3, [r2, #0]
 8004200:	b933      	cbnz	r3, 8004210 <_free_r+0x30>
 8004202:	6063      	str	r3, [r4, #4]
 8004204:	6014      	str	r4, [r2, #0]
 8004206:	b003      	add	sp, #12
 8004208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800420c:	f7ff bfa6 	b.w	800415c <__malloc_unlock>
 8004210:	42a3      	cmp	r3, r4
 8004212:	d908      	bls.n	8004226 <_free_r+0x46>
 8004214:	6825      	ldr	r5, [r4, #0]
 8004216:	1961      	adds	r1, r4, r5
 8004218:	428b      	cmp	r3, r1
 800421a:	bf01      	itttt	eq
 800421c:	6819      	ldreq	r1, [r3, #0]
 800421e:	685b      	ldreq	r3, [r3, #4]
 8004220:	1949      	addeq	r1, r1, r5
 8004222:	6021      	streq	r1, [r4, #0]
 8004224:	e7ed      	b.n	8004202 <_free_r+0x22>
 8004226:	461a      	mov	r2, r3
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	b10b      	cbz	r3, 8004230 <_free_r+0x50>
 800422c:	42a3      	cmp	r3, r4
 800422e:	d9fa      	bls.n	8004226 <_free_r+0x46>
 8004230:	6811      	ldr	r1, [r2, #0]
 8004232:	1855      	adds	r5, r2, r1
 8004234:	42a5      	cmp	r5, r4
 8004236:	d10b      	bne.n	8004250 <_free_r+0x70>
 8004238:	6824      	ldr	r4, [r4, #0]
 800423a:	4421      	add	r1, r4
 800423c:	1854      	adds	r4, r2, r1
 800423e:	42a3      	cmp	r3, r4
 8004240:	6011      	str	r1, [r2, #0]
 8004242:	d1e0      	bne.n	8004206 <_free_r+0x26>
 8004244:	681c      	ldr	r4, [r3, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	6053      	str	r3, [r2, #4]
 800424a:	440c      	add	r4, r1
 800424c:	6014      	str	r4, [r2, #0]
 800424e:	e7da      	b.n	8004206 <_free_r+0x26>
 8004250:	d902      	bls.n	8004258 <_free_r+0x78>
 8004252:	230c      	movs	r3, #12
 8004254:	6003      	str	r3, [r0, #0]
 8004256:	e7d6      	b.n	8004206 <_free_r+0x26>
 8004258:	6825      	ldr	r5, [r4, #0]
 800425a:	1961      	adds	r1, r4, r5
 800425c:	428b      	cmp	r3, r1
 800425e:	bf04      	itt	eq
 8004260:	6819      	ldreq	r1, [r3, #0]
 8004262:	685b      	ldreq	r3, [r3, #4]
 8004264:	6063      	str	r3, [r4, #4]
 8004266:	bf04      	itt	eq
 8004268:	1949      	addeq	r1, r1, r5
 800426a:	6021      	streq	r1, [r4, #0]
 800426c:	6054      	str	r4, [r2, #4]
 800426e:	e7ca      	b.n	8004206 <_free_r+0x26>
 8004270:	b003      	add	sp, #12
 8004272:	bd30      	pop	{r4, r5, pc}
 8004274:	20000160 	.word	0x20000160

08004278 <_init>:
 8004278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800427a:	bf00      	nop
 800427c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800427e:	bc08      	pop	{r3}
 8004280:	469e      	mov	lr, r3
 8004282:	4770      	bx	lr

08004284 <_fini>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	bf00      	nop
 8004288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428a:	bc08      	pop	{r3}
 800428c:	469e      	mov	lr, r3
 800428e:	4770      	bx	lr

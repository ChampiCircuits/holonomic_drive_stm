
holonomic_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006490  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006668  08006668  00016668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066f0  080066f0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080066f0  080066f0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080066f0  080066f0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080066f0  080066f0  000166f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080066f8  080066f8  000166f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a8  20000068  08006768  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000610  08006768  00020610  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014eda  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ff9  00000000  00000000  00034fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  00037fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d05  00000000  00000000  000390b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000205ca  00000000  00000000  00039dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000117f3  00000000  00000000  0005a387  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d02bb  00000000  00000000  0006bb7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050b0  00000000  00000000  0013be38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00140ee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006650 	.word	0x08006650

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08006650 	.word	0x08006650

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>:

#include "stdio.h"

#include <string.h>

ChampiCan::ChampiCan(FDCAN_HandleTypeDef *handle_fdcan) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
 8000bfe:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef+0x50>)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	601a      	str	r2, [r3, #0]

	handle_fdcan_ = handle_fdcan;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	683a      	ldr	r2, [r7, #0]
 8000c08:	605a      	str	r2, [r3, #4]

	tx_header_.IdType = FDCAN_STANDARD_ID;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
	tx_header_.TxFrameType = FDCAN_DATA_FRAME;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2200      	movs	r2, #0
 8000c14:	611a      	str	r2, [r3, #16]
	tx_header_.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2200      	movs	r2, #0
 8000c1a:	619a      	str	r2, [r3, #24]
	tx_header_.BitRateSwitch = FDCAN_BRS_OFF;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	61da      	str	r2, [r3, #28]
	tx_header_.FDFormat = FDCAN_CLASSIC_CAN;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2200      	movs	r2, #0
 8000c26:	621a      	str	r2, [r3, #32]
	tx_header_.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	625a      	str	r2, [r3, #36]	; 0x24
	tx_header_.MessageMarker = 0;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2200      	movs	r2, #0
 8000c32:	629a      	str	r2, [r3, #40]	; 0x28

}
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	080066a8 	.word	0x080066a8

08000c48 <_ZN9ChampiCan5startEv>:

int ChampiCan::start() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(handle_fdcan_) != HAL_OK)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 f961 	bl	8002f1c <HAL_FDCAN_Start>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	bf14      	ite	ne
 8000c60:	2301      	movne	r3, #1
 8000c62:	2300      	moveq	r3, #0
 8000c64:	b2db      	uxtb	r3, r3
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <_ZN9ChampiCan5startEv+0x26>
	{
		return 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e011      	b.n	8000c92 <_ZN9ChampiCan5startEv+0x4a>
	}
	if (HAL_FDCAN_ActivateNotification(handle_fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	2200      	movs	r2, #0
 8000c74:	2101      	movs	r1, #1
 8000c76:	4618      	mov	r0, r3
 8000c78:	f002 f9bc 	bl	8002ff4 <HAL_FDCAN_ActivateNotification>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	bf14      	ite	ne
 8000c82:	2301      	movne	r3, #1
 8000c84:	2300      	moveq	r3, #0
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <_ZN9ChampiCan5startEv+0x48>
	{
		return 1;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e000      	b.n	8000c92 <_ZN9ChampiCan5startEv+0x4a>
	}
	return 0;
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
	...

08000c9c <_ZN9ChampiCan10send_frameEmPhm>:

int ChampiCan::send_frame(uint32_t id, uint8_t *frame_data, uint32_t size) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
 8000ca8:	603b      	str	r3, [r7, #0]
	tx_header_.Identifier = id;
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	68ba      	ldr	r2, [r7, #8]
 8000cae:	609a      	str	r2, [r3, #8]
	tx_header_.DataLength = size;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	683a      	ldr	r2, [r7, #0]
 8000cb4:	615a      	str	r2, [r3, #20]

    if (HAL_FDCAN_AddMessageToTxFifoQ(handle_fdcan_, &tx_header_, frame_data) != HAL_OK)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	6858      	ldr	r0, [r3, #4]
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	3308      	adds	r3, #8
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	f002 f953 	bl	8002f6c <HAL_FDCAN_AddMessageToTxFifoQ>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	bf14      	ite	ne
 8000ccc:	2301      	movne	r3, #1
 8000cce:	2300      	moveq	r3, #0
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d004      	beq.n	8000ce0 <_ZN9ChampiCan10send_frameEmPhm+0x44>
    {
      /* Transmission request Error */
  	  printf("ERROR: Frame not sent\n");
 8000cd6:	4805      	ldr	r0, [pc, #20]	; (8000cec <_ZN9ChampiCan10send_frameEmPhm+0x50>)
 8000cd8:	f005 f9c2 	bl	8006060 <puts>
  	  return 1;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	e000      	b.n	8000ce2 <_ZN9ChampiCan10send_frameEmPhm+0x46>
    }
    return 0;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	08006668 	.word	0x08006668

08000cf0 <_ZN9ChampiCan8send_msgEmPhm>:

int ChampiCan::send_msg(uint32_t id, uint8_t *msg, uint32_t msg_size) {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	603b      	str	r3, [r7, #0]

	static uint16_t msg_number = 0;

	if (msg_size > 512) {
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d04:	d901      	bls.n	8000d0a <_ZN9ChampiCan8send_msgEmPhm+0x1a>
		return 1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e084      	b.n	8000e14 <_ZN9ChampiCan8send_msgEmPhm+0x124>
	}

	uint8_t frame_data[8] = {0};
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61bb      	str	r3, [r7, #24]
	uint16_t nb_frames = (uint16_t) msg_size / 6 + (msg_size % 6 > 0 ? 1 : 0);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	4a41      	ldr	r2, [pc, #260]	; (8000e1c <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000d18:	fba2 2303 	umull	r2, r3, r2, r3
 8000d1c:	089b      	lsrs	r3, r3, #2
 8000d1e:	b298      	uxth	r0, r3
 8000d20:	6839      	ldr	r1, [r7, #0]
 8000d22:	4b3e      	ldr	r3, [pc, #248]	; (8000e1c <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000d24:	fba3 2301 	umull	r2, r3, r3, r1
 8000d28:	089a      	lsrs	r2, r3, #2
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	4413      	add	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	1aca      	subs	r2, r1, r3
 8000d34:	2a00      	cmp	r2, #0
 8000d36:	d001      	beq.n	8000d3c <_ZN9ChampiCan8send_msgEmPhm+0x4c>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <_ZN9ChampiCan8send_msgEmPhm+0x4e>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	4403      	add	r3, r0
 8000d40:	83fb      	strh	r3, [r7, #30]

	for(uint16_t i=0; i<nb_frames; i++) {
 8000d42:	2300      	movs	r3, #0
 8000d44:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000d46:	e053      	b.n	8000df0 <_ZN9ChampiCan8send_msgEmPhm+0x100>

		// Frame descriptor
		uint16_t frame_descriptor = msg_number << 12 | (nb_frames << 6) | i;
 8000d48:	4b35      	ldr	r3, [pc, #212]	; (8000e20 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	031b      	lsls	r3, r3, #12
 8000d4e:	b21a      	sxth	r2, r3
 8000d50:	8bfb      	ldrh	r3, [r7, #30]
 8000d52:	019b      	lsls	r3, r3, #6
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	4313      	orrs	r3, r2
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	b21b      	sxth	r3, r3
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	827b      	strh	r3, [r7, #18]
 8000d66:	8a7b      	ldrh	r3, [r7, #18]
		memcpy(frame_data, (char*)&frame_descriptor, 2);
 8000d68:	82bb      	strh	r3, [r7, #20]

		// Data size
		int num_bytes_frame = 6;
 8000d6a:	2306      	movs	r3, #6
 8000d6c:	623b      	str	r3, [r7, #32]
		if(i==nb_frames-1) {
 8000d6e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d70:	8bfb      	ldrh	r3, [r7, #30]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d10a      	bne.n	8000d8e <_ZN9ChampiCan8send_msgEmPhm+0x9e>
			num_bytes_frame = msg_size % 6;
 8000d78:	6839      	ldr	r1, [r7, #0]
 8000d7a:	4b28      	ldr	r3, [pc, #160]	; (8000e1c <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000d7c:	fba3 2301 	umull	r2, r3, r3, r1
 8000d80:	089a      	lsrs	r2, r3, #2
 8000d82:	4613      	mov	r3, r2
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	4413      	add	r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	1aca      	subs	r2, r1, r3
 8000d8c:	623a      	str	r2, [r7, #32]
		}

		// Data
		memcpy(frame_data+2, msg + i*6, num_bytes_frame);
 8000d8e:	f107 0014 	add.w	r0, r7, #20
 8000d92:	3002      	adds	r0, #2
 8000d94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000d96:	4613      	mov	r3, r2
 8000d98:	005b      	lsls	r3, r3, #1
 8000d9a:	4413      	add	r3, r2
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	461a      	mov	r2, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	4413      	add	r3, r2
 8000da4:	6a3a      	ldr	r2, [r7, #32]
 8000da6:	4619      	mov	r1, r3
 8000da8:	f005 fac5 	bl	8006336 <memcpy>

		// Send
		if(send_frame(id, frame_data, num_bytes_frame+2) != 0) {
 8000dac:	6a3b      	ldr	r3, [r7, #32]
 8000dae:	3302      	adds	r3, #2
 8000db0:	f107 0214 	add.w	r2, r7, #20
 8000db4:	68b9      	ldr	r1, [r7, #8]
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f7ff ff70 	bl	8000c9c <_ZN9ChampiCan10send_frameEmPhm>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bf14      	ite	ne
 8000dc2:	2301      	movne	r3, #1
 8000dc4:	2300      	moveq	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00e      	beq.n	8000dea <_ZN9ChampiCan8send_msgEmPhm+0xfa>
			msg_number = (msg_number + 1) % 4;
 8000dcc:	4b14      	ldr	r3, [pc, #80]	; (8000e20 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	425a      	negs	r2, r3
 8000dd4:	f003 0303 	and.w	r3, r3, #3
 8000dd8:	f002 0203 	and.w	r2, r2, #3
 8000ddc:	bf58      	it	pl
 8000dde:	4253      	negpl	r3, r2
 8000de0:	b29a      	uxth	r2, r3
 8000de2:	4b0f      	ldr	r3, [pc, #60]	; (8000e20 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000de4:	801a      	strh	r2, [r3, #0]
			return 1;
 8000de6:	2301      	movs	r3, #1
 8000de8:	e014      	b.n	8000e14 <_ZN9ChampiCan8send_msgEmPhm+0x124>
	for(uint16_t i=0; i<nb_frames; i++) {
 8000dea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000dec:	3301      	adds	r3, #1
 8000dee:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000df0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000df2:	8bfb      	ldrh	r3, [r7, #30]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d3a7      	bcc.n	8000d48 <_ZN9ChampiCan8send_msgEmPhm+0x58>
		}
	}

    msg_number = (msg_number + 1) % 4;
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000dfa:	881b      	ldrh	r3, [r3, #0]
 8000dfc:	3301      	adds	r3, #1
 8000dfe:	425a      	negs	r2, r3
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	f002 0203 	and.w	r2, r2, #3
 8000e08:	bf58      	it	pl
 8000e0a:	4253      	negpl	r3, r2
 8000e0c:	b29a      	uxth	r2, r3
 8000e0e:	4b04      	ldr	r3, [pc, #16]	; (8000e20 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000e10:	801a      	strh	r2, [r3, #0]

    return 0;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3728      	adds	r7, #40	; 0x28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	aaaaaaab 	.word	0xaaaaaaab
 8000e20:	20000084 	.word	0x20000084

08000e24 <_ZN9ChampiCanD1Ev>:


ChampiCan::~ChampiCan() {
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	4a04      	ldr	r2, [pc, #16]	; (8000e40 <_ZN9ChampiCanD1Ev+0x1c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4618      	mov	r0, r3
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	080066a8 	.word	0x080066a8

08000e44 <_ZN9ChampiCanD0Ev>:
ChampiCan::~ChampiCan() {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
}
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff ffe9 	bl	8000e24 <_ZN9ChampiCanD1Ev>
 8000e52:	212c      	movs	r1, #44	; 0x2c
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f004 ff35 	bl	8005cc4 <_ZdlPvj>
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <_Z3subPfS_S_>:

Vel sub(Vel vel1, Vel vel2) {
	return {vel1.x - vel2.x, vel1.y - vel2.y, vel1.theta - vel2.theta};
}

void sub(float* arr1, float* arr2, float* ret) {
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<3; i++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e016      	b.n	8000ea4 <_Z3subPfS_S_+0x40>
		ret[i] = arr1[i] - arr2[i];
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	ed93 7a00 	vldr	s14, [r3]
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	4413      	add	r3, r2
 8000e8a:	edd3 7a00 	vldr	s15, [r3]
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e9a:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	2b02      	cmp	r3, #2
 8000ea8:	dde5      	ble.n	8000e76 <_Z3subPfS_S_+0x12>
	}
}
 8000eaa:	bf00      	nop
 8000eac:	bf00      	nop
 8000eae:	371c      	adds	r7, #28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <_Z3absPfS_>:

void abs(float* arr, float* ret) {
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	e026      	b.n	8000f16 <_Z3absPfS_+0x5e>
		if(arr[i]>=0) {
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	4413      	add	r3, r2
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000edc:	db0a      	blt.n	8000ef4 <_Z3absPfS_+0x3c>
			ret[i] = arr[i];
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	687a      	ldr	r2, [r7, #4]
 8000ee4:	441a      	add	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	6839      	ldr	r1, [r7, #0]
 8000eec:	440b      	add	r3, r1
 8000eee:	6812      	ldr	r2, [r2, #0]
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	e00d      	b.n	8000f10 <_Z3absPfS_+0x58>
		}
		else {
			ret[i] = -arr[i];
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4413      	add	r3, r2
 8000efc:	edd3 7a00 	vldr	s15, [r3]
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	683a      	ldr	r2, [r7, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	eef1 7a67 	vneg.f32	s15, s15
 8000f0c:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	3301      	adds	r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	ddd5      	ble.n	8000ec8 <_Z3absPfS_+0x10>
		}
	}
}
 8000f1c:	bf00      	nop
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_Z13get_index_maxPf>:

int get_index_max(float* arr) {
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
	if(arr[0] > arr[1] && arr[0] > arr[2]) {
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	ed93 7a00 	vldr	s14, [r3]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3304      	adds	r3, #4
 8000f3c:	edd3 7a00 	vldr	s15, [r3]
 8000f40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f48:	dd0d      	ble.n	8000f66 <_Z13get_index_maxPf+0x3c>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	ed93 7a00 	vldr	s14, [r3]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3308      	adds	r3, #8
 8000f54:	edd3 7a00 	vldr	s15, [r3]
 8000f58:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f60:	dd01      	ble.n	8000f66 <_Z13get_index_maxPf+0x3c>
		return 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	e01b      	b.n	8000f9e <_Z13get_index_maxPf+0x74>
	}
	else if(arr[1] > arr[0] && arr[1] > arr[2]) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3304      	adds	r3, #4
 8000f6a:	ed93 7a00 	vldr	s14, [r3]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	edd3 7a00 	vldr	s15, [r3]
 8000f74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7c:	dd0e      	ble.n	8000f9c <_Z13get_index_maxPf+0x72>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3304      	adds	r3, #4
 8000f82:	ed93 7a00 	vldr	s14, [r3]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3308      	adds	r3, #8
 8000f8a:	edd3 7a00 	vldr	s15, [r3]
 8000f8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	dd01      	ble.n	8000f9c <_Z13get_index_maxPf+0x72>
		return 1;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e000      	b.n	8000f9e <_Z13get_index_maxPf+0x74>
	}
	else {
		return 2;
 8000f9c:	2302      	movs	r3, #2
	}
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_ZN3VelC1Ev>:
#define HOLONOMICDRIVE3_H_


#include "Stepper.h"

struct Vel {
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	f04f 0200 	mov.w	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr

08000fd8 <_ZN7StepperaSERKS_>:
#ifndef SRC_STEPPER_H_
#define SRC_STEPPER_H_

#include "stm32g4xx_hal.h"

class Stepper {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	1d10      	adds	r0, r2, #4
 8000fe8:	3304      	adds	r3, #4
 8000fea:	224c      	movs	r2, #76	; 0x4c
 8000fec:	4619      	mov	r1, r3
 8000fee:	f005 f9a2 	bl	8006336 <memcpy>
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	651a      	str	r2, [r3, #80]	; 0x50
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	659a      	str	r2, [r3, #88]	; 0x58
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	65da      	str	r2, [r3, #92]	; 0x5c
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}

08001020 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>:

HolonomicDrive3::HolonomicDrive3(Stepper stepper0, Stepper stepper1, Stepper stepper2, float wheel_radius, float wheel_distance) {
 8001020:	b5b0      	push	{r4, r5, r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6178      	str	r0, [r7, #20]
 8001028:	6139      	str	r1, [r7, #16]
 800102a:	60fa      	str	r2, [r7, #12]
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001032:	edc7 0a00 	vstr	s1, [r7]
 8001036:	4a2e      	ldr	r2, [pc, #184]	; (80010f0 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xd0>)
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	3304      	adds	r3, #4
 8001040:	2402      	movs	r4, #2
 8001042:	461d      	mov	r5, r3
 8001044:	e004      	b.n	8001050 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x30>
 8001046:	4628      	mov	r0, r5
 8001048:	f000 fb0e 	bl	8001668 <_ZN7StepperC1Ev>
 800104c:	3560      	adds	r5, #96	; 0x60
 800104e:	3c01      	subs	r4, #1
 8001050:	2c00      	cmp	r4, #0
 8001052:	daf8      	bge.n	8001046 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x26>
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ffa5 	bl	8000faa <_ZN3VelC1Ev>
	this->steppers[0] = stepper0;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3304      	adds	r3, #4
 8001064:	6939      	ldr	r1, [r7, #16]
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ffb6 	bl	8000fd8 <_ZN7StepperaSERKS_>
	this->steppers[1] = stepper1;
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	3364      	adds	r3, #100	; 0x64
 8001070:	68f9      	ldr	r1, [r7, #12]
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ffb0 	bl	8000fd8 <_ZN7StepperaSERKS_>
	this->steppers[2] = stepper2;
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	33c4      	adds	r3, #196	; 0xc4
 800107c:	68b9      	ldr	r1, [r7, #8]
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffaa 	bl	8000fd8 <_ZN7StepperaSERKS_>
	this->wheel_circumference = wheel_radius * 2.0 * PI;
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff fa2b 	bl	80004e0 <__aeabi_f2d>
 800108a:	4602      	mov	r2, r0
 800108c:	460b      	mov	r3, r1
 800108e:	f7ff f8c9 	bl	8000224 <__adddf3>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	a313      	add	r3, pc, #76	; (adr r3, 80010e8 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xc8>)
 800109c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a0:	f7ff fa76 	bl	8000590 <__aeabi_dmul>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	4610      	mov	r0, r2
 80010aa:	4619      	mov	r1, r3
 80010ac:	f7ff fd52 	bl	8000b54 <__aeabi_d2f>
 80010b0:	4602      	mov	r2, r0
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	this->wheel_distance = wheel_distance;
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	this->current_wheels_speeds_rps[0] = 0;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f04f 0200 	mov.w	r2, #0
 80010c6:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	this->current_wheels_speeds_rps[1] = 0;
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f04f 0200 	mov.w	r2, #0
 80010d0:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	this->current_wheels_speeds_rps[2] = 0;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

}
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bdb0      	pop	{r4, r5, r7, pc}
 80010e8:	54442eea 	.word	0x54442eea
 80010ec:	400921fb 	.word	0x400921fb
 80010f0:	080066b8 	.word	0x080066b8

080010f4 <_ZN15HolonomicDrive311set_cmd_velE3Vel>:

void HolonomicDrive3::set_cmd_vel(Vel cmd) {
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	eef0 6a40 	vmov.f32	s13, s0
 8001100:	eeb0 7a60 	vmov.f32	s14, s1
 8001104:	eef0 7a41 	vmov.f32	s15, s2
 8001108:	edc7 6a00 	vstr	s13, [r7]
 800110c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001110:	edc7 7a02 	vstr	s15, [r7, #8]
	this->cmd_vel = cmd;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800111a:	463a      	mov	r2, r7
 800111c:	ca07      	ldmia	r2, {r0, r1, r2}
 800111e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001122:	bf00      	nop
 8001124:	3714      	adds	r7, #20
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>:

void HolonomicDrive3::compute_wheels_speeds(Vel cmd, float *ret_speeds_rps) {
 8001130:	b5b0      	push	{r4, r5, r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6178      	str	r0, [r7, #20]
 8001138:	eef0 6a40 	vmov.f32	s13, s0
 800113c:	eeb0 7a60 	vmov.f32	s14, s1
 8001140:	eef0 7a41 	vmov.f32	s15, s2
 8001144:	6079      	str	r1, [r7, #4]
 8001146:	edc7 6a02 	vstr	s13, [r7, #8]
 800114a:	ed87 7a03 	vstr	s14, [r7, #12]
 800114e:	edc7 7a04 	vstr	s15, [r7, #16]
    float wheel0_mps = 0.5 * this->cmd_vel.x - SQRT_3_OVER_2 * this->cmd_vel.y - this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9c1 	bl	80004e0 <__aeabi_f2d>
 800115e:	f04f 0200 	mov.w	r2, #0
 8001162:	4b79      	ldr	r3, [pc, #484]	; (8001348 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x218>)
 8001164:	f7ff fa14 	bl	8000590 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4614      	mov	r4, r2
 800116e:	461d      	mov	r5, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff f9b2 	bl	80004e0 <__aeabi_f2d>
 800117c:	a36e      	add	r3, pc, #440	; (adr r3, 8001338 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x208>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	f7ff fa05 	bl	8000590 <__aeabi_dmul>
 8001186:	4602      	mov	r2, r0
 8001188:	460b      	mov	r3, r1
 800118a:	4620      	mov	r0, r4
 800118c:	4629      	mov	r1, r5
 800118e:	f7ff f847 	bl	8000220 <__aeabi_dsub>
 8001192:	4602      	mov	r2, r0
 8001194:	460b      	mov	r3, r1
 8001196:	4614      	mov	r4, r2
 8001198:	461d      	mov	r5, r3
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 80011a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011aa:	ee17 0a90 	vmov	r0, s15
 80011ae:	f7ff f997 	bl	80004e0 <__aeabi_f2d>
 80011b2:	a363      	add	r3, pc, #396	; (adr r3, 8001340 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x210>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff f9ea 	bl	8000590 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4610      	mov	r0, r2
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 0200 	mov.w	r2, #0
 80011c8:	4b60      	ldr	r3, [pc, #384]	; (800134c <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x21c>)
 80011ca:	f7ff fb0b 	bl	80007e4 <__aeabi_ddiv>
 80011ce:	4602      	mov	r2, r0
 80011d0:	460b      	mov	r3, r1
 80011d2:	4620      	mov	r0, r4
 80011d4:	4629      	mov	r1, r5
 80011d6:	f7ff f823 	bl	8000220 <__aeabi_dsub>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4610      	mov	r0, r2
 80011e0:	4619      	mov	r1, r3
 80011e2:	f7ff fcb7 	bl	8000b54 <__aeabi_d2f>
 80011e6:	4603      	mov	r3, r0
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
    float wheel1_mps = 0.5 * this->cmd_vel.x + SQRT_3_OVER_2 * this->cmd_vel.y - this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f975 	bl	80004e0 <__aeabi_f2d>
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	4b53      	ldr	r3, [pc, #332]	; (8001348 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x218>)
 80011fc:	f7ff f9c8 	bl	8000590 <__aeabi_dmul>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4614      	mov	r4, r2
 8001206:	461d      	mov	r5, r3
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff f966 	bl	80004e0 <__aeabi_f2d>
 8001214:	a348      	add	r3, pc, #288	; (adr r3, 8001338 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x208>)
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff f9b9 	bl	8000590 <__aeabi_dmul>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4620      	mov	r0, r4
 8001224:	4629      	mov	r1, r5
 8001226:	f7fe fffd 	bl	8000224 <__adddf3>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4614      	mov	r4, r2
 8001230:	461d      	mov	r5, r3
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 800123e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001242:	ee17 0a90 	vmov	r0, s15
 8001246:	f7ff f94b 	bl	80004e0 <__aeabi_f2d>
 800124a:	a33d      	add	r3, pc, #244	; (adr r3, 8001340 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x210>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	f7ff f99e 	bl	8000590 <__aeabi_dmul>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	4b3a      	ldr	r3, [pc, #232]	; (800134c <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x21c>)
 8001262:	f7ff fabf 	bl	80007e4 <__aeabi_ddiv>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4620      	mov	r0, r4
 800126c:	4629      	mov	r1, r5
 800126e:	f7fe ffd7 	bl	8000220 <__aeabi_dsub>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fc6b 	bl	8000b54 <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
 8001280:	623b      	str	r3, [r7, #32]
    float wheel2_mps = - this->cmd_vel.x + this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 8001288:	eef1 7a67 	vneg.f32	s15, s15
 800128c:	ee17 3a90 	vmov	r3, s15
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f925 	bl	80004e0 <__aeabi_f2d>
 8001296:	4604      	mov	r4, r0
 8001298:	460d      	mov	r5, r1
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 80012a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012aa:	ee17 0a90 	vmov	r0, s15
 80012ae:	f7ff f917 	bl	80004e0 <__aeabi_f2d>
 80012b2:	a323      	add	r3, pc, #140	; (adr r3, 8001340 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x210>)
 80012b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b8:	f7ff f96a 	bl	8000590 <__aeabi_dmul>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4610      	mov	r0, r2
 80012c2:	4619      	mov	r1, r3
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b20      	ldr	r3, [pc, #128]	; (800134c <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x21c>)
 80012ca:	f7ff fa8b 	bl	80007e4 <__aeabi_ddiv>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	4620      	mov	r0, r4
 80012d4:	4629      	mov	r1, r5
 80012d6:	f7fe ffa5 	bl	8000224 <__adddf3>
 80012da:	4602      	mov	r2, r0
 80012dc:	460b      	mov	r3, r1
 80012de:	4610      	mov	r0, r2
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fc37 	bl	8000b54 <__aeabi_d2f>
 80012e6:	4603      	mov	r3, r0
 80012e8:	61fb      	str	r3, [r7, #28]
    // wheel mps -> wheel rps
    ret_speeds_rps[0] = wheel0_mps / this->wheel_circumference;
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 80012f0:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80012f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[1] = wheel1_mps / this->wheel_circumference;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3304      	adds	r3, #4
 8001308:	edd7 6a08 	vldr	s13, [r7, #32]
 800130c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001310:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[2] = wheel2_mps / this->wheel_circumference;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3308      	adds	r3, #8
 800131e:	edd7 6a07 	vldr	s13, [r7, #28]
 8001322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001326:	edc3 7a00 	vstr	s15, [r3]
}
 800132a:	bf00      	nop
 800132c:	3728      	adds	r7, #40	; 0x28
 800132e:	46bd      	mov	sp, r7
 8001330:	bdb0      	pop	{r4, r5, r7, pc}
 8001332:	bf00      	nop
 8001334:	f3af 8000 	nop.w
 8001338:	e857b07f 	.word	0xe857b07f
 800133c:	3febb67a 	.word	0x3febb67a
 8001340:	54442eea 	.word	0x54442eea
 8001344:	400921fb 	.word	0x400921fb
 8001348:	3fe00000 	.word	0x3fe00000
 800134c:	40668000 	.word	0x40668000

08001350 <_ZN15HolonomicDrive319write_wheels_speedsEPf>:

void HolonomicDrive3::write_wheels_speeds(float *speeds_rps) {
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 800135a:	2300      	movs	r3, #0
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	e020      	b.n	80013a2 <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x52>
		this->steppers[i].set_speed_rps(speeds_rps[i]);
 8001360:	68fa      	ldr	r2, [r7, #12]
 8001362:	4613      	mov	r3, r2
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4413      	add	r3, r2
 8001368:	015b      	lsls	r3, r3, #5
 800136a:	687a      	ldr	r2, [r7, #4]
 800136c:	4413      	add	r3, r2
 800136e:	1d19      	adds	r1, r3, #4
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	683a      	ldr	r2, [r7, #0]
 8001376:	4413      	add	r3, r2
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	4608      	mov	r0, r1
 8001382:	f000 f9f7 	bl	8001774 <_ZN7Stepper13set_speed_rpsEf>
		this->current_wheels_speeds_rps[i] = speeds_rps[i];
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	009b      	lsls	r3, r3, #2
 800138a:	683a      	ldr	r2, [r7, #0]
 800138c:	4413      	add	r3, r2
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	334e      	adds	r3, #78	; 0x4e
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	440b      	add	r3, r1
 800139a:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3301      	adds	r3, #1
 80013a0:	60fb      	str	r3, [r7, #12]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	dddb      	ble.n	8001360 <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x10>
	}
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	0000      	movs	r0, r0
 80013b4:	0000      	movs	r0, r0
	...

080013b8 <_ZN15HolonomicDrive324spin_once_motors_controlEv>:

void HolonomicDrive3::spin_once_motors_control() {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b092      	sub	sp, #72	; 0x48
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

	// compare current_vel and cmd_vel wheels speeds to check the required acceleration to transition directly from current to command
	float cmd_wheels_speeds[3]; // rotations per second
	this->compute_wheels_speeds(cmd_vel, cmd_wheels_speeds);
 80013c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	edd3 6a4b 	vldr	s13, [r3, #300]	; 0x12c
 80013ca:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 80013ce:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 80013d2:	4611      	mov	r1, r2
 80013d4:	eeb0 0a66 	vmov.f32	s0, s13
 80013d8:	eef0 0a47 	vmov.f32	s1, s14
 80013dc:	eeb0 1a67 	vmov.f32	s2, s15
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f7ff fea5 	bl	8001130 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>

	float desired_accels_wheels[3];
	sub(cmd_wheels_speeds, this->current_wheels_speeds_rps, desired_accels_wheels);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80013ec:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80013f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fd35 	bl	8000e64 <_Z3subPfS_S_>

	float abs_desired_accels_wheels[3];
	abs(desired_accels_wheels, abs_desired_accels_wheels);
 80013fa:	f107 0218 	add.w	r2, r7, #24
 80013fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001402:	4611      	mov	r1, r2
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fd57 	bl	8000eb8 <_Z3absPfS_>
	if(abs_desired_accels_wheels[0] < MAX_ACCEL_PER_CYCLE && abs_desired_accels_wheels[1] < MAX_ACCEL_PER_CYCLE && abs_desired_accels_wheels[2] < MAX_ACCEL_PER_CYCLE) {
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f867 	bl	80004e0 <__aeabi_f2d>
 8001412:	a33b      	add	r3, pc, #236	; (adr r3, 8001500 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff fb2c 	bl	8000a74 <__aeabi_dcmplt>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d01e      	beq.n	8001460 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xa8>
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f85b 	bl	80004e0 <__aeabi_f2d>
 800142a:	a335      	add	r3, pc, #212	; (adr r3, 8001500 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 800142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001430:	f7ff fb20 	bl	8000a74 <__aeabi_dcmplt>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d012      	beq.n	8001460 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xa8>
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f84f 	bl	80004e0 <__aeabi_f2d>
 8001442:	a32f      	add	r3, pc, #188	; (adr r3, 8001500 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f7ff fb14 	bl	8000a74 <__aeabi_dcmplt>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d006      	beq.n	8001460 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xa8>
		// acceleration requested is ok, no need to accelerate gradually.
		this->write_wheels_speeds(cmd_wheels_speeds);
 8001452:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f7ff ff79 	bl	8001350 <_ZN15HolonomicDrive319write_wheels_speedsEPf>
 800145e:	e048      	b.n	80014f2 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x13a>
	}
	else {
		// Trouver la roue qui pose le + problème. On va alors pouvoir réduire les accélérations des 3 roues de façon
		// de façon proportionelle, de façon que la roue qui pose le + problème ait une accélération égale à MAX_ACCEL_PER_CYCLE
		int i_max = get_index_max(abs_desired_accels_wheels);
 8001460:	f107 0318 	add.w	r3, r7, #24
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fd60 	bl	8000f2a <_Z13get_index_maxPf>
 800146a:	6438      	str	r0, [r7, #64]	; 0x40

		float speed_ratio = MAX_ACCEL_PER_CYCLE / abs_desired_accels_wheels[i_max]; // speed ratio of each original speed to add
 800146c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	3348      	adds	r3, #72	; 0x48
 8001472:	443b      	add	r3, r7
 8001474:	3b30      	subs	r3, #48	; 0x30
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff f831 	bl	80004e0 <__aeabi_f2d>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	a11f      	add	r1, pc, #124	; (adr r1, 8001500 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 8001484:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001488:	f7ff f9ac 	bl	80007e4 <__aeabi_ddiv>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	f7ff fb5e 	bl	8000b54 <__aeabi_d2f>
 8001498:	4603      	mov	r3, r0
 800149a:	63fb      	str	r3, [r7, #60]	; 0x3c

		float new_speeds_cmds[3];
		for(int i=0; i<3; i++) {
 800149c:	2300      	movs	r3, #0
 800149e:	647b      	str	r3, [r7, #68]	; 0x44
 80014a0:	e01d      	b.n	80014de <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x126>
			new_speeds_cmds[i] = current_wheels_speeds_rps[i] + speed_ratio * desired_accels_wheels[i];;
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014a6:	334e      	adds	r3, #78	; 0x4e
 80014a8:	009b      	lsls	r3, r3, #2
 80014aa:	4413      	add	r3, r2
 80014ac:	ed93 7a00 	vldr	s14, [r3]
 80014b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	3348      	adds	r3, #72	; 0x48
 80014b6:	443b      	add	r3, r7
 80014b8:	3b24      	subs	r3, #36	; 0x24
 80014ba:	edd3 6a00 	vldr	s13, [r3]
 80014be:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80014c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	3348      	adds	r3, #72	; 0x48
 80014d0:	443b      	add	r3, r7
 80014d2:	3b3c      	subs	r3, #60	; 0x3c
 80014d4:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i<3; i++) {
 80014d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014da:	3301      	adds	r3, #1
 80014dc:	647b      	str	r3, [r7, #68]	; 0x44
 80014de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	ddde      	ble.n	80014a2 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xea>
		}

		// set speed
		this->write_wheels_speeds(new_speeds_cmds);
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4619      	mov	r1, r3
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff30 	bl	8001350 <_ZN15HolonomicDrive319write_wheels_speedsEPf>


	}

}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3748      	adds	r7, #72	; 0x48
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	f3af 8000 	nop.w
 8001500:	9999999a 	.word	0x9999999a
 8001504:	3fb99999 	.word	0x3fb99999

08001508 <_ZN15HolonomicDrive3C1Ev>:

HolonomicDrive3::HolonomicDrive3() {
 8001508:	b5b0      	push	{r4, r5, r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <_ZN15HolonomicDrive3C1Ev+0x3c>)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	3304      	adds	r3, #4
 800151a:	2402      	movs	r4, #2
 800151c:	461d      	mov	r5, r3
 800151e:	e004      	b.n	800152a <_ZN15HolonomicDrive3C1Ev+0x22>
 8001520:	4628      	mov	r0, r5
 8001522:	f000 f8a1 	bl	8001668 <_ZN7StepperC1Ev>
 8001526:	3560      	adds	r5, #96	; 0x60
 8001528:	3c01      	subs	r4, #1
 800152a:	2c00      	cmp	r4, #0
 800152c:	daf8      	bge.n	8001520 <_ZN15HolonomicDrive3C1Ev+0x18>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fd38 	bl	8000faa <_ZN3VelC1Ev>
}
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bdb0      	pop	{r4, r5, r7, pc}
 8001544:	080066b8 	.word	0x080066b8

08001548 <_ZN15HolonomicDrive3D1Ev>:

HolonomicDrive3::~HolonomicDrive3() {
 8001548:	b590      	push	{r4, r7, lr}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	4a0d      	ldr	r2, [pc, #52]	; (8001588 <_ZN15HolonomicDrive3D1Ev+0x40>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	3304      	adds	r3, #4
	// TODO Auto-generated destructor stub
}
 800155a:	2b00      	cmp	r3, #0
 800155c:	d00d      	beq.n	800157a <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	3304      	adds	r3, #4
 8001562:	f503 7490 	add.w	r4, r3, #288	; 0x120
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	3304      	adds	r3, #4
}
 800156a:	429c      	cmp	r4, r3
 800156c:	d005      	beq.n	800157a <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 800156e:	3c60      	subs	r4, #96	; 0x60
 8001570:	6823      	ldr	r3, [r4, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4620      	mov	r0, r4
 8001576:	4798      	blx	r3
}
 8001578:	e7f5      	b.n	8001566 <_ZN15HolonomicDrive3D1Ev+0x1e>
HolonomicDrive3::~HolonomicDrive3() {
 800157a:	bf00      	nop
}
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bd90      	pop	{r4, r7, pc}
 8001586:	bf00      	nop
 8001588:	080066b8 	.word	0x080066b8

0800158c <_ZN15HolonomicDrive3D0Ev>:
HolonomicDrive3::~HolonomicDrive3() {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
}
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ffd7 	bl	8001548 <_ZN15HolonomicDrive3D1Ev>
 800159a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f004 fb90 	bl	8005cc4 <_ZdlPvj>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <_Z21PWM_set_high_durationP11TIM_TypeDefi>:

#define SYS_CORE_CLOCK_HZ 170000000.
#define SYS_CORE_CLOCK_MHZ 170.


void PWM_set_high_duration(TIM_TypeDef *timx, int us) {
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
	timx->CCR1 = SYS_CORE_CLOCK_MHZ/(timx->PSC+1) * us;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015be:	3301      	adds	r3, #1
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ff6b 	bl	800049c <__aeabi_ui2d>
 80015c6:	4602      	mov	r2, r0
 80015c8:	460b      	mov	r3, r1
 80015ca:	f04f 0000 	mov.w	r0, #0
 80015ce:	490e      	ldr	r1, [pc, #56]	; (8001608 <_Z21PWM_set_high_durationP11TIM_TypeDefi+0x58>)
 80015d0:	f7ff f908 	bl	80007e4 <__aeabi_ddiv>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4614      	mov	r4, r2
 80015da:	461d      	mov	r5, r3
 80015dc:	6838      	ldr	r0, [r7, #0]
 80015de:	f7fe ff6d 	bl	80004bc <__aeabi_i2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4620      	mov	r0, r4
 80015e8:	4629      	mov	r1, r5
 80015ea:	f7fe ffd1 	bl	8000590 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fa8d 	bl	8000b14 <__aeabi_d2uiz>
 80015fa:	4602      	mov	r2, r0
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bdb0      	pop	{r4, r5, r7, pc}
 8001608:	40654000 	.word	0x40654000
 800160c:	00000000 	.word	0x00000000

08001610 <_Z12PWM_set_freqP11TIM_TypeDefi>:

void PWM_set_freq(TIM_TypeDef *timx, int hz) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
	int arr = SYS_CORE_CLOCK_HZ/((timx->PSC+1)*hz);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800161e:	3301      	adds	r3, #1
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	fb02 f303 	mul.w	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ff38 	bl	800049c <__aeabi_ui2d>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	a10b      	add	r1, pc, #44	; (adr r1, 8001660 <_Z12PWM_set_freqP11TIM_TypeDefi+0x50>)
 8001632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001636:	f7ff f8d5 	bl	80007e4 <__aeabi_ddiv>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	f7ff fa3f 	bl	8000ac4 <__aeabi_d2iz>
 8001646:	4603      	mov	r3, r0
 8001648:	60fb      	str	r3, [r7, #12]
	timx->CNT = 0;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	625a      	str	r2, [r3, #36]	; 0x24
	timx->ARR = arr;
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	00000000 	.word	0x00000000
 8001664:	41a443fd 	.word	0x41a443fd

08001668 <_ZN7StepperC1Ev>:

Stepper::Stepper() {}
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	4a04      	ldr	r2, [pc, #16]	; (8001684 <_ZN7StepperC1Ev+0x1c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	080066c8 	.word	0x080066c8

08001688 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>:

Stepper::Stepper(TIM_HandleTypeDef tim_handle_step, GPIO_TypeDef *GPIOx_dir, uint16_t GPIO_Pin_dir) {
 8001688:	b084      	sub	sp, #16
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
 8001692:	f107 0014 	add.w	r0, r7, #20
 8001696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800169a:	4a18      	ldr	r2, [pc, #96]	; (80016fc <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft+0x74>)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->tim_handle = tim_handle_step;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3304      	adds	r3, #4
 80016a4:	f107 0114 	add.w	r1, r7, #20
 80016a8:	224c      	movs	r2, #76	; 0x4c
 80016aa:	4618      	mov	r0, r3
 80016ac:	f004 fe43 	bl	8006336 <memcpy>
	this->GPIOx_dir = GPIOx_dir;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016b4:	651a      	str	r2, [r3, #80]	; 0x50
	this->GPIO_Pin_dir = GPIO_Pin_dir;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 80016bc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	PWM_set_high_duration(this->tim_handle.Instance, 10);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	210a      	movs	r1, #10
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff72 	bl	80015b0 <_Z21PWM_set_high_durationP11TIM_TypeDefi>
	HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80016d6:	2201      	movs	r2, #1
 80016d8:	4619      	mov	r1, r3
 80016da:	f001 ffc5 	bl	8003668 <HAL_GPIO_WritePin>

	this->current_dir = 0;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	65da      	str	r2, [r3, #92]	; 0x5c
	this->current_freq = 0;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	659a      	str	r2, [r3, #88]	; 0x58
}
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016f6:	b004      	add	sp, #16
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	080066c8 	.word	0x080066c8

08001700 <_ZN7Stepper19set_speed_step_freqEii>:

void Stepper::set_speed_step_freq(int hz, int dir) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b084      	sub	sp, #16
 8001704:	af00      	add	r7, sp, #0
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
	if(hz < 15){// todo calculer freq min automatiquement
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b0e      	cmp	r3, #14
 8001710:	dc06      	bgt.n	8001720 <_ZN7Stepper19set_speed_step_freqEii+0x20>
		HAL_TIM_PWM_Stop(&this->tim_handle, TIM_CHANNEL_1);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	3304      	adds	r3, #4
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f003 f90f 	bl	800493c <HAL_TIM_PWM_Stop>
		return;
 800171e:	e025      	b.n	800176c <_ZN7Stepper19set_speed_step_freqEii+0x6c>
	}
	if(!this->current_freq) {
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	2b00      	cmp	r3, #0
 8001726:	d105      	bne.n	8001734 <_ZN7Stepper19set_speed_step_freqEii+0x34>
		// stepper stopped, start pwm
		HAL_TIM_PWM_Start(&this->tim_handle, TIM_CHANNEL_1);
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	3304      	adds	r3, #4
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f003 f804 	bl	800473c <HAL_TIM_PWM_Start>
	}
	PWM_set_freq(this->tim_handle.Instance, hz);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	68b9      	ldr	r1, [r7, #8]
 800173a:	4618      	mov	r0, r3
 800173c:	f7ff ff68 	bl	8001610 <_Z12PWM_set_freqP11TIM_TypeDefi>

	if(dir==1) {
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d109      	bne.n	800175a <_ZN7Stepper19set_speed_step_freqEii+0x5a>
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001750:	2201      	movs	r2, #1
 8001752:	4619      	mov	r1, r3
 8001754:	f001 ff88 	bl	8003668 <HAL_GPIO_WritePin>
 8001758:	e008      	b.n	800176c <_ZN7Stepper19set_speed_step_freqEii+0x6c>
	}else {
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_RESET);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001764:	2200      	movs	r2, #0
 8001766:	4619      	mov	r1, r3
 8001768:	f001 ff7e 	bl	8003668 <HAL_GPIO_WritePin>
	}
}
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <_ZN7Stepper13set_speed_rpsEf>:

void Stepper::set_speed_rps(float rps) {
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	ed87 0a00 	vstr	s0, [r7]
	// 3200 steps per revolution
	int hz = rps * 3200.0;
 8001780:	6838      	ldr	r0, [r7, #0]
 8001782:	f7fe fead 	bl	80004e0 <__aeabi_f2d>
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	4b0f      	ldr	r3, [pc, #60]	; (80017c8 <_ZN7Stepper13set_speed_rpsEf+0x54>)
 800178c:	f7fe ff00 	bl	8000590 <__aeabi_dmul>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4610      	mov	r0, r2
 8001796:	4619      	mov	r1, r3
 8001798:	f7ff f994 	bl	8000ac4 <__aeabi_d2iz>
 800179c:	4603      	mov	r3, r0
 800179e:	60fb      	str	r3, [r7, #12]
	if(hz>=0) {
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db05      	blt.n	80017b2 <_ZN7Stepper13set_speed_rpsEf+0x3e>
		this->set_speed_step_freq(hz, 1);
 80017a6:	2201      	movs	r2, #1
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ffa8 	bl	8001700 <_ZN7Stepper19set_speed_step_freqEii>
	}
	else {
		this->set_speed_step_freq(-hz, 0);
	}
}
 80017b0:	e006      	b.n	80017c0 <_ZN7Stepper13set_speed_rpsEf+0x4c>
		this->set_speed_step_freq(-hz, 0);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	425b      	negs	r3, r3
 80017b6:	2200      	movs	r2, #0
 80017b8:	4619      	mov	r1, r3
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f7ff ffa0 	bl	8001700 <_ZN7Stepper19set_speed_step_freqEii>
}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40a90000 	.word	0x40a90000

080017cc <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <_ZN7StepperD1Ev+0x1c>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4618      	mov	r0, r3
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	080066c8 	.word	0x080066c8

080017ec <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
}
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff ffe9 	bl	80017cc <_ZN7StepperD1Ev>
 80017fa:	2160      	movs	r1, #96	; 0x60
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	f004 fa61 	bl	8005cc4 <_ZdlPvj>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6) {
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a04      	ldr	r2, [pc, #16]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d101      	bne.n	8001822 <HAL_TIM_PeriodElapsedCallback+0x16>
    	loop();
 800181e:	f000 f83d 	bl	800189c <_Z4loopv>
    }

}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40001000 	.word	0x40001000

08001830 <_Z13set_loop_freqi>:

void set_loop_freq(int hz) {
 8001830:	b5b0      	push	{r4, r5, r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	htim6.Instance->ARR = SYS_CORE_CLOCK_HZ / (htim6.Instance->PSC+1) / hz;
 8001838:	4b17      	ldr	r3, [pc, #92]	; (8001898 <_Z13set_loop_freqi+0x68>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	3301      	adds	r3, #1
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe2b 	bl	800049c <__aeabi_ui2d>
 8001846:	4602      	mov	r2, r0
 8001848:	460b      	mov	r3, r1
 800184a:	a111      	add	r1, pc, #68	; (adr r1, 8001890 <_Z13set_loop_freqi+0x60>)
 800184c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001850:	f7fe ffc8 	bl	80007e4 <__aeabi_ddiv>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4614      	mov	r4, r2
 800185a:	461d      	mov	r5, r3
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7fe fe2d 	bl	80004bc <__aeabi_i2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4620      	mov	r0, r4
 8001868:	4629      	mov	r1, r5
 800186a:	f7fe ffbb 	bl	80007e4 <__aeabi_ddiv>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4909      	ldr	r1, [pc, #36]	; (8001898 <_Z13set_loop_freqi+0x68>)
 8001874:	680c      	ldr	r4, [r1, #0]
 8001876:	4610      	mov	r0, r2
 8001878:	4619      	mov	r1, r3
 800187a:	f7ff f94b 	bl	8000b14 <__aeabi_d2uiz>
 800187e:	4603      	mov	r3, r0
 8001880:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001882:	bf00      	nop
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bdb0      	pop	{r4, r5, r7, pc}
 800188a:	bf00      	nop
 800188c:	f3af 8000 	nop.w
 8001890:	00000000 	.word	0x00000000
 8001894:	41a443fd 	.word	0x41a443fd
 8001898:	20000184 	.word	0x20000184

0800189c <_Z4loopv>:

void loop() {
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 80018a2:	f001 f8a3 	bl	80029ec <HAL_GetTick>
 80018a6:	6078      	str	r0, [r7, #4]
	if(current_time-last_time > time_switch_cmd) {
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <_Z4loopv+0x78>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	1ad2      	subs	r2, r2, r3
 80018b0:	4b19      	ldr	r3, [pc, #100]	; (8001918 <_Z4loopv+0x7c>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d925      	bls.n	8001904 <_Z4loopv+0x68>
		i_cmd += 1;
 80018b8:	4b18      	ldr	r3, [pc, #96]	; (800191c <_Z4loopv+0x80>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	4a17      	ldr	r2, [pc, #92]	; (800191c <_Z4loopv+0x80>)
 80018c0:	6013      	str	r3, [r2, #0]
		if(i_cmd == 4) {
 80018c2:	4b16      	ldr	r3, [pc, #88]	; (800191c <_Z4loopv+0x80>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d102      	bne.n	80018d0 <_Z4loopv+0x34>
			i_cmd = 0;
 80018ca:	4b14      	ldr	r3, [pc, #80]	; (800191c <_Z4loopv+0x80>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
		}
		last_time = current_time;
 80018d0:	4a10      	ldr	r2, [pc, #64]	; (8001914 <_Z4loopv+0x78>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6013      	str	r3, [r2, #0]

		holo_drive.set_cmd_vel(cmds[i_cmd]);
 80018d6:	4b11      	ldr	r3, [pc, #68]	; (800191c <_Z4loopv+0x80>)
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	4911      	ldr	r1, [pc, #68]	; (8001920 <_Z4loopv+0x84>)
 80018dc:	4613      	mov	r3, r2
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4413      	add	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	440b      	add	r3, r1
 80018e6:	edd3 6a00 	vldr	s13, [r3]
 80018ea:	ed93 7a01 	vldr	s14, [r3, #4]
 80018ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80018f2:	eeb0 0a66 	vmov.f32	s0, s13
 80018f6:	eef0 0a47 	vmov.f32	s1, s14
 80018fa:	eeb0 1a67 	vmov.f32	s2, s15
 80018fe:	4809      	ldr	r0, [pc, #36]	; (8001924 <_Z4loopv+0x88>)
 8001900:	f7ff fbf8 	bl	80010f4 <_ZN15HolonomicDrive311set_cmd_velE3Vel>
	}

	holo_drive.spin_once_motors_control();
 8001904:	4807      	ldr	r0, [pc, #28]	; (8001924 <_Z4loopv+0x88>)
 8001906:	f7ff fd57 	bl	80013b8 <_ZN15HolonomicDrive324spin_once_motors_controlEv>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	20000480 	.word	0x20000480
 8001918:	20000484 	.word	0x20000484
 800191c:	20000488 	.word	0x20000488
 8001920:	2000048c 	.word	0x2000048c
 8001924:	2000033c 	.word	0x2000033c

08001928 <_ZN7StepperC1ERKS_>:
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
 8001932:	4a11      	ldr	r2, [pc, #68]	; (8001978 <_ZN7StepperC1ERKS_+0x50>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	1d10      	adds	r0, r2, #4
 800193e:	3304      	adds	r3, #4
 8001940:	224c      	movs	r2, #76	; 0x4c
 8001942:	4619      	mov	r1, r3
 8001944:	f004 fcf7 	bl	8006336 <memcpy>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	651a      	str	r2, [r3, #80]	; 0x50
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	659a      	str	r2, [r3, #88]	; 0x58
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	65da      	str	r2, [r3, #92]	; 0x5c
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4618      	mov	r0, r3
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	080066c8 	.word	0x080066c8

0800197c <_ZN15HolonomicDrive3aSERKS_>:
	float x = 0;
	float y = 0;
	float theta = 0;
};

class HolonomicDrive3 {
 800197c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	6039      	str	r1, [r7, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	1d1a      	adds	r2, r3, #4
 800198a:	2502      	movs	r5, #2
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	1d1c      	adds	r4, r3, #4
 8001990:	4616      	mov	r6, r2
 8001992:	e006      	b.n	80019a2 <_ZN15HolonomicDrive3aSERKS_+0x26>
 8001994:	4621      	mov	r1, r4
 8001996:	4630      	mov	r0, r6
 8001998:	f7ff fb1e 	bl	8000fd8 <_ZN7StepperaSERKS_>
 800199c:	3660      	adds	r6, #96	; 0x60
 800199e:	3460      	adds	r4, #96	; 0x60
 80019a0:	3d01      	subs	r5, #1
 80019a2:	2d00      	cmp	r5, #0
 80019a4:	daf6      	bge.n	8001994 <_ZN15HolonomicDrive3aSERKS_+0x18>
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	683a      	ldr	r2, [r7, #0]
 80019c2:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80019c6:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 80019ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80019cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f503 719c 	add.w	r1, r3, #312	; 0x138
 80019d6:	2202      	movs	r2, #2
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80019de:	e004      	b.n	80019ea <_ZN15HolonomicDrive3aSERKS_+0x6e>
 80019e0:	6818      	ldr	r0, [r3, #0]
 80019e2:	6008      	str	r0, [r1, #0]
 80019e4:	3104      	adds	r1, #4
 80019e6:	3304      	adds	r3, #4
 80019e8:	3a01      	subs	r2, #1
 80019ea:	2a00      	cmp	r2, #0
 80019ec:	daf8      	bge.n	80019e0 <_ZN15HolonomicDrive3aSERKS_+0x64>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fa:	f2ad 4d04 	subw	sp, sp, #1028	; 0x404
 80019fe:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a00:	f000 ff8f 	bl	8002922 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a04:	f000 f964 	bl	8001cd0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a08:	f000 fc76 	bl	80022f8 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8001a0c:	f000 fa02 	bl	8001e14 <_ZL12MX_TIM1_Initv>
  MX_TIM4_Init();
 8001a10:	f000 fad0 	bl	8001fb4 <_ZL12MX_TIM4_Initv>
  MX_TIM8_Init();
 8001a14:	f000 fba0 	bl	8002158 <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 8001a18:	f000 fb5e 	bl	80020d8 <_ZL12MX_TIM6_Initv>
  MX_FDCAN1_Init();
 8001a1c:	f000 f9ae 	bl	8001d7c <_ZL14MX_FDCAN1_Initv>
  /* USER CODE BEGIN 2 */

  stepper0 = Stepper(htim8, GPIOA, GPIO_PIN_4);
 8001a20:	4e9a      	ldr	r6, [pc, #616]	; (8001c8c <main+0x294>)
 8001a22:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001a26:	2310      	movs	r3, #16
 8001a28:	9311      	str	r3, [sp, #68]	; 0x44
 8001a2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a2e:	9310      	str	r3, [sp, #64]	; 0x40
 8001a30:	466d      	mov	r5, sp
 8001a32:	f106 040c 	add.w	r4, r6, #12
 8001a36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a4a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001a4e:	4660      	mov	r0, ip
 8001a50:	f7ff fe1a 	bl	8001688 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>
 8001a54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a58:	4619      	mov	r1, r3
 8001a5a:	488d      	ldr	r0, [pc, #564]	; (8001c90 <main+0x298>)
 8001a5c:	f7ff fabc 	bl	8000fd8 <_ZN7StepperaSERKS_>
 8001a60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff feb1 	bl	80017cc <_ZN7StepperD1Ev>
  stepper1 = Stepper(htim1, GPIOA, GPIO_PIN_0);
 8001a6a:	4e8a      	ldr	r6, [pc, #552]	; (8001c94 <main+0x29c>)
 8001a6c:	f107 0c90 	add.w	ip, r7, #144	; 0x90
 8001a70:	2301      	movs	r3, #1
 8001a72:	9311      	str	r3, [sp, #68]	; 0x44
 8001a74:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001a78:	9310      	str	r3, [sp, #64]	; 0x40
 8001a7a:	466d      	mov	r5, sp
 8001a7c:	f106 040c 	add.w	r4, r6, #12
 8001a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a8c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001a90:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001a94:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001a98:	4660      	mov	r0, ip
 8001a9a:	f7ff fdf5 	bl	8001688 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>
 8001a9e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	487c      	ldr	r0, [pc, #496]	; (8001c98 <main+0x2a0>)
 8001aa6:	f7ff fa97 	bl	8000fd8 <_ZN7StepperaSERKS_>
 8001aaa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fe8c 	bl	80017cc <_ZN7StepperD1Ev>
  stepper2 = Stepper(htim4, GPIOA, GPIO_PIN_1);
 8001ab4:	4e79      	ldr	r6, [pc, #484]	; (8001c9c <main+0x2a4>)
 8001ab6:	f107 0cf0 	add.w	ip, r7, #240	; 0xf0
 8001aba:	2302      	movs	r3, #2
 8001abc:	9311      	str	r3, [sp, #68]	; 0x44
 8001abe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ac2:	9310      	str	r3, [sp, #64]	; 0x40
 8001ac4:	466d      	mov	r5, sp
 8001ac6:	f106 040c 	add.w	r4, r6, #12
 8001aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ada:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001ade:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001ae2:	4660      	mov	r0, ip
 8001ae4:	f7ff fdd0 	bl	8001688 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>
 8001ae8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001aec:	4619      	mov	r1, r3
 8001aee:	486c      	ldr	r0, [pc, #432]	; (8001ca0 <main+0x2a8>)
 8001af0:	f7ff fa72 	bl	8000fd8 <_ZN7StepperaSERKS_>
 8001af4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff fe67 	bl	80017cc <_ZN7StepperD1Ev>

  holo_drive = HolonomicDrive3(stepper0, stepper1, stepper2, 0.029, 0.175);
 8001afe:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001b02:	4963      	ldr	r1, [pc, #396]	; (8001c90 <main+0x298>)
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff0f 	bl	8001928 <_ZN7StepperC1ERKS_>
 8001b0a:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8001b0e:	4962      	ldr	r1, [pc, #392]	; (8001c98 <main+0x2a0>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff ff09 	bl	8001928 <_ZN7StepperC1ERKS_>
 8001b16:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8001b1a:	4961      	ldr	r1, [pc, #388]	; (8001ca0 <main+0x2a8>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ff03 	bl	8001928 <_ZN7StepperC1ERKS_>
 8001b22:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8001b26:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 8001b2a:	f507 7125 	add.w	r1, r7, #660	; 0x294
 8001b2e:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8001b32:	eddf 0a5c 	vldr	s1, [pc, #368]	; 8001ca4 <main+0x2ac>
 8001b36:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 8001ca8 <main+0x2b0>
 8001b3a:	f7ff fa71 	bl	8001020 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>
 8001b3e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001b42:	4619      	mov	r1, r3
 8001b44:	4859      	ldr	r0, [pc, #356]	; (8001cac <main+0x2b4>)
 8001b46:	f7ff ff19 	bl	800197c <_ZN15HolonomicDrive3aSERKS_>
 8001b4a:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff fcfa 	bl	8001548 <_ZN15HolonomicDrive3D1Ev>
 8001b54:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fe37 	bl	80017cc <_ZN7StepperD1Ev>
 8001b5e:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fe32 	bl	80017cc <_ZN7StepperD1Ev>
 8001b68:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fe2d 	bl	80017cc <_ZN7StepperD1Ev>

  ChampiCan champi_can = ChampiCan(&hfdcan1);
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	494e      	ldr	r1, [pc, #312]	; (8001cb0 <main+0x2b8>)
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff f83c 	bl	8000bf4 <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>


  if(champi_can.start() != 0) {
 8001b7c:	1d3b      	adds	r3, r7, #4
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff f862 	bl	8000c48 <_ZN9ChampiCan5startEv>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	bf14      	ite	ne
 8001b8a:	2301      	movne	r3, #1
 8001b8c:	2300      	moveq	r3, #0
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <main+0x1a0>
	  Error_Handler();
 8001b94:	f000 fbfe 	bl	8002394 <Error_Handler>
  }

  set_loop_freq(100);
 8001b98:	2064      	movs	r0, #100	; 0x64
 8001b9a:	f7ff fe49 	bl	8001830 <_Z13set_loop_freqi>
//  HAL_TIM_Base_Start_IT(&htim6);

  float sp = 0.5;
 8001b9e:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001ba2:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4

  cmds[0] = {};
 8001ba6:	4b43      	ldr	r3, [pc, #268]	; (8001cb4 <main+0x2bc>)
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	4b41      	ldr	r3, [pc, #260]	; (8001cb4 <main+0x2bc>)
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <main+0x2bc>)
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	609a      	str	r2, [r3, #8]
  cmds[0].x = sp;
 8001bbe:	4a3d      	ldr	r2, [pc, #244]	; (8001cb4 <main+0x2bc>)
 8001bc0:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8001bc4:	6013      	str	r3, [r2, #0]
  cmds[1] = {};
 8001bc6:	4b3b      	ldr	r3, [pc, #236]	; (8001cb4 <main+0x2bc>)
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <main+0x2bc>)
 8001bd0:	f04f 0200 	mov.w	r2, #0
 8001bd4:	611a      	str	r2, [r3, #16]
 8001bd6:	4b37      	ldr	r3, [pc, #220]	; (8001cb4 <main+0x2bc>)
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	615a      	str	r2, [r3, #20]
  cmds[1].y = sp;
 8001bde:	4a35      	ldr	r2, [pc, #212]	; (8001cb4 <main+0x2bc>)
 8001be0:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8001be4:	6113      	str	r3, [r2, #16]
  cmds[2] = {};
 8001be6:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <main+0x2bc>)
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	619a      	str	r2, [r3, #24]
 8001bee:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <main+0x2bc>)
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
 8001bf6:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <main+0x2bc>)
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	621a      	str	r2, [r3, #32]
  cmds[2].x = -sp;
 8001bfe:	edd7 7aed 	vldr	s15, [r7, #948]	; 0x3b4
 8001c02:	eef1 7a67 	vneg.f32	s15, s15
 8001c06:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <main+0x2bc>)
 8001c08:	edc3 7a06 	vstr	s15, [r3, #24]
  cmds[3] = {};
 8001c0c:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <main+0x2bc>)
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	625a      	str	r2, [r3, #36]	; 0x24
 8001c14:	4b27      	ldr	r3, [pc, #156]	; (8001cb4 <main+0x2bc>)
 8001c16:	f04f 0200 	mov.w	r2, #0
 8001c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8001c1c:	4b25      	ldr	r3, [pc, #148]	; (8001cb4 <main+0x2bc>)
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	62da      	str	r2, [r3, #44]	; 0x2c
  cmds[3].y = -sp;
 8001c24:	edd7 7aed 	vldr	s15, [r7, #948]	; 0x3b4
 8001c28:	eef1 7a67 	vneg.f32	s15, s15
 8001c2c:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <main+0x2bc>)
 8001c2e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  time_switch_cmd = 1000; //ms
 8001c32:	4b21      	ldr	r3, [pc, #132]	; (8001cb8 <main+0x2c0>)
 8001c34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c38:	601a      	str	r2, [r3, #0]
  i_cmd = 0;
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <main+0x2c4>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

  last_time = HAL_GetTick();
 8001c40:	f000 fed4 	bl	80029ec <HAL_GetTick>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4a1e      	ldr	r2, [pc, #120]	; (8001cc0 <main+0x2c8>)
 8001c48:	6013      	str	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char msg[4] = "abc";
 8001c4a:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8001c4e:	f5a3 736e 	sub.w	r3, r3, #952	; 0x3b8
 8001c52:	4a1c      	ldr	r2, [pc, #112]	; (8001cc4 <main+0x2cc>)
 8001c54:	601a      	str	r2, [r3, #0]
      //if (champi_can.send_frame(0x123, TxData, 8) !=0)
	  if (champi_can.send_msg(0x123, (uint8_t*) msg, 3) !=0)
 8001c56:	463a      	mov	r2, r7
 8001c58:	1d38      	adds	r0, r7, #4
 8001c5a:	2303      	movs	r3, #3
 8001c5c:	f240 1123 	movw	r1, #291	; 0x123
 8001c60:	f7ff f846 	bl	8000cf0 <_ZN9ChampiCan8send_msgEmPhm>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	bf14      	ite	ne
 8001c6a:	2301      	movne	r3, #1
 8001c6c:	2300      	moveq	r3, #0
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d004      	beq.n	8001c7e <main+0x286>
      {
        /* Transmission request Error */
    	  printf("ERROR: msg not sent\n");
 8001c74:	4814      	ldr	r0, [pc, #80]	; (8001cc8 <main+0x2d0>)
 8001c76:	f004 f9f3 	bl	8006060 <puts>
    	  Error_Handler();
 8001c7a:	f000 fb8b 	bl	8002394 <Error_Handler>
      }

	  printf("msg sent\n");
 8001c7e:	4813      	ldr	r0, [pc, #76]	; (8001ccc <main+0x2d4>)
 8001c80:	f004 f9ee 	bl	8006060 <puts>
	  HAL_Delay(10);
 8001c84:	200a      	movs	r0, #10
 8001c86:	f000 febd 	bl	8002a04 <HAL_Delay>
  }
 8001c8a:	e7de      	b.n	8001c4a <main+0x252>
 8001c8c:	200001d0 	.word	0x200001d0
 8001c90:	2000021c 	.word	0x2000021c
 8001c94:	200000ec 	.word	0x200000ec
 8001c98:	2000027c 	.word	0x2000027c
 8001c9c:	20000138 	.word	0x20000138
 8001ca0:	200002dc 	.word	0x200002dc
 8001ca4:	3e333333 	.word	0x3e333333
 8001ca8:	3ced9168 	.word	0x3ced9168
 8001cac:	2000033c 	.word	0x2000033c
 8001cb0:	20000088 	.word	0x20000088
 8001cb4:	2000048c 	.word	0x2000048c
 8001cb8:	20000484 	.word	0x20000484
 8001cbc:	20000488 	.word	0x20000488
 8001cc0:	20000480 	.word	0x20000480
 8001cc4:	00636261 	.word	0x00636261
 8001cc8:	08006680 	.word	0x08006680
 8001ccc:	08006694 	.word	0x08006694

08001cd0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b094      	sub	sp, #80	; 0x50
 8001cd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cd6:	f107 0318 	add.w	r3, r7, #24
 8001cda:	2238      	movs	r2, #56	; 0x38
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f004 fa9e 	bl	8006220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]
 8001cec:	609a      	str	r2, [r3, #8]
 8001cee:	60da      	str	r2, [r3, #12]
 8001cf0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001cf2:	2000      	movs	r0, #0
 8001cf4:	f001 fcd0 	bl	8003698 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d02:	2340      	movs	r3, #64	; 0x40
 8001d04:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d06:	2302      	movs	r3, #2
 8001d08:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001d0e:	2304      	movs	r3, #4
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001d12:	2355      	movs	r3, #85	; 0x55
 8001d14:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d16:	2302      	movs	r3, #2
 8001d18:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d22:	f107 0318 	add.w	r3, r7, #24
 8001d26:	4618      	mov	r0, r3
 8001d28:	f001 fd6a 	bl	8003800 <HAL_RCC_OscConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	bf14      	ite	ne
 8001d32:	2301      	movne	r3, #1
 8001d34:	2300      	moveq	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001d3c:	f000 fb2a 	bl	8002394 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d40:	230f      	movs	r3, #15
 8001d42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d44:	2303      	movs	r3, #3
 8001d46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	2104      	movs	r1, #4
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f002 f863 	bl	8003e24 <HAL_RCC_ClockConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	bf14      	ite	ne
 8001d64:	2301      	movne	r3, #1
 8001d66:	2300      	moveq	r3, #0
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001d6e:	f000 fb11 	bl	8002394 <Error_Handler>
  }
}
 8001d72:	bf00      	nop
 8001d74:	3750      	adds	r7, #80	; 0x50
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
	...

08001d7c <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001d80:	4b22      	ldr	r3, [pc, #136]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d82:	4a23      	ldr	r2, [pc, #140]	; (8001e10 <_ZL14MX_FDCAN1_Initv+0x94>)
 8001d84:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001d86:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001dac:	220a      	movs	r2, #10
 8001dae:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001db2:	2201      	movs	r2, #1
 8001db4:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001db8:	220e      	movs	r2, #14
 8001dba:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001dbc:	4b13      	ldr	r3, [pc, #76]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 8001dc2:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001dc4:	220a      	movs	r2, #10
 8001dc6:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001dc8:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8001dce:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001dd0:	220e      	movs	r2, #14
 8001dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001dda:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001de0:	4b0a      	ldr	r3, [pc, #40]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001de6:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001dec:	4807      	ldr	r0, [pc, #28]	; (8001e0c <_ZL14MX_FDCAN1_Initv+0x90>)
 8001dee:	f000 ff3b 	bl	8002c68 <HAL_FDCAN_Init>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf14      	ite	ne
 8001df8:	2301      	movne	r3, #1
 8001dfa:	2300      	moveq	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 8001e02:	f000 fac7 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000088 	.word	0x20000088
 8001e10:	40006400 	.word	0x40006400

08001e14 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b09c      	sub	sp, #112	; 0x70
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e1a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
 8001e3c:	605a      	str	r2, [r3, #4]
 8001e3e:	609a      	str	r2, [r3, #8]
 8001e40:	60da      	str	r2, [r3, #12]
 8001e42:	611a      	str	r2, [r3, #16]
 8001e44:	615a      	str	r2, [r3, #20]
 8001e46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2234      	movs	r2, #52	; 0x34
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 f9e6 	bl	8006220 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e54:	4b55      	ldr	r3, [pc, #340]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001e56:	4a56      	ldr	r2, [pc, #344]	; (8001fb0 <_ZL12MX_TIM1_Initv+0x19c>)
 8001e58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 260;
 8001e5a:	4b54      	ldr	r3, [pc, #336]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001e5c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e60:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e62:	4b52      	ldr	r3, [pc, #328]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e68:	4b50      	ldr	r3, [pc, #320]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e6e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e70:	4b4e      	ldr	r3, [pc, #312]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e76:	4b4d      	ldr	r3, [pc, #308]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001e82:	484a      	ldr	r0, [pc, #296]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001e84:	f002 fba2 	bl	80045cc <HAL_TIM_Base_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf14      	ite	ne
 8001e8e:	2301      	movne	r3, #1
 8001e90:	2300      	moveq	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8001e98:	f000 fa7c 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ea0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ea2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4840      	ldr	r0, [pc, #256]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001eaa:	f003 f841 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	bf14      	ite	ne
 8001eb4:	2301      	movne	r3, #1
 8001eb6:	2300      	moveq	r3, #0
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8001ebe:	f000 fa69 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ec2:	483a      	ldr	r0, [pc, #232]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001ec4:	f002 fbd9 	bl	800467a <HAL_TIM_PWM_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	bf14      	ite	ne
 8001ece:	2301      	movne	r3, #1
 8001ed0:	2300      	moveq	r3, #0
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <_ZL12MX_TIM1_Initv+0xc8>
  {
    Error_Handler();
 8001ed8:	f000 fa5c 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001edc:	2300      	movs	r3, #0
 8001ede:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ee8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001eec:	4619      	mov	r1, r3
 8001eee:	482f      	ldr	r0, [pc, #188]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001ef0:	f003 fd94 	bl	8005a1c <HAL_TIMEx_MasterConfigSynchronization>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	bf14      	ite	ne
 8001efa:	2301      	movne	r3, #1
 8001efc:	2300      	moveq	r3, #0
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <_ZL12MX_TIM1_Initv+0xf4>
  {
    Error_Handler();
 8001f04:	f000 fa46 	bl	8002394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f08:	2360      	movs	r3, #96	; 0x60
 8001f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f10:	2300      	movs	r3, #0
 8001f12:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f14:	2300      	movs	r3, #0
 8001f16:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f20:	2300      	movs	r3, #0
 8001f22:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f28:	2200      	movs	r2, #0
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	481f      	ldr	r0, [pc, #124]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001f2e:	f002 feeb 	bl	8004d08 <HAL_TIM_PWM_ConfigChannel>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	bf14      	ite	ne
 8001f38:	2301      	movne	r3, #1
 8001f3a:	2300      	moveq	r3, #0
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 8001f42:	f000 fa27 	bl	8002394 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f52:	2300      	movs	r3, #0
 8001f54:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f5e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f64:	2300      	movs	r3, #0
 8001f66:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f6c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f70:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f72:	2300      	movs	r3, #0
 8001f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f76:	2300      	movs	r3, #0
 8001f78:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f7e:	1d3b      	adds	r3, r7, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	480a      	ldr	r0, [pc, #40]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001f84:	f003 fdcc 	bl	8005b20 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	bf14      	ite	ne
 8001f8e:	2301      	movne	r3, #1
 8001f90:	2300      	moveq	r3, #0
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <_ZL12MX_TIM1_Initv+0x188>
  {
    Error_Handler();
 8001f98:	f000 f9fc 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f9c:	4803      	ldr	r0, [pc, #12]	; (8001fac <_ZL12MX_TIM1_Initv+0x198>)
 8001f9e:	f000 fb29 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 8001fa2:	bf00      	nop
 8001fa4:	3770      	adds	r7, #112	; 0x70
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	200000ec 	.word	0x200000ec
 8001fb0:	40012c00 	.word	0x40012c00

08001fb4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08e      	sub	sp, #56	; 0x38
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fc8:	f107 031c 	add.w	r3, r7, #28
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd4:	463b      	mov	r3, r7
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001fe6:	4b3a      	ldr	r3, [pc, #232]	; (80020d0 <_ZL12MX_TIM4_Initv+0x11c>)
 8001fe8:	4a3a      	ldr	r2, [pc, #232]	; (80020d4 <_ZL12MX_TIM4_Initv+0x120>)
 8001fea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 260;
 8001fec:	4b38      	ldr	r3, [pc, #224]	; (80020d0 <_ZL12MX_TIM4_Initv+0x11c>)
 8001fee:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ff2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff4:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <_ZL12MX_TIM4_Initv+0x11c>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ffa:	4b35      	ldr	r3, [pc, #212]	; (80020d0 <_ZL12MX_TIM4_Initv+0x11c>)
 8001ffc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002000:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002002:	4b33      	ldr	r3, [pc, #204]	; (80020d0 <_ZL12MX_TIM4_Initv+0x11c>)
 8002004:	2200      	movs	r2, #0
 8002006:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002008:	4b31      	ldr	r3, [pc, #196]	; (80020d0 <_ZL12MX_TIM4_Initv+0x11c>)
 800200a:	2200      	movs	r2, #0
 800200c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800200e:	4830      	ldr	r0, [pc, #192]	; (80020d0 <_ZL12MX_TIM4_Initv+0x11c>)
 8002010:	f002 fadc 	bl	80045cc <HAL_TIM_Base_Init>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf14      	ite	ne
 800201a:	2301      	movne	r3, #1
 800201c:	2300      	moveq	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <_ZL12MX_TIM4_Initv+0x74>
  {
    Error_Handler();
 8002024:	f000 f9b6 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800202e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002032:	4619      	mov	r1, r3
 8002034:	4826      	ldr	r0, [pc, #152]	; (80020d0 <_ZL12MX_TIM4_Initv+0x11c>)
 8002036:	f002 ff7b 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	bf14      	ite	ne
 8002040:	2301      	movne	r3, #1
 8002042:	2300      	moveq	r3, #0
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <_ZL12MX_TIM4_Initv+0x9a>
  {
    Error_Handler();
 800204a:	f000 f9a3 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800204e:	4820      	ldr	r0, [pc, #128]	; (80020d0 <_ZL12MX_TIM4_Initv+0x11c>)
 8002050:	f002 fb13 	bl	800467a <HAL_TIM_PWM_Init>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	bf14      	ite	ne
 800205a:	2301      	movne	r3, #1
 800205c:	2300      	moveq	r3, #0
 800205e:	b2db      	uxtb	r3, r3
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <_ZL12MX_TIM4_Initv+0xb4>
  {
    Error_Handler();
 8002064:	f000 f996 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800206c:	2300      	movs	r3, #0
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002070:	f107 031c 	add.w	r3, r7, #28
 8002074:	4619      	mov	r1, r3
 8002076:	4816      	ldr	r0, [pc, #88]	; (80020d0 <_ZL12MX_TIM4_Initv+0x11c>)
 8002078:	f003 fcd0 	bl	8005a1c <HAL_TIMEx_MasterConfigSynchronization>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	bf14      	ite	ne
 8002082:	2301      	movne	r3, #1
 8002084:	2300      	moveq	r3, #0
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <_ZL12MX_TIM4_Initv+0xdc>
  {
    Error_Handler();
 800208c:	f000 f982 	bl	8002394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002090:	2360      	movs	r3, #96	; 0x60
 8002092:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800209c:	2300      	movs	r3, #0
 800209e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80020a0:	463b      	mov	r3, r7
 80020a2:	2204      	movs	r2, #4
 80020a4:	4619      	mov	r1, r3
 80020a6:	480a      	ldr	r0, [pc, #40]	; (80020d0 <_ZL12MX_TIM4_Initv+0x11c>)
 80020a8:	f002 fe2e 	bl	8004d08 <HAL_TIM_PWM_ConfigChannel>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	bf14      	ite	ne
 80020b2:	2301      	movne	r3, #1
 80020b4:	2300      	moveq	r3, #0
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <_ZL12MX_TIM4_Initv+0x10c>
  {
    Error_Handler();
 80020bc:	f000 f96a 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80020c0:	4803      	ldr	r0, [pc, #12]	; (80020d0 <_ZL12MX_TIM4_Initv+0x11c>)
 80020c2:	f000 fa97 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 80020c6:	bf00      	nop
 80020c8:	3738      	adds	r7, #56	; 0x38
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000138 	.word	0x20000138
 80020d4:	40000800 	.word	0x40000800

080020d8 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020de:	1d3b      	adds	r3, r7, #4
 80020e0:	2200      	movs	r2, #0
 80020e2:	601a      	str	r2, [r3, #0]
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <_ZL12MX_TIM6_Initv+0x78>)
 80020ea:	4a1a      	ldr	r2, [pc, #104]	; (8002154 <_ZL12MX_TIM6_Initv+0x7c>)
 80020ec:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 80020ee:	4b18      	ldr	r3, [pc, #96]	; (8002150 <_ZL12MX_TIM6_Initv+0x78>)
 80020f0:	2264      	movs	r2, #100	; 0x64
 80020f2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020f4:	4b16      	ldr	r3, [pc, #88]	; (8002150 <_ZL12MX_TIM6_Initv+0x78>)
 80020f6:	2200      	movs	r2, #0
 80020f8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80020fa:	4b15      	ldr	r3, [pc, #84]	; (8002150 <_ZL12MX_TIM6_Initv+0x78>)
 80020fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002100:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002102:	4b13      	ldr	r3, [pc, #76]	; (8002150 <_ZL12MX_TIM6_Initv+0x78>)
 8002104:	2200      	movs	r2, #0
 8002106:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002108:	4811      	ldr	r0, [pc, #68]	; (8002150 <_ZL12MX_TIM6_Initv+0x78>)
 800210a:	f002 fa5f 	bl	80045cc <HAL_TIM_Base_Init>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	bf14      	ite	ne
 8002114:	2301      	movne	r3, #1
 8002116:	2300      	moveq	r3, #0
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 800211e:	f000 f939 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	4619      	mov	r1, r3
 800212e:	4808      	ldr	r0, [pc, #32]	; (8002150 <_ZL12MX_TIM6_Initv+0x78>)
 8002130:	f003 fc74 	bl	8005a1c <HAL_TIMEx_MasterConfigSynchronization>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf14      	ite	ne
 800213a:	2301      	movne	r3, #1
 800213c:	2300      	moveq	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8002144:	f000 f926 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002148:	bf00      	nop
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	20000184 	.word	0x20000184
 8002154:	40001000 	.word	0x40001000

08002158 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b09c      	sub	sp, #112	; 0x70
 800215c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800215e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800216c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	605a      	str	r2, [r3, #4]
 8002176:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002178:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
 8002182:	609a      	str	r2, [r3, #8]
 8002184:	60da      	str	r2, [r3, #12]
 8002186:	611a      	str	r2, [r3, #16]
 8002188:	615a      	str	r2, [r3, #20]
 800218a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800218c:	1d3b      	adds	r3, r7, #4
 800218e:	2234      	movs	r2, #52	; 0x34
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f004 f844 	bl	8006220 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002198:	4b55      	ldr	r3, [pc, #340]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 800219a:	4a56      	ldr	r2, [pc, #344]	; (80022f4 <_ZL12MX_TIM8_Initv+0x19c>)
 800219c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 260;
 800219e:	4b54      	ldr	r3, [pc, #336]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 80021a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80021a4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a6:	4b52      	ldr	r3, [pc, #328]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80021ac:	4b50      	ldr	r3, [pc, #320]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 80021ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b4:	4b4e      	ldr	r3, [pc, #312]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80021ba:	4b4d      	ldr	r3, [pc, #308]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 80021bc:	2200      	movs	r2, #0
 80021be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c0:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80021c6:	484a      	ldr	r0, [pc, #296]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 80021c8:	f002 fa00 	bl	80045cc <HAL_TIM_Base_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	bf14      	ite	ne
 80021d2:	2301      	movne	r3, #1
 80021d4:	2300      	moveq	r3, #0
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 80021dc:	f000 f8da 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80021e6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021ea:	4619      	mov	r1, r3
 80021ec:	4840      	ldr	r0, [pc, #256]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 80021ee:	f002 fe9f 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	bf14      	ite	ne
 80021f8:	2301      	movne	r3, #1
 80021fa:	2300      	moveq	r3, #0
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <_ZL12MX_TIM8_Initv+0xae>
  {
    Error_Handler();
 8002202:	f000 f8c7 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002206:	483a      	ldr	r0, [pc, #232]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 8002208:	f002 fa37 	bl	800467a <HAL_TIM_PWM_Init>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	bf14      	ite	ne
 8002212:	2301      	movne	r3, #1
 8002214:	2300      	moveq	r3, #0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <_ZL12MX_TIM8_Initv+0xc8>
  {
    Error_Handler();
 800221c:	f000 f8ba 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002220:	2300      	movs	r3, #0
 8002222:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002224:	2300      	movs	r3, #0
 8002226:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002228:	2300      	movs	r3, #0
 800222a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800222c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002230:	4619      	mov	r1, r3
 8002232:	482f      	ldr	r0, [pc, #188]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 8002234:	f003 fbf2 	bl	8005a1c <HAL_TIMEx_MasterConfigSynchronization>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	bf14      	ite	ne
 800223e:	2301      	movne	r3, #1
 8002240:	2300      	moveq	r3, #0
 8002242:	b2db      	uxtb	r3, r3
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <_ZL12MX_TIM8_Initv+0xf4>
  {
    Error_Handler();
 8002248:	f000 f8a4 	bl	8002394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800224c:	2360      	movs	r3, #96	; 0x60
 800224e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002250:	2300      	movs	r3, #0
 8002252:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002254:	2300      	movs	r3, #0
 8002256:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002258:	2300      	movs	r3, #0
 800225a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002260:	2300      	movs	r3, #0
 8002262:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002268:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800226c:	2200      	movs	r2, #0
 800226e:	4619      	mov	r1, r3
 8002270:	481f      	ldr	r0, [pc, #124]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 8002272:	f002 fd49 	bl	8004d08 <HAL_TIM_PWM_ConfigChannel>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	d001      	beq.n	800228a <_ZL12MX_TIM8_Initv+0x132>
  {
    Error_Handler();
 8002286:	f000 f885 	bl	8002394 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800228a:	2300      	movs	r3, #0
 800228c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002292:	2300      	movs	r3, #0
 8002294:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800229e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80022a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80022a8:	2300      	movs	r3, #0
 80022aa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80022ac:	2300      	movs	r3, #0
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80022b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80022b6:	2300      	movs	r3, #0
 80022b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80022ba:	2300      	movs	r3, #0
 80022bc:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022be:	2300      	movs	r3, #0
 80022c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	4619      	mov	r1, r3
 80022c6:	480a      	ldr	r0, [pc, #40]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 80022c8:	f003 fc2a 	bl	8005b20 <HAL_TIMEx_ConfigBreakDeadTime>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	bf14      	ite	ne
 80022d2:	2301      	movne	r3, #1
 80022d4:	2300      	moveq	r3, #0
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <_ZL12MX_TIM8_Initv+0x188>
  {
    Error_Handler();
 80022dc:	f000 f85a 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80022e0:	4803      	ldr	r0, [pc, #12]	; (80022f0 <_ZL12MX_TIM8_Initv+0x198>)
 80022e2:	f000 f987 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 80022e6:	bf00      	nop
 80022e8:	3770      	adds	r7, #112	; 0x70
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	200001d0 	.word	0x200001d0
 80022f4:	40013400 	.word	0x40013400

080022f8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <_ZL12MX_GPIO_Initv+0x98>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	4a1f      	ldr	r2, [pc, #124]	; (8002390 <_ZL12MX_GPIO_Initv+0x98>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <_ZL12MX_GPIO_Initv+0x98>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	60bb      	str	r3, [r7, #8]
 8002324:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002326:	4b1a      	ldr	r3, [pc, #104]	; (8002390 <_ZL12MX_GPIO_Initv+0x98>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	4a19      	ldr	r2, [pc, #100]	; (8002390 <_ZL12MX_GPIO_Initv+0x98>)
 800232c:	f043 0302 	orr.w	r3, r3, #2
 8002330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <_ZL12MX_GPIO_Initv+0x98>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	607b      	str	r3, [r7, #4]
 800233c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 800233e:	2200      	movs	r2, #0
 8002340:	2193      	movs	r1, #147	; 0x93
 8002342:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002346:	f001 f98f 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800234a:	2313      	movs	r3, #19
 800234c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800234e:	2301      	movs	r3, #1
 8002350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235a:	f107 030c 	add.w	r3, r7, #12
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002364:	f000 fffe 	bl	8003364 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800236c:	2311      	movs	r3, #17
 800236e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002374:	2300      	movs	r3, #0
 8002376:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002378:	f107 030c 	add.w	r3, r7, #12
 800237c:	4619      	mov	r1, r3
 800237e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002382:	f000 ffef 	bl	8003364 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002386:	bf00      	nop
 8002388:	3720      	adds	r7, #32
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000

08002394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002398:	b672      	cpsid	i
}
 800239a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800239c:	e7fe      	b.n	800239c <Error_Handler+0x8>
	...

080023a0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d110      	bne.n	80023d2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d10b      	bne.n	80023d2 <_Z41__static_initialization_and_destruction_0ii+0x32>
Stepper stepper0;
 80023ba:	4812      	ldr	r0, [pc, #72]	; (8002404 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80023bc:	f7ff f954 	bl	8001668 <_ZN7StepperC1Ev>
Stepper stepper1;
 80023c0:	4811      	ldr	r0, [pc, #68]	; (8002408 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80023c2:	f7ff f951 	bl	8001668 <_ZN7StepperC1Ev>
Stepper stepper2;
 80023c6:	4811      	ldr	r0, [pc, #68]	; (800240c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80023c8:	f7ff f94e 	bl	8001668 <_ZN7StepperC1Ev>
HolonomicDrive3 holo_drive;
 80023cc:	4810      	ldr	r0, [pc, #64]	; (8002410 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80023ce:	f7ff f89b 	bl	8001508 <_ZN15HolonomicDrive3C1Ev>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d110      	bne.n	80023fa <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023de:	4293      	cmp	r3, r2
 80023e0:	d10b      	bne.n	80023fa <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80023e2:	480b      	ldr	r0, [pc, #44]	; (8002410 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80023e4:	f7ff f8b0 	bl	8001548 <_ZN15HolonomicDrive3D1Ev>
Stepper stepper2;
 80023e8:	4808      	ldr	r0, [pc, #32]	; (800240c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80023ea:	f7ff f9ef 	bl	80017cc <_ZN7StepperD1Ev>
Stepper stepper1;
 80023ee:	4806      	ldr	r0, [pc, #24]	; (8002408 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80023f0:	f7ff f9ec 	bl	80017cc <_ZN7StepperD1Ev>
Stepper stepper0;
 80023f4:	4803      	ldr	r0, [pc, #12]	; (8002404 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80023f6:	f7ff f9e9 	bl	80017cc <_ZN7StepperD1Ev>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	2000021c 	.word	0x2000021c
 8002408:	2000027c 	.word	0x2000027c
 800240c:	200002dc 	.word	0x200002dc
 8002410:	2000033c 	.word	0x2000033c

08002414 <_GLOBAL__sub_I_hfdcan1>:
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
 8002418:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800241c:	2001      	movs	r0, #1
 800241e:	f7ff ffbf 	bl	80023a0 <_Z41__static_initialization_and_destruction_0ii>
 8002422:	bd80      	pop	{r7, pc}

08002424 <_GLOBAL__sub_D_hfdcan1>:
 8002424:	b580      	push	{r7, lr}
 8002426:	af00      	add	r7, sp, #0
 8002428:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800242c:	2000      	movs	r0, #0
 800242e:	f7ff ffb7 	bl	80023a0 <_Z41__static_initialization_and_destruction_0ii>
 8002432:	bd80      	pop	{r7, pc}

08002434 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	4b0f      	ldr	r3, [pc, #60]	; (8002478 <HAL_MspInit+0x44>)
 800243c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800243e:	4a0e      	ldr	r2, [pc, #56]	; (8002478 <HAL_MspInit+0x44>)
 8002440:	f043 0301 	orr.w	r3, r3, #1
 8002444:	6613      	str	r3, [r2, #96]	; 0x60
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <HAL_MspInit+0x44>)
 8002448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_MspInit+0x44>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <HAL_MspInit+0x44>)
 8002458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800245c:	6593      	str	r3, [r2, #88]	; 0x58
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_MspInit+0x44>)
 8002460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800246a:	f001 f9b9 	bl	80037e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800246e:	bf00      	nop
 8002470:	3708      	adds	r7, #8
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}
 8002476:	bf00      	nop
 8002478:	40021000 	.word	0x40021000

0800247c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b09a      	sub	sp, #104	; 0x68
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002494:	f107 0310 	add.w	r3, r7, #16
 8002498:	2244      	movs	r2, #68	; 0x44
 800249a:	2100      	movs	r1, #0
 800249c:	4618      	mov	r0, r3
 800249e:	f003 febf 	bl	8006220 <memset>
  if(hfdcan->Instance==FDCAN1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a20      	ldr	r2, [pc, #128]	; (8002528 <HAL_FDCAN_MspInit+0xac>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d139      	bne.n	8002520 <HAL_FDCAN_MspInit+0xa4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80024ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024b0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80024b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024b6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024b8:	f107 0310 	add.w	r3, r7, #16
 80024bc:	4618      	mov	r0, r3
 80024be:	f001 fe95 	bl	80041ec <HAL_RCCEx_PeriphCLKConfig>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80024c8:	f7ff ff64 	bl	8002394 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80024cc:	4b17      	ldr	r3, [pc, #92]	; (800252c <HAL_FDCAN_MspInit+0xb0>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	4a16      	ldr	r2, [pc, #88]	; (800252c <HAL_FDCAN_MspInit+0xb0>)
 80024d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024d6:	6593      	str	r3, [r2, #88]	; 0x58
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <HAL_FDCAN_MspInit+0xb0>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e0:	60fb      	str	r3, [r7, #12]
 80024e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024e4:	4b11      	ldr	r3, [pc, #68]	; (800252c <HAL_FDCAN_MspInit+0xb0>)
 80024e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e8:	4a10      	ldr	r2, [pc, #64]	; (800252c <HAL_FDCAN_MspInit+0xb0>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <HAL_FDCAN_MspInit+0xb0>)
 80024f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f4:	f003 0301 	and.w	r3, r3, #1
 80024f8:	60bb      	str	r3, [r7, #8]
 80024fa:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80024fc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002500:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002502:	2302      	movs	r3, #2
 8002504:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250a:	2300      	movs	r3, #0
 800250c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800250e:	2309      	movs	r3, #9
 8002510:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002512:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002516:	4619      	mov	r1, r3
 8002518:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800251c:	f000 ff22 	bl	8003364 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8002520:	bf00      	nop
 8002522:	3768      	adds	r7, #104	; 0x68
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	40006400 	.word	0x40006400
 800252c:	40021000 	.word	0x40021000

08002530 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_TIM_Base_MspInit+0xb0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d10c      	bne.n	800255c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002542:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002546:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002548:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800254c:	6613      	str	r3, [r2, #96]	; 0x60
 800254e:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800255a:	e03c      	b.n	80025d6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a21      	ldr	r2, [pc, #132]	; (80025e8 <HAL_TIM_Base_MspInit+0xb8>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d10c      	bne.n	8002580 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <HAL_TIM_Base_MspInit+0xb4>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	6593      	str	r3, [r2, #88]	; 0x58
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]
}
 800257e:	e02a      	b.n	80025d6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a19      	ldr	r2, [pc, #100]	; (80025ec <HAL_TIM_Base_MspInit+0xbc>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d114      	bne.n	80025b4 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <HAL_TIM_Base_MspInit+0xb4>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	4a15      	ldr	r2, [pc, #84]	; (80025e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002590:	f043 0310 	orr.w	r3, r3, #16
 8002594:	6593      	str	r3, [r2, #88]	; 0x58
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_TIM_Base_MspInit+0xb4>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	f003 0310 	and.w	r3, r3, #16
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	2036      	movs	r0, #54	; 0x36
 80025a8:	f000 fb29 	bl	8002bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025ac:	2036      	movs	r0, #54	; 0x36
 80025ae:	f000 fb40 	bl	8002c32 <HAL_NVIC_EnableIRQ>
}
 80025b2:	e010      	b.n	80025d6 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <HAL_TIM_Base_MspInit+0xc0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10b      	bne.n	80025d6 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_TIM_Base_MspInit+0xb4>)
 80025c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c2:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <HAL_TIM_Base_MspInit+0xb4>)
 80025c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025c8:	6613      	str	r3, [r2, #96]	; 0x60
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_TIM_Base_MspInit+0xb4>)
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40000800 	.word	0x40000800
 80025ec:	40001000 	.word	0x40001000
 80025f0:	40013400 	.word	0x40013400

080025f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a35      	ldr	r2, [pc, #212]	; (80026e8 <HAL_TIM_MspPostInit+0xf4>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d11e      	bne.n	8002654 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	4b35      	ldr	r3, [pc, #212]	; (80026ec <HAL_TIM_MspPostInit+0xf8>)
 8002618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261a:	4a34      	ldr	r2, [pc, #208]	; (80026ec <HAL_TIM_MspPostInit+0xf8>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002622:	4b32      	ldr	r3, [pc, #200]	; (80026ec <HAL_TIM_MspPostInit+0xf8>)
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	613b      	str	r3, [r7, #16]
 800262c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800262e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002632:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002634:	2302      	movs	r3, #2
 8002636:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002638:	2302      	movs	r3, #2
 800263a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002640:	2306      	movs	r3, #6
 8002642:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002644:	f107 0314 	add.w	r3, r7, #20
 8002648:	4619      	mov	r1, r3
 800264a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264e:	f000 fe89 	bl	8003364 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002652:	e044      	b.n	80026de <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM4)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a25      	ldr	r2, [pc, #148]	; (80026f0 <HAL_TIM_MspPostInit+0xfc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d11c      	bne.n	8002698 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800265e:	4b23      	ldr	r3, [pc, #140]	; (80026ec <HAL_TIM_MspPostInit+0xf8>)
 8002660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002662:	4a22      	ldr	r2, [pc, #136]	; (80026ec <HAL_TIM_MspPostInit+0xf8>)
 8002664:	f043 0302 	orr.w	r3, r3, #2
 8002668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800266a:	4b20      	ldr	r3, [pc, #128]	; (80026ec <HAL_TIM_MspPostInit+0xf8>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002676:	2380      	movs	r3, #128	; 0x80
 8002678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800267e:	2302      	movs	r3, #2
 8002680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002682:	2300      	movs	r3, #0
 8002684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002686:	2302      	movs	r3, #2
 8002688:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800268a:	f107 0314 	add.w	r3, r7, #20
 800268e:	4619      	mov	r1, r3
 8002690:	4818      	ldr	r0, [pc, #96]	; (80026f4 <HAL_TIM_MspPostInit+0x100>)
 8002692:	f000 fe67 	bl	8003364 <HAL_GPIO_Init>
}
 8002696:	e022      	b.n	80026de <HAL_TIM_MspPostInit+0xea>
  else if(htim->Instance==TIM8)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a16      	ldr	r2, [pc, #88]	; (80026f8 <HAL_TIM_MspPostInit+0x104>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d11d      	bne.n	80026de <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_TIM_MspPostInit+0xf8>)
 80026a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a6:	4a11      	ldr	r2, [pc, #68]	; (80026ec <HAL_TIM_MspPostInit+0xf8>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026ae:	4b0f      	ldr	r3, [pc, #60]	; (80026ec <HAL_TIM_MspPostInit+0xf8>)
 80026b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	60bb      	str	r3, [r7, #8]
 80026b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c0:	2302      	movs	r3, #2
 80026c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80026c4:	2302      	movs	r3, #2
 80026c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80026cc:	2302      	movs	r3, #2
 80026ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	4619      	mov	r1, r3
 80026d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026da:	f000 fe43 	bl	8003364 <HAL_GPIO_Init>
}
 80026de:	bf00      	nop
 80026e0:	3728      	adds	r7, #40	; 0x28
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40012c00 	.word	0x40012c00
 80026ec:	40021000 	.word	0x40021000
 80026f0:	40000800 	.word	0x40000800
 80026f4:	48000400 	.word	0x48000400
 80026f8:	40013400 	.word	0x40013400

080026fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002700:	e7fe      	b.n	8002700 <NMI_Handler+0x4>

08002702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002702:	b480      	push	{r7}
 8002704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002706:	e7fe      	b.n	8002706 <HardFault_Handler+0x4>

08002708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800270c:	e7fe      	b.n	800270c <MemManage_Handler+0x4>

0800270e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800270e:	b480      	push	{r7}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002712:	e7fe      	b.n	8002712 <BusFault_Handler+0x4>

08002714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002718:	e7fe      	b.n	8002718 <UsageFault_Handler+0x4>

0800271a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002736:	b480      	push	{r7}
 8002738:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002748:	f000 f93e 	bl	80029c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}

08002750 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002754:	4802      	ldr	r0, [pc, #8]	; (8002760 <TIM6_DAC_IRQHandler+0x10>)
 8002756:	f002 f987 	bl	8004a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000184 	.word	0x20000184

08002764 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b086      	sub	sp, #24
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
 8002774:	e00a      	b.n	800278c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002776:	f3af 8000 	nop.w
 800277a:	4601      	mov	r1, r0
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	60ba      	str	r2, [r7, #8]
 8002782:	b2ca      	uxtb	r2, r1
 8002784:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	3301      	adds	r3, #1
 800278a:	617b      	str	r3, [r7, #20]
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	429a      	cmp	r2, r3
 8002792:	dbf0      	blt.n	8002776 <_read+0x12>
  }

  return len;
 8002794:	687b      	ldr	r3, [r7, #4]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3718      	adds	r7, #24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}

0800279e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800279e:	b580      	push	{r7, lr}
 80027a0:	b086      	sub	sp, #24
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	60f8      	str	r0, [r7, #12]
 80027a6:	60b9      	str	r1, [r7, #8]
 80027a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	617b      	str	r3, [r7, #20]
 80027ae:	e009      	b.n	80027c4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	60ba      	str	r2, [r7, #8]
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	3301      	adds	r3, #1
 80027c2:	617b      	str	r3, [r7, #20]
 80027c4:	697a      	ldr	r2, [r7, #20]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	dbf1      	blt.n	80027b0 <_write+0x12>
  }
  return len;
 80027cc:	687b      	ldr	r3, [r7, #4]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}

080027d6 <_close>:

int _close(int file)
{
 80027d6:	b480      	push	{r7}
 80027d8:	b083      	sub	sp, #12
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027fe:	605a      	str	r2, [r3, #4]
  return 0;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <_isatty>:

int _isatty(int file)
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002816:	2301      	movs	r3, #1
}
 8002818:	4618      	mov	r0, r3
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3714      	adds	r7, #20
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
	...

08002840 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b086      	sub	sp, #24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002848:	4a14      	ldr	r2, [pc, #80]	; (800289c <_sbrk+0x5c>)
 800284a:	4b15      	ldr	r3, [pc, #84]	; (80028a0 <_sbrk+0x60>)
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002854:	4b13      	ldr	r3, [pc, #76]	; (80028a4 <_sbrk+0x64>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d102      	bne.n	8002862 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800285c:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <_sbrk+0x64>)
 800285e:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <_sbrk+0x68>)
 8002860:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002862:	4b10      	ldr	r3, [pc, #64]	; (80028a4 <_sbrk+0x64>)
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4413      	add	r3, r2
 800286a:	693a      	ldr	r2, [r7, #16]
 800286c:	429a      	cmp	r2, r3
 800286e:	d207      	bcs.n	8002880 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002870:	f003 fd34 	bl	80062dc <__errno>
 8002874:	4603      	mov	r3, r0
 8002876:	220c      	movs	r2, #12
 8002878:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800287e:	e009      	b.n	8002894 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002886:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <_sbrk+0x64>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4413      	add	r3, r2
 800288e:	4a05      	ldr	r2, [pc, #20]	; (80028a4 <_sbrk+0x64>)
 8002890:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002892:	68fb      	ldr	r3, [r7, #12]
}
 8002894:	4618      	mov	r0, r3
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	20008000 	.word	0x20008000
 80028a0:	00000400 	.word	0x00000400
 80028a4:	200004bc 	.word	0x200004bc
 80028a8:	20000610 	.word	0x20000610

080028ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <SystemInit+0x20>)
 80028b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <SystemInit+0x20>)
 80028b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	e000ed00 	.word	0xe000ed00

080028d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028d0:	480d      	ldr	r0, [pc, #52]	; (8002908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028d2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80028d4:	f7ff ffea 	bl	80028ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028d8:	480c      	ldr	r0, [pc, #48]	; (800290c <LoopForever+0x6>)
  ldr r1, =_edata
 80028da:	490d      	ldr	r1, [pc, #52]	; (8002910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <LoopForever+0xe>)
  movs r3, #0
 80028de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028e0:	e002      	b.n	80028e8 <LoopCopyDataInit>

080028e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028e6:	3304      	adds	r3, #4

080028e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028ec:	d3f9      	bcc.n	80028e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f0:	4c0a      	ldr	r4, [pc, #40]	; (800291c <LoopForever+0x16>)
  movs r3, #0
 80028f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f4:	e001      	b.n	80028fa <LoopFillZerobss>

080028f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028f8:	3204      	adds	r2, #4

080028fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028fc:	d3fb      	bcc.n	80028f6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80028fe:	f003 fcf3 	bl	80062e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002902:	f7ff f879 	bl	80019f8 <main>

08002906 <LoopForever>:

LoopForever:
    b LoopForever
 8002906:	e7fe      	b.n	8002906 <LoopForever>
  ldr   r0, =_estack
 8002908:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002914:	08006700 	.word	0x08006700
  ldr r2, =_sbss
 8002918:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800291c:	20000610 	.word	0x20000610

08002920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC1_2_IRQHandler>

08002922 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292c:	2003      	movs	r0, #3
 800292e:	f000 f95b 	bl	8002be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002932:	200f      	movs	r0, #15
 8002934:	f000 f80e 	bl	8002954 <HAL_InitTick>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	71fb      	strb	r3, [r7, #7]
 8002942:	e001      	b.n	8002948 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002944:	f7ff fd76 	bl	8002434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002948:	79fb      	ldrb	r3, [r7, #7]

}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b084      	sub	sp, #16
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002960:	4b16      	ldr	r3, [pc, #88]	; (80029bc <HAL_InitTick+0x68>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d022      	beq.n	80029ae <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002968:	4b15      	ldr	r3, [pc, #84]	; (80029c0 <HAL_InitTick+0x6c>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	4b13      	ldr	r3, [pc, #76]	; (80029bc <HAL_InitTick+0x68>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002974:	fbb1 f3f3 	udiv	r3, r1, r3
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	4618      	mov	r0, r3
 800297e:	f000 f966 	bl	8002c4e <HAL_SYSTICK_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d10f      	bne.n	80029a8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b0f      	cmp	r3, #15
 800298c:	d809      	bhi.n	80029a2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800298e:	2200      	movs	r2, #0
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002996:	f000 f932 	bl	8002bfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <HAL_InitTick+0x70>)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	e007      	b.n	80029b2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
 80029a6:	e004      	b.n	80029b2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e001      	b.n	80029b2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	20000008 	.word	0x20000008
 80029c0:	20000000 	.word	0x20000000
 80029c4:	20000004 	.word	0x20000004

080029c8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029cc:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_IncTick+0x1c>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_IncTick+0x20>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4413      	add	r3, r2
 80029d6:	4a03      	ldr	r2, [pc, #12]	; (80029e4 <HAL_IncTick+0x1c>)
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	200004c0 	.word	0x200004c0
 80029e8:	20000008 	.word	0x20000008

080029ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  return uwTick;
 80029f0:	4b03      	ldr	r3, [pc, #12]	; (8002a00 <HAL_GetTick+0x14>)
 80029f2:	681b      	ldr	r3, [r3, #0]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
 80029fe:	bf00      	nop
 8002a00:	200004c0 	.word	0x200004c0

08002a04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff ffee 	bl	80029ec <HAL_GetTick>
 8002a10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a1c:	d004      	beq.n	8002a28 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a1e:	4b09      	ldr	r3, [pc, #36]	; (8002a44 <HAL_Delay+0x40>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4413      	add	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a28:	bf00      	nop
 8002a2a:	f7ff ffdf 	bl	80029ec <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d8f7      	bhi.n	8002a2a <HAL_Delay+0x26>
  {
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	bf00      	nop
 8002a3e:	3710      	adds	r7, #16
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	20000008 	.word	0x20000008

08002a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f003 0307 	and.w	r3, r3, #7
 8002a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a58:	4b0c      	ldr	r3, [pc, #48]	; (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a64:	4013      	ands	r3, r2
 8002a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a7a:	4a04      	ldr	r2, [pc, #16]	; (8002a8c <__NVIC_SetPriorityGrouping+0x44>)
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	60d3      	str	r3, [r2, #12]
}
 8002a80:	bf00      	nop
 8002a82:	3714      	adds	r7, #20
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a94:	4b04      	ldr	r3, [pc, #16]	; (8002aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	f003 0307 	and.w	r3, r3, #7
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	db0b      	blt.n	8002ad6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002abe:	79fb      	ldrb	r3, [r7, #7]
 8002ac0:	f003 021f 	and.w	r2, r3, #31
 8002ac4:	4907      	ldr	r1, [pc, #28]	; (8002ae4 <__NVIC_EnableIRQ+0x38>)
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2001      	movs	r0, #1
 8002ace:	fa00 f202 	lsl.w	r2, r0, r2
 8002ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	e000e100 	.word	0xe000e100

08002ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	4603      	mov	r3, r0
 8002af0:	6039      	str	r1, [r7, #0]
 8002af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	db0a      	blt.n	8002b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	490c      	ldr	r1, [pc, #48]	; (8002b34 <__NVIC_SetPriority+0x4c>)
 8002b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b06:	0112      	lsls	r2, r2, #4
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	440b      	add	r3, r1
 8002b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b10:	e00a      	b.n	8002b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	4908      	ldr	r1, [pc, #32]	; (8002b38 <__NVIC_SetPriority+0x50>)
 8002b18:	79fb      	ldrb	r3, [r7, #7]
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	3b04      	subs	r3, #4
 8002b20:	0112      	lsls	r2, r2, #4
 8002b22:	b2d2      	uxtb	r2, r2
 8002b24:	440b      	add	r3, r1
 8002b26:	761a      	strb	r2, [r3, #24]
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr
 8002b34:	e000e100 	.word	0xe000e100
 8002b38:	e000ed00 	.word	0xe000ed00

08002b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b089      	sub	sp, #36	; 0x24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f003 0307 	and.w	r3, r3, #7
 8002b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f1c3 0307 	rsb	r3, r3, #7
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	bf28      	it	cs
 8002b5a:	2304      	movcs	r3, #4
 8002b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	3304      	adds	r3, #4
 8002b62:	2b06      	cmp	r3, #6
 8002b64:	d902      	bls.n	8002b6c <NVIC_EncodePriority+0x30>
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	3b03      	subs	r3, #3
 8002b6a:	e000      	b.n	8002b6e <NVIC_EncodePriority+0x32>
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43da      	mvns	r2, r3
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	401a      	ands	r2, r3
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43d9      	mvns	r1, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b94:	4313      	orrs	r3, r2
         );
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3724      	adds	r7, #36	; 0x24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b082      	sub	sp, #8
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bb4:	d301      	bcc.n	8002bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00f      	b.n	8002bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bba:	4a0a      	ldr	r2, [pc, #40]	; (8002be4 <SysTick_Config+0x40>)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bc2:	210f      	movs	r1, #15
 8002bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bc8:	f7ff ff8e 	bl	8002ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bcc:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <SysTick_Config+0x40>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bd2:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <SysTick_Config+0x40>)
 8002bd4:	2207      	movs	r2, #7
 8002bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	e000e010 	.word	0xe000e010

08002be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7ff ff29 	bl	8002a48 <__NVIC_SetPriorityGrouping>
}
 8002bf6:	bf00      	nop
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b086      	sub	sp, #24
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c0c:	f7ff ff40 	bl	8002a90 <__NVIC_GetPriorityGrouping>
 8002c10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	6978      	ldr	r0, [r7, #20]
 8002c18:	f7ff ff90 	bl	8002b3c <NVIC_EncodePriority>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c22:	4611      	mov	r1, r2
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff5f 	bl	8002ae8 <__NVIC_SetPriority>
}
 8002c2a:	bf00      	nop
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	4603      	mov	r3, r0
 8002c3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7ff ff33 	bl	8002aac <__NVIC_EnableIRQ>
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b082      	sub	sp, #8
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff ffa4 	bl	8002ba4 <SysTick_Config>
 8002c5c:	4603      	mov	r3, r0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
	...

08002c68 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e147      	b.n	8002f0a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7ff fbf4 	bl	800247c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	699a      	ldr	r2, [r3, #24]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0210 	bic.w	r2, r2, #16
 8002ca2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca4:	f7ff fea2 	bl	80029ec <HAL_GetTick>
 8002ca8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002caa:	e012      	b.n	8002cd2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002cac:	f7ff fe9e 	bl	80029ec <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b0a      	cmp	r3, #10
 8002cb8:	d90b      	bls.n	8002cd2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cbe:	f043 0201 	orr.w	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2203      	movs	r2, #3
 8002cca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e11b      	b.n	8002f0a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	699b      	ldr	r3, [r3, #24]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d0e5      	beq.n	8002cac <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	699a      	ldr	r2, [r3, #24]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f042 0201 	orr.w	r2, r2, #1
 8002cee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cf0:	f7ff fe7c 	bl	80029ec <HAL_GetTick>
 8002cf4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002cf6:	e012      	b.n	8002d1e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8002cf8:	f7ff fe78 	bl	80029ec <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b0a      	cmp	r3, #10
 8002d04:	d90b      	bls.n	8002d1e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0a:	f043 0201 	orr.w	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2203      	movs	r2, #3
 8002d16:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e0f5      	b.n	8002f0a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0301 	and.w	r3, r3, #1
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0e5      	beq.n	8002cf8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	699a      	ldr	r2, [r3, #24]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f042 0202 	orr.w	r2, r2, #2
 8002d3a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a74      	ldr	r2, [pc, #464]	; (8002f14 <HAL_FDCAN_Init+0x2ac>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d103      	bne.n	8002d4e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8002d46:	4a74      	ldr	r2, [pc, #464]	; (8002f18 <HAL_FDCAN_Init+0x2b0>)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	7c1b      	ldrb	r3, [r3, #16]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d108      	bne.n	8002d68 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699a      	ldr	r2, [r3, #24]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d64:	619a      	str	r2, [r3, #24]
 8002d66:	e007      	b.n	8002d78 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699a      	ldr	r2, [r3, #24]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d76:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	7c5b      	ldrb	r3, [r3, #17]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d108      	bne.n	8002d92 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d8e:	619a      	str	r2, [r3, #24]
 8002d90:	e007      	b.n	8002da2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	699a      	ldr	r2, [r3, #24]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002da0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	7c9b      	ldrb	r3, [r3, #18]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d108      	bne.n	8002dbc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699a      	ldr	r2, [r3, #24]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002db8:	619a      	str	r2, [r3, #24]
 8002dba:	e007      	b.n	8002dcc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699a      	ldr	r2, [r3, #24]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dca:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689a      	ldr	r2, [r3, #8]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	430a      	orrs	r2, r1
 8002de0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8002df0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0210 	bic.w	r2, r2, #16
 8002e00:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d108      	bne.n	8002e1c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699a      	ldr	r2, [r3, #24]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f042 0204 	orr.w	r2, r2, #4
 8002e18:	619a      	str	r2, [r3, #24]
 8002e1a:	e02c      	b.n	8002e76 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d028      	beq.n	8002e76 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d01c      	beq.n	8002e66 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e3a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0210 	orr.w	r2, r2, #16
 8002e4a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	2b03      	cmp	r3, #3
 8002e52:	d110      	bne.n	8002e76 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f042 0220 	orr.w	r2, r2, #32
 8002e62:	619a      	str	r2, [r3, #24]
 8002e64:	e007      	b.n	8002e76 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699a      	ldr	r2, [r3, #24]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0220 	orr.w	r2, r2, #32
 8002e74:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69db      	ldr	r3, [r3, #28]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e86:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8002e8e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8002e9e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8002ea0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eaa:	d115      	bne.n	8002ed8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002eba:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	3b01      	subs	r3, #1
 8002ec2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8002ec4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8002ed4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8002ed6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f966 	bl	80031c0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40006400 	.word	0x40006400
 8002f18:	40006500 	.word	0x40006500

08002f1c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d110      	bne.n	8002f52 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699a      	ldr	r2, [r3, #24]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e006      	b.n	8002f60 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f56:	f043 0204 	orr.w	r2, r3, #4
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d12c      	bne.n	8002fde <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d007      	beq.n	8002fa4 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e023      	b.n	8002fec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	f003 0303 	and.w	r3, r3, #3
 8002fb2:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f956 	bl	800326c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fcc:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e006      	b.n	8002fec <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe2:	f043 0208 	orr.w	r2, r3, #8
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
  }
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3718      	adds	r7, #24
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003006:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003008:	7dfb      	ldrb	r3, [r7, #23]
 800300a:	2b01      	cmp	r3, #1
 800300c:	d003      	beq.n	8003016 <HAL_FDCAN_ActivateNotification+0x22>
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	2b02      	cmp	r3, #2
 8003012:	f040 80c8 	bne.w	80031a6 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800301c:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f003 0307 	and.w	r3, r3, #7
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	2b00      	cmp	r3, #0
 8003030:	d03b      	beq.n	80030aa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8003038:	2b00      	cmp	r3, #0
 800303a:	d004      	beq.n	8003046 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d031      	beq.n	80030aa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800304c:	2b00      	cmp	r3, #0
 800304e:	d004      	beq.n	800305a <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	f003 0304 	and.w	r3, r3, #4
 8003056:	2b00      	cmp	r3, #0
 8003058:	d027      	beq.n	80030aa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8003060:	2b00      	cmp	r3, #0
 8003062:	d004      	beq.n	800306e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01d      	beq.n	80030aa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8003074:	2b00      	cmp	r3, #0
 8003076:	d004      	beq.n	8003082 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d013      	beq.n	80030aa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003088:	2b00      	cmp	r3, #0
 800308a:	d004      	beq.n	8003096 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d009      	beq.n	80030aa <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00c      	beq.n	80030ba <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d107      	bne.n	80030ba <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d004      	beq.n	80030ce <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d13b      	bne.n	8003146 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d004      	beq.n	80030e2 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d131      	bne.n	8003146 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	f003 0304 	and.w	r3, r3, #4
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d127      	bne.n	8003146 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d004      	beq.n	800310a <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	f003 0308 	and.w	r3, r3, #8
 8003106:	2b00      	cmp	r3, #0
 8003108:	d11d      	bne.n	8003146 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003110:	2b00      	cmp	r3, #0
 8003112:	d004      	beq.n	800311e <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b00      	cmp	r3, #0
 800311c:	d113      	bne.n	8003146 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	f003 0320 	and.w	r3, r3, #32
 800312e:	2b00      	cmp	r3, #0
 8003130:	d109      	bne.n	8003146 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00c      	beq.n	8003156 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003142:	2b00      	cmp	r3, #0
 8003144:	d007      	beq.n	8003156 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 0202 	orr.w	r2, r2, #2
 8003154:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315c:	2b00      	cmp	r3, #0
 800315e:	d009      	beq.n	8003174 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	430a      	orrs	r2, r1
 8003170:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800317a:	2b00      	cmp	r3, #0
 800317c:	d009      	beq.n	8003192 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	430a      	orrs	r2, r1
 800318e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68ba      	ldr	r2, [r7, #8]
 800319e:	430a      	orrs	r2, r1
 80031a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e006      	b.n	80031b4 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031aa:	f043 0202 	orr.w	r2, r3, #2
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80031c8:	4b27      	ldr	r3, [pc, #156]	; (8003268 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80031ca:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68ba      	ldr	r2, [r7, #8]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031da:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e2:	041a      	lsls	r2, r3, #16
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003200:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003208:	061a      	lsls	r2, r3, #24
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	e005      	b.n	800324e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	3304      	adds	r3, #4
 800324c:	60fb      	str	r3, [r7, #12]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	429a      	cmp	r2, r3
 8003258:	d3f3      	bcc.n	8003242 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800325a:	bf00      	nop
 800325c:	bf00      	nop
 800325e:	3714      	adds	r7, #20
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	4000a400 	.word	0x4000a400

0800326c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800326c:	b480      	push	{r7}
 800326e:	b089      	sub	sp, #36	; 0x24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10a      	bne.n	8003298 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800328a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003292:	4313      	orrs	r3, r2
 8003294:	61fb      	str	r3, [r7, #28]
 8003296:	e00a      	b.n	80032ae <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80032a0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80032a6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80032a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032ac:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	6a1b      	ldr	r3, [r3, #32]
 80032b2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80032b8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80032be:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80032c4:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80032cc:	4313      	orrs	r3, r2
 80032ce:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4413      	add	r3, r2
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	440b      	add	r3, r1
 80032e0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	69fa      	ldr	r2, [r7, #28]
 80032e6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	3304      	adds	r3, #4
 80032ec:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	3304      	adds	r3, #4
 80032f8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
 80032fe:	e020      	b.n	8003342 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	3303      	adds	r3, #3
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	3302      	adds	r3, #2
 8003310:	6879      	ldr	r1, [r7, #4]
 8003312:	440b      	add	r3, r1
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003318:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	3301      	adds	r3, #1
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	440b      	add	r3, r1
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8003326:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8003328:	6879      	ldr	r1, [r7, #4]
 800332a:	697a      	ldr	r2, [r7, #20]
 800332c:	440a      	add	r2, r1
 800332e:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8003330:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	3304      	adds	r3, #4
 800333a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	3304      	adds	r3, #4
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	4a06      	ldr	r2, [pc, #24]	; (8003360 <FDCAN_CopyMessageToRAM+0xf4>)
 8003348:	5cd3      	ldrb	r3, [r2, r3]
 800334a:	461a      	mov	r2, r3
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	4293      	cmp	r3, r2
 8003350:	d3d6      	bcc.n	8003300 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	3724      	adds	r7, #36	; 0x24
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr
 8003360:	080066e0 	.word	0x080066e0

08003364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003372:	e15a      	b.n	800362a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	2101      	movs	r1, #1
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	fa01 f303 	lsl.w	r3, r1, r3
 8003380:	4013      	ands	r3, r2
 8003382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2b00      	cmp	r3, #0
 8003388:	f000 814c 	beq.w	8003624 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	2b01      	cmp	r3, #1
 8003396:	d005      	beq.n	80033a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d130      	bne.n	8003406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	2203      	movs	r2, #3
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4013      	ands	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68da      	ldr	r2, [r3, #12]
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033da:	2201      	movs	r2, #1
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	fa02 f303 	lsl.w	r3, r2, r3
 80033e2:	43db      	mvns	r3, r3
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4013      	ands	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	f003 0201 	and.w	r2, r3, #1
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	fa02 f303 	lsl.w	r3, r2, r3
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	4313      	orrs	r3, r2
 80033fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	2b03      	cmp	r3, #3
 8003410:	d017      	beq.n	8003442 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	2203      	movs	r2, #3
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43db      	mvns	r3, r3
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	4013      	ands	r3, r2
 8003428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	fa02 f303 	lsl.w	r3, r2, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4313      	orrs	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	2b02      	cmp	r3, #2
 800344c:	d123      	bne.n	8003496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	08da      	lsrs	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3208      	adds	r2, #8
 8003456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800345a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f003 0307 	and.w	r3, r3, #7
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	220f      	movs	r2, #15
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	43db      	mvns	r3, r3
 800346c:	693a      	ldr	r2, [r7, #16]
 800346e:	4013      	ands	r3, r2
 8003470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	4313      	orrs	r3, r2
 8003486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	08da      	lsrs	r2, r3, #3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	3208      	adds	r2, #8
 8003490:	6939      	ldr	r1, [r7, #16]
 8003492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	2203      	movs	r2, #3
 80034a2:	fa02 f303 	lsl.w	r3, r2, r3
 80034a6:	43db      	mvns	r3, r3
 80034a8:	693a      	ldr	r2, [r7, #16]
 80034aa:	4013      	ands	r3, r2
 80034ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f003 0203 	and.w	r2, r3, #3
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	fa02 f303 	lsl.w	r3, r2, r3
 80034be:	693a      	ldr	r2, [r7, #16]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	f000 80a6 	beq.w	8003624 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d8:	4b5b      	ldr	r3, [pc, #364]	; (8003648 <HAL_GPIO_Init+0x2e4>)
 80034da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034dc:	4a5a      	ldr	r2, [pc, #360]	; (8003648 <HAL_GPIO_Init+0x2e4>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6613      	str	r3, [r2, #96]	; 0x60
 80034e4:	4b58      	ldr	r3, [pc, #352]	; (8003648 <HAL_GPIO_Init+0x2e4>)
 80034e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e8:	f003 0301 	and.w	r3, r3, #1
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034f0:	4a56      	ldr	r2, [pc, #344]	; (800364c <HAL_GPIO_Init+0x2e8>)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	089b      	lsrs	r3, r3, #2
 80034f6:	3302      	adds	r3, #2
 80034f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f003 0303 	and.w	r3, r3, #3
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	220f      	movs	r2, #15
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	43db      	mvns	r3, r3
 800350e:	693a      	ldr	r2, [r7, #16]
 8003510:	4013      	ands	r3, r2
 8003512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800351a:	d01f      	beq.n	800355c <HAL_GPIO_Init+0x1f8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a4c      	ldr	r2, [pc, #304]	; (8003650 <HAL_GPIO_Init+0x2ec>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d019      	beq.n	8003558 <HAL_GPIO_Init+0x1f4>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a4b      	ldr	r2, [pc, #300]	; (8003654 <HAL_GPIO_Init+0x2f0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d013      	beq.n	8003554 <HAL_GPIO_Init+0x1f0>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a4a      	ldr	r2, [pc, #296]	; (8003658 <HAL_GPIO_Init+0x2f4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d00d      	beq.n	8003550 <HAL_GPIO_Init+0x1ec>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a49      	ldr	r2, [pc, #292]	; (800365c <HAL_GPIO_Init+0x2f8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d007      	beq.n	800354c <HAL_GPIO_Init+0x1e8>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a48      	ldr	r2, [pc, #288]	; (8003660 <HAL_GPIO_Init+0x2fc>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d101      	bne.n	8003548 <HAL_GPIO_Init+0x1e4>
 8003544:	2305      	movs	r3, #5
 8003546:	e00a      	b.n	800355e <HAL_GPIO_Init+0x1fa>
 8003548:	2306      	movs	r3, #6
 800354a:	e008      	b.n	800355e <HAL_GPIO_Init+0x1fa>
 800354c:	2304      	movs	r3, #4
 800354e:	e006      	b.n	800355e <HAL_GPIO_Init+0x1fa>
 8003550:	2303      	movs	r3, #3
 8003552:	e004      	b.n	800355e <HAL_GPIO_Init+0x1fa>
 8003554:	2302      	movs	r3, #2
 8003556:	e002      	b.n	800355e <HAL_GPIO_Init+0x1fa>
 8003558:	2301      	movs	r3, #1
 800355a:	e000      	b.n	800355e <HAL_GPIO_Init+0x1fa>
 800355c:	2300      	movs	r3, #0
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	f002 0203 	and.w	r2, r2, #3
 8003564:	0092      	lsls	r2, r2, #2
 8003566:	4093      	lsls	r3, r2
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	4313      	orrs	r3, r2
 800356c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800356e:	4937      	ldr	r1, [pc, #220]	; (800364c <HAL_GPIO_Init+0x2e8>)
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	089b      	lsrs	r3, r3, #2
 8003574:	3302      	adds	r3, #2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800357c:	4b39      	ldr	r3, [pc, #228]	; (8003664 <HAL_GPIO_Init+0x300>)
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	43db      	mvns	r3, r3
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	4013      	ands	r3, r2
 800358a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4313      	orrs	r3, r2
 800359e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035a0:	4a30      	ldr	r2, [pc, #192]	; (8003664 <HAL_GPIO_Init+0x300>)
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035a6:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <HAL_GPIO_Init+0x300>)
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4013      	ands	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80035c2:	693a      	ldr	r2, [r7, #16]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035ca:	4a26      	ldr	r2, [pc, #152]	; (8003664 <HAL_GPIO_Init+0x300>)
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <HAL_GPIO_Init+0x300>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	43db      	mvns	r3, r3
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	4013      	ands	r3, r2
 80035de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80035ec:	693a      	ldr	r2, [r7, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	4313      	orrs	r3, r2
 80035f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035f4:	4a1b      	ldr	r2, [pc, #108]	; (8003664 <HAL_GPIO_Init+0x300>)
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80035fa:	4b1a      	ldr	r3, [pc, #104]	; (8003664 <HAL_GPIO_Init+0x300>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	43db      	mvns	r3, r3
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4013      	ands	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d003      	beq.n	800361e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4313      	orrs	r3, r2
 800361c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800361e:	4a11      	ldr	r2, [pc, #68]	; (8003664 <HAL_GPIO_Init+0x300>)
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3301      	adds	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	f47f ae9d 	bne.w	8003374 <HAL_GPIO_Init+0x10>
  }
}
 800363a:	bf00      	nop
 800363c:	bf00      	nop
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	40021000 	.word	0x40021000
 800364c:	40010000 	.word	0x40010000
 8003650:	48000400 	.word	0x48000400
 8003654:	48000800 	.word	0x48000800
 8003658:	48000c00 	.word	0x48000c00
 800365c:	48001000 	.word	0x48001000
 8003660:	48001400 	.word	0x48001400
 8003664:	40010400 	.word	0x40010400

08003668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
 8003674:	4613      	mov	r3, r2
 8003676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003678:	787b      	ldrb	r3, [r7, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003684:	e002      	b.n	800368c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003698:	b480      	push	{r7}
 800369a:	b085      	sub	sp, #20
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d141      	bne.n	800372a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036a6:	4b4b      	ldr	r3, [pc, #300]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b2:	d131      	bne.n	8003718 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036b4:	4b47      	ldr	r3, [pc, #284]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ba:	4a46      	ldr	r2, [pc, #280]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036c4:	4b43      	ldr	r3, [pc, #268]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036cc:	4a41      	ldr	r2, [pc, #260]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036d2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80036d4:	4b40      	ldr	r3, [pc, #256]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2232      	movs	r2, #50	; 0x32
 80036da:	fb02 f303 	mul.w	r3, r2, r3
 80036de:	4a3f      	ldr	r2, [pc, #252]	; (80037dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	0c9b      	lsrs	r3, r3, #18
 80036e6:	3301      	adds	r3, #1
 80036e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036ea:	e002      	b.n	80036f2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036f2:	4b38      	ldr	r3, [pc, #224]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f4:	695b      	ldr	r3, [r3, #20]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036fe:	d102      	bne.n	8003706 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f2      	bne.n	80036ec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003706:	4b33      	ldr	r3, [pc, #204]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800370e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003712:	d158      	bne.n	80037c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e057      	b.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003718:	4b2e      	ldr	r3, [pc, #184]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800371a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800371e:	4a2d      	ldr	r2, [pc, #180]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003720:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003724:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003728:	e04d      	b.n	80037c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003730:	d141      	bne.n	80037b6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003732:	4b28      	ldr	r3, [pc, #160]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d131      	bne.n	80037a4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003740:	4b24      	ldr	r3, [pc, #144]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003742:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003746:	4a23      	ldr	r2, [pc, #140]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003748:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800374c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003750:	4b20      	ldr	r3, [pc, #128]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003758:	4a1e      	ldr	r2, [pc, #120]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800375e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003760:	4b1d      	ldr	r3, [pc, #116]	; (80037d8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2232      	movs	r2, #50	; 0x32
 8003766:	fb02 f303 	mul.w	r3, r2, r3
 800376a:	4a1c      	ldr	r2, [pc, #112]	; (80037dc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800376c:	fba2 2303 	umull	r2, r3, r2, r3
 8003770:	0c9b      	lsrs	r3, r3, #18
 8003772:	3301      	adds	r3, #1
 8003774:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003776:	e002      	b.n	800377e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	3b01      	subs	r3, #1
 800377c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800378a:	d102      	bne.n	8003792 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d1f2      	bne.n	8003778 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003792:	4b10      	ldr	r3, [pc, #64]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800379e:	d112      	bne.n	80037c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e011      	b.n	80037c8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80037a4:	4b0b      	ldr	r3, [pc, #44]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037aa:	4a0a      	ldr	r2, [pc, #40]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80037b4:	e007      	b.n	80037c6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037be:	4a05      	ldr	r2, [pc, #20]	; (80037d4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80037c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037c4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	40007000 	.word	0x40007000
 80037d8:	20000000 	.word	0x20000000
 80037dc:	431bde83 	.word	0x431bde83

080037e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80037e4:	4b05      	ldr	r3, [pc, #20]	; (80037fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a04      	ldr	r2, [pc, #16]	; (80037fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80037ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037ee:	6093      	str	r3, [r2, #8]
}
 80037f0:	bf00      	nop
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
 80037fa:	bf00      	nop
 80037fc:	40007000 	.word	0x40007000

08003800 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b088      	sub	sp, #32
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e2fe      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d075      	beq.n	800390a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800381e:	4b97      	ldr	r3, [pc, #604]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 030c 	and.w	r3, r3, #12
 8003826:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003828:	4b94      	ldr	r3, [pc, #592]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f003 0303 	and.w	r3, r3, #3
 8003830:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	2b0c      	cmp	r3, #12
 8003836:	d102      	bne.n	800383e <HAL_RCC_OscConfig+0x3e>
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	2b03      	cmp	r3, #3
 800383c:	d002      	beq.n	8003844 <HAL_RCC_OscConfig+0x44>
 800383e:	69bb      	ldr	r3, [r7, #24]
 8003840:	2b08      	cmp	r3, #8
 8003842:	d10b      	bne.n	800385c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003844:	4b8d      	ldr	r3, [pc, #564]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d05b      	beq.n	8003908 <HAL_RCC_OscConfig+0x108>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d157      	bne.n	8003908 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e2d9      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003864:	d106      	bne.n	8003874 <HAL_RCC_OscConfig+0x74>
 8003866:	4b85      	ldr	r3, [pc, #532]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a84      	ldr	r2, [pc, #528]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 800386c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003870:	6013      	str	r3, [r2, #0]
 8003872:	e01d      	b.n	80038b0 <HAL_RCC_OscConfig+0xb0>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800387c:	d10c      	bne.n	8003898 <HAL_RCC_OscConfig+0x98>
 800387e:	4b7f      	ldr	r3, [pc, #508]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a7e      	ldr	r2, [pc, #504]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003884:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b7c      	ldr	r3, [pc, #496]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a7b      	ldr	r2, [pc, #492]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003890:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	e00b      	b.n	80038b0 <HAL_RCC_OscConfig+0xb0>
 8003898:	4b78      	ldr	r3, [pc, #480]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a77      	ldr	r2, [pc, #476]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 800389e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038a2:	6013      	str	r3, [r2, #0]
 80038a4:	4b75      	ldr	r3, [pc, #468]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a74      	ldr	r2, [pc, #464]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 80038aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d013      	beq.n	80038e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038b8:	f7ff f898 	bl	80029ec <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038c0:	f7ff f894 	bl	80029ec <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b64      	cmp	r3, #100	; 0x64
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e29e      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038d2:	4b6a      	ldr	r3, [pc, #424]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0xc0>
 80038de:	e014      	b.n	800390a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7ff f884 	bl	80029ec <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038e8:	f7ff f880 	bl	80029ec <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b64      	cmp	r3, #100	; 0x64
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e28a      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80038fa:	4b60      	ldr	r3, [pc, #384]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1f0      	bne.n	80038e8 <HAL_RCC_OscConfig+0xe8>
 8003906:	e000      	b.n	800390a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d075      	beq.n	8003a02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003916:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	f003 030c 	and.w	r3, r3, #12
 800391e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003920:	4b56      	ldr	r3, [pc, #344]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0303 	and.w	r3, r3, #3
 8003928:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	2b0c      	cmp	r3, #12
 800392e:	d102      	bne.n	8003936 <HAL_RCC_OscConfig+0x136>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d002      	beq.n	800393c <HAL_RCC_OscConfig+0x13c>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b04      	cmp	r3, #4
 800393a:	d11f      	bne.n	800397c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800393c:	4b4f      	ldr	r3, [pc, #316]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_OscConfig+0x154>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e25d      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003954:	4b49      	ldr	r3, [pc, #292]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	061b      	lsls	r3, r3, #24
 8003962:	4946      	ldr	r1, [pc, #280]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003964:	4313      	orrs	r3, r2
 8003966:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003968:	4b45      	ldr	r3, [pc, #276]	; (8003a80 <HAL_RCC_OscConfig+0x280>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe fff1 	bl	8002954 <HAL_InitTick>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d043      	beq.n	8003a00 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e249      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d023      	beq.n	80039cc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003984:	4b3d      	ldr	r3, [pc, #244]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a3c      	ldr	r2, [pc, #240]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 800398a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003990:	f7ff f82c 	bl	80029ec <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003998:	f7ff f828 	bl	80029ec <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e232      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039aa:	4b34      	ldr	r3, [pc, #208]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039b6:	4b31      	ldr	r3, [pc, #196]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	061b      	lsls	r3, r3, #24
 80039c4:	492d      	ldr	r1, [pc, #180]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	604b      	str	r3, [r1, #4]
 80039ca:	e01a      	b.n	8003a02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039cc:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a2a      	ldr	r2, [pc, #168]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 80039d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7ff f808 	bl	80029ec <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e0:	f7ff f804 	bl	80029ec <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e20e      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80039f2:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1f0      	bne.n	80039e0 <HAL_RCC_OscConfig+0x1e0>
 80039fe:	e000      	b.n	8003a02 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d041      	beq.n	8003a92 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01c      	beq.n	8003a50 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a16:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a1c:	4a17      	ldr	r2, [pc, #92]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a26:	f7fe ffe1 	bl	80029ec <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a2e:	f7fe ffdd 	bl	80029ec <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e1e7      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a40:	4b0e      	ldr	r3, [pc, #56]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003a42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0ef      	beq.n	8003a2e <HAL_RCC_OscConfig+0x22e>
 8003a4e:	e020      	b.n	8003a92 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a50:	4b0a      	ldr	r3, [pc, #40]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a56:	4a09      	ldr	r2, [pc, #36]	; (8003a7c <HAL_RCC_OscConfig+0x27c>)
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a60:	f7fe ffc4 	bl	80029ec <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a66:	e00d      	b.n	8003a84 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a68:	f7fe ffc0 	bl	80029ec <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d906      	bls.n	8003a84 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e1ca      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a84:	4b8c      	ldr	r3, [pc, #560]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1ea      	bne.n	8003a68 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0304 	and.w	r3, r3, #4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 80a6 	beq.w	8003bec <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003aa4:	4b84      	ldr	r3, [pc, #528]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d101      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x2b4>
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e000      	b.n	8003ab6 <HAL_RCC_OscConfig+0x2b6>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d00d      	beq.n	8003ad6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aba:	4b7f      	ldr	r3, [pc, #508]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003abe:	4a7e      	ldr	r2, [pc, #504]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8003ac6:	4b7c      	ldr	r3, [pc, #496]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ace:	60fb      	str	r3, [r7, #12]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ad6:	4b79      	ldr	r3, [pc, #484]	; (8003cbc <HAL_RCC_OscConfig+0x4bc>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d118      	bne.n	8003b14 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ae2:	4b76      	ldr	r3, [pc, #472]	; (8003cbc <HAL_RCC_OscConfig+0x4bc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a75      	ldr	r2, [pc, #468]	; (8003cbc <HAL_RCC_OscConfig+0x4bc>)
 8003ae8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aee:	f7fe ff7d 	bl	80029ec <HAL_GetTick>
 8003af2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003af4:	e008      	b.n	8003b08 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af6:	f7fe ff79 	bl	80029ec <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d901      	bls.n	8003b08 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e183      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b08:	4b6c      	ldr	r3, [pc, #432]	; (8003cbc <HAL_RCC_OscConfig+0x4bc>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0f0      	beq.n	8003af6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d108      	bne.n	8003b2e <HAL_RCC_OscConfig+0x32e>
 8003b1c:	4b66      	ldr	r3, [pc, #408]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b22:	4a65      	ldr	r2, [pc, #404]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b2c:	e024      	b.n	8003b78 <HAL_RCC_OscConfig+0x378>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	2b05      	cmp	r3, #5
 8003b34:	d110      	bne.n	8003b58 <HAL_RCC_OscConfig+0x358>
 8003b36:	4b60      	ldr	r3, [pc, #384]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003b38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3c:	4a5e      	ldr	r2, [pc, #376]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003b3e:	f043 0304 	orr.w	r3, r3, #4
 8003b42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b46:	4b5c      	ldr	r3, [pc, #368]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b4c:	4a5a      	ldr	r2, [pc, #360]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b56:	e00f      	b.n	8003b78 <HAL_RCC_OscConfig+0x378>
 8003b58:	4b57      	ldr	r3, [pc, #348]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5e:	4a56      	ldr	r2, [pc, #344]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003b60:	f023 0301 	bic.w	r3, r3, #1
 8003b64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b68:	4b53      	ldr	r3, [pc, #332]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	4a52      	ldr	r2, [pc, #328]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003b70:	f023 0304 	bic.w	r3, r3, #4
 8003b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d016      	beq.n	8003bae <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fe ff34 	bl	80029ec <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b88:	f7fe ff30 	bl	80029ec <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e138      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b9e:	4b46      	ldr	r3, [pc, #280]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ed      	beq.n	8003b88 <HAL_RCC_OscConfig+0x388>
 8003bac:	e015      	b.n	8003bda <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bae:	f7fe ff1d 	bl	80029ec <HAL_GetTick>
 8003bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bb4:	e00a      	b.n	8003bcc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fe ff19 	bl	80029ec <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d901      	bls.n	8003bcc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e121      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003bcc:	4b3a      	ldr	r3, [pc, #232]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bd2:	f003 0302 	and.w	r3, r3, #2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1ed      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bda:	7ffb      	ldrb	r3, [r7, #31]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d105      	bne.n	8003bec <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003be0:	4b35      	ldr	r3, [pc, #212]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	4a34      	ldr	r2, [pc, #208]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0320 	and.w	r3, r3, #32
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d03c      	beq.n	8003c72 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d01c      	beq.n	8003c3a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c00:	4b2d      	ldr	r3, [pc, #180]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003c02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c06:	4a2c      	ldr	r2, [pc, #176]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003c08:	f043 0301 	orr.w	r3, r3, #1
 8003c0c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c10:	f7fe feec 	bl	80029ec <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c18:	f7fe fee8 	bl	80029ec <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e0f2      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c2a:	4b23      	ldr	r3, [pc, #140]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d0ef      	beq.n	8003c18 <HAL_RCC_OscConfig+0x418>
 8003c38:	e01b      	b.n	8003c72 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c3a:	4b1f      	ldr	r3, [pc, #124]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003c3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c40:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003c42:	f023 0301 	bic.w	r3, r3, #1
 8003c46:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4a:	f7fe fecf 	bl	80029ec <HAL_GetTick>
 8003c4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c50:	e008      	b.n	8003c64 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c52:	f7fe fecb 	bl	80029ec <HAL_GetTick>
 8003c56:	4602      	mov	r2, r0
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1ad3      	subs	r3, r2, r3
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d901      	bls.n	8003c64 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c60:	2303      	movs	r3, #3
 8003c62:	e0d5      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c64:	4b14      	ldr	r3, [pc, #80]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003c66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1ef      	bne.n	8003c52 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 80c9 	beq.w	8003e0e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c7c:	4b0e      	ldr	r3, [pc, #56]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 030c 	and.w	r3, r3, #12
 8003c84:	2b0c      	cmp	r3, #12
 8003c86:	f000 8083 	beq.w	8003d90 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d15e      	bne.n	8003d50 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c92:	4b09      	ldr	r3, [pc, #36]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a08      	ldr	r2, [pc, #32]	; (8003cb8 <HAL_RCC_OscConfig+0x4b8>)
 8003c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9e:	f7fe fea5 	bl	80029ec <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ca4:	e00c      	b.n	8003cc0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ca6:	f7fe fea1 	bl	80029ec <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d905      	bls.n	8003cc0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e0ab      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cc0:	4b55      	ldr	r3, [pc, #340]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1ec      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ccc:	4b52      	ldr	r3, [pc, #328]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003cce:	68da      	ldr	r2, [r3, #12]
 8003cd0:	4b52      	ldr	r3, [pc, #328]	; (8003e1c <HAL_RCC_OscConfig+0x61c>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6a11      	ldr	r1, [r2, #32]
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cdc:	3a01      	subs	r2, #1
 8003cde:	0112      	lsls	r2, r2, #4
 8003ce0:	4311      	orrs	r1, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ce6:	0212      	lsls	r2, r2, #8
 8003ce8:	4311      	orrs	r1, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cee:	0852      	lsrs	r2, r2, #1
 8003cf0:	3a01      	subs	r2, #1
 8003cf2:	0552      	lsls	r2, r2, #21
 8003cf4:	4311      	orrs	r1, r2
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003cfa:	0852      	lsrs	r2, r2, #1
 8003cfc:	3a01      	subs	r2, #1
 8003cfe:	0652      	lsls	r2, r2, #25
 8003d00:	4311      	orrs	r1, r2
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003d06:	06d2      	lsls	r2, r2, #27
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	4943      	ldr	r1, [pc, #268]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d10:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a40      	ldr	r2, [pc, #256]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003d16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d1a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003d1c:	4b3e      	ldr	r3, [pc, #248]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a3d      	ldr	r2, [pc, #244]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003d22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d28:	f7fe fe60 	bl	80029ec <HAL_GetTick>
 8003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2e:	e008      	b.n	8003d42 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d30:	f7fe fe5c 	bl	80029ec <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	1ad3      	subs	r3, r2, r3
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d901      	bls.n	8003d42 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e066      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d42:	4b35      	ldr	r3, [pc, #212]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0f0      	beq.n	8003d30 <HAL_RCC_OscConfig+0x530>
 8003d4e:	e05e      	b.n	8003e0e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d50:	4b31      	ldr	r3, [pc, #196]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a30      	ldr	r2, [pc, #192]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d5c:	f7fe fe46 	bl	80029ec <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d64:	f7fe fe42 	bl	80029ec <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e04c      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d76:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d82:	4b25      	ldr	r3, [pc, #148]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	4924      	ldr	r1, [pc, #144]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003d88:	4b25      	ldr	r3, [pc, #148]	; (8003e20 <HAL_RCC_OscConfig+0x620>)
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	60cb      	str	r3, [r1, #12]
 8003d8e:	e03e      	b.n	8003e0e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e039      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d9c:	4b1e      	ldr	r3, [pc, #120]	; (8003e18 <HAL_RCC_OscConfig+0x618>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f003 0203 	and.w	r2, r3, #3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d12c      	bne.n	8003e0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d123      	bne.n	8003e0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d11b      	bne.n	8003e0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ddc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d113      	bne.n	8003e0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dec:	085b      	lsrs	r3, r3, #1
 8003dee:	3b01      	subs	r3, #1
 8003df0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d109      	bne.n	8003e0a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	3b01      	subs	r3, #1
 8003e04:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d001      	beq.n	8003e0e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e000      	b.n	8003e10 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3720      	adds	r7, #32
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	019f800c 	.word	0x019f800c
 8003e20:	feeefffc 	.word	0xfeeefffc

08003e24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e11e      	b.n	800407a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003e3c:	4b91      	ldr	r3, [pc, #580]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d910      	bls.n	8003e6c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4a:	4b8e      	ldr	r3, [pc, #568]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f023 020f 	bic.w	r2, r3, #15
 8003e52:	498c      	ldr	r1, [pc, #560]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5a:	4b8a      	ldr	r3, [pc, #552]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e106      	b.n	800407a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d073      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2b03      	cmp	r3, #3
 8003e7e:	d129      	bne.n	8003ed4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e80:	4b81      	ldr	r3, [pc, #516]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0f4      	b.n	800407a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e90:	f000 f966 	bl	8004160 <RCC_GetSysClockFreqFromPLLSource>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4a7c      	ldr	r2, [pc, #496]	; (800408c <HAL_RCC_ClockConfig+0x268>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d93f      	bls.n	8003f1e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e9e:	4b7a      	ldr	r3, [pc, #488]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d009      	beq.n	8003ebe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d033      	beq.n	8003f1e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d12f      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ebe:	4b72      	ldr	r3, [pc, #456]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ec6:	4a70      	ldr	r2, [pc, #448]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ecc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003ece:	2380      	movs	r3, #128	; 0x80
 8003ed0:	617b      	str	r3, [r7, #20]
 8003ed2:	e024      	b.n	8003f1e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d107      	bne.n	8003eec <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003edc:	4b6a      	ldr	r3, [pc, #424]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d109      	bne.n	8003efc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e0c6      	b.n	800407a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eec:	4b66      	ldr	r3, [pc, #408]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d101      	bne.n	8003efc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e0be      	b.n	800407a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003efc:	f000 f8ce 	bl	800409c <HAL_RCC_GetSysClockFreq>
 8003f00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4a61      	ldr	r2, [pc, #388]	; (800408c <HAL_RCC_ClockConfig+0x268>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d909      	bls.n	8003f1e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f0a:	4b5f      	ldr	r3, [pc, #380]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f12:	4a5d      	ldr	r2, [pc, #372]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f18:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003f1e:	4b5a      	ldr	r3, [pc, #360]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f023 0203 	bic.w	r2, r3, #3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	4957      	ldr	r1, [pc, #348]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f30:	f7fe fd5c 	bl	80029ec <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f38:	f7fe fd58 	bl	80029ec <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e095      	b.n	800407a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f4e:	4b4e      	ldr	r3, [pc, #312]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 020c 	and.w	r2, r3, #12
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d1eb      	bne.n	8003f38 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0302 	and.w	r3, r3, #2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d023      	beq.n	8003fb4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0304 	and.w	r3, r3, #4
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d005      	beq.n	8003f84 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f78:	4b43      	ldr	r3, [pc, #268]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003f7a:	689b      	ldr	r3, [r3, #8]
 8003f7c:	4a42      	ldr	r2, [pc, #264]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003f7e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f82:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0308 	and.w	r3, r3, #8
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f90:	4b3d      	ldr	r3, [pc, #244]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f98:	4a3b      	ldr	r2, [pc, #236]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003f9a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f9e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fa0:	4b39      	ldr	r3, [pc, #228]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4936      	ldr	r1, [pc, #216]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	2b80      	cmp	r3, #128	; 0x80
 8003fb8:	d105      	bne.n	8003fc6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003fba:	4b33      	ldr	r3, [pc, #204]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	4a32      	ldr	r2, [pc, #200]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8003fc0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fc4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fc6:	4b2f      	ldr	r3, [pc, #188]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 030f 	and.w	r3, r3, #15
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d21d      	bcs.n	8004010 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd4:	4b2b      	ldr	r3, [pc, #172]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f023 020f 	bic.w	r2, r3, #15
 8003fdc:	4929      	ldr	r1, [pc, #164]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fe4:	f7fe fd02 	bl	80029ec <HAL_GetTick>
 8003fe8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	e00a      	b.n	8004002 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fec:	f7fe fcfe 	bl	80029ec <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e03b      	b.n	800407a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004002:	4b20      	ldr	r3, [pc, #128]	; (8004084 <HAL_RCC_ClockConfig+0x260>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d1ed      	bne.n	8003fec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0304 	and.w	r3, r3, #4
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800401c:	4b1a      	ldr	r3, [pc, #104]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	4917      	ldr	r1, [pc, #92]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 800402a:	4313      	orrs	r3, r2
 800402c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d009      	beq.n	800404e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800403a:	4b13      	ldr	r3, [pc, #76]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	490f      	ldr	r1, [pc, #60]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 800404a:	4313      	orrs	r3, r2
 800404c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800404e:	f000 f825 	bl	800409c <HAL_RCC_GetSysClockFreq>
 8004052:	4602      	mov	r2, r0
 8004054:	4b0c      	ldr	r3, [pc, #48]	; (8004088 <HAL_RCC_ClockConfig+0x264>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	091b      	lsrs	r3, r3, #4
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	490c      	ldr	r1, [pc, #48]	; (8004090 <HAL_RCC_ClockConfig+0x26c>)
 8004060:	5ccb      	ldrb	r3, [r1, r3]
 8004062:	f003 031f 	and.w	r3, r3, #31
 8004066:	fa22 f303 	lsr.w	r3, r2, r3
 800406a:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <HAL_RCC_ClockConfig+0x270>)
 800406c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800406e:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <HAL_RCC_ClockConfig+0x274>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4618      	mov	r0, r3
 8004074:	f7fe fc6e 	bl	8002954 <HAL_InitTick>
 8004078:	4603      	mov	r3, r0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3718      	adds	r7, #24
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	40022000 	.word	0x40022000
 8004088:	40021000 	.word	0x40021000
 800408c:	04c4b400 	.word	0x04c4b400
 8004090:	080066d0 	.word	0x080066d0
 8004094:	20000000 	.word	0x20000000
 8004098:	20000004 	.word	0x20000004

0800409c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800409c:	b480      	push	{r7}
 800409e:	b087      	sub	sp, #28
 80040a0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80040a2:	4b2c      	ldr	r3, [pc, #176]	; (8004154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	d102      	bne.n	80040b4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80040ae:	4b2a      	ldr	r3, [pc, #168]	; (8004158 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	e047      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80040b4:	4b27      	ldr	r3, [pc, #156]	; (8004154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d102      	bne.n	80040c6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80040c0:	4b26      	ldr	r3, [pc, #152]	; (800415c <HAL_RCC_GetSysClockFreq+0xc0>)
 80040c2:	613b      	str	r3, [r7, #16]
 80040c4:	e03e      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80040c6:	4b23      	ldr	r3, [pc, #140]	; (8004154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b0c      	cmp	r3, #12
 80040d0:	d136      	bne.n	8004140 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80040d2:	4b20      	ldr	r3, [pc, #128]	; (8004154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80040dc:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	091b      	lsrs	r3, r3, #4
 80040e2:	f003 030f 	and.w	r3, r3, #15
 80040e6:	3301      	adds	r3, #1
 80040e8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2b03      	cmp	r3, #3
 80040ee:	d10c      	bne.n	800410a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040f0:	4a1a      	ldr	r2, [pc, #104]	; (800415c <HAL_RCC_GetSysClockFreq+0xc0>)
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f8:	4a16      	ldr	r2, [pc, #88]	; (8004154 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040fa:	68d2      	ldr	r2, [r2, #12]
 80040fc:	0a12      	lsrs	r2, r2, #8
 80040fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004102:	fb02 f303 	mul.w	r3, r2, r3
 8004106:	617b      	str	r3, [r7, #20]
      break;
 8004108:	e00c      	b.n	8004124 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800410a:	4a13      	ldr	r2, [pc, #76]	; (8004158 <HAL_RCC_GetSysClockFreq+0xbc>)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004112:	4a10      	ldr	r2, [pc, #64]	; (8004154 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004114:	68d2      	ldr	r2, [r2, #12]
 8004116:	0a12      	lsrs	r2, r2, #8
 8004118:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800411c:	fb02 f303 	mul.w	r3, r2, r3
 8004120:	617b      	str	r3, [r7, #20]
      break;
 8004122:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004124:	4b0b      	ldr	r3, [pc, #44]	; (8004154 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	0e5b      	lsrs	r3, r3, #25
 800412a:	f003 0303 	and.w	r3, r3, #3
 800412e:	3301      	adds	r3, #1
 8004130:	005b      	lsls	r3, r3, #1
 8004132:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	fbb2 f3f3 	udiv	r3, r2, r3
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	e001      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004140:	2300      	movs	r3, #0
 8004142:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004144:	693b      	ldr	r3, [r7, #16]
}
 8004146:	4618      	mov	r0, r3
 8004148:	371c      	adds	r7, #28
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40021000 	.word	0x40021000
 8004158:	00f42400 	.word	0x00f42400
 800415c:	007a1200 	.word	0x007a1200

08004160 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004166:	4b1e      	ldr	r3, [pc, #120]	; (80041e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f003 0303 	and.w	r3, r3, #3
 800416e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004170:	4b1b      	ldr	r3, [pc, #108]	; (80041e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 030f 	and.w	r3, r3, #15
 800417a:	3301      	adds	r3, #1
 800417c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b03      	cmp	r3, #3
 8004182:	d10c      	bne.n	800419e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004184:	4a17      	ldr	r2, [pc, #92]	; (80041e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	4a14      	ldr	r2, [pc, #80]	; (80041e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800418e:	68d2      	ldr	r2, [r2, #12]
 8004190:	0a12      	lsrs	r2, r2, #8
 8004192:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004196:	fb02 f303 	mul.w	r3, r2, r3
 800419a:	617b      	str	r3, [r7, #20]
    break;
 800419c:	e00c      	b.n	80041b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800419e:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a6:	4a0e      	ldr	r2, [pc, #56]	; (80041e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041a8:	68d2      	ldr	r2, [r2, #12]
 80041aa:	0a12      	lsrs	r2, r2, #8
 80041ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041b0:	fb02 f303 	mul.w	r3, r2, r3
 80041b4:	617b      	str	r3, [r7, #20]
    break;
 80041b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041b8:	4b09      	ldr	r3, [pc, #36]	; (80041e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ba:	68db      	ldr	r3, [r3, #12]
 80041bc:	0e5b      	lsrs	r3, r3, #25
 80041be:	f003 0303 	and.w	r3, r3, #3
 80041c2:	3301      	adds	r3, #1
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041d2:	687b      	ldr	r3, [r7, #4]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	371c      	adds	r7, #28
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	40021000 	.word	0x40021000
 80041e4:	007a1200 	.word	0x007a1200
 80041e8:	00f42400 	.word	0x00f42400

080041ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80041f4:	2300      	movs	r3, #0
 80041f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80041f8:	2300      	movs	r3, #0
 80041fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004204:	2b00      	cmp	r3, #0
 8004206:	f000 8098 	beq.w	800433a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800420a:	2300      	movs	r3, #0
 800420c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800420e:	4b43      	ldr	r3, [pc, #268]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10d      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800421a:	4b40      	ldr	r3, [pc, #256]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800421c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421e:	4a3f      	ldr	r2, [pc, #252]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004220:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004224:	6593      	str	r3, [r2, #88]	; 0x58
 8004226:	4b3d      	ldr	r3, [pc, #244]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004232:	2301      	movs	r3, #1
 8004234:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004236:	4b3a      	ldr	r3, [pc, #232]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a39      	ldr	r2, [pc, #228]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800423c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004240:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004242:	f7fe fbd3 	bl	80029ec <HAL_GetTick>
 8004246:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004248:	e009      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800424a:	f7fe fbcf 	bl	80029ec <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d902      	bls.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	74fb      	strb	r3, [r7, #19]
        break;
 800425c:	e005      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800425e:	4b30      	ldr	r3, [pc, #192]	; (8004320 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004266:	2b00      	cmp	r3, #0
 8004268:	d0ef      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800426a:	7cfb      	ldrb	r3, [r7, #19]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d159      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004270:	4b2a      	ldr	r3, [pc, #168]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800427a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01e      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	429a      	cmp	r2, r3
 800428a:	d019      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800428c:	4b23      	ldr	r3, [pc, #140]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004296:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004298:	4b20      	ldr	r3, [pc, #128]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800429a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800429e:	4a1f      	ldr	r2, [pc, #124]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042a8:	4b1c      	ldr	r3, [pc, #112]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	4a1b      	ldr	r2, [pc, #108]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042b8:	4a18      	ldr	r2, [pc, #96]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d016      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ca:	f7fe fb8f 	bl	80029ec <HAL_GetTick>
 80042ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042d0:	e00b      	b.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fe fb8b 	bl	80029ec <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d902      	bls.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	74fb      	strb	r3, [r7, #19]
            break;
 80042e8:	e006      	b.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0ec      	beq.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80042f8:	7cfb      	ldrb	r3, [r7, #19]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10b      	bne.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042fe:	4b07      	ldr	r3, [pc, #28]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004304:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	4903      	ldr	r1, [pc, #12]	; (800431c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800430e:	4313      	orrs	r3, r2
 8004310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004314:	e008      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004316:	7cfb      	ldrb	r3, [r7, #19]
 8004318:	74bb      	strb	r3, [r7, #18]
 800431a:	e005      	b.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800431c:	40021000 	.word	0x40021000
 8004320:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004324:	7cfb      	ldrb	r3, [r7, #19]
 8004326:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004328:	7c7b      	ldrb	r3, [r7, #17]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d105      	bne.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800432e:	4ba6      	ldr	r3, [pc, #664]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004332:	4aa5      	ldr	r2, [pc, #660]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004338:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004346:	4ba0      	ldr	r3, [pc, #640]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800434c:	f023 0203 	bic.w	r2, r3, #3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	499c      	ldr	r1, [pc, #624]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0302 	and.w	r3, r3, #2
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004368:	4b97      	ldr	r3, [pc, #604]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436e:	f023 020c 	bic.w	r2, r3, #12
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	4994      	ldr	r1, [pc, #592]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0304 	and.w	r3, r3, #4
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800438a:	4b8f      	ldr	r3, [pc, #572]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800438c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004390:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	498b      	ldr	r1, [pc, #556]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043ac:	4b86      	ldr	r3, [pc, #536]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	4983      	ldr	r1, [pc, #524]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0320 	and.w	r3, r3, #32
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80043ce:	4b7e      	ldr	r3, [pc, #504]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	695b      	ldr	r3, [r3, #20]
 80043dc:	497a      	ldr	r1, [pc, #488]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043f0:	4b75      	ldr	r3, [pc, #468]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	4972      	ldr	r1, [pc, #456]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004412:	4b6d      	ldr	r3, [pc, #436]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004418:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	4969      	ldr	r1, [pc, #420]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004434:	4b64      	ldr	r3, [pc, #400]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	4961      	ldr	r1, [pc, #388]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00a      	beq.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004456:	4b5c      	ldr	r3, [pc, #368]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004464:	4958      	ldr	r1, [pc, #352]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004474:	2b00      	cmp	r3, #0
 8004476:	d015      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004478:	4b53      	ldr	r3, [pc, #332]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800447a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004486:	4950      	ldr	r1, [pc, #320]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004488:	4313      	orrs	r3, r2
 800448a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004496:	d105      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004498:	4b4b      	ldr	r3, [pc, #300]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4a4a      	ldr	r2, [pc, #296]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800449e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044b0:	4b45      	ldr	r3, [pc, #276]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	4942      	ldr	r1, [pc, #264]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044ce:	d105      	bne.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044d0:	4b3d      	ldr	r3, [pc, #244]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4a3c      	ldr	r2, [pc, #240]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d015      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044e8:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	4934      	ldr	r1, [pc, #208]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004506:	d105      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004508:	4b2f      	ldr	r3, [pc, #188]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4a2e      	ldr	r2, [pc, #184]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800450e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004512:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d015      	beq.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004520:	4b29      	ldr	r3, [pc, #164]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004526:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452e:	4926      	ldr	r1, [pc, #152]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004530:	4313      	orrs	r3, r2
 8004532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800453e:	d105      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004540:	4b21      	ldr	r3, [pc, #132]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	4a20      	ldr	r2, [pc, #128]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004546:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800454a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d015      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800455a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800455e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	4918      	ldr	r1, [pc, #96]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004576:	d105      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004578:	4b13      	ldr	r3, [pc, #76]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	4a12      	ldr	r2, [pc, #72]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800457e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004582:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d015      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004590:	4b0d      	ldr	r3, [pc, #52]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004596:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459e:	490a      	ldr	r1, [pc, #40]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045ae:	d105      	bne.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80045b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80045bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	40021000 	.word	0x40021000

080045cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e049      	b.n	8004672 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d106      	bne.n	80045f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f7fd ff9c 	bl	8002530 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	3304      	adds	r3, #4
 8004608:	4619      	mov	r1, r3
 800460a:	4610      	mov	r0, r2
 800460c:	f000 fdb2 	bl	8005174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b082      	sub	sp, #8
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d101      	bne.n	800468c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e049      	b.n	8004720 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d106      	bne.n	80046a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f841 	bl	8004728 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	3304      	adds	r3, #4
 80046b6:	4619      	mov	r1, r3
 80046b8:	4610      	mov	r0, r2
 80046ba:	f000 fd5b 	bl	8005174 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2201      	movs	r2, #1
 80046d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2201      	movs	r2, #1
 80046f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2201      	movs	r2, #1
 8004702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2201      	movs	r2, #1
 800470a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3708      	adds	r7, #8
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}

08004728 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b084      	sub	sp, #16
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d109      	bne.n	8004760 <HAL_TIM_PWM_Start+0x24>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	bf14      	ite	ne
 8004758:	2301      	movne	r3, #1
 800475a:	2300      	moveq	r3, #0
 800475c:	b2db      	uxtb	r3, r3
 800475e:	e03c      	b.n	80047da <HAL_TIM_PWM_Start+0x9e>
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	2b04      	cmp	r3, #4
 8004764:	d109      	bne.n	800477a <HAL_TIM_PWM_Start+0x3e>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b01      	cmp	r3, #1
 8004770:	bf14      	ite	ne
 8004772:	2301      	movne	r3, #1
 8004774:	2300      	moveq	r3, #0
 8004776:	b2db      	uxtb	r3, r3
 8004778:	e02f      	b.n	80047da <HAL_TIM_PWM_Start+0x9e>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d109      	bne.n	8004794 <HAL_TIM_PWM_Start+0x58>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	bf14      	ite	ne
 800478c:	2301      	movne	r3, #1
 800478e:	2300      	moveq	r3, #0
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e022      	b.n	80047da <HAL_TIM_PWM_Start+0x9e>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	2b0c      	cmp	r3, #12
 8004798:	d109      	bne.n	80047ae <HAL_TIM_PWM_Start+0x72>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	bf14      	ite	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	2300      	moveq	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	e015      	b.n	80047da <HAL_TIM_PWM_Start+0x9e>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	2b10      	cmp	r3, #16
 80047b2:	d109      	bne.n	80047c8 <HAL_TIM_PWM_Start+0x8c>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e008      	b.n	80047da <HAL_TIM_PWM_Start+0x9e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	bf14      	ite	ne
 80047d4:	2301      	movne	r3, #1
 80047d6:	2300      	moveq	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e097      	b.n	8004912 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d104      	bne.n	80047f2 <HAL_TIM_PWM_Start+0xb6>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2202      	movs	r2, #2
 80047ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f0:	e023      	b.n	800483a <HAL_TIM_PWM_Start+0xfe>
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d104      	bne.n	8004802 <HAL_TIM_PWM_Start+0xc6>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2202      	movs	r2, #2
 80047fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004800:	e01b      	b.n	800483a <HAL_TIM_PWM_Start+0xfe>
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b08      	cmp	r3, #8
 8004806:	d104      	bne.n	8004812 <HAL_TIM_PWM_Start+0xd6>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2202      	movs	r2, #2
 800480c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004810:	e013      	b.n	800483a <HAL_TIM_PWM_Start+0xfe>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b0c      	cmp	r3, #12
 8004816:	d104      	bne.n	8004822 <HAL_TIM_PWM_Start+0xe6>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004820:	e00b      	b.n	800483a <HAL_TIM_PWM_Start+0xfe>
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	2b10      	cmp	r3, #16
 8004826:	d104      	bne.n	8004832 <HAL_TIM_PWM_Start+0xf6>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004830:	e003      	b.n	800483a <HAL_TIM_PWM_Start+0xfe>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2202      	movs	r2, #2
 8004836:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	2201      	movs	r2, #1
 8004840:	6839      	ldr	r1, [r7, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f001 f8c4 	bl	80059d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a33      	ldr	r2, [pc, #204]	; (800491c <HAL_TIM_PWM_Start+0x1e0>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d013      	beq.n	800487a <HAL_TIM_PWM_Start+0x13e>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a32      	ldr	r2, [pc, #200]	; (8004920 <HAL_TIM_PWM_Start+0x1e4>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d00e      	beq.n	800487a <HAL_TIM_PWM_Start+0x13e>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a30      	ldr	r2, [pc, #192]	; (8004924 <HAL_TIM_PWM_Start+0x1e8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d009      	beq.n	800487a <HAL_TIM_PWM_Start+0x13e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a2f      	ldr	r2, [pc, #188]	; (8004928 <HAL_TIM_PWM_Start+0x1ec>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d004      	beq.n	800487a <HAL_TIM_PWM_Start+0x13e>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a2d      	ldr	r2, [pc, #180]	; (800492c <HAL_TIM_PWM_Start+0x1f0>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d101      	bne.n	800487e <HAL_TIM_PWM_Start+0x142>
 800487a:	2301      	movs	r3, #1
 800487c:	e000      	b.n	8004880 <HAL_TIM_PWM_Start+0x144>
 800487e:	2300      	movs	r3, #0
 8004880:	2b00      	cmp	r3, #0
 8004882:	d007      	beq.n	8004894 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004892:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a20      	ldr	r2, [pc, #128]	; (800491c <HAL_TIM_PWM_Start+0x1e0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d018      	beq.n	80048d0 <HAL_TIM_PWM_Start+0x194>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048a6:	d013      	beq.n	80048d0 <HAL_TIM_PWM_Start+0x194>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a20      	ldr	r2, [pc, #128]	; (8004930 <HAL_TIM_PWM_Start+0x1f4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d00e      	beq.n	80048d0 <HAL_TIM_PWM_Start+0x194>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1f      	ldr	r2, [pc, #124]	; (8004934 <HAL_TIM_PWM_Start+0x1f8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d009      	beq.n	80048d0 <HAL_TIM_PWM_Start+0x194>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a17      	ldr	r2, [pc, #92]	; (8004920 <HAL_TIM_PWM_Start+0x1e4>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d004      	beq.n	80048d0 <HAL_TIM_PWM_Start+0x194>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a16      	ldr	r2, [pc, #88]	; (8004924 <HAL_TIM_PWM_Start+0x1e8>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d115      	bne.n	80048fc <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689a      	ldr	r2, [r3, #8]
 80048d6:	4b18      	ldr	r3, [pc, #96]	; (8004938 <HAL_TIM_PWM_Start+0x1fc>)
 80048d8:	4013      	ands	r3, r2
 80048da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2b06      	cmp	r3, #6
 80048e0:	d015      	beq.n	800490e <HAL_TIM_PWM_Start+0x1d2>
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e8:	d011      	beq.n	800490e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f042 0201 	orr.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fa:	e008      	b.n	800490e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0201 	orr.w	r2, r2, #1
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	e000      	b.n	8004910 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800490e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	40012c00 	.word	0x40012c00
 8004920:	40013400 	.word	0x40013400
 8004924:	40014000 	.word	0x40014000
 8004928:	40014400 	.word	0x40014400
 800492c:	40014800 	.word	0x40014800
 8004930:	40000400 	.word	0x40000400
 8004934:	40000800 	.word	0x40000800
 8004938:	00010007 	.word	0x00010007

0800493c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2200      	movs	r2, #0
 800494c:	6839      	ldr	r1, [r7, #0]
 800494e:	4618      	mov	r0, r3
 8004950:	f001 f83e 	bl	80059d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a3e      	ldr	r2, [pc, #248]	; (8004a54 <HAL_TIM_PWM_Stop+0x118>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d013      	beq.n	8004986 <HAL_TIM_PWM_Stop+0x4a>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a3d      	ldr	r2, [pc, #244]	; (8004a58 <HAL_TIM_PWM_Stop+0x11c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00e      	beq.n	8004986 <HAL_TIM_PWM_Stop+0x4a>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a3b      	ldr	r2, [pc, #236]	; (8004a5c <HAL_TIM_PWM_Stop+0x120>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_TIM_PWM_Stop+0x4a>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a3a      	ldr	r2, [pc, #232]	; (8004a60 <HAL_TIM_PWM_Stop+0x124>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_TIM_PWM_Stop+0x4a>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a38      	ldr	r2, [pc, #224]	; (8004a64 <HAL_TIM_PWM_Stop+0x128>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d101      	bne.n	800498a <HAL_TIM_PWM_Stop+0x4e>
 8004986:	2301      	movs	r3, #1
 8004988:	e000      	b.n	800498c <HAL_TIM_PWM_Stop+0x50>
 800498a:	2300      	movs	r3, #0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d017      	beq.n	80049c0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	6a1a      	ldr	r2, [r3, #32]
 8004996:	f241 1311 	movw	r3, #4369	; 0x1111
 800499a:	4013      	ands	r3, r2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10f      	bne.n	80049c0 <HAL_TIM_PWM_Stop+0x84>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6a1a      	ldr	r2, [r3, #32]
 80049a6:	f244 4344 	movw	r3, #17476	; 0x4444
 80049aa:	4013      	ands	r3, r2
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d107      	bne.n	80049c0 <HAL_TIM_PWM_Stop+0x84>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80049be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	6a1a      	ldr	r2, [r3, #32]
 80049c6:	f241 1311 	movw	r3, #4369	; 0x1111
 80049ca:	4013      	ands	r3, r2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d10f      	bne.n	80049f0 <HAL_TIM_PWM_Stop+0xb4>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6a1a      	ldr	r2, [r3, #32]
 80049d6:	f244 4344 	movw	r3, #17476	; 0x4444
 80049da:	4013      	ands	r3, r2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d107      	bne.n	80049f0 <HAL_TIM_PWM_Stop+0xb4>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0201 	bic.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d104      	bne.n	8004a00 <HAL_TIM_PWM_Stop+0xc4>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049fe:	e023      	b.n	8004a48 <HAL_TIM_PWM_Stop+0x10c>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d104      	bne.n	8004a10 <HAL_TIM_PWM_Stop+0xd4>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a0e:	e01b      	b.n	8004a48 <HAL_TIM_PWM_Stop+0x10c>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2b08      	cmp	r3, #8
 8004a14:	d104      	bne.n	8004a20 <HAL_TIM_PWM_Stop+0xe4>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a1e:	e013      	b.n	8004a48 <HAL_TIM_PWM_Stop+0x10c>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	2b0c      	cmp	r3, #12
 8004a24:	d104      	bne.n	8004a30 <HAL_TIM_PWM_Stop+0xf4>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a2e:	e00b      	b.n	8004a48 <HAL_TIM_PWM_Stop+0x10c>
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b10      	cmp	r3, #16
 8004a34:	d104      	bne.n	8004a40 <HAL_TIM_PWM_Stop+0x104>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a3e:	e003      	b.n	8004a48 <HAL_TIM_PWM_Stop+0x10c>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40012c00 	.word	0x40012c00
 8004a58:	40013400 	.word	0x40013400
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	40014400 	.word	0x40014400
 8004a64:	40014800 	.word	0x40014800

08004a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d020      	beq.n	8004acc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01b      	beq.n	8004acc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0202 	mvn.w	r2, #2
 8004a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f003 0303 	and.w	r3, r3, #3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fb40 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004ab8:	e005      	b.n	8004ac6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fb32 	bl	8005124 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 fb43 	bl	800514c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d020      	beq.n	8004b18 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01b      	beq.n	8004b18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0204 	mvn.w	r2, #4
 8004ae8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2202      	movs	r2, #2
 8004aee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fb1a 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004b04:	e005      	b.n	8004b12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 fb0c 	bl	8005124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 fb1d 	bl	800514c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d020      	beq.n	8004b64 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d01b      	beq.n	8004b64 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0208 	mvn.w	r2, #8
 8004b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2204      	movs	r2, #4
 8004b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	69db      	ldr	r3, [r3, #28]
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 faf4 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004b50:	e005      	b.n	8004b5e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fae6 	bl	8005124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 faf7 	bl	800514c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d020      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0310 	and.w	r3, r3, #16
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01b      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0210 	mvn.w	r2, #16
 8004b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2208      	movs	r2, #8
 8004b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 face 	bl	8005138 <HAL_TIM_IC_CaptureCallback>
 8004b9c:	e005      	b.n	8004baa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fac0 	bl	8005124 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 fad1 	bl	800514c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f003 0301 	and.w	r3, r3, #1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d007      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0201 	mvn.w	r2, #1
 8004bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f7fc fe1c 	bl	800180c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d104      	bne.n	8004be8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d00c      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d007      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8004bfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f001 f825 	bl	8005c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00c      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f001 f81d 	bl	8005c60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00c      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 fa8b 	bl	8005160 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00c      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f003 0320 	and.w	r3, r3, #32
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f06f 0220 	mvn.w	r2, #32
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 ffe5 	bl	8005c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00c      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f000 fff1 	bl	8005c74 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00c      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 ffe9 	bl	8005c88 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00c      	beq.n	8004cda <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 ffe1 	bl	8005c9c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d00c      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004cf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f000 ffd9 	bl	8005cb0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
	...

08004d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0ff      	b.n	8004f26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b14      	cmp	r3, #20
 8004d32:	f200 80f0 	bhi.w	8004f16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d36:	a201      	add	r2, pc, #4	; (adr r2, 8004d3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d3c:	08004d91 	.word	0x08004d91
 8004d40:	08004f17 	.word	0x08004f17
 8004d44:	08004f17 	.word	0x08004f17
 8004d48:	08004f17 	.word	0x08004f17
 8004d4c:	08004dd1 	.word	0x08004dd1
 8004d50:	08004f17 	.word	0x08004f17
 8004d54:	08004f17 	.word	0x08004f17
 8004d58:	08004f17 	.word	0x08004f17
 8004d5c:	08004e13 	.word	0x08004e13
 8004d60:	08004f17 	.word	0x08004f17
 8004d64:	08004f17 	.word	0x08004f17
 8004d68:	08004f17 	.word	0x08004f17
 8004d6c:	08004e53 	.word	0x08004e53
 8004d70:	08004f17 	.word	0x08004f17
 8004d74:	08004f17 	.word	0x08004f17
 8004d78:	08004f17 	.word	0x08004f17
 8004d7c:	08004e95 	.word	0x08004e95
 8004d80:	08004f17 	.word	0x08004f17
 8004d84:	08004f17 	.word	0x08004f17
 8004d88:	08004f17 	.word	0x08004f17
 8004d8c:	08004ed5 	.word	0x08004ed5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68b9      	ldr	r1, [r7, #8]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 fa88 	bl	80052ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	699a      	ldr	r2, [r3, #24]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f042 0208 	orr.w	r2, r2, #8
 8004daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	699a      	ldr	r2, [r3, #24]
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f022 0204 	bic.w	r2, r2, #4
 8004dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6999      	ldr	r1, [r3, #24]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	691a      	ldr	r2, [r3, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	619a      	str	r2, [r3, #24]
      break;
 8004dce:	e0a5      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68b9      	ldr	r1, [r7, #8]
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f000 faf8 	bl	80053cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	699a      	ldr	r2, [r3, #24]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	699a      	ldr	r2, [r3, #24]
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6999      	ldr	r1, [r3, #24]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	021a      	lsls	r2, r3, #8
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	619a      	str	r2, [r3, #24]
      break;
 8004e10:	e084      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	68b9      	ldr	r1, [r7, #8]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fb61 	bl	80054e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	69da      	ldr	r2, [r3, #28]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f042 0208 	orr.w	r2, r2, #8
 8004e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69da      	ldr	r2, [r3, #28]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f022 0204 	bic.w	r2, r2, #4
 8004e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69d9      	ldr	r1, [r3, #28]
 8004e44:	68bb      	ldr	r3, [r7, #8]
 8004e46:	691a      	ldr	r2, [r3, #16]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	61da      	str	r2, [r3, #28]
      break;
 8004e50:	e064      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68b9      	ldr	r1, [r7, #8]
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fbc9 	bl	80055f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69d9      	ldr	r1, [r3, #28]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	021a      	lsls	r2, r3, #8
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	61da      	str	r2, [r3, #28]
      break;
 8004e92:	e043      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	68b9      	ldr	r1, [r7, #8]
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f000 fc32 	bl	8005704 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f042 0208 	orr.w	r2, r2, #8
 8004eae:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 0204 	bic.w	r2, r2, #4
 8004ebe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	691a      	ldr	r2, [r3, #16]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004ed2:	e023      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68b9      	ldr	r1, [r7, #8]
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fc76 	bl	80057cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004eee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	021a      	lsls	r2, r3, #8
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004f14:	e002      	b.n	8004f1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	75fb      	strb	r3, [r7, #23]
      break;
 8004f1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3718      	adds	r7, #24
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop

08004f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d101      	bne.n	8004f4c <HAL_TIM_ConfigClockSource+0x1c>
 8004f48:	2302      	movs	r3, #2
 8004f4a:	e0de      	b.n	800510a <HAL_TIM_ConfigClockSource+0x1da>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004f6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a63      	ldr	r2, [pc, #396]	; (8005114 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	f000 80a9 	beq.w	80050de <HAL_TIM_ConfigClockSource+0x1ae>
 8004f8c:	4a61      	ldr	r2, [pc, #388]	; (8005114 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	f200 80ae 	bhi.w	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004f94:	4a60      	ldr	r2, [pc, #384]	; (8005118 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	f000 80a1 	beq.w	80050de <HAL_TIM_ConfigClockSource+0x1ae>
 8004f9c:	4a5e      	ldr	r2, [pc, #376]	; (8005118 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f200 80a6 	bhi.w	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004fa4:	4a5d      	ldr	r2, [pc, #372]	; (800511c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	f000 8099 	beq.w	80050de <HAL_TIM_ConfigClockSource+0x1ae>
 8004fac:	4a5b      	ldr	r2, [pc, #364]	; (800511c <HAL_TIM_ConfigClockSource+0x1ec>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	f200 809e 	bhi.w	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004fb4:	4a5a      	ldr	r2, [pc, #360]	; (8005120 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	f000 8091 	beq.w	80050de <HAL_TIM_ConfigClockSource+0x1ae>
 8004fbc:	4a58      	ldr	r2, [pc, #352]	; (8005120 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	f200 8096 	bhi.w	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004fc4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004fc8:	f000 8089 	beq.w	80050de <HAL_TIM_ConfigClockSource+0x1ae>
 8004fcc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004fd0:	f200 808e 	bhi.w	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fd8:	d03e      	beq.n	8005058 <HAL_TIM_ConfigClockSource+0x128>
 8004fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fde:	f200 8087 	bhi.w	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fe6:	f000 8086 	beq.w	80050f6 <HAL_TIM_ConfigClockSource+0x1c6>
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fee:	d87f      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ff0:	2b70      	cmp	r3, #112	; 0x70
 8004ff2:	d01a      	beq.n	800502a <HAL_TIM_ConfigClockSource+0xfa>
 8004ff4:	2b70      	cmp	r3, #112	; 0x70
 8004ff6:	d87b      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004ff8:	2b60      	cmp	r3, #96	; 0x60
 8004ffa:	d050      	beq.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
 8004ffc:	2b60      	cmp	r3, #96	; 0x60
 8004ffe:	d877      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005000:	2b50      	cmp	r3, #80	; 0x50
 8005002:	d03c      	beq.n	800507e <HAL_TIM_ConfigClockSource+0x14e>
 8005004:	2b50      	cmp	r3, #80	; 0x50
 8005006:	d873      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005008:	2b40      	cmp	r3, #64	; 0x40
 800500a:	d058      	beq.n	80050be <HAL_TIM_ConfigClockSource+0x18e>
 800500c:	2b40      	cmp	r3, #64	; 0x40
 800500e:	d86f      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005010:	2b30      	cmp	r3, #48	; 0x30
 8005012:	d064      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x1ae>
 8005014:	2b30      	cmp	r3, #48	; 0x30
 8005016:	d86b      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005018:	2b20      	cmp	r3, #32
 800501a:	d060      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x1ae>
 800501c:	2b20      	cmp	r3, #32
 800501e:	d867      	bhi.n	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005020:	2b00      	cmp	r3, #0
 8005022:	d05c      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x1ae>
 8005024:	2b10      	cmp	r3, #16
 8005026:	d05a      	beq.n	80050de <HAL_TIM_ConfigClockSource+0x1ae>
 8005028:	e062      	b.n	80050f0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800503a:	f000 fca9 	bl	8005990 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800504c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	609a      	str	r2, [r3, #8]
      break;
 8005056:	e04f      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005068:	f000 fc92 	bl	8005990 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689a      	ldr	r2, [r3, #8]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800507a:	609a      	str	r2, [r3, #8]
      break;
 800507c:	e03c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800508a:	461a      	mov	r2, r3
 800508c:	f000 fc04 	bl	8005898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	2150      	movs	r1, #80	; 0x50
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fc5d 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 800509c:	e02c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050aa:	461a      	mov	r2, r3
 80050ac:	f000 fc23 	bl	80058f6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	2160      	movs	r1, #96	; 0x60
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 fc4d 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 80050bc:	e01c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ca:	461a      	mov	r2, r3
 80050cc:	f000 fbe4 	bl	8005898 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2140      	movs	r1, #64	; 0x40
 80050d6:	4618      	mov	r0, r3
 80050d8:	f000 fc3d 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 80050dc:	e00c      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4619      	mov	r1, r3
 80050e8:	4610      	mov	r0, r2
 80050ea:	f000 fc34 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 80050ee:	e003      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
      break;
 80050f4:	e000      	b.n	80050f8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80050f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005108:	7bfb      	ldrb	r3, [r7, #15]
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	00100070 	.word	0x00100070
 8005118:	00100040 	.word	0x00100040
 800511c:	00100030 	.word	0x00100030
 8005120:	00100020 	.word	0x00100020

08005124 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005160:	b480      	push	{r7}
 8005162:	b083      	sub	sp, #12
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005168:	bf00      	nop
 800516a:	370c      	adds	r7, #12
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr

08005174 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a42      	ldr	r2, [pc, #264]	; (8005290 <TIM_Base_SetConfig+0x11c>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d00f      	beq.n	80051ac <TIM_Base_SetConfig+0x38>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005192:	d00b      	beq.n	80051ac <TIM_Base_SetConfig+0x38>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a3f      	ldr	r2, [pc, #252]	; (8005294 <TIM_Base_SetConfig+0x120>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d007      	beq.n	80051ac <TIM_Base_SetConfig+0x38>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a3e      	ldr	r2, [pc, #248]	; (8005298 <TIM_Base_SetConfig+0x124>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d003      	beq.n	80051ac <TIM_Base_SetConfig+0x38>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a3d      	ldr	r2, [pc, #244]	; (800529c <TIM_Base_SetConfig+0x128>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d108      	bne.n	80051be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	4a33      	ldr	r2, [pc, #204]	; (8005290 <TIM_Base_SetConfig+0x11c>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d01b      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051cc:	d017      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a30      	ldr	r2, [pc, #192]	; (8005294 <TIM_Base_SetConfig+0x120>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d013      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a2f      	ldr	r2, [pc, #188]	; (8005298 <TIM_Base_SetConfig+0x124>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d00f      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a2e      	ldr	r2, [pc, #184]	; (800529c <TIM_Base_SetConfig+0x128>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d00b      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a2d      	ldr	r2, [pc, #180]	; (80052a0 <TIM_Base_SetConfig+0x12c>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d007      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a2c      	ldr	r2, [pc, #176]	; (80052a4 <TIM_Base_SetConfig+0x130>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d003      	beq.n	80051fe <TIM_Base_SetConfig+0x8a>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2b      	ldr	r2, [pc, #172]	; (80052a8 <TIM_Base_SetConfig+0x134>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d108      	bne.n	8005210 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	4313      	orrs	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	695b      	ldr	r3, [r3, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	68fa      	ldr	r2, [r7, #12]
 8005222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a16      	ldr	r2, [pc, #88]	; (8005290 <TIM_Base_SetConfig+0x11c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d00f      	beq.n	800525c <TIM_Base_SetConfig+0xe8>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a17      	ldr	r2, [pc, #92]	; (800529c <TIM_Base_SetConfig+0x128>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00b      	beq.n	800525c <TIM_Base_SetConfig+0xe8>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <TIM_Base_SetConfig+0x12c>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d007      	beq.n	800525c <TIM_Base_SetConfig+0xe8>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a15      	ldr	r2, [pc, #84]	; (80052a4 <TIM_Base_SetConfig+0x130>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d003      	beq.n	800525c <TIM_Base_SetConfig+0xe8>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a14      	ldr	r2, [pc, #80]	; (80052a8 <TIM_Base_SetConfig+0x134>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d103      	bne.n	8005264 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	691a      	ldr	r2, [r3, #16]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b01      	cmp	r3, #1
 8005274:	d105      	bne.n	8005282 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	f023 0201 	bic.w	r2, r3, #1
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	611a      	str	r2, [r3, #16]
  }
}
 8005282:	bf00      	nop
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	40012c00 	.word	0x40012c00
 8005294:	40000400 	.word	0x40000400
 8005298:	40000800 	.word	0x40000800
 800529c:	40013400 	.word	0x40013400
 80052a0:	40014000 	.word	0x40014000
 80052a4:	40014400 	.word	0x40014400
 80052a8:	40014800 	.word	0x40014800

080052ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b087      	sub	sp, #28
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6a1b      	ldr	r3, [r3, #32]
 80052ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a1b      	ldr	r3, [r3, #32]
 80052c0:	f023 0201 	bic.w	r2, r3, #1
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	699b      	ldr	r3, [r3, #24]
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f023 0302 	bic.w	r3, r3, #2
 80052f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	697a      	ldr	r2, [r7, #20]
 8005300:	4313      	orrs	r3, r2
 8005302:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4a2c      	ldr	r2, [pc, #176]	; (80053b8 <TIM_OC1_SetConfig+0x10c>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d00f      	beq.n	800532c <TIM_OC1_SetConfig+0x80>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a2b      	ldr	r2, [pc, #172]	; (80053bc <TIM_OC1_SetConfig+0x110>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d00b      	beq.n	800532c <TIM_OC1_SetConfig+0x80>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a2a      	ldr	r2, [pc, #168]	; (80053c0 <TIM_OC1_SetConfig+0x114>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d007      	beq.n	800532c <TIM_OC1_SetConfig+0x80>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a29      	ldr	r2, [pc, #164]	; (80053c4 <TIM_OC1_SetConfig+0x118>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d003      	beq.n	800532c <TIM_OC1_SetConfig+0x80>
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a28      	ldr	r2, [pc, #160]	; (80053c8 <TIM_OC1_SetConfig+0x11c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d10c      	bne.n	8005346 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	f023 0308 	bic.w	r3, r3, #8
 8005332:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f023 0304 	bic.w	r3, r3, #4
 8005344:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a1b      	ldr	r2, [pc, #108]	; (80053b8 <TIM_OC1_SetConfig+0x10c>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00f      	beq.n	800536e <TIM_OC1_SetConfig+0xc2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1a      	ldr	r2, [pc, #104]	; (80053bc <TIM_OC1_SetConfig+0x110>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00b      	beq.n	800536e <TIM_OC1_SetConfig+0xc2>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a19      	ldr	r2, [pc, #100]	; (80053c0 <TIM_OC1_SetConfig+0x114>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d007      	beq.n	800536e <TIM_OC1_SetConfig+0xc2>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a18      	ldr	r2, [pc, #96]	; (80053c4 <TIM_OC1_SetConfig+0x118>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_OC1_SetConfig+0xc2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a17      	ldr	r2, [pc, #92]	; (80053c8 <TIM_OC1_SetConfig+0x11c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d111      	bne.n	8005392 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800537c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	693a      	ldr	r2, [r7, #16]
 8005384:	4313      	orrs	r3, r2
 8005386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	621a      	str	r2, [r3, #32]
}
 80053ac:	bf00      	nop
 80053ae:	371c      	adds	r7, #28
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40013400 	.word	0x40013400
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800

080053cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f023 0210 	bic.w	r2, r3, #16
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005406:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	021b      	lsls	r3, r3, #8
 800540e:	68fa      	ldr	r2, [r7, #12]
 8005410:	4313      	orrs	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f023 0320 	bic.w	r3, r3, #32
 800541a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	011b      	lsls	r3, r3, #4
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a28      	ldr	r2, [pc, #160]	; (80054cc <TIM_OC2_SetConfig+0x100>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_OC2_SetConfig+0x6c>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a27      	ldr	r2, [pc, #156]	; (80054d0 <TIM_OC2_SetConfig+0x104>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d10d      	bne.n	8005454 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800543e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005452:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a1d      	ldr	r2, [pc, #116]	; (80054cc <TIM_OC2_SetConfig+0x100>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d00f      	beq.n	800547c <TIM_OC2_SetConfig+0xb0>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a1c      	ldr	r2, [pc, #112]	; (80054d0 <TIM_OC2_SetConfig+0x104>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00b      	beq.n	800547c <TIM_OC2_SetConfig+0xb0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a1b      	ldr	r2, [pc, #108]	; (80054d4 <TIM_OC2_SetConfig+0x108>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d007      	beq.n	800547c <TIM_OC2_SetConfig+0xb0>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a1a      	ldr	r2, [pc, #104]	; (80054d8 <TIM_OC2_SetConfig+0x10c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_OC2_SetConfig+0xb0>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a19      	ldr	r2, [pc, #100]	; (80054dc <TIM_OC2_SetConfig+0x110>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d113      	bne.n	80054a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005482:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800548a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	695b      	ldr	r3, [r3, #20]
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	4313      	orrs	r3, r2
 8005496:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	699b      	ldr	r3, [r3, #24]
 800549c:	009b      	lsls	r3, r3, #2
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68fa      	ldr	r2, [r7, #12]
 80054ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	621a      	str	r2, [r3, #32]
}
 80054be:	bf00      	nop
 80054c0:	371c      	adds	r7, #28
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	40012c00 	.word	0x40012c00
 80054d0:	40013400 	.word	0x40013400
 80054d4:	40014000 	.word	0x40014000
 80054d8:	40014400 	.word	0x40014400
 80054dc:	40014800 	.word	0x40014800

080054e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800550e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f023 0303 	bic.w	r3, r3, #3
 800551a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	4313      	orrs	r3, r2
 8005524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005526:	697b      	ldr	r3, [r7, #20]
 8005528:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800552c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	021b      	lsls	r3, r3, #8
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a27      	ldr	r2, [pc, #156]	; (80055dc <TIM_OC3_SetConfig+0xfc>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_OC3_SetConfig+0x6a>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a26      	ldr	r2, [pc, #152]	; (80055e0 <TIM_OC3_SetConfig+0x100>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d10d      	bne.n	8005566 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005550:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	021b      	lsls	r3, r3, #8
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	4313      	orrs	r3, r2
 800555c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a1c      	ldr	r2, [pc, #112]	; (80055dc <TIM_OC3_SetConfig+0xfc>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00f      	beq.n	800558e <TIM_OC3_SetConfig+0xae>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a1b      	ldr	r2, [pc, #108]	; (80055e0 <TIM_OC3_SetConfig+0x100>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d00b      	beq.n	800558e <TIM_OC3_SetConfig+0xae>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a1a      	ldr	r2, [pc, #104]	; (80055e4 <TIM_OC3_SetConfig+0x104>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d007      	beq.n	800558e <TIM_OC3_SetConfig+0xae>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a19      	ldr	r2, [pc, #100]	; (80055e8 <TIM_OC3_SetConfig+0x108>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d003      	beq.n	800558e <TIM_OC3_SetConfig+0xae>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a18      	ldr	r2, [pc, #96]	; (80055ec <TIM_OC3_SetConfig+0x10c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d113      	bne.n	80055b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005594:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800559c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	4313      	orrs	r3, r2
 80055b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	68fa      	ldr	r2, [r7, #12]
 80055c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685a      	ldr	r2, [r3, #4]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	697a      	ldr	r2, [r7, #20]
 80055ce:	621a      	str	r2, [r3, #32]
}
 80055d0:	bf00      	nop
 80055d2:	371c      	adds	r7, #28
 80055d4:	46bd      	mov	sp, r7
 80055d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055da:	4770      	bx	lr
 80055dc:	40012c00 	.word	0x40012c00
 80055e0:	40013400 	.word	0x40013400
 80055e4:	40014000 	.word	0x40014000
 80055e8:	40014400 	.word	0x40014400
 80055ec:	40014800 	.word	0x40014800

080055f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800561e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800562a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	021b      	lsls	r3, r3, #8
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800563e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	031b      	lsls	r3, r3, #12
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a28      	ldr	r2, [pc, #160]	; (80056f0 <TIM_OC4_SetConfig+0x100>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d003      	beq.n	800565c <TIM_OC4_SetConfig+0x6c>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a27      	ldr	r2, [pc, #156]	; (80056f4 <TIM_OC4_SetConfig+0x104>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d10d      	bne.n	8005678 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	031b      	lsls	r3, r3, #12
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005676:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a1d      	ldr	r2, [pc, #116]	; (80056f0 <TIM_OC4_SetConfig+0x100>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00f      	beq.n	80056a0 <TIM_OC4_SetConfig+0xb0>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a1c      	ldr	r2, [pc, #112]	; (80056f4 <TIM_OC4_SetConfig+0x104>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00b      	beq.n	80056a0 <TIM_OC4_SetConfig+0xb0>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a1b      	ldr	r2, [pc, #108]	; (80056f8 <TIM_OC4_SetConfig+0x108>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d007      	beq.n	80056a0 <TIM_OC4_SetConfig+0xb0>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a1a      	ldr	r2, [pc, #104]	; (80056fc <TIM_OC4_SetConfig+0x10c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d003      	beq.n	80056a0 <TIM_OC4_SetConfig+0xb0>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a19      	ldr	r2, [pc, #100]	; (8005700 <TIM_OC4_SetConfig+0x110>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d113      	bne.n	80056c8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	019b      	lsls	r3, r3, #6
 80056b6:	693a      	ldr	r2, [r7, #16]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	019b      	lsls	r3, r3, #6
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	4313      	orrs	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	693a      	ldr	r2, [r7, #16]
 80056cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	621a      	str	r2, [r3, #32]
}
 80056e2:	bf00      	nop
 80056e4:	371c      	adds	r7, #28
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
 80056ee:	bf00      	nop
 80056f0:	40012c00 	.word	0x40012c00
 80056f4:	40013400 	.word	0x40013400
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40014400 	.word	0x40014400
 8005700:	40014800 	.word	0x40014800

08005704 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005704:	b480      	push	{r7}
 8005706:	b087      	sub	sp, #28
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a1b      	ldr	r3, [r3, #32]
 8005712:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6a1b      	ldr	r3, [r3, #32]
 8005718:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800572a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005736:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005748:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a17      	ldr	r2, [pc, #92]	; (80057b8 <TIM_OC5_SetConfig+0xb4>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d00f      	beq.n	800577e <TIM_OC5_SetConfig+0x7a>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a16      	ldr	r2, [pc, #88]	; (80057bc <TIM_OC5_SetConfig+0xb8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00b      	beq.n	800577e <TIM_OC5_SetConfig+0x7a>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a15      	ldr	r2, [pc, #84]	; (80057c0 <TIM_OC5_SetConfig+0xbc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d007      	beq.n	800577e <TIM_OC5_SetConfig+0x7a>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a14      	ldr	r2, [pc, #80]	; (80057c4 <TIM_OC5_SetConfig+0xc0>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d003      	beq.n	800577e <TIM_OC5_SetConfig+0x7a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a13      	ldr	r2, [pc, #76]	; (80057c8 <TIM_OC5_SetConfig+0xc4>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d109      	bne.n	8005792 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005784:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	695b      	ldr	r3, [r3, #20]
 800578a:	021b      	lsls	r3, r3, #8
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	40012c00 	.word	0x40012c00
 80057bc:	40013400 	.word	0x40013400
 80057c0:	40014000 	.word	0x40014000
 80057c4:	40014400 	.word	0x40014400
 80057c8:	40014800 	.word	0x40014800

080057cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b087      	sub	sp, #28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6a1b      	ldr	r3, [r3, #32]
 80057e0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	021b      	lsls	r3, r3, #8
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4313      	orrs	r3, r2
 800580a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	051b      	lsls	r3, r3, #20
 800581a:	693a      	ldr	r2, [r7, #16]
 800581c:	4313      	orrs	r3, r2
 800581e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a18      	ldr	r2, [pc, #96]	; (8005884 <TIM_OC6_SetConfig+0xb8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d00f      	beq.n	8005848 <TIM_OC6_SetConfig+0x7c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a17      	ldr	r2, [pc, #92]	; (8005888 <TIM_OC6_SetConfig+0xbc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00b      	beq.n	8005848 <TIM_OC6_SetConfig+0x7c>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a16      	ldr	r2, [pc, #88]	; (800588c <TIM_OC6_SetConfig+0xc0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d007      	beq.n	8005848 <TIM_OC6_SetConfig+0x7c>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a15      	ldr	r2, [pc, #84]	; (8005890 <TIM_OC6_SetConfig+0xc4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_OC6_SetConfig+0x7c>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a14      	ldr	r2, [pc, #80]	; (8005894 <TIM_OC6_SetConfig+0xc8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d109      	bne.n	800585c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800584e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	029b      	lsls	r3, r3, #10
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	4313      	orrs	r3, r2
 800585a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	68fa      	ldr	r2, [r7, #12]
 8005866:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	685a      	ldr	r2, [r3, #4]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	693a      	ldr	r2, [r7, #16]
 8005874:	621a      	str	r2, [r3, #32]
}
 8005876:	bf00      	nop
 8005878:	371c      	adds	r7, #28
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
 8005882:	bf00      	nop
 8005884:	40012c00 	.word	0x40012c00
 8005888:	40013400 	.word	0x40013400
 800588c:	40014000 	.word	0x40014000
 8005890:	40014400 	.word	0x40014400
 8005894:	40014800 	.word	0x40014800

08005898 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	f023 0201 	bic.w	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	699b      	ldr	r3, [r3, #24]
 80058ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	693a      	ldr	r2, [r7, #16]
 80058ca:	4313      	orrs	r3, r2
 80058cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	f023 030a 	bic.w	r3, r3, #10
 80058d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	697a      	ldr	r2, [r7, #20]
 80058e8:	621a      	str	r2, [r3, #32]
}
 80058ea:	bf00      	nop
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr

080058f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b087      	sub	sp, #28
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a1b      	ldr	r3, [r3, #32]
 8005906:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	f023 0210 	bic.w	r2, r3, #16
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005920:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	031b      	lsls	r3, r3, #12
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005932:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	621a      	str	r2, [r3, #32]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005956:	b480      	push	{r7}
 8005958:	b085      	sub	sp, #20
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800596c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005970:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005972:	683a      	ldr	r2, [r7, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	4313      	orrs	r3, r2
 8005978:	f043 0307 	orr.w	r3, r3, #7
 800597c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	609a      	str	r2, [r3, #8]
}
 8005984:	bf00      	nop
 8005986:	3714      	adds	r7, #20
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	021a      	lsls	r2, r3, #8
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	431a      	orrs	r2, r3
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	697a      	ldr	r2, [r7, #20]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	609a      	str	r2, [r3, #8]
}
 80059c4:	bf00      	nop
 80059c6:	371c      	adds	r7, #28
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f003 031f 	and.w	r3, r3, #31
 80059e2:	2201      	movs	r2, #1
 80059e4:	fa02 f303 	lsl.w	r3, r2, r3
 80059e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	6a1a      	ldr	r2, [r3, #32]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	43db      	mvns	r3, r3
 80059f2:	401a      	ands	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6a1a      	ldr	r2, [r3, #32]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	f003 031f 	and.w	r3, r3, #31
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	fa01 f303 	lsl.w	r3, r1, r3
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	621a      	str	r2, [r3, #32]
}
 8005a0e:	bf00      	nop
 8005a10:	371c      	adds	r7, #28
 8005a12:	46bd      	mov	sp, r7
 8005a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a18:	4770      	bx	lr
	...

08005a1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b085      	sub	sp, #20
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d101      	bne.n	8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a30:	2302      	movs	r3, #2
 8005a32:	e065      	b.n	8005b00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2202      	movs	r2, #2
 8005a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a2c      	ldr	r2, [pc, #176]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d004      	beq.n	8005a68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a2b      	ldr	r2, [pc, #172]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d108      	bne.n	8005a7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1b      	ldr	r2, [pc, #108]	; (8005b0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d018      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aaa:	d013      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a18      	ldr	r2, [pc, #96]	; (8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a17      	ldr	r2, [pc, #92]	; (8005b18 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a12      	ldr	r2, [pc, #72]	; (8005b10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a13      	ldr	r2, [pc, #76]	; (8005b1c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d10c      	bne.n	8005aee <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ada:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	68ba      	ldr	r2, [r7, #8]
 8005aec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3714      	adds	r7, #20
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	40012c00 	.word	0x40012c00
 8005b10:	40013400 	.word	0x40013400
 8005b14:	40000400 	.word	0x40000400
 8005b18:	40000800 	.word	0x40000800
 8005b1c:	40014000 	.word	0x40014000

08005b20 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b085      	sub	sp, #20
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
 8005b28:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d101      	bne.n	8005b3c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b38:	2302      	movs	r3, #2
 8005b3a:	e073      	b.n	8005c24 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	695b      	ldr	r3, [r3, #20]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	041b      	lsls	r3, r3, #16
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a19      	ldr	r2, [pc, #100]	; (8005c30 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d004      	beq.n	8005bd8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a18      	ldr	r2, [pc, #96]	; (8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d11c      	bne.n	8005c12 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be2:	051b      	lsls	r3, r3, #20
 8005be4:	4313      	orrs	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	6a1b      	ldr	r3, [r3, #32]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	40012c00 	.word	0x40012c00
 8005c34:	40013400 	.word	0x40013400

08005c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr

08005c88 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005cb8:	bf00      	nop
 8005cba:	370c      	adds	r7, #12
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <_ZdlPvj>:
 8005cc4:	f000 b800 	b.w	8005cc8 <_ZdlPv>

08005cc8 <_ZdlPv>:
 8005cc8:	f000 b800 	b.w	8005ccc <free>

08005ccc <free>:
 8005ccc:	4b02      	ldr	r3, [pc, #8]	; (8005cd8 <free+0xc>)
 8005cce:	4601      	mov	r1, r0
 8005cd0:	6818      	ldr	r0, [r3, #0]
 8005cd2:	f000 bb3f 	b.w	8006354 <_free_r>
 8005cd6:	bf00      	nop
 8005cd8:	20000064 	.word	0x20000064

08005cdc <sbrk_aligned>:
 8005cdc:	b570      	push	{r4, r5, r6, lr}
 8005cde:	4e0e      	ldr	r6, [pc, #56]	; (8005d18 <sbrk_aligned+0x3c>)
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	6831      	ldr	r1, [r6, #0]
 8005ce4:	4605      	mov	r5, r0
 8005ce6:	b911      	cbnz	r1, 8005cee <sbrk_aligned+0x12>
 8005ce8:	f000 fad6 	bl	8006298 <_sbrk_r>
 8005cec:	6030      	str	r0, [r6, #0]
 8005cee:	4621      	mov	r1, r4
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	f000 fad1 	bl	8006298 <_sbrk_r>
 8005cf6:	1c43      	adds	r3, r0, #1
 8005cf8:	d00a      	beq.n	8005d10 <sbrk_aligned+0x34>
 8005cfa:	1cc4      	adds	r4, r0, #3
 8005cfc:	f024 0403 	bic.w	r4, r4, #3
 8005d00:	42a0      	cmp	r0, r4
 8005d02:	d007      	beq.n	8005d14 <sbrk_aligned+0x38>
 8005d04:	1a21      	subs	r1, r4, r0
 8005d06:	4628      	mov	r0, r5
 8005d08:	f000 fac6 	bl	8006298 <_sbrk_r>
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d101      	bne.n	8005d14 <sbrk_aligned+0x38>
 8005d10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005d14:	4620      	mov	r0, r4
 8005d16:	bd70      	pop	{r4, r5, r6, pc}
 8005d18:	200004c8 	.word	0x200004c8

08005d1c <_malloc_r>:
 8005d1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d20:	1ccd      	adds	r5, r1, #3
 8005d22:	f025 0503 	bic.w	r5, r5, #3
 8005d26:	3508      	adds	r5, #8
 8005d28:	2d0c      	cmp	r5, #12
 8005d2a:	bf38      	it	cc
 8005d2c:	250c      	movcc	r5, #12
 8005d2e:	2d00      	cmp	r5, #0
 8005d30:	4607      	mov	r7, r0
 8005d32:	db01      	blt.n	8005d38 <_malloc_r+0x1c>
 8005d34:	42a9      	cmp	r1, r5
 8005d36:	d905      	bls.n	8005d44 <_malloc_r+0x28>
 8005d38:	230c      	movs	r3, #12
 8005d3a:	603b      	str	r3, [r7, #0]
 8005d3c:	2600      	movs	r6, #0
 8005d3e:	4630      	mov	r0, r6
 8005d40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e18 <_malloc_r+0xfc>
 8005d48:	f000 f868 	bl	8005e1c <__malloc_lock>
 8005d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d50:	461c      	mov	r4, r3
 8005d52:	bb5c      	cbnz	r4, 8005dac <_malloc_r+0x90>
 8005d54:	4629      	mov	r1, r5
 8005d56:	4638      	mov	r0, r7
 8005d58:	f7ff ffc0 	bl	8005cdc <sbrk_aligned>
 8005d5c:	1c43      	adds	r3, r0, #1
 8005d5e:	4604      	mov	r4, r0
 8005d60:	d155      	bne.n	8005e0e <_malloc_r+0xf2>
 8005d62:	f8d8 4000 	ldr.w	r4, [r8]
 8005d66:	4626      	mov	r6, r4
 8005d68:	2e00      	cmp	r6, #0
 8005d6a:	d145      	bne.n	8005df8 <_malloc_r+0xdc>
 8005d6c:	2c00      	cmp	r4, #0
 8005d6e:	d048      	beq.n	8005e02 <_malloc_r+0xe6>
 8005d70:	6823      	ldr	r3, [r4, #0]
 8005d72:	4631      	mov	r1, r6
 8005d74:	4638      	mov	r0, r7
 8005d76:	eb04 0903 	add.w	r9, r4, r3
 8005d7a:	f000 fa8d 	bl	8006298 <_sbrk_r>
 8005d7e:	4581      	cmp	r9, r0
 8005d80:	d13f      	bne.n	8005e02 <_malloc_r+0xe6>
 8005d82:	6821      	ldr	r1, [r4, #0]
 8005d84:	1a6d      	subs	r5, r5, r1
 8005d86:	4629      	mov	r1, r5
 8005d88:	4638      	mov	r0, r7
 8005d8a:	f7ff ffa7 	bl	8005cdc <sbrk_aligned>
 8005d8e:	3001      	adds	r0, #1
 8005d90:	d037      	beq.n	8005e02 <_malloc_r+0xe6>
 8005d92:	6823      	ldr	r3, [r4, #0]
 8005d94:	442b      	add	r3, r5
 8005d96:	6023      	str	r3, [r4, #0]
 8005d98:	f8d8 3000 	ldr.w	r3, [r8]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d038      	beq.n	8005e12 <_malloc_r+0xf6>
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	42a2      	cmp	r2, r4
 8005da4:	d12b      	bne.n	8005dfe <_malloc_r+0xe2>
 8005da6:	2200      	movs	r2, #0
 8005da8:	605a      	str	r2, [r3, #4]
 8005daa:	e00f      	b.n	8005dcc <_malloc_r+0xb0>
 8005dac:	6822      	ldr	r2, [r4, #0]
 8005dae:	1b52      	subs	r2, r2, r5
 8005db0:	d41f      	bmi.n	8005df2 <_malloc_r+0xd6>
 8005db2:	2a0b      	cmp	r2, #11
 8005db4:	d917      	bls.n	8005de6 <_malloc_r+0xca>
 8005db6:	1961      	adds	r1, r4, r5
 8005db8:	42a3      	cmp	r3, r4
 8005dba:	6025      	str	r5, [r4, #0]
 8005dbc:	bf18      	it	ne
 8005dbe:	6059      	strne	r1, [r3, #4]
 8005dc0:	6863      	ldr	r3, [r4, #4]
 8005dc2:	bf08      	it	eq
 8005dc4:	f8c8 1000 	streq.w	r1, [r8]
 8005dc8:	5162      	str	r2, [r4, r5]
 8005dca:	604b      	str	r3, [r1, #4]
 8005dcc:	4638      	mov	r0, r7
 8005dce:	f104 060b 	add.w	r6, r4, #11
 8005dd2:	f000 f829 	bl	8005e28 <__malloc_unlock>
 8005dd6:	f026 0607 	bic.w	r6, r6, #7
 8005dda:	1d23      	adds	r3, r4, #4
 8005ddc:	1af2      	subs	r2, r6, r3
 8005dde:	d0ae      	beq.n	8005d3e <_malloc_r+0x22>
 8005de0:	1b9b      	subs	r3, r3, r6
 8005de2:	50a3      	str	r3, [r4, r2]
 8005de4:	e7ab      	b.n	8005d3e <_malloc_r+0x22>
 8005de6:	42a3      	cmp	r3, r4
 8005de8:	6862      	ldr	r2, [r4, #4]
 8005dea:	d1dd      	bne.n	8005da8 <_malloc_r+0x8c>
 8005dec:	f8c8 2000 	str.w	r2, [r8]
 8005df0:	e7ec      	b.n	8005dcc <_malloc_r+0xb0>
 8005df2:	4623      	mov	r3, r4
 8005df4:	6864      	ldr	r4, [r4, #4]
 8005df6:	e7ac      	b.n	8005d52 <_malloc_r+0x36>
 8005df8:	4634      	mov	r4, r6
 8005dfa:	6876      	ldr	r6, [r6, #4]
 8005dfc:	e7b4      	b.n	8005d68 <_malloc_r+0x4c>
 8005dfe:	4613      	mov	r3, r2
 8005e00:	e7cc      	b.n	8005d9c <_malloc_r+0x80>
 8005e02:	230c      	movs	r3, #12
 8005e04:	603b      	str	r3, [r7, #0]
 8005e06:	4638      	mov	r0, r7
 8005e08:	f000 f80e 	bl	8005e28 <__malloc_unlock>
 8005e0c:	e797      	b.n	8005d3e <_malloc_r+0x22>
 8005e0e:	6025      	str	r5, [r4, #0]
 8005e10:	e7dc      	b.n	8005dcc <_malloc_r+0xb0>
 8005e12:	605b      	str	r3, [r3, #4]
 8005e14:	deff      	udf	#255	; 0xff
 8005e16:	bf00      	nop
 8005e18:	200004c4 	.word	0x200004c4

08005e1c <__malloc_lock>:
 8005e1c:	4801      	ldr	r0, [pc, #4]	; (8005e24 <__malloc_lock+0x8>)
 8005e1e:	f000 ba88 	b.w	8006332 <__retarget_lock_acquire_recursive>
 8005e22:	bf00      	nop
 8005e24:	2000060c 	.word	0x2000060c

08005e28 <__malloc_unlock>:
 8005e28:	4801      	ldr	r0, [pc, #4]	; (8005e30 <__malloc_unlock+0x8>)
 8005e2a:	f000 ba83 	b.w	8006334 <__retarget_lock_release_recursive>
 8005e2e:	bf00      	nop
 8005e30:	2000060c 	.word	0x2000060c

08005e34 <std>:
 8005e34:	2300      	movs	r3, #0
 8005e36:	b510      	push	{r4, lr}
 8005e38:	4604      	mov	r4, r0
 8005e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e42:	6083      	str	r3, [r0, #8]
 8005e44:	8181      	strh	r1, [r0, #12]
 8005e46:	6643      	str	r3, [r0, #100]	; 0x64
 8005e48:	81c2      	strh	r2, [r0, #14]
 8005e4a:	6183      	str	r3, [r0, #24]
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	2208      	movs	r2, #8
 8005e50:	305c      	adds	r0, #92	; 0x5c
 8005e52:	f000 f9e5 	bl	8006220 <memset>
 8005e56:	4b0d      	ldr	r3, [pc, #52]	; (8005e8c <std+0x58>)
 8005e58:	6263      	str	r3, [r4, #36]	; 0x24
 8005e5a:	4b0d      	ldr	r3, [pc, #52]	; (8005e90 <std+0x5c>)
 8005e5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e5e:	4b0d      	ldr	r3, [pc, #52]	; (8005e94 <std+0x60>)
 8005e60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <std+0x64>)
 8005e64:	6323      	str	r3, [r4, #48]	; 0x30
 8005e66:	4b0d      	ldr	r3, [pc, #52]	; (8005e9c <std+0x68>)
 8005e68:	6224      	str	r4, [r4, #32]
 8005e6a:	429c      	cmp	r4, r3
 8005e6c:	d006      	beq.n	8005e7c <std+0x48>
 8005e6e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005e72:	4294      	cmp	r4, r2
 8005e74:	d002      	beq.n	8005e7c <std+0x48>
 8005e76:	33d0      	adds	r3, #208	; 0xd0
 8005e78:	429c      	cmp	r4, r3
 8005e7a:	d105      	bne.n	8005e88 <std+0x54>
 8005e7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e84:	f000 ba54 	b.w	8006330 <__retarget_lock_init_recursive>
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	bf00      	nop
 8005e8c:	08006071 	.word	0x08006071
 8005e90:	08006093 	.word	0x08006093
 8005e94:	080060cb 	.word	0x080060cb
 8005e98:	080060ef 	.word	0x080060ef
 8005e9c:	200004cc 	.word	0x200004cc

08005ea0 <stdio_exit_handler>:
 8005ea0:	4a02      	ldr	r2, [pc, #8]	; (8005eac <stdio_exit_handler+0xc>)
 8005ea2:	4903      	ldr	r1, [pc, #12]	; (8005eb0 <stdio_exit_handler+0x10>)
 8005ea4:	4803      	ldr	r0, [pc, #12]	; (8005eb4 <stdio_exit_handler+0x14>)
 8005ea6:	f000 b869 	b.w	8005f7c <_fwalk_sglue>
 8005eaa:	bf00      	nop
 8005eac:	2000000c 	.word	0x2000000c
 8005eb0:	080064f9 	.word	0x080064f9
 8005eb4:	20000018 	.word	0x20000018

08005eb8 <cleanup_stdio>:
 8005eb8:	6841      	ldr	r1, [r0, #4]
 8005eba:	4b0c      	ldr	r3, [pc, #48]	; (8005eec <cleanup_stdio+0x34>)
 8005ebc:	4299      	cmp	r1, r3
 8005ebe:	b510      	push	{r4, lr}
 8005ec0:	4604      	mov	r4, r0
 8005ec2:	d001      	beq.n	8005ec8 <cleanup_stdio+0x10>
 8005ec4:	f000 fb18 	bl	80064f8 <_fflush_r>
 8005ec8:	68a1      	ldr	r1, [r4, #8]
 8005eca:	4b09      	ldr	r3, [pc, #36]	; (8005ef0 <cleanup_stdio+0x38>)
 8005ecc:	4299      	cmp	r1, r3
 8005ece:	d002      	beq.n	8005ed6 <cleanup_stdio+0x1e>
 8005ed0:	4620      	mov	r0, r4
 8005ed2:	f000 fb11 	bl	80064f8 <_fflush_r>
 8005ed6:	68e1      	ldr	r1, [r4, #12]
 8005ed8:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <cleanup_stdio+0x3c>)
 8005eda:	4299      	cmp	r1, r3
 8005edc:	d004      	beq.n	8005ee8 <cleanup_stdio+0x30>
 8005ede:	4620      	mov	r0, r4
 8005ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee4:	f000 bb08 	b.w	80064f8 <_fflush_r>
 8005ee8:	bd10      	pop	{r4, pc}
 8005eea:	bf00      	nop
 8005eec:	200004cc 	.word	0x200004cc
 8005ef0:	20000534 	.word	0x20000534
 8005ef4:	2000059c 	.word	0x2000059c

08005ef8 <global_stdio_init.part.0>:
 8005ef8:	b510      	push	{r4, lr}
 8005efa:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <global_stdio_init.part.0+0x30>)
 8005efc:	4c0b      	ldr	r4, [pc, #44]	; (8005f2c <global_stdio_init.part.0+0x34>)
 8005efe:	4a0c      	ldr	r2, [pc, #48]	; (8005f30 <global_stdio_init.part.0+0x38>)
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	4620      	mov	r0, r4
 8005f04:	2200      	movs	r2, #0
 8005f06:	2104      	movs	r1, #4
 8005f08:	f7ff ff94 	bl	8005e34 <std>
 8005f0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005f10:	2201      	movs	r2, #1
 8005f12:	2109      	movs	r1, #9
 8005f14:	f7ff ff8e 	bl	8005e34 <std>
 8005f18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f22:	2112      	movs	r1, #18
 8005f24:	f7ff bf86 	b.w	8005e34 <std>
 8005f28:	20000604 	.word	0x20000604
 8005f2c:	200004cc 	.word	0x200004cc
 8005f30:	08005ea1 	.word	0x08005ea1

08005f34 <__sfp_lock_acquire>:
 8005f34:	4801      	ldr	r0, [pc, #4]	; (8005f3c <__sfp_lock_acquire+0x8>)
 8005f36:	f000 b9fc 	b.w	8006332 <__retarget_lock_acquire_recursive>
 8005f3a:	bf00      	nop
 8005f3c:	2000060d 	.word	0x2000060d

08005f40 <__sfp_lock_release>:
 8005f40:	4801      	ldr	r0, [pc, #4]	; (8005f48 <__sfp_lock_release+0x8>)
 8005f42:	f000 b9f7 	b.w	8006334 <__retarget_lock_release_recursive>
 8005f46:	bf00      	nop
 8005f48:	2000060d 	.word	0x2000060d

08005f4c <__sinit>:
 8005f4c:	b510      	push	{r4, lr}
 8005f4e:	4604      	mov	r4, r0
 8005f50:	f7ff fff0 	bl	8005f34 <__sfp_lock_acquire>
 8005f54:	6a23      	ldr	r3, [r4, #32]
 8005f56:	b11b      	cbz	r3, 8005f60 <__sinit+0x14>
 8005f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f5c:	f7ff bff0 	b.w	8005f40 <__sfp_lock_release>
 8005f60:	4b04      	ldr	r3, [pc, #16]	; (8005f74 <__sinit+0x28>)
 8005f62:	6223      	str	r3, [r4, #32]
 8005f64:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <__sinit+0x2c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1f5      	bne.n	8005f58 <__sinit+0xc>
 8005f6c:	f7ff ffc4 	bl	8005ef8 <global_stdio_init.part.0>
 8005f70:	e7f2      	b.n	8005f58 <__sinit+0xc>
 8005f72:	bf00      	nop
 8005f74:	08005eb9 	.word	0x08005eb9
 8005f78:	20000604 	.word	0x20000604

08005f7c <_fwalk_sglue>:
 8005f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f80:	4607      	mov	r7, r0
 8005f82:	4688      	mov	r8, r1
 8005f84:	4614      	mov	r4, r2
 8005f86:	2600      	movs	r6, #0
 8005f88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f8c:	f1b9 0901 	subs.w	r9, r9, #1
 8005f90:	d505      	bpl.n	8005f9e <_fwalk_sglue+0x22>
 8005f92:	6824      	ldr	r4, [r4, #0]
 8005f94:	2c00      	cmp	r4, #0
 8005f96:	d1f7      	bne.n	8005f88 <_fwalk_sglue+0xc>
 8005f98:	4630      	mov	r0, r6
 8005f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f9e:	89ab      	ldrh	r3, [r5, #12]
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d907      	bls.n	8005fb4 <_fwalk_sglue+0x38>
 8005fa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005fa8:	3301      	adds	r3, #1
 8005faa:	d003      	beq.n	8005fb4 <_fwalk_sglue+0x38>
 8005fac:	4629      	mov	r1, r5
 8005fae:	4638      	mov	r0, r7
 8005fb0:	47c0      	blx	r8
 8005fb2:	4306      	orrs	r6, r0
 8005fb4:	3568      	adds	r5, #104	; 0x68
 8005fb6:	e7e9      	b.n	8005f8c <_fwalk_sglue+0x10>

08005fb8 <_puts_r>:
 8005fb8:	6a03      	ldr	r3, [r0, #32]
 8005fba:	b570      	push	{r4, r5, r6, lr}
 8005fbc:	6884      	ldr	r4, [r0, #8]
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	460e      	mov	r6, r1
 8005fc2:	b90b      	cbnz	r3, 8005fc8 <_puts_r+0x10>
 8005fc4:	f7ff ffc2 	bl	8005f4c <__sinit>
 8005fc8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fca:	07db      	lsls	r3, r3, #31
 8005fcc:	d405      	bmi.n	8005fda <_puts_r+0x22>
 8005fce:	89a3      	ldrh	r3, [r4, #12]
 8005fd0:	0598      	lsls	r0, r3, #22
 8005fd2:	d402      	bmi.n	8005fda <_puts_r+0x22>
 8005fd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fd6:	f000 f9ac 	bl	8006332 <__retarget_lock_acquire_recursive>
 8005fda:	89a3      	ldrh	r3, [r4, #12]
 8005fdc:	0719      	lsls	r1, r3, #28
 8005fde:	d513      	bpl.n	8006008 <_puts_r+0x50>
 8005fe0:	6923      	ldr	r3, [r4, #16]
 8005fe2:	b18b      	cbz	r3, 8006008 <_puts_r+0x50>
 8005fe4:	3e01      	subs	r6, #1
 8005fe6:	68a3      	ldr	r3, [r4, #8]
 8005fe8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005fec:	3b01      	subs	r3, #1
 8005fee:	60a3      	str	r3, [r4, #8]
 8005ff0:	b9e9      	cbnz	r1, 800602e <_puts_r+0x76>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	da2e      	bge.n	8006054 <_puts_r+0x9c>
 8005ff6:	4622      	mov	r2, r4
 8005ff8:	210a      	movs	r1, #10
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 f87b 	bl	80060f6 <__swbuf_r>
 8006000:	3001      	adds	r0, #1
 8006002:	d007      	beq.n	8006014 <_puts_r+0x5c>
 8006004:	250a      	movs	r5, #10
 8006006:	e007      	b.n	8006018 <_puts_r+0x60>
 8006008:	4621      	mov	r1, r4
 800600a:	4628      	mov	r0, r5
 800600c:	f000 f8b0 	bl	8006170 <__swsetup_r>
 8006010:	2800      	cmp	r0, #0
 8006012:	d0e7      	beq.n	8005fe4 <_puts_r+0x2c>
 8006014:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800601a:	07da      	lsls	r2, r3, #31
 800601c:	d405      	bmi.n	800602a <_puts_r+0x72>
 800601e:	89a3      	ldrh	r3, [r4, #12]
 8006020:	059b      	lsls	r3, r3, #22
 8006022:	d402      	bmi.n	800602a <_puts_r+0x72>
 8006024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006026:	f000 f985 	bl	8006334 <__retarget_lock_release_recursive>
 800602a:	4628      	mov	r0, r5
 800602c:	bd70      	pop	{r4, r5, r6, pc}
 800602e:	2b00      	cmp	r3, #0
 8006030:	da04      	bge.n	800603c <_puts_r+0x84>
 8006032:	69a2      	ldr	r2, [r4, #24]
 8006034:	429a      	cmp	r2, r3
 8006036:	dc06      	bgt.n	8006046 <_puts_r+0x8e>
 8006038:	290a      	cmp	r1, #10
 800603a:	d004      	beq.n	8006046 <_puts_r+0x8e>
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	6022      	str	r2, [r4, #0]
 8006042:	7019      	strb	r1, [r3, #0]
 8006044:	e7cf      	b.n	8005fe6 <_puts_r+0x2e>
 8006046:	4622      	mov	r2, r4
 8006048:	4628      	mov	r0, r5
 800604a:	f000 f854 	bl	80060f6 <__swbuf_r>
 800604e:	3001      	adds	r0, #1
 8006050:	d1c9      	bne.n	8005fe6 <_puts_r+0x2e>
 8006052:	e7df      	b.n	8006014 <_puts_r+0x5c>
 8006054:	6823      	ldr	r3, [r4, #0]
 8006056:	250a      	movs	r5, #10
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	6022      	str	r2, [r4, #0]
 800605c:	701d      	strb	r5, [r3, #0]
 800605e:	e7db      	b.n	8006018 <_puts_r+0x60>

08006060 <puts>:
 8006060:	4b02      	ldr	r3, [pc, #8]	; (800606c <puts+0xc>)
 8006062:	4601      	mov	r1, r0
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	f7ff bfa7 	b.w	8005fb8 <_puts_r>
 800606a:	bf00      	nop
 800606c:	20000064 	.word	0x20000064

08006070 <__sread>:
 8006070:	b510      	push	{r4, lr}
 8006072:	460c      	mov	r4, r1
 8006074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006078:	f000 f8fc 	bl	8006274 <_read_r>
 800607c:	2800      	cmp	r0, #0
 800607e:	bfab      	itete	ge
 8006080:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006082:	89a3      	ldrhlt	r3, [r4, #12]
 8006084:	181b      	addge	r3, r3, r0
 8006086:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800608a:	bfac      	ite	ge
 800608c:	6563      	strge	r3, [r4, #84]	; 0x54
 800608e:	81a3      	strhlt	r3, [r4, #12]
 8006090:	bd10      	pop	{r4, pc}

08006092 <__swrite>:
 8006092:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006096:	461f      	mov	r7, r3
 8006098:	898b      	ldrh	r3, [r1, #12]
 800609a:	05db      	lsls	r3, r3, #23
 800609c:	4605      	mov	r5, r0
 800609e:	460c      	mov	r4, r1
 80060a0:	4616      	mov	r6, r2
 80060a2:	d505      	bpl.n	80060b0 <__swrite+0x1e>
 80060a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a8:	2302      	movs	r3, #2
 80060aa:	2200      	movs	r2, #0
 80060ac:	f000 f8d0 	bl	8006250 <_lseek_r>
 80060b0:	89a3      	ldrh	r3, [r4, #12]
 80060b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ba:	81a3      	strh	r3, [r4, #12]
 80060bc:	4632      	mov	r2, r6
 80060be:	463b      	mov	r3, r7
 80060c0:	4628      	mov	r0, r5
 80060c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060c6:	f000 b8f7 	b.w	80062b8 <_write_r>

080060ca <__sseek>:
 80060ca:	b510      	push	{r4, lr}
 80060cc:	460c      	mov	r4, r1
 80060ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d2:	f000 f8bd 	bl	8006250 <_lseek_r>
 80060d6:	1c43      	adds	r3, r0, #1
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	bf15      	itete	ne
 80060dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80060de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80060e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80060e6:	81a3      	strheq	r3, [r4, #12]
 80060e8:	bf18      	it	ne
 80060ea:	81a3      	strhne	r3, [r4, #12]
 80060ec:	bd10      	pop	{r4, pc}

080060ee <__sclose>:
 80060ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060f2:	f000 b89d 	b.w	8006230 <_close_r>

080060f6 <__swbuf_r>:
 80060f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f8:	460e      	mov	r6, r1
 80060fa:	4614      	mov	r4, r2
 80060fc:	4605      	mov	r5, r0
 80060fe:	b118      	cbz	r0, 8006108 <__swbuf_r+0x12>
 8006100:	6a03      	ldr	r3, [r0, #32]
 8006102:	b90b      	cbnz	r3, 8006108 <__swbuf_r+0x12>
 8006104:	f7ff ff22 	bl	8005f4c <__sinit>
 8006108:	69a3      	ldr	r3, [r4, #24]
 800610a:	60a3      	str	r3, [r4, #8]
 800610c:	89a3      	ldrh	r3, [r4, #12]
 800610e:	071a      	lsls	r2, r3, #28
 8006110:	d525      	bpl.n	800615e <__swbuf_r+0x68>
 8006112:	6923      	ldr	r3, [r4, #16]
 8006114:	b31b      	cbz	r3, 800615e <__swbuf_r+0x68>
 8006116:	6823      	ldr	r3, [r4, #0]
 8006118:	6922      	ldr	r2, [r4, #16]
 800611a:	1a98      	subs	r0, r3, r2
 800611c:	6963      	ldr	r3, [r4, #20]
 800611e:	b2f6      	uxtb	r6, r6
 8006120:	4283      	cmp	r3, r0
 8006122:	4637      	mov	r7, r6
 8006124:	dc04      	bgt.n	8006130 <__swbuf_r+0x3a>
 8006126:	4621      	mov	r1, r4
 8006128:	4628      	mov	r0, r5
 800612a:	f000 f9e5 	bl	80064f8 <_fflush_r>
 800612e:	b9e0      	cbnz	r0, 800616a <__swbuf_r+0x74>
 8006130:	68a3      	ldr	r3, [r4, #8]
 8006132:	3b01      	subs	r3, #1
 8006134:	60a3      	str	r3, [r4, #8]
 8006136:	6823      	ldr	r3, [r4, #0]
 8006138:	1c5a      	adds	r2, r3, #1
 800613a:	6022      	str	r2, [r4, #0]
 800613c:	701e      	strb	r6, [r3, #0]
 800613e:	6962      	ldr	r2, [r4, #20]
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	429a      	cmp	r2, r3
 8006144:	d004      	beq.n	8006150 <__swbuf_r+0x5a>
 8006146:	89a3      	ldrh	r3, [r4, #12]
 8006148:	07db      	lsls	r3, r3, #31
 800614a:	d506      	bpl.n	800615a <__swbuf_r+0x64>
 800614c:	2e0a      	cmp	r6, #10
 800614e:	d104      	bne.n	800615a <__swbuf_r+0x64>
 8006150:	4621      	mov	r1, r4
 8006152:	4628      	mov	r0, r5
 8006154:	f000 f9d0 	bl	80064f8 <_fflush_r>
 8006158:	b938      	cbnz	r0, 800616a <__swbuf_r+0x74>
 800615a:	4638      	mov	r0, r7
 800615c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800615e:	4621      	mov	r1, r4
 8006160:	4628      	mov	r0, r5
 8006162:	f000 f805 	bl	8006170 <__swsetup_r>
 8006166:	2800      	cmp	r0, #0
 8006168:	d0d5      	beq.n	8006116 <__swbuf_r+0x20>
 800616a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800616e:	e7f4      	b.n	800615a <__swbuf_r+0x64>

08006170 <__swsetup_r>:
 8006170:	b538      	push	{r3, r4, r5, lr}
 8006172:	4b2a      	ldr	r3, [pc, #168]	; (800621c <__swsetup_r+0xac>)
 8006174:	4605      	mov	r5, r0
 8006176:	6818      	ldr	r0, [r3, #0]
 8006178:	460c      	mov	r4, r1
 800617a:	b118      	cbz	r0, 8006184 <__swsetup_r+0x14>
 800617c:	6a03      	ldr	r3, [r0, #32]
 800617e:	b90b      	cbnz	r3, 8006184 <__swsetup_r+0x14>
 8006180:	f7ff fee4 	bl	8005f4c <__sinit>
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800618a:	0718      	lsls	r0, r3, #28
 800618c:	d422      	bmi.n	80061d4 <__swsetup_r+0x64>
 800618e:	06d9      	lsls	r1, r3, #27
 8006190:	d407      	bmi.n	80061a2 <__swsetup_r+0x32>
 8006192:	2309      	movs	r3, #9
 8006194:	602b      	str	r3, [r5, #0]
 8006196:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800619a:	81a3      	strh	r3, [r4, #12]
 800619c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80061a0:	e034      	b.n	800620c <__swsetup_r+0x9c>
 80061a2:	0758      	lsls	r0, r3, #29
 80061a4:	d512      	bpl.n	80061cc <__swsetup_r+0x5c>
 80061a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80061a8:	b141      	cbz	r1, 80061bc <__swsetup_r+0x4c>
 80061aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80061ae:	4299      	cmp	r1, r3
 80061b0:	d002      	beq.n	80061b8 <__swsetup_r+0x48>
 80061b2:	4628      	mov	r0, r5
 80061b4:	f000 f8ce 	bl	8006354 <_free_r>
 80061b8:	2300      	movs	r3, #0
 80061ba:	6363      	str	r3, [r4, #52]	; 0x34
 80061bc:	89a3      	ldrh	r3, [r4, #12]
 80061be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80061c2:	81a3      	strh	r3, [r4, #12]
 80061c4:	2300      	movs	r3, #0
 80061c6:	6063      	str	r3, [r4, #4]
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	6023      	str	r3, [r4, #0]
 80061cc:	89a3      	ldrh	r3, [r4, #12]
 80061ce:	f043 0308 	orr.w	r3, r3, #8
 80061d2:	81a3      	strh	r3, [r4, #12]
 80061d4:	6923      	ldr	r3, [r4, #16]
 80061d6:	b94b      	cbnz	r3, 80061ec <__swsetup_r+0x7c>
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80061de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061e2:	d003      	beq.n	80061ec <__swsetup_r+0x7c>
 80061e4:	4621      	mov	r1, r4
 80061e6:	4628      	mov	r0, r5
 80061e8:	f000 f9d4 	bl	8006594 <__smakebuf_r>
 80061ec:	89a0      	ldrh	r0, [r4, #12]
 80061ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80061f2:	f010 0301 	ands.w	r3, r0, #1
 80061f6:	d00a      	beq.n	800620e <__swsetup_r+0x9e>
 80061f8:	2300      	movs	r3, #0
 80061fa:	60a3      	str	r3, [r4, #8]
 80061fc:	6963      	ldr	r3, [r4, #20]
 80061fe:	425b      	negs	r3, r3
 8006200:	61a3      	str	r3, [r4, #24]
 8006202:	6923      	ldr	r3, [r4, #16]
 8006204:	b943      	cbnz	r3, 8006218 <__swsetup_r+0xa8>
 8006206:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800620a:	d1c4      	bne.n	8006196 <__swsetup_r+0x26>
 800620c:	bd38      	pop	{r3, r4, r5, pc}
 800620e:	0781      	lsls	r1, r0, #30
 8006210:	bf58      	it	pl
 8006212:	6963      	ldrpl	r3, [r4, #20]
 8006214:	60a3      	str	r3, [r4, #8]
 8006216:	e7f4      	b.n	8006202 <__swsetup_r+0x92>
 8006218:	2000      	movs	r0, #0
 800621a:	e7f7      	b.n	800620c <__swsetup_r+0x9c>
 800621c:	20000064 	.word	0x20000064

08006220 <memset>:
 8006220:	4402      	add	r2, r0
 8006222:	4603      	mov	r3, r0
 8006224:	4293      	cmp	r3, r2
 8006226:	d100      	bne.n	800622a <memset+0xa>
 8006228:	4770      	bx	lr
 800622a:	f803 1b01 	strb.w	r1, [r3], #1
 800622e:	e7f9      	b.n	8006224 <memset+0x4>

08006230 <_close_r>:
 8006230:	b538      	push	{r3, r4, r5, lr}
 8006232:	4d06      	ldr	r5, [pc, #24]	; (800624c <_close_r+0x1c>)
 8006234:	2300      	movs	r3, #0
 8006236:	4604      	mov	r4, r0
 8006238:	4608      	mov	r0, r1
 800623a:	602b      	str	r3, [r5, #0]
 800623c:	f7fc facb 	bl	80027d6 <_close>
 8006240:	1c43      	adds	r3, r0, #1
 8006242:	d102      	bne.n	800624a <_close_r+0x1a>
 8006244:	682b      	ldr	r3, [r5, #0]
 8006246:	b103      	cbz	r3, 800624a <_close_r+0x1a>
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	bd38      	pop	{r3, r4, r5, pc}
 800624c:	20000608 	.word	0x20000608

08006250 <_lseek_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4d07      	ldr	r5, [pc, #28]	; (8006270 <_lseek_r+0x20>)
 8006254:	4604      	mov	r4, r0
 8006256:	4608      	mov	r0, r1
 8006258:	4611      	mov	r1, r2
 800625a:	2200      	movs	r2, #0
 800625c:	602a      	str	r2, [r5, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	f7fc fae0 	bl	8002824 <_lseek>
 8006264:	1c43      	adds	r3, r0, #1
 8006266:	d102      	bne.n	800626e <_lseek_r+0x1e>
 8006268:	682b      	ldr	r3, [r5, #0]
 800626a:	b103      	cbz	r3, 800626e <_lseek_r+0x1e>
 800626c:	6023      	str	r3, [r4, #0]
 800626e:	bd38      	pop	{r3, r4, r5, pc}
 8006270:	20000608 	.word	0x20000608

08006274 <_read_r>:
 8006274:	b538      	push	{r3, r4, r5, lr}
 8006276:	4d07      	ldr	r5, [pc, #28]	; (8006294 <_read_r+0x20>)
 8006278:	4604      	mov	r4, r0
 800627a:	4608      	mov	r0, r1
 800627c:	4611      	mov	r1, r2
 800627e:	2200      	movs	r2, #0
 8006280:	602a      	str	r2, [r5, #0]
 8006282:	461a      	mov	r2, r3
 8006284:	f7fc fa6e 	bl	8002764 <_read>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <_read_r+0x1e>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	b103      	cbz	r3, 8006292 <_read_r+0x1e>
 8006290:	6023      	str	r3, [r4, #0]
 8006292:	bd38      	pop	{r3, r4, r5, pc}
 8006294:	20000608 	.word	0x20000608

08006298 <_sbrk_r>:
 8006298:	b538      	push	{r3, r4, r5, lr}
 800629a:	4d06      	ldr	r5, [pc, #24]	; (80062b4 <_sbrk_r+0x1c>)
 800629c:	2300      	movs	r3, #0
 800629e:	4604      	mov	r4, r0
 80062a0:	4608      	mov	r0, r1
 80062a2:	602b      	str	r3, [r5, #0]
 80062a4:	f7fc facc 	bl	8002840 <_sbrk>
 80062a8:	1c43      	adds	r3, r0, #1
 80062aa:	d102      	bne.n	80062b2 <_sbrk_r+0x1a>
 80062ac:	682b      	ldr	r3, [r5, #0]
 80062ae:	b103      	cbz	r3, 80062b2 <_sbrk_r+0x1a>
 80062b0:	6023      	str	r3, [r4, #0]
 80062b2:	bd38      	pop	{r3, r4, r5, pc}
 80062b4:	20000608 	.word	0x20000608

080062b8 <_write_r>:
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4d07      	ldr	r5, [pc, #28]	; (80062d8 <_write_r+0x20>)
 80062bc:	4604      	mov	r4, r0
 80062be:	4608      	mov	r0, r1
 80062c0:	4611      	mov	r1, r2
 80062c2:	2200      	movs	r2, #0
 80062c4:	602a      	str	r2, [r5, #0]
 80062c6:	461a      	mov	r2, r3
 80062c8:	f7fc fa69 	bl	800279e <_write>
 80062cc:	1c43      	adds	r3, r0, #1
 80062ce:	d102      	bne.n	80062d6 <_write_r+0x1e>
 80062d0:	682b      	ldr	r3, [r5, #0]
 80062d2:	b103      	cbz	r3, 80062d6 <_write_r+0x1e>
 80062d4:	6023      	str	r3, [r4, #0]
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	20000608 	.word	0x20000608

080062dc <__errno>:
 80062dc:	4b01      	ldr	r3, [pc, #4]	; (80062e4 <__errno+0x8>)
 80062de:	6818      	ldr	r0, [r3, #0]
 80062e0:	4770      	bx	lr
 80062e2:	bf00      	nop
 80062e4:	20000064 	.word	0x20000064

080062e8 <__libc_init_array>:
 80062e8:	b570      	push	{r4, r5, r6, lr}
 80062ea:	4d0d      	ldr	r5, [pc, #52]	; (8006320 <__libc_init_array+0x38>)
 80062ec:	4c0d      	ldr	r4, [pc, #52]	; (8006324 <__libc_init_array+0x3c>)
 80062ee:	1b64      	subs	r4, r4, r5
 80062f0:	10a4      	asrs	r4, r4, #2
 80062f2:	2600      	movs	r6, #0
 80062f4:	42a6      	cmp	r6, r4
 80062f6:	d109      	bne.n	800630c <__libc_init_array+0x24>
 80062f8:	4d0b      	ldr	r5, [pc, #44]	; (8006328 <__libc_init_array+0x40>)
 80062fa:	4c0c      	ldr	r4, [pc, #48]	; (800632c <__libc_init_array+0x44>)
 80062fc:	f000 f9a8 	bl	8006650 <_init>
 8006300:	1b64      	subs	r4, r4, r5
 8006302:	10a4      	asrs	r4, r4, #2
 8006304:	2600      	movs	r6, #0
 8006306:	42a6      	cmp	r6, r4
 8006308:	d105      	bne.n	8006316 <__libc_init_array+0x2e>
 800630a:	bd70      	pop	{r4, r5, r6, pc}
 800630c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006310:	4798      	blx	r3
 8006312:	3601      	adds	r6, #1
 8006314:	e7ee      	b.n	80062f4 <__libc_init_array+0xc>
 8006316:	f855 3b04 	ldr.w	r3, [r5], #4
 800631a:	4798      	blx	r3
 800631c:	3601      	adds	r6, #1
 800631e:	e7f2      	b.n	8006306 <__libc_init_array+0x1e>
 8006320:	080066f0 	.word	0x080066f0
 8006324:	080066f0 	.word	0x080066f0
 8006328:	080066f0 	.word	0x080066f0
 800632c:	080066f8 	.word	0x080066f8

08006330 <__retarget_lock_init_recursive>:
 8006330:	4770      	bx	lr

08006332 <__retarget_lock_acquire_recursive>:
 8006332:	4770      	bx	lr

08006334 <__retarget_lock_release_recursive>:
 8006334:	4770      	bx	lr

08006336 <memcpy>:
 8006336:	440a      	add	r2, r1
 8006338:	4291      	cmp	r1, r2
 800633a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800633e:	d100      	bne.n	8006342 <memcpy+0xc>
 8006340:	4770      	bx	lr
 8006342:	b510      	push	{r4, lr}
 8006344:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006348:	f803 4f01 	strb.w	r4, [r3, #1]!
 800634c:	4291      	cmp	r1, r2
 800634e:	d1f9      	bne.n	8006344 <memcpy+0xe>
 8006350:	bd10      	pop	{r4, pc}
	...

08006354 <_free_r>:
 8006354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006356:	2900      	cmp	r1, #0
 8006358:	d044      	beq.n	80063e4 <_free_r+0x90>
 800635a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800635e:	9001      	str	r0, [sp, #4]
 8006360:	2b00      	cmp	r3, #0
 8006362:	f1a1 0404 	sub.w	r4, r1, #4
 8006366:	bfb8      	it	lt
 8006368:	18e4      	addlt	r4, r4, r3
 800636a:	f7ff fd57 	bl	8005e1c <__malloc_lock>
 800636e:	4a1e      	ldr	r2, [pc, #120]	; (80063e8 <_free_r+0x94>)
 8006370:	9801      	ldr	r0, [sp, #4]
 8006372:	6813      	ldr	r3, [r2, #0]
 8006374:	b933      	cbnz	r3, 8006384 <_free_r+0x30>
 8006376:	6063      	str	r3, [r4, #4]
 8006378:	6014      	str	r4, [r2, #0]
 800637a:	b003      	add	sp, #12
 800637c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006380:	f7ff bd52 	b.w	8005e28 <__malloc_unlock>
 8006384:	42a3      	cmp	r3, r4
 8006386:	d908      	bls.n	800639a <_free_r+0x46>
 8006388:	6825      	ldr	r5, [r4, #0]
 800638a:	1961      	adds	r1, r4, r5
 800638c:	428b      	cmp	r3, r1
 800638e:	bf01      	itttt	eq
 8006390:	6819      	ldreq	r1, [r3, #0]
 8006392:	685b      	ldreq	r3, [r3, #4]
 8006394:	1949      	addeq	r1, r1, r5
 8006396:	6021      	streq	r1, [r4, #0]
 8006398:	e7ed      	b.n	8006376 <_free_r+0x22>
 800639a:	461a      	mov	r2, r3
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	b10b      	cbz	r3, 80063a4 <_free_r+0x50>
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	d9fa      	bls.n	800639a <_free_r+0x46>
 80063a4:	6811      	ldr	r1, [r2, #0]
 80063a6:	1855      	adds	r5, r2, r1
 80063a8:	42a5      	cmp	r5, r4
 80063aa:	d10b      	bne.n	80063c4 <_free_r+0x70>
 80063ac:	6824      	ldr	r4, [r4, #0]
 80063ae:	4421      	add	r1, r4
 80063b0:	1854      	adds	r4, r2, r1
 80063b2:	42a3      	cmp	r3, r4
 80063b4:	6011      	str	r1, [r2, #0]
 80063b6:	d1e0      	bne.n	800637a <_free_r+0x26>
 80063b8:	681c      	ldr	r4, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	6053      	str	r3, [r2, #4]
 80063be:	440c      	add	r4, r1
 80063c0:	6014      	str	r4, [r2, #0]
 80063c2:	e7da      	b.n	800637a <_free_r+0x26>
 80063c4:	d902      	bls.n	80063cc <_free_r+0x78>
 80063c6:	230c      	movs	r3, #12
 80063c8:	6003      	str	r3, [r0, #0]
 80063ca:	e7d6      	b.n	800637a <_free_r+0x26>
 80063cc:	6825      	ldr	r5, [r4, #0]
 80063ce:	1961      	adds	r1, r4, r5
 80063d0:	428b      	cmp	r3, r1
 80063d2:	bf04      	itt	eq
 80063d4:	6819      	ldreq	r1, [r3, #0]
 80063d6:	685b      	ldreq	r3, [r3, #4]
 80063d8:	6063      	str	r3, [r4, #4]
 80063da:	bf04      	itt	eq
 80063dc:	1949      	addeq	r1, r1, r5
 80063de:	6021      	streq	r1, [r4, #0]
 80063e0:	6054      	str	r4, [r2, #4]
 80063e2:	e7ca      	b.n	800637a <_free_r+0x26>
 80063e4:	b003      	add	sp, #12
 80063e6:	bd30      	pop	{r4, r5, pc}
 80063e8:	200004c4 	.word	0x200004c4

080063ec <__sflush_r>:
 80063ec:	898a      	ldrh	r2, [r1, #12]
 80063ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063f2:	4605      	mov	r5, r0
 80063f4:	0710      	lsls	r0, r2, #28
 80063f6:	460c      	mov	r4, r1
 80063f8:	d458      	bmi.n	80064ac <__sflush_r+0xc0>
 80063fa:	684b      	ldr	r3, [r1, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	dc05      	bgt.n	800640c <__sflush_r+0x20>
 8006400:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006402:	2b00      	cmp	r3, #0
 8006404:	dc02      	bgt.n	800640c <__sflush_r+0x20>
 8006406:	2000      	movs	r0, #0
 8006408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800640c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800640e:	2e00      	cmp	r6, #0
 8006410:	d0f9      	beq.n	8006406 <__sflush_r+0x1a>
 8006412:	2300      	movs	r3, #0
 8006414:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006418:	682f      	ldr	r7, [r5, #0]
 800641a:	6a21      	ldr	r1, [r4, #32]
 800641c:	602b      	str	r3, [r5, #0]
 800641e:	d032      	beq.n	8006486 <__sflush_r+0x9a>
 8006420:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006422:	89a3      	ldrh	r3, [r4, #12]
 8006424:	075a      	lsls	r2, r3, #29
 8006426:	d505      	bpl.n	8006434 <__sflush_r+0x48>
 8006428:	6863      	ldr	r3, [r4, #4]
 800642a:	1ac0      	subs	r0, r0, r3
 800642c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800642e:	b10b      	cbz	r3, 8006434 <__sflush_r+0x48>
 8006430:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006432:	1ac0      	subs	r0, r0, r3
 8006434:	2300      	movs	r3, #0
 8006436:	4602      	mov	r2, r0
 8006438:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800643a:	6a21      	ldr	r1, [r4, #32]
 800643c:	4628      	mov	r0, r5
 800643e:	47b0      	blx	r6
 8006440:	1c43      	adds	r3, r0, #1
 8006442:	89a3      	ldrh	r3, [r4, #12]
 8006444:	d106      	bne.n	8006454 <__sflush_r+0x68>
 8006446:	6829      	ldr	r1, [r5, #0]
 8006448:	291d      	cmp	r1, #29
 800644a:	d82b      	bhi.n	80064a4 <__sflush_r+0xb8>
 800644c:	4a29      	ldr	r2, [pc, #164]	; (80064f4 <__sflush_r+0x108>)
 800644e:	410a      	asrs	r2, r1
 8006450:	07d6      	lsls	r6, r2, #31
 8006452:	d427      	bmi.n	80064a4 <__sflush_r+0xb8>
 8006454:	2200      	movs	r2, #0
 8006456:	6062      	str	r2, [r4, #4]
 8006458:	04d9      	lsls	r1, r3, #19
 800645a:	6922      	ldr	r2, [r4, #16]
 800645c:	6022      	str	r2, [r4, #0]
 800645e:	d504      	bpl.n	800646a <__sflush_r+0x7e>
 8006460:	1c42      	adds	r2, r0, #1
 8006462:	d101      	bne.n	8006468 <__sflush_r+0x7c>
 8006464:	682b      	ldr	r3, [r5, #0]
 8006466:	b903      	cbnz	r3, 800646a <__sflush_r+0x7e>
 8006468:	6560      	str	r0, [r4, #84]	; 0x54
 800646a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800646c:	602f      	str	r7, [r5, #0]
 800646e:	2900      	cmp	r1, #0
 8006470:	d0c9      	beq.n	8006406 <__sflush_r+0x1a>
 8006472:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006476:	4299      	cmp	r1, r3
 8006478:	d002      	beq.n	8006480 <__sflush_r+0x94>
 800647a:	4628      	mov	r0, r5
 800647c:	f7ff ff6a 	bl	8006354 <_free_r>
 8006480:	2000      	movs	r0, #0
 8006482:	6360      	str	r0, [r4, #52]	; 0x34
 8006484:	e7c0      	b.n	8006408 <__sflush_r+0x1c>
 8006486:	2301      	movs	r3, #1
 8006488:	4628      	mov	r0, r5
 800648a:	47b0      	blx	r6
 800648c:	1c41      	adds	r1, r0, #1
 800648e:	d1c8      	bne.n	8006422 <__sflush_r+0x36>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d0c5      	beq.n	8006422 <__sflush_r+0x36>
 8006496:	2b1d      	cmp	r3, #29
 8006498:	d001      	beq.n	800649e <__sflush_r+0xb2>
 800649a:	2b16      	cmp	r3, #22
 800649c:	d101      	bne.n	80064a2 <__sflush_r+0xb6>
 800649e:	602f      	str	r7, [r5, #0]
 80064a0:	e7b1      	b.n	8006406 <__sflush_r+0x1a>
 80064a2:	89a3      	ldrh	r3, [r4, #12]
 80064a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064a8:	81a3      	strh	r3, [r4, #12]
 80064aa:	e7ad      	b.n	8006408 <__sflush_r+0x1c>
 80064ac:	690f      	ldr	r7, [r1, #16]
 80064ae:	2f00      	cmp	r7, #0
 80064b0:	d0a9      	beq.n	8006406 <__sflush_r+0x1a>
 80064b2:	0793      	lsls	r3, r2, #30
 80064b4:	680e      	ldr	r6, [r1, #0]
 80064b6:	bf08      	it	eq
 80064b8:	694b      	ldreq	r3, [r1, #20]
 80064ba:	600f      	str	r7, [r1, #0]
 80064bc:	bf18      	it	ne
 80064be:	2300      	movne	r3, #0
 80064c0:	eba6 0807 	sub.w	r8, r6, r7
 80064c4:	608b      	str	r3, [r1, #8]
 80064c6:	f1b8 0f00 	cmp.w	r8, #0
 80064ca:	dd9c      	ble.n	8006406 <__sflush_r+0x1a>
 80064cc:	6a21      	ldr	r1, [r4, #32]
 80064ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064d0:	4643      	mov	r3, r8
 80064d2:	463a      	mov	r2, r7
 80064d4:	4628      	mov	r0, r5
 80064d6:	47b0      	blx	r6
 80064d8:	2800      	cmp	r0, #0
 80064da:	dc06      	bgt.n	80064ea <__sflush_r+0xfe>
 80064dc:	89a3      	ldrh	r3, [r4, #12]
 80064de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064e2:	81a3      	strh	r3, [r4, #12]
 80064e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064e8:	e78e      	b.n	8006408 <__sflush_r+0x1c>
 80064ea:	4407      	add	r7, r0
 80064ec:	eba8 0800 	sub.w	r8, r8, r0
 80064f0:	e7e9      	b.n	80064c6 <__sflush_r+0xda>
 80064f2:	bf00      	nop
 80064f4:	dfbffffe 	.word	0xdfbffffe

080064f8 <_fflush_r>:
 80064f8:	b538      	push	{r3, r4, r5, lr}
 80064fa:	690b      	ldr	r3, [r1, #16]
 80064fc:	4605      	mov	r5, r0
 80064fe:	460c      	mov	r4, r1
 8006500:	b913      	cbnz	r3, 8006508 <_fflush_r+0x10>
 8006502:	2500      	movs	r5, #0
 8006504:	4628      	mov	r0, r5
 8006506:	bd38      	pop	{r3, r4, r5, pc}
 8006508:	b118      	cbz	r0, 8006512 <_fflush_r+0x1a>
 800650a:	6a03      	ldr	r3, [r0, #32]
 800650c:	b90b      	cbnz	r3, 8006512 <_fflush_r+0x1a>
 800650e:	f7ff fd1d 	bl	8005f4c <__sinit>
 8006512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f3      	beq.n	8006502 <_fflush_r+0xa>
 800651a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800651c:	07d0      	lsls	r0, r2, #31
 800651e:	d404      	bmi.n	800652a <_fflush_r+0x32>
 8006520:	0599      	lsls	r1, r3, #22
 8006522:	d402      	bmi.n	800652a <_fflush_r+0x32>
 8006524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006526:	f7ff ff04 	bl	8006332 <__retarget_lock_acquire_recursive>
 800652a:	4628      	mov	r0, r5
 800652c:	4621      	mov	r1, r4
 800652e:	f7ff ff5d 	bl	80063ec <__sflush_r>
 8006532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006534:	07da      	lsls	r2, r3, #31
 8006536:	4605      	mov	r5, r0
 8006538:	d4e4      	bmi.n	8006504 <_fflush_r+0xc>
 800653a:	89a3      	ldrh	r3, [r4, #12]
 800653c:	059b      	lsls	r3, r3, #22
 800653e:	d4e1      	bmi.n	8006504 <_fflush_r+0xc>
 8006540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006542:	f7ff fef7 	bl	8006334 <__retarget_lock_release_recursive>
 8006546:	e7dd      	b.n	8006504 <_fflush_r+0xc>

08006548 <__swhatbuf_r>:
 8006548:	b570      	push	{r4, r5, r6, lr}
 800654a:	460c      	mov	r4, r1
 800654c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006550:	2900      	cmp	r1, #0
 8006552:	b096      	sub	sp, #88	; 0x58
 8006554:	4615      	mov	r5, r2
 8006556:	461e      	mov	r6, r3
 8006558:	da0d      	bge.n	8006576 <__swhatbuf_r+0x2e>
 800655a:	89a3      	ldrh	r3, [r4, #12]
 800655c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006560:	f04f 0100 	mov.w	r1, #0
 8006564:	bf0c      	ite	eq
 8006566:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800656a:	2340      	movne	r3, #64	; 0x40
 800656c:	2000      	movs	r0, #0
 800656e:	6031      	str	r1, [r6, #0]
 8006570:	602b      	str	r3, [r5, #0]
 8006572:	b016      	add	sp, #88	; 0x58
 8006574:	bd70      	pop	{r4, r5, r6, pc}
 8006576:	466a      	mov	r2, sp
 8006578:	f000 f848 	bl	800660c <_fstat_r>
 800657c:	2800      	cmp	r0, #0
 800657e:	dbec      	blt.n	800655a <__swhatbuf_r+0x12>
 8006580:	9901      	ldr	r1, [sp, #4]
 8006582:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006586:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800658a:	4259      	negs	r1, r3
 800658c:	4159      	adcs	r1, r3
 800658e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006592:	e7eb      	b.n	800656c <__swhatbuf_r+0x24>

08006594 <__smakebuf_r>:
 8006594:	898b      	ldrh	r3, [r1, #12]
 8006596:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006598:	079d      	lsls	r5, r3, #30
 800659a:	4606      	mov	r6, r0
 800659c:	460c      	mov	r4, r1
 800659e:	d507      	bpl.n	80065b0 <__smakebuf_r+0x1c>
 80065a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80065a4:	6023      	str	r3, [r4, #0]
 80065a6:	6123      	str	r3, [r4, #16]
 80065a8:	2301      	movs	r3, #1
 80065aa:	6163      	str	r3, [r4, #20]
 80065ac:	b002      	add	sp, #8
 80065ae:	bd70      	pop	{r4, r5, r6, pc}
 80065b0:	ab01      	add	r3, sp, #4
 80065b2:	466a      	mov	r2, sp
 80065b4:	f7ff ffc8 	bl	8006548 <__swhatbuf_r>
 80065b8:	9900      	ldr	r1, [sp, #0]
 80065ba:	4605      	mov	r5, r0
 80065bc:	4630      	mov	r0, r6
 80065be:	f7ff fbad 	bl	8005d1c <_malloc_r>
 80065c2:	b948      	cbnz	r0, 80065d8 <__smakebuf_r+0x44>
 80065c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065c8:	059a      	lsls	r2, r3, #22
 80065ca:	d4ef      	bmi.n	80065ac <__smakebuf_r+0x18>
 80065cc:	f023 0303 	bic.w	r3, r3, #3
 80065d0:	f043 0302 	orr.w	r3, r3, #2
 80065d4:	81a3      	strh	r3, [r4, #12]
 80065d6:	e7e3      	b.n	80065a0 <__smakebuf_r+0xc>
 80065d8:	89a3      	ldrh	r3, [r4, #12]
 80065da:	6020      	str	r0, [r4, #0]
 80065dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e0:	81a3      	strh	r3, [r4, #12]
 80065e2:	9b00      	ldr	r3, [sp, #0]
 80065e4:	6163      	str	r3, [r4, #20]
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	6120      	str	r0, [r4, #16]
 80065ea:	b15b      	cbz	r3, 8006604 <__smakebuf_r+0x70>
 80065ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065f0:	4630      	mov	r0, r6
 80065f2:	f000 f81d 	bl	8006630 <_isatty_r>
 80065f6:	b128      	cbz	r0, 8006604 <__smakebuf_r+0x70>
 80065f8:	89a3      	ldrh	r3, [r4, #12]
 80065fa:	f023 0303 	bic.w	r3, r3, #3
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	81a3      	strh	r3, [r4, #12]
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	431d      	orrs	r5, r3
 8006608:	81a5      	strh	r5, [r4, #12]
 800660a:	e7cf      	b.n	80065ac <__smakebuf_r+0x18>

0800660c <_fstat_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4d07      	ldr	r5, [pc, #28]	; (800662c <_fstat_r+0x20>)
 8006610:	2300      	movs	r3, #0
 8006612:	4604      	mov	r4, r0
 8006614:	4608      	mov	r0, r1
 8006616:	4611      	mov	r1, r2
 8006618:	602b      	str	r3, [r5, #0]
 800661a:	f7fc f8e8 	bl	80027ee <_fstat>
 800661e:	1c43      	adds	r3, r0, #1
 8006620:	d102      	bne.n	8006628 <_fstat_r+0x1c>
 8006622:	682b      	ldr	r3, [r5, #0]
 8006624:	b103      	cbz	r3, 8006628 <_fstat_r+0x1c>
 8006626:	6023      	str	r3, [r4, #0]
 8006628:	bd38      	pop	{r3, r4, r5, pc}
 800662a:	bf00      	nop
 800662c:	20000608 	.word	0x20000608

08006630 <_isatty_r>:
 8006630:	b538      	push	{r3, r4, r5, lr}
 8006632:	4d06      	ldr	r5, [pc, #24]	; (800664c <_isatty_r+0x1c>)
 8006634:	2300      	movs	r3, #0
 8006636:	4604      	mov	r4, r0
 8006638:	4608      	mov	r0, r1
 800663a:	602b      	str	r3, [r5, #0]
 800663c:	f7fc f8e7 	bl	800280e <_isatty>
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d102      	bne.n	800664a <_isatty_r+0x1a>
 8006644:	682b      	ldr	r3, [r5, #0]
 8006646:	b103      	cbz	r3, 800664a <_isatty_r+0x1a>
 8006648:	6023      	str	r3, [r4, #0]
 800664a:	bd38      	pop	{r3, r4, r5, pc}
 800664c:	20000608 	.word	0x20000608

08006650 <_init>:
 8006650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006652:	bf00      	nop
 8006654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006656:	bc08      	pop	{r3}
 8006658:	469e      	mov	lr, r3
 800665a:	4770      	bx	lr

0800665c <_fini>:
 800665c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665e:	bf00      	nop
 8006660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006662:	bc08      	pop	{r3}
 8006664:	469e      	mov	lr, r3
 8006666:	4770      	bx	lr


holonomic_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007690  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a0  080079a0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080079a0  080079a0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079a0  080079a0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080079a0  080079a0  000179a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080079a8  080079a8  000179a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080079b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  20000068  08007a18  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  08007a18  00020844  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d29e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000389b  00000000  00000000  0003d379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00040c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d68  00000000  00000000  00041da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021f05  00000000  00000000  00042b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012851  00000000  00000000  00064a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d52e8  00000000  00000000  00077266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000697c  00000000  00000000  0014c550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00152ecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007858 	.word	0x08007858

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08007858 	.word	0x08007858

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>:

#include "stdio.h"

#include <string.h>

ChampiCan::ChampiCan(FDCAN_HandleTypeDef *handle_fdcan) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef+0x50>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	601a      	str	r2, [r3, #0]

	handle_fdcan_ = handle_fdcan;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	605a      	str	r2, [r3, #4]

	tx_header_.IdType = FDCAN_STANDARD_ID;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
	tx_header_.TxFrameType = FDCAN_DATA_FRAME;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
	tx_header_.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
	tx_header_.BitRateSwitch = FDCAN_BRS_OFF;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
	tx_header_.FDFormat = FDCAN_CLASSIC_CAN;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
	tx_header_.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
	tx_header_.MessageMarker = 0;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28

}
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	080078d0 	.word	0x080078d0

08000cf0 <_ZN9ChampiCan5startEv>:

int ChampiCan::start() {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(handle_fdcan_) != HAL_OK)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f002 fb05 	bl	800330c <HAL_FDCAN_Start>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	bf14      	ite	ne
 8000d08:	2301      	movne	r3, #1
 8000d0a:	2300      	moveq	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <_ZN9ChampiCan5startEv+0x26>
	{
		return 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e011      	b.n	8000d3a <_ZN9ChampiCan5startEv+0x4a>
	}
	if (HAL_FDCAN_ActivateNotification(handle_fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 fc24 	bl	800356c <HAL_FDCAN_ActivateNotification>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bf14      	ite	ne
 8000d2a:	2301      	movne	r3, #1
 8000d2c:	2300      	moveq	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <_ZN9ChampiCan5startEv+0x48>
	{
		return 1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <_ZN9ChampiCan5startEv+0x4a>
	}
	return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <_ZN9ChampiCanD1Ev>:

    return 0;
}


ChampiCan::~ChampiCan() {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <_ZN9ChampiCanD1Ev+0x1c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	080078d0 	.word	0x080078d0

08000d64 <_ZN9ChampiCanD0Ev>:
ChampiCan::~ChampiCan() {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
}
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ffe9 	bl	8000d44 <_ZN9ChampiCanD1Ev>
 8000d72:	212c      	movs	r1, #44	; 0x2c
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f005 fbd5 	bl	8006524 <_ZdlPvj>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_Z3subPfS_S_>:

Vel sub(Vel vel1, Vel vel2) {
	return {vel1.x - vel2.x, vel1.y - vel2.y, vel1.theta - vel2.theta};
}

void sub(float* arr1, float* arr2, float* ret) {
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<3; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e016      	b.n	8000dc4 <_Z3subPfS_S_+0x40>
		ret[i] = arr1[i] - arr2[i];
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	ed93 7a00 	vldr	s14, [r3]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	4413      	add	r3, r2
 8000daa:	edd3 7a00 	vldr	s15, [r3]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dba:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	dde5      	ble.n	8000d96 <_Z3subPfS_S_+0x12>
	}
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	371c      	adds	r7, #28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_Z3absPfS_>:

void abs(float* arr, float* ret) {
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e026      	b.n	8000e36 <_Z3absPfS_+0x5e>
		if(arr[i]>=0) {
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	4413      	add	r3, r2
 8000df0:	edd3 7a00 	vldr	s15, [r3]
 8000df4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfc:	db0a      	blt.n	8000e14 <_Z3absPfS_+0x3c>
			ret[i] = arr[i];
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	441a      	add	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	440b      	add	r3, r1
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e00d      	b.n	8000e30 <_Z3absPfS_+0x58>
		}
		else {
			ret[i] = -arr[i];
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	edd3 7a00 	vldr	s15, [r3]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	eef1 7a67 	vneg.f32	s15, s15
 8000e2c:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	ddd5      	ble.n	8000de8 <_Z3absPfS_+0x10>
		}
	}
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_Z13get_index_maxPf>:

int get_index_max(float* arr) {
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	if(arr[0] > arr[1] && arr[0] > arr[2]) {
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	ed93 7a00 	vldr	s14, [r3]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	edd3 7a00 	vldr	s15, [r3]
 8000e60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e68:	dd0d      	ble.n	8000e86 <_Z13get_index_maxPf+0x3c>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	ed93 7a00 	vldr	s14, [r3]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3308      	adds	r3, #8
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	dd01      	ble.n	8000e86 <_Z13get_index_maxPf+0x3c>
		return 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e01b      	b.n	8000ebe <_Z13get_index_maxPf+0x74>
	}
	else if(arr[1] > arr[0] && arr[1] > arr[2]) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	ed93 7a00 	vldr	s14, [r3]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9c:	dd0e      	ble.n	8000ebc <_Z13get_index_maxPf+0x72>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	ed93 7a00 	vldr	s14, [r3]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3308      	adds	r3, #8
 8000eaa:	edd3 7a00 	vldr	s15, [r3]
 8000eae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb6:	dd01      	ble.n	8000ebc <_Z13get_index_maxPf+0x72>
		return 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <_Z13get_index_maxPf+0x74>
	}
	else {
		return 2;
 8000ebc:	2302      	movs	r3, #2
	}
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_ZN3VelC1Ev>:
#define HOLONOMICDRIVE3_H_


#include "Stepper.h"

struct Vel {
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_ZN7StepperaSERKS_>:
#ifndef SRC_STEPPER_H_
#define SRC_STEPPER_H_

#include "stm32g4xx_hal.h"

class Stepper {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	1d10      	adds	r0, r2, #4
 8000f08:	3304      	adds	r3, #4
 8000f0a:	224c      	movs	r2, #76	; 0x4c
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f006 f842 	bl	8006f96 <memcpy>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	651a      	str	r2, [r3, #80]	; 0x50
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	659a      	str	r2, [r3, #88]	; 0x58
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	65da      	str	r2, [r3, #92]	; 0x5c
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	661a      	str	r2, [r3, #96]	; 0x60
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4618      	mov	r0, r3
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>:

HolonomicDrive3::HolonomicDrive3(Stepper stepper0, Stepper stepper1, Stepper stepper2, float wheel_radius, float wheel_distance) {
 8000f48:	b5b0      	push	{r4, r5, r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6178      	str	r0, [r7, #20]
 8000f50:	6139      	str	r1, [r7, #16]
 8000f52:	60fa      	str	r2, [r7, #12]
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f5a:	edc7 0a00 	vstr	s1, [r7]
 8000f5e:	4a2e      	ldr	r2, [pc, #184]	; (8001018 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xd0>)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3304      	adds	r3, #4
 8000f68:	2402      	movs	r4, #2
 8000f6a:	461d      	mov	r5, r3
 8000f6c:	e004      	b.n	8000f78 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x30>
 8000f6e:	4628      	mov	r0, r5
 8000f70:	f000 fc9e 	bl	80018b0 <_ZN7StepperC1Ev>
 8000f74:	3564      	adds	r5, #100	; 0x64
 8000f76:	3c01      	subs	r4, #1
 8000f78:	2c00      	cmp	r4, #0
 8000f7a:	daf8      	bge.n	8000f6e <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x26>
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ffa1 	bl	8000eca <_ZN3VelC1Ev>
	this->steppers[0] = stepper0;
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	6939      	ldr	r1, [r7, #16]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ffb2 	bl	8000ef8 <_ZN7StepperaSERKS_>
	this->steppers[1] = stepper1;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	3368      	adds	r3, #104	; 0x68
 8000f98:	68f9      	ldr	r1, [r7, #12]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f7ff ffac 	bl	8000ef8 <_ZN7StepperaSERKS_>
	this->steppers[2] = stepper2;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	33cc      	adds	r3, #204	; 0xcc
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff ffa6 	bl	8000ef8 <_ZN7StepperaSERKS_>
	this->wheel_circumference = wheel_radius * 2.0 * PI;
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff faeb 	bl	8000588 <__aeabi_f2d>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	f7ff f989 	bl	80002cc <__adddf3>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	a313      	add	r3, pc, #76	; (adr r3, 8001010 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xc8>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	f7ff fb36 	bl	8000638 <__aeabi_dmul>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	f7ff fe12 	bl	8000bfc <__aeabi_d2f>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	this->wheel_distance = wheel_distance;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	683a      	ldr	r2, [r7, #0]
 8000fe4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	this->current_wheels_speeds_rps[0] = 0;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	this->current_wheels_speeds_rps[1] = 0;
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f04f 0200 	mov.w	r2, #0
 8000ff8:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	this->current_wheels_speeds_rps[2] = 0;
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

}
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	4618      	mov	r0, r3
 800100a:	3718      	adds	r7, #24
 800100c:	46bd      	mov	sp, r7
 800100e:	bdb0      	pop	{r4, r5, r7, pc}
 8001010:	54442eea 	.word	0x54442eea
 8001014:	400921fb 	.word	0x400921fb
 8001018:	080078e0 	.word	0x080078e0

0800101c <_ZN15HolonomicDrive311set_cmd_velE3Vel>:

void HolonomicDrive3::set_cmd_vel(Vel cmd) {
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	eef0 6a40 	vmov.f32	s13, s0
 8001028:	eeb0 7a60 	vmov.f32	s14, s1
 800102c:	eef0 7a41 	vmov.f32	s15, s2
 8001030:	edc7 6a00 	vstr	s13, [r7]
 8001034:	ed87 7a01 	vstr	s14, [r7, #4]
 8001038:	edc7 7a02 	vstr	s15, [r7, #8]
	this->cmd_vel = cmd;
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001042:	463a      	mov	r2, r7
 8001044:	ca07      	ldmia	r2, {r0, r1, r2}
 8001046:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800104a:	bf00      	nop
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>:

void HolonomicDrive3::compute_wheels_speeds(Vel cmd, float *ret_speeds_rps) {
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b08a      	sub	sp, #40	; 0x28
 800105c:	af00      	add	r7, sp, #0
 800105e:	6178      	str	r0, [r7, #20]
 8001060:	eef0 6a40 	vmov.f32	s13, s0
 8001064:	eeb0 7a60 	vmov.f32	s14, s1
 8001068:	eef0 7a41 	vmov.f32	s15, s2
 800106c:	6079      	str	r1, [r7, #4]
 800106e:	edc7 6a02 	vstr	s13, [r7, #8]
 8001072:	ed87 7a03 	vstr	s14, [r7, #12]
 8001076:	edc7 7a04 	vstr	s15, [r7, #16]
    float wheel0_mps = 0.5 * this->cmd_vel.x - SQRT_3_OVER_2 * this->cmd_vel.y - this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa81 	bl	8000588 <__aeabi_f2d>
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	4b79      	ldr	r3, [pc, #484]	; (8001270 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x218>)
 800108c:	f7ff fad4 	bl	8000638 <__aeabi_dmul>
 8001090:	4602      	mov	r2, r0
 8001092:	460b      	mov	r3, r1
 8001094:	4614      	mov	r4, r2
 8001096:	461d      	mov	r5, r3
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa72 	bl	8000588 <__aeabi_f2d>
 80010a4:	a36e      	add	r3, pc, #440	; (adr r3, 8001260 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x208>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	f7ff fac5 	bl	8000638 <__aeabi_dmul>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4620      	mov	r0, r4
 80010b4:	4629      	mov	r1, r5
 80010b6:	f7ff f907 	bl	80002c8 <__aeabi_dsub>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4614      	mov	r4, r2
 80010c0:	461d      	mov	r5, r3
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	ed93 7a4d 	vldr	s14, [r3, #308]	; 0x134
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80010ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d2:	ee17 0a90 	vmov	r0, s15
 80010d6:	f7ff fa57 	bl	8000588 <__aeabi_f2d>
 80010da:	a363      	add	r3, pc, #396	; (adr r3, 8001268 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x210>)
 80010dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e0:	f7ff faaa 	bl	8000638 <__aeabi_dmul>
 80010e4:	4602      	mov	r2, r0
 80010e6:	460b      	mov	r3, r1
 80010e8:	4610      	mov	r0, r2
 80010ea:	4619      	mov	r1, r3
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	4b60      	ldr	r3, [pc, #384]	; (8001274 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x21c>)
 80010f2:	f7ff fbcb 	bl	800088c <__aeabi_ddiv>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4620      	mov	r0, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	f7ff f8e3 	bl	80002c8 <__aeabi_dsub>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4610      	mov	r0, r2
 8001108:	4619      	mov	r1, r3
 800110a:	f7ff fd77 	bl	8000bfc <__aeabi_d2f>
 800110e:	4603      	mov	r3, r0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
    float wheel1_mps = 0.5 * this->cmd_vel.x + SQRT_3_OVER_2 * this->cmd_vel.y - this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa35 	bl	8000588 <__aeabi_f2d>
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b53      	ldr	r3, [pc, #332]	; (8001270 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x218>)
 8001124:	f7ff fa88 	bl	8000638 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4614      	mov	r4, r2
 800112e:	461d      	mov	r5, r3
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff fa26 	bl	8000588 <__aeabi_f2d>
 800113c:	a348      	add	r3, pc, #288	; (adr r3, 8001260 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x208>)
 800113e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001142:	f7ff fa79 	bl	8000638 <__aeabi_dmul>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	4620      	mov	r0, r4
 800114c:	4629      	mov	r1, r5
 800114e:	f7ff f8bd 	bl	80002cc <__adddf3>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	4614      	mov	r4, r2
 8001158:	461d      	mov	r5, r3
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	ed93 7a4d 	vldr	s14, [r3, #308]	; 0x134
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8001166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800116a:	ee17 0a90 	vmov	r0, s15
 800116e:	f7ff fa0b 	bl	8000588 <__aeabi_f2d>
 8001172:	a33d      	add	r3, pc, #244	; (adr r3, 8001268 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x210>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff fa5e 	bl	8000638 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4610      	mov	r0, r2
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x21c>)
 800118a:	f7ff fb7f 	bl	800088c <__aeabi_ddiv>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4620      	mov	r0, r4
 8001194:	4629      	mov	r1, r5
 8001196:	f7ff f897 	bl	80002c8 <__aeabi_dsub>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fd2b 	bl	8000bfc <__aeabi_d2f>
 80011a6:	4603      	mov	r3, r0
 80011a8:	623b      	str	r3, [r7, #32]
    float wheel2_mps = - this->cmd_vel.x + this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 80011b0:	eef1 7a67 	vneg.f32	s15, s15
 80011b4:	ee17 3a90 	vmov	r3, s15
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff f9e5 	bl	8000588 <__aeabi_f2d>
 80011be:	4604      	mov	r4, r0
 80011c0:	460d      	mov	r5, r1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	ed93 7a4d 	vldr	s14, [r3, #308]	; 0x134
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80011ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d2:	ee17 0a90 	vmov	r0, s15
 80011d6:	f7ff f9d7 	bl	8000588 <__aeabi_f2d>
 80011da:	a323      	add	r3, pc, #140	; (adr r3, 8001268 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x210>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fa2a 	bl	8000638 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 0200 	mov.w	r2, #0
 80011f0:	4b20      	ldr	r3, [pc, #128]	; (8001274 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x21c>)
 80011f2:	f7ff fb4b 	bl	800088c <__aeabi_ddiv>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4620      	mov	r0, r4
 80011fc:	4629      	mov	r1, r5
 80011fe:	f7ff f865 	bl	80002cc <__adddf3>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4610      	mov	r0, r2
 8001208:	4619      	mov	r1, r3
 800120a:	f7ff fcf7 	bl	8000bfc <__aeabi_d2f>
 800120e:	4603      	mov	r3, r0
 8001210:	61fb      	str	r3, [r7, #28]
    // wheel mps -> wheel rps
    ret_speeds_rps[0] = wheel0_mps / this->wheel_circumference;
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 8001218:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800121c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[1] = wheel1_mps / this->wheel_circumference;
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3304      	adds	r3, #4
 8001230:	edd7 6a08 	vldr	s13, [r7, #32]
 8001234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001238:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[2] = wheel2_mps / this->wheel_circumference;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	3308      	adds	r3, #8
 8001246:	edd7 6a07 	vldr	s13, [r7, #28]
 800124a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800124e:	edc3 7a00 	vstr	s15, [r3]
}
 8001252:	bf00      	nop
 8001254:	3728      	adds	r7, #40	; 0x28
 8001256:	46bd      	mov	sp, r7
 8001258:	bdb0      	pop	{r4, r5, r7, pc}
 800125a:	bf00      	nop
 800125c:	f3af 8000 	nop.w
 8001260:	e857b07f 	.word	0xe857b07f
 8001264:	3febb67a 	.word	0x3febb67a
 8001268:	54442eea 	.word	0x54442eea
 800126c:	400921fb 	.word	0x400921fb
 8001270:	3fe00000 	.word	0x3fe00000
 8001274:	40668000 	.word	0x40668000

08001278 <_ZN15HolonomicDrive319write_wheels_speedsEPf>:

void HolonomicDrive3::write_wheels_speeds(float *speeds_rps) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	e020      	b.n	80012ca <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x52>
		this->steppers[i].set_speed_rps(speeds_rps[i]);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2264      	movs	r2, #100	; 0x64
 800128c:	fb02 f303 	mul.w	r3, r2, r3
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	4413      	add	r3, r2
 8001294:	1d19      	adds	r1, r3, #4
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	683a      	ldr	r2, [r7, #0]
 800129c:	4413      	add	r3, r2
 800129e:	edd3 7a00 	vldr	s15, [r3]
 80012a2:	eeb0 0a67 	vmov.f32	s0, s15
 80012a6:	4608      	mov	r0, r1
 80012a8:	f000 fb8e 	bl	80019c8 <_ZN7Stepper13set_speed_rpsEf>
		this->current_wheels_speeds_rps[i] = speeds_rps[i];
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	4413      	add	r3, r2
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3350      	adds	r3, #80	; 0x50
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	440b      	add	r3, r1
 80012c0:	3304      	adds	r3, #4
 80012c2:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	3301      	adds	r3, #1
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	dddb      	ble.n	8001288 <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x10>
	}
}
 80012d0:	bf00      	nop
 80012d2:	bf00      	nop
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	0000      	movs	r0, r0
 80012dc:	0000      	movs	r0, r0
	...

080012e0 <_ZN15HolonomicDrive324spin_once_motors_controlEv>:

void HolonomicDrive3::spin_once_motors_control() {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b092      	sub	sp, #72	; 0x48
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

	// compare current_vel and cmd_vel wheels speeds to check the required acceleration to transition directly from current to command
	float cmd_wheels_speeds[3]; // rotations per second
	this->compute_wheels_speeds(cmd_vel, cmd_wheels_speeds);
 80012e8:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	edd3 6a4e 	vldr	s13, [r3, #312]	; 0x138
 80012f2:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 80012f6:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80012fa:	4611      	mov	r1, r2
 80012fc:	eeb0 0a66 	vmov.f32	s0, s13
 8001300:	eef0 0a47 	vmov.f32	s1, s14
 8001304:	eeb0 1a67 	vmov.f32	s2, s15
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff fea5 	bl	8001058 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>

	float desired_accels_wheels[3];
	sub(cmd_wheels_speeds, this->current_wheels_speeds_rps, desired_accels_wheels);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f503 71a2 	add.w	r1, r3, #324	; 0x144
 8001314:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001318:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fd31 	bl	8000d84 <_Z3subPfS_S_>

	float abs_desired_accels_wheels[3];
	abs(desired_accels_wheels, abs_desired_accels_wheels);
 8001322:	f107 0218 	add.w	r2, r7, #24
 8001326:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132a:	4611      	mov	r1, r2
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fd53 	bl	8000dd8 <_Z3absPfS_>
	if(abs_desired_accels_wheels[0] < MAX_ACCEL_PER_CYCLE && abs_desired_accels_wheels[1] < MAX_ACCEL_PER_CYCLE && abs_desired_accels_wheels[2] < MAX_ACCEL_PER_CYCLE) {
 8001332:	69bb      	ldr	r3, [r7, #24]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f927 	bl	8000588 <__aeabi_f2d>
 800133a:	a33b      	add	r3, pc, #236	; (adr r3, 8001428 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff fbec 	bl	8000b1c <__aeabi_dcmplt>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d01e      	beq.n	8001388 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xa8>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff f91b 	bl	8000588 <__aeabi_f2d>
 8001352:	a335      	add	r3, pc, #212	; (adr r3, 8001428 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 8001354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001358:	f7ff fbe0 	bl	8000b1c <__aeabi_dcmplt>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d012      	beq.n	8001388 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xa8>
 8001362:	6a3b      	ldr	r3, [r7, #32]
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff f90f 	bl	8000588 <__aeabi_f2d>
 800136a:	a32f      	add	r3, pc, #188	; (adr r3, 8001428 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 800136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001370:	f7ff fbd4 	bl	8000b1c <__aeabi_dcmplt>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d006      	beq.n	8001388 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xa8>
		// acceleration requested is ok, no need to accelerate gradually.
		this->write_wheels_speeds(cmd_wheels_speeds);
 800137a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800137e:	4619      	mov	r1, r3
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f7ff ff79 	bl	8001278 <_ZN15HolonomicDrive319write_wheels_speedsEPf>
 8001386:	e049      	b.n	800141c <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x13c>
	}
	else {
		// Trouver la roue qui pose le + problème. On va alors pouvoir réduire les accélérations des 3 roues de façon
		// de façon proportionelle, de façon que la roue qui pose le + problème ait une accélération égale à MAX_ACCEL_PER_CYCLE
		int i_max = get_index_max(abs_desired_accels_wheels);
 8001388:	f107 0318 	add.w	r3, r7, #24
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff fd5c 	bl	8000e4a <_Z13get_index_maxPf>
 8001392:	6438      	str	r0, [r7, #64]	; 0x40

		float speed_ratio = MAX_ACCEL_PER_CYCLE / abs_desired_accels_wheels[i_max]; // speed ratio of each original speed to add
 8001394:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	3348      	adds	r3, #72	; 0x48
 800139a:	443b      	add	r3, r7
 800139c:	3b30      	subs	r3, #48	; 0x30
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7ff f8f1 	bl	8000588 <__aeabi_f2d>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	a11f      	add	r1, pc, #124	; (adr r1, 8001428 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 80013ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013b0:	f7ff fa6c 	bl	800088c <__aeabi_ddiv>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	4610      	mov	r0, r2
 80013ba:	4619      	mov	r1, r3
 80013bc:	f7ff fc1e 	bl	8000bfc <__aeabi_d2f>
 80013c0:	4603      	mov	r3, r0
 80013c2:	63fb      	str	r3, [r7, #60]	; 0x3c

		float new_speeds_cmds[3];
		for(int i=0; i<3; i++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	647b      	str	r3, [r7, #68]	; 0x44
 80013c8:	e01e      	b.n	8001408 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x128>
			new_speeds_cmds[i] = current_wheels_speeds_rps[i] + speed_ratio * desired_accels_wheels[i];;
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ce:	3350      	adds	r3, #80	; 0x50
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	4413      	add	r3, r2
 80013d4:	3304      	adds	r3, #4
 80013d6:	ed93 7a00 	vldr	s14, [r3]
 80013da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	3348      	adds	r3, #72	; 0x48
 80013e0:	443b      	add	r3, r7
 80013e2:	3b24      	subs	r3, #36	; 0x24
 80013e4:	edd3 6a00 	vldr	s13, [r3]
 80013e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80013ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	3348      	adds	r3, #72	; 0x48
 80013fa:	443b      	add	r3, r7
 80013fc:	3b3c      	subs	r3, #60	; 0x3c
 80013fe:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i<3; i++) {
 8001402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001404:	3301      	adds	r3, #1
 8001406:	647b      	str	r3, [r7, #68]	; 0x44
 8001408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800140a:	2b02      	cmp	r3, #2
 800140c:	dddd      	ble.n	80013ca <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xea>
		}

		// set speed
		this->write_wheels_speeds(new_speeds_cmds);
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	4619      	mov	r1, r3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f7ff ff2f 	bl	8001278 <_ZN15HolonomicDrive319write_wheels_speedsEPf>


	}

}
 800141a:	bf00      	nop
 800141c:	bf00      	nop
 800141e:	3748      	adds	r7, #72	; 0x48
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	f3af 8000 	nop.w
 8001428:	9999999a 	.word	0x9999999a
 800142c:	3fb99999 	.word	0x3fb99999

08001430 <_ZN15HolonomicDrive3C1Ev>:

HolonomicDrive3::HolonomicDrive3() {
 8001430:	b5b0      	push	{r4, r5, r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	4a0c      	ldr	r2, [pc, #48]	; (800146c <_ZN15HolonomicDrive3C1Ev+0x3c>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	3304      	adds	r3, #4
 8001442:	2402      	movs	r4, #2
 8001444:	461d      	mov	r5, r3
 8001446:	e004      	b.n	8001452 <_ZN15HolonomicDrive3C1Ev+0x22>
 8001448:	4628      	mov	r0, r5
 800144a:	f000 fa31 	bl	80018b0 <_ZN7StepperC1Ev>
 800144e:	3564      	adds	r5, #100	; 0x64
 8001450:	3c01      	subs	r4, #1
 8001452:	2c00      	cmp	r4, #0
 8001454:	daf8      	bge.n	8001448 <_ZN15HolonomicDrive3C1Ev+0x18>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fd34 	bl	8000eca <_ZN3VelC1Ev>
}
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4618      	mov	r0, r3
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bdb0      	pop	{r4, r5, r7, pc}
 800146c:	080078e0 	.word	0x080078e0

08001470 <_ZN15HolonomicDrive3D1Ev>:

HolonomicDrive3::~HolonomicDrive3() {
 8001470:	b590      	push	{r4, r7, lr}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	4a0d      	ldr	r2, [pc, #52]	; (80014b0 <_ZN15HolonomicDrive3D1Ev+0x40>)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3304      	adds	r3, #4
	// TODO Auto-generated destructor stub
}
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00d      	beq.n	80014a2 <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	3304      	adds	r3, #4
 800148a:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3304      	adds	r3, #4
}
 8001492:	429c      	cmp	r4, r3
 8001494:	d005      	beq.n	80014a2 <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 8001496:	3c64      	subs	r4, #100	; 0x64
 8001498:	6823      	ldr	r3, [r4, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4620      	mov	r0, r4
 800149e:	4798      	blx	r3
}
 80014a0:	e7f5      	b.n	800148e <_ZN15HolonomicDrive3D1Ev+0x1e>
HolonomicDrive3::~HolonomicDrive3() {
 80014a2:	bf00      	nop
}
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd90      	pop	{r4, r7, pc}
 80014ae:	bf00      	nop
 80014b0:	080078e0 	.word	0x080078e0

080014b4 <_ZN15HolonomicDrive3D0Ev>:
HolonomicDrive3::~HolonomicDrive3() {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
}
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ffd7 	bl	8001470 <_ZN15HolonomicDrive3D1Ev>
 80014c2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f005 f82c 	bl	8006524 <_ZdlPvj>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4618      	mov	r0, r3
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
	...

080014d8 <_ZN17MessageRecomposerC1Ev>:
#include "MessageRecomposer.h"

#include "stdio.h"


MessageRecomposer::MessageRecomposer() {
 80014d8:	b5b0      	push	{r4, r5, r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	4a0c      	ldr	r2, [pc, #48]	; (8001514 <_ZN17MessageRecomposerC1Ev+0x3c>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	601a      	str	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	3324      	adds	r3, #36	; 0x24
 80014ea:	2413      	movs	r4, #19
 80014ec:	461d      	mov	r5, r3
 80014ee:	e004      	b.n	80014fa <_ZN17MessageRecomposerC1Ev+0x22>
 80014f0:	4628      	mov	r0, r5
 80014f2:	f005 f8c1 	bl	8006678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80014f6:	3518      	adds	r5, #24
 80014f8:	3c01      	subs	r4, #1
 80014fa:	2c00      	cmp	r4, #0
 80014fc:	daf8      	bge.n	80014f0 <_ZN17MessageRecomposerC1Ev+0x18>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001504:	4618      	mov	r0, r3
 8001506:	f005 f8b7 	bl	8006678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

}
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4618      	mov	r0, r3
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bdb0      	pop	{r4, r5, r7, pc}
 8001514:	080078f0 	.word	0x080078f0

08001518 <_ZN17MessageRecomposer9add_frameEPhh>:

void MessageRecomposer::add_frame(uint8_t *frame_data, uint8_t length) {
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	b09b      	sub	sp, #108	; 0x6c
 800151c:	af02      	add	r7, sp, #8
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	4613      	mov	r3, r2
 8001524:	71fb      	strb	r3, [r7, #7]

	int msg_number;
    int msg_size;
    int frame_index;

    decode_descriptor(frame_data, msg_number, msg_size, frame_index);
 8001526:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800152a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800152e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	460b      	mov	r3, r1
 8001536:	68b9      	ldr	r1, [r7, #8]
 8001538:	68f8      	ldr	r0, [r7, #12]
 800153a:	f000 f910 	bl	800175e <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>

    // TODO check if the number follows the expected order (0 -> 1 -> 2 -> 3 -> 0 -> ...)
    // But it's not that easy bc what if we miss an entire message ? we would loose the 3 messages that follow it
    if(msg_number_ != msg_number) {
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	685a      	ldr	r2, [r3, #4]
 8001542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001544:	429a      	cmp	r2, r3
 8001546:	d019      	beq.n	800157c <_ZN17MessageRecomposer9add_frameEPhh+0x64>
        // new message
        printf("New message\n");
 8001548:	4856      	ldr	r0, [pc, #344]	; (80016a4 <_ZN17MessageRecomposer9add_frameEPhh+0x18c>)
 800154a:	f005 fb75 	bl	8006c38 <puts>
        msg_number_ = msg_number;
 800154e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	605a      	str	r2, [r3, #4]
        n_frames_ = msg_size;
 8001554:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	609a      	str	r2, [r3, #8]
        for(int i=0; i<n_frames_; i++) {
 800155a:	2300      	movs	r3, #0
 800155c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800155e:	e008      	b.n	8001572 <_ZN17MessageRecomposer9add_frameEPhh+0x5a>
            frames_received_[i] = false;
 8001560:	68fa      	ldr	r2, [r7, #12]
 8001562:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001564:	4413      	add	r3, r2
 8001566:	330d      	adds	r3, #13
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 800156c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800156e:	3301      	adds	r3, #1
 8001570:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001578:	429a      	cmp	r2, r3
 800157a:	dbf1      	blt.n	8001560 <_ZN17MessageRecomposer9add_frameEPhh+0x48>
        }
    }

    frames_received_[frame_index] = true;
 800157c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	4413      	add	r3, r2
 8001582:	2201      	movs	r2, #1
 8001584:	735a      	strb	r2, [r3, #13]
    msg_parts[frame_index] = std::string((char*)frame_data+2, length-2);
 8001586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	3320      	adds	r3, #32
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	4413      	add	r3, r2
 8001596:	1d1c      	adds	r4, r3, #4
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	1c9d      	adds	r5, r3, #2
 800159c:	79fb      	ldrb	r3, [r7, #7]
 800159e:	3b02      	subs	r3, #2
 80015a0:	461e      	mov	r6, r3
 80015a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015a6:	4618      	mov	r0, r3
 80015a8:	f004 ffbe 	bl	8006528 <_ZNSaIcEC1Ev>
 80015ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015b0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80015b4:	4632      	mov	r2, r6
 80015b6:	4629      	mov	r1, r5
 80015b8:	f005 f922 	bl	8006800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 80015bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015c0:	4619      	mov	r1, r3
 80015c2:	4620      	mov	r0, r4
 80015c4:	f005 f86b 	bl	800669e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80015c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015cc:	4618      	mov	r0, r3
 80015ce:	f005 f85a 	bl	8006686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80015d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015d6:	4618      	mov	r0, r3
 80015d8:	f004 ffa7 	bl	800652a <_ZNSaIcED1Ev>

    for(int i=0; i<n_frames_; i++) {
 80015dc:	2300      	movs	r3, #0
 80015de:	65bb      	str	r3, [r7, #88]	; 0x58
 80015e0:	e00c      	b.n	80015fc <_ZN17MessageRecomposer9add_frameEPhh+0xe4>
    	printf("Frame %d received : %d\n", i, frames_received_[i]);
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015e6:	4413      	add	r3, r2
 80015e8:	330d      	adds	r3, #13
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80015f0:	482d      	ldr	r0, [pc, #180]	; (80016a8 <_ZN17MessageRecomposer9add_frameEPhh+0x190>)
 80015f2:	f005 fabb 	bl	8006b6c <iprintf>
    for(int i=0; i<n_frames_; i++) {
 80015f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015f8:	3301      	adds	r3, #1
 80015fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001602:	429a      	cmp	r2, r3
 8001604:	dbed      	blt.n	80015e2 <_ZN17MessageRecomposer9add_frameEPhh+0xca>
    }

    if(all_frames_received()) {
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f000 f8d3 	bl	80017b2 <_ZN17MessageRecomposer19all_frames_receivedEv>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d043      	beq.n	800169a <_ZN17MessageRecomposer9add_frameEPhh+0x182>
        printf("All frames received\n");
 8001612:	4826      	ldr	r0, [pc, #152]	; (80016ac <_ZN17MessageRecomposer9add_frameEPhh+0x194>)
 8001614:	f005 fb10 	bl	8006c38 <puts>
        std::string full_msg;
 8001618:	f107 0310 	add.w	r3, r7, #16
 800161c:	4618      	mov	r0, r3
 800161e:	f005 f82b 	bl	8006678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
        for(int i=0; i<n_frames_; i++) {
 8001622:	2300      	movs	r3, #0
 8001624:	657b      	str	r3, [r7, #84]	; 0x54
 8001626:	e011      	b.n	800164c <_ZN17MessageRecomposer9add_frameEPhh+0x134>
            full_msg += msg_parts[i];
 8001628:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800162a:	4613      	mov	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	4413      	add	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	3320      	adds	r3, #32
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4413      	add	r3, r2
 8001638:	1d1a      	adds	r2, r3, #4
 800163a:	f107 0310 	add.w	r3, r7, #16
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f005 f87f 	bl	8006744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
        for(int i=0; i<n_frames_; i++) {
 8001646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001648:	3301      	adds	r3, #1
 800164a:	657b      	str	r3, [r7, #84]	; 0x54
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001652:	429a      	cmp	r2, r3
 8001654:	dbe8      	blt.n	8001628 <_ZN17MessageRecomposer9add_frameEPhh+0x110>
        }
        full_msg_ = full_msg;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800165c:	f107 0210 	add.w	r2, r7, #16
 8001660:	4611      	mov	r1, r2
 8001662:	4618      	mov	r0, r3
 8001664:	f005 f815 	bl	8006692 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
        full_msg_received_ = true;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2201      	movs	r2, #1
 800166c:	731a      	strb	r2, [r3, #12]
        for(int i=0; i<n_frames_; i++) {
 800166e:	2300      	movs	r3, #0
 8001670:	653b      	str	r3, [r7, #80]	; 0x50
 8001672:	e008      	b.n	8001686 <_ZN17MessageRecomposer9add_frameEPhh+0x16e>
            frames_received_[i] = false;
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001678:	4413      	add	r3, r2
 800167a:	330d      	adds	r3, #13
 800167c:	2200      	movs	r2, #0
 800167e:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 8001680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001682:	3301      	adds	r3, #1
 8001684:	653b      	str	r3, [r7, #80]	; 0x50
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800168c:	429a      	cmp	r2, r3
 800168e:	dbf1      	blt.n	8001674 <_ZN17MessageRecomposer9add_frameEPhh+0x15c>
        }
    }
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4618      	mov	r0, r3
 8001696:	f004 fff6 	bl	8006686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800169a:	bf00      	nop
 800169c:	3764      	adds	r7, #100	; 0x64
 800169e:	46bd      	mov	sp, r7
 80016a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016a2:	bf00      	nop
 80016a4:	08007870 	.word	0x08007870
 80016a8:	0800787c 	.word	0x0800787c
 80016ac:	08007894 	.word	0x08007894

080016b0 <_ZN17MessageRecomposer21check_if_new_full_msgEv>:

bool MessageRecomposer::check_if_new_full_msg() {
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
    return full_msg_received_;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7b1b      	ldrb	r3, [r3, #12]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr

080016c8 <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>:

std::string MessageRecomposer::get_full_msg() {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
    full_msg_received_ = false;
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2200      	movs	r2, #0
 80016d6:	731a      	strb	r2, [r3, #12]
    return full_msg_;
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016de:	4619      	mov	r1, r3
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f005 f859 	bl	8006798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
	...

080016f0 <_ZN17MessageRecomposerD1Ev>:

MessageRecomposer::~MessageRecomposer() {
 80016f0:	b590      	push	{r4, r7, lr}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	4a0f      	ldr	r2, [pc, #60]	; (8001738 <_ZN17MessageRecomposerD1Ev+0x48>)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001704:	4618      	mov	r0, r3
 8001706:	f004 ffbe 	bl	8006686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3324      	adds	r3, #36	; 0x24
	// TODO Auto-generated destructor stub
}
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00c      	beq.n	800172c <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3324      	adds	r3, #36	; 0x24
 8001716:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3324      	adds	r3, #36	; 0x24
}
 800171e:	429c      	cmp	r4, r3
 8001720:	d004      	beq.n	800172c <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 8001722:	3c18      	subs	r4, #24
 8001724:	4620      	mov	r0, r4
 8001726:	f004 ffae 	bl	8006686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800172a:	e7f6      	b.n	800171a <_ZN17MessageRecomposerD1Ev+0x2a>
MessageRecomposer::~MessageRecomposer() {
 800172c:	bf00      	nop
}
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bd90      	pop	{r4, r7, pc}
 8001738:	080078f0 	.word	0x080078f0

0800173c <_ZN17MessageRecomposerD0Ev>:
MessageRecomposer::~MessageRecomposer() {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
}
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ffd3 	bl	80016f0 <_ZN17MessageRecomposerD1Ev>
 800174a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f004 fee8 	bl	8006524 <_ZdlPvj>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4618      	mov	r0, r3
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}

0800175e <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>:

void MessageRecomposer::decode_descriptor(uint8_t *frame_data, int &msg_number,
		int &msg_size, int &frame_index) {
 800175e:	b480      	push	{r7}
 8001760:	b087      	sub	sp, #28
 8001762:	af00      	add	r7, sp, #0
 8001764:	60f8      	str	r0, [r7, #12]
 8001766:	60b9      	str	r1, [r7, #8]
 8001768:	607a      	str	r2, [r7, #4]
 800176a:	603b      	str	r3, [r7, #0]

    uint16_t msg_descriptor = frame_data[1] << 8 | frame_data[0];
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	3301      	adds	r3, #1
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	b21a      	sxth	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	b21b      	sxth	r3, r3
 800177c:	4313      	orrs	r3, r2
 800177e:	b21b      	sxth	r3, r3
 8001780:	82fb      	strh	r3, [r7, #22]

    // todo mask the unused bits for safety (eg if error of transmission)

    msg_number = (msg_descriptor >> 12);
 8001782:	8afb      	ldrh	r3, [r7, #22]
 8001784:	0b1b      	lsrs	r3, r3, #12
 8001786:	b29b      	uxth	r3, r3
 8001788:	461a      	mov	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	601a      	str	r2, [r3, #0]
    msg_size = (msg_descriptor >> 6) & 0x3F;
 800178e:	8afb      	ldrh	r3, [r7, #22]
 8001790:	099b      	lsrs	r3, r3, #6
 8001792:	b29b      	uxth	r3, r3
 8001794:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	601a      	str	r2, [r3, #0]
    frame_index = msg_descriptor & 0x3F;
 800179c:	8afb      	ldrh	r3, [r7, #22]
 800179e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017a2:	6a3b      	ldr	r3, [r7, #32]
 80017a4:	601a      	str	r2, [r3, #0]
}
 80017a6:	bf00      	nop
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <_ZN17MessageRecomposer19all_frames_receivedEv>:

bool MessageRecomposer::all_frames_received() {
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
    for(int i=0; i<n_frames_; i++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e00e      	b.n	80017de <_ZN17MessageRecomposer19all_frames_receivedEv+0x2c>
        if(!frames_received_[i]) {
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	4413      	add	r3, r2
 80017c6:	330d      	adds	r3, #13
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	f083 0301 	eor.w	r3, r3, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <_ZN17MessageRecomposer19all_frames_receivedEv+0x26>
            return false;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e008      	b.n	80017ea <_ZN17MessageRecomposer19all_frames_receivedEv+0x38>
    for(int i=0; i<n_frames_; i++) {
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3301      	adds	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	dbeb      	blt.n	80017c0 <_ZN17MessageRecomposer19all_frames_receivedEv+0xe>
        }
    }
    return true;
 80017e8:	2301      	movs	r3, #1
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <_Z21PWM_set_high_durationP11TIM_TypeDefi>:

#define SYS_CORE_CLOCK_HZ 170000000.
#define SYS_CORE_CLOCK_MHZ 170.


void PWM_set_high_duration(TIM_TypeDef *timx, int us) {
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
	timx->CCR1 = SYS_CORE_CLOCK_MHZ/(timx->PSC+1) * us;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001806:	3301      	adds	r3, #1
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fe9b 	bl	8000544 <__aeabi_ui2d>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	f04f 0000 	mov.w	r0, #0
 8001816:	490e      	ldr	r1, [pc, #56]	; (8001850 <_Z21PWM_set_high_durationP11TIM_TypeDefi+0x58>)
 8001818:	f7ff f838 	bl	800088c <__aeabi_ddiv>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4614      	mov	r4, r2
 8001822:	461d      	mov	r5, r3
 8001824:	6838      	ldr	r0, [r7, #0]
 8001826:	f7fe fe9d 	bl	8000564 <__aeabi_i2d>
 800182a:	4602      	mov	r2, r0
 800182c:	460b      	mov	r3, r1
 800182e:	4620      	mov	r0, r4
 8001830:	4629      	mov	r1, r5
 8001832:	f7fe ff01 	bl	8000638 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f9bd 	bl	8000bbc <__aeabi_d2uiz>
 8001842:	4602      	mov	r2, r0
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bdb0      	pop	{r4, r5, r7, pc}
 8001850:	40654000 	.word	0x40654000
 8001854:	00000000 	.word	0x00000000

08001858 <_Z12PWM_set_freqP11TIM_TypeDefi>:

void PWM_set_freq(TIM_TypeDef *timx, int hz) {
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
	int arr = SYS_CORE_CLOCK_HZ/((timx->PSC+1)*hz);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001866:	3301      	adds	r3, #1
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe68 	bl	8000544 <__aeabi_ui2d>
 8001874:	4602      	mov	r2, r0
 8001876:	460b      	mov	r3, r1
 8001878:	a10b      	add	r1, pc, #44	; (adr r1, 80018a8 <_Z12PWM_set_freqP11TIM_TypeDefi+0x50>)
 800187a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800187e:	f7ff f805 	bl	800088c <__aeabi_ddiv>
 8001882:	4602      	mov	r2, r0
 8001884:	460b      	mov	r3, r1
 8001886:	4610      	mov	r0, r2
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff f96f 	bl	8000b6c <__aeabi_d2iz>
 800188e:	4603      	mov	r3, r0
 8001890:	60fb      	str	r3, [r7, #12]
	timx->CNT = 0;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	625a      	str	r2, [r3, #36]	; 0x24
	timx->ARR = arr;
 8001898:	68fa      	ldr	r2, [r7, #12]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	00000000 	.word	0x00000000
 80018ac:	41a443fd 	.word	0x41a443fd

080018b0 <_ZN7StepperC1Ev>:

Stepper::Stepper() {}
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <_ZN7StepperC1Ev+0x1c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	08007900 	.word	0x08007900

080018d0 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>:

Stepper::Stepper(TIM_HandleTypeDef tim_handle_step, uint32_t tim_channel_step, GPIO_TypeDef *GPIOx_dir, uint16_t GPIO_Pin_dir) {
 80018d0:	b084      	sub	sp, #16
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	f107 0014 	add.w	r0, r7, #20
 80018de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80018e2:	4a19      	ldr	r2, [pc, #100]	; (8001948 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft+0x78>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->tim_handle = tim_handle_step;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	3304      	adds	r3, #4
 80018ec:	f107 0114 	add.w	r1, r7, #20
 80018f0:	224c      	movs	r2, #76	; 0x4c
 80018f2:	4618      	mov	r0, r3
 80018f4:	f005 fb4f 	bl	8006f96 <memcpy>
	this->GPIOx_dir = GPIOx_dir;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018fc:	651a      	str	r2, [r3, #80]	; 0x50
	this->GPIO_Pin_dir = GPIO_Pin_dir;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8001904:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	this->tim_channel = tim_channel_step;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800190c:	659a      	str	r2, [r3, #88]	; 0x58
	PWM_set_high_duration(this->tim_handle.Instance, 10);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	210a      	movs	r1, #10
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff ff6f 	bl	80017f8 <_Z21PWM_set_high_durationP11TIM_TypeDefi>
	HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001924:	2201      	movs	r2, #1
 8001926:	4619      	mov	r1, r3
 8001928:	f002 fa6c 	bl	8003e04 <HAL_GPIO_WritePin>

	this->current_dir = 0;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	661a      	str	r2, [r3, #96]	; 0x60
	this->current_freq = 0;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001944:	b004      	add	sp, #16
 8001946:	4770      	bx	lr
 8001948:	08007900 	.word	0x08007900

0800194c <_ZN7Stepper19set_speed_step_freqEii>:

void Stepper::set_speed_step_freq(int hz, int dir) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	607a      	str	r2, [r7, #4]
	if(hz < 15){// todo calculer freq min automatiquement
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	2b0e      	cmp	r3, #14
 800195c:	dc08      	bgt.n	8001970 <_ZN7Stepper19set_speed_step_freqEii+0x24>
		HAL_TIM_PWM_Stop(&this->tim_handle, this->tim_channel);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	1d1a      	adds	r2, r3, #4
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	4619      	mov	r1, r3
 8001968:	4610      	mov	r0, r2
 800196a:	f003 fc17 	bl	800519c <HAL_TIM_PWM_Stop>
		return;
 800196e:	e027      	b.n	80019c0 <_ZN7Stepper19set_speed_step_freqEii+0x74>
	}
	if(!this->current_freq) {
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <_ZN7Stepper19set_speed_step_freqEii+0x3c>
		// stepper stopped, start pwm
		HAL_TIM_PWM_Start(&this->tim_handle, this->tim_channel);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	1d1a      	adds	r2, r3, #4
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001980:	4619      	mov	r1, r3
 8001982:	4610      	mov	r0, r2
 8001984:	f003 fb0a 	bl	8004f9c <HAL_TIM_PWM_Start>
	}
	PWM_set_freq(this->tim_handle.Instance, hz);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff62 	bl	8001858 <_Z12PWM_set_freqP11TIM_TypeDefi>

	if(dir==1) {
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b01      	cmp	r3, #1
 8001998:	d109      	bne.n	80019ae <_ZN7Stepper19set_speed_step_freqEii+0x62>
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019a4:	2201      	movs	r2, #1
 80019a6:	4619      	mov	r1, r3
 80019a8:	f002 fa2c 	bl	8003e04 <HAL_GPIO_WritePin>
 80019ac:	e008      	b.n	80019c0 <_ZN7Stepper19set_speed_step_freqEii+0x74>
	}else {
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_RESET);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019b8:	2200      	movs	r2, #0
 80019ba:	4619      	mov	r1, r3
 80019bc:	f002 fa22 	bl	8003e04 <HAL_GPIO_WritePin>
	}
}
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <_ZN7Stepper13set_speed_rpsEf>:

void Stepper::set_speed_rps(float rps) {
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	ed87 0a00 	vstr	s0, [r7]
	// 3200 steps per revolution
	int hz = rps * 3200.0;
 80019d4:	6838      	ldr	r0, [r7, #0]
 80019d6:	f7fe fdd7 	bl	8000588 <__aeabi_f2d>
 80019da:	f04f 0200 	mov.w	r2, #0
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <_ZN7Stepper13set_speed_rpsEf+0x54>)
 80019e0:	f7fe fe2a 	bl	8000638 <__aeabi_dmul>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f8be 	bl	8000b6c <__aeabi_d2iz>
 80019f0:	4603      	mov	r3, r0
 80019f2:	60fb      	str	r3, [r7, #12]
	if(hz>=0) {
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	db05      	blt.n	8001a06 <_ZN7Stepper13set_speed_rpsEf+0x3e>
		this->set_speed_step_freq(hz, 1);
 80019fa:	2201      	movs	r2, #1
 80019fc:	68f9      	ldr	r1, [r7, #12]
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff ffa4 	bl	800194c <_ZN7Stepper19set_speed_step_freqEii>
	}
	else {
		this->set_speed_step_freq(-hz, 0);
	}
}
 8001a04:	e006      	b.n	8001a14 <_ZN7Stepper13set_speed_rpsEf+0x4c>
		this->set_speed_step_freq(-hz, 0);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	425b      	negs	r3, r3
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ff9c 	bl	800194c <_ZN7Stepper19set_speed_step_freqEii>
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40a90000 	.word	0x40a90000

08001a20 <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 8001a20:	b480      	push	{r7}
 8001a22:	b083      	sub	sp, #12
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	4a04      	ldr	r2, [pc, #16]	; (8001a3c <_ZN7StepperD1Ev+0x1c>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	08007900 	.word	0x08007900

08001a40 <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
}
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f7ff ffe9 	bl	8001a20 <_ZN7StepperD1Ev>
 8001a4e:	2164      	movs	r1, #100	; 0x64
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f004 fd67 	bl	8006524 <_ZdlPvj>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3708      	adds	r7, #8
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6) {
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d101      	bne.n	8001a76 <HAL_TIM_PeriodElapsedCallback+0x16>
    	loop();
 8001a72:	f000 f893 	bl	8001b9c <_Z4loopv>
    }

}
 8001a76:	bf00      	nop
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40001000 	.word	0x40001000

08001a84 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b094      	sub	sp, #80	; 0x50
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d03f      	beq.n	8001b18 <HAL_FDCAN_RxFifo0Callback+0x94>
	{
		/* Retrieve Rx messages from RX FIFO0 */
		FDCAN_RxHeaderTypeDef RxHeader;
		uint8_t RxData[8];

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001a98:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a9c:	f107 0208 	add.w	r2, r7, #8
 8001aa0:	2140      	movs	r1, #64	; 0x40
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f001 fc5a 	bl	800335c <HAL_FDCAN_GetRxMessage>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	bf14      	ite	ne
 8001aae:	2301      	movne	r3, #1
 8001ab0:	2300      	moveq	r3, #0
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d004      	beq.n	8001ac2 <HAL_FDCAN_RxFifo0Callback+0x3e>
		{
			printf("error rx\n");
 8001ab8:	4819      	ldr	r0, [pc, #100]	; (8001b20 <HAL_FDCAN_RxFifo0Callback+0x9c>)
 8001aba:	f005 f8bd 	bl	8006c38 <puts>
			Error_Handler();
 8001abe:	f000 fe3d 	bl	800273c <Error_Handler>
		}

		if ((RxHeader.Identifier == 0x123) && (RxHeader.IdType == FDCAN_STANDARD_ID))
 8001ac2:	68bb      	ldr	r3, [r7, #8]
 8001ac4:	f240 1223 	movw	r2, #291	; 0x123
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d125      	bne.n	8001b18 <HAL_FDCAN_RxFifo0Callback+0x94>
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d122      	bne.n	8001b18 <HAL_FDCAN_RxFifo0Callback+0x94>
		{
			msg_recomposer_123.add_frame(RxData, RxHeader.DataLength);
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	b2da      	uxtb	r2, r3
 8001ad6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ada:	4619      	mov	r1, r3
 8001adc:	4811      	ldr	r0, [pc, #68]	; (8001b24 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 8001ade:	f7ff fd1b 	bl	8001518 <_ZN17MessageRecomposer9add_frameEPhh>

			if(msg_recomposer_123.check_if_new_full_msg()) {
 8001ae2:	4810      	ldr	r0, [pc, #64]	; (8001b24 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 8001ae4:	f7ff fde4 	bl	80016b0 <_ZN17MessageRecomposer21check_if_new_full_msgEv>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d014      	beq.n	8001b18 <HAL_FDCAN_RxFifo0Callback+0x94>
				std::string full_msg = msg_recomposer_123.get_full_msg();
 8001aee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001af2:	490c      	ldr	r1, [pc, #48]	; (8001b24 <HAL_FDCAN_RxFifo0Callback+0xa0>)
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fde7 	bl	80016c8 <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>
				printf("got full msg : %s\n", full_msg.c_str());
 8001afa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001afe:	4618      	mov	r0, r3
 8001b00:	f004 fe24 	bl	800674c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4619      	mov	r1, r3
 8001b08:	4807      	ldr	r0, [pc, #28]	; (8001b28 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001b0a:	f005 f82f 	bl	8006b6c <iprintf>
			}
 8001b0e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b12:	4618      	mov	r0, r3
 8001b14:	f004 fdb7 	bl	8006686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8001b18:	bf00      	nop
 8001b1a:	3750      	adds	r7, #80	; 0x50
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	080078a8 	.word	0x080078a8
 8001b24:	20000494 	.word	0x20000494
 8001b28:	080078b4 	.word	0x080078b4
 8001b2c:	00000000 	.word	0x00000000

08001b30 <_Z13set_loop_freqi>:

void set_loop_freq(int hz) {
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
	htim6.Instance->ARR = SYS_CORE_CLOCK_HZ / (htim6.Instance->PSC+1) / hz;
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <_Z13set_loop_freqi+0x68>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	3301      	adds	r3, #1
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fcff 	bl	8000544 <__aeabi_ui2d>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	a111      	add	r1, pc, #68	; (adr r1, 8001b90 <_Z13set_loop_freqi+0x60>)
 8001b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b50:	f7fe fe9c 	bl	800088c <__aeabi_ddiv>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4614      	mov	r4, r2
 8001b5a:	461d      	mov	r5, r3
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f7fe fd01 	bl	8000564 <__aeabi_i2d>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4620      	mov	r0, r4
 8001b68:	4629      	mov	r1, r5
 8001b6a:	f7fe fe8f 	bl	800088c <__aeabi_ddiv>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	460b      	mov	r3, r1
 8001b72:	4909      	ldr	r1, [pc, #36]	; (8001b98 <_Z13set_loop_freqi+0x68>)
 8001b74:	680c      	ldr	r4, [r1, #0]
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7ff f81f 	bl	8000bbc <__aeabi_d2uiz>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001b82:	bf00      	nop
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bdb0      	pop	{r4, r5, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	f3af 8000 	nop.w
 8001b90:	00000000 	.word	0x00000000
 8001b94:	41a443fd 	.word	0x41a443fd
 8001b98:	20000134 	.word	0x20000134

08001b9c <_Z4loopv>:

void loop() {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8001ba2:	f001 f93d 	bl	8002e20 <HAL_GetTick>
 8001ba6:	6078      	str	r0, [r7, #4]
	if(current_time-last_time > time_switch_cmd) {
 8001ba8:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <_Z4loopv+0x78>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	1ad2      	subs	r2, r2, r3
 8001bb0:	4b19      	ldr	r3, [pc, #100]	; (8001c18 <_Z4loopv+0x7c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d925      	bls.n	8001c04 <_Z4loopv+0x68>
		i_cmd += 1;
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <_Z4loopv+0x80>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	4a17      	ldr	r2, [pc, #92]	; (8001c1c <_Z4loopv+0x80>)
 8001bc0:	6013      	str	r3, [r2, #0]
		if(i_cmd == 4) {
 8001bc2:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <_Z4loopv+0x80>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b04      	cmp	r3, #4
 8001bc8:	d102      	bne.n	8001bd0 <_Z4loopv+0x34>
			i_cmd = 0;
 8001bca:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <_Z4loopv+0x80>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
		}
		last_time = current_time;
 8001bd0:	4a10      	ldr	r2, [pc, #64]	; (8001c14 <_Z4loopv+0x78>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6013      	str	r3, [r2, #0]

		holo_drive.set_cmd_vel(cmds[i_cmd]);
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <_Z4loopv+0x80>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4911      	ldr	r1, [pc, #68]	; (8001c20 <_Z4loopv+0x84>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	4413      	add	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	edd3 6a00 	vldr	s13, [r3]
 8001bea:	ed93 7a01 	vldr	s14, [r3, #4]
 8001bee:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bf2:	eeb0 0a66 	vmov.f32	s0, s13
 8001bf6:	eef0 0a47 	vmov.f32	s1, s14
 8001bfa:	eeb0 1a67 	vmov.f32	s2, s15
 8001bfe:	4809      	ldr	r0, [pc, #36]	; (8001c24 <_Z4loopv+0x88>)
 8001c00:	f7ff fa0c 	bl	800101c <_ZN15HolonomicDrive311set_cmd_velE3Vel>
	}

	holo_drive.spin_once_motors_control();
 8001c04:	4807      	ldr	r0, [pc, #28]	; (8001c24 <_Z4loopv+0x88>)
 8001c06:	f7ff fb6b 	bl	80012e0 <_ZN15HolonomicDrive324spin_once_motors_controlEv>
}
 8001c0a:	bf00      	nop
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200006b0 	.word	0x200006b0
 8001c18:	200006b4 	.word	0x200006b4
 8001c1c:	200006b8 	.word	0x200006b8
 8001c20:	200006bc 	.word	0x200006bc
 8001c24:	20000344 	.word	0x20000344

08001c28 <_ZN7StepperC1ERKS_>:
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <_ZN7StepperC1ERKS_+0x58>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	1d10      	adds	r0, r2, #4
 8001c3e:	3304      	adds	r3, #4
 8001c40:	224c      	movs	r2, #76	; 0x4c
 8001c42:	4619      	mov	r1, r3
 8001c44:	f005 f9a7 	bl	8006f96 <memcpy>
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	651a      	str	r2, [r3, #80]	; 0x50
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	659a      	str	r2, [r3, #88]	; 0x58
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	661a      	str	r2, [r3, #96]	; 0x60
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	08007900 	.word	0x08007900

08001c84 <_ZN15HolonomicDrive3aSERKS_>:
	float x = 0;
	float y = 0;
	float theta = 0;
};

class HolonomicDrive3 {
 8001c84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	1d1a      	adds	r2, r3, #4
 8001c92:	2502      	movs	r5, #2
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	1d1c      	adds	r4, r3, #4
 8001c98:	4616      	mov	r6, r2
 8001c9a:	e006      	b.n	8001caa <_ZN15HolonomicDrive3aSERKS_+0x26>
 8001c9c:	4621      	mov	r1, r4
 8001c9e:	4630      	mov	r0, r6
 8001ca0:	f7ff f92a 	bl	8000ef8 <_ZN7StepperaSERKS_>
 8001ca4:	3664      	adds	r6, #100	; 0x64
 8001ca6:	3464      	adds	r4, #100	; 0x64
 8001ca8:	3d01      	subs	r5, #1
 8001caa:	2d00      	cmp	r5, #0
 8001cac:	daf6      	bge.n	8001c9c <_ZN15HolonomicDrive3aSERKS_+0x18>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001cce:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8001cd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001cd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f503 71a2 	add.w	r1, r3, #324	; 0x144
 8001cde:	2202      	movs	r2, #2
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8001ce6:	e004      	b.n	8001cf2 <_ZN15HolonomicDrive3aSERKS_+0x6e>
 8001ce8:	6818      	ldr	r0, [r3, #0]
 8001cea:	6008      	str	r0, [r1, #0]
 8001cec:	3104      	adds	r1, #4
 8001cee:	3304      	adds	r3, #4
 8001cf0:	3a01      	subs	r2, #1
 8001cf2:	2a00      	cmp	r2, #0
 8001cf4:	daf8      	bge.n	8001ce8 <_ZN15HolonomicDrive3aSERKS_+0x64>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d00 <_ZN17MessageRecomposeraSERKS_>:
 */
#define MAX_LENGTH_MSG 20

#include "string"

class MessageRecomposer {
 8001d00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685a      	ldr	r2, [r3, #4]
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	605a      	str	r2, [r3, #4]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	7b1a      	ldrb	r2, [r3, #12]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	731a      	strb	r2, [r3, #12]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f103 010d 	add.w	r1, r3, #13
 8001d28:	2213      	movs	r2, #19
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	330d      	adds	r3, #13
 8001d2e:	e004      	b.n	8001d3a <_ZN17MessageRecomposeraSERKS_+0x3a>
 8001d30:	7818      	ldrb	r0, [r3, #0]
 8001d32:	7008      	strb	r0, [r1, #0]
 8001d34:	3101      	adds	r1, #1
 8001d36:	3301      	adds	r3, #1
 8001d38:	3a01      	subs	r2, #1
 8001d3a:	2a00      	cmp	r2, #0
 8001d3c:	daf8      	bge.n	8001d30 <_ZN17MessageRecomposeraSERKS_+0x30>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001d44:	2513      	movs	r5, #19
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001d4c:	4616      	mov	r6, r2
 8001d4e:	e006      	b.n	8001d5e <_ZN17MessageRecomposeraSERKS_+0x5e>
 8001d50:	4621      	mov	r1, r4
 8001d52:	4630      	mov	r0, r6
 8001d54:	f004 fc9d 	bl	8006692 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8001d58:	3618      	adds	r6, #24
 8001d5a:	3418      	adds	r4, #24
 8001d5c:	3d01      	subs	r5, #1
 8001d5e:	2d00      	cmp	r5, #0
 8001d60:	daf6      	bge.n	8001d50 <_ZN17MessageRecomposeraSERKS_+0x50>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4610      	mov	r0, r2
 8001d72:	f004 fc8e 	bl	8006692 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d82:	f2ad 6d4c 	subw	sp, sp, #1612	; 0x64c
 8001d86:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d88:	f000 ffe5 	bl	8002d56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d8c:	f000 f97a 	bl	8002084 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d90:	f000 fc96 	bl	80026c0 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8001d94:	f000 fa18 	bl	80021c8 <_ZL12MX_TIM1_Initv>
  MX_TIM8_Init();
 8001d98:	f000 fb26 	bl	80023e8 <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 8001d9c:	f000 fae4 	bl	8002368 <_ZL12MX_TIM6_Initv>
  MX_FDCAN1_Init();
 8001da0:	f000 f9c6 	bl	8002130 <_ZL14MX_FDCAN1_Initv>
  MX_TIM15_Init();
 8001da4:	f000 fbf0 	bl	8002588 <_ZL13MX_TIM15_Initv>
  /* USER CODE BEGIN 2 */

  stepper0 = Stepper(htim8, TIM_CHANNEL_1, GPIOA, GPIO_PIN_4);
 8001da8:	4ea6      	ldr	r6, [pc, #664]	; (8002044 <main+0x2c4>)
 8001daa:	f107 0c30 	add.w	ip, r7, #48	; 0x30
 8001dae:	2310      	movs	r3, #16
 8001db0:	9312      	str	r3, [sp, #72]	; 0x48
 8001db2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001db6:	9311      	str	r3, [sp, #68]	; 0x44
 8001db8:	2300      	movs	r3, #0
 8001dba:	9310      	str	r3, [sp, #64]	; 0x40
 8001dbc:	466d      	mov	r5, sp
 8001dbe:	f106 040c 	add.w	r4, r6, #12
 8001dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001dcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dd2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001dd6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001dda:	4660      	mov	r0, ip
 8001ddc:	f7ff fd78 	bl	80018d0 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 8001de0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001de4:	4619      	mov	r1, r3
 8001de6:	4898      	ldr	r0, [pc, #608]	; (8002048 <main+0x2c8>)
 8001de8:	f7ff f886 	bl	8000ef8 <_ZN7StepperaSERKS_>
 8001dec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff fe15 	bl	8001a20 <_ZN7StepperD1Ev>
  stepper1 = Stepper(htim1, TIM_CHANNEL_1, GPIOA, GPIO_PIN_0);
 8001df6:	4e95      	ldr	r6, [pc, #596]	; (800204c <main+0x2cc>)
 8001df8:	f107 0c94 	add.w	ip, r7, #148	; 0x94
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	9312      	str	r3, [sp, #72]	; 0x48
 8001e00:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e04:	9311      	str	r3, [sp, #68]	; 0x44
 8001e06:	2300      	movs	r3, #0
 8001e08:	9310      	str	r3, [sp, #64]	; 0x40
 8001e0a:	466d      	mov	r5, sp
 8001e0c:	f106 040c 	add.w	r4, r6, #12
 8001e10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e20:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e24:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001e28:	4660      	mov	r0, ip
 8001e2a:	f7ff fd51 	bl	80018d0 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 8001e2e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e32:	4619      	mov	r1, r3
 8001e34:	4886      	ldr	r0, [pc, #536]	; (8002050 <main+0x2d0>)
 8001e36:	f7ff f85f 	bl	8000ef8 <_ZN7StepperaSERKS_>
 8001e3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fdee 	bl	8001a20 <_ZN7StepperD1Ev>
  stepper2 = Stepper(htim15, TIM_CHANNEL_1, GPIOA, GPIO_PIN_1);
 8001e44:	4e83      	ldr	r6, [pc, #524]	; (8002054 <main+0x2d4>)
 8001e46:	f107 0cf8 	add.w	ip, r7, #248	; 0xf8
 8001e4a:	2302      	movs	r3, #2
 8001e4c:	9312      	str	r3, [sp, #72]	; 0x48
 8001e4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e52:	9311      	str	r3, [sp, #68]	; 0x44
 8001e54:	2300      	movs	r3, #0
 8001e56:	9310      	str	r3, [sp, #64]	; 0x40
 8001e58:	466d      	mov	r5, sp
 8001e5a:	f106 040c 	add.w	r4, r6, #12
 8001e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e6e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e72:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001e76:	4660      	mov	r0, ip
 8001e78:	f7ff fd2a 	bl	80018d0 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 8001e7c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e80:	4619      	mov	r1, r3
 8001e82:	4875      	ldr	r0, [pc, #468]	; (8002058 <main+0x2d8>)
 8001e84:	f7ff f838 	bl	8000ef8 <_ZN7StepperaSERKS_>
 8001e88:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fdc7 	bl	8001a20 <_ZN7StepperD1Ev>

  holo_drive = HolonomicDrive3(stepper0, stepper1, stepper2, 0.029, 0.175);
 8001e92:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8001e96:	496c      	ldr	r1, [pc, #432]	; (8002048 <main+0x2c8>)
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fec5 	bl	8001c28 <_ZN7StepperC1ERKS_>
 8001e9e:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001ea2:	496b      	ldr	r1, [pc, #428]	; (8002050 <main+0x2d0>)
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff febf 	bl	8001c28 <_ZN7StepperC1ERKS_>
 8001eaa:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8001eae:	496a      	ldr	r1, [pc, #424]	; (8002058 <main+0x2d8>)
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7ff feb9 	bl	8001c28 <_ZN7StepperC1ERKS_>
 8001eb6:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8001eba:	f507 7244 	add.w	r2, r7, #784	; 0x310
 8001ebe:	f507 712b 	add.w	r1, r7, #684	; 0x2ac
 8001ec2:	f507 70ae 	add.w	r0, r7, #348	; 0x15c
 8001ec6:	eddf 0a65 	vldr	s1, [pc, #404]	; 800205c <main+0x2dc>
 8001eca:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8002060 <main+0x2e0>
 8001ece:	f7ff f83b 	bl	8000f48 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>
 8001ed2:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4862      	ldr	r0, [pc, #392]	; (8002064 <main+0x2e4>)
 8001eda:	f7ff fed3 	bl	8001c84 <_ZN15HolonomicDrive3aSERKS_>
 8001ede:	f507 73ae 	add.w	r3, r7, #348	; 0x15c
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fac4 	bl	8001470 <_ZN15HolonomicDrive3D1Ev>
 8001ee8:	f507 735d 	add.w	r3, r7, #884	; 0x374
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff fd97 	bl	8001a20 <_ZN7StepperD1Ev>
 8001ef2:	f507 7344 	add.w	r3, r7, #784	; 0x310
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fd92 	bl	8001a20 <_ZN7StepperD1Ev>
 8001efc:	f507 732b 	add.w	r3, r7, #684	; 0x2ac
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fd8d 	bl	8001a20 <_ZN7StepperD1Ev>

  ChampiCan champi_can = ChampiCan(&hfdcan1);
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	4957      	ldr	r1, [pc, #348]	; (8002068 <main+0x2e8>)
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7fe fec6 	bl	8000c9c <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>
  msg_recomposer_123 = MessageRecomposer();
 8001f10:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fadf 	bl	80014d8 <_ZN17MessageRecomposerC1Ev>
 8001f1a:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4852      	ldr	r0, [pc, #328]	; (800206c <main+0x2ec>)
 8001f22:	f7ff feed 	bl	8001d00 <_ZN17MessageRecomposeraSERKS_>
 8001f26:	f507 7376 	add.w	r3, r7, #984	; 0x3d8
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f7ff fbe0 	bl	80016f0 <_ZN17MessageRecomposerD1Ev>


  if(champi_can.start() != 0) {
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe fedc 	bl	8000cf0 <_ZN9ChampiCan5startEv>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	bf14      	ite	ne
 8001f3e:	2301      	movne	r3, #1
 8001f40:	2300      	moveq	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <main+0x1cc>
	  Error_Handler();
 8001f48:	f000 fbf8 	bl	800273c <Error_Handler>
  }

  set_loop_freq(100);
 8001f4c:	2064      	movs	r0, #100	; 0x64
 8001f4e:	f7ff fdef 	bl	8001b30 <_Z13set_loop_freqi>
  HAL_TIM_Base_Start_IT(&htim6);
 8001f52:	4847      	ldr	r0, [pc, #284]	; (8002070 <main+0x2f0>)
 8001f54:	f002 ff60 	bl	8004e18 <HAL_TIM_Base_Start_IT>

  float sp = 0.5;
 8001f58:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001f5c:	f207 52f4 	addw	r2, r7, #1524	; 0x5f4
 8001f60:	6013      	str	r3, [r2, #0]

  cmds[0] = {};
 8001f62:	4b44      	ldr	r3, [pc, #272]	; (8002074 <main+0x2f4>)
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	4b42      	ldr	r3, [pc, #264]	; (8002074 <main+0x2f4>)
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	4b40      	ldr	r3, [pc, #256]	; (8002074 <main+0x2f4>)
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	609a      	str	r2, [r3, #8]
  cmds[0].x = sp;
 8001f7a:	4a3e      	ldr	r2, [pc, #248]	; (8002074 <main+0x2f4>)
 8001f7c:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	6013      	str	r3, [r2, #0]
  cmds[1] = {};
 8001f84:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <main+0x2f4>)
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	60da      	str	r2, [r3, #12]
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <main+0x2f4>)
 8001f8e:	f04f 0200 	mov.w	r2, #0
 8001f92:	611a      	str	r2, [r3, #16]
 8001f94:	4b37      	ldr	r3, [pc, #220]	; (8002074 <main+0x2f4>)
 8001f96:	f04f 0200 	mov.w	r2, #0
 8001f9a:	615a      	str	r2, [r3, #20]
  cmds[1].y = sp;
 8001f9c:	4a35      	ldr	r2, [pc, #212]	; (8002074 <main+0x2f4>)
 8001f9e:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	6113      	str	r3, [r2, #16]
  cmds[2] = {};
 8001fa6:	4b33      	ldr	r3, [pc, #204]	; (8002074 <main+0x2f4>)
 8001fa8:	f04f 0200 	mov.w	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
 8001fae:	4b31      	ldr	r3, [pc, #196]	; (8002074 <main+0x2f4>)
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
 8001fb6:	4b2f      	ldr	r3, [pc, #188]	; (8002074 <main+0x2f4>)
 8001fb8:	f04f 0200 	mov.w	r2, #0
 8001fbc:	621a      	str	r2, [r3, #32]
  cmds[2].x = -sp;
 8001fbe:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 8001fc2:	edd3 7a00 	vldr	s15, [r3]
 8001fc6:	eef1 7a67 	vneg.f32	s15, s15
 8001fca:	4b2a      	ldr	r3, [pc, #168]	; (8002074 <main+0x2f4>)
 8001fcc:	edc3 7a06 	vstr	s15, [r3, #24]
  cmds[3] = {};
 8001fd0:	4b28      	ldr	r3, [pc, #160]	; (8002074 <main+0x2f4>)
 8001fd2:	f04f 0200 	mov.w	r2, #0
 8001fd6:	625a      	str	r2, [r3, #36]	; 0x24
 8001fd8:	4b26      	ldr	r3, [pc, #152]	; (8002074 <main+0x2f4>)
 8001fda:	f04f 0200 	mov.w	r2, #0
 8001fde:	629a      	str	r2, [r3, #40]	; 0x28
 8001fe0:	4b24      	ldr	r3, [pc, #144]	; (8002074 <main+0x2f4>)
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	62da      	str	r2, [r3, #44]	; 0x2c
  cmds[3].y = -sp;
 8001fe8:	f207 53f4 	addw	r3, r7, #1524	; 0x5f4
 8001fec:	edd3 7a00 	vldr	s15, [r3]
 8001ff0:	eef1 7a67 	vneg.f32	s15, s15
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	; (8002074 <main+0x2f4>)
 8001ff6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  time_switch_cmd = 1000; //ms
 8001ffa:	4b1f      	ldr	r3, [pc, #124]	; (8002078 <main+0x2f8>)
 8001ffc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002000:	601a      	str	r2, [r3, #0]
  i_cmd = 0;
 8002002:	4b1e      	ldr	r3, [pc, #120]	; (800207c <main+0x2fc>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

  last_time = HAL_GetTick();
 8002008:	f000 ff0a 	bl	8002e20 <HAL_GetTick>
 800200c:	4603      	mov	r3, r0
 800200e:	4a1c      	ldr	r2, [pc, #112]	; (8002080 <main+0x300>)
 8002010:	6013      	str	r3, [r2, #0]

  holo_drive.set_cmd_vel(cmds[i_cmd]);
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <main+0x2fc>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4917      	ldr	r1, [pc, #92]	; (8002074 <main+0x2f4>)
 8002018:	4613      	mov	r3, r2
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	edd3 6a00 	vldr	s13, [r3]
 8002026:	ed93 7a01 	vldr	s14, [r3, #4]
 800202a:	edd3 7a02 	vldr	s15, [r3, #8]
 800202e:	eeb0 0a66 	vmov.f32	s0, s13
 8002032:	eef0 0a47 	vmov.f32	s1, s14
 8002036:	eeb0 1a67 	vmov.f32	s2, s15
 800203a:	480a      	ldr	r0, [pc, #40]	; (8002064 <main+0x2e4>)
 800203c:	f7fe ffee 	bl	800101c <_ZN15HolonomicDrive311set_cmd_velE3Vel>

  while (1)
 8002040:	e7fe      	b.n	8002040 <main+0x2c0>
 8002042:	bf00      	nop
 8002044:	20000180 	.word	0x20000180
 8002048:	20000218 	.word	0x20000218
 800204c:	200000e8 	.word	0x200000e8
 8002050:	2000027c 	.word	0x2000027c
 8002054:	200001cc 	.word	0x200001cc
 8002058:	200002e0 	.word	0x200002e0
 800205c:	3e333333 	.word	0x3e333333
 8002060:	3ced9168 	.word	0x3ced9168
 8002064:	20000344 	.word	0x20000344
 8002068:	20000084 	.word	0x20000084
 800206c:	20000494 	.word	0x20000494
 8002070:	20000134 	.word	0x20000134
 8002074:	200006bc 	.word	0x200006bc
 8002078:	200006b4 	.word	0x200006b4
 800207c:	200006b8 	.word	0x200006b8
 8002080:	200006b0 	.word	0x200006b0

08002084 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b094      	sub	sp, #80	; 0x50
 8002088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800208a:	f107 0318 	add.w	r3, r7, #24
 800208e:	2238      	movs	r2, #56	; 0x38
 8002090:	2100      	movs	r1, #0
 8002092:	4618      	mov	r0, r3
 8002094:	f004 feb0 	bl	8006df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002098:	1d3b      	adds	r3, r7, #4
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
 800209e:	605a      	str	r2, [r3, #4]
 80020a0:	609a      	str	r2, [r3, #8]
 80020a2:	60da      	str	r2, [r3, #12]
 80020a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80020a6:	2000      	movs	r0, #0
 80020a8:	f001 fec4 	bl	8003e34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020ac:	2302      	movs	r3, #2
 80020ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020b6:	2340      	movs	r3, #64	; 0x40
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ba:	2302      	movs	r3, #2
 80020bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020be:	2302      	movs	r3, #2
 80020c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80020c2:	2304      	movs	r3, #4
 80020c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80020c6:	2355      	movs	r3, #85	; 0x55
 80020c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020ca:	2302      	movs	r3, #2
 80020cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020ce:	2302      	movs	r3, #2
 80020d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80020d2:	2302      	movs	r3, #2
 80020d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d6:	f107 0318 	add.w	r3, r7, #24
 80020da:	4618      	mov	r0, r3
 80020dc:	f001 ff5e 	bl	8003f9c <HAL_RCC_OscConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	bf14      	ite	ne
 80020e6:	2301      	movne	r3, #1
 80020e8:	2300      	moveq	r3, #0
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80020f0:	f000 fb24 	bl	800273c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020f4:	230f      	movs	r3, #15
 80020f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020f8:	2303      	movs	r3, #3
 80020fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020fc:	2300      	movs	r3, #0
 80020fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002100:	2300      	movs	r3, #0
 8002102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002104:	2300      	movs	r3, #0
 8002106:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	2104      	movs	r1, #4
 800210c:	4618      	mov	r0, r3
 800210e:	f002 fa57 	bl	80045c0 <HAL_RCC_ClockConfig>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	bf14      	ite	ne
 8002118:	2301      	movne	r3, #1
 800211a:	2300      	moveq	r3, #0
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8002122:	f000 fb0b 	bl	800273c <Error_Handler>
  }
}
 8002126:	bf00      	nop
 8002128:	3750      	adds	r7, #80	; 0x50
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
	...

08002130 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002134:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002136:	4a23      	ldr	r2, [pc, #140]	; (80021c4 <_ZL14MX_FDCAN1_Initv+0x94>)
 8002138:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800213a:	4b21      	ldr	r3, [pc, #132]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800213c:	2200      	movs	r2, #0
 800213e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002140:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002148:	2200      	movs	r2, #0
 800214a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800214c:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800214e:	2201      	movs	r2, #1
 8002150:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002152:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002154:	2200      	movs	r2, #0
 8002156:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002158:	4b19      	ldr	r3, [pc, #100]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800215a:	2200      	movs	r2, #0
 800215c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002160:	220a      	movs	r2, #10
 8002162:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002164:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002166:	2201      	movs	r2, #1
 8002168:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800216c:	220e      	movs	r2, #14
 800216e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002170:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002172:	2202      	movs	r2, #2
 8002174:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 8002176:	4b12      	ldr	r3, [pc, #72]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002178:	220a      	movs	r2, #10
 800217a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800217c:	4b10      	ldr	r3, [pc, #64]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800217e:	2201      	movs	r2, #1
 8002180:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8002182:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002184:	220e      	movs	r2, #14
 8002186:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8002188:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800218a:	2202      	movs	r2, #2
 800218c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800218e:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002190:	2200      	movs	r2, #0
 8002192:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002194:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002196:	2200      	movs	r2, #0
 8002198:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800219c:	2200      	movs	r2, #0
 800219e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80021a0:	4807      	ldr	r0, [pc, #28]	; (80021c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 80021a2:	f000 ff59 	bl	8003058 <HAL_FDCAN_Init>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	bf14      	ite	ne
 80021ac:	2301      	movne	r3, #1
 80021ae:	2300      	moveq	r3, #0
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 80021b6:	f000 fac1 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000084 	.word	0x20000084
 80021c4:	40006400 	.word	0x40006400

080021c8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b09c      	sub	sp, #112	; 0x70
 80021cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80021d2:	2200      	movs	r2, #0
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	605a      	str	r2, [r3, #4]
 80021d8:	609a      	str	r2, [r3, #8]
 80021da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
 80021f8:	615a      	str	r2, [r3, #20]
 80021fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80021fc:	1d3b      	adds	r3, r7, #4
 80021fe:	2234      	movs	r2, #52	; 0x34
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f004 fdf8 	bl	8006df8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002208:	4b55      	ldr	r3, [pc, #340]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 800220a:	4a56      	ldr	r2, [pc, #344]	; (8002364 <_ZL12MX_TIM1_Initv+0x19c>)
 800220c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 260;
 800220e:	4b54      	ldr	r3, [pc, #336]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 8002210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002214:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002216:	4b52      	ldr	r3, [pc, #328]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800221c:	4b50      	ldr	r3, [pc, #320]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 800221e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002222:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002224:	4b4e      	ldr	r3, [pc, #312]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 8002226:	2200      	movs	r2, #0
 8002228:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800222a:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 800222c:	2200      	movs	r2, #0
 800222e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002230:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 8002232:	2200      	movs	r2, #0
 8002234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002236:	484a      	ldr	r0, [pc, #296]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 8002238:	f002 fd96 	bl	8004d68 <HAL_TIM_Base_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	bf14      	ite	ne
 8002242:	2301      	movne	r3, #1
 8002244:	2300      	moveq	r3, #0
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 800224c:	f000 fa76 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002254:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002256:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800225a:	4619      	mov	r1, r3
 800225c:	4840      	ldr	r0, [pc, #256]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 800225e:	f003 fa97 	bl	8005790 <HAL_TIM_ConfigClockSource>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	bf14      	ite	ne
 8002268:	2301      	movne	r3, #1
 800226a:	2300      	moveq	r3, #0
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8002272:	f000 fa63 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002276:	483a      	ldr	r0, [pc, #232]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 8002278:	f002 fe38 	bl	8004eec <HAL_TIM_PWM_Init>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	bf14      	ite	ne
 8002282:	2301      	movne	r3, #1
 8002284:	2300      	moveq	r3, #0
 8002286:	b2db      	uxtb	r3, r3
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <_ZL12MX_TIM1_Initv+0xc8>
  {
    Error_Handler();
 800228c:	f000 fa56 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002290:	2300      	movs	r3, #0
 8002292:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002294:	2300      	movs	r3, #0
 8002296:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002298:	2300      	movs	r3, #0
 800229a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800229c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80022a0:	4619      	mov	r1, r3
 80022a2:	482f      	ldr	r0, [pc, #188]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 80022a4:	f003 ffea 	bl	800627c <HAL_TIMEx_MasterConfigSynchronization>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	bf14      	ite	ne
 80022ae:	2301      	movne	r3, #1
 80022b0:	2300      	moveq	r3, #0
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <_ZL12MX_TIM1_Initv+0xf4>
  {
    Error_Handler();
 80022b8:	f000 fa40 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022bc:	2360      	movs	r3, #96	; 0x60
 80022be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022c4:	2300      	movs	r3, #0
 80022c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80022c8:	2300      	movs	r3, #0
 80022ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022cc:	2300      	movs	r3, #0
 80022ce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80022d0:	2300      	movs	r3, #0
 80022d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80022d4:	2300      	movs	r3, #0
 80022d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022dc:	2200      	movs	r2, #0
 80022de:	4619      	mov	r1, r3
 80022e0:	481f      	ldr	r0, [pc, #124]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 80022e2:	f003 f941 	bl	8005568 <HAL_TIM_PWM_ConfigChannel>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	bf14      	ite	ne
 80022ec:	2301      	movne	r3, #1
 80022ee:	2300      	moveq	r3, #0
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 80022f6:	f000 fa21 	bl	800273c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800230e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002312:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002324:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800232a:	2300      	movs	r3, #0
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800232e:	2300      	movs	r3, #0
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	4619      	mov	r1, r3
 8002336:	480a      	ldr	r0, [pc, #40]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 8002338:	f004 f822 	bl	8006380 <HAL_TIMEx_ConfigBreakDeadTime>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	bf14      	ite	ne
 8002342:	2301      	movne	r3, #1
 8002344:	2300      	moveq	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <_ZL12MX_TIM1_Initv+0x188>
  {
    Error_Handler();
 800234c:	f000 f9f6 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002350:	4803      	ldr	r0, [pc, #12]	; (8002360 <_ZL12MX_TIM1_Initv+0x198>)
 8002352:	f000 fb3f 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8002356:	bf00      	nop
 8002358:	3770      	adds	r7, #112	; 0x70
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	200000e8 	.word	0x200000e8
 8002364:	40012c00 	.word	0x40012c00

08002368 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800236e:	1d3b      	adds	r3, r7, #4
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <_ZL12MX_TIM6_Initv+0x78>)
 800237a:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <_ZL12MX_TIM6_Initv+0x7c>)
 800237c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 800237e:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <_ZL12MX_TIM6_Initv+0x78>)
 8002380:	2264      	movs	r2, #100	; 0x64
 8002382:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002384:	4b16      	ldr	r3, [pc, #88]	; (80023e0 <_ZL12MX_TIM6_Initv+0x78>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <_ZL12MX_TIM6_Initv+0x78>)
 800238c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002390:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002392:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <_ZL12MX_TIM6_Initv+0x78>)
 8002394:	2200      	movs	r2, #0
 8002396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002398:	4811      	ldr	r0, [pc, #68]	; (80023e0 <_ZL12MX_TIM6_Initv+0x78>)
 800239a:	f002 fce5 	bl	8004d68 <HAL_TIM_Base_Init>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf14      	ite	ne
 80023a4:	2301      	movne	r3, #1
 80023a6:	2300      	moveq	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 80023ae:	f000 f9c5 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b2:	2300      	movs	r3, #0
 80023b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b6:	2300      	movs	r3, #0
 80023b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80023ba:	1d3b      	adds	r3, r7, #4
 80023bc:	4619      	mov	r1, r3
 80023be:	4808      	ldr	r0, [pc, #32]	; (80023e0 <_ZL12MX_TIM6_Initv+0x78>)
 80023c0:	f003 ff5c 	bl	800627c <HAL_TIMEx_MasterConfigSynchronization>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	bf14      	ite	ne
 80023ca:	2301      	movne	r3, #1
 80023cc:	2300      	moveq	r3, #0
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d001      	beq.n	80023d8 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 80023d4:	f000 f9b2 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80023d8:	bf00      	nop
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000134 	.word	0x20000134
 80023e4:	40001000 	.word	0x40001000

080023e8 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b09c      	sub	sp, #112	; 0x70
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002408:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	605a      	str	r2, [r3, #4]
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	60da      	str	r2, [r3, #12]
 8002416:	611a      	str	r2, [r3, #16]
 8002418:	615a      	str	r2, [r3, #20]
 800241a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	2234      	movs	r2, #52	; 0x34
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f004 fce8 	bl	8006df8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002428:	4b55      	ldr	r3, [pc, #340]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 800242a:	4a56      	ldr	r2, [pc, #344]	; (8002584 <_ZL12MX_TIM8_Initv+0x19c>)
 800242c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 260;
 800242e:	4b54      	ldr	r3, [pc, #336]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 8002430:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002434:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002436:	4b52      	ldr	r3, [pc, #328]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 8002438:	2200      	movs	r2, #0
 800243a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800243c:	4b50      	ldr	r3, [pc, #320]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 800243e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002442:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002444:	4b4e      	ldr	r3, [pc, #312]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 8002446:	2200      	movs	r2, #0
 8002448:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800244a:	4b4d      	ldr	r3, [pc, #308]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 800244c:	2200      	movs	r2, #0
 800244e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002450:	4b4b      	ldr	r3, [pc, #300]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002456:	484a      	ldr	r0, [pc, #296]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 8002458:	f002 fc86 	bl	8004d68 <HAL_TIM_Base_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	bf14      	ite	ne
 8002462:	2301      	movne	r3, #1
 8002464:	2300      	moveq	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 800246c:	f000 f966 	bl	800273c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002474:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002476:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800247a:	4619      	mov	r1, r3
 800247c:	4840      	ldr	r0, [pc, #256]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 800247e:	f003 f987 	bl	8005790 <HAL_TIM_ConfigClockSource>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	bf14      	ite	ne
 8002488:	2301      	movne	r3, #1
 800248a:	2300      	moveq	r3, #0
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <_ZL12MX_TIM8_Initv+0xae>
  {
    Error_Handler();
 8002492:	f000 f953 	bl	800273c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002496:	483a      	ldr	r0, [pc, #232]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 8002498:	f002 fd28 	bl	8004eec <HAL_TIM_PWM_Init>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	bf14      	ite	ne
 80024a2:	2301      	movne	r3, #1
 80024a4:	2300      	moveq	r3, #0
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <_ZL12MX_TIM8_Initv+0xc8>
  {
    Error_Handler();
 80024ac:	f000 f946 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024b0:	2300      	movs	r3, #0
 80024b2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80024b4:	2300      	movs	r3, #0
 80024b6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80024bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024c0:	4619      	mov	r1, r3
 80024c2:	482f      	ldr	r0, [pc, #188]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 80024c4:	f003 feda 	bl	800627c <HAL_TIMEx_MasterConfigSynchronization>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	bf14      	ite	ne
 80024ce:	2301      	movne	r3, #1
 80024d0:	2300      	moveq	r3, #0
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d001      	beq.n	80024dc <_ZL12MX_TIM8_Initv+0xf4>
  {
    Error_Handler();
 80024d8:	f000 f930 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024dc:	2360      	movs	r3, #96	; 0x60
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024e4:	2300      	movs	r3, #0
 80024e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024e8:	2300      	movs	r3, #0
 80024ea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024f0:	2300      	movs	r3, #0
 80024f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024f4:	2300      	movs	r3, #0
 80024f6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024fc:	2200      	movs	r2, #0
 80024fe:	4619      	mov	r1, r3
 8002500:	481f      	ldr	r0, [pc, #124]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 8002502:	f003 f831 	bl	8005568 <HAL_TIM_PWM_ConfigChannel>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	bf14      	ite	ne
 800250c:	2301      	movne	r3, #1
 800250e:	2300      	moveq	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <_ZL12MX_TIM8_Initv+0x132>
  {
    Error_Handler();
 8002516:	f000 f911 	bl	800273c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800251a:	2300      	movs	r3, #0
 800251c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800252e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002532:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002534:	2300      	movs	r3, #0
 8002536:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002538:	2300      	movs	r3, #0
 800253a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002540:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002544:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800254a:	2300      	movs	r3, #0
 800254c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800254e:	2300      	movs	r3, #0
 8002550:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002552:	1d3b      	adds	r3, r7, #4
 8002554:	4619      	mov	r1, r3
 8002556:	480a      	ldr	r0, [pc, #40]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 8002558:	f003 ff12 	bl	8006380 <HAL_TIMEx_ConfigBreakDeadTime>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	bf14      	ite	ne
 8002562:	2301      	movne	r3, #1
 8002564:	2300      	moveq	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <_ZL12MX_TIM8_Initv+0x188>
  {
    Error_Handler();
 800256c:	f000 f8e6 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002570:	4803      	ldr	r0, [pc, #12]	; (8002580 <_ZL12MX_TIM8_Initv+0x198>)
 8002572:	f000 fa2f 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 8002576:	bf00      	nop
 8002578:	3770      	adds	r7, #112	; 0x70
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	20000180 	.word	0x20000180
 8002584:	40013400 	.word	0x40013400

08002588 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b098      	sub	sp, #96	; 0x60
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002592:	2200      	movs	r2, #0
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	605a      	str	r2, [r3, #4]
 8002598:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800259a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
 80025a6:	60da      	str	r2, [r3, #12]
 80025a8:	611a      	str	r2, [r3, #16]
 80025aa:	615a      	str	r2, [r3, #20]
 80025ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025ae:	1d3b      	adds	r3, r7, #4
 80025b0:	2234      	movs	r2, #52	; 0x34
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f004 fc1f 	bl	8006df8 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80025ba:	4b3f      	ldr	r3, [pc, #252]	; (80026b8 <_ZL13MX_TIM15_Initv+0x130>)
 80025bc:	4a3f      	ldr	r2, [pc, #252]	; (80026bc <_ZL13MX_TIM15_Initv+0x134>)
 80025be:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 260;
 80025c0:	4b3d      	ldr	r3, [pc, #244]	; (80026b8 <_ZL13MX_TIM15_Initv+0x130>)
 80025c2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025c6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c8:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <_ZL13MX_TIM15_Initv+0x130>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80025ce:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <_ZL13MX_TIM15_Initv+0x130>)
 80025d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025d4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d6:	4b38      	ldr	r3, [pc, #224]	; (80026b8 <_ZL13MX_TIM15_Initv+0x130>)
 80025d8:	2200      	movs	r2, #0
 80025da:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80025dc:	4b36      	ldr	r3, [pc, #216]	; (80026b8 <_ZL13MX_TIM15_Initv+0x130>)
 80025de:	2200      	movs	r2, #0
 80025e0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e2:	4b35      	ldr	r3, [pc, #212]	; (80026b8 <_ZL13MX_TIM15_Initv+0x130>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80025e8:	4833      	ldr	r0, [pc, #204]	; (80026b8 <_ZL13MX_TIM15_Initv+0x130>)
 80025ea:	f002 fc7f 	bl	8004eec <HAL_TIM_PWM_Init>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	bf14      	ite	ne
 80025f4:	2301      	movne	r3, #1
 80025f6:	2300      	moveq	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d001      	beq.n	8002602 <_ZL13MX_TIM15_Initv+0x7a>
  {
    Error_Handler();
 80025fe:	f000 f89d 	bl	800273c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002606:	2300      	movs	r3, #0
 8002608:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800260a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800260e:	4619      	mov	r1, r3
 8002610:	4829      	ldr	r0, [pc, #164]	; (80026b8 <_ZL13MX_TIM15_Initv+0x130>)
 8002612:	f003 fe33 	bl	800627c <HAL_TIMEx_MasterConfigSynchronization>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <_ZL13MX_TIM15_Initv+0xa2>
  {
    Error_Handler();
 8002626:	f000 f889 	bl	800273c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800262a:	2360      	movs	r3, #96	; 0x60
 800262c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800262e:	2300      	movs	r3, #0
 8002630:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002632:	2300      	movs	r3, #0
 8002634:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002636:	2300      	movs	r3, #0
 8002638:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800263a:	2300      	movs	r3, #0
 800263c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800263e:	2300      	movs	r3, #0
 8002640:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002646:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800264a:	2200      	movs	r2, #0
 800264c:	4619      	mov	r1, r3
 800264e:	481a      	ldr	r0, [pc, #104]	; (80026b8 <_ZL13MX_TIM15_Initv+0x130>)
 8002650:	f002 ff8a 	bl	8005568 <HAL_TIM_PWM_ConfigChannel>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	bf14      	ite	ne
 800265a:	2301      	movne	r3, #1
 800265c:	2300      	moveq	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2b00      	cmp	r3, #0
 8002662:	d001      	beq.n	8002668 <_ZL13MX_TIM15_Initv+0xe0>
  {
    Error_Handler();
 8002664:	f000 f86a 	bl	800273c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002668:	2300      	movs	r3, #0
 800266a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800266c:	2300      	movs	r3, #0
 800266e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800267c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002680:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 800268a:	1d3b      	adds	r3, r7, #4
 800268c:	4619      	mov	r1, r3
 800268e:	480a      	ldr	r0, [pc, #40]	; (80026b8 <_ZL13MX_TIM15_Initv+0x130>)
 8002690:	f003 fe76 	bl	8006380 <HAL_TIMEx_ConfigBreakDeadTime>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf14      	ite	ne
 800269a:	2301      	movne	r3, #1
 800269c:	2300      	moveq	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <_ZL13MX_TIM15_Initv+0x120>
  {
    Error_Handler();
 80026a4:	f000 f84a 	bl	800273c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80026a8:	4803      	ldr	r0, [pc, #12]	; (80026b8 <_ZL13MX_TIM15_Initv+0x130>)
 80026aa:	f000 f993 	bl	80029d4 <HAL_TIM_MspPostInit>

}
 80026ae:	bf00      	nop
 80026b0:	3760      	adds	r7, #96	; 0x60
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	200001cc 	.word	0x200001cc
 80026bc:	40014000 	.word	0x40014000

080026c0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c6:	1d3b      	adds	r3, r7, #4
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	605a      	str	r2, [r3, #4]
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	60da      	str	r2, [r3, #12]
 80026d2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d4:	4b18      	ldr	r3, [pc, #96]	; (8002738 <_ZL12MX_GPIO_Initv+0x78>)
 80026d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d8:	4a17      	ldr	r2, [pc, #92]	; (8002738 <_ZL12MX_GPIO_Initv+0x78>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <_ZL12MX_GPIO_Initv+0x78>)
 80026e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2193      	movs	r1, #147	; 0x93
 80026f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026f4:	f001 fb86 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 80026f8:	2313      	movs	r3, #19
 80026fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026fc:	2301      	movs	r3, #1
 80026fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002708:	1d3b      	adds	r3, r7, #4
 800270a:	4619      	mov	r1, r3
 800270c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002710:	f001 f9f6 	bl	8003b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002718:	2311      	movs	r3, #17
 800271a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271c:	2300      	movs	r3, #0
 800271e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	4619      	mov	r1, r3
 8002728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800272c:	f001 f9e8 	bl	8003b00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002730:	bf00      	nop
 8002732:	3718      	adds	r7, #24
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000

0800273c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800273c:	b480      	push	{r7}
 800273e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002740:	b672      	cpsid	i
}
 8002742:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002744:	e7fe      	b.n	8002744 <Error_Handler+0x8>
	...

08002748 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d113      	bne.n	8002780 <_Z41__static_initialization_and_destruction_0ii+0x38>
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800275e:	4293      	cmp	r3, r2
 8002760:	d10e      	bne.n	8002780 <_Z41__static_initialization_and_destruction_0ii+0x38>
Stepper stepper0;
 8002762:	4815      	ldr	r0, [pc, #84]	; (80027b8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002764:	f7ff f8a4 	bl	80018b0 <_ZN7StepperC1Ev>
Stepper stepper1;
 8002768:	4814      	ldr	r0, [pc, #80]	; (80027bc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800276a:	f7ff f8a1 	bl	80018b0 <_ZN7StepperC1Ev>
Stepper stepper2;
 800276e:	4814      	ldr	r0, [pc, #80]	; (80027c0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8002770:	f7ff f89e 	bl	80018b0 <_ZN7StepperC1Ev>
HolonomicDrive3 holo_drive;
 8002774:	4813      	ldr	r0, [pc, #76]	; (80027c4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002776:	f7fe fe5b 	bl	8001430 <_ZN15HolonomicDrive3C1Ev>
MessageRecomposer msg_recomposer_123;
 800277a:	4813      	ldr	r0, [pc, #76]	; (80027c8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800277c:	f7fe feac 	bl	80014d8 <_ZN17MessageRecomposerC1Ev>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d113      	bne.n	80027ae <_Z41__static_initialization_and_destruction_0ii+0x66>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800278c:	4293      	cmp	r3, r2
 800278e:	d10e      	bne.n	80027ae <_Z41__static_initialization_and_destruction_0ii+0x66>
 8002790:	480d      	ldr	r0, [pc, #52]	; (80027c8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002792:	f7fe ffad 	bl	80016f0 <_ZN17MessageRecomposerD1Ev>
HolonomicDrive3 holo_drive;
 8002796:	480b      	ldr	r0, [pc, #44]	; (80027c4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002798:	f7fe fe6a 	bl	8001470 <_ZN15HolonomicDrive3D1Ev>
Stepper stepper2;
 800279c:	4808      	ldr	r0, [pc, #32]	; (80027c0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 800279e:	f7ff f93f 	bl	8001a20 <_ZN7StepperD1Ev>
Stepper stepper1;
 80027a2:	4806      	ldr	r0, [pc, #24]	; (80027bc <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80027a4:	f7ff f93c 	bl	8001a20 <_ZN7StepperD1Ev>
Stepper stepper0;
 80027a8:	4803      	ldr	r0, [pc, #12]	; (80027b8 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80027aa:	f7ff f939 	bl	8001a20 <_ZN7StepperD1Ev>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	20000218 	.word	0x20000218
 80027bc:	2000027c 	.word	0x2000027c
 80027c0:	200002e0 	.word	0x200002e0
 80027c4:	20000344 	.word	0x20000344
 80027c8:	20000494 	.word	0x20000494

080027cc <_GLOBAL__sub_I_hfdcan1>:
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027d4:	2001      	movs	r0, #1
 80027d6:	f7ff ffb7 	bl	8002748 <_Z41__static_initialization_and_destruction_0ii>
 80027da:	bd80      	pop	{r7, pc}

080027dc <_GLOBAL__sub_D_hfdcan1>:
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
 80027e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80027e4:	2000      	movs	r0, #0
 80027e6:	f7ff ffaf 	bl	8002748 <_Z41__static_initialization_and_destruction_0ii>
 80027ea:	bd80      	pop	{r7, pc}

080027ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027f2:	4b0f      	ldr	r3, [pc, #60]	; (8002830 <HAL_MspInit+0x44>)
 80027f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027f6:	4a0e      	ldr	r2, [pc, #56]	; (8002830 <HAL_MspInit+0x44>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6613      	str	r3, [r2, #96]	; 0x60
 80027fe:	4b0c      	ldr	r3, [pc, #48]	; (8002830 <HAL_MspInit+0x44>)
 8002800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	607b      	str	r3, [r7, #4]
 8002808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <HAL_MspInit+0x44>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280e:	4a08      	ldr	r2, [pc, #32]	; (8002830 <HAL_MspInit+0x44>)
 8002810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002814:	6593      	str	r3, [r2, #88]	; 0x58
 8002816:	4b06      	ldr	r3, [pc, #24]	; (8002830 <HAL_MspInit+0x44>)
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002822:	f001 fbab 	bl	8003f7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000

08002834 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b09a      	sub	sp, #104	; 0x68
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800284c:	f107 0310 	add.w	r3, r7, #16
 8002850:	2244      	movs	r2, #68	; 0x44
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f004 facf 	bl	8006df8 <memset>
  if(hfdcan->Instance==FDCAN1)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a24      	ldr	r2, [pc, #144]	; (80028f0 <HAL_FDCAN_MspInit+0xbc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d141      	bne.n	80028e8 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8002864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002868:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800286a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800286e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002870:	f107 0310 	add.w	r3, r7, #16
 8002874:	4618      	mov	r0, r3
 8002876:	f002 f887 	bl	8004988 <HAL_RCCEx_PeriphCLKConfig>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d001      	beq.n	8002884 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8002880:	f7ff ff5c 	bl	800273c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8002884:	4b1b      	ldr	r3, [pc, #108]	; (80028f4 <HAL_FDCAN_MspInit+0xc0>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <HAL_FDCAN_MspInit+0xc0>)
 800288a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800288e:	6593      	str	r3, [r2, #88]	; 0x58
 8002890:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <HAL_FDCAN_MspInit+0xc0>)
 8002892:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289c:	4b15      	ldr	r3, [pc, #84]	; (80028f4 <HAL_FDCAN_MspInit+0xc0>)
 800289e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <HAL_FDCAN_MspInit+0xc0>)
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <HAL_FDCAN_MspInit+0xc0>)
 80028aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80028b4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80028b8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ba:	2302      	movs	r3, #2
 80028bc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028be:	2300      	movs	r3, #0
 80028c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c2:	2300      	movs	r3, #0
 80028c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80028c6:	2309      	movs	r3, #9
 80028c8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028ce:	4619      	mov	r1, r3
 80028d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028d4:	f001 f914 	bl	8003b00 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80028d8:	2200      	movs	r2, #0
 80028da:	2100      	movs	r1, #0
 80028dc:	2015      	movs	r0, #21
 80028de:	f000 fb86 	bl	8002fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80028e2:	2015      	movs	r0, #21
 80028e4:	f000 fb9d 	bl	8003022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80028e8:	bf00      	nop
 80028ea:	3768      	adds	r7, #104	; 0x68
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	40006400 	.word	0x40006400
 80028f4:	40021000 	.word	0x40021000

080028f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1f      	ldr	r2, [pc, #124]	; (8002984 <HAL_TIM_Base_MspInit+0x8c>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10c      	bne.n	8002924 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800290a:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <HAL_TIM_Base_MspInit+0x90>)
 800290c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290e:	4a1e      	ldr	r2, [pc, #120]	; (8002988 <HAL_TIM_Base_MspInit+0x90>)
 8002910:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002914:	6613      	str	r3, [r2, #96]	; 0x60
 8002916:	4b1c      	ldr	r3, [pc, #112]	; (8002988 <HAL_TIM_Base_MspInit+0x90>)
 8002918:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800291a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002922:	e02a      	b.n	800297a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a18      	ldr	r2, [pc, #96]	; (800298c <HAL_TIM_Base_MspInit+0x94>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d114      	bne.n	8002958 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800292e:	4b16      	ldr	r3, [pc, #88]	; (8002988 <HAL_TIM_Base_MspInit+0x90>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002932:	4a15      	ldr	r2, [pc, #84]	; (8002988 <HAL_TIM_Base_MspInit+0x90>)
 8002934:	f043 0310 	orr.w	r3, r3, #16
 8002938:	6593      	str	r3, [r2, #88]	; 0x58
 800293a:	4b13      	ldr	r3, [pc, #76]	; (8002988 <HAL_TIM_Base_MspInit+0x90>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002946:	2200      	movs	r2, #0
 8002948:	2100      	movs	r1, #0
 800294a:	2036      	movs	r0, #54	; 0x36
 800294c:	f000 fb4f 	bl	8002fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002950:	2036      	movs	r0, #54	; 0x36
 8002952:	f000 fb66 	bl	8003022 <HAL_NVIC_EnableIRQ>
}
 8002956:	e010      	b.n	800297a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <HAL_TIM_Base_MspInit+0x98>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d10b      	bne.n	800297a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002962:	4b09      	ldr	r3, [pc, #36]	; (8002988 <HAL_TIM_Base_MspInit+0x90>)
 8002964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002966:	4a08      	ldr	r2, [pc, #32]	; (8002988 <HAL_TIM_Base_MspInit+0x90>)
 8002968:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800296c:	6613      	str	r3, [r2, #96]	; 0x60
 800296e:	4b06      	ldr	r3, [pc, #24]	; (8002988 <HAL_TIM_Base_MspInit+0x90>)
 8002970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002972:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
}
 800297a:	bf00      	nop
 800297c:	3718      	adds	r7, #24
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	40012c00 	.word	0x40012c00
 8002988:	40021000 	.word	0x40021000
 800298c:	40001000 	.word	0x40001000
 8002990:	40013400 	.word	0x40013400

08002994 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a0a      	ldr	r2, [pc, #40]	; (80029cc <HAL_TIM_PWM_MspInit+0x38>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d10b      	bne.n	80029be <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80029a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029aa:	4a09      	ldr	r2, [pc, #36]	; (80029d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	6613      	str	r3, [r2, #96]	; 0x60
 80029b2:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <HAL_TIM_PWM_MspInit+0x3c>)
 80029b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	40014000 	.word	0x40014000
 80029d0:	40021000 	.word	0x40021000

080029d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b08a      	sub	sp, #40	; 0x28
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	605a      	str	r2, [r3, #4]
 80029e6:	609a      	str	r2, [r3, #8]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a35      	ldr	r2, [pc, #212]	; (8002ac8 <HAL_TIM_MspPostInit+0xf4>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d11e      	bne.n	8002a34 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f6:	4b35      	ldr	r3, [pc, #212]	; (8002acc <HAL_TIM_MspPostInit+0xf8>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fa:	4a34      	ldr	r2, [pc, #208]	; (8002acc <HAL_TIM_MspPostInit+0xf8>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a02:	4b32      	ldr	r3, [pc, #200]	; (8002acc <HAL_TIM_MspPostInit+0xf8>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a14:	2302      	movs	r3, #2
 8002a16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002a20:	2306      	movs	r3, #6
 8002a22:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a24:	f107 0314 	add.w	r3, r7, #20
 8002a28:	4619      	mov	r1, r3
 8002a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a2e:	f001 f867 	bl	8003b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8002a32:	e045      	b.n	8002ac0 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM8)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a25      	ldr	r2, [pc, #148]	; (8002ad0 <HAL_TIM_MspPostInit+0xfc>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d11e      	bne.n	8002a7c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	4b23      	ldr	r3, [pc, #140]	; (8002acc <HAL_TIM_MspPostInit+0xf8>)
 8002a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a42:	4a22      	ldr	r2, [pc, #136]	; (8002acc <HAL_TIM_MspPostInit+0xf8>)
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a4a:	4b20      	ldr	r3, [pc, #128]	; (8002acc <HAL_TIM_MspPostInit+0xf8>)
 8002a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a60:	2302      	movs	r3, #2
 8002a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a64:	2300      	movs	r3, #0
 8002a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8002a68:	2302      	movs	r3, #2
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6c:	f107 0314 	add.w	r3, r7, #20
 8002a70:	4619      	mov	r1, r3
 8002a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a76:	f001 f843 	bl	8003b00 <HAL_GPIO_Init>
}
 8002a7a:	e021      	b.n	8002ac0 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM15)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a14      	ldr	r2, [pc, #80]	; (8002ad4 <HAL_TIM_MspPostInit+0x100>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d11c      	bne.n	8002ac0 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <HAL_TIM_MspPostInit+0xf8>)
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	4a10      	ldr	r2, [pc, #64]	; (8002acc <HAL_TIM_MspPostInit+0xf8>)
 8002a8c:	f043 0301 	orr.w	r3, r3, #1
 8002a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <HAL_TIM_MspPostInit+0xf8>)
 8002a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a9e:	2304      	movs	r3, #4
 8002aa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8002aae:	2309      	movs	r3, #9
 8002ab0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ab2:	f107 0314 	add.w	r3, r7, #20
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002abc:	f001 f820 	bl	8003b00 <HAL_GPIO_Init>
}
 8002ac0:	bf00      	nop
 8002ac2:	3728      	adds	r7, #40	; 0x28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	40012c00 	.word	0x40012c00
 8002acc:	40021000 	.word	0x40021000
 8002ad0:	40013400 	.word	0x40013400
 8002ad4:	40014000 	.word	0x40014000

08002ad8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002adc:	e7fe      	b.n	8002adc <NMI_Handler+0x4>

08002ade <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ae2:	e7fe      	b.n	8002ae2 <HardFault_Handler+0x4>

08002ae4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ae8:	e7fe      	b.n	8002ae8 <MemManage_Handler+0x4>

08002aea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002aea:	b480      	push	{r7}
 8002aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002aee:	e7fe      	b.n	8002aee <BusFault_Handler+0x4>

08002af0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002af4:	e7fe      	b.n	8002af4 <UsageFault_Handler+0x4>

08002af6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002af6:	b480      	push	{r7}
 8002af8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b12:	b480      	push	{r7}
 8002b14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b16:	bf00      	nop
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b24:	f000 f96a 	bl	8002dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <FDCAN1_IT0_IRQHandler+0x10>)
 8002b32:	f000 fe01 	bl	8003738 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000084 	.word	0x20000084

08002b40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002b44:	4802      	ldr	r0, [pc, #8]	; (8002b50 <TIM6_DAC_IRQHandler+0x10>)
 8002b46:	f002 fbbf 	bl	80052c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000134 	.word	0x20000134

08002b54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b54:	b480      	push	{r7}
 8002b56:	af00      	add	r7, sp, #0
  return 1;
 8002b58:	2301      	movs	r3, #1
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <_kill>:

int _kill(int pid, int sig)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b6e:	f004 f9e5 	bl	8006f3c <__errno>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2216      	movs	r2, #22
 8002b76:	601a      	str	r2, [r3, #0]
  return -1;
 8002b78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <_exit>:

void _exit (int status)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ffe7 	bl	8002b64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b96:	e7fe      	b.n	8002b96 <_exit+0x12>

08002b98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b086      	sub	sp, #24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	617b      	str	r3, [r7, #20]
 8002ba8:	e00a      	b.n	8002bc0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002baa:	f3af 8000 	nop.w
 8002bae:	4601      	mov	r1, r0
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	60ba      	str	r2, [r7, #8]
 8002bb6:	b2ca      	uxtb	r2, r1
 8002bb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	617b      	str	r3, [r7, #20]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	dbf0      	blt.n	8002baa <_read+0x12>
  }

  return len;
 8002bc8:	687b      	ldr	r3, [r7, #4]
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	60f8      	str	r0, [r7, #12]
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	e009      	b.n	8002bf8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	60ba      	str	r2, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	617b      	str	r3, [r7, #20]
 8002bf8:	697a      	ldr	r2, [r7, #20]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	dbf1      	blt.n	8002be4 <_write+0x12>
  }
  return len;
 8002c00:	687b      	ldr	r3, [r7, #4]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <_close>:

int _close(int file)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b083      	sub	sp, #12
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c20:	4770      	bx	lr

08002c22 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c22:	b480      	push	{r7}
 8002c24:	b083      	sub	sp, #12
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c32:	605a      	str	r2, [r3, #4]
  return 0;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <_isatty>:

int _isatty(int file)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c4a:	2301      	movs	r3, #1
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b086      	sub	sp, #24
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c7c:	4a14      	ldr	r2, [pc, #80]	; (8002cd0 <_sbrk+0x5c>)
 8002c7e:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <_sbrk+0x60>)
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c88:	4b13      	ldr	r3, [pc, #76]	; (8002cd8 <_sbrk+0x64>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d102      	bne.n	8002c96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c90:	4b11      	ldr	r3, [pc, #68]	; (8002cd8 <_sbrk+0x64>)
 8002c92:	4a12      	ldr	r2, [pc, #72]	; (8002cdc <_sbrk+0x68>)
 8002c94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <_sbrk+0x64>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d207      	bcs.n	8002cb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ca4:	f004 f94a 	bl	8006f3c <__errno>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	220c      	movs	r2, #12
 8002cac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002cb2:	e009      	b.n	8002cc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002cb4:	4b08      	ldr	r3, [pc, #32]	; (8002cd8 <_sbrk+0x64>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002cba:	4b07      	ldr	r3, [pc, #28]	; (8002cd8 <_sbrk+0x64>)
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	4a05      	ldr	r2, [pc, #20]	; (8002cd8 <_sbrk+0x64>)
 8002cc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	20008000 	.word	0x20008000
 8002cd4:	00000400 	.word	0x00000400
 8002cd8:	200006ec 	.word	0x200006ec
 8002cdc:	20000848 	.word	0x20000848

08002ce0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002ce4:	4b06      	ldr	r3, [pc, #24]	; (8002d00 <SystemInit+0x20>)
 8002ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cea:	4a05      	ldr	r2, [pc, #20]	; (8002d00 <SystemInit+0x20>)
 8002cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cf4:	bf00      	nop
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000ed00 	.word	0xe000ed00

08002d04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002d04:	480d      	ldr	r0, [pc, #52]	; (8002d3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002d06:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d08:	f7ff ffea 	bl	8002ce0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d0c:	480c      	ldr	r0, [pc, #48]	; (8002d40 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d0e:	490d      	ldr	r1, [pc, #52]	; (8002d44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d10:	4a0d      	ldr	r2, [pc, #52]	; (8002d48 <LoopForever+0xe>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002d14:	e002      	b.n	8002d1c <LoopCopyDataInit>

08002d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d1a:	3304      	adds	r3, #4

08002d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d20:	d3f9      	bcc.n	8002d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d22:	4a0a      	ldr	r2, [pc, #40]	; (8002d4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d24:	4c0a      	ldr	r4, [pc, #40]	; (8002d50 <LoopForever+0x16>)
  movs r3, #0
 8002d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d28:	e001      	b.n	8002d2e <LoopFillZerobss>

08002d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d2c:	3204      	adds	r2, #4

08002d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d30:	d3fb      	bcc.n	8002d2a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002d32:	f004 f909 	bl	8006f48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002d36:	f7ff f823 	bl	8001d80 <main>

08002d3a <LoopForever>:

LoopForever:
    b LoopForever
 8002d3a:	e7fe      	b.n	8002d3a <LoopForever>
  ldr   r0, =_estack
 8002d3c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002d40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d44:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002d48:	080079b0 	.word	0x080079b0
  ldr r2, =_sbss
 8002d4c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002d50:	20000844 	.word	0x20000844

08002d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002d54:	e7fe      	b.n	8002d54 <ADC1_2_IRQHandler>

08002d56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d60:	2003      	movs	r0, #3
 8002d62:	f000 f939 	bl	8002fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d66:	200f      	movs	r0, #15
 8002d68:	f000 f80e 	bl	8002d88 <HAL_InitTick>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d002      	beq.n	8002d78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	71fb      	strb	r3, [r7, #7]
 8002d76:	e001      	b.n	8002d7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d78:	f7ff fd38 	bl	80027ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d7c:	79fb      	ldrb	r3, [r7, #7]

}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002d94:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <HAL_InitTick+0x68>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d022      	beq.n	8002de2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002d9c:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <HAL_InitTick+0x6c>)
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <HAL_InitTick+0x68>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002da8:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 f944 	bl	800303e <HAL_SYSTICK_Config>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10f      	bne.n	8002ddc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b0f      	cmp	r3, #15
 8002dc0:	d809      	bhi.n	8002dd6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002dca:	f000 f910 	bl	8002fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <HAL_InitTick+0x70>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6013      	str	r3, [r2, #0]
 8002dd4:	e007      	b.n	8002de6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
 8002dda:	e004      	b.n	8002de6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	73fb      	strb	r3, [r7, #15]
 8002de0:	e001      	b.n	8002de6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20000008 	.word	0x20000008
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20000004 	.word	0x20000004

08002dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e00:	4b05      	ldr	r3, [pc, #20]	; (8002e18 <HAL_IncTick+0x1c>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	4b05      	ldr	r3, [pc, #20]	; (8002e1c <HAL_IncTick+0x20>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4413      	add	r3, r2
 8002e0a:	4a03      	ldr	r2, [pc, #12]	; (8002e18 <HAL_IncTick+0x1c>)
 8002e0c:	6013      	str	r3, [r2, #0]
}
 8002e0e:	bf00      	nop
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr
 8002e18:	200006f0 	.word	0x200006f0
 8002e1c:	20000008 	.word	0x20000008

08002e20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0
  return uwTick;
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <HAL_GetTick+0x14>)
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	200006f0 	.word	0x200006f0

08002e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e48:	4b0c      	ldr	r3, [pc, #48]	; (8002e7c <__NVIC_SetPriorityGrouping+0x44>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e54:	4013      	ands	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e6a:	4a04      	ldr	r2, [pc, #16]	; (8002e7c <__NVIC_SetPriorityGrouping+0x44>)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	60d3      	str	r3, [r2, #12]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e84:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <__NVIC_GetPriorityGrouping+0x18>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	f003 0307 	and.w	r3, r3, #7
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	db0b      	blt.n	8002ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	f003 021f 	and.w	r2, r3, #31
 8002eb4:	4907      	ldr	r1, [pc, #28]	; (8002ed4 <__NVIC_EnableIRQ+0x38>)
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8002ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000e100 	.word	0xe000e100

08002ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	db0a      	blt.n	8002f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	490c      	ldr	r1, [pc, #48]	; (8002f24 <__NVIC_SetPriority+0x4c>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	0112      	lsls	r2, r2, #4
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	440b      	add	r3, r1
 8002efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f00:	e00a      	b.n	8002f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4908      	ldr	r1, [pc, #32]	; (8002f28 <__NVIC_SetPriority+0x50>)
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	3b04      	subs	r3, #4
 8002f10:	0112      	lsls	r2, r2, #4
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	440b      	add	r3, r1
 8002f16:	761a      	strb	r2, [r3, #24]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000e100 	.word	0xe000e100
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	; 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f1c3 0307 	rsb	r3, r3, #7
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	bf28      	it	cs
 8002f4a:	2304      	movcs	r3, #4
 8002f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3304      	adds	r3, #4
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d902      	bls.n	8002f5c <NVIC_EncodePriority+0x30>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3b03      	subs	r3, #3
 8002f5a:	e000      	b.n	8002f5e <NVIC_EncodePriority+0x32>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	401a      	ands	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43d9      	mvns	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	4313      	orrs	r3, r2
         );
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	; 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fa4:	d301      	bcc.n	8002faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00f      	b.n	8002fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002faa:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <SysTick_Config+0x40>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fb2:	210f      	movs	r1, #15
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fb8:	f7ff ff8e 	bl	8002ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <SysTick_Config+0x40>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <SysTick_Config+0x40>)
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	e000e010 	.word	0xe000e010

08002fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff29 	bl	8002e38 <__NVIC_SetPriorityGrouping>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ffc:	f7ff ff40 	bl	8002e80 <__NVIC_GetPriorityGrouping>
 8003000:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003002:	687a      	ldr	r2, [r7, #4]
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	6978      	ldr	r0, [r7, #20]
 8003008:	f7ff ff90 	bl	8002f2c <NVIC_EncodePriority>
 800300c:	4602      	mov	r2, r0
 800300e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003012:	4611      	mov	r1, r2
 8003014:	4618      	mov	r0, r3
 8003016:	f7ff ff5f 	bl	8002ed8 <__NVIC_SetPriority>
}
 800301a:	bf00      	nop
 800301c:	3718      	adds	r7, #24
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}

08003022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003022:	b580      	push	{r7, lr}
 8003024:	b082      	sub	sp, #8
 8003026:	af00      	add	r7, sp, #0
 8003028:	4603      	mov	r3, r0
 800302a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800302c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff33 	bl	8002e9c <__NVIC_EnableIRQ>
}
 8003036:	bf00      	nop
 8003038:	3708      	adds	r7, #8
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff ffa4 	bl	8002f94 <SysTick_Config>
 800304c:	4603      	mov	r3, r0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e147      	b.n	80032fa <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff fbd8 	bl	8002834 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0210 	bic.w	r2, r2, #16
 8003092:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003094:	f7ff fec4 	bl	8002e20 <HAL_GetTick>
 8003098:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800309a:	e012      	b.n	80030c2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800309c:	f7ff fec0 	bl	8002e20 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b0a      	cmp	r3, #10
 80030a8:	d90b      	bls.n	80030c2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ae:	f043 0201 	orr.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2203      	movs	r2, #3
 80030ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e11b      	b.n	80032fa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d0e5      	beq.n	800309c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699a      	ldr	r2, [r3, #24]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030e0:	f7ff fe9e 	bl	8002e20 <HAL_GetTick>
 80030e4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80030e6:	e012      	b.n	800310e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80030e8:	f7ff fe9a 	bl	8002e20 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b0a      	cmp	r3, #10
 80030f4:	d90b      	bls.n	800310e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fa:	f043 0201 	orr.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2203      	movs	r2, #3
 8003106:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e0f5      	b.n	80032fa <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d0e5      	beq.n	80030e8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699a      	ldr	r2, [r3, #24]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0202 	orr.w	r2, r2, #2
 800312a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a74      	ldr	r2, [pc, #464]	; (8003304 <HAL_FDCAN_Init+0x2ac>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d103      	bne.n	800313e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8003136:	4a74      	ldr	r2, [pc, #464]	; (8003308 <HAL_FDCAN_Init+0x2b0>)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7c1b      	ldrb	r3, [r3, #16]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d108      	bne.n	8003158 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699a      	ldr	r2, [r3, #24]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003154:	619a      	str	r2, [r3, #24]
 8003156:	e007      	b.n	8003168 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003166:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	7c5b      	ldrb	r3, [r3, #17]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d108      	bne.n	8003182 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800317e:	619a      	str	r2, [r3, #24]
 8003180:	e007      	b.n	8003192 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	699a      	ldr	r2, [r3, #24]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003190:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	7c9b      	ldrb	r3, [r3, #18]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d108      	bne.n	80031ac <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699a      	ldr	r2, [r3, #24]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031a8:	619a      	str	r2, [r3, #24]
 80031aa:	e007      	b.n	80031bc <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699a      	ldr	r2, [r3, #24]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031ba:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699a      	ldr	r2, [r3, #24]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80031e0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	691a      	ldr	r2, [r3, #16]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 0210 	bic.w	r2, r2, #16
 80031f0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d108      	bne.n	800320c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f042 0204 	orr.w	r2, r2, #4
 8003208:	619a      	str	r2, [r3, #24]
 800320a:	e02c      	b.n	8003266 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d028      	beq.n	8003266 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d01c      	beq.n	8003256 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800322a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	691a      	ldr	r2, [r3, #16]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0210 	orr.w	r2, r2, #16
 800323a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d110      	bne.n	8003266 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f042 0220 	orr.w	r2, r2, #32
 8003252:	619a      	str	r2, [r3, #24]
 8003254:	e007      	b.n	8003266 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699a      	ldr	r2, [r3, #24]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f042 0220 	orr.w	r2, r2, #32
 8003264:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	3b01      	subs	r3, #1
 800326c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	3b01      	subs	r3, #1
 8003274:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003276:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800327e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	3b01      	subs	r3, #1
 8003288:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800328e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003290:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800329a:	d115      	bne.n	80032c8 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	3b01      	subs	r3, #1
 80032a8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032aa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	3b01      	subs	r3, #1
 80032b2:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80032b4:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	3b01      	subs	r3, #1
 80032be:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80032c4:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80032c6:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fbb8 	bl	8003a54 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40006400 	.word	0x40006400
 8003308:	40006500 	.word	0x40006500

0800330c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800331a:	b2db      	uxtb	r3, r3
 800331c:	2b01      	cmp	r3, #1
 800331e:	d110      	bne.n	8003342 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2202      	movs	r2, #2
 8003324:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	699a      	ldr	r2, [r3, #24]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800333e:	2300      	movs	r3, #0
 8003340:	e006      	b.n	8003350 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003346:	f043 0204 	orr.w	r2, r3, #4
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
  }
}
 8003350:	4618      	mov	r0, r3
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800335c:	b480      	push	{r7}
 800335e:	b08b      	sub	sp, #44	; 0x2c
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	60b9      	str	r1, [r7, #8]
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800336a:	2300      	movs	r3, #0
 800336c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003374:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8003376:	7efb      	ldrb	r3, [r7, #27]
 8003378:	2b02      	cmp	r3, #2
 800337a:	f040 80e8 	bne.w	800354e <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	d137      	bne.n	80033f4 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800338c:	f003 030f 	and.w	r3, r3, #15
 8003390:	2b00      	cmp	r3, #0
 8003392:	d107      	bne.n	80033a4 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003398:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e0db      	b.n	800355c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	0e1b      	lsrs	r3, r3, #24
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d10a      	bne.n	80033cc <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033be:	0a5b      	lsrs	r3, r3, #9
 80033c0:	f003 0301 	and.w	r3, r3, #1
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80033c8:	2301      	movs	r3, #1
 80033ca:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d4:	0a1b      	lsrs	r3, r3, #8
 80033d6:	f003 0303 	and.w	r3, r3, #3
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	4413      	add	r3, r2
 80033de:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 80033e4:	69fa      	ldr	r2, [r7, #28]
 80033e6:	4613      	mov	r3, r2
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	4413      	add	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	440b      	add	r3, r1
 80033f0:	627b      	str	r3, [r7, #36]	; 0x24
 80033f2:	e036      	b.n	8003462 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	2b00      	cmp	r3, #0
 8003402:	d107      	bne.n	8003414 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003408:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e0a3      	b.n	800355c <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800341c:	0e1b      	lsrs	r3, r3, #24
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b01      	cmp	r3, #1
 8003424:	d10a      	bne.n	800343c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342e:	0a1b      	lsrs	r3, r3, #8
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8003438:	2301      	movs	r3, #1
 800343a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	69fa      	ldr	r2, [r7, #28]
 800344c:	4413      	add	r3, r2
 800344e:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	4613      	mov	r3, r2
 8003458:	00db      	lsls	r3, r3, #3
 800345a:	4413      	add	r3, r2
 800345c:	00db      	lsls	r3, r3, #3
 800345e:	440b      	add	r3, r1
 8003460:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d107      	bne.n	8003486 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	0c9b      	lsrs	r3, r3, #18
 800347c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	e005      	b.n	8003492 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8003486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8003492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	3304      	adds	r3, #4
 80034ae:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	0c1b      	lsrs	r3, r3, #16
 80034c0:	f003 020f 	and.w	r2, r3, #15
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	0e1b      	lsrs	r3, r3, #24
 80034e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	0fda      	lsrs	r2, r3, #31
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80034f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fa:	3304      	adds	r3, #4
 80034fc:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003502:	2300      	movs	r3, #0
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	e00a      	b.n	800351e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8003508:	697a      	ldr	r2, [r7, #20]
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	441a      	add	r2, r3
 800350e:	6839      	ldr	r1, [r7, #0]
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	440b      	add	r3, r1
 8003514:	7812      	ldrb	r2, [r2, #0]
 8003516:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	3301      	adds	r3, #1
 800351c:	623b      	str	r3, [r7, #32]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	4a11      	ldr	r2, [pc, #68]	; (8003568 <HAL_FDCAN_GetRxMessage+0x20c>)
 8003524:	5cd3      	ldrb	r3, [r2, r3]
 8003526:	461a      	mov	r2, r3
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	4293      	cmp	r3, r2
 800352c:	d3ec      	bcc.n	8003508 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b40      	cmp	r3, #64	; 0x40
 8003532:	d105      	bne.n	8003540 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69fa      	ldr	r2, [r7, #28]
 800353a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800353e:	e004      	b.n	800354a <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	69fa      	ldr	r2, [r7, #28]
 8003546:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 800354a:	2300      	movs	r3, #0
 800354c:	e006      	b.n	800355c <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003552:	f043 0208 	orr.w	r2, r3, #8
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
  }
}
 800355c:	4618      	mov	r0, r3
 800355e:	372c      	adds	r7, #44	; 0x2c
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	08007918 	.word	0x08007918

0800356c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800356c:	b480      	push	{r7}
 800356e:	b087      	sub	sp, #28
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800357e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8003580:	7dfb      	ldrb	r3, [r7, #23]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d003      	beq.n	800358e <HAL_FDCAN_ActivateNotification+0x22>
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b02      	cmp	r3, #2
 800358a:	f040 80c8 	bne.w	800371e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003594:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	2b00      	cmp	r3, #0
 800359e:	d004      	beq.n	80035aa <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d03b      	beq.n	8003622 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d004      	beq.n	80035be <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d031      	beq.n	8003622 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d004      	beq.n	80035d2 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d027      	beq.n	8003622 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d004      	beq.n	80035e6 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d01d      	beq.n	8003622 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d004      	beq.n	80035fa <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d013      	beq.n	8003622 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8003600:	2b00      	cmp	r3, #0
 8003602:	d004      	beq.n	800360e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d009      	beq.n	8003622 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00c      	beq.n	8003632 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361e:	2b00      	cmp	r3, #0
 8003620:	d107      	bne.n	8003632 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f042 0201 	orr.w	r2, r2, #1
 8003630:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f003 0307 	and.w	r3, r3, #7
 8003638:	2b00      	cmp	r3, #0
 800363a:	d004      	beq.n	8003646 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f003 0301 	and.w	r3, r3, #1
 8003642:	2b00      	cmp	r3, #0
 8003644:	d13b      	bne.n	80036be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800364c:	2b00      	cmp	r3, #0
 800364e:	d004      	beq.n	800365a <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f003 0302 	and.w	r3, r3, #2
 8003656:	2b00      	cmp	r3, #0
 8003658:	d131      	bne.n	80036be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8003660:	2b00      	cmp	r3, #0
 8003662:	d004      	beq.n	800366e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	2b00      	cmp	r3, #0
 800366c:	d127      	bne.n	80036be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b00      	cmp	r3, #0
 8003680:	d11d      	bne.n	80036be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8003688:	2b00      	cmp	r3, #0
 800368a:	d004      	beq.n	8003696 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	f003 0310 	and.w	r3, r3, #16
 8003692:	2b00      	cmp	r3, #0
 8003694:	d113      	bne.n	80036be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800369c:	2b00      	cmp	r3, #0
 800369e:	d004      	beq.n	80036aa <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d00c      	beq.n	80036ce <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f042 0202 	orr.w	r2, r2, #2
 80036cc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d009      	beq.n	80036ec <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d009      	beq.n	800370a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	430a      	orrs	r2, r1
 8003706:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68ba      	ldr	r2, [r7, #8]
 8003716:	430a      	orrs	r2, r1
 8003718:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	e006      	b.n	800372c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003722:	f043 0202 	orr.w	r2, r3, #2
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
  }
}
 800372c:	4618      	mov	r0, r3
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08c      	sub	sp, #48	; 0x30
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003746:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 800374a:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003754:	4013      	ands	r3, r2
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375e:	f003 0307 	and.w	r3, r3, #7
 8003762:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800376c:	4013      	ands	r3, r2
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003784:	4013      	ands	r3, r2
 8003786:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800378e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8003792:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379a:	6a3a      	ldr	r2, [r7, #32]
 800379c:	4013      	ands	r3, r2
 800379e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80037aa:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b2:	69fa      	ldr	r2, [r7, #28]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c6:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d006      	beq.n	80037ea <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2240      	movs	r2, #64	; 0x40
 80037e2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f916 	bl	8003a16 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d019      	beq.n	8003828 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d014      	beq.n	8003828 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003806:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003810:	693a      	ldr	r2, [r7, #16]
 8003812:	4013      	ands	r3, r2
 8003814:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800381e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8003820:	6939      	ldr	r1, [r7, #16]
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f8d8 	bl	80039d8 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8003828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800382a:	2b00      	cmp	r3, #0
 800382c:	d007      	beq.n	800383e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003834:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8003836:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f8a2 	bl	8003982 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800383e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003840:	2b00      	cmp	r3, #0
 8003842:	d007      	beq.n	8003854 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800384a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800384c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7fe f918 	bl	8001a84 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003860:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8003862:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 f897 	bl	8003998 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00c      	beq.n	800388e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800387a:	2b00      	cmp	r3, #0
 800387c:	d007      	beq.n	800388e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003886:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 f890 	bl	80039ae <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003894:	2b00      	cmp	r3, #0
 8003896:	d018      	beq.n	80038ca <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d013      	beq.n	80038ca <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80038aa:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4013      	ands	r3, r2
 80038b8:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80038c2:	68f9      	ldr	r1, [r7, #12]
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 f87c 	bl	80039c2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00c      	beq.n	80038ee <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f880 	bl	80039ee <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00c      	beq.n	8003912 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d007      	beq.n	8003912 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800390a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 f878 	bl	8003a02 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00f      	beq.n	800393c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d00a      	beq.n	800393c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800392e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003934:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d007      	beq.n	8003952 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69fa      	ldr	r2, [r7, #28]
 8003948:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800394a:	69f9      	ldr	r1, [r7, #28]
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f876 	bl	8003a3e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d009      	beq.n	800396c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6a3a      	ldr	r2, [r7, #32]
 800395e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003970:	2b00      	cmp	r3, #0
 8003972:	d002      	beq.n	800397a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f858 	bl	8003a2a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800397a:	bf00      	nop
 800397c:	3730      	adds	r7, #48	; 0x30
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr

080039ae <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b083      	sub	sp, #12
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003a3e:	b480      	push	{r7}
 8003a40:	b083      	sub	sp, #12
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
 8003a46:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003a5c:	4b27      	ldr	r3, [pc, #156]	; (8003afc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003a5e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a6e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a76:	041a      	lsls	r2, r3, #16
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a94:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	061a      	lsls	r2, r3, #24
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e005      	b.n	8003ae2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	3304      	adds	r3, #4
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d3f3      	bcc.n	8003ad6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8003aee:	bf00      	nop
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	4000a400 	.word	0x4000a400

08003b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b0e:	e15a      	b.n	8003dc6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	2101      	movs	r1, #1
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f000 814c 	beq.w	8003dc0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f003 0303 	and.w	r3, r3, #3
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d005      	beq.n	8003b40 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003b3c:	2b02      	cmp	r3, #2
 8003b3e:	d130      	bne.n	8003ba2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	2203      	movs	r2, #3
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	43db      	mvns	r3, r3
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4013      	ands	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b76:	2201      	movs	r2, #1
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	091b      	lsrs	r3, r3, #4
 8003b8c:	f003 0201 	and.w	r2, r3, #1
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	fa02 f303 	lsl.w	r3, r2, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b03      	cmp	r3, #3
 8003bac:	d017      	beq.n	8003bde <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	2203      	movs	r2, #3
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d123      	bne.n	8003c32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	08da      	lsrs	r2, r3, #3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	3208      	adds	r2, #8
 8003bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	220f      	movs	r2, #15
 8003c02:	fa02 f303 	lsl.w	r3, r2, r3
 8003c06:	43db      	mvns	r3, r3
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	691a      	ldr	r2, [r3, #16]
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	f003 0307 	and.w	r3, r3, #7
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	4313      	orrs	r3, r2
 8003c22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	08da      	lsrs	r2, r3, #3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3208      	adds	r2, #8
 8003c2c:	6939      	ldr	r1, [r7, #16]
 8003c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	2203      	movs	r2, #3
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43db      	mvns	r3, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4013      	ands	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0203 	and.w	r2, r3, #3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80a6 	beq.w	8003dc0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c74:	4b5b      	ldr	r3, [pc, #364]	; (8003de4 <HAL_GPIO_Init+0x2e4>)
 8003c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c78:	4a5a      	ldr	r2, [pc, #360]	; (8003de4 <HAL_GPIO_Init+0x2e4>)
 8003c7a:	f043 0301 	orr.w	r3, r3, #1
 8003c7e:	6613      	str	r3, [r2, #96]	; 0x60
 8003c80:	4b58      	ldr	r3, [pc, #352]	; (8003de4 <HAL_GPIO_Init+0x2e4>)
 8003c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c8c:	4a56      	ldr	r2, [pc, #344]	; (8003de8 <HAL_GPIO_Init+0x2e8>)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	3302      	adds	r3, #2
 8003c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	f003 0303 	and.w	r3, r3, #3
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	220f      	movs	r2, #15
 8003ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cb6:	d01f      	beq.n	8003cf8 <HAL_GPIO_Init+0x1f8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a4c      	ldr	r2, [pc, #304]	; (8003dec <HAL_GPIO_Init+0x2ec>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d019      	beq.n	8003cf4 <HAL_GPIO_Init+0x1f4>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a4b      	ldr	r2, [pc, #300]	; (8003df0 <HAL_GPIO_Init+0x2f0>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <HAL_GPIO_Init+0x1f0>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a4a      	ldr	r2, [pc, #296]	; (8003df4 <HAL_GPIO_Init+0x2f4>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00d      	beq.n	8003cec <HAL_GPIO_Init+0x1ec>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a49      	ldr	r2, [pc, #292]	; (8003df8 <HAL_GPIO_Init+0x2f8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d007      	beq.n	8003ce8 <HAL_GPIO_Init+0x1e8>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a48      	ldr	r2, [pc, #288]	; (8003dfc <HAL_GPIO_Init+0x2fc>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d101      	bne.n	8003ce4 <HAL_GPIO_Init+0x1e4>
 8003ce0:	2305      	movs	r3, #5
 8003ce2:	e00a      	b.n	8003cfa <HAL_GPIO_Init+0x1fa>
 8003ce4:	2306      	movs	r3, #6
 8003ce6:	e008      	b.n	8003cfa <HAL_GPIO_Init+0x1fa>
 8003ce8:	2304      	movs	r3, #4
 8003cea:	e006      	b.n	8003cfa <HAL_GPIO_Init+0x1fa>
 8003cec:	2303      	movs	r3, #3
 8003cee:	e004      	b.n	8003cfa <HAL_GPIO_Init+0x1fa>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e002      	b.n	8003cfa <HAL_GPIO_Init+0x1fa>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <HAL_GPIO_Init+0x1fa>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	f002 0203 	and.w	r2, r2, #3
 8003d00:	0092      	lsls	r2, r2, #2
 8003d02:	4093      	lsls	r3, r2
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d0a:	4937      	ldr	r1, [pc, #220]	; (8003de8 <HAL_GPIO_Init+0x2e8>)
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	089b      	lsrs	r3, r3, #2
 8003d10:	3302      	adds	r3, #2
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d18:	4b39      	ldr	r3, [pc, #228]	; (8003e00 <HAL_GPIO_Init+0x300>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d3c:	4a30      	ldr	r2, [pc, #192]	; (8003e00 <HAL_GPIO_Init+0x300>)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d42:	4b2f      	ldr	r3, [pc, #188]	; (8003e00 <HAL_GPIO_Init+0x300>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	43db      	mvns	r3, r3
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4013      	ands	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d003      	beq.n	8003d66 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d66:	4a26      	ldr	r2, [pc, #152]	; (8003e00 <HAL_GPIO_Init+0x300>)
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003d6c:	4b24      	ldr	r3, [pc, #144]	; (8003e00 <HAL_GPIO_Init+0x300>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d90:	4a1b      	ldr	r2, [pc, #108]	; (8003e00 <HAL_GPIO_Init+0x300>)
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003d96:	4b1a      	ldr	r3, [pc, #104]	; (8003e00 <HAL_GPIO_Init+0x300>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	4013      	ands	r3, r2
 8003da4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dba:	4a11      	ldr	r2, [pc, #68]	; (8003e00 <HAL_GPIO_Init+0x300>)
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f47f ae9d 	bne.w	8003b10 <HAL_GPIO_Init+0x10>
  }
}
 8003dd6:	bf00      	nop
 8003dd8:	bf00      	nop
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40021000 	.word	0x40021000
 8003de8:	40010000 	.word	0x40010000
 8003dec:	48000400 	.word	0x48000400
 8003df0:	48000800 	.word	0x48000800
 8003df4:	48000c00 	.word	0x48000c00
 8003df8:	48001000 	.word	0x48001000
 8003dfc:	48001400 	.word	0x48001400
 8003e00:	40010400 	.word	0x40010400

08003e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	807b      	strh	r3, [r7, #2]
 8003e10:	4613      	mov	r3, r2
 8003e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e14:	787b      	ldrb	r3, [r7, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e1a:	887a      	ldrh	r2, [r7, #2]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e20:	e002      	b.n	8003e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d141      	bne.n	8003ec6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e42:	4b4b      	ldr	r3, [pc, #300]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e4e:	d131      	bne.n	8003eb4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e50:	4b47      	ldr	r3, [pc, #284]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e56:	4a46      	ldr	r2, [pc, #280]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e60:	4b43      	ldr	r3, [pc, #268]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e68:	4a41      	ldr	r2, [pc, #260]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e70:	4b40      	ldr	r3, [pc, #256]	; (8003f74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	2232      	movs	r2, #50	; 0x32
 8003e76:	fb02 f303 	mul.w	r3, r2, r3
 8003e7a:	4a3f      	ldr	r2, [pc, #252]	; (8003f78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e80:	0c9b      	lsrs	r3, r3, #18
 8003e82:	3301      	adds	r3, #1
 8003e84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e86:	e002      	b.n	8003e8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e8e:	4b38      	ldr	r3, [pc, #224]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e9a:	d102      	bne.n	8003ea2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f2      	bne.n	8003e88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ea2:	4b33      	ldr	r3, [pc, #204]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eae:	d158      	bne.n	8003f62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e057      	b.n	8003f64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003eb4:	4b2e      	ldr	r3, [pc, #184]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eba:	4a2d      	ldr	r2, [pc, #180]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ec0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ec4:	e04d      	b.n	8003f62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ecc:	d141      	bne.n	8003f52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ece:	4b28      	ldr	r3, [pc, #160]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eda:	d131      	bne.n	8003f40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003edc:	4b24      	ldr	r3, [pc, #144]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee2:	4a23      	ldr	r2, [pc, #140]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003eec:	4b20      	ldr	r3, [pc, #128]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ef4:	4a1e      	ldr	r2, [pc, #120]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003efa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003efc:	4b1d      	ldr	r3, [pc, #116]	; (8003f74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2232      	movs	r2, #50	; 0x32
 8003f02:	fb02 f303 	mul.w	r3, r2, r3
 8003f06:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003f08:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0c:	0c9b      	lsrs	r3, r3, #18
 8003f0e:	3301      	adds	r3, #1
 8003f10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f12:	e002      	b.n	8003f1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f26:	d102      	bne.n	8003f2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1f2      	bne.n	8003f14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f2e:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3a:	d112      	bne.n	8003f62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e011      	b.n	8003f64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f46:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003f50:	e007      	b.n	8003f62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f52:	4b07      	ldr	r3, [pc, #28]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f5a:	4a05      	ldr	r2, [pc, #20]	; (8003f70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	40007000 	.word	0x40007000
 8003f74:	20000000 	.word	0x20000000
 8003f78:	431bde83 	.word	0x431bde83

08003f7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f8a:	6093      	str	r3, [r2, #8]
}
 8003f8c:	bf00      	nop
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f94:	4770      	bx	lr
 8003f96:	bf00      	nop
 8003f98:	40007000 	.word	0x40007000

08003f9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b088      	sub	sp, #32
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e2fe      	b.n	80045ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d075      	beq.n	80040a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fba:	4b97      	ldr	r3, [pc, #604]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f003 030c 	and.w	r3, r3, #12
 8003fc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fc4:	4b94      	ldr	r3, [pc, #592]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f003 0303 	and.w	r3, r3, #3
 8003fcc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b0c      	cmp	r3, #12
 8003fd2:	d102      	bne.n	8003fda <HAL_RCC_OscConfig+0x3e>
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d002      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x44>
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d10b      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fe0:	4b8d      	ldr	r3, [pc, #564]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d05b      	beq.n	80040a4 <HAL_RCC_OscConfig+0x108>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d157      	bne.n	80040a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	e2d9      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004000:	d106      	bne.n	8004010 <HAL_RCC_OscConfig+0x74>
 8004002:	4b85      	ldr	r3, [pc, #532]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a84      	ldr	r2, [pc, #528]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004008:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800400c:	6013      	str	r3, [r2, #0]
 800400e:	e01d      	b.n	800404c <HAL_RCC_OscConfig+0xb0>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x98>
 800401a:	4b7f      	ldr	r3, [pc, #508]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a7e      	ldr	r2, [pc, #504]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004020:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004024:	6013      	str	r3, [r2, #0]
 8004026:	4b7c      	ldr	r3, [pc, #496]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a7b      	ldr	r2, [pc, #492]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 800402c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	e00b      	b.n	800404c <HAL_RCC_OscConfig+0xb0>
 8004034:	4b78      	ldr	r3, [pc, #480]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a77      	ldr	r2, [pc, #476]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 800403a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800403e:	6013      	str	r3, [r2, #0]
 8004040:	4b75      	ldr	r3, [pc, #468]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a74      	ldr	r2, [pc, #464]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004046:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800404a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d013      	beq.n	800407c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004054:	f7fe fee4 	bl	8002e20 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800405c:	f7fe fee0 	bl	8002e20 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b64      	cmp	r3, #100	; 0x64
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e29e      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800406e:	4b6a      	ldr	r3, [pc, #424]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d0f0      	beq.n	800405c <HAL_RCC_OscConfig+0xc0>
 800407a:	e014      	b.n	80040a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407c:	f7fe fed0 	bl	8002e20 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004084:	f7fe fecc 	bl	8002e20 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b64      	cmp	r3, #100	; 0x64
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e28a      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004096:	4b60      	ldr	r3, [pc, #384]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0xe8>
 80040a2:	e000      	b.n	80040a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d075      	beq.n	800419e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040b2:	4b59      	ldr	r3, [pc, #356]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040bc:	4b56      	ldr	r3, [pc, #344]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	2b0c      	cmp	r3, #12
 80040ca:	d102      	bne.n	80040d2 <HAL_RCC_OscConfig+0x136>
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d002      	beq.n	80040d8 <HAL_RCC_OscConfig+0x13c>
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	2b04      	cmp	r3, #4
 80040d6:	d11f      	bne.n	8004118 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80040d8:	4b4f      	ldr	r3, [pc, #316]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d005      	beq.n	80040f0 <HAL_RCC_OscConfig+0x154>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e25d      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f0:	4b49      	ldr	r3, [pc, #292]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	061b      	lsls	r3, r3, #24
 80040fe:	4946      	ldr	r1, [pc, #280]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004100:	4313      	orrs	r3, r2
 8004102:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004104:	4b45      	ldr	r3, [pc, #276]	; (800421c <HAL_RCC_OscConfig+0x280>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7fe fe3d 	bl	8002d88 <HAL_InitTick>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d043      	beq.n	800419c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e249      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d023      	beq.n	8004168 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004120:	4b3d      	ldr	r3, [pc, #244]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a3c      	ldr	r2, [pc, #240]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004126:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800412a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fe fe78 	bl	8002e20 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004134:	f7fe fe74 	bl	8002e20 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e232      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004146:	4b34      	ldr	r3, [pc, #208]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004152:	4b31      	ldr	r3, [pc, #196]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	061b      	lsls	r3, r3, #24
 8004160:	492d      	ldr	r1, [pc, #180]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004162:	4313      	orrs	r3, r2
 8004164:	604b      	str	r3, [r1, #4]
 8004166:	e01a      	b.n	800419e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004168:	4b2b      	ldr	r3, [pc, #172]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a2a      	ldr	r2, [pc, #168]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 800416e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fe fe54 	bl	8002e20 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fe fe50 	bl	8002e20 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e20e      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800418e:	4b22      	ldr	r3, [pc, #136]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1f0      	bne.n	800417c <HAL_RCC_OscConfig+0x1e0>
 800419a:	e000      	b.n	800419e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800419c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d041      	beq.n	800422e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d01c      	beq.n	80041ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041b2:	4b19      	ldr	r3, [pc, #100]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 80041b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041b8:	4a17      	ldr	r2, [pc, #92]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 80041ba:	f043 0301 	orr.w	r3, r3, #1
 80041be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c2:	f7fe fe2d 	bl	8002e20 <HAL_GetTick>
 80041c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041c8:	e008      	b.n	80041dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ca:	f7fe fe29 	bl	8002e20 <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d901      	bls.n	80041dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e1e7      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041dc:	4b0e      	ldr	r3, [pc, #56]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 80041de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d0ef      	beq.n	80041ca <HAL_RCC_OscConfig+0x22e>
 80041ea:	e020      	b.n	800422e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041ec:	4b0a      	ldr	r3, [pc, #40]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 80041ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f2:	4a09      	ldr	r2, [pc, #36]	; (8004218 <HAL_RCC_OscConfig+0x27c>)
 80041f4:	f023 0301 	bic.w	r3, r3, #1
 80041f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fe fe10 	bl	8002e20 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004202:	e00d      	b.n	8004220 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004204:	f7fe fe0c 	bl	8002e20 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d906      	bls.n	8004220 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e1ca      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
 8004216:	bf00      	nop
 8004218:	40021000 	.word	0x40021000
 800421c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004220:	4b8c      	ldr	r3, [pc, #560]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 8004222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004226:	f003 0302 	and.w	r3, r3, #2
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1ea      	bne.n	8004204 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0304 	and.w	r3, r3, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	f000 80a6 	beq.w	8004388 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800423c:	2300      	movs	r3, #0
 800423e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004240:	4b84      	ldr	r3, [pc, #528]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 8004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_RCC_OscConfig+0x2b4>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <HAL_RCC_OscConfig+0x2b6>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d00d      	beq.n	8004272 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004256:	4b7f      	ldr	r3, [pc, #508]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	4a7e      	ldr	r2, [pc, #504]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 800425c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004260:	6593      	str	r3, [r2, #88]	; 0x58
 8004262:	4b7c      	ldr	r3, [pc, #496]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 8004264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800426e:	2301      	movs	r3, #1
 8004270:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004272:	4b79      	ldr	r3, [pc, #484]	; (8004458 <HAL_RCC_OscConfig+0x4bc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427a:	2b00      	cmp	r3, #0
 800427c:	d118      	bne.n	80042b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800427e:	4b76      	ldr	r3, [pc, #472]	; (8004458 <HAL_RCC_OscConfig+0x4bc>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a75      	ldr	r2, [pc, #468]	; (8004458 <HAL_RCC_OscConfig+0x4bc>)
 8004284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004288:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800428a:	f7fe fdc9 	bl	8002e20 <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004290:	e008      	b.n	80042a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004292:	f7fe fdc5 	bl	8002e20 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	2b02      	cmp	r3, #2
 800429e:	d901      	bls.n	80042a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e183      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042a4:	4b6c      	ldr	r3, [pc, #432]	; (8004458 <HAL_RCC_OscConfig+0x4bc>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d0f0      	beq.n	8004292 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d108      	bne.n	80042ca <HAL_RCC_OscConfig+0x32e>
 80042b8:	4b66      	ldr	r3, [pc, #408]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	4a65      	ldr	r2, [pc, #404]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042c8:	e024      	b.n	8004314 <HAL_RCC_OscConfig+0x378>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b05      	cmp	r3, #5
 80042d0:	d110      	bne.n	80042f4 <HAL_RCC_OscConfig+0x358>
 80042d2:	4b60      	ldr	r3, [pc, #384]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d8:	4a5e      	ldr	r2, [pc, #376]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 80042da:	f043 0304 	orr.w	r3, r3, #4
 80042de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042e2:	4b5c      	ldr	r3, [pc, #368]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 80042e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e8:	4a5a      	ldr	r2, [pc, #360]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 80042ea:	f043 0301 	orr.w	r3, r3, #1
 80042ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042f2:	e00f      	b.n	8004314 <HAL_RCC_OscConfig+0x378>
 80042f4:	4b57      	ldr	r3, [pc, #348]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 80042f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042fa:	4a56      	ldr	r2, [pc, #344]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004304:	4b53      	ldr	r3, [pc, #332]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 8004306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430a:	4a52      	ldr	r2, [pc, #328]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 800430c:	f023 0304 	bic.w	r3, r3, #4
 8004310:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	689b      	ldr	r3, [r3, #8]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d016      	beq.n	800434a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431c:	f7fe fd80 	bl	8002e20 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004322:	e00a      	b.n	800433a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004324:	f7fe fd7c 	bl	8002e20 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004332:	4293      	cmp	r3, r2
 8004334:	d901      	bls.n	800433a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e138      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800433a:	4b46      	ldr	r3, [pc, #280]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 800433c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0ed      	beq.n	8004324 <HAL_RCC_OscConfig+0x388>
 8004348:	e015      	b.n	8004376 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434a:	f7fe fd69 	bl	8002e20 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004350:	e00a      	b.n	8004368 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004352:	f7fe fd65 	bl	8002e20 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004360:	4293      	cmp	r3, r2
 8004362:	d901      	bls.n	8004368 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004364:	2303      	movs	r3, #3
 8004366:	e121      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004368:	4b3a      	ldr	r3, [pc, #232]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1ed      	bne.n	8004352 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004376:	7ffb      	ldrb	r3, [r7, #31]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d105      	bne.n	8004388 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800437c:	4b35      	ldr	r3, [pc, #212]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 800437e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004380:	4a34      	ldr	r2, [pc, #208]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 8004382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004386:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 0320 	and.w	r3, r3, #32
 8004390:	2b00      	cmp	r3, #0
 8004392:	d03c      	beq.n	800440e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01c      	beq.n	80043d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800439c:	4b2d      	ldr	r3, [pc, #180]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 800439e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043a2:	4a2c      	ldr	r2, [pc, #176]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fe fd38 	bl	8002e20 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043b2:	e008      	b.n	80043c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043b4:	f7fe fd34 	bl	8002e20 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	2b02      	cmp	r3, #2
 80043c0:	d901      	bls.n	80043c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80043c2:	2303      	movs	r3, #3
 80043c4:	e0f2      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80043c6:	4b23      	ldr	r3, [pc, #140]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 80043c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043cc:	f003 0302 	and.w	r3, r3, #2
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0ef      	beq.n	80043b4 <HAL_RCC_OscConfig+0x418>
 80043d4:	e01b      	b.n	800440e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80043d6:	4b1f      	ldr	r3, [pc, #124]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 80043d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80043dc:	4a1d      	ldr	r2, [pc, #116]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 80043de:	f023 0301 	bic.w	r3, r3, #1
 80043e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e6:	f7fe fd1b 	bl	8002e20 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80043ee:	f7fe fd17 	bl	8002e20 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e0d5      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004400:	4b14      	ldr	r3, [pc, #80]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 8004402:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1ef      	bne.n	80043ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	2b00      	cmp	r3, #0
 8004414:	f000 80c9 	beq.w	80045aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004418:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 030c 	and.w	r3, r3, #12
 8004420:	2b0c      	cmp	r3, #12
 8004422:	f000 8083 	beq.w	800452c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69db      	ldr	r3, [r3, #28]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d15e      	bne.n	80044ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800442e:	4b09      	ldr	r3, [pc, #36]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a08      	ldr	r2, [pc, #32]	; (8004454 <HAL_RCC_OscConfig+0x4b8>)
 8004434:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004438:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fe fcf1 	bl	8002e20 <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004440:	e00c      	b.n	800445c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004442:	f7fe fced 	bl	8002e20 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b02      	cmp	r3, #2
 800444e:	d905      	bls.n	800445c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e0ab      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
 8004454:	40021000 	.word	0x40021000
 8004458:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800445c:	4b55      	ldr	r3, [pc, #340]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d1ec      	bne.n	8004442 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004468:	4b52      	ldr	r3, [pc, #328]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 800446a:	68da      	ldr	r2, [r3, #12]
 800446c:	4b52      	ldr	r3, [pc, #328]	; (80045b8 <HAL_RCC_OscConfig+0x61c>)
 800446e:	4013      	ands	r3, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6a11      	ldr	r1, [r2, #32]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004478:	3a01      	subs	r2, #1
 800447a:	0112      	lsls	r2, r2, #4
 800447c:	4311      	orrs	r1, r2
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004482:	0212      	lsls	r2, r2, #8
 8004484:	4311      	orrs	r1, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800448a:	0852      	lsrs	r2, r2, #1
 800448c:	3a01      	subs	r2, #1
 800448e:	0552      	lsls	r2, r2, #21
 8004490:	4311      	orrs	r1, r2
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004496:	0852      	lsrs	r2, r2, #1
 8004498:	3a01      	subs	r2, #1
 800449a:	0652      	lsls	r2, r2, #25
 800449c:	4311      	orrs	r1, r2
 800449e:	687a      	ldr	r2, [r7, #4]
 80044a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80044a2:	06d2      	lsls	r2, r2, #27
 80044a4:	430a      	orrs	r2, r1
 80044a6:	4943      	ldr	r1, [pc, #268]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ac:	4b41      	ldr	r3, [pc, #260]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a40      	ldr	r2, [pc, #256]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 80044b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044b8:	4b3e      	ldr	r3, [pc, #248]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4a3d      	ldr	r2, [pc, #244]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 80044be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c4:	f7fe fcac 	bl	8002e20 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044cc:	f7fe fca8 	bl	8002e20 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e066      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044de:	4b35      	ldr	r3, [pc, #212]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0x530>
 80044ea:	e05e      	b.n	80045aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ec:	4b31      	ldr	r3, [pc, #196]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a30      	ldr	r2, [pc, #192]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 80044f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044f8:	f7fe fc92 	bl	8002e20 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004500:	f7fe fc8e 	bl	8002e20 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e04c      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004512:	4b28      	ldr	r3, [pc, #160]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800451e:	4b25      	ldr	r3, [pc, #148]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 8004520:	68da      	ldr	r2, [r3, #12]
 8004522:	4924      	ldr	r1, [pc, #144]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 8004524:	4b25      	ldr	r3, [pc, #148]	; (80045bc <HAL_RCC_OscConfig+0x620>)
 8004526:	4013      	ands	r3, r2
 8004528:	60cb      	str	r3, [r1, #12]
 800452a:	e03e      	b.n	80045aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	69db      	ldr	r3, [r3, #28]
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e039      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <HAL_RCC_OscConfig+0x618>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 0203 	and.w	r2, r3, #3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	429a      	cmp	r2, r3
 800454a:	d12c      	bne.n	80045a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	3b01      	subs	r3, #1
 8004558:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d123      	bne.n	80045a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004568:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d11b      	bne.n	80045a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004578:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800457a:	429a      	cmp	r2, r3
 800457c:	d113      	bne.n	80045a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004588:	085b      	lsrs	r3, r3, #1
 800458a:	3b01      	subs	r3, #1
 800458c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800458e:	429a      	cmp	r2, r3
 8004590:	d109      	bne.n	80045a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	3b01      	subs	r3, #1
 80045a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d001      	beq.n	80045aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e000      	b.n	80045ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3720      	adds	r7, #32
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40021000 	.word	0x40021000
 80045b8:	019f800c 	.word	0x019f800c
 80045bc:	feeefffc 	.word	0xfeeefffc

080045c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80045ca:	2300      	movs	r3, #0
 80045cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d101      	bne.n	80045d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e11e      	b.n	8004816 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80045d8:	4b91      	ldr	r3, [pc, #580]	; (8004820 <HAL_RCC_ClockConfig+0x260>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 030f 	and.w	r3, r3, #15
 80045e0:	683a      	ldr	r2, [r7, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d910      	bls.n	8004608 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045e6:	4b8e      	ldr	r3, [pc, #568]	; (8004820 <HAL_RCC_ClockConfig+0x260>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f023 020f 	bic.w	r2, r3, #15
 80045ee:	498c      	ldr	r1, [pc, #560]	; (8004820 <HAL_RCC_ClockConfig+0x260>)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	4b8a      	ldr	r3, [pc, #552]	; (8004820 <HAL_RCC_ClockConfig+0x260>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 030f 	and.w	r3, r3, #15
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e106      	b.n	8004816 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d073      	beq.n	80046fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	2b03      	cmp	r3, #3
 800461a:	d129      	bne.n	8004670 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800461c:	4b81      	ldr	r3, [pc, #516]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d101      	bne.n	800462c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0f4      	b.n	8004816 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800462c:	f000 f966 	bl	80048fc <RCC_GetSysClockFreqFromPLLSource>
 8004630:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	4a7c      	ldr	r2, [pc, #496]	; (8004828 <HAL_RCC_ClockConfig+0x268>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d93f      	bls.n	80046ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800463a:	4b7a      	ldr	r3, [pc, #488]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800464e:	2b00      	cmp	r3, #0
 8004650:	d033      	beq.n	80046ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004656:	2b00      	cmp	r3, #0
 8004658:	d12f      	bne.n	80046ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800465a:	4b72      	ldr	r3, [pc, #456]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004662:	4a70      	ldr	r2, [pc, #448]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 8004664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004668:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800466a:	2380      	movs	r3, #128	; 0x80
 800466c:	617b      	str	r3, [r7, #20]
 800466e:	e024      	b.n	80046ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	2b02      	cmp	r3, #2
 8004676:	d107      	bne.n	8004688 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004678:	4b6a      	ldr	r3, [pc, #424]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d109      	bne.n	8004698 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0c6      	b.n	8004816 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004688:	4b66      	ldr	r3, [pc, #408]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e0be      	b.n	8004816 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004698:	f000 f8ce 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 800469c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	4a61      	ldr	r2, [pc, #388]	; (8004828 <HAL_RCC_ClockConfig+0x268>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d909      	bls.n	80046ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80046a6:	4b5f      	ldr	r3, [pc, #380]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ae:	4a5d      	ldr	r2, [pc, #372]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 80046b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80046ba:	4b5a      	ldr	r3, [pc, #360]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f023 0203 	bic.w	r2, r3, #3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	4957      	ldr	r1, [pc, #348]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046cc:	f7fe fba8 	bl	8002e20 <HAL_GetTick>
 80046d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046d2:	e00a      	b.n	80046ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046d4:	f7fe fba4 	bl	8002e20 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e095      	b.n	8004816 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046ea:	4b4e      	ldr	r3, [pc, #312]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f003 020c 	and.w	r2, r3, #12
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d1eb      	bne.n	80046d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d023      	beq.n	8004750 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b00      	cmp	r3, #0
 8004712:	d005      	beq.n	8004720 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004714:	4b43      	ldr	r3, [pc, #268]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	4a42      	ldr	r2, [pc, #264]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 800471a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800471e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b00      	cmp	r3, #0
 800472a:	d007      	beq.n	800473c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800472c:	4b3d      	ldr	r3, [pc, #244]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 800472e:	689b      	ldr	r3, [r3, #8]
 8004730:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004734:	4a3b      	ldr	r2, [pc, #236]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 8004736:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800473a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800473c:	4b39      	ldr	r3, [pc, #228]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	4936      	ldr	r1, [pc, #216]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 800474a:	4313      	orrs	r3, r2
 800474c:	608b      	str	r3, [r1, #8]
 800474e:	e008      	b.n	8004762 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	2b80      	cmp	r3, #128	; 0x80
 8004754:	d105      	bne.n	8004762 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004756:	4b33      	ldr	r3, [pc, #204]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	4a32      	ldr	r2, [pc, #200]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 800475c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004760:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004762:	4b2f      	ldr	r3, [pc, #188]	; (8004820 <HAL_RCC_ClockConfig+0x260>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 030f 	and.w	r3, r3, #15
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d21d      	bcs.n	80047ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004770:	4b2b      	ldr	r3, [pc, #172]	; (8004820 <HAL_RCC_ClockConfig+0x260>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f023 020f 	bic.w	r2, r3, #15
 8004778:	4929      	ldr	r1, [pc, #164]	; (8004820 <HAL_RCC_ClockConfig+0x260>)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	4313      	orrs	r3, r2
 800477e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004780:	f7fe fb4e 	bl	8002e20 <HAL_GetTick>
 8004784:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004786:	e00a      	b.n	800479e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004788:	f7fe fb4a 	bl	8002e20 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	f241 3288 	movw	r2, #5000	; 0x1388
 8004796:	4293      	cmp	r3, r2
 8004798:	d901      	bls.n	800479e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e03b      	b.n	8004816 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479e:	4b20      	ldr	r3, [pc, #128]	; (8004820 <HAL_RCC_ClockConfig+0x260>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	683a      	ldr	r2, [r7, #0]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d1ed      	bne.n	8004788 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b8:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	4917      	ldr	r1, [pc, #92]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0308 	and.w	r3, r3, #8
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047d6:	4b13      	ldr	r3, [pc, #76]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	490f      	ldr	r1, [pc, #60]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047ea:	f000 f825 	bl	8004838 <HAL_RCC_GetSysClockFreq>
 80047ee:	4602      	mov	r2, r0
 80047f0:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <HAL_RCC_ClockConfig+0x264>)
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	091b      	lsrs	r3, r3, #4
 80047f6:	f003 030f 	and.w	r3, r3, #15
 80047fa:	490c      	ldr	r1, [pc, #48]	; (800482c <HAL_RCC_ClockConfig+0x26c>)
 80047fc:	5ccb      	ldrb	r3, [r1, r3]
 80047fe:	f003 031f 	and.w	r3, r3, #31
 8004802:	fa22 f303 	lsr.w	r3, r2, r3
 8004806:	4a0a      	ldr	r2, [pc, #40]	; (8004830 <HAL_RCC_ClockConfig+0x270>)
 8004808:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800480a:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <HAL_RCC_ClockConfig+0x274>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fe faba 	bl	8002d88 <HAL_InitTick>
 8004814:	4603      	mov	r3, r0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3718      	adds	r7, #24
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	40022000 	.word	0x40022000
 8004824:	40021000 	.word	0x40021000
 8004828:	04c4b400 	.word	0x04c4b400
 800482c:	08007908 	.word	0x08007908
 8004830:	20000000 	.word	0x20000000
 8004834:	20000004 	.word	0x20000004

08004838 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004838:	b480      	push	{r7}
 800483a:	b087      	sub	sp, #28
 800483c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800483e:	4b2c      	ldr	r3, [pc, #176]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
 8004846:	2b04      	cmp	r3, #4
 8004848:	d102      	bne.n	8004850 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800484a:	4b2a      	ldr	r3, [pc, #168]	; (80048f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800484c:	613b      	str	r3, [r7, #16]
 800484e:	e047      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004850:	4b27      	ldr	r3, [pc, #156]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
 8004858:	2b08      	cmp	r3, #8
 800485a:	d102      	bne.n	8004862 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800485c:	4b26      	ldr	r3, [pc, #152]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	e03e      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004862:	4b23      	ldr	r3, [pc, #140]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004864:	689b      	ldr	r3, [r3, #8]
 8004866:	f003 030c 	and.w	r3, r3, #12
 800486a:	2b0c      	cmp	r3, #12
 800486c:	d136      	bne.n	80048dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800486e:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	f003 0303 	and.w	r3, r3, #3
 8004876:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004878:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	091b      	lsrs	r3, r3, #4
 800487e:	f003 030f 	and.w	r3, r3, #15
 8004882:	3301      	adds	r3, #1
 8004884:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b03      	cmp	r3, #3
 800488a:	d10c      	bne.n	80048a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800488c:	4a1a      	ldr	r2, [pc, #104]	; (80048f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	fbb2 f3f3 	udiv	r3, r2, r3
 8004894:	4a16      	ldr	r2, [pc, #88]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004896:	68d2      	ldr	r2, [r2, #12]
 8004898:	0a12      	lsrs	r2, r2, #8
 800489a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	617b      	str	r3, [r7, #20]
      break;
 80048a4:	e00c      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048a6:	4a13      	ldr	r2, [pc, #76]	; (80048f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ae:	4a10      	ldr	r2, [pc, #64]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048b0:	68d2      	ldr	r2, [r2, #12]
 80048b2:	0a12      	lsrs	r2, r2, #8
 80048b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80048b8:	fb02 f303 	mul.w	r3, r2, r3
 80048bc:	617b      	str	r3, [r7, #20]
      break;
 80048be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	0e5b      	lsrs	r3, r3, #25
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	3301      	adds	r3, #1
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80048d0:	697a      	ldr	r2, [r7, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	e001      	b.n	80048e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80048dc:	2300      	movs	r3, #0
 80048de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80048e0:	693b      	ldr	r3, [r7, #16]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	371c      	adds	r7, #28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40021000 	.word	0x40021000
 80048f4:	00f42400 	.word	0x00f42400
 80048f8:	007a1200 	.word	0x007a1200

080048fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004902:	4b1e      	ldr	r3, [pc, #120]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800490c:	4b1b      	ldr	r3, [pc, #108]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	091b      	lsrs	r3, r3, #4
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	3301      	adds	r3, #1
 8004918:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b03      	cmp	r3, #3
 800491e:	d10c      	bne.n	800493a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004920:	4a17      	ldr	r2, [pc, #92]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	fbb2 f3f3 	udiv	r3, r2, r3
 8004928:	4a14      	ldr	r2, [pc, #80]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800492a:	68d2      	ldr	r2, [r2, #12]
 800492c:	0a12      	lsrs	r2, r2, #8
 800492e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004932:	fb02 f303 	mul.w	r3, r2, r3
 8004936:	617b      	str	r3, [r7, #20]
    break;
 8004938:	e00c      	b.n	8004954 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800493a:	4a12      	ldr	r2, [pc, #72]	; (8004984 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004942:	4a0e      	ldr	r2, [pc, #56]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004944:	68d2      	ldr	r2, [r2, #12]
 8004946:	0a12      	lsrs	r2, r2, #8
 8004948:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800494c:	fb02 f303 	mul.w	r3, r2, r3
 8004950:	617b      	str	r3, [r7, #20]
    break;
 8004952:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004954:	4b09      	ldr	r3, [pc, #36]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	0e5b      	lsrs	r3, r3, #25
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	3301      	adds	r3, #1
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	fbb2 f3f3 	udiv	r3, r2, r3
 800496c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800496e:	687b      	ldr	r3, [r7, #4]
}
 8004970:	4618      	mov	r0, r3
 8004972:	371c      	adds	r7, #28
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr
 800497c:	40021000 	.word	0x40021000
 8004980:	007a1200 	.word	0x007a1200
 8004984:	00f42400 	.word	0x00f42400

08004988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004990:	2300      	movs	r3, #0
 8004992:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004994:	2300      	movs	r3, #0
 8004996:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8098 	beq.w	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a6:	2300      	movs	r3, #0
 80049a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049aa:	4b43      	ldr	r3, [pc, #268]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10d      	bne.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b6:	4b40      	ldr	r3, [pc, #256]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ba:	4a3f      	ldr	r2, [pc, #252]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6593      	str	r3, [r2, #88]	; 0x58
 80049c2:	4b3d      	ldr	r3, [pc, #244]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	60bb      	str	r3, [r7, #8]
 80049cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ce:	2301      	movs	r3, #1
 80049d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049d2:	4b3a      	ldr	r3, [pc, #232]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a39      	ldr	r2, [pc, #228]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049de:	f7fe fa1f 	bl	8002e20 <HAL_GetTick>
 80049e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049e4:	e009      	b.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e6:	f7fe fa1b 	bl	8002e20 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d902      	bls.n	80049fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	74fb      	strb	r3, [r7, #19]
        break;
 80049f8:	e005      	b.n	8004a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049fa:	4b30      	ldr	r3, [pc, #192]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0ef      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a06:	7cfb      	ldrb	r3, [r7, #19]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d159      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a0c:	4b2a      	ldr	r3, [pc, #168]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d01e      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d019      	beq.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a28:	4b23      	ldr	r3, [pc, #140]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a34:	4b20      	ldr	r3, [pc, #128]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a3a:	4a1f      	ldr	r2, [pc, #124]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a44:	4b1c      	ldr	r3, [pc, #112]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a4a:	4a1b      	ldr	r2, [pc, #108]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a54:	4a18      	ldr	r2, [pc, #96]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d016      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a66:	f7fe f9db 	bl	8002e20 <HAL_GetTick>
 8004a6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a6c:	e00b      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6e:	f7fe f9d7 	bl	8002e20 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d902      	bls.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	74fb      	strb	r3, [r7, #19]
            break;
 8004a84:	e006      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d0ec      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a94:	7cfb      	ldrb	r3, [r7, #19]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10b      	bne.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a9a:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa8:	4903      	ldr	r1, [pc, #12]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
 8004ab4:	74bb      	strb	r3, [r7, #18]
 8004ab6:	e005      	b.n	8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ab8:	40021000 	.word	0x40021000
 8004abc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ac0:	7cfb      	ldrb	r3, [r7, #19]
 8004ac2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ac4:	7c7b      	ldrb	r3, [r7, #17]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d105      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aca:	4ba6      	ldr	r3, [pc, #664]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ace:	4aa5      	ldr	r2, [pc, #660]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ae2:	4ba0      	ldr	r3, [pc, #640]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae8:	f023 0203 	bic.w	r2, r3, #3
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	499c      	ldr	r1, [pc, #624]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0302 	and.w	r3, r3, #2
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00a      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b04:	4b97      	ldr	r3, [pc, #604]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b0a:	f023 020c 	bic.w	r2, r3, #12
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	4994      	ldr	r1, [pc, #592]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b26:	4b8f      	ldr	r3, [pc, #572]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	498b      	ldr	r1, [pc, #556]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00a      	beq.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b48:	4b86      	ldr	r3, [pc, #536]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	4983      	ldr	r1, [pc, #524]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0320 	and.w	r3, r3, #32
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00a      	beq.n	8004b80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b6a:	4b7e      	ldr	r3, [pc, #504]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	695b      	ldr	r3, [r3, #20]
 8004b78:	497a      	ldr	r1, [pc, #488]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b8c:	4b75      	ldr	r3, [pc, #468]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	4972      	ldr	r1, [pc, #456]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bae:	4b6d      	ldr	r3, [pc, #436]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	4969      	ldr	r1, [pc, #420]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00a      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bd0:	4b64      	ldr	r3, [pc, #400]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	4961      	ldr	r1, [pc, #388]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004bf2:	4b5c      	ldr	r3, [pc, #368]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	4958      	ldr	r1, [pc, #352]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d015      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c14:	4b53      	ldr	r3, [pc, #332]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c22:	4950      	ldr	r1, [pc, #320]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c32:	d105      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c34:	4b4b      	ldr	r3, [pc, #300]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c36:	68db      	ldr	r3, [r3, #12]
 8004c38:	4a4a      	ldr	r2, [pc, #296]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d015      	beq.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c4c:	4b45      	ldr	r3, [pc, #276]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	4942      	ldr	r1, [pc, #264]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c6a:	d105      	bne.n	8004c78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c6c:	4b3d      	ldr	r3, [pc, #244]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4a3c      	ldr	r2, [pc, #240]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c76:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d015      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004c84:	4b37      	ldr	r3, [pc, #220]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	4934      	ldr	r1, [pc, #208]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ca2:	d105      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ca4:	4b2f      	ldr	r3, [pc, #188]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	4a2e      	ldr	r2, [pc, #184]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004caa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d015      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cbc:	4b29      	ldr	r3, [pc, #164]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cca:	4926      	ldr	r1, [pc, #152]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cda:	d105      	bne.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cdc:	4b21      	ldr	r3, [pc, #132]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	4a20      	ldr	r2, [pc, #128]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ce2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ce6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d015      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d02:	4918      	ldr	r1, [pc, #96]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d12:	d105      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d14:	4b13      	ldr	r3, [pc, #76]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d16:	68db      	ldr	r3, [r3, #12]
 8004d18:	4a12      	ldr	r2, [pc, #72]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d015      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d2c:	4b0d      	ldr	r3, [pc, #52]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3a:	490a      	ldr	r1, [pc, #40]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d4a:	d105      	bne.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d4c:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	4a04      	ldr	r2, [pc, #16]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004d52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004d58:	7cbb      	ldrb	r3, [r7, #18]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40021000 	.word	0x40021000

08004d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e049      	b.n	8004e0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fd fdb2 	bl	80028f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2202      	movs	r2, #2
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	3304      	adds	r3, #4
 8004da4:	4619      	mov	r1, r3
 8004da6:	4610      	mov	r0, r2
 8004da8:	f000 fe14 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
	...

08004e18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b085      	sub	sp, #20
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d001      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	e04a      	b.n	8004ec6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2202      	movs	r2, #2
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0201 	orr.w	r2, r2, #1
 8004e46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a21      	ldr	r2, [pc, #132]	; (8004ed4 <HAL_TIM_Base_Start_IT+0xbc>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d018      	beq.n	8004e84 <HAL_TIM_Base_Start_IT+0x6c>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e5a:	d013      	beq.n	8004e84 <HAL_TIM_Base_Start_IT+0x6c>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1d      	ldr	r2, [pc, #116]	; (8004ed8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d00e      	beq.n	8004e84 <HAL_TIM_Base_Start_IT+0x6c>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a1c      	ldr	r2, [pc, #112]	; (8004edc <HAL_TIM_Base_Start_IT+0xc4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d009      	beq.n	8004e84 <HAL_TIM_Base_Start_IT+0x6c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a1a      	ldr	r2, [pc, #104]	; (8004ee0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d004      	beq.n	8004e84 <HAL_TIM_Base_Start_IT+0x6c>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a19      	ldr	r2, [pc, #100]	; (8004ee4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d115      	bne.n	8004eb0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	689a      	ldr	r2, [r3, #8]
 8004e8a:	4b17      	ldr	r3, [pc, #92]	; (8004ee8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2b06      	cmp	r3, #6
 8004e94:	d015      	beq.n	8004ec2 <HAL_TIM_Base_Start_IT+0xaa>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e9c:	d011      	beq.n	8004ec2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0201 	orr.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eae:	e008      	b.n	8004ec2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	681a      	ldr	r2, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0201 	orr.w	r2, r2, #1
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	e000      	b.n	8004ec4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ec2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3714      	adds	r7, #20
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40000400 	.word	0x40000400
 8004edc:	40000800 	.word	0x40000800
 8004ee0:	40013400 	.word	0x40013400
 8004ee4:	40014000 	.word	0x40014000
 8004ee8:	00010007 	.word	0x00010007

08004eec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d101      	bne.n	8004efe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e049      	b.n	8004f92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d106      	bne.n	8004f18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f7fd fd3e 	bl	8002994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2202      	movs	r2, #2
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f000 fd52 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2201      	movs	r2, #1
 8004f44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
	...

08004f9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d109      	bne.n	8004fc0 <HAL_TIM_PWM_Start+0x24>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fb2:	b2db      	uxtb	r3, r3
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	bf14      	ite	ne
 8004fb8:	2301      	movne	r3, #1
 8004fba:	2300      	moveq	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	e03c      	b.n	800503a <HAL_TIM_PWM_Start+0x9e>
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d109      	bne.n	8004fda <HAL_TIM_PWM_Start+0x3e>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	bf14      	ite	ne
 8004fd2:	2301      	movne	r3, #1
 8004fd4:	2300      	moveq	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	e02f      	b.n	800503a <HAL_TIM_PWM_Start+0x9e>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d109      	bne.n	8004ff4 <HAL_TIM_PWM_Start+0x58>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	bf14      	ite	ne
 8004fec:	2301      	movne	r3, #1
 8004fee:	2300      	moveq	r3, #0
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	e022      	b.n	800503a <HAL_TIM_PWM_Start+0x9e>
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	2b0c      	cmp	r3, #12
 8004ff8:	d109      	bne.n	800500e <HAL_TIM_PWM_Start+0x72>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b01      	cmp	r3, #1
 8005004:	bf14      	ite	ne
 8005006:	2301      	movne	r3, #1
 8005008:	2300      	moveq	r3, #0
 800500a:	b2db      	uxtb	r3, r3
 800500c:	e015      	b.n	800503a <HAL_TIM_PWM_Start+0x9e>
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	2b10      	cmp	r3, #16
 8005012:	d109      	bne.n	8005028 <HAL_TIM_PWM_Start+0x8c>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800501a:	b2db      	uxtb	r3, r3
 800501c:	2b01      	cmp	r3, #1
 800501e:	bf14      	ite	ne
 8005020:	2301      	movne	r3, #1
 8005022:	2300      	moveq	r3, #0
 8005024:	b2db      	uxtb	r3, r3
 8005026:	e008      	b.n	800503a <HAL_TIM_PWM_Start+0x9e>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b01      	cmp	r3, #1
 8005032:	bf14      	ite	ne
 8005034:	2301      	movne	r3, #1
 8005036:	2300      	moveq	r3, #0
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	d001      	beq.n	8005042 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e097      	b.n	8005172 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d104      	bne.n	8005052 <HAL_TIM_PWM_Start+0xb6>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2202      	movs	r2, #2
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005050:	e023      	b.n	800509a <HAL_TIM_PWM_Start+0xfe>
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	2b04      	cmp	r3, #4
 8005056:	d104      	bne.n	8005062 <HAL_TIM_PWM_Start+0xc6>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005060:	e01b      	b.n	800509a <HAL_TIM_PWM_Start+0xfe>
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d104      	bne.n	8005072 <HAL_TIM_PWM_Start+0xd6>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005070:	e013      	b.n	800509a <HAL_TIM_PWM_Start+0xfe>
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b0c      	cmp	r3, #12
 8005076:	d104      	bne.n	8005082 <HAL_TIM_PWM_Start+0xe6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2202      	movs	r2, #2
 800507c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005080:	e00b      	b.n	800509a <HAL_TIM_PWM_Start+0xfe>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b10      	cmp	r3, #16
 8005086:	d104      	bne.n	8005092 <HAL_TIM_PWM_Start+0xf6>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005090:	e003      	b.n	800509a <HAL_TIM_PWM_Start+0xfe>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2202      	movs	r2, #2
 8005096:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2201      	movs	r2, #1
 80050a0:	6839      	ldr	r1, [r7, #0]
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 f8c4 	bl	8006230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a33      	ldr	r2, [pc, #204]	; (800517c <HAL_TIM_PWM_Start+0x1e0>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <HAL_TIM_PWM_Start+0x13e>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a32      	ldr	r2, [pc, #200]	; (8005180 <HAL_TIM_PWM_Start+0x1e4>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00e      	beq.n	80050da <HAL_TIM_PWM_Start+0x13e>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a30      	ldr	r2, [pc, #192]	; (8005184 <HAL_TIM_PWM_Start+0x1e8>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d009      	beq.n	80050da <HAL_TIM_PWM_Start+0x13e>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <HAL_TIM_PWM_Start+0x1ec>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d004      	beq.n	80050da <HAL_TIM_PWM_Start+0x13e>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a2d      	ldr	r2, [pc, #180]	; (800518c <HAL_TIM_PWM_Start+0x1f0>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d101      	bne.n	80050de <HAL_TIM_PWM_Start+0x142>
 80050da:	2301      	movs	r3, #1
 80050dc:	e000      	b.n	80050e0 <HAL_TIM_PWM_Start+0x144>
 80050de:	2300      	movs	r3, #0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d007      	beq.n	80050f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a20      	ldr	r2, [pc, #128]	; (800517c <HAL_TIM_PWM_Start+0x1e0>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d018      	beq.n	8005130 <HAL_TIM_PWM_Start+0x194>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005106:	d013      	beq.n	8005130 <HAL_TIM_PWM_Start+0x194>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a20      	ldr	r2, [pc, #128]	; (8005190 <HAL_TIM_PWM_Start+0x1f4>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00e      	beq.n	8005130 <HAL_TIM_PWM_Start+0x194>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <HAL_TIM_PWM_Start+0x1f8>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d009      	beq.n	8005130 <HAL_TIM_PWM_Start+0x194>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a17      	ldr	r2, [pc, #92]	; (8005180 <HAL_TIM_PWM_Start+0x1e4>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d004      	beq.n	8005130 <HAL_TIM_PWM_Start+0x194>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a16      	ldr	r2, [pc, #88]	; (8005184 <HAL_TIM_PWM_Start+0x1e8>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d115      	bne.n	800515c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	4b18      	ldr	r3, [pc, #96]	; (8005198 <HAL_TIM_PWM_Start+0x1fc>)
 8005138:	4013      	ands	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b06      	cmp	r3, #6
 8005140:	d015      	beq.n	800516e <HAL_TIM_PWM_Start+0x1d2>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005148:	d011      	beq.n	800516e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515a:	e008      	b.n	800516e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]
 800516c:	e000      	b.n	8005170 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3710      	adds	r7, #16
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	40012c00 	.word	0x40012c00
 8005180:	40013400 	.word	0x40013400
 8005184:	40014000 	.word	0x40014000
 8005188:	40014400 	.word	0x40014400
 800518c:	40014800 	.word	0x40014800
 8005190:	40000400 	.word	0x40000400
 8005194:	40000800 	.word	0x40000800
 8005198:	00010007 	.word	0x00010007

0800519c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f001 f83e 	bl	8006230 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a3e      	ldr	r2, [pc, #248]	; (80052b4 <HAL_TIM_PWM_Stop+0x118>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d013      	beq.n	80051e6 <HAL_TIM_PWM_Stop+0x4a>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a3d      	ldr	r2, [pc, #244]	; (80052b8 <HAL_TIM_PWM_Stop+0x11c>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00e      	beq.n	80051e6 <HAL_TIM_PWM_Stop+0x4a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a3b      	ldr	r2, [pc, #236]	; (80052bc <HAL_TIM_PWM_Stop+0x120>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_TIM_PWM_Stop+0x4a>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a3a      	ldr	r2, [pc, #232]	; (80052c0 <HAL_TIM_PWM_Stop+0x124>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_TIM_PWM_Stop+0x4a>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a38      	ldr	r2, [pc, #224]	; (80052c4 <HAL_TIM_PWM_Stop+0x128>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d101      	bne.n	80051ea <HAL_TIM_PWM_Stop+0x4e>
 80051e6:	2301      	movs	r3, #1
 80051e8:	e000      	b.n	80051ec <HAL_TIM_PWM_Stop+0x50>
 80051ea:	2300      	movs	r3, #0
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d017      	beq.n	8005220 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80051fa:	4013      	ands	r3, r2
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10f      	bne.n	8005220 <HAL_TIM_PWM_Stop+0x84>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6a1a      	ldr	r2, [r3, #32]
 8005206:	f244 4344 	movw	r3, #17476	; 0x4444
 800520a:	4013      	ands	r3, r2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d107      	bne.n	8005220 <HAL_TIM_PWM_Stop+0x84>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800521e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	6a1a      	ldr	r2, [r3, #32]
 8005226:	f241 1311 	movw	r3, #4369	; 0x1111
 800522a:	4013      	ands	r3, r2
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10f      	bne.n	8005250 <HAL_TIM_PWM_Stop+0xb4>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6a1a      	ldr	r2, [r3, #32]
 8005236:	f244 4344 	movw	r3, #17476	; 0x4444
 800523a:	4013      	ands	r3, r2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d107      	bne.n	8005250 <HAL_TIM_PWM_Stop+0xb4>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f022 0201 	bic.w	r2, r2, #1
 800524e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d104      	bne.n	8005260 <HAL_TIM_PWM_Stop+0xc4>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800525e:	e023      	b.n	80052a8 <HAL_TIM_PWM_Stop+0x10c>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b04      	cmp	r3, #4
 8005264:	d104      	bne.n	8005270 <HAL_TIM_PWM_Stop+0xd4>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800526e:	e01b      	b.n	80052a8 <HAL_TIM_PWM_Stop+0x10c>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b08      	cmp	r3, #8
 8005274:	d104      	bne.n	8005280 <HAL_TIM_PWM_Stop+0xe4>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800527e:	e013      	b.n	80052a8 <HAL_TIM_PWM_Stop+0x10c>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b0c      	cmp	r3, #12
 8005284:	d104      	bne.n	8005290 <HAL_TIM_PWM_Stop+0xf4>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800528e:	e00b      	b.n	80052a8 <HAL_TIM_PWM_Stop+0x10c>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b10      	cmp	r3, #16
 8005294:	d104      	bne.n	80052a0 <HAL_TIM_PWM_Stop+0x104>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800529e:	e003      	b.n	80052a8 <HAL_TIM_PWM_Stop+0x10c>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40012c00 	.word	0x40012c00
 80052b8:	40013400 	.word	0x40013400
 80052bc:	40014000 	.word	0x40014000
 80052c0:	40014400 	.word	0x40014400
 80052c4:	40014800 	.word	0x40014800

080052c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	f003 0302 	and.w	r3, r3, #2
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d020      	beq.n	800532c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d01b      	beq.n	800532c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0202 	mvn.w	r2, #2
 80052fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d003      	beq.n	800531a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f000 fb40 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 8005318:	e005      	b.n	8005326 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fb32 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fb43 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	d020      	beq.n	8005378 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	d01b      	beq.n	8005378 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f06f 0204 	mvn.w	r2, #4
 8005348:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2202      	movs	r2, #2
 800534e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800535a:	2b00      	cmp	r3, #0
 800535c:	d003      	beq.n	8005366 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 fb1a 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 8005364:	e005      	b.n	8005372 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fb0c 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 fb1d 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	f003 0308 	and.w	r3, r3, #8
 800537e:	2b00      	cmp	r3, #0
 8005380:	d020      	beq.n	80053c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f003 0308 	and.w	r3, r3, #8
 8005388:	2b00      	cmp	r3, #0
 800538a:	d01b      	beq.n	80053c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0208 	mvn.w	r2, #8
 8005394:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2204      	movs	r2, #4
 800539a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	69db      	ldr	r3, [r3, #28]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d003      	beq.n	80053b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 faf4 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 80053b0:	e005      	b.n	80053be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fae6 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 faf7 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0310 	and.w	r3, r3, #16
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d020      	beq.n	8005410 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f003 0310 	and.w	r3, r3, #16
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01b      	beq.n	8005410 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0210 	mvn.w	r2, #16
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2208      	movs	r2, #8
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 face 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 80053fc:	e005      	b.n	800540a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fac0 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fad1 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00c      	beq.n	8005434 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d007      	beq.n	8005434 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f06f 0201 	mvn.w	r2, #1
 800542c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7fc fb16 	bl	8001a60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800543a:	2b00      	cmp	r3, #0
 800543c:	d104      	bne.n	8005448 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00c      	beq.n	8005462 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800545a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f001 f825 	bl	80064ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00c      	beq.n	8005486 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005472:	2b00      	cmp	r3, #0
 8005474:	d007      	beq.n	8005486 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800547e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f001 f81d 	bl	80064c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00c      	beq.n	80054aa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005496:	2b00      	cmp	r3, #0
 8005498:	d007      	beq.n	80054aa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054a4:	6878      	ldr	r0, [r7, #4]
 80054a6:	f000 fa8b 	bl	80059c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00c      	beq.n	80054ce <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f06f 0220 	mvn.w	r2, #32
 80054c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f000 ffe5 	bl	8006498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d00c      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d007      	beq.n	80054f2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80054ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fff1 	bl	80064d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00c      	beq.n	8005516 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800550e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 ffe9 	bl	80064e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00c      	beq.n	800553a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005532:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 ffe1 	bl	80064fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00c      	beq.n	800555e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 ffd9 	bl	8006510 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b086      	sub	sp, #24
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005574:	2300      	movs	r3, #0
 8005576:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005582:	2302      	movs	r3, #2
 8005584:	e0ff      	b.n	8005786 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b14      	cmp	r3, #20
 8005592:	f200 80f0 	bhi.w	8005776 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005596:	a201      	add	r2, pc, #4	; (adr r2, 800559c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800559c:	080055f1 	.word	0x080055f1
 80055a0:	08005777 	.word	0x08005777
 80055a4:	08005777 	.word	0x08005777
 80055a8:	08005777 	.word	0x08005777
 80055ac:	08005631 	.word	0x08005631
 80055b0:	08005777 	.word	0x08005777
 80055b4:	08005777 	.word	0x08005777
 80055b8:	08005777 	.word	0x08005777
 80055bc:	08005673 	.word	0x08005673
 80055c0:	08005777 	.word	0x08005777
 80055c4:	08005777 	.word	0x08005777
 80055c8:	08005777 	.word	0x08005777
 80055cc:	080056b3 	.word	0x080056b3
 80055d0:	08005777 	.word	0x08005777
 80055d4:	08005777 	.word	0x08005777
 80055d8:	08005777 	.word	0x08005777
 80055dc:	080056f5 	.word	0x080056f5
 80055e0:	08005777 	.word	0x08005777
 80055e4:	08005777 	.word	0x08005777
 80055e8:	08005777 	.word	0x08005777
 80055ec:	08005735 	.word	0x08005735
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68b9      	ldr	r1, [r7, #8]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fa88 	bl	8005b0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0208 	orr.w	r2, r2, #8
 800560a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	699a      	ldr	r2, [r3, #24]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f022 0204 	bic.w	r2, r2, #4
 800561a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6999      	ldr	r1, [r3, #24]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	619a      	str	r2, [r3, #24]
      break;
 800562e:	e0a5      	b.n	800577c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	4618      	mov	r0, r3
 8005638:	f000 faf8 	bl	8005c2c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	699a      	ldr	r2, [r3, #24]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800564a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	699a      	ldr	r2, [r3, #24]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800565a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	6999      	ldr	r1, [r3, #24]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	021a      	lsls	r2, r3, #8
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	619a      	str	r2, [r3, #24]
      break;
 8005670:	e084      	b.n	800577c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68b9      	ldr	r1, [r7, #8]
 8005678:	4618      	mov	r0, r3
 800567a:	f000 fb61 	bl	8005d40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69da      	ldr	r2, [r3, #28]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f042 0208 	orr.w	r2, r2, #8
 800568c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	69da      	ldr	r2, [r3, #28]
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f022 0204 	bic.w	r2, r2, #4
 800569c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	69d9      	ldr	r1, [r3, #28]
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	61da      	str	r2, [r3, #28]
      break;
 80056b0:	e064      	b.n	800577c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68b9      	ldr	r1, [r7, #8]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 fbc9 	bl	8005e50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	69da      	ldr	r2, [r3, #28]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69da      	ldr	r2, [r3, #28]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	69d9      	ldr	r1, [r3, #28]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	021a      	lsls	r2, r3, #8
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	61da      	str	r2, [r3, #28]
      break;
 80056f2:	e043      	b.n	800577c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 fc32 	bl	8005f64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0208 	orr.w	r2, r2, #8
 800570e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0204 	bic.w	r2, r2, #4
 800571e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	691a      	ldr	r2, [r3, #16]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005732:	e023      	b.n	800577c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	4618      	mov	r0, r3
 800573c:	f000 fc76 	bl	800602c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800574e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800575e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	021a      	lsls	r2, r3, #8
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005774:	e002      	b.n	800577c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	75fb      	strb	r3, [r7, #23]
      break;
 800577a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005784:	7dfb      	ldrb	r3, [r7, #23]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop

08005790 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800579a:	2300      	movs	r3, #0
 800579c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <HAL_TIM_ConfigClockSource+0x1c>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e0de      	b.n	800596a <HAL_TIM_ConfigClockSource+0x1da>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80057ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a63      	ldr	r2, [pc, #396]	; (8005974 <HAL_TIM_ConfigClockSource+0x1e4>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	f000 80a9 	beq.w	800593e <HAL_TIM_ConfigClockSource+0x1ae>
 80057ec:	4a61      	ldr	r2, [pc, #388]	; (8005974 <HAL_TIM_ConfigClockSource+0x1e4>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	f200 80ae 	bhi.w	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
 80057f4:	4a60      	ldr	r2, [pc, #384]	; (8005978 <HAL_TIM_ConfigClockSource+0x1e8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	f000 80a1 	beq.w	800593e <HAL_TIM_ConfigClockSource+0x1ae>
 80057fc:	4a5e      	ldr	r2, [pc, #376]	; (8005978 <HAL_TIM_ConfigClockSource+0x1e8>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	f200 80a6 	bhi.w	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
 8005804:	4a5d      	ldr	r2, [pc, #372]	; (800597c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005806:	4293      	cmp	r3, r2
 8005808:	f000 8099 	beq.w	800593e <HAL_TIM_ConfigClockSource+0x1ae>
 800580c:	4a5b      	ldr	r2, [pc, #364]	; (800597c <HAL_TIM_ConfigClockSource+0x1ec>)
 800580e:	4293      	cmp	r3, r2
 8005810:	f200 809e 	bhi.w	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
 8005814:	4a5a      	ldr	r2, [pc, #360]	; (8005980 <HAL_TIM_ConfigClockSource+0x1f0>)
 8005816:	4293      	cmp	r3, r2
 8005818:	f000 8091 	beq.w	800593e <HAL_TIM_ConfigClockSource+0x1ae>
 800581c:	4a58      	ldr	r2, [pc, #352]	; (8005980 <HAL_TIM_ConfigClockSource+0x1f0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	f200 8096 	bhi.w	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
 8005824:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005828:	f000 8089 	beq.w	800593e <HAL_TIM_ConfigClockSource+0x1ae>
 800582c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005830:	f200 808e 	bhi.w	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
 8005834:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005838:	d03e      	beq.n	80058b8 <HAL_TIM_ConfigClockSource+0x128>
 800583a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800583e:	f200 8087 	bhi.w	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
 8005842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005846:	f000 8086 	beq.w	8005956 <HAL_TIM_ConfigClockSource+0x1c6>
 800584a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800584e:	d87f      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
 8005850:	2b70      	cmp	r3, #112	; 0x70
 8005852:	d01a      	beq.n	800588a <HAL_TIM_ConfigClockSource+0xfa>
 8005854:	2b70      	cmp	r3, #112	; 0x70
 8005856:	d87b      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
 8005858:	2b60      	cmp	r3, #96	; 0x60
 800585a:	d050      	beq.n	80058fe <HAL_TIM_ConfigClockSource+0x16e>
 800585c:	2b60      	cmp	r3, #96	; 0x60
 800585e:	d877      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
 8005860:	2b50      	cmp	r3, #80	; 0x50
 8005862:	d03c      	beq.n	80058de <HAL_TIM_ConfigClockSource+0x14e>
 8005864:	2b50      	cmp	r3, #80	; 0x50
 8005866:	d873      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
 8005868:	2b40      	cmp	r3, #64	; 0x40
 800586a:	d058      	beq.n	800591e <HAL_TIM_ConfigClockSource+0x18e>
 800586c:	2b40      	cmp	r3, #64	; 0x40
 800586e:	d86f      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
 8005870:	2b30      	cmp	r3, #48	; 0x30
 8005872:	d064      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x1ae>
 8005874:	2b30      	cmp	r3, #48	; 0x30
 8005876:	d86b      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
 8005878:	2b20      	cmp	r3, #32
 800587a:	d060      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x1ae>
 800587c:	2b20      	cmp	r3, #32
 800587e:	d867      	bhi.n	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d05c      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x1ae>
 8005884:	2b10      	cmp	r3, #16
 8005886:	d05a      	beq.n	800593e <HAL_TIM_ConfigClockSource+0x1ae>
 8005888:	e062      	b.n	8005950 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800589a:	f000 fca9 	bl	80061f0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	609a      	str	r2, [r3, #8]
      break;
 80058b6:	e04f      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058c8:	f000 fc92 	bl	80061f0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689a      	ldr	r2, [r3, #8]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058da:	609a      	str	r2, [r3, #8]
      break;
 80058dc:	e03c      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ea:	461a      	mov	r2, r3
 80058ec:	f000 fc04 	bl	80060f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2150      	movs	r1, #80	; 0x50
 80058f6:	4618      	mov	r0, r3
 80058f8:	f000 fc5d 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 80058fc:	e02c      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800590a:	461a      	mov	r2, r3
 800590c:	f000 fc23 	bl	8006156 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2160      	movs	r1, #96	; 0x60
 8005916:	4618      	mov	r0, r3
 8005918:	f000 fc4d 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 800591c:	e01c      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800592a:	461a      	mov	r2, r3
 800592c:	f000 fbe4 	bl	80060f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	2140      	movs	r1, #64	; 0x40
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fc3d 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 800593c:	e00c      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4619      	mov	r1, r3
 8005948:	4610      	mov	r0, r2
 800594a:	f000 fc34 	bl	80061b6 <TIM_ITRx_SetConfig>
      break;
 800594e:	e003      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	73fb      	strb	r3, [r7, #15]
      break;
 8005954:	e000      	b.n	8005958 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8005956:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	00100070 	.word	0x00100070
 8005978:	00100040 	.word	0x00100040
 800597c:	00100030 	.word	0x00100030
 8005980:	00100020 	.word	0x00100020

08005984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a42      	ldr	r2, [pc, #264]	; (8005af0 <TIM_Base_SetConfig+0x11c>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d00f      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059f2:	d00b      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a3f      	ldr	r2, [pc, #252]	; (8005af4 <TIM_Base_SetConfig+0x120>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d007      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a3e      	ldr	r2, [pc, #248]	; (8005af8 <TIM_Base_SetConfig+0x124>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d003      	beq.n	8005a0c <TIM_Base_SetConfig+0x38>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a3d      	ldr	r2, [pc, #244]	; (8005afc <TIM_Base_SetConfig+0x128>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d108      	bne.n	8005a1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	4a33      	ldr	r2, [pc, #204]	; (8005af0 <TIM_Base_SetConfig+0x11c>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01b      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a2c:	d017      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a30      	ldr	r2, [pc, #192]	; (8005af4 <TIM_Base_SetConfig+0x120>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d013      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a2f      	ldr	r2, [pc, #188]	; (8005af8 <TIM_Base_SetConfig+0x124>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d00f      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2e      	ldr	r2, [pc, #184]	; (8005afc <TIM_Base_SetConfig+0x128>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00b      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a2d      	ldr	r2, [pc, #180]	; (8005b00 <TIM_Base_SetConfig+0x12c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d007      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a2c      	ldr	r2, [pc, #176]	; (8005b04 <TIM_Base_SetConfig+0x130>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_Base_SetConfig+0x8a>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a2b      	ldr	r2, [pc, #172]	; (8005b08 <TIM_Base_SetConfig+0x134>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d108      	bne.n	8005a70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	689a      	ldr	r2, [r3, #8]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a16      	ldr	r2, [pc, #88]	; (8005af0 <TIM_Base_SetConfig+0x11c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d00f      	beq.n	8005abc <TIM_Base_SetConfig+0xe8>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4a17      	ldr	r2, [pc, #92]	; (8005afc <TIM_Base_SetConfig+0x128>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d00b      	beq.n	8005abc <TIM_Base_SetConfig+0xe8>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a16      	ldr	r2, [pc, #88]	; (8005b00 <TIM_Base_SetConfig+0x12c>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d007      	beq.n	8005abc <TIM_Base_SetConfig+0xe8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a15      	ldr	r2, [pc, #84]	; (8005b04 <TIM_Base_SetConfig+0x130>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_Base_SetConfig+0xe8>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a14      	ldr	r2, [pc, #80]	; (8005b08 <TIM_Base_SetConfig+0x134>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d103      	bne.n	8005ac4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	691a      	ldr	r2, [r3, #16]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d105      	bne.n	8005ae2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f023 0201 	bic.w	r2, r3, #1
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	611a      	str	r2, [r3, #16]
  }
}
 8005ae2:	bf00      	nop
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40012c00 	.word	0x40012c00
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800
 8005afc:	40013400 	.word	0x40013400
 8005b00:	40014000 	.word	0x40014000
 8005b04:	40014400 	.word	0x40014400
 8005b08:	40014800 	.word	0x40014800

08005b0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b087      	sub	sp, #28
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	f023 0201 	bic.w	r2, r3, #1
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f023 0303 	bic.w	r3, r3, #3
 8005b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f023 0302 	bic.w	r3, r3, #2
 8005b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	4a2c      	ldr	r2, [pc, #176]	; (8005c18 <TIM_OC1_SetConfig+0x10c>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d00f      	beq.n	8005b8c <TIM_OC1_SetConfig+0x80>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4a2b      	ldr	r2, [pc, #172]	; (8005c1c <TIM_OC1_SetConfig+0x110>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <TIM_OC1_SetConfig+0x80>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	4a2a      	ldr	r2, [pc, #168]	; (8005c20 <TIM_OC1_SetConfig+0x114>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d007      	beq.n	8005b8c <TIM_OC1_SetConfig+0x80>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	4a29      	ldr	r2, [pc, #164]	; (8005c24 <TIM_OC1_SetConfig+0x118>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d003      	beq.n	8005b8c <TIM_OC1_SetConfig+0x80>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a28      	ldr	r2, [pc, #160]	; (8005c28 <TIM_OC1_SetConfig+0x11c>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d10c      	bne.n	8005ba6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	f023 0308 	bic.w	r3, r3, #8
 8005b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f023 0304 	bic.w	r3, r3, #4
 8005ba4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1b      	ldr	r2, [pc, #108]	; (8005c18 <TIM_OC1_SetConfig+0x10c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00f      	beq.n	8005bce <TIM_OC1_SetConfig+0xc2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1a      	ldr	r2, [pc, #104]	; (8005c1c <TIM_OC1_SetConfig+0x110>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d00b      	beq.n	8005bce <TIM_OC1_SetConfig+0xc2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a19      	ldr	r2, [pc, #100]	; (8005c20 <TIM_OC1_SetConfig+0x114>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d007      	beq.n	8005bce <TIM_OC1_SetConfig+0xc2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a18      	ldr	r2, [pc, #96]	; (8005c24 <TIM_OC1_SetConfig+0x118>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d003      	beq.n	8005bce <TIM_OC1_SetConfig+0xc2>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a17      	ldr	r2, [pc, #92]	; (8005c28 <TIM_OC1_SetConfig+0x11c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d111      	bne.n	8005bf2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685a      	ldr	r2, [r3, #4]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	697a      	ldr	r2, [r7, #20]
 8005c0a:	621a      	str	r2, [r3, #32]
}
 8005c0c:	bf00      	nop
 8005c0e:	371c      	adds	r7, #28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	40012c00 	.word	0x40012c00
 8005c1c:	40013400 	.word	0x40013400
 8005c20:	40014000 	.word	0x40014000
 8005c24:	40014400 	.word	0x40014400
 8005c28:	40014800 	.word	0x40014800

08005c2c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6a1b      	ldr	r3, [r3, #32]
 8005c40:	f023 0210 	bic.w	r2, r3, #16
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	021b      	lsls	r3, r3, #8
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	f023 0320 	bic.w	r3, r3, #32
 8005c7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a28      	ldr	r2, [pc, #160]	; (8005d2c <TIM_OC2_SetConfig+0x100>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d003      	beq.n	8005c98 <TIM_OC2_SetConfig+0x6c>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a27      	ldr	r2, [pc, #156]	; (8005d30 <TIM_OC2_SetConfig+0x104>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d10d      	bne.n	8005cb4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a1d      	ldr	r2, [pc, #116]	; (8005d2c <TIM_OC2_SetConfig+0x100>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00f      	beq.n	8005cdc <TIM_OC2_SetConfig+0xb0>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a1c      	ldr	r2, [pc, #112]	; (8005d30 <TIM_OC2_SetConfig+0x104>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <TIM_OC2_SetConfig+0xb0>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a1b      	ldr	r2, [pc, #108]	; (8005d34 <TIM_OC2_SetConfig+0x108>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d007      	beq.n	8005cdc <TIM_OC2_SetConfig+0xb0>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a1a      	ldr	r2, [pc, #104]	; (8005d38 <TIM_OC2_SetConfig+0x10c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_OC2_SetConfig+0xb0>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a19      	ldr	r2, [pc, #100]	; (8005d3c <TIM_OC2_SetConfig+0x110>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d113      	bne.n	8005d04 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	009b      	lsls	r3, r3, #2
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	40012c00 	.word	0x40012c00
 8005d30:	40013400 	.word	0x40013400
 8005d34:	40014000 	.word	0x40014000
 8005d38:	40014400 	.word	0x40014400
 8005d3c:	40014800 	.word	0x40014800

08005d40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f023 0303 	bic.w	r3, r3, #3
 8005d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	021b      	lsls	r3, r3, #8
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a27      	ldr	r2, [pc, #156]	; (8005e3c <TIM_OC3_SetConfig+0xfc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d003      	beq.n	8005daa <TIM_OC3_SetConfig+0x6a>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a26      	ldr	r2, [pc, #152]	; (8005e40 <TIM_OC3_SetConfig+0x100>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d10d      	bne.n	8005dc6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005db0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	021b      	lsls	r3, r3, #8
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	4a1c      	ldr	r2, [pc, #112]	; (8005e3c <TIM_OC3_SetConfig+0xfc>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d00f      	beq.n	8005dee <TIM_OC3_SetConfig+0xae>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4a1b      	ldr	r2, [pc, #108]	; (8005e40 <TIM_OC3_SetConfig+0x100>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d00b      	beq.n	8005dee <TIM_OC3_SetConfig+0xae>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a1a      	ldr	r2, [pc, #104]	; (8005e44 <TIM_OC3_SetConfig+0x104>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d007      	beq.n	8005dee <TIM_OC3_SetConfig+0xae>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a19      	ldr	r2, [pc, #100]	; (8005e48 <TIM_OC3_SetConfig+0x108>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d003      	beq.n	8005dee <TIM_OC3_SetConfig+0xae>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a18      	ldr	r2, [pc, #96]	; (8005e4c <TIM_OC3_SetConfig+0x10c>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d113      	bne.n	8005e16 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	011b      	lsls	r3, r3, #4
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	699b      	ldr	r3, [r3, #24]
 8005e0e:	011b      	lsls	r3, r3, #4
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68fa      	ldr	r2, [r7, #12]
 8005e20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	621a      	str	r2, [r3, #32]
}
 8005e30:	bf00      	nop
 8005e32:	371c      	adds	r7, #28
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	40012c00 	.word	0x40012c00
 8005e40:	40013400 	.word	0x40013400
 8005e44:	40014000 	.word	0x40014000
 8005e48:	40014400 	.word	0x40014400
 8005e4c:	40014800 	.word	0x40014800

08005e50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a1b      	ldr	r3, [r3, #32]
 8005e64:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	031b      	lsls	r3, r3, #12
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a28      	ldr	r2, [pc, #160]	; (8005f50 <TIM_OC4_SetConfig+0x100>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d003      	beq.n	8005ebc <TIM_OC4_SetConfig+0x6c>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a27      	ldr	r2, [pc, #156]	; (8005f54 <TIM_OC4_SetConfig+0x104>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d10d      	bne.n	8005ed8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	031b      	lsls	r3, r3, #12
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ed6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a1d      	ldr	r2, [pc, #116]	; (8005f50 <TIM_OC4_SetConfig+0x100>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d00f      	beq.n	8005f00 <TIM_OC4_SetConfig+0xb0>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a1c      	ldr	r2, [pc, #112]	; (8005f54 <TIM_OC4_SetConfig+0x104>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <TIM_OC4_SetConfig+0xb0>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	4a1b      	ldr	r2, [pc, #108]	; (8005f58 <TIM_OC4_SetConfig+0x108>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d007      	beq.n	8005f00 <TIM_OC4_SetConfig+0xb0>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	4a1a      	ldr	r2, [pc, #104]	; (8005f5c <TIM_OC4_SetConfig+0x10c>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d003      	beq.n	8005f00 <TIM_OC4_SetConfig+0xb0>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a19      	ldr	r2, [pc, #100]	; (8005f60 <TIM_OC4_SetConfig+0x110>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d113      	bne.n	8005f28 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f06:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f0e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	019b      	lsls	r3, r3, #6
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	019b      	lsls	r3, r3, #6
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	693a      	ldr	r2, [r7, #16]
 8005f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40012c00 	.word	0x40012c00
 8005f54:	40013400 	.word	0x40013400
 8005f58:	40014000 	.word	0x40014000
 8005f5c:	40014400 	.word	0x40014400
 8005f60:	40014800 	.word	0x40014800

08005f64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fa8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	041b      	lsls	r3, r3, #16
 8005fb0:	693a      	ldr	r2, [r7, #16]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a17      	ldr	r2, [pc, #92]	; (8006018 <TIM_OC5_SetConfig+0xb4>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00f      	beq.n	8005fde <TIM_OC5_SetConfig+0x7a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a16      	ldr	r2, [pc, #88]	; (800601c <TIM_OC5_SetConfig+0xb8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00b      	beq.n	8005fde <TIM_OC5_SetConfig+0x7a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a15      	ldr	r2, [pc, #84]	; (8006020 <TIM_OC5_SetConfig+0xbc>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d007      	beq.n	8005fde <TIM_OC5_SetConfig+0x7a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a14      	ldr	r2, [pc, #80]	; (8006024 <TIM_OC5_SetConfig+0xc0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d003      	beq.n	8005fde <TIM_OC5_SetConfig+0x7a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a13      	ldr	r2, [pc, #76]	; (8006028 <TIM_OC5_SetConfig+0xc4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d109      	bne.n	8005ff2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fe4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	021b      	lsls	r3, r3, #8
 8005fec:	697a      	ldr	r2, [r7, #20]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	697a      	ldr	r2, [r7, #20]
 8005ff6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	621a      	str	r2, [r3, #32]
}
 800600c:	bf00      	nop
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	40012c00 	.word	0x40012c00
 800601c:	40013400 	.word	0x40013400
 8006020:	40014000 	.word	0x40014000
 8006024:	40014400 	.word	0x40014400
 8006028:	40014800 	.word	0x40014800

0800602c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6a1b      	ldr	r3, [r3, #32]
 800603a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	685b      	ldr	r3, [r3, #4]
 800604c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800605a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800605e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	021b      	lsls	r3, r3, #8
 8006066:	68fa      	ldr	r2, [r7, #12]
 8006068:	4313      	orrs	r3, r2
 800606a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006072:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	051b      	lsls	r3, r3, #20
 800607a:	693a      	ldr	r2, [r7, #16]
 800607c:	4313      	orrs	r3, r2
 800607e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	4a18      	ldr	r2, [pc, #96]	; (80060e4 <TIM_OC6_SetConfig+0xb8>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00f      	beq.n	80060a8 <TIM_OC6_SetConfig+0x7c>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4a17      	ldr	r2, [pc, #92]	; (80060e8 <TIM_OC6_SetConfig+0xbc>)
 800608c:	4293      	cmp	r3, r2
 800608e:	d00b      	beq.n	80060a8 <TIM_OC6_SetConfig+0x7c>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a16      	ldr	r2, [pc, #88]	; (80060ec <TIM_OC6_SetConfig+0xc0>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d007      	beq.n	80060a8 <TIM_OC6_SetConfig+0x7c>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	4a15      	ldr	r2, [pc, #84]	; (80060f0 <TIM_OC6_SetConfig+0xc4>)
 800609c:	4293      	cmp	r3, r2
 800609e:	d003      	beq.n	80060a8 <TIM_OC6_SetConfig+0x7c>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a14      	ldr	r2, [pc, #80]	; (80060f4 <TIM_OC6_SetConfig+0xc8>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d109      	bne.n	80060bc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060ae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	029b      	lsls	r3, r3, #10
 80060b6:	697a      	ldr	r2, [r7, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	621a      	str	r2, [r3, #32]
}
 80060d6:	bf00      	nop
 80060d8:	371c      	adds	r7, #28
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40012c00 	.word	0x40012c00
 80060e8:	40013400 	.word	0x40013400
 80060ec:	40014000 	.word	0x40014000
 80060f0:	40014400 	.word	0x40014400
 80060f4:	40014800 	.word	0x40014800

080060f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6a1b      	ldr	r3, [r3, #32]
 8006108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	6a1b      	ldr	r3, [r3, #32]
 800610e:	f023 0201 	bic.w	r2, r3, #1
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	011b      	lsls	r3, r3, #4
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	4313      	orrs	r3, r2
 800612c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f023 030a 	bic.w	r3, r3, #10
 8006134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006136:	697a      	ldr	r2, [r7, #20]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	4313      	orrs	r3, r2
 800613c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	693a      	ldr	r2, [r7, #16]
 8006142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	621a      	str	r2, [r3, #32]
}
 800614a:	bf00      	nop
 800614c:	371c      	adds	r7, #28
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr

08006156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006156:	b480      	push	{r7}
 8006158:	b087      	sub	sp, #28
 800615a:	af00      	add	r7, sp, #0
 800615c:	60f8      	str	r0, [r7, #12]
 800615e:	60b9      	str	r1, [r7, #8]
 8006160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	f023 0210 	bic.w	r2, r3, #16
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	699b      	ldr	r3, [r3, #24]
 8006178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006180:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	031b      	lsls	r3, r3, #12
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4313      	orrs	r3, r2
 800618a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006192:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	011b      	lsls	r3, r3, #4
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	621a      	str	r2, [r3, #32]
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr

080061b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80061b6:	b480      	push	{r7}
 80061b8:	b085      	sub	sp, #20
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80061cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f043 0307 	orr.w	r3, r3, #7
 80061dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	609a      	str	r2, [r3, #8]
}
 80061e4:	bf00      	nop
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	60f8      	str	r0, [r7, #12]
 80061f8:	60b9      	str	r1, [r7, #8]
 80061fa:	607a      	str	r2, [r7, #4]
 80061fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800620a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	021a      	lsls	r2, r3, #8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	431a      	orrs	r2, r3
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	697a      	ldr	r2, [r7, #20]
 800621a:	4313      	orrs	r3, r2
 800621c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	609a      	str	r2, [r3, #8]
}
 8006224:	bf00      	nop
 8006226:	371c      	adds	r7, #28
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006230:	b480      	push	{r7}
 8006232:	b087      	sub	sp, #28
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	f003 031f 	and.w	r3, r3, #31
 8006242:	2201      	movs	r2, #1
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6a1a      	ldr	r2, [r3, #32]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	43db      	mvns	r3, r3
 8006252:	401a      	ands	r2, r3
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6a1a      	ldr	r2, [r3, #32]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	fa01 f303 	lsl.w	r3, r1, r3
 8006268:	431a      	orrs	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	621a      	str	r2, [r3, #32]
}
 800626e:	bf00      	nop
 8006270:	371c      	adds	r7, #28
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
	...

0800627c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628c:	2b01      	cmp	r3, #1
 800628e:	d101      	bne.n	8006294 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006290:	2302      	movs	r3, #2
 8006292:	e065      	b.n	8006360 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2202      	movs	r2, #2
 80062a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685b      	ldr	r3, [r3, #4]
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a2c      	ldr	r2, [pc, #176]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d004      	beq.n	80062c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a2b      	ldr	r2, [pc, #172]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d108      	bne.n	80062da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80062ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80062e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	68fa      	ldr	r2, [r7, #12]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a1b      	ldr	r2, [pc, #108]	; (800636c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d018      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630a:	d013      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a18      	ldr	r2, [pc, #96]	; (8006374 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d00e      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a17      	ldr	r2, [pc, #92]	; (8006378 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d009      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a12      	ldr	r2, [pc, #72]	; (8006370 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d004      	beq.n	8006334 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a13      	ldr	r2, [pc, #76]	; (800637c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d10c      	bne.n	800634e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800633a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	4313      	orrs	r3, r2
 8006344:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68ba      	ldr	r2, [r7, #8]
 800634c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2201      	movs	r2, #1
 8006352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3714      	adds	r7, #20
 8006364:	46bd      	mov	sp, r7
 8006366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636a:	4770      	bx	lr
 800636c:	40012c00 	.word	0x40012c00
 8006370:	40013400 	.word	0x40013400
 8006374:	40000400 	.word	0x40000400
 8006378:	40000800 	.word	0x40000800
 800637c:	40014000 	.word	0x40014000

08006380 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006380:	b480      	push	{r7}
 8006382:	b085      	sub	sp, #20
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006394:	2b01      	cmp	r3, #1
 8006396:	d101      	bne.n	800639c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006398:	2302      	movs	r3, #2
 800639a:	e073      	b.n	8006484 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	691b      	ldr	r3, [r3, #16]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	041b      	lsls	r3, r3, #16
 8006412:	4313      	orrs	r3, r2
 8006414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	4313      	orrs	r3, r2
 8006422:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a19      	ldr	r2, [pc, #100]	; (8006490 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800642a:	4293      	cmp	r3, r2
 800642c:	d004      	beq.n	8006438 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a18      	ldr	r2, [pc, #96]	; (8006494 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d11c      	bne.n	8006472 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	051b      	lsls	r3, r3, #20
 8006444:	4313      	orrs	r3, r2
 8006446:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	6a1b      	ldr	r3, [r3, #32]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006482:	2300      	movs	r3, #0
}
 8006484:	4618      	mov	r0, r3
 8006486:	3714      	adds	r7, #20
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr
 8006490:	40012c00 	.word	0x40012c00
 8006494:	40013400 	.word	0x40013400

08006498 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <_ZdlPvj>:
 8006524:	f000 b978 	b.w	8006818 <_ZdlPv>

08006528 <_ZNSaIcEC1Ev>:
 8006528:	4770      	bx	lr

0800652a <_ZNSaIcED1Ev>:
 800652a:	4770      	bx	lr

0800652c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800652c:	b10a      	cbz	r2, 8006532 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800652e:	f000 bd32 	b.w	8006f96 <memcpy>
 8006532:	4770      	bx	lr

08006534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8006534:	b508      	push	{r3, lr}
 8006536:	680b      	ldr	r3, [r1, #0]
 8006538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800653c:	d302      	bcc.n	8006544 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800653e:	480d      	ldr	r0, [pc, #52]	; (8006574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8006540:	f000 f983 	bl	800684a <_ZSt20__throw_length_errorPKc>
 8006544:	4293      	cmp	r3, r2
 8006546:	d90b      	bls.n	8006560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006548:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800654c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8006550:	d206      	bcs.n	8006560 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8006552:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8006556:	bf2a      	itet	cs
 8006558:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800655c:	6008      	strcc	r0, [r1, #0]
 800655e:	600b      	strcs	r3, [r1, #0]
 8006560:	6808      	ldr	r0, [r1, #0]
 8006562:	3001      	adds	r0, #1
 8006564:	d501      	bpl.n	800656a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8006566:	f000 f96a 	bl	800683e <_ZSt17__throw_bad_allocv>
 800656a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800656e:	f000 b955 	b.w	800681c <_Znwj>
 8006572:	bf00      	nop
 8006574:	08007928 	.word	0x08007928

08006578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8006578:	f850 3b08 	ldr.w	r3, [r0], #8
 800657c:	4283      	cmp	r3, r0
 800657e:	d002      	beq.n	8006586 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8006580:	4618      	mov	r0, r3
 8006582:	f000 b949 	b.w	8006818 <_ZdlPv>
 8006586:	4770      	bx	lr

08006588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8006588:	2a01      	cmp	r2, #1
 800658a:	b410      	push	{r4}
 800658c:	d104      	bne.n	8006598 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800658e:	780a      	ldrb	r2, [r1, #0]
 8006590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006594:	7002      	strb	r2, [r0, #0]
 8006596:	4770      	bx	lr
 8006598:	f85d 4b04 	ldr.w	r4, [sp], #4
 800659c:	f7ff bfc6 	b.w	800652c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080065a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80065a0:	b508      	push	{r3, lr}
 80065a2:	1a52      	subs	r2, r2, r1
 80065a4:	f7ff fff0 	bl	8006588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80065a8:	bd08      	pop	{r3, pc}

080065aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80065aa:	b508      	push	{r3, lr}
 80065ac:	1a52      	subs	r2, r2, r1
 80065ae:	f7ff ffeb 	bl	8006588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80065b2:	bd08      	pop	{r3, pc}

080065b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80065b4:	4288      	cmp	r0, r1
 80065b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065b8:	4604      	mov	r4, r0
 80065ba:	460e      	mov	r6, r1
 80065bc:	d01e      	beq.n	80065fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 80065be:	4603      	mov	r3, r0
 80065c0:	684d      	ldr	r5, [r1, #4]
 80065c2:	f853 2b08 	ldr.w	r2, [r3], #8
 80065c6:	429a      	cmp	r2, r3
 80065c8:	bf14      	ite	ne
 80065ca:	6882      	ldrne	r2, [r0, #8]
 80065cc:	220f      	moveq	r2, #15
 80065ce:	42aa      	cmp	r2, r5
 80065d0:	d20a      	bcs.n	80065e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 80065d2:	a901      	add	r1, sp, #4
 80065d4:	9501      	str	r5, [sp, #4]
 80065d6:	f7ff ffad 	bl	8006534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80065da:	4607      	mov	r7, r0
 80065dc:	4620      	mov	r0, r4
 80065de:	f7ff ffcb 	bl	8006578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80065e2:	9b01      	ldr	r3, [sp, #4]
 80065e4:	6027      	str	r7, [r4, #0]
 80065e6:	60a3      	str	r3, [r4, #8]
 80065e8:	b125      	cbz	r5, 80065f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 80065ea:	6831      	ldr	r1, [r6, #0]
 80065ec:	6820      	ldr	r0, [r4, #0]
 80065ee:	462a      	mov	r2, r5
 80065f0:	f7ff ffca 	bl	8006588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	6065      	str	r5, [r4, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	555a      	strb	r2, [r3, r5]
 80065fc:	b003      	add	sp, #12
 80065fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8006600:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8006604:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006606:	461f      	mov	r7, r3
 8006608:	6843      	ldr	r3, [r0, #4]
 800660a:	eb01 0802 	add.w	r8, r1, r2
 800660e:	1ab2      	subs	r2, r6, r2
 8006610:	441a      	add	r2, r3
 8006612:	eba3 0908 	sub.w	r9, r3, r8
 8006616:	4603      	mov	r3, r0
 8006618:	9201      	str	r2, [sp, #4]
 800661a:	f853 2b08 	ldr.w	r2, [r3], #8
 800661e:	429a      	cmp	r2, r3
 8006620:	bf18      	it	ne
 8006622:	6882      	ldrne	r2, [r0, #8]
 8006624:	460d      	mov	r5, r1
 8006626:	bf08      	it	eq
 8006628:	220f      	moveq	r2, #15
 800662a:	a901      	add	r1, sp, #4
 800662c:	4604      	mov	r4, r0
 800662e:	f7ff ff81 	bl	8006534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006632:	4682      	mov	sl, r0
 8006634:	b11d      	cbz	r5, 800663e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8006636:	6821      	ldr	r1, [r4, #0]
 8006638:	462a      	mov	r2, r5
 800663a:	f7ff ffa5 	bl	8006588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800663e:	b137      	cbz	r7, 800664e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8006640:	b12e      	cbz	r6, 800664e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8006642:	4632      	mov	r2, r6
 8006644:	4639      	mov	r1, r7
 8006646:	eb0a 0005 	add.w	r0, sl, r5
 800664a:	f7ff ff9d 	bl	8006588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800664e:	f1b9 0f00 	cmp.w	r9, #0
 8006652:	d007      	beq.n	8006664 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8006654:	6821      	ldr	r1, [r4, #0]
 8006656:	4435      	add	r5, r6
 8006658:	464a      	mov	r2, r9
 800665a:	4441      	add	r1, r8
 800665c:	eb0a 0005 	add.w	r0, sl, r5
 8006660:	f7ff ff92 	bl	8006588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8006664:	4620      	mov	r0, r4
 8006666:	f7ff ff87 	bl	8006578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800666a:	9b01      	ldr	r3, [sp, #4]
 800666c:	f8c4 a000 	str.w	sl, [r4]
 8006670:	60a3      	str	r3, [r4, #8]
 8006672:	b002      	add	sp, #8
 8006674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006678 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8006678:	f100 0208 	add.w	r2, r0, #8
 800667c:	6002      	str	r2, [r0, #0]
 800667e:	2200      	movs	r2, #0
 8006680:	6042      	str	r2, [r0, #4]
 8006682:	7202      	strb	r2, [r0, #8]
 8006684:	4770      	bx	lr

08006686 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8006686:	b510      	push	{r4, lr}
 8006688:	4604      	mov	r4, r0
 800668a:	f7ff ff75 	bl	8006578 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800668e:	4620      	mov	r0, r4
 8006690:	bd10      	pop	{r4, pc}

08006692 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8006692:	b510      	push	{r4, lr}
 8006694:	4604      	mov	r4, r0
 8006696:	f7ff ff8d 	bl	80065b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800669a:	4620      	mov	r0, r4
 800669c:	bd10      	pop	{r4, pc}

0800669e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800669e:	b570      	push	{r4, r5, r6, lr}
 80066a0:	460c      	mov	r4, r1
 80066a2:	f851 3b08 	ldr.w	r3, [r1], #8
 80066a6:	4299      	cmp	r1, r3
 80066a8:	4605      	mov	r5, r0
 80066aa:	6800      	ldr	r0, [r0, #0]
 80066ac:	d110      	bne.n	80066d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x32>
 80066ae:	42a5      	cmp	r5, r4
 80066b0:	d008      	beq.n	80066c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 80066b2:	6862      	ldr	r2, [r4, #4]
 80066b4:	b10a      	cbz	r2, 80066ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c>
 80066b6:	f7ff ff67 	bl	8006588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80066ba:	6863      	ldr	r3, [r4, #4]
 80066bc:	682a      	ldr	r2, [r5, #0]
 80066be:	606b      	str	r3, [r5, #4]
 80066c0:	2100      	movs	r1, #0
 80066c2:	54d1      	strb	r1, [r2, r3]
 80066c4:	6822      	ldr	r2, [r4, #0]
 80066c6:	2300      	movs	r3, #0
 80066c8:	6063      	str	r3, [r4, #4]
 80066ca:	7013      	strb	r3, [r2, #0]
 80066cc:	4628      	mov	r0, r5
 80066ce:	bd70      	pop	{r4, r5, r6, pc}
 80066d0:	602b      	str	r3, [r5, #0]
 80066d2:	f105 0608 	add.w	r6, r5, #8
 80066d6:	6863      	ldr	r3, [r4, #4]
 80066d8:	606b      	str	r3, [r5, #4]
 80066da:	42b0      	cmp	r0, r6
 80066dc:	68a3      	ldr	r3, [r4, #8]
 80066de:	bf18      	it	ne
 80066e0:	68aa      	ldrne	r2, [r5, #8]
 80066e2:	60ab      	str	r3, [r5, #8]
 80066e4:	bf08      	it	eq
 80066e6:	2000      	moveq	r0, #0
 80066e8:	b110      	cbz	r0, 80066f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x52>
 80066ea:	6020      	str	r0, [r4, #0]
 80066ec:	60a2      	str	r2, [r4, #8]
 80066ee:	e7e9      	b.n	80066c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 80066f0:	6021      	str	r1, [r4, #0]
 80066f2:	e7e7      	b.n	80066c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>

080066f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 80066f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066f6:	4604      	mov	r4, r0
 80066f8:	4623      	mov	r3, r4
 80066fa:	6840      	ldr	r0, [r0, #4]
 80066fc:	f853 6b08 	ldr.w	r6, [r3], #8
 8006700:	429e      	cmp	r6, r3
 8006702:	bf18      	it	ne
 8006704:	68a3      	ldrne	r3, [r4, #8]
 8006706:	eb00 0502 	add.w	r5, r0, r2
 800670a:	bf08      	it	eq
 800670c:	230f      	moveq	r3, #15
 800670e:	429d      	cmp	r5, r3
 8006710:	d80a      	bhi.n	8006728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8006712:	b112      	cbz	r2, 800671a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8006714:	4430      	add	r0, r6
 8006716:	f7ff ff37 	bl	8006588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800671a:	6823      	ldr	r3, [r4, #0]
 800671c:	6065      	str	r5, [r4, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	4620      	mov	r0, r4
 8006722:	555a      	strb	r2, [r3, r5]
 8006724:	b002      	add	sp, #8
 8006726:	bd70      	pop	{r4, r5, r6, pc}
 8006728:	9200      	str	r2, [sp, #0]
 800672a:	460b      	mov	r3, r1
 800672c:	2200      	movs	r2, #0
 800672e:	4601      	mov	r1, r0
 8006730:	4620      	mov	r0, r4
 8006732:	f7ff ff65 	bl	8006600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8006736:	e7f0      	b.n	800671a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08006738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8006738:	b508      	push	{r3, lr}
 800673a:	e9d1 1200 	ldrd	r1, r2, [r1]
 800673e:	f7ff ffd9 	bl	80066f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8006742:	bd08      	pop	{r3, pc}

08006744 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8006744:	b508      	push	{r3, lr}
 8006746:	f7ff fff7 	bl	8006738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800674a:	bd08      	pop	{r3, pc}

0800674c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800674c:	6800      	ldr	r0, [r0, #0]
 800674e:	4770      	bx	lr

08006750 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8006750:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006752:	4604      	mov	r4, r0
 8006754:	4616      	mov	r6, r2
 8006756:	460d      	mov	r5, r1
 8006758:	b919      	cbnz	r1, 8006762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800675a:	b112      	cbz	r2, 8006762 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800675c:	480d      	ldr	r0, [pc, #52]	; (8006794 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800675e:	f000 f871 	bl	8006844 <_ZSt19__throw_logic_errorPKc>
 8006762:	1b73      	subs	r3, r6, r5
 8006764:	2b0f      	cmp	r3, #15
 8006766:	9301      	str	r3, [sp, #4]
 8006768:	d907      	bls.n	800677a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800676a:	2200      	movs	r2, #0
 800676c:	a901      	add	r1, sp, #4
 800676e:	4620      	mov	r0, r4
 8006770:	f7ff fee0 	bl	8006534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8006774:	9b01      	ldr	r3, [sp, #4]
 8006776:	6020      	str	r0, [r4, #0]
 8006778:	60a3      	str	r3, [r4, #8]
 800677a:	4632      	mov	r2, r6
 800677c:	4629      	mov	r1, r5
 800677e:	6820      	ldr	r0, [r4, #0]
 8006780:	f7ff ff0e 	bl	80065a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8006784:	9b01      	ldr	r3, [sp, #4]
 8006786:	6822      	ldr	r2, [r4, #0]
 8006788:	6063      	str	r3, [r4, #4]
 800678a:	2100      	movs	r1, #0
 800678c:	54d1      	strb	r1, [r2, r3]
 800678e:	b002      	add	sp, #8
 8006790:	bd70      	pop	{r4, r5, r6, pc}
 8006792:	bf00      	nop
 8006794:	08007940 	.word	0x08007940

08006798 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	f100 0308 	add.w	r3, r0, #8
 800679e:	6003      	str	r3, [r0, #0]
 80067a0:	e9d1 5200 	ldrd	r5, r2, [r1]
 80067a4:	4604      	mov	r4, r0
 80067a6:	f04f 0300 	mov.w	r3, #0
 80067aa:	442a      	add	r2, r5
 80067ac:	4629      	mov	r1, r5
 80067ae:	f7ff ffcf 	bl	8006750 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80067b2:	4620      	mov	r0, r4
 80067b4:	bd38      	pop	{r3, r4, r5, pc}
	...

080067b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80067b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067ba:	4604      	mov	r4, r0
 80067bc:	4616      	mov	r6, r2
 80067be:	460d      	mov	r5, r1
 80067c0:	b919      	cbnz	r1, 80067ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80067c2:	b112      	cbz	r2, 80067ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80067c4:	480d      	ldr	r0, [pc, #52]	; (80067fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80067c6:	f000 f83d 	bl	8006844 <_ZSt19__throw_logic_errorPKc>
 80067ca:	1b73      	subs	r3, r6, r5
 80067cc:	2b0f      	cmp	r3, #15
 80067ce:	9301      	str	r3, [sp, #4]
 80067d0:	d907      	bls.n	80067e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80067d2:	2200      	movs	r2, #0
 80067d4:	a901      	add	r1, sp, #4
 80067d6:	4620      	mov	r0, r4
 80067d8:	f7ff feac 	bl	8006534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80067dc:	9b01      	ldr	r3, [sp, #4]
 80067de:	6020      	str	r0, [r4, #0]
 80067e0:	60a3      	str	r3, [r4, #8]
 80067e2:	4632      	mov	r2, r6
 80067e4:	4629      	mov	r1, r5
 80067e6:	6820      	ldr	r0, [r4, #0]
 80067e8:	f7ff fedf 	bl	80065aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 80067ec:	9b01      	ldr	r3, [sp, #4]
 80067ee:	6822      	ldr	r2, [r4, #0]
 80067f0:	6063      	str	r3, [r4, #4]
 80067f2:	2100      	movs	r1, #0
 80067f4:	54d1      	strb	r1, [r2, r3]
 80067f6:	b002      	add	sp, #8
 80067f8:	bd70      	pop	{r4, r5, r6, pc}
 80067fa:	bf00      	nop
 80067fc:	08007940 	.word	0x08007940

08006800 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 8006800:	b510      	push	{r4, lr}
 8006802:	f100 0308 	add.w	r3, r0, #8
 8006806:	4604      	mov	r4, r0
 8006808:	6003      	str	r3, [r0, #0]
 800680a:	440a      	add	r2, r1
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	f7ff ffd2 	bl	80067b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8006814:	4620      	mov	r0, r4
 8006816:	bd10      	pop	{r4, pc}

08006818 <_ZdlPv>:
 8006818:	f000 b832 	b.w	8006880 <free>

0800681c <_Znwj>:
 800681c:	2801      	cmp	r0, #1
 800681e:	bf38      	it	cc
 8006820:	2001      	movcc	r0, #1
 8006822:	b510      	push	{r4, lr}
 8006824:	4604      	mov	r4, r0
 8006826:	4620      	mov	r0, r4
 8006828:	f000 f822 	bl	8006870 <malloc>
 800682c:	b100      	cbz	r0, 8006830 <_Znwj+0x14>
 800682e:	bd10      	pop	{r4, pc}
 8006830:	f000 f80e 	bl	8006850 <_ZSt15get_new_handlerv>
 8006834:	b908      	cbnz	r0, 800683a <_Znwj+0x1e>
 8006836:	f000 f813 	bl	8006860 <abort>
 800683a:	4780      	blx	r0
 800683c:	e7f3      	b.n	8006826 <_Znwj+0xa>

0800683e <_ZSt17__throw_bad_allocv>:
 800683e:	b508      	push	{r3, lr}
 8006840:	f000 f80e 	bl	8006860 <abort>

08006844 <_ZSt19__throw_logic_errorPKc>:
 8006844:	b508      	push	{r3, lr}
 8006846:	f000 f80b 	bl	8006860 <abort>

0800684a <_ZSt20__throw_length_errorPKc>:
 800684a:	b508      	push	{r3, lr}
 800684c:	f000 f808 	bl	8006860 <abort>

08006850 <_ZSt15get_new_handlerv>:
 8006850:	4b02      	ldr	r3, [pc, #8]	; (800685c <_ZSt15get_new_handlerv+0xc>)
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	f3bf 8f5b 	dmb	ish
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	200006f4 	.word	0x200006f4

08006860 <abort>:
 8006860:	b508      	push	{r3, lr}
 8006862:	2006      	movs	r0, #6
 8006864:	f000 faf8 	bl	8006e58 <raise>
 8006868:	2001      	movs	r0, #1
 800686a:	f7fc f98b 	bl	8002b84 <_exit>
	...

08006870 <malloc>:
 8006870:	4b02      	ldr	r3, [pc, #8]	; (800687c <malloc+0xc>)
 8006872:	4601      	mov	r1, r0
 8006874:	6818      	ldr	r0, [r3, #0]
 8006876:	f000 b82b 	b.w	80068d0 <_malloc_r>
 800687a:	bf00      	nop
 800687c:	20000064 	.word	0x20000064

08006880 <free>:
 8006880:	4b02      	ldr	r3, [pc, #8]	; (800688c <free+0xc>)
 8006882:	4601      	mov	r1, r0
 8006884:	6818      	ldr	r0, [r3, #0]
 8006886:	f000 bb95 	b.w	8006fb4 <_free_r>
 800688a:	bf00      	nop
 800688c:	20000064 	.word	0x20000064

08006890 <sbrk_aligned>:
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	4e0e      	ldr	r6, [pc, #56]	; (80068cc <sbrk_aligned+0x3c>)
 8006894:	460c      	mov	r4, r1
 8006896:	6831      	ldr	r1, [r6, #0]
 8006898:	4605      	mov	r5, r0
 800689a:	b911      	cbnz	r1, 80068a2 <sbrk_aligned+0x12>
 800689c:	f000 fb2c 	bl	8006ef8 <_sbrk_r>
 80068a0:	6030      	str	r0, [r6, #0]
 80068a2:	4621      	mov	r1, r4
 80068a4:	4628      	mov	r0, r5
 80068a6:	f000 fb27 	bl	8006ef8 <_sbrk_r>
 80068aa:	1c43      	adds	r3, r0, #1
 80068ac:	d00a      	beq.n	80068c4 <sbrk_aligned+0x34>
 80068ae:	1cc4      	adds	r4, r0, #3
 80068b0:	f024 0403 	bic.w	r4, r4, #3
 80068b4:	42a0      	cmp	r0, r4
 80068b6:	d007      	beq.n	80068c8 <sbrk_aligned+0x38>
 80068b8:	1a21      	subs	r1, r4, r0
 80068ba:	4628      	mov	r0, r5
 80068bc:	f000 fb1c 	bl	8006ef8 <_sbrk_r>
 80068c0:	3001      	adds	r0, #1
 80068c2:	d101      	bne.n	80068c8 <sbrk_aligned+0x38>
 80068c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80068c8:	4620      	mov	r0, r4
 80068ca:	bd70      	pop	{r4, r5, r6, pc}
 80068cc:	200006fc 	.word	0x200006fc

080068d0 <_malloc_r>:
 80068d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068d4:	1ccd      	adds	r5, r1, #3
 80068d6:	f025 0503 	bic.w	r5, r5, #3
 80068da:	3508      	adds	r5, #8
 80068dc:	2d0c      	cmp	r5, #12
 80068de:	bf38      	it	cc
 80068e0:	250c      	movcc	r5, #12
 80068e2:	2d00      	cmp	r5, #0
 80068e4:	4607      	mov	r7, r0
 80068e6:	db01      	blt.n	80068ec <_malloc_r+0x1c>
 80068e8:	42a9      	cmp	r1, r5
 80068ea:	d905      	bls.n	80068f8 <_malloc_r+0x28>
 80068ec:	230c      	movs	r3, #12
 80068ee:	603b      	str	r3, [r7, #0]
 80068f0:	2600      	movs	r6, #0
 80068f2:	4630      	mov	r0, r6
 80068f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80069cc <_malloc_r+0xfc>
 80068fc:	f000 f868 	bl	80069d0 <__malloc_lock>
 8006900:	f8d8 3000 	ldr.w	r3, [r8]
 8006904:	461c      	mov	r4, r3
 8006906:	bb5c      	cbnz	r4, 8006960 <_malloc_r+0x90>
 8006908:	4629      	mov	r1, r5
 800690a:	4638      	mov	r0, r7
 800690c:	f7ff ffc0 	bl	8006890 <sbrk_aligned>
 8006910:	1c43      	adds	r3, r0, #1
 8006912:	4604      	mov	r4, r0
 8006914:	d155      	bne.n	80069c2 <_malloc_r+0xf2>
 8006916:	f8d8 4000 	ldr.w	r4, [r8]
 800691a:	4626      	mov	r6, r4
 800691c:	2e00      	cmp	r6, #0
 800691e:	d145      	bne.n	80069ac <_malloc_r+0xdc>
 8006920:	2c00      	cmp	r4, #0
 8006922:	d048      	beq.n	80069b6 <_malloc_r+0xe6>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	4631      	mov	r1, r6
 8006928:	4638      	mov	r0, r7
 800692a:	eb04 0903 	add.w	r9, r4, r3
 800692e:	f000 fae3 	bl	8006ef8 <_sbrk_r>
 8006932:	4581      	cmp	r9, r0
 8006934:	d13f      	bne.n	80069b6 <_malloc_r+0xe6>
 8006936:	6821      	ldr	r1, [r4, #0]
 8006938:	1a6d      	subs	r5, r5, r1
 800693a:	4629      	mov	r1, r5
 800693c:	4638      	mov	r0, r7
 800693e:	f7ff ffa7 	bl	8006890 <sbrk_aligned>
 8006942:	3001      	adds	r0, #1
 8006944:	d037      	beq.n	80069b6 <_malloc_r+0xe6>
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	442b      	add	r3, r5
 800694a:	6023      	str	r3, [r4, #0]
 800694c:	f8d8 3000 	ldr.w	r3, [r8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d038      	beq.n	80069c6 <_malloc_r+0xf6>
 8006954:	685a      	ldr	r2, [r3, #4]
 8006956:	42a2      	cmp	r2, r4
 8006958:	d12b      	bne.n	80069b2 <_malloc_r+0xe2>
 800695a:	2200      	movs	r2, #0
 800695c:	605a      	str	r2, [r3, #4]
 800695e:	e00f      	b.n	8006980 <_malloc_r+0xb0>
 8006960:	6822      	ldr	r2, [r4, #0]
 8006962:	1b52      	subs	r2, r2, r5
 8006964:	d41f      	bmi.n	80069a6 <_malloc_r+0xd6>
 8006966:	2a0b      	cmp	r2, #11
 8006968:	d917      	bls.n	800699a <_malloc_r+0xca>
 800696a:	1961      	adds	r1, r4, r5
 800696c:	42a3      	cmp	r3, r4
 800696e:	6025      	str	r5, [r4, #0]
 8006970:	bf18      	it	ne
 8006972:	6059      	strne	r1, [r3, #4]
 8006974:	6863      	ldr	r3, [r4, #4]
 8006976:	bf08      	it	eq
 8006978:	f8c8 1000 	streq.w	r1, [r8]
 800697c:	5162      	str	r2, [r4, r5]
 800697e:	604b      	str	r3, [r1, #4]
 8006980:	4638      	mov	r0, r7
 8006982:	f104 060b 	add.w	r6, r4, #11
 8006986:	f000 f829 	bl	80069dc <__malloc_unlock>
 800698a:	f026 0607 	bic.w	r6, r6, #7
 800698e:	1d23      	adds	r3, r4, #4
 8006990:	1af2      	subs	r2, r6, r3
 8006992:	d0ae      	beq.n	80068f2 <_malloc_r+0x22>
 8006994:	1b9b      	subs	r3, r3, r6
 8006996:	50a3      	str	r3, [r4, r2]
 8006998:	e7ab      	b.n	80068f2 <_malloc_r+0x22>
 800699a:	42a3      	cmp	r3, r4
 800699c:	6862      	ldr	r2, [r4, #4]
 800699e:	d1dd      	bne.n	800695c <_malloc_r+0x8c>
 80069a0:	f8c8 2000 	str.w	r2, [r8]
 80069a4:	e7ec      	b.n	8006980 <_malloc_r+0xb0>
 80069a6:	4623      	mov	r3, r4
 80069a8:	6864      	ldr	r4, [r4, #4]
 80069aa:	e7ac      	b.n	8006906 <_malloc_r+0x36>
 80069ac:	4634      	mov	r4, r6
 80069ae:	6876      	ldr	r6, [r6, #4]
 80069b0:	e7b4      	b.n	800691c <_malloc_r+0x4c>
 80069b2:	4613      	mov	r3, r2
 80069b4:	e7cc      	b.n	8006950 <_malloc_r+0x80>
 80069b6:	230c      	movs	r3, #12
 80069b8:	603b      	str	r3, [r7, #0]
 80069ba:	4638      	mov	r0, r7
 80069bc:	f000 f80e 	bl	80069dc <__malloc_unlock>
 80069c0:	e797      	b.n	80068f2 <_malloc_r+0x22>
 80069c2:	6025      	str	r5, [r4, #0]
 80069c4:	e7dc      	b.n	8006980 <_malloc_r+0xb0>
 80069c6:	605b      	str	r3, [r3, #4]
 80069c8:	deff      	udf	#255	; 0xff
 80069ca:	bf00      	nop
 80069cc:	200006f8 	.word	0x200006f8

080069d0 <__malloc_lock>:
 80069d0:	4801      	ldr	r0, [pc, #4]	; (80069d8 <__malloc_lock+0x8>)
 80069d2:	f000 bade 	b.w	8006f92 <__retarget_lock_acquire_recursive>
 80069d6:	bf00      	nop
 80069d8:	20000840 	.word	0x20000840

080069dc <__malloc_unlock>:
 80069dc:	4801      	ldr	r0, [pc, #4]	; (80069e4 <__malloc_unlock+0x8>)
 80069de:	f000 bad9 	b.w	8006f94 <__retarget_lock_release_recursive>
 80069e2:	bf00      	nop
 80069e4:	20000840 	.word	0x20000840

080069e8 <std>:
 80069e8:	2300      	movs	r3, #0
 80069ea:	b510      	push	{r4, lr}
 80069ec:	4604      	mov	r4, r0
 80069ee:	e9c0 3300 	strd	r3, r3, [r0]
 80069f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069f6:	6083      	str	r3, [r0, #8]
 80069f8:	8181      	strh	r1, [r0, #12]
 80069fa:	6643      	str	r3, [r0, #100]	; 0x64
 80069fc:	81c2      	strh	r2, [r0, #14]
 80069fe:	6183      	str	r3, [r0, #24]
 8006a00:	4619      	mov	r1, r3
 8006a02:	2208      	movs	r2, #8
 8006a04:	305c      	adds	r0, #92	; 0x5c
 8006a06:	f000 f9f7 	bl	8006df8 <memset>
 8006a0a:	4b0d      	ldr	r3, [pc, #52]	; (8006a40 <std+0x58>)
 8006a0c:	6263      	str	r3, [r4, #36]	; 0x24
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	; (8006a44 <std+0x5c>)
 8006a10:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a12:	4b0d      	ldr	r3, [pc, #52]	; (8006a48 <std+0x60>)
 8006a14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a16:	4b0d      	ldr	r3, [pc, #52]	; (8006a4c <std+0x64>)
 8006a18:	6323      	str	r3, [r4, #48]	; 0x30
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	; (8006a50 <std+0x68>)
 8006a1c:	6224      	str	r4, [r4, #32]
 8006a1e:	429c      	cmp	r4, r3
 8006a20:	d006      	beq.n	8006a30 <std+0x48>
 8006a22:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8006a26:	4294      	cmp	r4, r2
 8006a28:	d002      	beq.n	8006a30 <std+0x48>
 8006a2a:	33d0      	adds	r3, #208	; 0xd0
 8006a2c:	429c      	cmp	r4, r3
 8006a2e:	d105      	bne.n	8006a3c <std+0x54>
 8006a30:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a38:	f000 baaa 	b.w	8006f90 <__retarget_lock_init_recursive>
 8006a3c:	bd10      	pop	{r4, pc}
 8006a3e:	bf00      	nop
 8006a40:	08006c49 	.word	0x08006c49
 8006a44:	08006c6b 	.word	0x08006c6b
 8006a48:	08006ca3 	.word	0x08006ca3
 8006a4c:	08006cc7 	.word	0x08006cc7
 8006a50:	20000700 	.word	0x20000700

08006a54 <stdio_exit_handler>:
 8006a54:	4a02      	ldr	r2, [pc, #8]	; (8006a60 <stdio_exit_handler+0xc>)
 8006a56:	4903      	ldr	r1, [pc, #12]	; (8006a64 <stdio_exit_handler+0x10>)
 8006a58:	4803      	ldr	r0, [pc, #12]	; (8006a68 <stdio_exit_handler+0x14>)
 8006a5a:	f000 b869 	b.w	8006b30 <_fwalk_sglue>
 8006a5e:	bf00      	nop
 8006a60:	2000000c 	.word	0x2000000c
 8006a64:	08007701 	.word	0x08007701
 8006a68:	20000018 	.word	0x20000018

08006a6c <cleanup_stdio>:
 8006a6c:	6841      	ldr	r1, [r0, #4]
 8006a6e:	4b0c      	ldr	r3, [pc, #48]	; (8006aa0 <cleanup_stdio+0x34>)
 8006a70:	4299      	cmp	r1, r3
 8006a72:	b510      	push	{r4, lr}
 8006a74:	4604      	mov	r4, r0
 8006a76:	d001      	beq.n	8006a7c <cleanup_stdio+0x10>
 8006a78:	f000 fe42 	bl	8007700 <_fflush_r>
 8006a7c:	68a1      	ldr	r1, [r4, #8]
 8006a7e:	4b09      	ldr	r3, [pc, #36]	; (8006aa4 <cleanup_stdio+0x38>)
 8006a80:	4299      	cmp	r1, r3
 8006a82:	d002      	beq.n	8006a8a <cleanup_stdio+0x1e>
 8006a84:	4620      	mov	r0, r4
 8006a86:	f000 fe3b 	bl	8007700 <_fflush_r>
 8006a8a:	68e1      	ldr	r1, [r4, #12]
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <cleanup_stdio+0x3c>)
 8006a8e:	4299      	cmp	r1, r3
 8006a90:	d004      	beq.n	8006a9c <cleanup_stdio+0x30>
 8006a92:	4620      	mov	r0, r4
 8006a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a98:	f000 be32 	b.w	8007700 <_fflush_r>
 8006a9c:	bd10      	pop	{r4, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000700 	.word	0x20000700
 8006aa4:	20000768 	.word	0x20000768
 8006aa8:	200007d0 	.word	0x200007d0

08006aac <global_stdio_init.part.0>:
 8006aac:	b510      	push	{r4, lr}
 8006aae:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <global_stdio_init.part.0+0x30>)
 8006ab0:	4c0b      	ldr	r4, [pc, #44]	; (8006ae0 <global_stdio_init.part.0+0x34>)
 8006ab2:	4a0c      	ldr	r2, [pc, #48]	; (8006ae4 <global_stdio_init.part.0+0x38>)
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2104      	movs	r1, #4
 8006abc:	f7ff ff94 	bl	80069e8 <std>
 8006ac0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	2109      	movs	r1, #9
 8006ac8:	f7ff ff8e 	bl	80069e8 <std>
 8006acc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ad6:	2112      	movs	r1, #18
 8006ad8:	f7ff bf86 	b.w	80069e8 <std>
 8006adc:	20000838 	.word	0x20000838
 8006ae0:	20000700 	.word	0x20000700
 8006ae4:	08006a55 	.word	0x08006a55

08006ae8 <__sfp_lock_acquire>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	; (8006af0 <__sfp_lock_acquire+0x8>)
 8006aea:	f000 ba52 	b.w	8006f92 <__retarget_lock_acquire_recursive>
 8006aee:	bf00      	nop
 8006af0:	20000841 	.word	0x20000841

08006af4 <__sfp_lock_release>:
 8006af4:	4801      	ldr	r0, [pc, #4]	; (8006afc <__sfp_lock_release+0x8>)
 8006af6:	f000 ba4d 	b.w	8006f94 <__retarget_lock_release_recursive>
 8006afa:	bf00      	nop
 8006afc:	20000841 	.word	0x20000841

08006b00 <__sinit>:
 8006b00:	b510      	push	{r4, lr}
 8006b02:	4604      	mov	r4, r0
 8006b04:	f7ff fff0 	bl	8006ae8 <__sfp_lock_acquire>
 8006b08:	6a23      	ldr	r3, [r4, #32]
 8006b0a:	b11b      	cbz	r3, 8006b14 <__sinit+0x14>
 8006b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b10:	f7ff bff0 	b.w	8006af4 <__sfp_lock_release>
 8006b14:	4b04      	ldr	r3, [pc, #16]	; (8006b28 <__sinit+0x28>)
 8006b16:	6223      	str	r3, [r4, #32]
 8006b18:	4b04      	ldr	r3, [pc, #16]	; (8006b2c <__sinit+0x2c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1f5      	bne.n	8006b0c <__sinit+0xc>
 8006b20:	f7ff ffc4 	bl	8006aac <global_stdio_init.part.0>
 8006b24:	e7f2      	b.n	8006b0c <__sinit+0xc>
 8006b26:	bf00      	nop
 8006b28:	08006a6d 	.word	0x08006a6d
 8006b2c:	20000838 	.word	0x20000838

08006b30 <_fwalk_sglue>:
 8006b30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b34:	4607      	mov	r7, r0
 8006b36:	4688      	mov	r8, r1
 8006b38:	4614      	mov	r4, r2
 8006b3a:	2600      	movs	r6, #0
 8006b3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b40:	f1b9 0901 	subs.w	r9, r9, #1
 8006b44:	d505      	bpl.n	8006b52 <_fwalk_sglue+0x22>
 8006b46:	6824      	ldr	r4, [r4, #0]
 8006b48:	2c00      	cmp	r4, #0
 8006b4a:	d1f7      	bne.n	8006b3c <_fwalk_sglue+0xc>
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b52:	89ab      	ldrh	r3, [r5, #12]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d907      	bls.n	8006b68 <_fwalk_sglue+0x38>
 8006b58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	d003      	beq.n	8006b68 <_fwalk_sglue+0x38>
 8006b60:	4629      	mov	r1, r5
 8006b62:	4638      	mov	r0, r7
 8006b64:	47c0      	blx	r8
 8006b66:	4306      	orrs	r6, r0
 8006b68:	3568      	adds	r5, #104	; 0x68
 8006b6a:	e7e9      	b.n	8006b40 <_fwalk_sglue+0x10>

08006b6c <iprintf>:
 8006b6c:	b40f      	push	{r0, r1, r2, r3}
 8006b6e:	b507      	push	{r0, r1, r2, lr}
 8006b70:	4906      	ldr	r1, [pc, #24]	; (8006b8c <iprintf+0x20>)
 8006b72:	ab04      	add	r3, sp, #16
 8006b74:	6808      	ldr	r0, [r1, #0]
 8006b76:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b7a:	6881      	ldr	r1, [r0, #8]
 8006b7c:	9301      	str	r3, [sp, #4]
 8006b7e:	f000 fa8f 	bl	80070a0 <_vfiprintf_r>
 8006b82:	b003      	add	sp, #12
 8006b84:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b88:	b004      	add	sp, #16
 8006b8a:	4770      	bx	lr
 8006b8c:	20000064 	.word	0x20000064

08006b90 <_puts_r>:
 8006b90:	6a03      	ldr	r3, [r0, #32]
 8006b92:	b570      	push	{r4, r5, r6, lr}
 8006b94:	6884      	ldr	r4, [r0, #8]
 8006b96:	4605      	mov	r5, r0
 8006b98:	460e      	mov	r6, r1
 8006b9a:	b90b      	cbnz	r3, 8006ba0 <_puts_r+0x10>
 8006b9c:	f7ff ffb0 	bl	8006b00 <__sinit>
 8006ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ba2:	07db      	lsls	r3, r3, #31
 8006ba4:	d405      	bmi.n	8006bb2 <_puts_r+0x22>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	0598      	lsls	r0, r3, #22
 8006baa:	d402      	bmi.n	8006bb2 <_puts_r+0x22>
 8006bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bae:	f000 f9f0 	bl	8006f92 <__retarget_lock_acquire_recursive>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	0719      	lsls	r1, r3, #28
 8006bb6:	d513      	bpl.n	8006be0 <_puts_r+0x50>
 8006bb8:	6923      	ldr	r3, [r4, #16]
 8006bba:	b18b      	cbz	r3, 8006be0 <_puts_r+0x50>
 8006bbc:	3e01      	subs	r6, #1
 8006bbe:	68a3      	ldr	r3, [r4, #8]
 8006bc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bc4:	3b01      	subs	r3, #1
 8006bc6:	60a3      	str	r3, [r4, #8]
 8006bc8:	b9e9      	cbnz	r1, 8006c06 <_puts_r+0x76>
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	da2e      	bge.n	8006c2c <_puts_r+0x9c>
 8006bce:	4622      	mov	r2, r4
 8006bd0:	210a      	movs	r1, #10
 8006bd2:	4628      	mov	r0, r5
 8006bd4:	f000 f87b 	bl	8006cce <__swbuf_r>
 8006bd8:	3001      	adds	r0, #1
 8006bda:	d007      	beq.n	8006bec <_puts_r+0x5c>
 8006bdc:	250a      	movs	r5, #10
 8006bde:	e007      	b.n	8006bf0 <_puts_r+0x60>
 8006be0:	4621      	mov	r1, r4
 8006be2:	4628      	mov	r0, r5
 8006be4:	f000 f8b0 	bl	8006d48 <__swsetup_r>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d0e7      	beq.n	8006bbc <_puts_r+0x2c>
 8006bec:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006bf0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bf2:	07da      	lsls	r2, r3, #31
 8006bf4:	d405      	bmi.n	8006c02 <_puts_r+0x72>
 8006bf6:	89a3      	ldrh	r3, [r4, #12]
 8006bf8:	059b      	lsls	r3, r3, #22
 8006bfa:	d402      	bmi.n	8006c02 <_puts_r+0x72>
 8006bfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bfe:	f000 f9c9 	bl	8006f94 <__retarget_lock_release_recursive>
 8006c02:	4628      	mov	r0, r5
 8006c04:	bd70      	pop	{r4, r5, r6, pc}
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	da04      	bge.n	8006c14 <_puts_r+0x84>
 8006c0a:	69a2      	ldr	r2, [r4, #24]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	dc06      	bgt.n	8006c1e <_puts_r+0x8e>
 8006c10:	290a      	cmp	r1, #10
 8006c12:	d004      	beq.n	8006c1e <_puts_r+0x8e>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	1c5a      	adds	r2, r3, #1
 8006c18:	6022      	str	r2, [r4, #0]
 8006c1a:	7019      	strb	r1, [r3, #0]
 8006c1c:	e7cf      	b.n	8006bbe <_puts_r+0x2e>
 8006c1e:	4622      	mov	r2, r4
 8006c20:	4628      	mov	r0, r5
 8006c22:	f000 f854 	bl	8006cce <__swbuf_r>
 8006c26:	3001      	adds	r0, #1
 8006c28:	d1c9      	bne.n	8006bbe <_puts_r+0x2e>
 8006c2a:	e7df      	b.n	8006bec <_puts_r+0x5c>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	250a      	movs	r5, #10
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	6022      	str	r2, [r4, #0]
 8006c34:	701d      	strb	r5, [r3, #0]
 8006c36:	e7db      	b.n	8006bf0 <_puts_r+0x60>

08006c38 <puts>:
 8006c38:	4b02      	ldr	r3, [pc, #8]	; (8006c44 <puts+0xc>)
 8006c3a:	4601      	mov	r1, r0
 8006c3c:	6818      	ldr	r0, [r3, #0]
 8006c3e:	f7ff bfa7 	b.w	8006b90 <_puts_r>
 8006c42:	bf00      	nop
 8006c44:	20000064 	.word	0x20000064

08006c48 <__sread>:
 8006c48:	b510      	push	{r4, lr}
 8006c4a:	460c      	mov	r4, r1
 8006c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c50:	f000 f92c 	bl	8006eac <_read_r>
 8006c54:	2800      	cmp	r0, #0
 8006c56:	bfab      	itete	ge
 8006c58:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006c5a:	89a3      	ldrhlt	r3, [r4, #12]
 8006c5c:	181b      	addge	r3, r3, r0
 8006c5e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006c62:	bfac      	ite	ge
 8006c64:	6563      	strge	r3, [r4, #84]	; 0x54
 8006c66:	81a3      	strhlt	r3, [r4, #12]
 8006c68:	bd10      	pop	{r4, pc}

08006c6a <__swrite>:
 8006c6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6e:	461f      	mov	r7, r3
 8006c70:	898b      	ldrh	r3, [r1, #12]
 8006c72:	05db      	lsls	r3, r3, #23
 8006c74:	4605      	mov	r5, r0
 8006c76:	460c      	mov	r4, r1
 8006c78:	4616      	mov	r6, r2
 8006c7a:	d505      	bpl.n	8006c88 <__swrite+0x1e>
 8006c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c80:	2302      	movs	r3, #2
 8006c82:	2200      	movs	r2, #0
 8006c84:	f000 f900 	bl	8006e88 <_lseek_r>
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c92:	81a3      	strh	r3, [r4, #12]
 8006c94:	4632      	mov	r2, r6
 8006c96:	463b      	mov	r3, r7
 8006c98:	4628      	mov	r0, r5
 8006c9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c9e:	f000 b93b 	b.w	8006f18 <_write_r>

08006ca2 <__sseek>:
 8006ca2:	b510      	push	{r4, lr}
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006caa:	f000 f8ed 	bl	8006e88 <_lseek_r>
 8006cae:	1c43      	adds	r3, r0, #1
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	bf15      	itete	ne
 8006cb4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006cb6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006cba:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006cbe:	81a3      	strheq	r3, [r4, #12]
 8006cc0:	bf18      	it	ne
 8006cc2:	81a3      	strhne	r3, [r4, #12]
 8006cc4:	bd10      	pop	{r4, pc}

08006cc6 <__sclose>:
 8006cc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cca:	f000 b8cd 	b.w	8006e68 <_close_r>

08006cce <__swbuf_r>:
 8006cce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd0:	460e      	mov	r6, r1
 8006cd2:	4614      	mov	r4, r2
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	b118      	cbz	r0, 8006ce0 <__swbuf_r+0x12>
 8006cd8:	6a03      	ldr	r3, [r0, #32]
 8006cda:	b90b      	cbnz	r3, 8006ce0 <__swbuf_r+0x12>
 8006cdc:	f7ff ff10 	bl	8006b00 <__sinit>
 8006ce0:	69a3      	ldr	r3, [r4, #24]
 8006ce2:	60a3      	str	r3, [r4, #8]
 8006ce4:	89a3      	ldrh	r3, [r4, #12]
 8006ce6:	071a      	lsls	r2, r3, #28
 8006ce8:	d525      	bpl.n	8006d36 <__swbuf_r+0x68>
 8006cea:	6923      	ldr	r3, [r4, #16]
 8006cec:	b31b      	cbz	r3, 8006d36 <__swbuf_r+0x68>
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	6922      	ldr	r2, [r4, #16]
 8006cf2:	1a98      	subs	r0, r3, r2
 8006cf4:	6963      	ldr	r3, [r4, #20]
 8006cf6:	b2f6      	uxtb	r6, r6
 8006cf8:	4283      	cmp	r3, r0
 8006cfa:	4637      	mov	r7, r6
 8006cfc:	dc04      	bgt.n	8006d08 <__swbuf_r+0x3a>
 8006cfe:	4621      	mov	r1, r4
 8006d00:	4628      	mov	r0, r5
 8006d02:	f000 fcfd 	bl	8007700 <_fflush_r>
 8006d06:	b9e0      	cbnz	r0, 8006d42 <__swbuf_r+0x74>
 8006d08:	68a3      	ldr	r3, [r4, #8]
 8006d0a:	3b01      	subs	r3, #1
 8006d0c:	60a3      	str	r3, [r4, #8]
 8006d0e:	6823      	ldr	r3, [r4, #0]
 8006d10:	1c5a      	adds	r2, r3, #1
 8006d12:	6022      	str	r2, [r4, #0]
 8006d14:	701e      	strb	r6, [r3, #0]
 8006d16:	6962      	ldr	r2, [r4, #20]
 8006d18:	1c43      	adds	r3, r0, #1
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d004      	beq.n	8006d28 <__swbuf_r+0x5a>
 8006d1e:	89a3      	ldrh	r3, [r4, #12]
 8006d20:	07db      	lsls	r3, r3, #31
 8006d22:	d506      	bpl.n	8006d32 <__swbuf_r+0x64>
 8006d24:	2e0a      	cmp	r6, #10
 8006d26:	d104      	bne.n	8006d32 <__swbuf_r+0x64>
 8006d28:	4621      	mov	r1, r4
 8006d2a:	4628      	mov	r0, r5
 8006d2c:	f000 fce8 	bl	8007700 <_fflush_r>
 8006d30:	b938      	cbnz	r0, 8006d42 <__swbuf_r+0x74>
 8006d32:	4638      	mov	r0, r7
 8006d34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d36:	4621      	mov	r1, r4
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f000 f805 	bl	8006d48 <__swsetup_r>
 8006d3e:	2800      	cmp	r0, #0
 8006d40:	d0d5      	beq.n	8006cee <__swbuf_r+0x20>
 8006d42:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006d46:	e7f4      	b.n	8006d32 <__swbuf_r+0x64>

08006d48 <__swsetup_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4b2a      	ldr	r3, [pc, #168]	; (8006df4 <__swsetup_r+0xac>)
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	460c      	mov	r4, r1
 8006d52:	b118      	cbz	r0, 8006d5c <__swsetup_r+0x14>
 8006d54:	6a03      	ldr	r3, [r0, #32]
 8006d56:	b90b      	cbnz	r3, 8006d5c <__swsetup_r+0x14>
 8006d58:	f7ff fed2 	bl	8006b00 <__sinit>
 8006d5c:	89a3      	ldrh	r3, [r4, #12]
 8006d5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d62:	0718      	lsls	r0, r3, #28
 8006d64:	d422      	bmi.n	8006dac <__swsetup_r+0x64>
 8006d66:	06d9      	lsls	r1, r3, #27
 8006d68:	d407      	bmi.n	8006d7a <__swsetup_r+0x32>
 8006d6a:	2309      	movs	r3, #9
 8006d6c:	602b      	str	r3, [r5, #0]
 8006d6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d72:	81a3      	strh	r3, [r4, #12]
 8006d74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d78:	e034      	b.n	8006de4 <__swsetup_r+0x9c>
 8006d7a:	0758      	lsls	r0, r3, #29
 8006d7c:	d512      	bpl.n	8006da4 <__swsetup_r+0x5c>
 8006d7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d80:	b141      	cbz	r1, 8006d94 <__swsetup_r+0x4c>
 8006d82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d86:	4299      	cmp	r1, r3
 8006d88:	d002      	beq.n	8006d90 <__swsetup_r+0x48>
 8006d8a:	4628      	mov	r0, r5
 8006d8c:	f000 f912 	bl	8006fb4 <_free_r>
 8006d90:	2300      	movs	r3, #0
 8006d92:	6363      	str	r3, [r4, #52]	; 0x34
 8006d94:	89a3      	ldrh	r3, [r4, #12]
 8006d96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d9a:	81a3      	strh	r3, [r4, #12]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	6923      	ldr	r3, [r4, #16]
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	89a3      	ldrh	r3, [r4, #12]
 8006da6:	f043 0308 	orr.w	r3, r3, #8
 8006daa:	81a3      	strh	r3, [r4, #12]
 8006dac:	6923      	ldr	r3, [r4, #16]
 8006dae:	b94b      	cbnz	r3, 8006dc4 <__swsetup_r+0x7c>
 8006db0:	89a3      	ldrh	r3, [r4, #12]
 8006db2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006db6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dba:	d003      	beq.n	8006dc4 <__swsetup_r+0x7c>
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f000 fcec 	bl	800779c <__smakebuf_r>
 8006dc4:	89a0      	ldrh	r0, [r4, #12]
 8006dc6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006dca:	f010 0301 	ands.w	r3, r0, #1
 8006dce:	d00a      	beq.n	8006de6 <__swsetup_r+0x9e>
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	60a3      	str	r3, [r4, #8]
 8006dd4:	6963      	ldr	r3, [r4, #20]
 8006dd6:	425b      	negs	r3, r3
 8006dd8:	61a3      	str	r3, [r4, #24]
 8006dda:	6923      	ldr	r3, [r4, #16]
 8006ddc:	b943      	cbnz	r3, 8006df0 <__swsetup_r+0xa8>
 8006dde:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006de2:	d1c4      	bne.n	8006d6e <__swsetup_r+0x26>
 8006de4:	bd38      	pop	{r3, r4, r5, pc}
 8006de6:	0781      	lsls	r1, r0, #30
 8006de8:	bf58      	it	pl
 8006dea:	6963      	ldrpl	r3, [r4, #20]
 8006dec:	60a3      	str	r3, [r4, #8]
 8006dee:	e7f4      	b.n	8006dda <__swsetup_r+0x92>
 8006df0:	2000      	movs	r0, #0
 8006df2:	e7f7      	b.n	8006de4 <__swsetup_r+0x9c>
 8006df4:	20000064 	.word	0x20000064

08006df8 <memset>:
 8006df8:	4402      	add	r2, r0
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d100      	bne.n	8006e02 <memset+0xa>
 8006e00:	4770      	bx	lr
 8006e02:	f803 1b01 	strb.w	r1, [r3], #1
 8006e06:	e7f9      	b.n	8006dfc <memset+0x4>

08006e08 <_raise_r>:
 8006e08:	291f      	cmp	r1, #31
 8006e0a:	b538      	push	{r3, r4, r5, lr}
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	460d      	mov	r5, r1
 8006e10:	d904      	bls.n	8006e1c <_raise_r+0x14>
 8006e12:	2316      	movs	r3, #22
 8006e14:	6003      	str	r3, [r0, #0]
 8006e16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006e1e:	b112      	cbz	r2, 8006e26 <_raise_r+0x1e>
 8006e20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006e24:	b94b      	cbnz	r3, 8006e3a <_raise_r+0x32>
 8006e26:	4620      	mov	r0, r4
 8006e28:	f000 f864 	bl	8006ef4 <_getpid_r>
 8006e2c:	462a      	mov	r2, r5
 8006e2e:	4601      	mov	r1, r0
 8006e30:	4620      	mov	r0, r4
 8006e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e36:	f000 b84b 	b.w	8006ed0 <_kill_r>
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d00a      	beq.n	8006e54 <_raise_r+0x4c>
 8006e3e:	1c59      	adds	r1, r3, #1
 8006e40:	d103      	bne.n	8006e4a <_raise_r+0x42>
 8006e42:	2316      	movs	r3, #22
 8006e44:	6003      	str	r3, [r0, #0]
 8006e46:	2001      	movs	r0, #1
 8006e48:	e7e7      	b.n	8006e1a <_raise_r+0x12>
 8006e4a:	2400      	movs	r4, #0
 8006e4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006e50:	4628      	mov	r0, r5
 8006e52:	4798      	blx	r3
 8006e54:	2000      	movs	r0, #0
 8006e56:	e7e0      	b.n	8006e1a <_raise_r+0x12>

08006e58 <raise>:
 8006e58:	4b02      	ldr	r3, [pc, #8]	; (8006e64 <raise+0xc>)
 8006e5a:	4601      	mov	r1, r0
 8006e5c:	6818      	ldr	r0, [r3, #0]
 8006e5e:	f7ff bfd3 	b.w	8006e08 <_raise_r>
 8006e62:	bf00      	nop
 8006e64:	20000064 	.word	0x20000064

08006e68 <_close_r>:
 8006e68:	b538      	push	{r3, r4, r5, lr}
 8006e6a:	4d06      	ldr	r5, [pc, #24]	; (8006e84 <_close_r+0x1c>)
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	4604      	mov	r4, r0
 8006e70:	4608      	mov	r0, r1
 8006e72:	602b      	str	r3, [r5, #0]
 8006e74:	f7fb fec9 	bl	8002c0a <_close>
 8006e78:	1c43      	adds	r3, r0, #1
 8006e7a:	d102      	bne.n	8006e82 <_close_r+0x1a>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	b103      	cbz	r3, 8006e82 <_close_r+0x1a>
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	bd38      	pop	{r3, r4, r5, pc}
 8006e84:	2000083c 	.word	0x2000083c

08006e88 <_lseek_r>:
 8006e88:	b538      	push	{r3, r4, r5, lr}
 8006e8a:	4d07      	ldr	r5, [pc, #28]	; (8006ea8 <_lseek_r+0x20>)
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	4608      	mov	r0, r1
 8006e90:	4611      	mov	r1, r2
 8006e92:	2200      	movs	r2, #0
 8006e94:	602a      	str	r2, [r5, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	f7fb fede 	bl	8002c58 <_lseek>
 8006e9c:	1c43      	adds	r3, r0, #1
 8006e9e:	d102      	bne.n	8006ea6 <_lseek_r+0x1e>
 8006ea0:	682b      	ldr	r3, [r5, #0]
 8006ea2:	b103      	cbz	r3, 8006ea6 <_lseek_r+0x1e>
 8006ea4:	6023      	str	r3, [r4, #0]
 8006ea6:	bd38      	pop	{r3, r4, r5, pc}
 8006ea8:	2000083c 	.word	0x2000083c

08006eac <_read_r>:
 8006eac:	b538      	push	{r3, r4, r5, lr}
 8006eae:	4d07      	ldr	r5, [pc, #28]	; (8006ecc <_read_r+0x20>)
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	4608      	mov	r0, r1
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	602a      	str	r2, [r5, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f7fb fe6c 	bl	8002b98 <_read>
 8006ec0:	1c43      	adds	r3, r0, #1
 8006ec2:	d102      	bne.n	8006eca <_read_r+0x1e>
 8006ec4:	682b      	ldr	r3, [r5, #0]
 8006ec6:	b103      	cbz	r3, 8006eca <_read_r+0x1e>
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	bd38      	pop	{r3, r4, r5, pc}
 8006ecc:	2000083c 	.word	0x2000083c

08006ed0 <_kill_r>:
 8006ed0:	b538      	push	{r3, r4, r5, lr}
 8006ed2:	4d07      	ldr	r5, [pc, #28]	; (8006ef0 <_kill_r+0x20>)
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	4608      	mov	r0, r1
 8006eda:	4611      	mov	r1, r2
 8006edc:	602b      	str	r3, [r5, #0]
 8006ede:	f7fb fe41 	bl	8002b64 <_kill>
 8006ee2:	1c43      	adds	r3, r0, #1
 8006ee4:	d102      	bne.n	8006eec <_kill_r+0x1c>
 8006ee6:	682b      	ldr	r3, [r5, #0]
 8006ee8:	b103      	cbz	r3, 8006eec <_kill_r+0x1c>
 8006eea:	6023      	str	r3, [r4, #0]
 8006eec:	bd38      	pop	{r3, r4, r5, pc}
 8006eee:	bf00      	nop
 8006ef0:	2000083c 	.word	0x2000083c

08006ef4 <_getpid_r>:
 8006ef4:	f7fb be2e 	b.w	8002b54 <_getpid>

08006ef8 <_sbrk_r>:
 8006ef8:	b538      	push	{r3, r4, r5, lr}
 8006efa:	4d06      	ldr	r5, [pc, #24]	; (8006f14 <_sbrk_r+0x1c>)
 8006efc:	2300      	movs	r3, #0
 8006efe:	4604      	mov	r4, r0
 8006f00:	4608      	mov	r0, r1
 8006f02:	602b      	str	r3, [r5, #0]
 8006f04:	f7fb feb6 	bl	8002c74 <_sbrk>
 8006f08:	1c43      	adds	r3, r0, #1
 8006f0a:	d102      	bne.n	8006f12 <_sbrk_r+0x1a>
 8006f0c:	682b      	ldr	r3, [r5, #0]
 8006f0e:	b103      	cbz	r3, 8006f12 <_sbrk_r+0x1a>
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	bd38      	pop	{r3, r4, r5, pc}
 8006f14:	2000083c 	.word	0x2000083c

08006f18 <_write_r>:
 8006f18:	b538      	push	{r3, r4, r5, lr}
 8006f1a:	4d07      	ldr	r5, [pc, #28]	; (8006f38 <_write_r+0x20>)
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	4608      	mov	r0, r1
 8006f20:	4611      	mov	r1, r2
 8006f22:	2200      	movs	r2, #0
 8006f24:	602a      	str	r2, [r5, #0]
 8006f26:	461a      	mov	r2, r3
 8006f28:	f7fb fe53 	bl	8002bd2 <_write>
 8006f2c:	1c43      	adds	r3, r0, #1
 8006f2e:	d102      	bne.n	8006f36 <_write_r+0x1e>
 8006f30:	682b      	ldr	r3, [r5, #0]
 8006f32:	b103      	cbz	r3, 8006f36 <_write_r+0x1e>
 8006f34:	6023      	str	r3, [r4, #0]
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	2000083c 	.word	0x2000083c

08006f3c <__errno>:
 8006f3c:	4b01      	ldr	r3, [pc, #4]	; (8006f44 <__errno+0x8>)
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000064 	.word	0x20000064

08006f48 <__libc_init_array>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	4d0d      	ldr	r5, [pc, #52]	; (8006f80 <__libc_init_array+0x38>)
 8006f4c:	4c0d      	ldr	r4, [pc, #52]	; (8006f84 <__libc_init_array+0x3c>)
 8006f4e:	1b64      	subs	r4, r4, r5
 8006f50:	10a4      	asrs	r4, r4, #2
 8006f52:	2600      	movs	r6, #0
 8006f54:	42a6      	cmp	r6, r4
 8006f56:	d109      	bne.n	8006f6c <__libc_init_array+0x24>
 8006f58:	4d0b      	ldr	r5, [pc, #44]	; (8006f88 <__libc_init_array+0x40>)
 8006f5a:	4c0c      	ldr	r4, [pc, #48]	; (8006f8c <__libc_init_array+0x44>)
 8006f5c:	f000 fc7c 	bl	8007858 <_init>
 8006f60:	1b64      	subs	r4, r4, r5
 8006f62:	10a4      	asrs	r4, r4, #2
 8006f64:	2600      	movs	r6, #0
 8006f66:	42a6      	cmp	r6, r4
 8006f68:	d105      	bne.n	8006f76 <__libc_init_array+0x2e>
 8006f6a:	bd70      	pop	{r4, r5, r6, pc}
 8006f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f70:	4798      	blx	r3
 8006f72:	3601      	adds	r6, #1
 8006f74:	e7ee      	b.n	8006f54 <__libc_init_array+0xc>
 8006f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f7a:	4798      	blx	r3
 8006f7c:	3601      	adds	r6, #1
 8006f7e:	e7f2      	b.n	8006f66 <__libc_init_array+0x1e>
 8006f80:	080079a0 	.word	0x080079a0
 8006f84:	080079a0 	.word	0x080079a0
 8006f88:	080079a0 	.word	0x080079a0
 8006f8c:	080079a8 	.word	0x080079a8

08006f90 <__retarget_lock_init_recursive>:
 8006f90:	4770      	bx	lr

08006f92 <__retarget_lock_acquire_recursive>:
 8006f92:	4770      	bx	lr

08006f94 <__retarget_lock_release_recursive>:
 8006f94:	4770      	bx	lr

08006f96 <memcpy>:
 8006f96:	440a      	add	r2, r1
 8006f98:	4291      	cmp	r1, r2
 8006f9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006f9e:	d100      	bne.n	8006fa2 <memcpy+0xc>
 8006fa0:	4770      	bx	lr
 8006fa2:	b510      	push	{r4, lr}
 8006fa4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fa8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fac:	4291      	cmp	r1, r2
 8006fae:	d1f9      	bne.n	8006fa4 <memcpy+0xe>
 8006fb0:	bd10      	pop	{r4, pc}
	...

08006fb4 <_free_r>:
 8006fb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006fb6:	2900      	cmp	r1, #0
 8006fb8:	d044      	beq.n	8007044 <_free_r+0x90>
 8006fba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fbe:	9001      	str	r0, [sp, #4]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f1a1 0404 	sub.w	r4, r1, #4
 8006fc6:	bfb8      	it	lt
 8006fc8:	18e4      	addlt	r4, r4, r3
 8006fca:	f7ff fd01 	bl	80069d0 <__malloc_lock>
 8006fce:	4a1e      	ldr	r2, [pc, #120]	; (8007048 <_free_r+0x94>)
 8006fd0:	9801      	ldr	r0, [sp, #4]
 8006fd2:	6813      	ldr	r3, [r2, #0]
 8006fd4:	b933      	cbnz	r3, 8006fe4 <_free_r+0x30>
 8006fd6:	6063      	str	r3, [r4, #4]
 8006fd8:	6014      	str	r4, [r2, #0]
 8006fda:	b003      	add	sp, #12
 8006fdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fe0:	f7ff bcfc 	b.w	80069dc <__malloc_unlock>
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	d908      	bls.n	8006ffa <_free_r+0x46>
 8006fe8:	6825      	ldr	r5, [r4, #0]
 8006fea:	1961      	adds	r1, r4, r5
 8006fec:	428b      	cmp	r3, r1
 8006fee:	bf01      	itttt	eq
 8006ff0:	6819      	ldreq	r1, [r3, #0]
 8006ff2:	685b      	ldreq	r3, [r3, #4]
 8006ff4:	1949      	addeq	r1, r1, r5
 8006ff6:	6021      	streq	r1, [r4, #0]
 8006ff8:	e7ed      	b.n	8006fd6 <_free_r+0x22>
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	b10b      	cbz	r3, 8007004 <_free_r+0x50>
 8007000:	42a3      	cmp	r3, r4
 8007002:	d9fa      	bls.n	8006ffa <_free_r+0x46>
 8007004:	6811      	ldr	r1, [r2, #0]
 8007006:	1855      	adds	r5, r2, r1
 8007008:	42a5      	cmp	r5, r4
 800700a:	d10b      	bne.n	8007024 <_free_r+0x70>
 800700c:	6824      	ldr	r4, [r4, #0]
 800700e:	4421      	add	r1, r4
 8007010:	1854      	adds	r4, r2, r1
 8007012:	42a3      	cmp	r3, r4
 8007014:	6011      	str	r1, [r2, #0]
 8007016:	d1e0      	bne.n	8006fda <_free_r+0x26>
 8007018:	681c      	ldr	r4, [r3, #0]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	6053      	str	r3, [r2, #4]
 800701e:	440c      	add	r4, r1
 8007020:	6014      	str	r4, [r2, #0]
 8007022:	e7da      	b.n	8006fda <_free_r+0x26>
 8007024:	d902      	bls.n	800702c <_free_r+0x78>
 8007026:	230c      	movs	r3, #12
 8007028:	6003      	str	r3, [r0, #0]
 800702a:	e7d6      	b.n	8006fda <_free_r+0x26>
 800702c:	6825      	ldr	r5, [r4, #0]
 800702e:	1961      	adds	r1, r4, r5
 8007030:	428b      	cmp	r3, r1
 8007032:	bf04      	itt	eq
 8007034:	6819      	ldreq	r1, [r3, #0]
 8007036:	685b      	ldreq	r3, [r3, #4]
 8007038:	6063      	str	r3, [r4, #4]
 800703a:	bf04      	itt	eq
 800703c:	1949      	addeq	r1, r1, r5
 800703e:	6021      	streq	r1, [r4, #0]
 8007040:	6054      	str	r4, [r2, #4]
 8007042:	e7ca      	b.n	8006fda <_free_r+0x26>
 8007044:	b003      	add	sp, #12
 8007046:	bd30      	pop	{r4, r5, pc}
 8007048:	200006f8 	.word	0x200006f8

0800704c <__sfputc_r>:
 800704c:	6893      	ldr	r3, [r2, #8]
 800704e:	3b01      	subs	r3, #1
 8007050:	2b00      	cmp	r3, #0
 8007052:	b410      	push	{r4}
 8007054:	6093      	str	r3, [r2, #8]
 8007056:	da08      	bge.n	800706a <__sfputc_r+0x1e>
 8007058:	6994      	ldr	r4, [r2, #24]
 800705a:	42a3      	cmp	r3, r4
 800705c:	db01      	blt.n	8007062 <__sfputc_r+0x16>
 800705e:	290a      	cmp	r1, #10
 8007060:	d103      	bne.n	800706a <__sfputc_r+0x1e>
 8007062:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007066:	f7ff be32 	b.w	8006cce <__swbuf_r>
 800706a:	6813      	ldr	r3, [r2, #0]
 800706c:	1c58      	adds	r0, r3, #1
 800706e:	6010      	str	r0, [r2, #0]
 8007070:	7019      	strb	r1, [r3, #0]
 8007072:	4608      	mov	r0, r1
 8007074:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007078:	4770      	bx	lr

0800707a <__sfputs_r>:
 800707a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707c:	4606      	mov	r6, r0
 800707e:	460f      	mov	r7, r1
 8007080:	4614      	mov	r4, r2
 8007082:	18d5      	adds	r5, r2, r3
 8007084:	42ac      	cmp	r4, r5
 8007086:	d101      	bne.n	800708c <__sfputs_r+0x12>
 8007088:	2000      	movs	r0, #0
 800708a:	e007      	b.n	800709c <__sfputs_r+0x22>
 800708c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007090:	463a      	mov	r2, r7
 8007092:	4630      	mov	r0, r6
 8007094:	f7ff ffda 	bl	800704c <__sfputc_r>
 8007098:	1c43      	adds	r3, r0, #1
 800709a:	d1f3      	bne.n	8007084 <__sfputs_r+0xa>
 800709c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070a0 <_vfiprintf_r>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	460d      	mov	r5, r1
 80070a6:	b09d      	sub	sp, #116	; 0x74
 80070a8:	4614      	mov	r4, r2
 80070aa:	4698      	mov	r8, r3
 80070ac:	4606      	mov	r6, r0
 80070ae:	b118      	cbz	r0, 80070b8 <_vfiprintf_r+0x18>
 80070b0:	6a03      	ldr	r3, [r0, #32]
 80070b2:	b90b      	cbnz	r3, 80070b8 <_vfiprintf_r+0x18>
 80070b4:	f7ff fd24 	bl	8006b00 <__sinit>
 80070b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070ba:	07d9      	lsls	r1, r3, #31
 80070bc:	d405      	bmi.n	80070ca <_vfiprintf_r+0x2a>
 80070be:	89ab      	ldrh	r3, [r5, #12]
 80070c0:	059a      	lsls	r2, r3, #22
 80070c2:	d402      	bmi.n	80070ca <_vfiprintf_r+0x2a>
 80070c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070c6:	f7ff ff64 	bl	8006f92 <__retarget_lock_acquire_recursive>
 80070ca:	89ab      	ldrh	r3, [r5, #12]
 80070cc:	071b      	lsls	r3, r3, #28
 80070ce:	d501      	bpl.n	80070d4 <_vfiprintf_r+0x34>
 80070d0:	692b      	ldr	r3, [r5, #16]
 80070d2:	b99b      	cbnz	r3, 80070fc <_vfiprintf_r+0x5c>
 80070d4:	4629      	mov	r1, r5
 80070d6:	4630      	mov	r0, r6
 80070d8:	f7ff fe36 	bl	8006d48 <__swsetup_r>
 80070dc:	b170      	cbz	r0, 80070fc <_vfiprintf_r+0x5c>
 80070de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070e0:	07dc      	lsls	r4, r3, #31
 80070e2:	d504      	bpl.n	80070ee <_vfiprintf_r+0x4e>
 80070e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80070e8:	b01d      	add	sp, #116	; 0x74
 80070ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ee:	89ab      	ldrh	r3, [r5, #12]
 80070f0:	0598      	lsls	r0, r3, #22
 80070f2:	d4f7      	bmi.n	80070e4 <_vfiprintf_r+0x44>
 80070f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070f6:	f7ff ff4d 	bl	8006f94 <__retarget_lock_release_recursive>
 80070fa:	e7f3      	b.n	80070e4 <_vfiprintf_r+0x44>
 80070fc:	2300      	movs	r3, #0
 80070fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007100:	2320      	movs	r3, #32
 8007102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007106:	f8cd 800c 	str.w	r8, [sp, #12]
 800710a:	2330      	movs	r3, #48	; 0x30
 800710c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80072c0 <_vfiprintf_r+0x220>
 8007110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007114:	f04f 0901 	mov.w	r9, #1
 8007118:	4623      	mov	r3, r4
 800711a:	469a      	mov	sl, r3
 800711c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007120:	b10a      	cbz	r2, 8007126 <_vfiprintf_r+0x86>
 8007122:	2a25      	cmp	r2, #37	; 0x25
 8007124:	d1f9      	bne.n	800711a <_vfiprintf_r+0x7a>
 8007126:	ebba 0b04 	subs.w	fp, sl, r4
 800712a:	d00b      	beq.n	8007144 <_vfiprintf_r+0xa4>
 800712c:	465b      	mov	r3, fp
 800712e:	4622      	mov	r2, r4
 8007130:	4629      	mov	r1, r5
 8007132:	4630      	mov	r0, r6
 8007134:	f7ff ffa1 	bl	800707a <__sfputs_r>
 8007138:	3001      	adds	r0, #1
 800713a:	f000 80a9 	beq.w	8007290 <_vfiprintf_r+0x1f0>
 800713e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007140:	445a      	add	r2, fp
 8007142:	9209      	str	r2, [sp, #36]	; 0x24
 8007144:	f89a 3000 	ldrb.w	r3, [sl]
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80a1 	beq.w	8007290 <_vfiprintf_r+0x1f0>
 800714e:	2300      	movs	r3, #0
 8007150:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007158:	f10a 0a01 	add.w	sl, sl, #1
 800715c:	9304      	str	r3, [sp, #16]
 800715e:	9307      	str	r3, [sp, #28]
 8007160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007164:	931a      	str	r3, [sp, #104]	; 0x68
 8007166:	4654      	mov	r4, sl
 8007168:	2205      	movs	r2, #5
 800716a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800716e:	4854      	ldr	r0, [pc, #336]	; (80072c0 <_vfiprintf_r+0x220>)
 8007170:	f7f9 f856 	bl	8000220 <memchr>
 8007174:	9a04      	ldr	r2, [sp, #16]
 8007176:	b9d8      	cbnz	r0, 80071b0 <_vfiprintf_r+0x110>
 8007178:	06d1      	lsls	r1, r2, #27
 800717a:	bf44      	itt	mi
 800717c:	2320      	movmi	r3, #32
 800717e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007182:	0713      	lsls	r3, r2, #28
 8007184:	bf44      	itt	mi
 8007186:	232b      	movmi	r3, #43	; 0x2b
 8007188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800718c:	f89a 3000 	ldrb.w	r3, [sl]
 8007190:	2b2a      	cmp	r3, #42	; 0x2a
 8007192:	d015      	beq.n	80071c0 <_vfiprintf_r+0x120>
 8007194:	9a07      	ldr	r2, [sp, #28]
 8007196:	4654      	mov	r4, sl
 8007198:	2000      	movs	r0, #0
 800719a:	f04f 0c0a 	mov.w	ip, #10
 800719e:	4621      	mov	r1, r4
 80071a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071a4:	3b30      	subs	r3, #48	; 0x30
 80071a6:	2b09      	cmp	r3, #9
 80071a8:	d94d      	bls.n	8007246 <_vfiprintf_r+0x1a6>
 80071aa:	b1b0      	cbz	r0, 80071da <_vfiprintf_r+0x13a>
 80071ac:	9207      	str	r2, [sp, #28]
 80071ae:	e014      	b.n	80071da <_vfiprintf_r+0x13a>
 80071b0:	eba0 0308 	sub.w	r3, r0, r8
 80071b4:	fa09 f303 	lsl.w	r3, r9, r3
 80071b8:	4313      	orrs	r3, r2
 80071ba:	9304      	str	r3, [sp, #16]
 80071bc:	46a2      	mov	sl, r4
 80071be:	e7d2      	b.n	8007166 <_vfiprintf_r+0xc6>
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	1d19      	adds	r1, r3, #4
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	9103      	str	r1, [sp, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bfbb      	ittet	lt
 80071cc:	425b      	neglt	r3, r3
 80071ce:	f042 0202 	orrlt.w	r2, r2, #2
 80071d2:	9307      	strge	r3, [sp, #28]
 80071d4:	9307      	strlt	r3, [sp, #28]
 80071d6:	bfb8      	it	lt
 80071d8:	9204      	strlt	r2, [sp, #16]
 80071da:	7823      	ldrb	r3, [r4, #0]
 80071dc:	2b2e      	cmp	r3, #46	; 0x2e
 80071de:	d10c      	bne.n	80071fa <_vfiprintf_r+0x15a>
 80071e0:	7863      	ldrb	r3, [r4, #1]
 80071e2:	2b2a      	cmp	r3, #42	; 0x2a
 80071e4:	d134      	bne.n	8007250 <_vfiprintf_r+0x1b0>
 80071e6:	9b03      	ldr	r3, [sp, #12]
 80071e8:	1d1a      	adds	r2, r3, #4
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	9203      	str	r2, [sp, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	bfb8      	it	lt
 80071f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80071f6:	3402      	adds	r4, #2
 80071f8:	9305      	str	r3, [sp, #20]
 80071fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80072d0 <_vfiprintf_r+0x230>
 80071fe:	7821      	ldrb	r1, [r4, #0]
 8007200:	2203      	movs	r2, #3
 8007202:	4650      	mov	r0, sl
 8007204:	f7f9 f80c 	bl	8000220 <memchr>
 8007208:	b138      	cbz	r0, 800721a <_vfiprintf_r+0x17a>
 800720a:	9b04      	ldr	r3, [sp, #16]
 800720c:	eba0 000a 	sub.w	r0, r0, sl
 8007210:	2240      	movs	r2, #64	; 0x40
 8007212:	4082      	lsls	r2, r0
 8007214:	4313      	orrs	r3, r2
 8007216:	3401      	adds	r4, #1
 8007218:	9304      	str	r3, [sp, #16]
 800721a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800721e:	4829      	ldr	r0, [pc, #164]	; (80072c4 <_vfiprintf_r+0x224>)
 8007220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007224:	2206      	movs	r2, #6
 8007226:	f7f8 fffb 	bl	8000220 <memchr>
 800722a:	2800      	cmp	r0, #0
 800722c:	d03f      	beq.n	80072ae <_vfiprintf_r+0x20e>
 800722e:	4b26      	ldr	r3, [pc, #152]	; (80072c8 <_vfiprintf_r+0x228>)
 8007230:	bb1b      	cbnz	r3, 800727a <_vfiprintf_r+0x1da>
 8007232:	9b03      	ldr	r3, [sp, #12]
 8007234:	3307      	adds	r3, #7
 8007236:	f023 0307 	bic.w	r3, r3, #7
 800723a:	3308      	adds	r3, #8
 800723c:	9303      	str	r3, [sp, #12]
 800723e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007240:	443b      	add	r3, r7
 8007242:	9309      	str	r3, [sp, #36]	; 0x24
 8007244:	e768      	b.n	8007118 <_vfiprintf_r+0x78>
 8007246:	fb0c 3202 	mla	r2, ip, r2, r3
 800724a:	460c      	mov	r4, r1
 800724c:	2001      	movs	r0, #1
 800724e:	e7a6      	b.n	800719e <_vfiprintf_r+0xfe>
 8007250:	2300      	movs	r3, #0
 8007252:	3401      	adds	r4, #1
 8007254:	9305      	str	r3, [sp, #20]
 8007256:	4619      	mov	r1, r3
 8007258:	f04f 0c0a 	mov.w	ip, #10
 800725c:	4620      	mov	r0, r4
 800725e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007262:	3a30      	subs	r2, #48	; 0x30
 8007264:	2a09      	cmp	r2, #9
 8007266:	d903      	bls.n	8007270 <_vfiprintf_r+0x1d0>
 8007268:	2b00      	cmp	r3, #0
 800726a:	d0c6      	beq.n	80071fa <_vfiprintf_r+0x15a>
 800726c:	9105      	str	r1, [sp, #20]
 800726e:	e7c4      	b.n	80071fa <_vfiprintf_r+0x15a>
 8007270:	fb0c 2101 	mla	r1, ip, r1, r2
 8007274:	4604      	mov	r4, r0
 8007276:	2301      	movs	r3, #1
 8007278:	e7f0      	b.n	800725c <_vfiprintf_r+0x1bc>
 800727a:	ab03      	add	r3, sp, #12
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	462a      	mov	r2, r5
 8007280:	4b12      	ldr	r3, [pc, #72]	; (80072cc <_vfiprintf_r+0x22c>)
 8007282:	a904      	add	r1, sp, #16
 8007284:	4630      	mov	r0, r6
 8007286:	f3af 8000 	nop.w
 800728a:	4607      	mov	r7, r0
 800728c:	1c78      	adds	r0, r7, #1
 800728e:	d1d6      	bne.n	800723e <_vfiprintf_r+0x19e>
 8007290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007292:	07d9      	lsls	r1, r3, #31
 8007294:	d405      	bmi.n	80072a2 <_vfiprintf_r+0x202>
 8007296:	89ab      	ldrh	r3, [r5, #12]
 8007298:	059a      	lsls	r2, r3, #22
 800729a:	d402      	bmi.n	80072a2 <_vfiprintf_r+0x202>
 800729c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800729e:	f7ff fe79 	bl	8006f94 <__retarget_lock_release_recursive>
 80072a2:	89ab      	ldrh	r3, [r5, #12]
 80072a4:	065b      	lsls	r3, r3, #25
 80072a6:	f53f af1d 	bmi.w	80070e4 <_vfiprintf_r+0x44>
 80072aa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072ac:	e71c      	b.n	80070e8 <_vfiprintf_r+0x48>
 80072ae:	ab03      	add	r3, sp, #12
 80072b0:	9300      	str	r3, [sp, #0]
 80072b2:	462a      	mov	r2, r5
 80072b4:	4b05      	ldr	r3, [pc, #20]	; (80072cc <_vfiprintf_r+0x22c>)
 80072b6:	a904      	add	r1, sp, #16
 80072b8:	4630      	mov	r0, r6
 80072ba:	f000 f879 	bl	80073b0 <_printf_i>
 80072be:	e7e4      	b.n	800728a <_vfiprintf_r+0x1ea>
 80072c0:	0800796a 	.word	0x0800796a
 80072c4:	08007974 	.word	0x08007974
 80072c8:	00000000 	.word	0x00000000
 80072cc:	0800707b 	.word	0x0800707b
 80072d0:	08007970 	.word	0x08007970

080072d4 <_printf_common>:
 80072d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d8:	4616      	mov	r6, r2
 80072da:	4699      	mov	r9, r3
 80072dc:	688a      	ldr	r2, [r1, #8]
 80072de:	690b      	ldr	r3, [r1, #16]
 80072e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072e4:	4293      	cmp	r3, r2
 80072e6:	bfb8      	it	lt
 80072e8:	4613      	movlt	r3, r2
 80072ea:	6033      	str	r3, [r6, #0]
 80072ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072f0:	4607      	mov	r7, r0
 80072f2:	460c      	mov	r4, r1
 80072f4:	b10a      	cbz	r2, 80072fa <_printf_common+0x26>
 80072f6:	3301      	adds	r3, #1
 80072f8:	6033      	str	r3, [r6, #0]
 80072fa:	6823      	ldr	r3, [r4, #0]
 80072fc:	0699      	lsls	r1, r3, #26
 80072fe:	bf42      	ittt	mi
 8007300:	6833      	ldrmi	r3, [r6, #0]
 8007302:	3302      	addmi	r3, #2
 8007304:	6033      	strmi	r3, [r6, #0]
 8007306:	6825      	ldr	r5, [r4, #0]
 8007308:	f015 0506 	ands.w	r5, r5, #6
 800730c:	d106      	bne.n	800731c <_printf_common+0x48>
 800730e:	f104 0a19 	add.w	sl, r4, #25
 8007312:	68e3      	ldr	r3, [r4, #12]
 8007314:	6832      	ldr	r2, [r6, #0]
 8007316:	1a9b      	subs	r3, r3, r2
 8007318:	42ab      	cmp	r3, r5
 800731a:	dc26      	bgt.n	800736a <_printf_common+0x96>
 800731c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007320:	1e13      	subs	r3, r2, #0
 8007322:	6822      	ldr	r2, [r4, #0]
 8007324:	bf18      	it	ne
 8007326:	2301      	movne	r3, #1
 8007328:	0692      	lsls	r2, r2, #26
 800732a:	d42b      	bmi.n	8007384 <_printf_common+0xb0>
 800732c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007330:	4649      	mov	r1, r9
 8007332:	4638      	mov	r0, r7
 8007334:	47c0      	blx	r8
 8007336:	3001      	adds	r0, #1
 8007338:	d01e      	beq.n	8007378 <_printf_common+0xa4>
 800733a:	6823      	ldr	r3, [r4, #0]
 800733c:	6922      	ldr	r2, [r4, #16]
 800733e:	f003 0306 	and.w	r3, r3, #6
 8007342:	2b04      	cmp	r3, #4
 8007344:	bf02      	ittt	eq
 8007346:	68e5      	ldreq	r5, [r4, #12]
 8007348:	6833      	ldreq	r3, [r6, #0]
 800734a:	1aed      	subeq	r5, r5, r3
 800734c:	68a3      	ldr	r3, [r4, #8]
 800734e:	bf0c      	ite	eq
 8007350:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007354:	2500      	movne	r5, #0
 8007356:	4293      	cmp	r3, r2
 8007358:	bfc4      	itt	gt
 800735a:	1a9b      	subgt	r3, r3, r2
 800735c:	18ed      	addgt	r5, r5, r3
 800735e:	2600      	movs	r6, #0
 8007360:	341a      	adds	r4, #26
 8007362:	42b5      	cmp	r5, r6
 8007364:	d11a      	bne.n	800739c <_printf_common+0xc8>
 8007366:	2000      	movs	r0, #0
 8007368:	e008      	b.n	800737c <_printf_common+0xa8>
 800736a:	2301      	movs	r3, #1
 800736c:	4652      	mov	r2, sl
 800736e:	4649      	mov	r1, r9
 8007370:	4638      	mov	r0, r7
 8007372:	47c0      	blx	r8
 8007374:	3001      	adds	r0, #1
 8007376:	d103      	bne.n	8007380 <_printf_common+0xac>
 8007378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800737c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007380:	3501      	adds	r5, #1
 8007382:	e7c6      	b.n	8007312 <_printf_common+0x3e>
 8007384:	18e1      	adds	r1, r4, r3
 8007386:	1c5a      	adds	r2, r3, #1
 8007388:	2030      	movs	r0, #48	; 0x30
 800738a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800738e:	4422      	add	r2, r4
 8007390:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007394:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007398:	3302      	adds	r3, #2
 800739a:	e7c7      	b.n	800732c <_printf_common+0x58>
 800739c:	2301      	movs	r3, #1
 800739e:	4622      	mov	r2, r4
 80073a0:	4649      	mov	r1, r9
 80073a2:	4638      	mov	r0, r7
 80073a4:	47c0      	blx	r8
 80073a6:	3001      	adds	r0, #1
 80073a8:	d0e6      	beq.n	8007378 <_printf_common+0xa4>
 80073aa:	3601      	adds	r6, #1
 80073ac:	e7d9      	b.n	8007362 <_printf_common+0x8e>
	...

080073b0 <_printf_i>:
 80073b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b4:	7e0f      	ldrb	r7, [r1, #24]
 80073b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073b8:	2f78      	cmp	r7, #120	; 0x78
 80073ba:	4691      	mov	r9, r2
 80073bc:	4680      	mov	r8, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	469a      	mov	sl, r3
 80073c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073c6:	d807      	bhi.n	80073d8 <_printf_i+0x28>
 80073c8:	2f62      	cmp	r7, #98	; 0x62
 80073ca:	d80a      	bhi.n	80073e2 <_printf_i+0x32>
 80073cc:	2f00      	cmp	r7, #0
 80073ce:	f000 80d4 	beq.w	800757a <_printf_i+0x1ca>
 80073d2:	2f58      	cmp	r7, #88	; 0x58
 80073d4:	f000 80c0 	beq.w	8007558 <_printf_i+0x1a8>
 80073d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073e0:	e03a      	b.n	8007458 <_printf_i+0xa8>
 80073e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073e6:	2b15      	cmp	r3, #21
 80073e8:	d8f6      	bhi.n	80073d8 <_printf_i+0x28>
 80073ea:	a101      	add	r1, pc, #4	; (adr r1, 80073f0 <_printf_i+0x40>)
 80073ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073f0:	08007449 	.word	0x08007449
 80073f4:	0800745d 	.word	0x0800745d
 80073f8:	080073d9 	.word	0x080073d9
 80073fc:	080073d9 	.word	0x080073d9
 8007400:	080073d9 	.word	0x080073d9
 8007404:	080073d9 	.word	0x080073d9
 8007408:	0800745d 	.word	0x0800745d
 800740c:	080073d9 	.word	0x080073d9
 8007410:	080073d9 	.word	0x080073d9
 8007414:	080073d9 	.word	0x080073d9
 8007418:	080073d9 	.word	0x080073d9
 800741c:	08007561 	.word	0x08007561
 8007420:	08007489 	.word	0x08007489
 8007424:	0800751b 	.word	0x0800751b
 8007428:	080073d9 	.word	0x080073d9
 800742c:	080073d9 	.word	0x080073d9
 8007430:	08007583 	.word	0x08007583
 8007434:	080073d9 	.word	0x080073d9
 8007438:	08007489 	.word	0x08007489
 800743c:	080073d9 	.word	0x080073d9
 8007440:	080073d9 	.word	0x080073d9
 8007444:	08007523 	.word	0x08007523
 8007448:	682b      	ldr	r3, [r5, #0]
 800744a:	1d1a      	adds	r2, r3, #4
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	602a      	str	r2, [r5, #0]
 8007450:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007454:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007458:	2301      	movs	r3, #1
 800745a:	e09f      	b.n	800759c <_printf_i+0x1ec>
 800745c:	6820      	ldr	r0, [r4, #0]
 800745e:	682b      	ldr	r3, [r5, #0]
 8007460:	0607      	lsls	r7, r0, #24
 8007462:	f103 0104 	add.w	r1, r3, #4
 8007466:	6029      	str	r1, [r5, #0]
 8007468:	d501      	bpl.n	800746e <_printf_i+0xbe>
 800746a:	681e      	ldr	r6, [r3, #0]
 800746c:	e003      	b.n	8007476 <_printf_i+0xc6>
 800746e:	0646      	lsls	r6, r0, #25
 8007470:	d5fb      	bpl.n	800746a <_printf_i+0xba>
 8007472:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007476:	2e00      	cmp	r6, #0
 8007478:	da03      	bge.n	8007482 <_printf_i+0xd2>
 800747a:	232d      	movs	r3, #45	; 0x2d
 800747c:	4276      	negs	r6, r6
 800747e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007482:	485a      	ldr	r0, [pc, #360]	; (80075ec <_printf_i+0x23c>)
 8007484:	230a      	movs	r3, #10
 8007486:	e012      	b.n	80074ae <_printf_i+0xfe>
 8007488:	682b      	ldr	r3, [r5, #0]
 800748a:	6820      	ldr	r0, [r4, #0]
 800748c:	1d19      	adds	r1, r3, #4
 800748e:	6029      	str	r1, [r5, #0]
 8007490:	0605      	lsls	r5, r0, #24
 8007492:	d501      	bpl.n	8007498 <_printf_i+0xe8>
 8007494:	681e      	ldr	r6, [r3, #0]
 8007496:	e002      	b.n	800749e <_printf_i+0xee>
 8007498:	0641      	lsls	r1, r0, #25
 800749a:	d5fb      	bpl.n	8007494 <_printf_i+0xe4>
 800749c:	881e      	ldrh	r6, [r3, #0]
 800749e:	4853      	ldr	r0, [pc, #332]	; (80075ec <_printf_i+0x23c>)
 80074a0:	2f6f      	cmp	r7, #111	; 0x6f
 80074a2:	bf0c      	ite	eq
 80074a4:	2308      	moveq	r3, #8
 80074a6:	230a      	movne	r3, #10
 80074a8:	2100      	movs	r1, #0
 80074aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074ae:	6865      	ldr	r5, [r4, #4]
 80074b0:	60a5      	str	r5, [r4, #8]
 80074b2:	2d00      	cmp	r5, #0
 80074b4:	bfa2      	ittt	ge
 80074b6:	6821      	ldrge	r1, [r4, #0]
 80074b8:	f021 0104 	bicge.w	r1, r1, #4
 80074bc:	6021      	strge	r1, [r4, #0]
 80074be:	b90e      	cbnz	r6, 80074c4 <_printf_i+0x114>
 80074c0:	2d00      	cmp	r5, #0
 80074c2:	d04b      	beq.n	800755c <_printf_i+0x1ac>
 80074c4:	4615      	mov	r5, r2
 80074c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80074ca:	fb03 6711 	mls	r7, r3, r1, r6
 80074ce:	5dc7      	ldrb	r7, [r0, r7]
 80074d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074d4:	4637      	mov	r7, r6
 80074d6:	42bb      	cmp	r3, r7
 80074d8:	460e      	mov	r6, r1
 80074da:	d9f4      	bls.n	80074c6 <_printf_i+0x116>
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d10b      	bne.n	80074f8 <_printf_i+0x148>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	07de      	lsls	r6, r3, #31
 80074e4:	d508      	bpl.n	80074f8 <_printf_i+0x148>
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	6861      	ldr	r1, [r4, #4]
 80074ea:	4299      	cmp	r1, r3
 80074ec:	bfde      	ittt	le
 80074ee:	2330      	movle	r3, #48	; 0x30
 80074f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80074f8:	1b52      	subs	r2, r2, r5
 80074fa:	6122      	str	r2, [r4, #16]
 80074fc:	f8cd a000 	str.w	sl, [sp]
 8007500:	464b      	mov	r3, r9
 8007502:	aa03      	add	r2, sp, #12
 8007504:	4621      	mov	r1, r4
 8007506:	4640      	mov	r0, r8
 8007508:	f7ff fee4 	bl	80072d4 <_printf_common>
 800750c:	3001      	adds	r0, #1
 800750e:	d14a      	bne.n	80075a6 <_printf_i+0x1f6>
 8007510:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007514:	b004      	add	sp, #16
 8007516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	f043 0320 	orr.w	r3, r3, #32
 8007520:	6023      	str	r3, [r4, #0]
 8007522:	4833      	ldr	r0, [pc, #204]	; (80075f0 <_printf_i+0x240>)
 8007524:	2778      	movs	r7, #120	; 0x78
 8007526:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	6829      	ldr	r1, [r5, #0]
 800752e:	061f      	lsls	r7, r3, #24
 8007530:	f851 6b04 	ldr.w	r6, [r1], #4
 8007534:	d402      	bmi.n	800753c <_printf_i+0x18c>
 8007536:	065f      	lsls	r7, r3, #25
 8007538:	bf48      	it	mi
 800753a:	b2b6      	uxthmi	r6, r6
 800753c:	07df      	lsls	r7, r3, #31
 800753e:	bf48      	it	mi
 8007540:	f043 0320 	orrmi.w	r3, r3, #32
 8007544:	6029      	str	r1, [r5, #0]
 8007546:	bf48      	it	mi
 8007548:	6023      	strmi	r3, [r4, #0]
 800754a:	b91e      	cbnz	r6, 8007554 <_printf_i+0x1a4>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	f023 0320 	bic.w	r3, r3, #32
 8007552:	6023      	str	r3, [r4, #0]
 8007554:	2310      	movs	r3, #16
 8007556:	e7a7      	b.n	80074a8 <_printf_i+0xf8>
 8007558:	4824      	ldr	r0, [pc, #144]	; (80075ec <_printf_i+0x23c>)
 800755a:	e7e4      	b.n	8007526 <_printf_i+0x176>
 800755c:	4615      	mov	r5, r2
 800755e:	e7bd      	b.n	80074dc <_printf_i+0x12c>
 8007560:	682b      	ldr	r3, [r5, #0]
 8007562:	6826      	ldr	r6, [r4, #0]
 8007564:	6961      	ldr	r1, [r4, #20]
 8007566:	1d18      	adds	r0, r3, #4
 8007568:	6028      	str	r0, [r5, #0]
 800756a:	0635      	lsls	r5, r6, #24
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	d501      	bpl.n	8007574 <_printf_i+0x1c4>
 8007570:	6019      	str	r1, [r3, #0]
 8007572:	e002      	b.n	800757a <_printf_i+0x1ca>
 8007574:	0670      	lsls	r0, r6, #25
 8007576:	d5fb      	bpl.n	8007570 <_printf_i+0x1c0>
 8007578:	8019      	strh	r1, [r3, #0]
 800757a:	2300      	movs	r3, #0
 800757c:	6123      	str	r3, [r4, #16]
 800757e:	4615      	mov	r5, r2
 8007580:	e7bc      	b.n	80074fc <_printf_i+0x14c>
 8007582:	682b      	ldr	r3, [r5, #0]
 8007584:	1d1a      	adds	r2, r3, #4
 8007586:	602a      	str	r2, [r5, #0]
 8007588:	681d      	ldr	r5, [r3, #0]
 800758a:	6862      	ldr	r2, [r4, #4]
 800758c:	2100      	movs	r1, #0
 800758e:	4628      	mov	r0, r5
 8007590:	f7f8 fe46 	bl	8000220 <memchr>
 8007594:	b108      	cbz	r0, 800759a <_printf_i+0x1ea>
 8007596:	1b40      	subs	r0, r0, r5
 8007598:	6060      	str	r0, [r4, #4]
 800759a:	6863      	ldr	r3, [r4, #4]
 800759c:	6123      	str	r3, [r4, #16]
 800759e:	2300      	movs	r3, #0
 80075a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a4:	e7aa      	b.n	80074fc <_printf_i+0x14c>
 80075a6:	6923      	ldr	r3, [r4, #16]
 80075a8:	462a      	mov	r2, r5
 80075aa:	4649      	mov	r1, r9
 80075ac:	4640      	mov	r0, r8
 80075ae:	47d0      	blx	sl
 80075b0:	3001      	adds	r0, #1
 80075b2:	d0ad      	beq.n	8007510 <_printf_i+0x160>
 80075b4:	6823      	ldr	r3, [r4, #0]
 80075b6:	079b      	lsls	r3, r3, #30
 80075b8:	d413      	bmi.n	80075e2 <_printf_i+0x232>
 80075ba:	68e0      	ldr	r0, [r4, #12]
 80075bc:	9b03      	ldr	r3, [sp, #12]
 80075be:	4298      	cmp	r0, r3
 80075c0:	bfb8      	it	lt
 80075c2:	4618      	movlt	r0, r3
 80075c4:	e7a6      	b.n	8007514 <_printf_i+0x164>
 80075c6:	2301      	movs	r3, #1
 80075c8:	4632      	mov	r2, r6
 80075ca:	4649      	mov	r1, r9
 80075cc:	4640      	mov	r0, r8
 80075ce:	47d0      	blx	sl
 80075d0:	3001      	adds	r0, #1
 80075d2:	d09d      	beq.n	8007510 <_printf_i+0x160>
 80075d4:	3501      	adds	r5, #1
 80075d6:	68e3      	ldr	r3, [r4, #12]
 80075d8:	9903      	ldr	r1, [sp, #12]
 80075da:	1a5b      	subs	r3, r3, r1
 80075dc:	42ab      	cmp	r3, r5
 80075de:	dcf2      	bgt.n	80075c6 <_printf_i+0x216>
 80075e0:	e7eb      	b.n	80075ba <_printf_i+0x20a>
 80075e2:	2500      	movs	r5, #0
 80075e4:	f104 0619 	add.w	r6, r4, #25
 80075e8:	e7f5      	b.n	80075d6 <_printf_i+0x226>
 80075ea:	bf00      	nop
 80075ec:	0800797b 	.word	0x0800797b
 80075f0:	0800798c 	.word	0x0800798c

080075f4 <__sflush_r>:
 80075f4:	898a      	ldrh	r2, [r1, #12]
 80075f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075fa:	4605      	mov	r5, r0
 80075fc:	0710      	lsls	r0, r2, #28
 80075fe:	460c      	mov	r4, r1
 8007600:	d458      	bmi.n	80076b4 <__sflush_r+0xc0>
 8007602:	684b      	ldr	r3, [r1, #4]
 8007604:	2b00      	cmp	r3, #0
 8007606:	dc05      	bgt.n	8007614 <__sflush_r+0x20>
 8007608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800760a:	2b00      	cmp	r3, #0
 800760c:	dc02      	bgt.n	8007614 <__sflush_r+0x20>
 800760e:	2000      	movs	r0, #0
 8007610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007616:	2e00      	cmp	r6, #0
 8007618:	d0f9      	beq.n	800760e <__sflush_r+0x1a>
 800761a:	2300      	movs	r3, #0
 800761c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007620:	682f      	ldr	r7, [r5, #0]
 8007622:	6a21      	ldr	r1, [r4, #32]
 8007624:	602b      	str	r3, [r5, #0]
 8007626:	d032      	beq.n	800768e <__sflush_r+0x9a>
 8007628:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800762a:	89a3      	ldrh	r3, [r4, #12]
 800762c:	075a      	lsls	r2, r3, #29
 800762e:	d505      	bpl.n	800763c <__sflush_r+0x48>
 8007630:	6863      	ldr	r3, [r4, #4]
 8007632:	1ac0      	subs	r0, r0, r3
 8007634:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007636:	b10b      	cbz	r3, 800763c <__sflush_r+0x48>
 8007638:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800763a:	1ac0      	subs	r0, r0, r3
 800763c:	2300      	movs	r3, #0
 800763e:	4602      	mov	r2, r0
 8007640:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007642:	6a21      	ldr	r1, [r4, #32]
 8007644:	4628      	mov	r0, r5
 8007646:	47b0      	blx	r6
 8007648:	1c43      	adds	r3, r0, #1
 800764a:	89a3      	ldrh	r3, [r4, #12]
 800764c:	d106      	bne.n	800765c <__sflush_r+0x68>
 800764e:	6829      	ldr	r1, [r5, #0]
 8007650:	291d      	cmp	r1, #29
 8007652:	d82b      	bhi.n	80076ac <__sflush_r+0xb8>
 8007654:	4a29      	ldr	r2, [pc, #164]	; (80076fc <__sflush_r+0x108>)
 8007656:	410a      	asrs	r2, r1
 8007658:	07d6      	lsls	r6, r2, #31
 800765a:	d427      	bmi.n	80076ac <__sflush_r+0xb8>
 800765c:	2200      	movs	r2, #0
 800765e:	6062      	str	r2, [r4, #4]
 8007660:	04d9      	lsls	r1, r3, #19
 8007662:	6922      	ldr	r2, [r4, #16]
 8007664:	6022      	str	r2, [r4, #0]
 8007666:	d504      	bpl.n	8007672 <__sflush_r+0x7e>
 8007668:	1c42      	adds	r2, r0, #1
 800766a:	d101      	bne.n	8007670 <__sflush_r+0x7c>
 800766c:	682b      	ldr	r3, [r5, #0]
 800766e:	b903      	cbnz	r3, 8007672 <__sflush_r+0x7e>
 8007670:	6560      	str	r0, [r4, #84]	; 0x54
 8007672:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007674:	602f      	str	r7, [r5, #0]
 8007676:	2900      	cmp	r1, #0
 8007678:	d0c9      	beq.n	800760e <__sflush_r+0x1a>
 800767a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800767e:	4299      	cmp	r1, r3
 8007680:	d002      	beq.n	8007688 <__sflush_r+0x94>
 8007682:	4628      	mov	r0, r5
 8007684:	f7ff fc96 	bl	8006fb4 <_free_r>
 8007688:	2000      	movs	r0, #0
 800768a:	6360      	str	r0, [r4, #52]	; 0x34
 800768c:	e7c0      	b.n	8007610 <__sflush_r+0x1c>
 800768e:	2301      	movs	r3, #1
 8007690:	4628      	mov	r0, r5
 8007692:	47b0      	blx	r6
 8007694:	1c41      	adds	r1, r0, #1
 8007696:	d1c8      	bne.n	800762a <__sflush_r+0x36>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d0c5      	beq.n	800762a <__sflush_r+0x36>
 800769e:	2b1d      	cmp	r3, #29
 80076a0:	d001      	beq.n	80076a6 <__sflush_r+0xb2>
 80076a2:	2b16      	cmp	r3, #22
 80076a4:	d101      	bne.n	80076aa <__sflush_r+0xb6>
 80076a6:	602f      	str	r7, [r5, #0]
 80076a8:	e7b1      	b.n	800760e <__sflush_r+0x1a>
 80076aa:	89a3      	ldrh	r3, [r4, #12]
 80076ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b0:	81a3      	strh	r3, [r4, #12]
 80076b2:	e7ad      	b.n	8007610 <__sflush_r+0x1c>
 80076b4:	690f      	ldr	r7, [r1, #16]
 80076b6:	2f00      	cmp	r7, #0
 80076b8:	d0a9      	beq.n	800760e <__sflush_r+0x1a>
 80076ba:	0793      	lsls	r3, r2, #30
 80076bc:	680e      	ldr	r6, [r1, #0]
 80076be:	bf08      	it	eq
 80076c0:	694b      	ldreq	r3, [r1, #20]
 80076c2:	600f      	str	r7, [r1, #0]
 80076c4:	bf18      	it	ne
 80076c6:	2300      	movne	r3, #0
 80076c8:	eba6 0807 	sub.w	r8, r6, r7
 80076cc:	608b      	str	r3, [r1, #8]
 80076ce:	f1b8 0f00 	cmp.w	r8, #0
 80076d2:	dd9c      	ble.n	800760e <__sflush_r+0x1a>
 80076d4:	6a21      	ldr	r1, [r4, #32]
 80076d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076d8:	4643      	mov	r3, r8
 80076da:	463a      	mov	r2, r7
 80076dc:	4628      	mov	r0, r5
 80076de:	47b0      	blx	r6
 80076e0:	2800      	cmp	r0, #0
 80076e2:	dc06      	bgt.n	80076f2 <__sflush_r+0xfe>
 80076e4:	89a3      	ldrh	r3, [r4, #12]
 80076e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076ea:	81a3      	strh	r3, [r4, #12]
 80076ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076f0:	e78e      	b.n	8007610 <__sflush_r+0x1c>
 80076f2:	4407      	add	r7, r0
 80076f4:	eba8 0800 	sub.w	r8, r8, r0
 80076f8:	e7e9      	b.n	80076ce <__sflush_r+0xda>
 80076fa:	bf00      	nop
 80076fc:	dfbffffe 	.word	0xdfbffffe

08007700 <_fflush_r>:
 8007700:	b538      	push	{r3, r4, r5, lr}
 8007702:	690b      	ldr	r3, [r1, #16]
 8007704:	4605      	mov	r5, r0
 8007706:	460c      	mov	r4, r1
 8007708:	b913      	cbnz	r3, 8007710 <_fflush_r+0x10>
 800770a:	2500      	movs	r5, #0
 800770c:	4628      	mov	r0, r5
 800770e:	bd38      	pop	{r3, r4, r5, pc}
 8007710:	b118      	cbz	r0, 800771a <_fflush_r+0x1a>
 8007712:	6a03      	ldr	r3, [r0, #32]
 8007714:	b90b      	cbnz	r3, 800771a <_fflush_r+0x1a>
 8007716:	f7ff f9f3 	bl	8006b00 <__sinit>
 800771a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d0f3      	beq.n	800770a <_fflush_r+0xa>
 8007722:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007724:	07d0      	lsls	r0, r2, #31
 8007726:	d404      	bmi.n	8007732 <_fflush_r+0x32>
 8007728:	0599      	lsls	r1, r3, #22
 800772a:	d402      	bmi.n	8007732 <_fflush_r+0x32>
 800772c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800772e:	f7ff fc30 	bl	8006f92 <__retarget_lock_acquire_recursive>
 8007732:	4628      	mov	r0, r5
 8007734:	4621      	mov	r1, r4
 8007736:	f7ff ff5d 	bl	80075f4 <__sflush_r>
 800773a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800773c:	07da      	lsls	r2, r3, #31
 800773e:	4605      	mov	r5, r0
 8007740:	d4e4      	bmi.n	800770c <_fflush_r+0xc>
 8007742:	89a3      	ldrh	r3, [r4, #12]
 8007744:	059b      	lsls	r3, r3, #22
 8007746:	d4e1      	bmi.n	800770c <_fflush_r+0xc>
 8007748:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800774a:	f7ff fc23 	bl	8006f94 <__retarget_lock_release_recursive>
 800774e:	e7dd      	b.n	800770c <_fflush_r+0xc>

08007750 <__swhatbuf_r>:
 8007750:	b570      	push	{r4, r5, r6, lr}
 8007752:	460c      	mov	r4, r1
 8007754:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007758:	2900      	cmp	r1, #0
 800775a:	b096      	sub	sp, #88	; 0x58
 800775c:	4615      	mov	r5, r2
 800775e:	461e      	mov	r6, r3
 8007760:	da0d      	bge.n	800777e <__swhatbuf_r+0x2e>
 8007762:	89a3      	ldrh	r3, [r4, #12]
 8007764:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007768:	f04f 0100 	mov.w	r1, #0
 800776c:	bf0c      	ite	eq
 800776e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007772:	2340      	movne	r3, #64	; 0x40
 8007774:	2000      	movs	r0, #0
 8007776:	6031      	str	r1, [r6, #0]
 8007778:	602b      	str	r3, [r5, #0]
 800777a:	b016      	add	sp, #88	; 0x58
 800777c:	bd70      	pop	{r4, r5, r6, pc}
 800777e:	466a      	mov	r2, sp
 8007780:	f000 f848 	bl	8007814 <_fstat_r>
 8007784:	2800      	cmp	r0, #0
 8007786:	dbec      	blt.n	8007762 <__swhatbuf_r+0x12>
 8007788:	9901      	ldr	r1, [sp, #4]
 800778a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800778e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007792:	4259      	negs	r1, r3
 8007794:	4159      	adcs	r1, r3
 8007796:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800779a:	e7eb      	b.n	8007774 <__swhatbuf_r+0x24>

0800779c <__smakebuf_r>:
 800779c:	898b      	ldrh	r3, [r1, #12]
 800779e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077a0:	079d      	lsls	r5, r3, #30
 80077a2:	4606      	mov	r6, r0
 80077a4:	460c      	mov	r4, r1
 80077a6:	d507      	bpl.n	80077b8 <__smakebuf_r+0x1c>
 80077a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077ac:	6023      	str	r3, [r4, #0]
 80077ae:	6123      	str	r3, [r4, #16]
 80077b0:	2301      	movs	r3, #1
 80077b2:	6163      	str	r3, [r4, #20]
 80077b4:	b002      	add	sp, #8
 80077b6:	bd70      	pop	{r4, r5, r6, pc}
 80077b8:	ab01      	add	r3, sp, #4
 80077ba:	466a      	mov	r2, sp
 80077bc:	f7ff ffc8 	bl	8007750 <__swhatbuf_r>
 80077c0:	9900      	ldr	r1, [sp, #0]
 80077c2:	4605      	mov	r5, r0
 80077c4:	4630      	mov	r0, r6
 80077c6:	f7ff f883 	bl	80068d0 <_malloc_r>
 80077ca:	b948      	cbnz	r0, 80077e0 <__smakebuf_r+0x44>
 80077cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077d0:	059a      	lsls	r2, r3, #22
 80077d2:	d4ef      	bmi.n	80077b4 <__smakebuf_r+0x18>
 80077d4:	f023 0303 	bic.w	r3, r3, #3
 80077d8:	f043 0302 	orr.w	r3, r3, #2
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	e7e3      	b.n	80077a8 <__smakebuf_r+0xc>
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	6020      	str	r0, [r4, #0]
 80077e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077e8:	81a3      	strh	r3, [r4, #12]
 80077ea:	9b00      	ldr	r3, [sp, #0]
 80077ec:	6163      	str	r3, [r4, #20]
 80077ee:	9b01      	ldr	r3, [sp, #4]
 80077f0:	6120      	str	r0, [r4, #16]
 80077f2:	b15b      	cbz	r3, 800780c <__smakebuf_r+0x70>
 80077f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077f8:	4630      	mov	r0, r6
 80077fa:	f000 f81d 	bl	8007838 <_isatty_r>
 80077fe:	b128      	cbz	r0, 800780c <__smakebuf_r+0x70>
 8007800:	89a3      	ldrh	r3, [r4, #12]
 8007802:	f023 0303 	bic.w	r3, r3, #3
 8007806:	f043 0301 	orr.w	r3, r3, #1
 800780a:	81a3      	strh	r3, [r4, #12]
 800780c:	89a3      	ldrh	r3, [r4, #12]
 800780e:	431d      	orrs	r5, r3
 8007810:	81a5      	strh	r5, [r4, #12]
 8007812:	e7cf      	b.n	80077b4 <__smakebuf_r+0x18>

08007814 <_fstat_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	4d07      	ldr	r5, [pc, #28]	; (8007834 <_fstat_r+0x20>)
 8007818:	2300      	movs	r3, #0
 800781a:	4604      	mov	r4, r0
 800781c:	4608      	mov	r0, r1
 800781e:	4611      	mov	r1, r2
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	f7fb f9fe 	bl	8002c22 <_fstat>
 8007826:	1c43      	adds	r3, r0, #1
 8007828:	d102      	bne.n	8007830 <_fstat_r+0x1c>
 800782a:	682b      	ldr	r3, [r5, #0]
 800782c:	b103      	cbz	r3, 8007830 <_fstat_r+0x1c>
 800782e:	6023      	str	r3, [r4, #0]
 8007830:	bd38      	pop	{r3, r4, r5, pc}
 8007832:	bf00      	nop
 8007834:	2000083c 	.word	0x2000083c

08007838 <_isatty_r>:
 8007838:	b538      	push	{r3, r4, r5, lr}
 800783a:	4d06      	ldr	r5, [pc, #24]	; (8007854 <_isatty_r+0x1c>)
 800783c:	2300      	movs	r3, #0
 800783e:	4604      	mov	r4, r0
 8007840:	4608      	mov	r0, r1
 8007842:	602b      	str	r3, [r5, #0]
 8007844:	f7fb f9fd 	bl	8002c42 <_isatty>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	d102      	bne.n	8007852 <_isatty_r+0x1a>
 800784c:	682b      	ldr	r3, [r5, #0]
 800784e:	b103      	cbz	r3, 8007852 <_isatty_r+0x1a>
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	bd38      	pop	{r3, r4, r5, pc}
 8007854:	2000083c 	.word	0x2000083c

08007858 <_init>:
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785a:	bf00      	nop
 800785c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785e:	bc08      	pop	{r3}
 8007860:	469e      	mov	lr, r3
 8007862:	4770      	bx	lr

08007864 <_fini>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	bf00      	nop
 8007868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786a:	bc08      	pop	{r3}
 800786c:	469e      	mov	lr, r3
 800786e:	4770      	bx	lr


holonomic_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae88  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800b068  0800b068  0001b068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4d8  0800b4d8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800b4d8  0800b4d8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b4d8  0800b4d8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b4d8  0800b4d8  0001b4d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b4e0  0800b4e0  0001b4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800b4e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000068  0800b550  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  0800b550  00020864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   000212e5  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004285  00000000  00000000  000413c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001490  00000000  00000000  00045648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fda  00000000  00000000  00046ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024775  00000000  00000000  00047ab2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001630b  00000000  00000000  0006c227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db647  00000000  00000000  00082532  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007634  00000000  00000000  0015db7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  001651b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b050 	.word	0x0800b050

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800b050 	.word	0x0800b050

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>:

#include "stdio.h"

#include <string.h>

ChampiCan::ChampiCan(FDCAN_HandleTypeDef *handle_fdcan) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef+0x50>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	601a      	str	r2, [r3, #0]

	handle_fdcan_ = handle_fdcan;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	605a      	str	r2, [r3, #4]

	tx_header_.IdType = FDCAN_STANDARD_ID;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
	tx_header_.TxFrameType = FDCAN_DATA_FRAME;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
	tx_header_.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
	tx_header_.BitRateSwitch = FDCAN_BRS_OFF;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
	tx_header_.FDFormat = FDCAN_CLASSIC_CAN;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
	tx_header_.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
	tx_header_.MessageMarker = 0;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28

}
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	0800b3dc 	.word	0x0800b3dc

08000cf0 <_ZN9ChampiCanC1Ev>:

ChampiCan::ChampiCan() {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <_ZN9ChampiCanC1Ev+0x1c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	601a      	str	r2, [r3, #0]
}
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	0800b3dc 	.word	0x0800b3dc

08000d10 <_ZN9ChampiCan5startEv>:

int ChampiCan::start() {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(handle_fdcan_) != HAL_OK)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f005 fec5 	bl	8006aac <HAL_FDCAN_Start>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	bf14      	ite	ne
 8000d28:	2301      	movne	r3, #1
 8000d2a:	2300      	moveq	r3, #0
 8000d2c:	b2db      	uxtb	r3, r3
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <_ZN9ChampiCan5startEv+0x26>
	{
		return 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e011      	b.n	8000d5a <_ZN9ChampiCan5startEv+0x4a>
	}
	if (HAL_FDCAN_ActivateNotification(handle_fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f006 f828 	bl	8006d94 <HAL_FDCAN_ActivateNotification>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	bf14      	ite	ne
 8000d4a:	2301      	movne	r3, #1
 8000d4c:	2300      	moveq	r3, #0
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <_ZN9ChampiCan5startEv+0x48>
	{
		return 1;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e000      	b.n	8000d5a <_ZN9ChampiCan5startEv+0x4a>
	}
	return 0;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
	...

08000d64 <_ZN9ChampiCan10send_frameEmPhm>:

int ChampiCan::send_frame(uint32_t id, uint8_t *frame_data, uint32_t size) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]
	tx_header_.Identifier = id;
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	68ba      	ldr	r2, [r7, #8]
 8000d76:	609a      	str	r2, [r3, #8]
	tx_header_.DataLength = size;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	615a      	str	r2, [r3, #20]

    if (HAL_FDCAN_AddMessageToTxFifoQ(handle_fdcan_, &tx_header_, frame_data) != HAL_OK)
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	6858      	ldr	r0, [r3, #4]
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	3308      	adds	r3, #8
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f005 feb7 	bl	8006afc <HAL_FDCAN_AddMessageToTxFifoQ>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	bf14      	ite	ne
 8000d94:	2301      	movne	r3, #1
 8000d96:	2300      	moveq	r3, #0
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d004      	beq.n	8000da8 <_ZN9ChampiCan10send_frameEmPhm+0x44>
    {
      /* Transmission request Error */
  	  printf("ERROR: Frame not sent\n");
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <_ZN9ChampiCan10send_frameEmPhm+0x50>)
 8000da0:	f009 fb46 	bl	800a430 <puts>
  	  return 1;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e000      	b.n	8000daa <_ZN9ChampiCan10send_frameEmPhm+0x46>
    }
    return 0;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	0800b068 	.word	0x0800b068

08000db8 <_ZN9ChampiCan8send_msgEmPhm>:

int ChampiCan::send_msg(uint32_t id, uint8_t *msg, uint32_t msg_size) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
 8000dc4:	603b      	str	r3, [r7, #0]

	static uint16_t msg_number = 0;

	if (msg_size > 512) {
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000dcc:	d901      	bls.n	8000dd2 <_ZN9ChampiCan8send_msgEmPhm+0x1a>
		return 1;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e084      	b.n	8000edc <_ZN9ChampiCan8send_msgEmPhm+0x124>
	}

	uint8_t frame_data[8] = {0};
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	61bb      	str	r3, [r7, #24]
	uint16_t nb_frames = (uint16_t) msg_size / 6 + (msg_size % 6 > 0 ? 1 : 0);
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	b29b      	uxth	r3, r3
 8000dde:	4a41      	ldr	r2, [pc, #260]	; (8000ee4 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000de0:	fba2 2303 	umull	r2, r3, r2, r3
 8000de4:	089b      	lsrs	r3, r3, #2
 8000de6:	b298      	uxth	r0, r3
 8000de8:	6839      	ldr	r1, [r7, #0]
 8000dea:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000dec:	fba3 2301 	umull	r2, r3, r3, r1
 8000df0:	089a      	lsrs	r2, r3, #2
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	1aca      	subs	r2, r1, r3
 8000dfc:	2a00      	cmp	r2, #0
 8000dfe:	d001      	beq.n	8000e04 <_ZN9ChampiCan8send_msgEmPhm+0x4c>
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <_ZN9ChampiCan8send_msgEmPhm+0x4e>
 8000e04:	2300      	movs	r3, #0
 8000e06:	4403      	add	r3, r0
 8000e08:	83fb      	strh	r3, [r7, #30]

	for(uint16_t i=0; i<nb_frames; i++) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e0e:	e053      	b.n	8000eb8 <_ZN9ChampiCan8send_msgEmPhm+0x100>

		// Frame descriptor
		uint16_t frame_descriptor = msg_number << 12 | (nb_frames << 6) | i;
 8000e10:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000e12:	881b      	ldrh	r3, [r3, #0]
 8000e14:	031b      	lsls	r3, r3, #12
 8000e16:	b21a      	sxth	r2, r3
 8000e18:	8bfb      	ldrh	r3, [r7, #30]
 8000e1a:	019b      	lsls	r3, r3, #6
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	827b      	strh	r3, [r7, #18]
 8000e2e:	8a7b      	ldrh	r3, [r7, #18]
		memcpy(frame_data, (char*)&frame_descriptor, 2);
 8000e30:	82bb      	strh	r3, [r7, #20]

		// Data size
		int num_bytes_frame = 6;
 8000e32:	2306      	movs	r3, #6
 8000e34:	623b      	str	r3, [r7, #32]
		if(i==nb_frames-1) {
 8000e36:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e38:	8bfb      	ldrh	r3, [r7, #30]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	429a      	cmp	r2, r3
 8000e3e:	d10a      	bne.n	8000e56 <_ZN9ChampiCan8send_msgEmPhm+0x9e>
			num_bytes_frame = msg_size % 6;
 8000e40:	6839      	ldr	r1, [r7, #0]
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000e44:	fba3 2301 	umull	r2, r3, r3, r1
 8000e48:	089a      	lsrs	r2, r3, #2
 8000e4a:	4613      	mov	r3, r2
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	4413      	add	r3, r2
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	1aca      	subs	r2, r1, r3
 8000e54:	623a      	str	r2, [r7, #32]
		}

		// Data
		memcpy(frame_data+2, msg + i*6, num_bytes_frame);
 8000e56:	f107 0014 	add.w	r0, r7, #20
 8000e5a:	3002      	adds	r0, #2
 8000e5c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e5e:	4613      	mov	r3, r2
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	4413      	add	r3, r2
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	461a      	mov	r2, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	6a3a      	ldr	r2, [r7, #32]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f009 fc8d 	bl	800a78e <memcpy>

		// Send
		if(send_frame(id, frame_data, num_bytes_frame+2) != 0) {
 8000e74:	6a3b      	ldr	r3, [r7, #32]
 8000e76:	3302      	adds	r3, #2
 8000e78:	f107 0214 	add.w	r2, r7, #20
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	f7ff ff70 	bl	8000d64 <_ZN9ChampiCan10send_frameEmPhm>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	bf14      	ite	ne
 8000e8a:	2301      	movne	r3, #1
 8000e8c:	2300      	moveq	r3, #0
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d00e      	beq.n	8000eb2 <_ZN9ChampiCan8send_msgEmPhm+0xfa>
			msg_number = (msg_number + 1) % 4;
 8000e94:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	425a      	negs	r2, r3
 8000e9c:	f003 0303 	and.w	r3, r3, #3
 8000ea0:	f002 0203 	and.w	r2, r2, #3
 8000ea4:	bf58      	it	pl
 8000ea6:	4253      	negpl	r3, r2
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000eac:	801a      	strh	r2, [r3, #0]
			return 1;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e014      	b.n	8000edc <_ZN9ChampiCan8send_msgEmPhm+0x124>
	for(uint16_t i=0; i<nb_frames; i++) {
 8000eb2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000eb8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000eba:	8bfb      	ldrh	r3, [r7, #30]
 8000ebc:	429a      	cmp	r2, r3
 8000ebe:	d3a7      	bcc.n	8000e10 <_ZN9ChampiCan8send_msgEmPhm+0x58>
		}
	}

    msg_number = (msg_number + 1) % 4;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	425a      	negs	r2, r3
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	f002 0203 	and.w	r2, r2, #3
 8000ed0:	bf58      	it	pl
 8000ed2:	4253      	negpl	r3, r2
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b04      	ldr	r3, [pc, #16]	; (8000ee8 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000ed8:	801a      	strh	r2, [r3, #0]

    return 0;
 8000eda:	2300      	movs	r3, #0
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	3728      	adds	r7, #40	; 0x28
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	aaaaaaab 	.word	0xaaaaaaab
 8000ee8:	20000084 	.word	0x20000084

08000eec <_ZN9ChampiCanD1Ev>:


ChampiCan::~ChampiCan() {
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	4a04      	ldr	r2, [pc, #16]	; (8000f08 <_ZN9ChampiCanD1Ev+0x1c>)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	0800b3dc 	.word	0x0800b3dc

08000f0c <_ZN9ChampiCanD0Ev>:
ChampiCan::~ChampiCan() {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
}
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ffe9 	bl	8000eec <_ZN9ChampiCanD1Ev>
 8000f1a:	212c      	movs	r1, #44	; 0x2c
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f008 fefb 	bl	8009d18 <_ZdlPvj>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <_Z3subPfS_S_>:

Vel sub(Vel vel1, Vel vel2) {
	return {vel1.x - vel2.x, vel1.y - vel2.y, vel1.theta - vel2.theta};
}

void sub(float* arr1, float* arr2, float* ret) {
 8000f2c:	b480      	push	{r7}
 8000f2e:	b087      	sub	sp, #28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	for(int i=0; i<3; i++) {
 8000f38:	2300      	movs	r3, #0
 8000f3a:	617b      	str	r3, [r7, #20]
 8000f3c:	e016      	b.n	8000f6c <_Z3subPfS_S_+0x40>
		ret[i] = arr1[i] - arr2[i];
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	4413      	add	r3, r2
 8000f46:	ed93 7a00 	vldr	s14, [r3]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	4413      	add	r3, r2
 8000f52:	edd3 7a00 	vldr	s15, [r3]
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f62:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	617b      	str	r3, [r7, #20]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	2b02      	cmp	r3, #2
 8000f70:	dde5      	ble.n	8000f3e <_Z3subPfS_S_+0x12>
	}
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	371c      	adds	r7, #28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <_Z3absPfS_>:

void abs(float* arr, float* ret) {
 8000f80:	b480      	push	{r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	60fb      	str	r3, [r7, #12]
 8000f8e:	e026      	b.n	8000fde <_Z3absPfS_+0x5e>
		if(arr[i]>=0) {
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	4413      	add	r3, r2
 8000f98:	edd3 7a00 	vldr	s15, [r3]
 8000f9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa4:	db0a      	blt.n	8000fbc <_Z3absPfS_+0x3c>
			ret[i] = arr[i];
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	441a      	add	r2, r3
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	6839      	ldr	r1, [r7, #0]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	6812      	ldr	r2, [r2, #0]
 8000fb8:	601a      	str	r2, [r3, #0]
 8000fba:	e00d      	b.n	8000fd8 <_Z3absPfS_+0x58>
		}
		else {
			ret[i] = -arr[i];
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	687a      	ldr	r2, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	edd3 7a00 	vldr	s15, [r3]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	683a      	ldr	r2, [r7, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	eef1 7a67 	vneg.f32	s15, s15
 8000fd4:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	ddd5      	ble.n	8000f90 <_Z3absPfS_+0x10>
		}
	}
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3714      	adds	r7, #20
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <_Z13get_index_maxPf>:

int get_index_max(float* arr) {
 8000ff2:	b480      	push	{r7}
 8000ff4:	b083      	sub	sp, #12
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	6078      	str	r0, [r7, #4]
	if(arr[0] >= arr[1] && arr[0] >= arr[2]) {
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	ed93 7a00 	vldr	s14, [r3]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3304      	adds	r3, #4
 8001004:	edd3 7a00 	vldr	s15, [r3]
 8001008:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800100c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001010:	db0d      	blt.n	800102e <_Z13get_index_maxPf+0x3c>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	ed93 7a00 	vldr	s14, [r3]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3308      	adds	r3, #8
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001028:	db01      	blt.n	800102e <_Z13get_index_maxPf+0x3c>
		return 0;
 800102a:	2300      	movs	r3, #0
 800102c:	e01b      	b.n	8001066 <_Z13get_index_maxPf+0x74>
	}
	else if(arr[1] >= arr[0] && arr[1] >= arr[2]) {
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	3304      	adds	r3, #4
 8001032:	ed93 7a00 	vldr	s14, [r3]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001044:	db0e      	blt.n	8001064 <_Z13get_index_maxPf+0x72>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	3304      	adds	r3, #4
 800104a:	ed93 7a00 	vldr	s14, [r3]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	3308      	adds	r3, #8
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800105a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105e:	db01      	blt.n	8001064 <_Z13get_index_maxPf+0x72>
		return 1;
 8001060:	2301      	movs	r3, #1
 8001062:	e000      	b.n	8001066 <_Z13get_index_maxPf+0x74>
	}
	else {
		return 2;
 8001064:	2302      	movs	r3, #2
	}
}
 8001066:	4618      	mov	r0, r3
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr

08001072 <_ZN3VelC1Ev>:
#define HOLONOMICDRIVE3_H_


#include "Stepper.h"

struct Vel {
 8001072:	b480      	push	{r7}
 8001074:	b083      	sub	sp, #12
 8001076:	af00      	add	r7, sp, #0
 8001078:	6078      	str	r0, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f04f 0200 	mov.w	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f04f 0200 	mov.w	r2, #0
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <_ZN7StepperaSERKS_>:
#ifndef SRC_STEPPER_H_
#define SRC_STEPPER_H_

#include "stm32g4xx_hal.h"

class Stepper {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	1d10      	adds	r0, r2, #4
 80010b0:	3304      	adds	r3, #4
 80010b2:	224c      	movs	r2, #76	; 0x4c
 80010b4:	4619      	mov	r1, r3
 80010b6:	f009 fb6a 	bl	800a78e <memcpy>
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	651a      	str	r2, [r3, #80]	; 0x50
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	659a      	str	r2, [r3, #88]	; 0x58
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	661a      	str	r2, [r3, #96]	; 0x60
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	0000      	movs	r0, r0
	...

080010f8 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>:

HolonomicDrive3::HolonomicDrive3(Stepper stepper0, Stepper stepper1, Stepper stepper2, float wheel_radius, float wheel_distance) {
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	b086      	sub	sp, #24
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6178      	str	r0, [r7, #20]
 8001100:	6139      	str	r1, [r7, #16]
 8001102:	60fa      	str	r2, [r7, #12]
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	ed87 0a01 	vstr	s0, [r7, #4]
 800110a:	edc7 0a00 	vstr	s1, [r7]
 800110e:	4a32      	ldr	r2, [pc, #200]	; (80011d8 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xe0>)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3304      	adds	r3, #4
 8001118:	2402      	movs	r4, #2
 800111a:	461d      	mov	r5, r3
 800111c:	e004      	b.n	8001128 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x30>
 800111e:	4628      	mov	r0, r5
 8001120:	f000 fd52 	bl	8001bc8 <_ZN7StepperC1Ev>
 8001124:	3564      	adds	r5, #100	; 0x64
 8001126:	3c01      	subs	r4, #1
 8001128:	2c00      	cmp	r4, #0
 800112a:	daf8      	bge.n	800111e <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x26>
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff ff9d 	bl	8001072 <_ZN3VelC1Ev>
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff97 	bl	8001072 <_ZN3VelC1Ev>
	this->steppers[0] = stepper0;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3304      	adds	r3, #4
 8001148:	6939      	ldr	r1, [r7, #16]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff ffa8 	bl	80010a0 <_ZN7StepperaSERKS_>
	this->steppers[1] = stepper1;
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	3368      	adds	r3, #104	; 0x68
 8001154:	68f9      	ldr	r1, [r7, #12]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ffa2 	bl	80010a0 <_ZN7StepperaSERKS_>
	this->steppers[2] = stepper2;
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	33cc      	adds	r3, #204	; 0xcc
 8001160:	68b9      	ldr	r1, [r7, #8]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff9c 	bl	80010a0 <_ZN7StepperaSERKS_>
	this->wheel_circumference = wheel_radius * 2.0 * PI;
 8001168:	6878      	ldr	r0, [r7, #4]
 800116a:	f7ff fa0d 	bl	8000588 <__aeabi_f2d>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	f7ff f8ab 	bl	80002cc <__adddf3>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	a314      	add	r3, pc, #80	; (adr r3, 80011d0 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xd8>)
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f7ff fa58 	bl	8000638 <__aeabi_dmul>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f7ff fd34 	bl	8000bfc <__aeabi_d2f>
 8001194:	4602      	mov	r2, r0
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	this->wheel_distance = wheel_distance;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	683a      	ldr	r2, [r7, #0]
 80011a0:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	this->current_wheels_speeds_rps[0] = 0;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	this->current_wheels_speeds_rps[1] = 0;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	this->current_wheels_speeds_rps[2] = 0;
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

}
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3718      	adds	r7, #24
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bdb0      	pop	{r4, r5, r7, pc}
 80011cc:	f3af 8000 	nop.w
 80011d0:	54442eea 	.word	0x54442eea
 80011d4:	400921fb 	.word	0x400921fb
 80011d8:	0800b3ec 	.word	0x0800b3ec

080011dc <_ZN15HolonomicDrive311set_cmd_velE3Vel>:

void HolonomicDrive3::set_cmd_vel(Vel cmd) {
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	eef0 6a40 	vmov.f32	s13, s0
 80011e8:	eeb0 7a60 	vmov.f32	s14, s1
 80011ec:	eef0 7a41 	vmov.f32	s15, s2
 80011f0:	edc7 6a00 	vstr	s13, [r7]
 80011f4:	ed87 7a01 	vstr	s14, [r7, #4]
 80011f8:	edc7 7a02 	vstr	s15, [r7, #8]
	this->cmd_vel = cmd;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001202:	463a      	mov	r2, r7
 8001204:	ca07      	ldmia	r2, {r0, r1, r2}
 8001206:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800120a:	bf00      	nop
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
	...

08001218 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>:

void HolonomicDrive3::compute_wheels_speeds(Vel cmd, float *ret_speeds_rps) {
 8001218:	b5b0      	push	{r4, r5, r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6178      	str	r0, [r7, #20]
 8001220:	eef0 6a40 	vmov.f32	s13, s0
 8001224:	eeb0 7a60 	vmov.f32	s14, s1
 8001228:	eef0 7a41 	vmov.f32	s15, s2
 800122c:	6079      	str	r1, [r7, #4]
 800122e:	edc7 6a02 	vstr	s13, [r7, #8]
 8001232:	ed87 7a03 	vstr	s14, [r7, #12]
 8001236:	edc7 7a04 	vstr	s15, [r7, #16]
    float wheel0_mps = 0.5 * this->cmd_vel.y + SQRT_3_OVER_2 * this->cmd_vel.x + this->wheel_distance * this->cmd_vel.theta;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff f9a1 	bl	8000588 <__aeabi_f2d>
 8001246:	f04f 0200 	mov.w	r2, #0
 800124a:	4b55      	ldr	r3, [pc, #340]	; (80013a0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x188>)
 800124c:	f7ff f9f4 	bl	8000638 <__aeabi_dmul>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4614      	mov	r4, r2
 8001256:	461d      	mov	r5, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f992 	bl	8000588 <__aeabi_f2d>
 8001264:	a34c      	add	r3, pc, #304	; (adr r3, 8001398 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x180>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff f9e5 	bl	8000638 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4620      	mov	r0, r4
 8001274:	4629      	mov	r1, r5
 8001276:	f7ff f829 	bl	80002cc <__adddf3>
 800127a:	4602      	mov	r2, r0
 800127c:	460b      	mov	r3, r1
 800127e:	4614      	mov	r4, r2
 8001280:	461d      	mov	r5, r3
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	ed93 7a4d 	vldr	s14, [r3, #308]	; 0x134
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800128e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001292:	ee17 0a90 	vmov	r0, s15
 8001296:	f7ff f977 	bl	8000588 <__aeabi_f2d>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	4620      	mov	r0, r4
 80012a0:	4629      	mov	r1, r5
 80012a2:	f7ff f813 	bl	80002cc <__adddf3>
 80012a6:	4602      	mov	r2, r0
 80012a8:	460b      	mov	r3, r1
 80012aa:	4610      	mov	r0, r2
 80012ac:	4619      	mov	r1, r3
 80012ae:	f7ff fca5 	bl	8000bfc <__aeabi_d2f>
 80012b2:	4603      	mov	r3, r0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    float wheel1_mps = 0.5 * this->cmd_vel.y - SQRT_3_OVER_2 * this->cmd_vel.x + this->wheel_distance * this->cmd_vel.theta;
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f963 	bl	8000588 <__aeabi_f2d>
 80012c2:	f04f 0200 	mov.w	r2, #0
 80012c6:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x188>)
 80012c8:	f7ff f9b6 	bl	8000638 <__aeabi_dmul>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4614      	mov	r4, r2
 80012d2:	461d      	mov	r5, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f954 	bl	8000588 <__aeabi_f2d>
 80012e0:	a32d      	add	r3, pc, #180	; (adr r3, 8001398 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x180>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff f9a7 	bl	8000638 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4620      	mov	r0, r4
 80012f0:	4629      	mov	r1, r5
 80012f2:	f7fe ffe9 	bl	80002c8 <__aeabi_dsub>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4614      	mov	r4, r2
 80012fc:	461d      	mov	r5, r3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	ed93 7a4d 	vldr	s14, [r3, #308]	; 0x134
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800130a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800130e:	ee17 0a90 	vmov	r0, s15
 8001312:	f7ff f939 	bl	8000588 <__aeabi_f2d>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4620      	mov	r0, r4
 800131c:	4629      	mov	r1, r5
 800131e:	f7fe ffd5 	bl	80002cc <__adddf3>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4610      	mov	r0, r2
 8001328:	4619      	mov	r1, r3
 800132a:	f7ff fc67 	bl	8000bfc <__aeabi_d2f>
 800132e:	4603      	mov	r3, r0
 8001330:	623b      	str	r3, [r7, #32]
    float wheel2_mps = - this->cmd_vel.y + this->wheel_distance * this->cmd_vel.theta;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	ed93 7a4d 	vldr	s14, [r3, #308]	; 0x134
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800133e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 8001348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134c:	edc7 7a07 	vstr	s15, [r7, #28]
    // wheel mps -> wheel rps
    ret_speeds_rps[0] = wheel0_mps / this->wheel_circumference;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 8001356:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800135a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[1] = wheel1_mps / this->wheel_circumference;
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3304      	adds	r3, #4
 800136e:	edd7 6a08 	vldr	s13, [r7, #32]
 8001372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001376:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[2] = wheel2_mps / this->wheel_circumference;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	3308      	adds	r3, #8
 8001384:	edd7 6a07 	vldr	s13, [r7, #28]
 8001388:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138c:	edc3 7a00 	vstr	s15, [r3]
}
 8001390:	bf00      	nop
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}
 8001398:	e857b07f 	.word	0xe857b07f
 800139c:	3febb67a 	.word	0x3febb67a
 80013a0:	3fe00000 	.word	0x3fe00000

080013a4 <_ZN15HolonomicDrive319write_wheels_speedsEPf>:

void HolonomicDrive3::write_wheels_speeds(float *speeds_rps) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	e020      	b.n	80013f6 <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x52>
		this->steppers[i].set_speed_rps(speeds_rps[i]);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2264      	movs	r2, #100	; 0x64
 80013b8:	fb02 f303 	mul.w	r3, r2, r3
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	1d19      	adds	r1, r3, #4
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	edd3 7a00 	vldr	s15, [r3]
 80013ce:	eeb0 0a67 	vmov.f32	s0, s15
 80013d2:	4608      	mov	r0, r1
 80013d4:	f000 fc96 	bl	8001d04 <_ZN7Stepper13set_speed_rpsEf>
		this->current_wheels_speeds_rps[i] = speeds_rps[i];
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	683a      	ldr	r2, [r7, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3350      	adds	r3, #80	; 0x50
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	440b      	add	r3, r1
 80013ec:	3304      	adds	r3, #4
 80013ee:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	3301      	adds	r3, #1
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	dddb      	ble.n	80013b4 <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x10>
	}
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
	...

08001408 <_ZN15HolonomicDrive324spin_once_motors_controlEv>:

void HolonomicDrive3::spin_once_motors_control() {
 8001408:	b580      	push	{r7, lr}
 800140a:	b092      	sub	sp, #72	; 0x48
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]

	// compare current_vel and cmd_vel wheels speeds to check the required acceleration to transition directly from current to command
	float cmd_wheels_speeds[3]; // rotations per second
	this->compute_wheels_speeds(cmd_vel, cmd_wheels_speeds);
 8001410:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	edd3 6a4e 	vldr	s13, [r3, #312]	; 0x138
 800141a:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 800141e:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8001422:	4611      	mov	r1, r2
 8001424:	eeb0 0a66 	vmov.f32	s0, s13
 8001428:	eef0 0a47 	vmov.f32	s1, s14
 800142c:	eeb0 1a67 	vmov.f32	s2, s15
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff fef1 	bl	8001218 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>

	if(this->current_wheels_speeds_rps[2] != this->current_wheels_speeds_rps[2]) {
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8001442:	eeb4 7a67 	vcmp.f32	s14, s15
 8001446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800144a:	d009      	beq.n	8001460 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x58>
		this->current_wheels_speeds_rps[2]--;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 8001452:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001456:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
	}

	float desired_accels_wheels[3];
	sub(cmd_wheels_speeds, this->current_wheels_speeds_rps, desired_accels_wheels);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f503 71a2 	add.w	r1, r3, #324	; 0x144
 8001466:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800146a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fd5c 	bl	8000f2c <_Z3subPfS_S_>

	float abs_desired_accels_wheels[3];
	abs(desired_accels_wheels, abs_desired_accels_wheels);
 8001474:	f107 0218 	add.w	r2, r7, #24
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4611      	mov	r1, r2
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fd7e 	bl	8000f80 <_Z3absPfS_>
	if(abs_desired_accels_wheels[0] < MAX_ACCEL_PER_CYCLE && abs_desired_accels_wheels[1] < MAX_ACCEL_PER_CYCLE && abs_desired_accels_wheels[2] < MAX_ACCEL_PER_CYCLE) {
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff f87e 	bl	8000588 <__aeabi_f2d>
 800148c:	a33e      	add	r3, pc, #248	; (adr r3, 8001588 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x180>)
 800148e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001492:	f7ff fb43 	bl	8000b1c <__aeabi_dcmplt>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01e      	beq.n	80014da <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xd2>
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	4618      	mov	r0, r3
 80014a0:	f7ff f872 	bl	8000588 <__aeabi_f2d>
 80014a4:	a338      	add	r3, pc, #224	; (adr r3, 8001588 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x180>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	f7ff fb37 	bl	8000b1c <__aeabi_dcmplt>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d012      	beq.n	80014da <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xd2>
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff f866 	bl	8000588 <__aeabi_f2d>
 80014bc:	a332      	add	r3, pc, #200	; (adr r3, 8001588 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x180>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff fb2b 	bl	8000b1c <__aeabi_dcmplt>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d006      	beq.n	80014da <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xd2>
		// acceleration requested is ok, no need to accelerate gradually.

		this->write_wheels_speeds(cmd_wheels_speeds);
 80014cc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014d0:	4619      	mov	r1, r3
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f7ff ff66 	bl	80013a4 <_ZN15HolonomicDrive319write_wheels_speedsEPf>
 80014d8:	e048      	b.n	800156c <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x164>
	}
	else {
		// Trouver la roue qui pose le + problème. On va alors pouvoir réduire les accélérations des 3 roues de façon
		// de façon proportionelle, de façon que la roue qui pose le + problème ait une accélération égale à MAX_ACCEL_PER_CYCLE
		int i_max = get_index_max(abs_desired_accels_wheels);
 80014da:	f107 0318 	add.w	r3, r7, #24
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fd87 	bl	8000ff2 <_Z13get_index_maxPf>
 80014e4:	6438      	str	r0, [r7, #64]	; 0x40

		float speed_ratio = MAX_ACCEL_PER_CYCLE / abs_desired_accels_wheels[i_max]; // speed ratio of each original speed to add
 80014e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	3348      	adds	r3, #72	; 0x48
 80014ec:	443b      	add	r3, r7
 80014ee:	3b30      	subs	r3, #48	; 0x30
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff f848 	bl	8000588 <__aeabi_f2d>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	a122      	add	r1, pc, #136	; (adr r1, 8001588 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x180>)
 80014fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001502:	f7ff f9c3 	bl	800088c <__aeabi_ddiv>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fb75 	bl	8000bfc <__aeabi_d2f>
 8001512:	4603      	mov	r3, r0
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c

		float new_speeds_cmds[3];
		for(int i=0; i<3; i++) {
 8001516:	2300      	movs	r3, #0
 8001518:	647b      	str	r3, [r7, #68]	; 0x44
 800151a:	e01e      	b.n	800155a <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x152>
			new_speeds_cmds[i] = current_wheels_speeds_rps[i] + speed_ratio * desired_accels_wheels[i];
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001520:	3350      	adds	r3, #80	; 0x50
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	3304      	adds	r3, #4
 8001528:	ed93 7a00 	vldr	s14, [r3]
 800152c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	3348      	adds	r3, #72	; 0x48
 8001532:	443b      	add	r3, r7
 8001534:	3b24      	subs	r3, #36	; 0x24
 8001536:	edd3 6a00 	vldr	s13, [r3]
 800153a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800153e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	3348      	adds	r3, #72	; 0x48
 800154c:	443b      	add	r3, r7
 800154e:	3b3c      	subs	r3, #60	; 0x3c
 8001550:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i<3; i++) {
 8001554:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001556:	3301      	adds	r3, #1
 8001558:	647b      	str	r3, [r7, #68]	; 0x44
 800155a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800155c:	2b02      	cmp	r3, #2
 800155e:	dddd      	ble.n	800151c <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x114>
		}

		// set speed
		this->write_wheels_speeds(new_speeds_cmds);
 8001560:	f107 030c 	add.w	r3, r7, #12
 8001564:	4619      	mov	r1, r3
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f7ff ff1c 	bl	80013a4 <_ZN15HolonomicDrive319write_wheels_speedsEPf>
	}

	// Compute / update current vel (linear / angular)
	update_current_vel(this->current_wheels_speeds_rps);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8001572:	4619      	mov	r1, r3
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f000 f853 	bl	8001620 <_ZN15HolonomicDrive318update_current_velEPf>


}
 800157a:	bf00      	nop
 800157c:	3748      	adds	r7, #72	; 0x48
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	f3af 8000 	nop.w
 8001588:	9999999a 	.word	0x9999999a
 800158c:	3fb99999 	.word	0x3fb99999

08001590 <_ZN15HolonomicDrive315get_current_velEv>:

Vel HolonomicDrive3::get_current_vel() {
 8001590:	b480      	push	{r7}
 8001592:	b08b      	sub	sp, #44	; 0x2c
 8001594:	af00      	add	r7, sp, #0
 8001596:	6178      	str	r0, [r7, #20]
	return this->current_vel;
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	f502 72a8 	add.w	r2, r2, #336	; 0x150
 80015a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80015a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80015a8:	69f9      	ldr	r1, [r7, #28]
 80015aa:	6a3a      	ldr	r2, [r7, #32]
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	ee06 1a90 	vmov	s13, r1
 80015b2:	ee07 2a10 	vmov	s14, r2
 80015b6:	ee07 3a90 	vmov	s15, r3
}
 80015ba:	eeb0 0a66 	vmov.f32	s0, s13
 80015be:	eef0 0a47 	vmov.f32	s1, s14
 80015c2:	eeb0 1a67 	vmov.f32	s2, s15
 80015c6:	372c      	adds	r7, #44	; 0x2c
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <_ZN15HolonomicDrive3C1Ev>:

HolonomicDrive3::HolonomicDrive3() {
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <_ZN15HolonomicDrive3C1Ev+0x48>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3304      	adds	r3, #4
 80015e2:	2402      	movs	r4, #2
 80015e4:	461d      	mov	r5, r3
 80015e6:	e004      	b.n	80015f2 <_ZN15HolonomicDrive3C1Ev+0x22>
 80015e8:	4628      	mov	r0, r5
 80015ea:	f000 faed 	bl	8001bc8 <_ZN7StepperC1Ev>
 80015ee:	3564      	adds	r5, #100	; 0x64
 80015f0:	3c01      	subs	r4, #1
 80015f2:	2c00      	cmp	r4, #0
 80015f4:	daf8      	bge.n	80015e8 <_ZN15HolonomicDrive3C1Ev+0x18>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff fd38 	bl	8001072 <_ZN3VelC1Ev>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fd32 	bl	8001072 <_ZN3VelC1Ev>
}
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4618      	mov	r0, r3
 8001612:	3708      	adds	r7, #8
 8001614:	46bd      	mov	sp, r7
 8001616:	bdb0      	pop	{r4, r5, r7, pc}
 8001618:	0800b3ec 	.word	0x0800b3ec
 800161c:	00000000 	.word	0x00000000

08001620 <_ZN15HolonomicDrive318update_current_velEPf>:

void HolonomicDrive3::update_current_vel(float* speeds_rps) {
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
	float wheel0_mps = speeds_rps[0] * this->wheel_circumference;
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	ed93 7a00 	vldr	s14, [r3]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 8001636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163a:	edc7 7a05 	vstr	s15, [r7, #20]
	float wheel1_mps = speeds_rps[1] * this->wheel_circumference;
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	3304      	adds	r3, #4
 8001642:	ed93 7a00 	vldr	s14, [r3]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 800164c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001650:	edc7 7a04 	vstr	s15, [r7, #16]
	float wheel2_mps = speeds_rps[2] * this->wheel_circumference;
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	3308      	adds	r3, #8
 8001658:	ed93 7a00 	vldr	s14, [r3]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 8001662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001666:	edc7 7a03 	vstr	s15, [r7, #12]

	this->current_vel.x = SQRT_3_OVER_3 * (wheel0_mps - wheel1_mps);
 800166a:	ed97 7a05 	vldr	s14, [r7, #20]
 800166e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001676:	ee17 0a90 	vmov	r0, s15
 800167a:	f7fe ff85 	bl	8000588 <__aeabi_f2d>
 800167e:	a33c      	add	r3, pc, #240	; (adr r3, 8001770 <_ZN15HolonomicDrive318update_current_velEPf+0x150>)
 8001680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001684:	f7fe ffd8 	bl	8000638 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f7ff fab4 	bl	8000bfc <__aeabi_d2f>
 8001694:	4602      	mov	r2, r0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	this->current_vel.y = (1./3.) * (wheel0_mps + wheel1_mps) - (2./3.) * wheel2_mps;
 800169c:	ed97 7a05 	vldr	s14, [r7, #20]
 80016a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a8:	ee17 0a90 	vmov	r0, s15
 80016ac:	f7fe ff6c 	bl	8000588 <__aeabi_f2d>
 80016b0:	a331      	add	r3, pc, #196	; (adr r3, 8001778 <_ZN15HolonomicDrive318update_current_velEPf+0x158>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffbf 	bl	8000638 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f7fe ff60 	bl	8000588 <__aeabi_f2d>
 80016c8:	a32d      	add	r3, pc, #180	; (adr r3, 8001780 <_ZN15HolonomicDrive318update_current_velEPf+0x160>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7fe ffb3 	bl	8000638 <__aeabi_dmul>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4620      	mov	r0, r4
 80016d8:	4629      	mov	r1, r5
 80016da:	f7fe fdf5 	bl	80002c8 <__aeabi_dsub>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4610      	mov	r0, r2
 80016e4:	4619      	mov	r1, r3
 80016e6:	f7ff fa89 	bl	8000bfc <__aeabi_d2f>
 80016ea:	4602      	mov	r2, r0
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	this->current_vel.theta = (1./(3.*wheel_distance)) * (wheel0_mps + wheel1_mps + wheel2_mps);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff45 	bl	8000588 <__aeabi_f2d>
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <_ZN15HolonomicDrive318update_current_velEPf+0x148>)
 8001704:	f7fe ff98 	bl	8000638 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	f04f 0000 	mov.w	r0, #0
 8001710:	4916      	ldr	r1, [pc, #88]	; (800176c <_ZN15HolonomicDrive318update_current_velEPf+0x14c>)
 8001712:	f7ff f8bb 	bl	800088c <__aeabi_ddiv>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4614      	mov	r4, r2
 800171c:	461d      	mov	r5, r3
 800171e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001722:	edd7 7a04 	vldr	s15, [r7, #16]
 8001726:	ee37 7a27 	vadd.f32	s14, s14, s15
 800172a:	edd7 7a03 	vldr	s15, [r7, #12]
 800172e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001732:	ee17 0a90 	vmov	r0, s15
 8001736:	f7fe ff27 	bl	8000588 <__aeabi_f2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4620      	mov	r0, r4
 8001740:	4629      	mov	r1, r5
 8001742:	f7fe ff79 	bl	8000638 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fa55 	bl	8000bfc <__aeabi_d2f>
 8001752:	4602      	mov	r2, r0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
}
 800175a:	bf00      	nop
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bdb0      	pop	{r4, r5, r7, pc}
 8001762:	bf00      	nop
 8001764:	f3af 8000 	nop.w
 8001768:	40080000 	.word	0x40080000
 800176c:	3ff00000 	.word	0x3ff00000
 8001770:	4591a01f 	.word	0x4591a01f
 8001774:	3fe279a7 	.word	0x3fe279a7
 8001778:	55555555 	.word	0x55555555
 800177c:	3fd55555 	.word	0x3fd55555
 8001780:	55555555 	.word	0x55555555
 8001784:	3fe55555 	.word	0x3fe55555

08001788 <_ZN15HolonomicDrive3D1Ev>:

HolonomicDrive3::~HolonomicDrive3() {
 8001788:	b590      	push	{r4, r7, lr}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <_ZN15HolonomicDrive3D1Ev+0x40>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	3304      	adds	r3, #4
	// TODO Auto-generated destructor stub
}
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00d      	beq.n	80017ba <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3304      	adds	r3, #4
 80017a2:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	3304      	adds	r3, #4
}
 80017aa:	429c      	cmp	r4, r3
 80017ac:	d005      	beq.n	80017ba <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 80017ae:	3c64      	subs	r4, #100	; 0x64
 80017b0:	6823      	ldr	r3, [r4, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4620      	mov	r0, r4
 80017b6:	4798      	blx	r3
}
 80017b8:	e7f5      	b.n	80017a6 <_ZN15HolonomicDrive3D1Ev+0x1e>
HolonomicDrive3::~HolonomicDrive3() {
 80017ba:	bf00      	nop
}
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	4618      	mov	r0, r3
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd90      	pop	{r4, r7, pc}
 80017c6:	bf00      	nop
 80017c8:	0800b3ec 	.word	0x0800b3ec

080017cc <_ZN15HolonomicDrive3D0Ev>:
HolonomicDrive3::~HolonomicDrive3() {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
}
 80017d4:	6878      	ldr	r0, [r7, #4]
 80017d6:	f7ff ffd7 	bl	8001788 <_ZN15HolonomicDrive3D1Ev>
 80017da:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f008 fa9a 	bl	8009d18 <_ZdlPvj>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
	...

080017f0 <_ZN17MessageRecomposerC1Ev>:
#include "MessageRecomposer.h"

#include "stdio.h"


MessageRecomposer::MessageRecomposer() {
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	4a0c      	ldr	r2, [pc, #48]	; (800182c <_ZN17MessageRecomposerC1Ev+0x3c>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	3324      	adds	r3, #36	; 0x24
 8001802:	2413      	movs	r4, #19
 8001804:	461d      	mov	r5, r3
 8001806:	e004      	b.n	8001812 <_ZN17MessageRecomposerC1Ev+0x22>
 8001808:	4628      	mov	r0, r5
 800180a:	f008 fb2f 	bl	8009e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800180e:	3518      	adds	r5, #24
 8001810:	3c01      	subs	r4, #1
 8001812:	2c00      	cmp	r4, #0
 8001814:	daf8      	bge.n	8001808 <_ZN17MessageRecomposerC1Ev+0x18>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800181c:	4618      	mov	r0, r3
 800181e:	f008 fb25 	bl	8009e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

}
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4618      	mov	r0, r3
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bdb0      	pop	{r4, r5, r7, pc}
 800182c:	0800b3fc 	.word	0x0800b3fc

08001830 <_ZN17MessageRecomposer9add_frameEPhh>:

void MessageRecomposer::add_frame(uint8_t *frame_data, uint8_t length) {
 8001830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001832:	b09b      	sub	sp, #108	; 0x6c
 8001834:	af02      	add	r7, sp, #8
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	4613      	mov	r3, r2
 800183c:	71fb      	strb	r3, [r7, #7]

	int msg_number;
    int msg_size;
    int frame_index;

    decode_descriptor(frame_data, msg_number, msg_size, frame_index);
 800183e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001842:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	460b      	mov	r3, r1
 800184e:	68b9      	ldr	r1, [r7, #8]
 8001850:	68f8      	ldr	r0, [r7, #12]
 8001852:	f000 f910 	bl	8001a76 <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>

    // TODO check if the number follows the expected order (0 -> 1 -> 2 -> 3 -> 0 -> ...)
    // But it's not that easy bc what if we miss an entire message ? we would loose the 3 messages that follow it
    if(msg_number_ != msg_number) {
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800185c:	429a      	cmp	r2, r3
 800185e:	d019      	beq.n	8001894 <_ZN17MessageRecomposer9add_frameEPhh+0x64>
        // new message
        printf("New message\n");
 8001860:	4856      	ldr	r0, [pc, #344]	; (80019bc <_ZN17MessageRecomposer9add_frameEPhh+0x18c>)
 8001862:	f008 fde5 	bl	800a430 <puts>
        msg_number_ = msg_number;
 8001866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	605a      	str	r2, [r3, #4]
        n_frames_ = msg_size;
 800186c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	609a      	str	r2, [r3, #8]
        for(int i=0; i<n_frames_; i++) {
 8001872:	2300      	movs	r3, #0
 8001874:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001876:	e008      	b.n	800188a <_ZN17MessageRecomposer9add_frameEPhh+0x5a>
            frames_received_[i] = false;
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800187c:	4413      	add	r3, r2
 800187e:	330d      	adds	r3, #13
 8001880:	2200      	movs	r2, #0
 8001882:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 8001884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001886:	3301      	adds	r3, #1
 8001888:	65fb      	str	r3, [r7, #92]	; 0x5c
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001890:	429a      	cmp	r2, r3
 8001892:	dbf1      	blt.n	8001878 <_ZN17MessageRecomposer9add_frameEPhh+0x48>
        }
    }

    frames_received_[frame_index] = true;
 8001894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4413      	add	r3, r2
 800189a:	2201      	movs	r2, #1
 800189c:	735a      	strb	r2, [r3, #13]
    msg_parts[frame_index] = std::string((char*)frame_data+2, length-2);
 800189e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	3320      	adds	r3, #32
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	4413      	add	r3, r2
 80018ae:	1d1c      	adds	r4, r3, #4
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	1c9d      	adds	r5, r3, #2
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	3b02      	subs	r3, #2
 80018b8:	461e      	mov	r6, r3
 80018ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018be:	4618      	mov	r0, r3
 80018c0:	f008 fa2c 	bl	8009d1c <_ZNSaIcEC1Ev>
 80018c4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018c8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80018cc:	4632      	mov	r2, r6
 80018ce:	4629      	mov	r1, r5
 80018d0:	f008 fb92 	bl	8009ff8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 80018d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018d8:	4619      	mov	r1, r3
 80018da:	4620      	mov	r0, r4
 80018dc:	f008 fad9 	bl	8009e92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80018e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80018e4:	4618      	mov	r0, r3
 80018e6:	f008 fac8 	bl	8009e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80018ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018ee:	4618      	mov	r0, r3
 80018f0:	f008 fa15 	bl	8009d1e <_ZNSaIcED1Ev>

    for(int i=0; i<n_frames_; i++) {
 80018f4:	2300      	movs	r3, #0
 80018f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80018f8:	e00c      	b.n	8001914 <_ZN17MessageRecomposer9add_frameEPhh+0xe4>
    	printf("Frame %d received : %d\n", i, frames_received_[i]);
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80018fe:	4413      	add	r3, r2
 8001900:	330d      	adds	r3, #13
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	461a      	mov	r2, r3
 8001906:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001908:	482d      	ldr	r0, [pc, #180]	; (80019c0 <_ZN17MessageRecomposer9add_frameEPhh+0x190>)
 800190a:	f008 fd2b 	bl	800a364 <iprintf>
    for(int i=0; i<n_frames_; i++) {
 800190e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001910:	3301      	adds	r3, #1
 8001912:	65bb      	str	r3, [r7, #88]	; 0x58
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800191a:	429a      	cmp	r2, r3
 800191c:	dbed      	blt.n	80018fa <_ZN17MessageRecomposer9add_frameEPhh+0xca>
    }

    if(all_frames_received()) {
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f000 f8d3 	bl	8001aca <_ZN17MessageRecomposer19all_frames_receivedEv>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d043      	beq.n	80019b2 <_ZN17MessageRecomposer9add_frameEPhh+0x182>
        printf("All frames received\n");
 800192a:	4826      	ldr	r0, [pc, #152]	; (80019c4 <_ZN17MessageRecomposer9add_frameEPhh+0x194>)
 800192c:	f008 fd80 	bl	800a430 <puts>
        std::string full_msg;
 8001930:	f107 0310 	add.w	r3, r7, #16
 8001934:	4618      	mov	r0, r3
 8001936:	f008 fa99 	bl	8009e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
        for(int i=0; i<n_frames_; i++) {
 800193a:	2300      	movs	r3, #0
 800193c:	657b      	str	r3, [r7, #84]	; 0x54
 800193e:	e011      	b.n	8001964 <_ZN17MessageRecomposer9add_frameEPhh+0x134>
            full_msg += msg_parts[i];
 8001940:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	00db      	lsls	r3, r3, #3
 800194a:	3320      	adds	r3, #32
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4413      	add	r3, r2
 8001950:	1d1a      	adds	r2, r3, #4
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	4611      	mov	r1, r2
 8001958:	4618      	mov	r0, r3
 800195a:	f008 faef 	bl	8009f3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
        for(int i=0; i<n_frames_; i++) {
 800195e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001960:	3301      	adds	r3, #1
 8001962:	657b      	str	r3, [r7, #84]	; 0x54
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800196a:	429a      	cmp	r2, r3
 800196c:	dbe8      	blt.n	8001940 <_ZN17MessageRecomposer9add_frameEPhh+0x110>
        }
        full_msg_ = full_msg;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001974:	f107 0210 	add.w	r2, r7, #16
 8001978:	4611      	mov	r1, r2
 800197a:	4618      	mov	r0, r3
 800197c:	f008 fa83 	bl	8009e86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
        full_msg_received_ = true;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	731a      	strb	r2, [r3, #12]
        for(int i=0; i<n_frames_; i++) {
 8001986:	2300      	movs	r3, #0
 8001988:	653b      	str	r3, [r7, #80]	; 0x50
 800198a:	e008      	b.n	800199e <_ZN17MessageRecomposer9add_frameEPhh+0x16e>
            frames_received_[i] = false;
 800198c:	68fa      	ldr	r2, [r7, #12]
 800198e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001990:	4413      	add	r3, r2
 8001992:	330d      	adds	r3, #13
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 8001998:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800199a:	3301      	adds	r3, #1
 800199c:	653b      	str	r3, [r7, #80]	; 0x50
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80019a4:	429a      	cmp	r2, r3
 80019a6:	dbf1      	blt.n	800198c <_ZN17MessageRecomposer9add_frameEPhh+0x15c>
        }
    }
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4618      	mov	r0, r3
 80019ae:	f008 fa64 	bl	8009e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80019b2:	bf00      	nop
 80019b4:	3764      	adds	r7, #100	; 0x64
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019ba:	bf00      	nop
 80019bc:	0800b080 	.word	0x0800b080
 80019c0:	0800b08c 	.word	0x0800b08c
 80019c4:	0800b0a4 	.word	0x0800b0a4

080019c8 <_ZN17MessageRecomposer21check_if_new_full_msgEv>:

bool MessageRecomposer::check_if_new_full_msg() {
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    return full_msg_received_;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7b1b      	ldrb	r3, [r3, #12]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr

080019e0 <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>:

std::string MessageRecomposer::get_full_msg() {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
    full_msg_received_ = false;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	2200      	movs	r2, #0
 80019ee:	731a      	strb	r2, [r3, #12]
    return full_msg_;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019f6:	4619      	mov	r1, r3
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f008 fac9 	bl	8009f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <_ZN17MessageRecomposerD1Ev>:

MessageRecomposer::~MessageRecomposer() {
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <_ZN17MessageRecomposerD1Ev+0x48>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f008 fa2c 	bl	8009e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	3324      	adds	r3, #36	; 0x24
	// TODO Auto-generated destructor stub
}
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00c      	beq.n	8001a44 <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3324      	adds	r3, #36	; 0x24
 8001a2e:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3324      	adds	r3, #36	; 0x24
}
 8001a36:	429c      	cmp	r4, r3
 8001a38:	d004      	beq.n	8001a44 <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 8001a3a:	3c18      	subs	r4, #24
 8001a3c:	4620      	mov	r0, r4
 8001a3e:	f008 fa1c 	bl	8009e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001a42:	e7f6      	b.n	8001a32 <_ZN17MessageRecomposerD1Ev+0x2a>
MessageRecomposer::~MessageRecomposer() {
 8001a44:	bf00      	nop
}
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd90      	pop	{r4, r7, pc}
 8001a50:	0800b3fc 	.word	0x0800b3fc

08001a54 <_ZN17MessageRecomposerD0Ev>:
MessageRecomposer::~MessageRecomposer() {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
}
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff ffd3 	bl	8001a08 <_ZN17MessageRecomposerD1Ev>
 8001a62:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	f008 f956 	bl	8009d18 <_ZdlPvj>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>:

void MessageRecomposer::decode_descriptor(uint8_t *frame_data, int &msg_number,
		int &msg_size, int &frame_index) {
 8001a76:	b480      	push	{r7}
 8001a78:	b087      	sub	sp, #28
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	60f8      	str	r0, [r7, #12]
 8001a7e:	60b9      	str	r1, [r7, #8]
 8001a80:	607a      	str	r2, [r7, #4]
 8001a82:	603b      	str	r3, [r7, #0]

    uint16_t msg_descriptor = frame_data[1] << 8 | frame_data[0];
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	3301      	adds	r3, #1
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	b21b      	sxth	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b21b      	sxth	r3, r3
 8001a98:	82fb      	strh	r3, [r7, #22]

    // todo mask the unused bits for safety (eg if error of transmission)

    msg_number = (msg_descriptor >> 12);
 8001a9a:	8afb      	ldrh	r3, [r7, #22]
 8001a9c:	0b1b      	lsrs	r3, r3, #12
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	601a      	str	r2, [r3, #0]
    msg_size = (msg_descriptor >> 6) & 0x3F;
 8001aa6:	8afb      	ldrh	r3, [r7, #22]
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	601a      	str	r2, [r3, #0]
    frame_index = msg_descriptor & 0x3F;
 8001ab4:	8afb      	ldrh	r3, [r7, #22]
 8001ab6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <_ZN17MessageRecomposer19all_frames_receivedEv>:

bool MessageRecomposer::all_frames_received() {
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
    for(int i=0; i<n_frames_; i++) {
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	e00e      	b.n	8001af6 <_ZN17MessageRecomposer19all_frames_receivedEv+0x2c>
        if(!frames_received_[i]) {
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4413      	add	r3, r2
 8001ade:	330d      	adds	r3, #13
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	f083 0301 	eor.w	r3, r3, #1
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <_ZN17MessageRecomposer19all_frames_receivedEv+0x26>
            return false;
 8001aec:	2300      	movs	r3, #0
 8001aee:	e008      	b.n	8001b02 <_ZN17MessageRecomposer19all_frames_receivedEv+0x38>
    for(int i=0; i<n_frames_; i++) {
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3301      	adds	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	dbeb      	blt.n	8001ad8 <_ZN17MessageRecomposer19all_frames_receivedEv+0xe>
        }
    }
    return true;
 8001b00:	2301      	movs	r3, #1
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <_Z21PWM_set_high_durationP11TIM_TypeDefi>:

#define SYS_CORE_CLOCK_HZ 170000000.
#define SYS_CORE_CLOCK_MHZ 170.


void PWM_set_high_duration(TIM_TypeDef *timx, int us) {
 8001b10:	b5b0      	push	{r4, r5, r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
	timx->CCR1 = SYS_CORE_CLOCK_MHZ/(timx->PSC+1) * us;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	3301      	adds	r3, #1
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd0f 	bl	8000544 <__aeabi_ui2d>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	f04f 0000 	mov.w	r0, #0
 8001b2e:	490e      	ldr	r1, [pc, #56]	; (8001b68 <_Z21PWM_set_high_durationP11TIM_TypeDefi+0x58>)
 8001b30:	f7fe feac 	bl	800088c <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4614      	mov	r4, r2
 8001b3a:	461d      	mov	r5, r3
 8001b3c:	6838      	ldr	r0, [r7, #0]
 8001b3e:	f7fe fd11 	bl	8000564 <__aeabi_i2d>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4620      	mov	r0, r4
 8001b48:	4629      	mov	r1, r5
 8001b4a:	f7fe fd75 	bl	8000638 <__aeabi_dmul>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	4610      	mov	r0, r2
 8001b54:	4619      	mov	r1, r3
 8001b56:	f7ff f831 	bl	8000bbc <__aeabi_d2uiz>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001b60:	bf00      	nop
 8001b62:	3708      	adds	r7, #8
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bdb0      	pop	{r4, r5, r7, pc}
 8001b68:	40654000 	.word	0x40654000
 8001b6c:	00000000 	.word	0x00000000

08001b70 <_Z12PWM_set_freqP11TIM_TypeDefi>:

void PWM_set_freq(TIM_TypeDef *timx, int hz) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
	int arr = SYS_CORE_CLOCK_HZ/((timx->PSC+1)*hz);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7e:	3301      	adds	r3, #1
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fcdc 	bl	8000544 <__aeabi_ui2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	a10b      	add	r1, pc, #44	; (adr r1, 8001bc0 <_Z12PWM_set_freqP11TIM_TypeDefi+0x50>)
 8001b92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b96:	f7fe fe79 	bl	800088c <__aeabi_ddiv>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7fe ffe3 	bl	8000b6c <__aeabi_d2iz>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	60fb      	str	r3, [r7, #12]
	timx->CNT = 0;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	625a      	str	r2, [r3, #36]	; 0x24
	timx->ARR = arr;
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001bb6:	bf00      	nop
 8001bb8:	3710      	adds	r7, #16
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	41a443fd 	.word	0x41a443fd

08001bc8 <_ZN7StepperC1Ev>:

Stepper::Stepper() {}
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	4a04      	ldr	r2, [pc, #16]	; (8001be4 <_ZN7StepperC1Ev+0x1c>)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	0800b40c 	.word	0x0800b40c

08001be8 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>:

Stepper::Stepper(TIM_HandleTypeDef tim_handle_step, uint32_t tim_channel_step, GPIO_TypeDef *GPIOx_dir, uint16_t GPIO_Pin_dir) {
 8001be8:	b084      	sub	sp, #16
 8001bea:	b580      	push	{r7, lr}
 8001bec:	b082      	sub	sp, #8
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	6078      	str	r0, [r7, #4]
 8001bf2:	f107 0014 	add.w	r0, r7, #20
 8001bf6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001bfa:	4a1b      	ldr	r2, [pc, #108]	; (8001c68 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft+0x80>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->tim_handle = tim_handle_step;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	3304      	adds	r3, #4
 8001c04:	f107 0114 	add.w	r1, r7, #20
 8001c08:	224c      	movs	r2, #76	; 0x4c
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f008 fdbf 	bl	800a78e <memcpy>
	this->GPIOx_dir = GPIOx_dir;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c14:	651a      	str	r2, [r3, #80]	; 0x50
	this->GPIO_Pin_dir = GPIO_Pin_dir;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8001c1c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	this->tim_channel = tim_channel_step;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c24:	659a      	str	r2, [r3, #88]	; 0x58
	HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001c30:	2201      	movs	r2, #1
 8001c32:	4619      	mov	r1, r3
 8001c34:	f005 fd76 	bl	8007724 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&this->tim_handle, this->tim_channel);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	1d1a      	adds	r2, r3, #4
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	4619      	mov	r1, r3
 8001c42:	4610      	mov	r0, r2
 8001c44:	f006 fe3a 	bl	80088bc <HAL_TIM_PWM_Start>

	this->current_dir = 0;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	661a      	str	r2, [r3, #96]	; 0x60
	this->stopped = true;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2201      	movs	r2, #1
 8001c52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c62:	b004      	add	sp, #16
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	0800b40c 	.word	0x0800b40c

08001c6c <_ZN7Stepper19set_speed_step_freqEii>:

void Stepper::set_speed_step_freq(int hz, int dir) {
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	60f8      	str	r0, [r7, #12]
 8001c74:	60b9      	str	r1, [r7, #8]
 8001c76:	607a      	str	r2, [r7, #4]
	if(hz < 15){// todo calculer freq min automatiquement
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2b0e      	cmp	r3, #14
 8001c7c:	dc12      	bgt.n	8001ca4 <_ZN7Stepper19set_speed_step_freqEii+0x38>
		if(!stopped) {
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001c84:	f083 0301 	eor.w	r3, r3, #1
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d036      	beq.n	8001cfc <_ZN7Stepper19set_speed_step_freqEii+0x90>
			PWM_set_high_duration(this->tim_handle.Instance, 0);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2100      	movs	r1, #0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff ff3b 	bl	8001b10 <_Z21PWM_set_high_durationP11TIM_TypeDefi>
			stopped = true;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		return;
 8001ca2:	e02b      	b.n	8001cfc <_ZN7Stepper19set_speed_step_freqEii+0x90>
	}
	if(stopped) {
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <_ZN7Stepper19set_speed_step_freqEii+0x56>
		// stepper stopped, start pwm
		PWM_set_high_duration(this->tim_handle.Instance, 10);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	210a      	movs	r1, #10
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff2b 	bl	8001b10 <_Z21PWM_set_high_durationP11TIM_TypeDefi>
		stopped = false;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
	PWM_set_freq(this->tim_handle.Instance, hz);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	68b9      	ldr	r1, [r7, #8]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff51 	bl	8001b70 <_Z12PWM_set_freqP11TIM_TypeDefi>

	if(dir==1) {
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d109      	bne.n	8001ce8 <_ZN7Stepper19set_speed_step_freqEii+0x7c>
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001cde:	2201      	movs	r2, #1
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f005 fd1f 	bl	8007724 <HAL_GPIO_WritePin>
 8001ce6:	e00a      	b.n	8001cfe <_ZN7Stepper19set_speed_step_freqEii+0x92>
	}else {
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_RESET);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f005 fd15 	bl	8007724 <HAL_GPIO_WritePin>
 8001cfa:	e000      	b.n	8001cfe <_ZN7Stepper19set_speed_step_freqEii+0x92>
		return;
 8001cfc:	bf00      	nop
	}
}
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_ZN7Stepper13set_speed_rpsEf>:

void Stepper::set_speed_rps(float rps) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	ed87 0a00 	vstr	s0, [r7]
	// 3200 steps per revolution
	int hz = rps * 3200.0;
 8001d10:	6838      	ldr	r0, [r7, #0]
 8001d12:	f7fe fc39 	bl	8000588 <__aeabi_f2d>
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <_ZN7Stepper13set_speed_rpsEf+0x54>)
 8001d1c:	f7fe fc8c 	bl	8000638 <__aeabi_dmul>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4610      	mov	r0, r2
 8001d26:	4619      	mov	r1, r3
 8001d28:	f7fe ff20 	bl	8000b6c <__aeabi_d2iz>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60fb      	str	r3, [r7, #12]
	if(hz>=0) {
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db05      	blt.n	8001d42 <_ZN7Stepper13set_speed_rpsEf+0x3e>
		this->set_speed_step_freq(hz, 1);
 8001d36:	2201      	movs	r2, #1
 8001d38:	68f9      	ldr	r1, [r7, #12]
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff ff96 	bl	8001c6c <_ZN7Stepper19set_speed_step_freqEii>
	}
	else {
		this->set_speed_step_freq(-hz, 0);
	}
}
 8001d40:	e006      	b.n	8001d50 <_ZN7Stepper13set_speed_rpsEf+0x4c>
		this->set_speed_step_freq(-hz, 0);
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	425b      	negs	r3, r3
 8001d46:	2200      	movs	r2, #0
 8001d48:	4619      	mov	r1, r3
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ff8e 	bl	8001c6c <_ZN7Stepper19set_speed_step_freqEii>
}
 8001d50:	bf00      	nop
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	40a90000 	.word	0x40a90000

08001d5c <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	4a04      	ldr	r2, [pc, #16]	; (8001d78 <_ZN7StepperD1Ev+0x1c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr
 8001d78:	0800b40c 	.word	0x0800b40c

08001d7c <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
}
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7ff ffe9 	bl	8001d5c <_ZN7StepperD1Ev>
 8001d8a:	2164      	movs	r1, #100	; 0x64
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	f007 ffc3 	bl	8009d18 <_ZdlPvj>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4618      	mov	r0, r3
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6) {
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a04      	ldr	r2, [pc, #16]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <HAL_TIM_PeriodElapsedCallback+0x16>
    	loop();
 8001dae:	f000 f95d 	bl	800206c <_Z4loopv>
    }

}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40001000 	.word	0x40001000

08001dc0 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b09a      	sub	sp, #104	; 0x68
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d042      	beq.n	8001e5a <HAL_FDCAN_RxFifo0Callback+0x9a>
	{
		/* Retrieve Rx messages from RX FIFO0 */
		FDCAN_RxHeaderTypeDef RxHeader;
		uint8_t RxData[8];

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001dd4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001dd8:	f107 0208 	add.w	r2, r7, #8
 8001ddc:	2140      	movs	r1, #64	; 0x40
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f004 fed0 	bl	8006b84 <HAL_FDCAN_GetRxMessage>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d004      	beq.n	8001dfe <HAL_FDCAN_RxFifo0Callback+0x3e>
			printf("error rx\n");
 8001df4:	481b      	ldr	r0, [pc, #108]	; (8001e64 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001df6:	f008 fb1b 	bl	800a430 <puts>
			Error_Handler();
 8001dfa:	f000 feaf 	bl	8002b5c <Error_Handler>
		 * Pour le moment, on n'utilise pas de mutex ou de choses comme ça, donc il faut faire attention
		 * à ne pas modifier trop de variables partagées, et de priviligier la modifcation de variables
		 * de 32 bits ou moins (pour que leur modification soit une opération atomique)
		 * */

		if (RxHeader.Identifier == 0x10) {
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	2b10      	cmp	r3, #16
 8001e02:	d12a      	bne.n	8001e5a <HAL_FDCAN_RxFifo0Callback+0x9a>
			msg_recomposer_cmd_vel.add_frame(RxData, RxHeader.DataLength);
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4816      	ldr	r0, [pc, #88]	; (8001e68 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001e10:	f7ff fd0e 	bl	8001830 <_ZN17MessageRecomposer9add_frameEPhh>

			if(msg_recomposer_cmd_vel.check_if_new_full_msg()) {
 8001e14:	4814      	ldr	r0, [pc, #80]	; (8001e68 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001e16:	f7ff fdd7 	bl	80019c8 <_ZN17MessageRecomposer21check_if_new_full_msgEv>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01c      	beq.n	8001e5a <HAL_FDCAN_RxFifo0Callback+0x9a>
				std::string proto_msg = msg_recomposer_cmd_vel.get_full_msg();
 8001e20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e24:	4910      	ldr	r1, [pc, #64]	; (8001e68 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fdda 	bl	80019e0 <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>
				on_receive_cmd_vel(proto_msg);
 8001e2c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001e30:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e34:	4611      	mov	r1, r2
 8001e36:	4618      	mov	r0, r3
 8001e38:	f008 f8aa 	bl	8009f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001e3c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 f813 	bl	8001e6c <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001e46:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f008 f815 	bl	8009e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

			}
 8001e50:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e54:	4618      	mov	r0, r3
 8001e56:	f008 f810 	bl	8009e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8001e5a:	bf00      	nop
 8001e5c:	3768      	adds	r7, #104	; 0x68
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	0800b0b8 	.word	0x0800b0b8
 8001e68:	200004d0 	.word	0x200004d0

08001e6c <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void on_receive_cmd_vel(std::string proto_msg) {
 8001e6c:	b590      	push	{r4, r7, lr}
 8001e6e:	b091      	sub	sp, #68	; 0x44
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]

	// Allocate space for the decoded message.
	msgs_can_BaseVel ret_cmd_vel = msgs_can_BaseVel_init_zero;
 8001e74:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	60da      	str	r2, [r3, #12]
 8001e82:	611a      	str	r2, [r3, #16]
 8001e84:	615a      	str	r2, [r3, #20]
	  // Create a stream that reads from the buffer.
	pb_istream_t stream_ret = pb_istream_from_buffer((const unsigned char*)proto_msg.c_str(), proto_msg.size());
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f008 f85c 	bl	8009f44 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001e8c:	4604      	mov	r4, r0
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f008 f82a 	bl	8009ee8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001e94:	4602      	mov	r2, r0
 8001e96:	f107 0318 	add.w	r3, r7, #24
 8001e9a:	4621      	mov	r1, r4
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f001 faa5 	bl	80033ec <pb_istream_from_buffer>
	  // Now we are ready to decode the message.
	 if (!pb_decode(&stream_ret, msgs_can_BaseVel_fields, &ret_cmd_vel)) {
 8001ea2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001ea6:	f107 0318 	add.w	r3, r7, #24
 8001eaa:	4917      	ldr	r1, [pc, #92]	; (8001f08 <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c>)
 8001eac:	4618      	mov	r0, r3
 8001eae:	f002 fbd7 	bl	8004660 <pb_decode>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	f083 0301 	eor.w	r3, r3, #1
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00b      	beq.n	8001ed6 <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6a>
		 printf("Decoding failed: %s\n", PB_GET_ERROR(&stream_ret));
 8001ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d001      	beq.n	8001ec8 <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	e000      	b.n	8001eca <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5e>
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>)
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4810      	ldr	r0, [pc, #64]	; (8001f10 <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>)
 8001ece:	f008 fa49 	bl	800a364 <iprintf>
		 Error_Handler();
 8001ed2:	f000 fe43 	bl	8002b5c <Error_Handler>
	 }

	// Use message
	Vel cmd_vel = {ret_cmd_vel.x, ret_cmd_vel.y, ret_cmd_vel.theta};
 8001ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee0:	617b      	str	r3, [r7, #20]
	holo_drive.set_cmd_vel(cmd_vel);
 8001ee2:	edd7 6a03 	vldr	s13, [r7, #12]
 8001ee6:	ed97 7a04 	vldr	s14, [r7, #16]
 8001eea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eee:	eeb0 0a66 	vmov.f32	s0, s13
 8001ef2:	eef0 0a47 	vmov.f32	s1, s14
 8001ef6:	eeb0 1a67 	vmov.f32	s2, s15
 8001efa:	4806      	ldr	r0, [pc, #24]	; (8001f14 <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 8001efc:	f7ff f96e 	bl	80011dc <_ZN15HolonomicDrive311set_cmd_velE3Vel>
}
 8001f00:	bf00      	nop
 8001f02:	3744      	adds	r7, #68	; 0x44
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd90      	pop	{r4, r7, pc}
 8001f08:	0800b428 	.word	0x0800b428
 8001f0c:	0800b0c4 	.word	0x0800b0c4
 8001f10:	0800b0cc 	.word	0x0800b0cc
 8001f14:	20000348 	.word	0x20000348

08001f18 <_Z12transmit_vel3Vel>:

void transmit_vel(Vel vel) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b092      	sub	sp, #72	; 0x48
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	eef0 6a40 	vmov.f32	s13, s0
 8001f22:	eeb0 7a60 	vmov.f32	s14, s1
 8001f26:	eef0 7a41 	vmov.f32	s15, s2
 8001f2a:	edc7 6a01 	vstr	s13, [r7, #4]
 8001f2e:	ed87 7a02 	vstr	s14, [r7, #8]
 8001f32:	edc7 7a03 	vstr	s15, [r7, #12]

	// Init message
	msgs_can_BaseVel vel_proto = msgs_can_BaseVel_init_zero;
 8001f36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	601a      	str	r2, [r3, #0]
 8001f3e:	605a      	str	r2, [r3, #4]
 8001f40:	609a      	str	r2, [r3, #8]
 8001f42:	60da      	str	r2, [r3, #12]
 8001f44:	611a      	str	r2, [r3, #16]
 8001f46:	615a      	str	r2, [r3, #20]
	pb_ostream_t stream = pb_ostream_from_buffer(buffer_encode_tx_vel, sizeof(buffer_encode_tx_vel));
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	221e      	movs	r2, #30
 8001f4e:	4925      	ldr	r1, [pc, #148]	; (8001fe4 <_Z12transmit_vel3Vel+0xcc>)
 8001f50:	4618      	mov	r0, r3
 8001f52:	f002 ff57 	bl	8004e04 <pb_ostream_from_buffer>

	// Fill message
	vel_proto.x = vel.x;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	62fb      	str	r3, [r7, #44]	; 0x2c
	vel_proto.y = vel.y;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
	vel_proto.theta = vel.theta;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	63fb      	str	r3, [r7, #60]	; 0x3c
	vel_proto.has_x = true;
 8001f62:	2301      	movs	r3, #1
 8001f64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	vel_proto.has_y = true;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	vel_proto.has_theta = true;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	// Encode message
	bool status = pb_encode(&stream, msgs_can_BaseVel_fields, &vel_proto);
 8001f74:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001f78:	f107 0314 	add.w	r3, r7, #20
 8001f7c:	491a      	ldr	r1, [pc, #104]	; (8001fe8 <_Z12transmit_vel3Vel+0xd0>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f003 fbad 	bl	80056de <pb_encode>
 8001f84:	4603      	mov	r3, r0
 8001f86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	size_t message_length = stream.bytes_written;
 8001f8a:	6a3b      	ldr	r3, [r7, #32]
 8001f8c:	643b      	str	r3, [r7, #64]	; 0x40

	// Check for errors
	if (!status)  {
 8001f8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001f92:	f083 0301 	eor.w	r3, r3, #1
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00b      	beq.n	8001fb4 <_Z12transmit_vel3Vel+0x9c>
		printf("Encoding failed: %s\n", PB_GET_ERROR(&stream));
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <_Z12transmit_vel3Vel+0x8e>
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa4:	e000      	b.n	8001fa8 <_Z12transmit_vel3Vel+0x90>
 8001fa6:	4b11      	ldr	r3, [pc, #68]	; (8001fec <_Z12transmit_vel3Vel+0xd4>)
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4811      	ldr	r0, [pc, #68]	; (8001ff0 <_Z12transmit_vel3Vel+0xd8>)
 8001fac:	f008 f9da 	bl	800a364 <iprintf>
		Error_Handler();
 8001fb0:	f000 fdd4 	bl	8002b5c <Error_Handler>
	}

	// Send
	if (champi_can.send_msg(0x11, (uint8_t*) buffer_encode_tx_vel, message_length) !=0) {
 8001fb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001fb6:	4a0b      	ldr	r2, [pc, #44]	; (8001fe4 <_Z12transmit_vel3Vel+0xcc>)
 8001fb8:	2111      	movs	r1, #17
 8001fba:	480e      	ldr	r0, [pc, #56]	; (8001ff4 <_Z12transmit_vel3Vel+0xdc>)
 8001fbc:	f7fe fefc 	bl	8000db8 <_ZN9ChampiCan8send_msgEmPhm>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	bf14      	ite	ne
 8001fc6:	2301      	movne	r3, #1
 8001fc8:	2300      	moveq	r3, #0
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d004      	beq.n	8001fda <_Z12transmit_vel3Vel+0xc2>
	/* Transmission request Error */
		printf("ERROR: msg not sent\n");
 8001fd0:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <_Z12transmit_vel3Vel+0xe0>)
 8001fd2:	f008 fa2d 	bl	800a430 <puts>
		Error_Handler();
 8001fd6:	f000 fdc1 	bl	8002b5c <Error_Handler>
	}
}
 8001fda:	bf00      	nop
 8001fdc:	3748      	adds	r7, #72	; 0x48
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200006ec 	.word	0x200006ec
 8001fe8:	0800b428 	.word	0x0800b428
 8001fec:	0800b0c4 	.word	0x0800b0c4
 8001ff0:	0800b0e4 	.word	0x0800b0e4
 8001ff4:	200004a4 	.word	0x200004a4
 8001ff8:	0800b0fc 	.word	0x0800b0fc
 8001ffc:	00000000 	.word	0x00000000

08002000 <_Z13set_loop_freqi>:

void set_loop_freq(int hz) {
 8002000:	b5b0      	push	{r4, r5, r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
	htim6.Instance->ARR = SYS_CORE_CLOCK_HZ / (htim6.Instance->PSC+1) / hz;
 8002008:	4b17      	ldr	r3, [pc, #92]	; (8002068 <_Z13set_loop_freqi+0x68>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	3301      	adds	r3, #1
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa97 	bl	8000544 <__aeabi_ui2d>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	a111      	add	r1, pc, #68	; (adr r1, 8002060 <_Z13set_loop_freqi+0x60>)
 800201c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002020:	f7fe fc34 	bl	800088c <__aeabi_ddiv>
 8002024:	4602      	mov	r2, r0
 8002026:	460b      	mov	r3, r1
 8002028:	4614      	mov	r4, r2
 800202a:	461d      	mov	r5, r3
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7fe fa99 	bl	8000564 <__aeabi_i2d>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4620      	mov	r0, r4
 8002038:	4629      	mov	r1, r5
 800203a:	f7fe fc27 	bl	800088c <__aeabi_ddiv>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4909      	ldr	r1, [pc, #36]	; (8002068 <_Z13set_loop_freqi+0x68>)
 8002044:	680c      	ldr	r4, [r1, #0]
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	f7fe fdb7 	bl	8000bbc <__aeabi_d2uiz>
 800204e:	4603      	mov	r3, r0
 8002050:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bdb0      	pop	{r4, r5, r7, pc}
 800205a:	bf00      	nop
 800205c:	f3af 8000 	nop.w
 8002060:	00000000 	.word	0x00000000
 8002064:	41a443fd 	.word	0x41a443fd
 8002068:	20000138 	.word	0x20000138

0800206c <_Z4loopv>:

void loop() {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0



	holo_drive.spin_once_motors_control();
 8002072:	4812      	ldr	r0, [pc, #72]	; (80020bc <_Z4loopv+0x50>)
 8002074:	f7ff f9c8 	bl	8001408 <_ZN15HolonomicDrive324spin_once_motors_controlEv>

	transmit_vel(holo_drive.get_current_vel());
 8002078:	4810      	ldr	r0, [pc, #64]	; (80020bc <_Z4loopv+0x50>)
 800207a:	f7ff fa89 	bl	8001590 <_ZN15HolonomicDrive315get_current_velEv>
 800207e:	eef0 6a40 	vmov.f32	s13, s0
 8002082:	eeb0 7a60 	vmov.f32	s14, s1
 8002086:	eef0 7a41 	vmov.f32	s15, s2
 800208a:	edc7 6a01 	vstr	s13, [r7, #4]
 800208e:	ed87 7a02 	vstr	s14, [r7, #8]
 8002092:	edc7 7a03 	vstr	s15, [r7, #12]
 8002096:	edd7 6a01 	vldr	s13, [r7, #4]
 800209a:	ed97 7a02 	vldr	s14, [r7, #8]
 800209e:	edd7 7a03 	vldr	s15, [r7, #12]
 80020a2:	eeb0 0a66 	vmov.f32	s0, s13
 80020a6:	eef0 0a47 	vmov.f32	s1, s14
 80020aa:	eeb0 1a67 	vmov.f32	s2, s15
 80020ae:	f7ff ff33 	bl	8001f18 <_Z12transmit_vel3Vel>

}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000348 	.word	0x20000348

080020c0 <_ZN7StepperC1ERKS_>:
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
 80020ca:	4a14      	ldr	r2, [pc, #80]	; (800211c <_ZN7StepperC1ERKS_+0x5c>)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	601a      	str	r2, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	1d10      	adds	r0, r2, #4
 80020d6:	3304      	adds	r3, #4
 80020d8:	224c      	movs	r2, #76	; 0x4c
 80020da:	4619      	mov	r1, r3
 80020dc:	f008 fb57 	bl	800a78e <memcpy>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	651a      	str	r2, [r3, #80]	; 0x50
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	659a      	str	r2, [r3, #88]	; 0x58
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	661a      	str	r2, [r3, #96]	; 0x60
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	0800b40c 	.word	0x0800b40c

08002120 <_ZN15HolonomicDrive3aSERKS_>:
	float x = 0;
	float y = 0;
	float theta = 0;
};

class HolonomicDrive3 {
 8002120:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	1d1a      	adds	r2, r3, #4
 800212e:	2502      	movs	r5, #2
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	1d1c      	adds	r4, r3, #4
 8002134:	4616      	mov	r6, r2
 8002136:	e006      	b.n	8002146 <_ZN15HolonomicDrive3aSERKS_+0x26>
 8002138:	4621      	mov	r1, r4
 800213a:	4630      	mov	r0, r6
 800213c:	f7fe ffb0 	bl	80010a0 <_ZN7StepperaSERKS_>
 8002140:	3664      	adds	r6, #100	; 0x64
 8002142:	3464      	adds	r4, #100	; 0x64
 8002144:	3d01      	subs	r5, #1
 8002146:	2d00      	cmp	r5, #0
 8002148:	daf6      	bge.n	8002138 <_ZN15HolonomicDrive3aSERKS_+0x18>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	683a      	ldr	r2, [r7, #0]
 8002166:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800216a:	f502 729c 	add.w	r2, r2, #312	; 0x138
 800216e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002170:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f503 71a2 	add.w	r1, r3, #324	; 0x144
 800217a:	2202      	movs	r2, #2
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002182:	e004      	b.n	800218e <_ZN15HolonomicDrive3aSERKS_+0x6e>
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	6008      	str	r0, [r1, #0]
 8002188:	3104      	adds	r1, #4
 800218a:	3304      	adds	r3, #4
 800218c:	3a01      	subs	r2, #1
 800218e:	2a00      	cmp	r2, #0
 8002190:	daf8      	bge.n	8002184 <_ZN15HolonomicDrive3aSERKS_+0x64>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800219a:	f502 72a8 	add.w	r2, r2, #336	; 0x150
 800219e:	ca07      	ldmia	r2, {r0, r1, r2}
 80021a0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080021ae <_ZN9ChampiCanaSERKS_>:
#ifndef INC_CHAMPICAN_H_
#define INC_CHAMPICAN_H_

#include "stm32g4xx_hal.h"

class ChampiCan {
 80021ae:	b4b0      	push	{r4, r5, r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	6039      	str	r1, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685a      	ldr	r2, [r3, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	f102 0408 	add.w	r4, r2, #8
 80021c8:	f103 0508 	add.w	r5, r3, #8
 80021cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021d4:	682b      	ldr	r3, [r5, #0]
 80021d6:	6023      	str	r3, [r4, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	bcb0      	pop	{r4, r5, r7}
 80021e2:	4770      	bx	lr

080021e4 <_ZN17MessageRecomposeraSERKS_>:
 */
#define MAX_LENGTH_MSG 20

#include "string"

class MessageRecomposer {
 80021e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	7b1a      	ldrb	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	731a      	strb	r2, [r3, #12]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f103 010d 	add.w	r1, r3, #13
 800220c:	2213      	movs	r2, #19
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	330d      	adds	r3, #13
 8002212:	e004      	b.n	800221e <_ZN17MessageRecomposeraSERKS_+0x3a>
 8002214:	7818      	ldrb	r0, [r3, #0]
 8002216:	7008      	strb	r0, [r1, #0]
 8002218:	3101      	adds	r1, #1
 800221a:	3301      	adds	r3, #1
 800221c:	3a01      	subs	r2, #1
 800221e:	2a00      	cmp	r2, #0
 8002220:	daf8      	bge.n	8002214 <_ZN17MessageRecomposeraSERKS_+0x30>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002228:	2513      	movs	r5, #19
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002230:	4616      	mov	r6, r2
 8002232:	e006      	b.n	8002242 <_ZN17MessageRecomposeraSERKS_+0x5e>
 8002234:	4621      	mov	r1, r4
 8002236:	4630      	mov	r0, r6
 8002238:	f007 fe25 	bl	8009e86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800223c:	3618      	adds	r6, #24
 800223e:	3418      	adds	r4, #24
 8002240:	3d01      	subs	r5, #1
 8002242:	2d00      	cmp	r5, #0
 8002244:	daf6      	bge.n	8002234 <_ZN17MessageRecomposeraSERKS_+0x50>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f503 7201 	add.w	r2, r3, #516	; 0x204
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002252:	4619      	mov	r1, r3
 8002254:	4610      	mov	r0, r2
 8002256:	f007 fe16 	bl	8009e86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002264:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002266:	f2ad 6d54 	subw	sp, sp, #1620	; 0x654
 800226a:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800226c:	f004 f943 	bl	80064f6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002270:	f000 f908 	bl	8002484 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002274:	f000 fc24 	bl	8002ac0 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8002278:	f000 f9a6 	bl	80025c8 <_ZL12MX_TIM1_Initv>
  MX_TIM8_Init();
 800227c:	f000 fab4 	bl	80027e8 <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 8002280:	f000 fa72 	bl	8002768 <_ZL12MX_TIM6_Initv>
  MX_FDCAN1_Init();
 8002284:	f000 f954 	bl	8002530 <_ZL14MX_FDCAN1_Initv>
  MX_TIM15_Init();
 8002288:	f000 fb7e 	bl	8002988 <_ZL13MX_TIM15_Initv>
  /* USER CODE BEGIN 2 */

  stepper0 = Stepper(htim8, TIM_CHANNEL_1, GPIOA, GPIO_PIN_4);
 800228c:	4e70      	ldr	r6, [pc, #448]	; (8002450 <main+0x1ec>)
 800228e:	f107 0c04 	add.w	ip, r7, #4
 8002292:	2310      	movs	r3, #16
 8002294:	9312      	str	r3, [sp, #72]	; 0x48
 8002296:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800229a:	9311      	str	r3, [sp, #68]	; 0x44
 800229c:	2300      	movs	r3, #0
 800229e:	9310      	str	r3, [sp, #64]	; 0x40
 80022a0:	466d      	mov	r5, sp
 80022a2:	f106 040c 	add.w	r4, r6, #12
 80022a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80022ba:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80022be:	4660      	mov	r0, ip
 80022c0:	f7ff fc92 	bl	8001be8 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	4619      	mov	r1, r3
 80022c8:	4862      	ldr	r0, [pc, #392]	; (8002454 <main+0x1f0>)
 80022ca:	f7fe fee9 	bl	80010a0 <_ZN7StepperaSERKS_>
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fd43 	bl	8001d5c <_ZN7StepperD1Ev>
  stepper1 = Stepper(htim1, TIM_CHANNEL_1, GPIOA, GPIO_PIN_0);
 80022d6:	4e60      	ldr	r6, [pc, #384]	; (8002458 <main+0x1f4>)
 80022d8:	f107 0c68 	add.w	ip, r7, #104	; 0x68
 80022dc:	2301      	movs	r3, #1
 80022de:	9312      	str	r3, [sp, #72]	; 0x48
 80022e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022e4:	9311      	str	r3, [sp, #68]	; 0x44
 80022e6:	2300      	movs	r3, #0
 80022e8:	9310      	str	r3, [sp, #64]	; 0x40
 80022ea:	466d      	mov	r5, sp
 80022ec:	f106 040c 	add.w	r4, r6, #12
 80022f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002300:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002304:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002308:	4660      	mov	r0, ip
 800230a:	f7ff fc6d 	bl	8001be8 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 800230e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002312:	4619      	mov	r1, r3
 8002314:	4851      	ldr	r0, [pc, #324]	; (800245c <main+0x1f8>)
 8002316:	f7fe fec3 	bl	80010a0 <_ZN7StepperaSERKS_>
 800231a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fd1c 	bl	8001d5c <_ZN7StepperD1Ev>
  stepper2 = Stepper(htim15, TIM_CHANNEL_1, GPIOA, GPIO_PIN_1);
 8002324:	4e4e      	ldr	r6, [pc, #312]	; (8002460 <main+0x1fc>)
 8002326:	f107 0ccc 	add.w	ip, r7, #204	; 0xcc
 800232a:	2302      	movs	r3, #2
 800232c:	9312      	str	r3, [sp, #72]	; 0x48
 800232e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002332:	9311      	str	r3, [sp, #68]	; 0x44
 8002334:	2300      	movs	r3, #0
 8002336:	9310      	str	r3, [sp, #64]	; 0x40
 8002338:	466d      	mov	r5, sp
 800233a:	f106 040c 	add.w	r4, r6, #12
 800233e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800234a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800234e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002352:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002356:	4660      	mov	r0, ip
 8002358:	f7ff fc46 	bl	8001be8 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 800235c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002360:	4619      	mov	r1, r3
 8002362:	4840      	ldr	r0, [pc, #256]	; (8002464 <main+0x200>)
 8002364:	f7fe fe9c 	bl	80010a0 <_ZN7StepperaSERKS_>
 8002368:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fcf5 	bl	8001d5c <_ZN7StepperD1Ev>

  holo_drive = HolonomicDrive3(stepper0, stepper1, stepper2, 0.029, 0.175);
 8002372:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 8002376:	4937      	ldr	r1, [pc, #220]	; (8002454 <main+0x1f0>)
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fea1 	bl	80020c0 <_ZN7StepperC1ERKS_>
 800237e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8002382:	4936      	ldr	r1, [pc, #216]	; (800245c <main+0x1f8>)
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fe9b 	bl	80020c0 <_ZN7StepperC1ERKS_>
 800238a:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800238e:	4935      	ldr	r1, [pc, #212]	; (8002464 <main+0x200>)
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fe95 	bl	80020c0 <_ZN7StepperC1ERKS_>
 8002396:	f507 7355 	add.w	r3, r7, #852	; 0x354
 800239a:	f507 723c 	add.w	r2, r7, #752	; 0x2f0
 800239e:	f507 7123 	add.w	r1, r7, #652	; 0x28c
 80023a2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80023a6:	eddf 0a30 	vldr	s1, [pc, #192]	; 8002468 <main+0x204>
 80023aa:	ed9f 0a30 	vldr	s0, [pc, #192]	; 800246c <main+0x208>
 80023ae:	f7fe fea3 	bl	80010f8 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>
 80023b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023b6:	4619      	mov	r1, r3
 80023b8:	482d      	ldr	r0, [pc, #180]	; (8002470 <main+0x20c>)
 80023ba:	f7ff feb1 	bl	8002120 <_ZN15HolonomicDrive3aSERKS_>
 80023be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7ff f9e0 	bl	8001788 <_ZN15HolonomicDrive3D1Ev>
 80023c8:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fcc5 	bl	8001d5c <_ZN7StepperD1Ev>
 80023d2:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fcc0 	bl	8001d5c <_ZN7StepperD1Ev>
 80023dc:	f507 7323 	add.w	r3, r7, #652	; 0x28c
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fcbb 	bl	8001d5c <_ZN7StepperD1Ev>

  champi_can = ChampiCan(&hfdcan1);
 80023e6:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80023ea:	4922      	ldr	r1, [pc, #136]	; (8002474 <main+0x210>)
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fe fc55 	bl	8000c9c <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>
 80023f2:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 80023f6:	4619      	mov	r1, r3
 80023f8:	481f      	ldr	r0, [pc, #124]	; (8002478 <main+0x214>)
 80023fa:	f7ff fed8 	bl	80021ae <_ZN9ChampiCanaSERKS_>
 80023fe:	f507 736e 	add.w	r3, r7, #952	; 0x3b8
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fd72 	bl	8000eec <_ZN9ChampiCanD1Ev>
  msg_recomposer_cmd_vel = MessageRecomposer();
 8002408:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff f9ef 	bl	80017f0 <_ZN17MessageRecomposerC1Ev>
 8002412:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8002416:	4619      	mov	r1, r3
 8002418:	4818      	ldr	r0, [pc, #96]	; (800247c <main+0x218>)
 800241a:	f7ff fee3 	bl	80021e4 <_ZN17MessageRecomposeraSERKS_>
 800241e:	f507 7379 	add.w	r3, r7, #996	; 0x3e4
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff faf0 	bl	8001a08 <_ZN17MessageRecomposerD1Ev>


  if(champi_can.start() != 0) {
 8002428:	4813      	ldr	r0, [pc, #76]	; (8002478 <main+0x214>)
 800242a:	f7fe fc71 	bl	8000d10 <_ZN9ChampiCan5startEv>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <main+0x1de>
	  Error_Handler();
 800243e:	f000 fb8d 	bl	8002b5c <Error_Handler>
  }

  set_loop_freq(100);
 8002442:	2064      	movs	r0, #100	; 0x64
 8002444:	f7ff fddc 	bl	8002000 <_Z13set_loop_freqi>
  HAL_TIM_Base_Start_IT(&htim6);
 8002448:	480d      	ldr	r0, [pc, #52]	; (8002480 <main+0x21c>)
 800244a:	f006 f975 	bl	8008738 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800244e:	e7fe      	b.n	800244e <main+0x1ea>
 8002450:	20000184 	.word	0x20000184
 8002454:	2000021c 	.word	0x2000021c
 8002458:	200000ec 	.word	0x200000ec
 800245c:	20000280 	.word	0x20000280
 8002460:	200001d0 	.word	0x200001d0
 8002464:	200002e4 	.word	0x200002e4
 8002468:	3e333333 	.word	0x3e333333
 800246c:	3ced9168 	.word	0x3ced9168
 8002470:	20000348 	.word	0x20000348
 8002474:	20000088 	.word	0x20000088
 8002478:	200004a4 	.word	0x200004a4
 800247c:	200004d0 	.word	0x200004d0
 8002480:	20000138 	.word	0x20000138

08002484 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b094      	sub	sp, #80	; 0x50
 8002488:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	2238      	movs	r2, #56	; 0x38
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f008 f8ac 	bl	800a5f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	2200      	movs	r2, #0
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	605a      	str	r2, [r3, #4]
 80024a0:	609a      	str	r2, [r3, #8]
 80024a2:	60da      	str	r2, [r3, #12]
 80024a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80024a6:	2000      	movs	r0, #0
 80024a8:	f005 f954 	bl	8007754 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024ac:	2302      	movs	r3, #2
 80024ae:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024b6:	2340      	movs	r3, #64	; 0x40
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024ba:	2302      	movs	r3, #2
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024be:	2302      	movs	r3, #2
 80024c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80024c2:	2304      	movs	r3, #4
 80024c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80024c6:	2355      	movs	r3, #85	; 0x55
 80024c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024ca:	2302      	movs	r3, #2
 80024cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024ce:	2302      	movs	r3, #2
 80024d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024d2:	2302      	movs	r3, #2
 80024d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024d6:	f107 0318 	add.w	r3, r7, #24
 80024da:	4618      	mov	r0, r3
 80024dc:	f005 f9ee 	bl	80078bc <HAL_RCC_OscConfig>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	bf14      	ite	ne
 80024e6:	2301      	movne	r3, #1
 80024e8:	2300      	moveq	r3, #0
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80024f0:	f000 fb34 	bl	8002b5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f4:	230f      	movs	r3, #15
 80024f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024f8:	2303      	movs	r3, #3
 80024fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002500:	2300      	movs	r3, #0
 8002502:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	2104      	movs	r1, #4
 800250c:	4618      	mov	r0, r3
 800250e:	f005 fce7 	bl	8007ee0 <HAL_RCC_ClockConfig>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d001      	beq.n	8002526 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8002522:	f000 fb1b 	bl	8002b5c <Error_Handler>
  }
}
 8002526:	bf00      	nop
 8002528:	3750      	adds	r7, #80	; 0x50
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002536:	4a23      	ldr	r2, [pc, #140]	; (80025c4 <_ZL14MX_FDCAN1_Initv+0x94>)
 8002538:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800253a:	4b21      	ldr	r3, [pc, #132]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800253c:	2200      	movs	r2, #0
 800253e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002540:	4b1f      	ldr	r3, [pc, #124]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002542:	2200      	movs	r2, #0
 8002544:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002546:	4b1e      	ldr	r3, [pc, #120]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002548:	2200      	movs	r2, #0
 800254a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800254c:	4b1c      	ldr	r3, [pc, #112]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800254e:	2201      	movs	r2, #1
 8002550:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002552:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002554:	2200      	movs	r2, #0
 8002556:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800255a:	2200      	movs	r2, #0
 800255c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 800255e:	4b18      	ldr	r3, [pc, #96]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002560:	220a      	movs	r2, #10
 8002562:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002566:	2201      	movs	r2, #1
 8002568:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 800256a:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800256c:	220e      	movs	r2, #14
 800256e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002570:	4b13      	ldr	r3, [pc, #76]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002572:	2202      	movs	r2, #2
 8002574:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002578:	220a      	movs	r2, #10
 800257a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800257c:	4b10      	ldr	r3, [pc, #64]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800257e:	2201      	movs	r2, #1
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8002582:	4b0f      	ldr	r3, [pc, #60]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002584:	220e      	movs	r2, #14
 8002586:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 8002588:	4b0d      	ldr	r3, [pc, #52]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800258a:	2202      	movs	r2, #2
 800258c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 800258e:	4b0c      	ldr	r3, [pc, #48]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002590:	2200      	movs	r2, #0
 8002592:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002594:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002596:	2200      	movs	r2, #0
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800259a:	4b09      	ldr	r3, [pc, #36]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 800259c:	2200      	movs	r2, #0
 800259e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80025a0:	4807      	ldr	r0, [pc, #28]	; (80025c0 <_ZL14MX_FDCAN1_Initv+0x90>)
 80025a2:	f004 f929 	bl	80067f8 <HAL_FDCAN_Init>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 80025b6:	f000 fad1 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000088 	.word	0x20000088
 80025c4:	40006400 	.word	0x40006400

080025c8 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b09c      	sub	sp, #112	; 0x70
 80025cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025ce:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	605a      	str	r2, [r3, #4]
 80025e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80025e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
 80025f8:	615a      	str	r2, [r3, #20]
 80025fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	2234      	movs	r2, #52	; 0x34
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f007 fff4 	bl	800a5f0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002608:	4b55      	ldr	r3, [pc, #340]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 800260a:	4a56      	ldr	r2, [pc, #344]	; (8002764 <_ZL12MX_TIM1_Initv+0x19c>)
 800260c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 260;
 800260e:	4b54      	ldr	r3, [pc, #336]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 8002610:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002614:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002616:	4b52      	ldr	r3, [pc, #328]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800261c:	4b50      	ldr	r3, [pc, #320]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 800261e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002622:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002624:	4b4e      	ldr	r3, [pc, #312]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 8002626:	2200      	movs	r2, #0
 8002628:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800262a:	4b4d      	ldr	r3, [pc, #308]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 800262c:	2200      	movs	r2, #0
 800262e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002630:	4b4b      	ldr	r3, [pc, #300]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 8002632:	2200      	movs	r2, #0
 8002634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002636:	484a      	ldr	r0, [pc, #296]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 8002638:	f006 f826 	bl	8008688 <HAL_TIM_Base_Init>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	bf14      	ite	ne
 8002642:	2301      	movne	r3, #1
 8002644:	2300      	moveq	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	2b00      	cmp	r3, #0
 800264a:	d001      	beq.n	8002650 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 800264c:	f000 fa86 	bl	8002b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002654:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002656:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800265a:	4619      	mov	r1, r3
 800265c:	4840      	ldr	r0, [pc, #256]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 800265e:	f006 fc91 	bl	8008f84 <HAL_TIM_ConfigClockSource>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	bf14      	ite	ne
 8002668:	2301      	movne	r3, #1
 800266a:	2300      	moveq	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8002672:	f000 fa73 	bl	8002b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002676:	483a      	ldr	r0, [pc, #232]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 8002678:	f006 f8c8 	bl	800880c <HAL_TIM_PWM_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	bf14      	ite	ne
 8002682:	2301      	movne	r3, #1
 8002684:	2300      	moveq	r3, #0
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <_ZL12MX_TIM1_Initv+0xc8>
  {
    Error_Handler();
 800268c:	f000 fa66 	bl	8002b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002690:	2300      	movs	r3, #0
 8002692:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002694:	2300      	movs	r3, #0
 8002696:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002698:	2300      	movs	r3, #0
 800269a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800269c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026a0:	4619      	mov	r1, r3
 80026a2:	482f      	ldr	r0, [pc, #188]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 80026a4:	f007 f9e4 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf14      	ite	ne
 80026ae:	2301      	movne	r3, #1
 80026b0:	2300      	moveq	r3, #0
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d001      	beq.n	80026bc <_ZL12MX_TIM1_Initv+0xf4>
  {
    Error_Handler();
 80026b8:	f000 fa50 	bl	8002b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026bc:	2360      	movs	r3, #96	; 0x60
 80026be:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026c4:	2300      	movs	r3, #0
 80026c6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80026c8:	2300      	movs	r3, #0
 80026ca:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026cc:	2300      	movs	r3, #0
 80026ce:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80026d4:	2300      	movs	r3, #0
 80026d6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026d8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026dc:	2200      	movs	r2, #0
 80026de:	4619      	mov	r1, r3
 80026e0:	481f      	ldr	r0, [pc, #124]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 80026e2:	f006 fb3b 	bl	8008d5c <HAL_TIM_PWM_ConfigChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	bf14      	ite	ne
 80026ec:	2301      	movne	r3, #1
 80026ee:	2300      	moveq	r3, #0
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 80026f6:	f000 fa31 	bl	8002b5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026fa:	2300      	movs	r3, #0
 80026fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800270e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002712:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002718:	2300      	movs	r3, #0
 800271a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800271c:	2300      	movs	r3, #0
 800271e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002724:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800272a:	2300      	movs	r3, #0
 800272c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002732:	1d3b      	adds	r3, r7, #4
 8002734:	4619      	mov	r1, r3
 8002736:	480a      	ldr	r0, [pc, #40]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 8002738:	f007 fa1c 	bl	8009b74 <HAL_TIMEx_ConfigBreakDeadTime>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	bf14      	ite	ne
 8002742:	2301      	movne	r3, #1
 8002744:	2300      	moveq	r3, #0
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <_ZL12MX_TIM1_Initv+0x188>
  {
    Error_Handler();
 800274c:	f000 fa06 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002750:	4803      	ldr	r0, [pc, #12]	; (8002760 <_ZL12MX_TIM1_Initv+0x198>)
 8002752:	f003 fd0f 	bl	8006174 <HAL_TIM_MspPostInit>

}
 8002756:	bf00      	nop
 8002758:	3770      	adds	r7, #112	; 0x70
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	200000ec 	.word	0x200000ec
 8002764:	40012c00 	.word	0x40012c00

08002768 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <_ZL12MX_TIM6_Initv+0x78>)
 800277a:	4a1a      	ldr	r2, [pc, #104]	; (80027e4 <_ZL12MX_TIM6_Initv+0x7c>)
 800277c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <_ZL12MX_TIM6_Initv+0x78>)
 8002780:	2264      	movs	r2, #100	; 0x64
 8002782:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002784:	4b16      	ldr	r3, [pc, #88]	; (80027e0 <_ZL12MX_TIM6_Initv+0x78>)
 8002786:	2200      	movs	r2, #0
 8002788:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <_ZL12MX_TIM6_Initv+0x78>)
 800278c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002790:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <_ZL12MX_TIM6_Initv+0x78>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002798:	4811      	ldr	r0, [pc, #68]	; (80027e0 <_ZL12MX_TIM6_Initv+0x78>)
 800279a:	f005 ff75 	bl	8008688 <HAL_TIM_Base_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf14      	ite	ne
 80027a4:	2301      	movne	r3, #1
 80027a6:	2300      	moveq	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 80027ae:	f000 f9d5 	bl	8002b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b2:	2300      	movs	r3, #0
 80027b4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027b6:	2300      	movs	r3, #0
 80027b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80027ba:	1d3b      	adds	r3, r7, #4
 80027bc:	4619      	mov	r1, r3
 80027be:	4808      	ldr	r0, [pc, #32]	; (80027e0 <_ZL12MX_TIM6_Initv+0x78>)
 80027c0:	f007 f956 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf14      	ite	ne
 80027ca:	2301      	movne	r3, #1
 80027cc:	2300      	moveq	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 80027d4:	f000 f9c2 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80027d8:	bf00      	nop
 80027da:	3710      	adds	r7, #16
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	20000138 	.word	0x20000138
 80027e4:	40001000 	.word	0x40001000

080027e8 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b09c      	sub	sp, #112	; 0x70
 80027ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	605a      	str	r2, [r3, #4]
 80027f8:	609a      	str	r2, [r3, #8]
 80027fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002808:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
 8002810:	605a      	str	r2, [r3, #4]
 8002812:	609a      	str	r2, [r3, #8]
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	611a      	str	r2, [r3, #16]
 8002818:	615a      	str	r2, [r3, #20]
 800281a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	2234      	movs	r2, #52	; 0x34
 8002820:	2100      	movs	r1, #0
 8002822:	4618      	mov	r0, r3
 8002824:	f007 fee4 	bl	800a5f0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002828:	4b55      	ldr	r3, [pc, #340]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 800282a:	4a56      	ldr	r2, [pc, #344]	; (8002984 <_ZL12MX_TIM8_Initv+0x19c>)
 800282c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 260;
 800282e:	4b54      	ldr	r3, [pc, #336]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 8002830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002834:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002836:	4b52      	ldr	r3, [pc, #328]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 8002838:	2200      	movs	r2, #0
 800283a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800283c:	4b50      	ldr	r3, [pc, #320]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 800283e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002842:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002844:	4b4e      	ldr	r3, [pc, #312]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800284a:	4b4d      	ldr	r3, [pc, #308]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 800284c:	2200      	movs	r2, #0
 800284e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002850:	4b4b      	ldr	r3, [pc, #300]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002856:	484a      	ldr	r0, [pc, #296]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 8002858:	f005 ff16 	bl	8008688 <HAL_TIM_Base_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	bf14      	ite	ne
 8002862:	2301      	movne	r3, #1
 8002864:	2300      	moveq	r3, #0
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 800286c:	f000 f976 	bl	8002b5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002874:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002876:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800287a:	4619      	mov	r1, r3
 800287c:	4840      	ldr	r0, [pc, #256]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 800287e:	f006 fb81 	bl	8008f84 <HAL_TIM_ConfigClockSource>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	bf14      	ite	ne
 8002888:	2301      	movne	r3, #1
 800288a:	2300      	moveq	r3, #0
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d001      	beq.n	8002896 <_ZL12MX_TIM8_Initv+0xae>
  {
    Error_Handler();
 8002892:	f000 f963 	bl	8002b5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002896:	483a      	ldr	r0, [pc, #232]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 8002898:	f005 ffb8 	bl	800880c <HAL_TIM_PWM_Init>
 800289c:	4603      	mov	r3, r0
 800289e:	2b00      	cmp	r3, #0
 80028a0:	bf14      	ite	ne
 80028a2:	2301      	movne	r3, #1
 80028a4:	2300      	moveq	r3, #0
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <_ZL12MX_TIM8_Initv+0xc8>
  {
    Error_Handler();
 80028ac:	f000 f956 	bl	8002b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b0:	2300      	movs	r3, #0
 80028b2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80028b4:	2300      	movs	r3, #0
 80028b6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b8:	2300      	movs	r3, #0
 80028ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80028bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80028c0:	4619      	mov	r1, r3
 80028c2:	482f      	ldr	r0, [pc, #188]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 80028c4:	f007 f8d4 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	bf14      	ite	ne
 80028ce:	2301      	movne	r3, #1
 80028d0:	2300      	moveq	r3, #0
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <_ZL12MX_TIM8_Initv+0xf4>
  {
    Error_Handler();
 80028d8:	f000 f940 	bl	8002b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028dc:	2360      	movs	r3, #96	; 0x60
 80028de:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028e4:	2300      	movs	r3, #0
 80028e6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80028e8:	2300      	movs	r3, #0
 80028ea:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028f0:	2300      	movs	r3, #0
 80028f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028f4:	2300      	movs	r3, #0
 80028f6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028fc:	2200      	movs	r2, #0
 80028fe:	4619      	mov	r1, r3
 8002900:	481f      	ldr	r0, [pc, #124]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 8002902:	f006 fa2b 	bl	8008d5c <HAL_TIM_PWM_ConfigChannel>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <_ZL12MX_TIM8_Initv+0x132>
  {
    Error_Handler();
 8002916:	f000 f921 	bl	8002b5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800292e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002932:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002934:	2300      	movs	r3, #0
 8002936:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002938:	2300      	movs	r3, #0
 800293a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002940:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002944:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002946:	2300      	movs	r3, #0
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800294a:	2300      	movs	r3, #0
 800294c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800294e:	2300      	movs	r3, #0
 8002950:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002952:	1d3b      	adds	r3, r7, #4
 8002954:	4619      	mov	r1, r3
 8002956:	480a      	ldr	r0, [pc, #40]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 8002958:	f007 f90c 	bl	8009b74 <HAL_TIMEx_ConfigBreakDeadTime>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d001      	beq.n	8002970 <_ZL12MX_TIM8_Initv+0x188>
  {
    Error_Handler();
 800296c:	f000 f8f6 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002970:	4803      	ldr	r0, [pc, #12]	; (8002980 <_ZL12MX_TIM8_Initv+0x198>)
 8002972:	f003 fbff 	bl	8006174 <HAL_TIM_MspPostInit>

}
 8002976:	bf00      	nop
 8002978:	3770      	adds	r7, #112	; 0x70
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000184 	.word	0x20000184
 8002984:	40013400 	.word	0x40013400

08002988 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b098      	sub	sp, #96	; 0x60
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800298e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	605a      	str	r2, [r3, #4]
 8002998:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800299a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800299e:	2200      	movs	r2, #0
 80029a0:	601a      	str	r2, [r3, #0]
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	609a      	str	r2, [r3, #8]
 80029a6:	60da      	str	r2, [r3, #12]
 80029a8:	611a      	str	r2, [r3, #16]
 80029aa:	615a      	str	r2, [r3, #20]
 80029ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029ae:	1d3b      	adds	r3, r7, #4
 80029b0:	2234      	movs	r2, #52	; 0x34
 80029b2:	2100      	movs	r1, #0
 80029b4:	4618      	mov	r0, r3
 80029b6:	f007 fe1b 	bl	800a5f0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80029ba:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <_ZL13MX_TIM15_Initv+0x130>)
 80029bc:	4a3f      	ldr	r2, [pc, #252]	; (8002abc <_ZL13MX_TIM15_Initv+0x134>)
 80029be:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 260;
 80029c0:	4b3d      	ldr	r3, [pc, #244]	; (8002ab8 <_ZL13MX_TIM15_Initv+0x130>)
 80029c2:	f44f 7282 	mov.w	r2, #260	; 0x104
 80029c6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029c8:	4b3b      	ldr	r3, [pc, #236]	; (8002ab8 <_ZL13MX_TIM15_Initv+0x130>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 80029ce:	4b3a      	ldr	r3, [pc, #232]	; (8002ab8 <_ZL13MX_TIM15_Initv+0x130>)
 80029d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029d4:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029d6:	4b38      	ldr	r3, [pc, #224]	; (8002ab8 <_ZL13MX_TIM15_Initv+0x130>)
 80029d8:	2200      	movs	r2, #0
 80029da:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80029dc:	4b36      	ldr	r3, [pc, #216]	; (8002ab8 <_ZL13MX_TIM15_Initv+0x130>)
 80029de:	2200      	movs	r2, #0
 80029e0:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e2:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <_ZL13MX_TIM15_Initv+0x130>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80029e8:	4833      	ldr	r0, [pc, #204]	; (8002ab8 <_ZL13MX_TIM15_Initv+0x130>)
 80029ea:	f005 ff0f 	bl	800880c <HAL_TIM_PWM_Init>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	bf14      	ite	ne
 80029f4:	2301      	movne	r3, #1
 80029f6:	2300      	moveq	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d001      	beq.n	8002a02 <_ZL13MX_TIM15_Initv+0x7a>
  {
    Error_Handler();
 80029fe:	f000 f8ad 	bl	8002b5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a02:	2300      	movs	r3, #0
 8002a04:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002a0a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4829      	ldr	r0, [pc, #164]	; (8002ab8 <_ZL13MX_TIM15_Initv+0x130>)
 8002a12:	f007 f82d 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	bf14      	ite	ne
 8002a1c:	2301      	movne	r3, #1
 8002a1e:	2300      	moveq	r3, #0
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <_ZL13MX_TIM15_Initv+0xa2>
  {
    Error_Handler();
 8002a26:	f000 f899 	bl	8002b5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002a2a:	2360      	movs	r3, #96	; 0x60
 8002a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002a32:	2300      	movs	r3, #0
 8002a34:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a36:	2300      	movs	r3, #0
 8002a38:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a42:	2300      	movs	r3, #0
 8002a44:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	481a      	ldr	r0, [pc, #104]	; (8002ab8 <_ZL13MX_TIM15_Initv+0x130>)
 8002a50:	f006 f984 	bl	8008d5c <HAL_TIM_PWM_ConfigChannel>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf14      	ite	ne
 8002a5a:	2301      	movne	r3, #1
 8002a5c:	2300      	moveq	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <_ZL13MX_TIM15_Initv+0xe0>
  {
    Error_Handler();
 8002a64:	f000 f87a 	bl	8002b5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a74:	2300      	movs	r3, #0
 8002a76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a86:	2300      	movs	r3, #0
 8002a88:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	480a      	ldr	r0, [pc, #40]	; (8002ab8 <_ZL13MX_TIM15_Initv+0x130>)
 8002a90:	f007 f870 	bl	8009b74 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <_ZL13MX_TIM15_Initv+0x120>
  {
    Error_Handler();
 8002aa4:	f000 f85a 	bl	8002b5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002aa8:	4803      	ldr	r0, [pc, #12]	; (8002ab8 <_ZL13MX_TIM15_Initv+0x130>)
 8002aaa:	f003 fb63 	bl	8006174 <HAL_TIM_MspPostInit>

}
 8002aae:	bf00      	nop
 8002ab0:	3760      	adds	r7, #96	; 0x60
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	200001d0 	.word	0x200001d0
 8002abc:	40014000 	.word	0x40014000

08002ac0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b088      	sub	sp, #32
 8002ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ac6:	f107 030c 	add.w	r3, r7, #12
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	605a      	str	r2, [r3, #4]
 8002ad0:	609a      	str	r2, [r3, #8]
 8002ad2:	60da      	str	r2, [r3, #12]
 8002ad4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad6:	4b20      	ldr	r3, [pc, #128]	; (8002b58 <_ZL12MX_GPIO_Initv+0x98>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ada:	4a1f      	ldr	r2, [pc, #124]	; (8002b58 <_ZL12MX_GPIO_Initv+0x98>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ae2:	4b1d      	ldr	r3, [pc, #116]	; (8002b58 <_ZL12MX_GPIO_Initv+0x98>)
 8002ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aee:	4b1a      	ldr	r3, [pc, #104]	; (8002b58 <_ZL12MX_GPIO_Initv+0x98>)
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	4a19      	ldr	r2, [pc, #100]	; (8002b58 <_ZL12MX_GPIO_Initv+0x98>)
 8002af4:	f043 0302 	orr.w	r3, r3, #2
 8002af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002afa:	4b17      	ldr	r3, [pc, #92]	; (8002b58 <_ZL12MX_GPIO_Initv+0x98>)
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	607b      	str	r3, [r7, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8002b06:	2200      	movs	r2, #0
 8002b08:	2193      	movs	r1, #147	; 0x93
 8002b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b0e:	f004 fe09 	bl	8007724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002b12:	2313      	movs	r3, #19
 8002b14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b16:	2301      	movs	r3, #1
 8002b18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b22:	f107 030c 	add.w	r3, r7, #12
 8002b26:	4619      	mov	r1, r3
 8002b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b2c:	f004 fc78 	bl	8007420 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b30:	2380      	movs	r3, #128	; 0x80
 8002b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002b34:	2311      	movs	r3, #17
 8002b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b40:	f107 030c 	add.w	r3, r7, #12
 8002b44:	4619      	mov	r1, r3
 8002b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b4a:	f004 fc69 	bl	8007420 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b4e:	bf00      	nop
 8002b50:	3720      	adds	r7, #32
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40021000 	.word	0x40021000

08002b5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b60:	b672      	cpsid	i
}
 8002b62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b64:	e7fe      	b.n	8002b64 <Error_Handler+0x8>
	...

08002b68 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d116      	bne.n	8002ba6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d111      	bne.n	8002ba6 <_Z41__static_initialization_and_destruction_0ii+0x3e>
Stepper stepper0;
 8002b82:	4818      	ldr	r0, [pc, #96]	; (8002be4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002b84:	f7ff f820 	bl	8001bc8 <_ZN7StepperC1Ev>
Stepper stepper1;
 8002b88:	4817      	ldr	r0, [pc, #92]	; (8002be8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002b8a:	f7ff f81d 	bl	8001bc8 <_ZN7StepperC1Ev>
Stepper stepper2;
 8002b8e:	4817      	ldr	r0, [pc, #92]	; (8002bec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002b90:	f7ff f81a 	bl	8001bc8 <_ZN7StepperC1Ev>
HolonomicDrive3 holo_drive;
 8002b94:	4816      	ldr	r0, [pc, #88]	; (8002bf0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002b96:	f7fe fd1b 	bl	80015d0 <_ZN15HolonomicDrive3C1Ev>
ChampiCan champi_can;
 8002b9a:	4816      	ldr	r0, [pc, #88]	; (8002bf4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b9c:	f7fe f8a8 	bl	8000cf0 <_ZN9ChampiCanC1Ev>
MessageRecomposer msg_recomposer_cmd_vel;
 8002ba0:	4815      	ldr	r0, [pc, #84]	; (8002bf8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002ba2:	f7fe fe25 	bl	80017f0 <_ZN17MessageRecomposerC1Ev>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d116      	bne.n	8002bda <_Z41__static_initialization_and_destruction_0ii+0x72>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d111      	bne.n	8002bda <_Z41__static_initialization_and_destruction_0ii+0x72>
 8002bb6:	4810      	ldr	r0, [pc, #64]	; (8002bf8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002bb8:	f7fe ff26 	bl	8001a08 <_ZN17MessageRecomposerD1Ev>
ChampiCan champi_can;
 8002bbc:	480d      	ldr	r0, [pc, #52]	; (8002bf4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002bbe:	f7fe f995 	bl	8000eec <_ZN9ChampiCanD1Ev>
HolonomicDrive3 holo_drive;
 8002bc2:	480b      	ldr	r0, [pc, #44]	; (8002bf0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002bc4:	f7fe fde0 	bl	8001788 <_ZN15HolonomicDrive3D1Ev>
Stepper stepper2;
 8002bc8:	4808      	ldr	r0, [pc, #32]	; (8002bec <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002bca:	f7ff f8c7 	bl	8001d5c <_ZN7StepperD1Ev>
Stepper stepper1;
 8002bce:	4806      	ldr	r0, [pc, #24]	; (8002be8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002bd0:	f7ff f8c4 	bl	8001d5c <_ZN7StepperD1Ev>
Stepper stepper0;
 8002bd4:	4803      	ldr	r0, [pc, #12]	; (8002be4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002bd6:	f7ff f8c1 	bl	8001d5c <_ZN7StepperD1Ev>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	2000021c 	.word	0x2000021c
 8002be8:	20000280 	.word	0x20000280
 8002bec:	200002e4 	.word	0x200002e4
 8002bf0:	20000348 	.word	0x20000348
 8002bf4:	200004a4 	.word	0x200004a4
 8002bf8:	200004d0 	.word	0x200004d0

08002bfc <_GLOBAL__sub_I_hfdcan1>:
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c04:	2001      	movs	r0, #1
 8002c06:	f7ff ffaf 	bl	8002b68 <_Z41__static_initialization_and_destruction_0ii>
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <_GLOBAL__sub_D_hfdcan1>:
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7ff ffa7 	bl	8002b68 <_Z41__static_initialization_and_destruction_0ii>
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b08f      	sub	sp, #60	; 0x3c
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	891a      	ldrh	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	8a1b      	ldrh	r3, [r3, #16]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d301      	bcc.n	8002c36 <load_descriptor_values+0x1a>
        return false;
 8002c32:	2300      	movs	r3, #0
 8002c34:	e156      	b.n	8002ee4 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	895b      	ldrh	r3, [r3, #10]
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	4413      	add	r3, r2
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8002c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	b2da      	uxtb	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d05a      	beq.n	8002d12 <load_descriptor_values+0xf6>
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	f200 8094 	bhi.w	8002d8a <load_descriptor_values+0x16e>
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <load_descriptor_values+0x50>
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d01f      	beq.n	8002caa <load_descriptor_values+0x8e>
 8002c6a:	e08e      	b.n	8002d8a <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	089b      	lsrs	r3, r3, #2
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8002c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c84:	0e1b      	lsrs	r3, r3, #24
 8002c86:	b25b      	sxtb	r3, r3
 8002c88:	f003 030f 	and.w	r3, r3, #15
 8002c8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8002c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c92:	0c1b      	lsrs	r3, r3, #16
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8002c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9a:	0f1b      	lsrs	r3, r3, #28
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	b29a      	uxth	r2, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	825a      	strh	r2, [r3, #18]
            break;
 8002ca8:	e0b4      	b.n	8002e14 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	895b      	ldrh	r3, [r3, #10]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	0c1b      	lsrs	r3, r3, #16
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc8:	b29a      	uxth	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	089b      	lsrs	r3, r3, #2
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	0f1b      	lsrs	r3, r3, #28
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	019b      	lsls	r3, r3, #6
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	b29a      	uxth	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8002cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cee:	0f1b      	lsrs	r3, r3, #28
 8002cf0:	b25b      	sxtb	r3, r3
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8002d00:	69fb      	ldr	r3, [r7, #28]
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	825a      	strh	r2, [r3, #18]
            break;
 8002d10:	e080      	b.n	8002e14 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	895b      	ldrh	r3, [r3, #10]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	895b      	ldrh	r3, [r3, #10]
 8002d30:	3302      	adds	r3, #2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	895b      	ldrh	r3, [r3, #10]
 8002d44:	3303      	adds	r3, #3
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8002d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d50:	0c1b      	lsrs	r3, r3, #16
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8002d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	019b      	lsls	r3, r3, #6
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	b29a      	uxth	r2, r3
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8002d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d78:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	825a      	strh	r2, [r3, #18]
            break;
 8002d88:	e044      	b.n	8002e14 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	895b      	ldrh	r3, [r3, #10]
 8002d94:	3301      	adds	r3, #1
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681a      	ldr	r2, [r3, #0]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	895b      	ldrh	r3, [r3, #10]
 8002da8:	3302      	adds	r3, #2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	895b      	ldrh	r3, [r3, #10]
 8002dbc:	3303      	adds	r3, #3
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	895b      	ldrh	r3, [r3, #10]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	0a1b      	lsrs	r3, r3, #8
 8002df2:	b29b      	uxth	r3, r3
 8002df4:	019b      	lsls	r3, r3, #6
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	b29a      	uxth	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	825a      	strh	r2, [r3, #18]
            break;
 8002e12:	bf00      	nop
        }
    }

    if (!iter->message)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d106      	bne.n	8002e2a <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	621a      	str	r2, [r3, #32]
 8002e28:	e041      	b.n	8002eae <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e30:	441a      	add	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8002e36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d008      	beq.n	8002e50 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e46:	425b      	negs	r3, r3
 8002e48:	441a      	add	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	621a      	str	r2, [r3, #32]
 8002e4e:	e01a      	b.n	8002e86 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7d9b      	ldrb	r3, [r3, #22]
 8002e54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d111      	bne.n	8002e80 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7d9b      	ldrb	r3, [r3, #22]
 8002e60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d005      	beq.n	8002e74 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	7d9b      	ldrb	r3, [r3, #22]
 8002e6c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8002e70:	2b80      	cmp	r3, #128	; 0x80
 8002e72:	d105      	bne.n	8002e80 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f103 0214 	add.w	r2, r3, #20
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	621a      	str	r2, [r3, #32]
 8002e7e:	e002      	b.n	8002e86 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7d9b      	ldrb	r3, [r3, #22]
 8002e8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e8e:	2b80      	cmp	r3, #128	; 0x80
 8002e90:	d109      	bne.n	8002ea6 <load_descriptor_values+0x28a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d005      	beq.n	8002ea6 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	61da      	str	r2, [r3, #28]
 8002ea4:	e003      	b.n	8002eae <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	699a      	ldr	r2, [r3, #24]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7d9b      	ldrb	r3, [r3, #22]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d005      	beq.n	8002ec6 <load_descriptor_values+0x2aa>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	7d9b      	ldrb	r3, [r3, #22]
 8002ebe:	f003 030f 	and.w	r3, r3, #15
 8002ec2:	2b09      	cmp	r3, #9
 8002ec4:	d10a      	bne.n	8002edc <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	685a      	ldr	r2, [r3, #4]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	89db      	ldrh	r3, [r3, #14]
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4413      	add	r3, r2
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	625a      	str	r2, [r3, #36]	; 0x24
 8002eda:	e002      	b.n	8002ee2 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 8002ee2:	2301      	movs	r3, #1
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	373c      	adds	r7, #60	; 0x3c
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b085      	sub	sp, #20
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
    iter->index++;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	891b      	ldrh	r3, [r3, #8]
 8002efc:	3301      	adds	r3, #1
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	891a      	ldrh	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	8a1b      	ldrh	r3, [r3, #16]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d30c      	bcc.n	8002f2c <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8002f2a:	e03c      	b.n	8002fa6 <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	895b      	ldrh	r3, [r3, #10]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	0a1b      	lsrs	r3, r3, #8
 8002f42:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0303 	and.w	r3, r3, #3
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	895a      	ldrh	r2, [r3, #10]
 8002f56:	893b      	ldrh	r3, [r7, #8]
 8002f58:	4413      	add	r3, r2
 8002f5a:	b29a      	uxth	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	899a      	ldrh	r2, [r3, #12]
 8002f64:	7afb      	ldrb	r3, [r7, #11]
 8002f66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	4413      	add	r3, r2
 8002f78:	b29a      	uxth	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	89da      	ldrh	r2, [r3, #14]
 8002f82:	7afb      	ldrb	r3, [r7, #11]
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d004      	beq.n	8002f96 <advance_iterator+0xa6>
 8002f8c:	7afb      	ldrb	r3, [r7, #11]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	2b09      	cmp	r3, #9
 8002f94:	d101      	bne.n	8002f9a <advance_iterator+0xaa>
 8002f96:	2301      	movs	r3, #1
 8002f98:	e000      	b.n	8002f9c <advance_iterator+0xac>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	81da      	strh	r2, [r3, #14]
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	60f8      	str	r0, [r7, #12]
 8002fba:	60b9      	str	r1, [r7, #8]
 8002fbc:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8002fbe:	2228      	movs	r2, #40	; 0x28
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f007 fb14 	bl	800a5f0 <memset>

    iter->descriptor = desc;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	68ba      	ldr	r2, [r7, #8]
 8002fcc:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f7ff fe21 	bl	8002c1c <load_descriptor_values>
 8002fda:	4603      	mov	r3, r0
}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3710      	adds	r7, #16
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b086      	sub	sp, #24
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	0a1b      	lsrs	r3, r3, #8
 8003002:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003006:	2b80      	cmp	r3, #128	; 0x80
 8003008:	d109      	bne.n	800301e <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	3304      	adds	r3, #4
 800300e:	461a      	mov	r2, r3
 8003010:	6939      	ldr	r1, [r7, #16]
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff ffcd 	bl	8002fb2 <pb_field_iter_begin>
 8003018:	4603      	mov	r3, r0
 800301a:	75fb      	strb	r3, [r7, #23]
 800301c:	e008      	b.n	8003030 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	461a      	mov	r2, r3
 8003024:	6939      	ldr	r1, [r7, #16]
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff ffc3 	bl	8002fb2 <pb_field_iter_begin>
 800302c:	4603      	mov	r3, r0
 800302e:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f103 020c 	add.w	r2, r3, #12
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	621a      	str	r2, [r3, #32]
    return status;
 800303a:	7dfb      	ldrb	r3, [r7, #23]
}
 800303c:	4618      	mov	r0, r3
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f7ff ff4f 	bl	8002ef0 <advance_iterator>
    (void)load_descriptor_values(iter);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff fde2 	bl	8002c1c <load_descriptor_values>
    return iter->index != 0;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	891b      	ldrh	r3, [r3, #8]
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}

0800306e <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800306e:	b580      	push	{r7, lr}
 8003070:	b084      	sub	sp, #16
 8003072:	af00      	add	r7, sp, #0
 8003074:	6078      	str	r0, [r7, #4]
 8003076:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	8a1b      	ldrh	r3, [r3, #16]
 800307c:	461a      	mov	r2, r3
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	4293      	cmp	r3, r2
 8003082:	d101      	bne.n	8003088 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8003084:	2301      	movs	r3, #1
 8003086:	e044      	b.n	8003112 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	8a9b      	ldrh	r3, [r3, #20]
 800308e:	461a      	mov	r2, r3
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	4293      	cmp	r3, r2
 8003094:	d901      	bls.n	800309a <pb_field_iter_find+0x2c>
    {
        return false;
 8003096:	2300      	movs	r3, #0
 8003098:	e03b      	b.n	8003112 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	891b      	ldrh	r3, [r3, #8]
 800309e:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	8a1b      	ldrh	r3, [r3, #16]
 80030a4:	461a      	mov	r2, r3
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d204      	bcs.n	80030b6 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	8a1a      	ldrh	r2, [r3, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7ff ff1a 	bl	8002ef0 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	895b      	ldrh	r3, [r3, #10]
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	089a      	lsrs	r2, r3, #2
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	4053      	eors	r3, r2
 80030d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d110      	bne.n	8003100 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f7ff fd9c 	bl	8002c1c <load_descriptor_values>

                if (iter->tag == tag &&
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8a1b      	ldrh	r3, [r3, #16]
 80030e8:	461a      	mov	r2, r3
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d107      	bne.n	8003100 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	7d9b      	ldrb	r3, [r3, #22]
 80030f4:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 80030f8:	2b0a      	cmp	r3, #10
 80030fa:	d001      	beq.n	8003100 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e008      	b.n	8003112 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	891b      	ldrh	r3, [r3, #8]
 8003104:	89fa      	ldrh	r2, [r7, #14]
 8003106:	429a      	cmp	r2, r3
 8003108:	d1d5      	bne.n	80030b6 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f7ff fd86 	bl	8002c1c <load_descriptor_values>
        return false;
 8003110:	2300      	movs	r3, #0
    }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 800311a:	b580      	push	{r7, lr}
 800311c:	b084      	sub	sp, #16
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	7d9b      	ldrb	r3, [r3, #22]
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	2b0a      	cmp	r3, #10
 800312c:	d101      	bne.n	8003132 <pb_field_iter_find_extension+0x18>
    {
        return true;
 800312e:	2301      	movs	r3, #1
 8003130:	e022      	b.n	8003178 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	891b      	ldrh	r3, [r3, #8]
 8003136:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff fed9 	bl	8002ef0 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	895b      	ldrh	r3, [r3, #10]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	0a1b      	lsrs	r3, r3, #8
 8003154:	f003 030f 	and.w	r3, r3, #15
 8003158:	2b0a      	cmp	r3, #10
 800315a:	d104      	bne.n	8003166 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f7ff fd5d 	bl	8002c1c <load_descriptor_values>
 8003162:	4603      	mov	r3, r0
 8003164:	e008      	b.n	8003178 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	891b      	ldrh	r3, [r3, #8]
 800316a:	89fa      	ldrh	r2, [r7, #14]
 800316c:	429a      	cmp	r2, r3
 800316e:	d1e3      	bne.n	8003138 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff fd53 	bl	8002c1c <load_descriptor_values>
        return false;
 8003176:	2300      	movs	r3, #0
    }
}
 8003178:	4618      	mov	r0, r3
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}

08003180 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800318c:	68fb      	ldr	r3, [r7, #12]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b084      	sub	sp, #16
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff ffea 	bl	8003180 <pb_const_cast>
 80031ac:	4603      	mov	r3, r0
 80031ae:	461a      	mov	r2, r3
 80031b0:	68b9      	ldr	r1, [r7, #8]
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff fefd 	bl	8002fb2 <pb_field_iter_begin>
 80031b8:	4603      	mov	r3, r0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3710      	adds	r7, #16
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b082      	sub	sp, #8
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 80031cc:	6838      	ldr	r0, [r7, #0]
 80031ce:	f7ff ffd7 	bl	8003180 <pb_const_cast>
 80031d2:	4603      	mov	r3, r0
 80031d4:	4619      	mov	r1, r3
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff ff04 	bl	8002fe4 <pb_field_iter_begin_extension>
 80031dc:	4603      	mov	r3, r0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 80031e6:	b580      	push	{r7, lr}
 80031e8:	b086      	sub	sp, #24
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	60f8      	str	r0, [r7, #12]
 80031ee:	60b9      	str	r1, [r7, #8]
 80031f0:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	8a5b      	ldrh	r3, [r3, #18]
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d125      	bne.n	8003246 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69db      	ldr	r3, [r3, #28]
 80031fe:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d01f      	beq.n	8003246 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00c      	beq.n	8003226 <pb_default_field_callback+0x40>
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d008      	beq.n	8003226 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	3204      	adds	r2, #4
 800321c:	6879      	ldr	r1, [r7, #4]
 800321e:	68f8      	ldr	r0, [r7, #12]
 8003220:	4798      	blx	r3
 8003222:	4603      	mov	r3, r0
 8003224:	e010      	b.n	8003248 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00c      	beq.n	8003246 <pb_default_field_callback+0x60>
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d008      	beq.n	8003246 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	3204      	adds	r2, #4
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	68b8      	ldr	r0, [r7, #8]
 8003240:	4798      	blx	r3
 8003242:	4603      	mov	r3, r0
 8003244:	e000      	b.n	8003248 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 8003246:	2301      	movs	r3, #1

}
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b086      	sub	sp, #24
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	441a      	add	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d004      	beq.n	800327e <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6979      	ldr	r1, [r7, #20]
 8003278:	68b8      	ldr	r0, [r7, #8]
 800327a:	f007 fa88 	bl	800a78e <memcpy>
    }
    
    return true;
 800327e:	2301      	movs	r3, #1
}
 8003280:	4618      	mov	r0, r3
 8003282:	3718      	adds	r7, #24
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <pb_read+0x16>
        return true;
 800329a:	2301      	movs	r3, #1
 800329c:	e05f      	b.n	800335e <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d123      	bne.n	80032ec <pb_read+0x64>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a2f      	ldr	r2, [pc, #188]	; (8003368 <pb_read+0xe0>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d01e      	beq.n	80032ec <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 80032ae:	e011      	b.n	80032d4 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 80032b0:	f107 0310 	add.w	r3, r7, #16
 80032b4:	2210      	movs	r2, #16
 80032b6:	4619      	mov	r1, r3
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f7ff ffe5 	bl	8003288 <pb_read>
 80032be:	4603      	mov	r3, r0
 80032c0:	f083 0301 	eor.w	r3, r3, #1
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <pb_read+0x46>
				return false;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e047      	b.n	800335e <pb_read+0xd6>
			
			count -= 16;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3b10      	subs	r3, #16
 80032d2:	607b      	str	r3, [r7, #4]
		while (count > 16)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b10      	cmp	r3, #16
 80032d8:	d8ea      	bhi.n	80032b0 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 80032da:	f107 0310 	add.w	r3, r7, #16
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	4619      	mov	r1, r3
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f7ff ffd0 	bl	8003288 <pb_read>
 80032e8:	4603      	mov	r3, r0
 80032ea:	e038      	b.n	800335e <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d90b      	bls.n	800330e <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d002      	beq.n	8003304 <pb_read+0x7c>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	e000      	b.n	8003306 <pb_read+0x7e>
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <pb_read+0xe4>)
 8003306:	68fa      	ldr	r2, [r7, #12]
 8003308:	60d3      	str	r3, [r2, #12]
 800330a:	2300      	movs	r3, #0
 800330c:	e027      	b.n	800335e <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	68b9      	ldr	r1, [r7, #8]
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	4798      	blx	r3
 800331a:	4603      	mov	r3, r0
 800331c:	f083 0301 	eor.w	r3, r3, #1
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <pb_read+0xac>
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	e000      	b.n	8003336 <pb_read+0xae>
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <pb_read+0xe8>)
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	60d3      	str	r3, [r2, #12]
 800333a:	2300      	movs	r3, #0
 800333c:	e00f      	b.n	800335e <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	429a      	cmp	r2, r3
 8003346:	d903      	bls.n	8003350 <pb_read+0xc8>
        stream->bytes_left = 0;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
 800334e:	e005      	b.n	800335c <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	689a      	ldr	r2, [r3, #8]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1ad2      	subs	r2, r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	609a      	str	r2, [r3, #8]

    return true;
 800335c:	2301      	movs	r3, #1
}
 800335e:	4618      	mov	r0, r3
 8003360:	3720      	adds	r7, #32
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	08003251 	.word	0x08003251
 800336c:	0800b110 	.word	0x0800b110
 8003370:	0800b120 	.word	0x0800b120

08003374 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10b      	bne.n	800339e <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <pb_readbyte+0x20>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	e000      	b.n	8003396 <pb_readbyte+0x22>
 8003394:	4b13      	ldr	r3, [pc, #76]	; (80033e4 <pb_readbyte+0x70>)
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	60d3      	str	r3, [r2, #12]
 800339a:	2300      	movs	r3, #0
 800339c:	e01d      	b.n	80033da <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2201      	movs	r2, #1
 80033a4:	6839      	ldr	r1, [r7, #0]
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	f083 0301 	eor.w	r3, r3, #1
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00b      	beq.n	80033ce <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	68db      	ldr	r3, [r3, #12]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d002      	beq.n	80033c4 <pb_readbyte+0x50>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	e000      	b.n	80033c6 <pb_readbyte+0x52>
 80033c4:	4b08      	ldr	r3, [pc, #32]	; (80033e8 <pb_readbyte+0x74>)
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	60d3      	str	r3, [r2, #12]
 80033ca:	2300      	movs	r3, #0
 80033cc:	e005      	b.n	80033da <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	1e5a      	subs	r2, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	609a      	str	r2, [r3, #8]
    
    return true;    
 80033d8:	2301      	movs	r3, #1
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	0800b110 	.word	0x0800b110
 80033e8:	0800b120 	.word	0x0800b120

080033ec <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 80033ec:	b490      	push	{r4, r7}
 80033ee:	b08a      	sub	sp, #40	; 0x28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 80033f8:	4b0a      	ldr	r3, [pc, #40]	; (8003424 <pb_istream_from_buffer+0x38>)
 80033fa:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8003408:	2300      	movs	r3, #0
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	461c      	mov	r4, r3
 8003410:	f107 0318 	add.w	r3, r7, #24
 8003414:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003416:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	3728      	adds	r7, #40	; 0x28
 800341e:	46bd      	mov	sp, r7
 8003420:	bc90      	pop	{r4, r7}
 8003422:	4770      	bx	lr
 8003424:	08003251 	.word	0x08003251

08003428 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b088      	sub	sp, #32
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8003434:	f107 0315 	add.w	r3, r7, #21
 8003438:	4619      	mov	r1, r3
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f7ff ff9a 	bl	8003374 <pb_readbyte>
 8003440:	4603      	mov	r3, r0
 8003442:	f083 0301 	eor.w	r3, r3, #1
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00b      	beq.n	8003464 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d105      	bne.n	8003460 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d002      	beq.n	8003460 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8003460:	2300      	movs	r3, #0
 8003462:	e084      	b.n	800356e <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8003464:	7d7b      	ldrb	r3, [r7, #21]
 8003466:	b25b      	sxtb	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	db02      	blt.n	8003472 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 800346c:	7d7b      	ldrb	r3, [r7, #21]
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	e079      	b.n	8003566 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8003472:	2307      	movs	r3, #7
 8003474:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8003476:	7d7b      	ldrb	r3, [r7, #21]
 8003478:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800347c:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 800347e:	f107 0315 	add.w	r3, r7, #21
 8003482:	4619      	mov	r1, r3
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f7ff ff75 	bl	8003374 <pb_readbyte>
 800348a:	4603      	mov	r3, r0
 800348c:	f083 0301 	eor.w	r3, r3, #1
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <pb_decode_varint32_eof+0x72>
                return false;
 8003496:	2300      	movs	r3, #0
 8003498:	e069      	b.n	800356e <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	2b1f      	cmp	r3, #31
 800349e:	d92f      	bls.n	8003500 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	2b3e      	cmp	r3, #62	; 0x3e
 80034a4:	d801      	bhi.n	80034aa <pb_decode_varint32_eof+0x82>
 80034a6:	23ff      	movs	r3, #255	; 0xff
 80034a8:	e000      	b.n	80034ac <pb_decode_varint32_eof+0x84>
 80034aa:	2301      	movs	r3, #1
 80034ac:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80034ae:	7d7b      	ldrb	r3, [r7, #21]
 80034b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d006      	beq.n	80034c6 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 80034b8:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	da05      	bge.n	80034ca <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 80034be:	7d7b      	ldrb	r3, [r7, #21]
 80034c0:	7dfa      	ldrb	r2, [r7, #23]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d101      	bne.n	80034ca <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80034c6:	2301      	movs	r3, #1
 80034c8:	e000      	b.n	80034cc <pb_decode_varint32_eof+0xa4>
 80034ca:	2300      	movs	r3, #0
 80034cc:	75bb      	strb	r3, [r7, #22]
 80034ce:	7dbb      	ldrb	r3, [r7, #22]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	2b3f      	cmp	r3, #63	; 0x3f
 80034da:	d805      	bhi.n	80034e8 <pb_decode_varint32_eof+0xc0>
 80034dc:	7dbb      	ldrb	r3, [r7, #22]
 80034de:	f083 0301 	eor.w	r3, r3, #1
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d037      	beq.n	8003558 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d002      	beq.n	80034f6 <pb_decode_varint32_eof+0xce>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	e000      	b.n	80034f8 <pb_decode_varint32_eof+0xd0>
 80034f6:	4b20      	ldr	r3, [pc, #128]	; (8003578 <pb_decode_varint32_eof+0x150>)
 80034f8:	68fa      	ldr	r2, [r7, #12]
 80034fa:	60d3      	str	r3, [r2, #12]
 80034fc:	2300      	movs	r3, #0
 80034fe:	e036      	b.n	800356e <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b1c      	cmp	r3, #28
 8003504:	d11f      	bne.n	8003546 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8003506:	7d7b      	ldrb	r3, [r7, #21]
 8003508:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800350c:	2b00      	cmp	r3, #0
 800350e:	d010      	beq.n	8003532 <pb_decode_varint32_eof+0x10a>
 8003510:	7d7b      	ldrb	r3, [r7, #21]
 8003512:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003516:	2b78      	cmp	r3, #120	; 0x78
 8003518:	d00b      	beq.n	8003532 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d002      	beq.n	8003528 <pb_decode_varint32_eof+0x100>
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	e000      	b.n	800352a <pb_decode_varint32_eof+0x102>
 8003528:	4b13      	ldr	r3, [pc, #76]	; (8003578 <pb_decode_varint32_eof+0x150>)
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	60d3      	str	r3, [r2, #12]
 800352e:	2300      	movs	r3, #0
 8003530:	e01d      	b.n	800356e <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8003532:	7d7b      	ldrb	r3, [r7, #21]
 8003534:	f003 020f 	and.w	r2, r3, #15
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	69fa      	ldr	r2, [r7, #28]
 8003540:	4313      	orrs	r3, r2
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	e008      	b.n	8003558 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8003546:	7d7b      	ldrb	r3, [r7, #21]
 8003548:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	4313      	orrs	r3, r2
 8003556:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	3307      	adds	r3, #7
 800355c:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 800355e:	7d7b      	ldrb	r3, [r7, #21]
 8003560:	b25b      	sxtb	r3, r3
 8003562:	2b00      	cmp	r3, #0
 8003564:	db8b      	blt.n	800347e <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	69fa      	ldr	r2, [r7, #28]
 800356a:	601a      	str	r2, [r3, #0]
   return true;
 800356c:	2301      	movs	r3, #1
}
 800356e:	4618      	mov	r0, r3
 8003570:	3720      	adds	r7, #32
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	0800b12c 	.word	0x0800b12c

0800357c <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8003586:	2200      	movs	r2, #0
 8003588:	6839      	ldr	r1, [r7, #0]
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ff4c 	bl	8003428 <pb_decode_varint32_eof>
 8003590:	4603      	mov	r3, r0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
	...

0800359c <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 800359c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035a0:	b08a      	sub	sp, #40	; 0x28
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 80035a8:	2300      	movs	r3, #0
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 80035b8:	f107 0317 	add.w	r3, r7, #23
 80035bc:	4619      	mov	r1, r3
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f7ff fed8 	bl	8003374 <pb_readbyte>
 80035c4:	4603      	mov	r3, r0
 80035c6:	f083 0301 	eor.w	r3, r3, #1
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <pb_decode_varint+0x38>
            return false;
 80035d0:	2300      	movs	r3, #0
 80035d2:	e041      	b.n	8003658 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	2b3e      	cmp	r3, #62	; 0x3e
 80035d8:	d910      	bls.n	80035fc <pb_decode_varint+0x60>
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00b      	beq.n	80035fc <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <pb_decode_varint+0x56>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	e000      	b.n	80035f4 <pb_decode_varint+0x58>
 80035f2:	4b1c      	ldr	r3, [pc, #112]	; (8003664 <pb_decode_varint+0xc8>)
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	60d3      	str	r3, [r2, #12]
 80035f8:	2300      	movs	r3, #0
 80035fa:	e02d      	b.n	8003658 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80035fc:	7dfb      	ldrb	r3, [r7, #23]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2200      	movs	r2, #0
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	607a      	str	r2, [r7, #4]
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 800360c:	f04f 0900 	mov.w	r9, #0
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003612:	f1a3 0120 	sub.w	r1, r3, #32
 8003616:	f1c3 0220 	rsb	r2, r3, #32
 800361a:	fa09 f503 	lsl.w	r5, r9, r3
 800361e:	fa08 f101 	lsl.w	r1, r8, r1
 8003622:	430d      	orrs	r5, r1
 8003624:	fa28 f202 	lsr.w	r2, r8, r2
 8003628:	4315      	orrs	r5, r2
 800362a:	fa08 f403 	lsl.w	r4, r8, r3
 800362e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003632:	ea42 0a04 	orr.w	sl, r2, r4
 8003636:	ea43 0b05 	orr.w	fp, r3, r5
 800363a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 800363e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003640:	3307      	adds	r3, #7
 8003642:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 8003644:	7dfb      	ldrb	r3, [r7, #23]
 8003646:	b25b      	sxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	dbb5      	blt.n	80035b8 <pb_decode_varint+0x1c>
    
    *dest = result;
 800364c:	68b9      	ldr	r1, [r7, #8]
 800364e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003652:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8003656:	2301      	movs	r3, #1
}
 8003658:	4618      	mov	r0, r3
 800365a:	3728      	adds	r7, #40	; 0x28
 800365c:	46bd      	mov	sp, r7
 800365e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003662:	bf00      	nop
 8003664:	0800b12c 	.word	0x0800b12c

08003668 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8003670:	f107 030f 	add.w	r3, r7, #15
 8003674:	2201      	movs	r2, #1
 8003676:	4619      	mov	r1, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f7ff fe05 	bl	8003288 <pb_read>
 800367e:	4603      	mov	r3, r0
 8003680:	f083 0301 	eor.w	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <pb_skip_varint+0x26>
            return false;
 800368a:	2300      	movs	r3, #0
 800368c:	e004      	b.n	8003698 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 800368e:	7bfb      	ldrb	r3, [r7, #15]
 8003690:	b25b      	sxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	dbec      	blt.n	8003670 <pb_skip_varint+0x8>
    return true;
 8003696:	2301      	movs	r3, #1
}
 8003698:	4618      	mov	r0, r3
 800369a:	3710      	adds	r7, #16
 800369c:	46bd      	mov	sp, r7
 800369e:	bd80      	pop	{r7, pc}

080036a0 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 80036a8:	f107 030c 	add.w	r3, r7, #12
 80036ac:	4619      	mov	r1, r3
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ff64 	bl	800357c <pb_decode_varint32>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f083 0301 	eor.w	r3, r3, #1
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <pb_skip_string+0x24>
        return false;
 80036c0:	2300      	movs	r3, #0
 80036c2:	e006      	b.n	80036d2 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	461a      	mov	r2, r3
 80036c8:	2100      	movs	r1, #0
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff fddc 	bl	8003288 <pb_read>
 80036d0:	4603      	mov	r3, r0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b086      	sub	sp, #24
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
 80036e6:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	2200      	movs	r2, #0
 80036ec:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	2200      	movs	r2, #0
 80036f2:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80036fa:	f107 0314 	add.w	r3, r7, #20
 80036fe:	683a      	ldr	r2, [r7, #0]
 8003700:	4619      	mov	r1, r3
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f7ff fe90 	bl	8003428 <pb_decode_varint32_eof>
 8003708:	4603      	mov	r3, r0
 800370a:	f083 0301 	eor.w	r3, r3, #1
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <pb_decode_tag+0x3e>
    {
        return false;
 8003714:	2300      	movs	r3, #0
 8003716:	e00b      	b.n	8003730 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	08da      	lsrs	r2, r3, #3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	f003 0307 	and.w	r3, r3, #7
 8003728:	b2da      	uxtb	r2, r3
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	701a      	strb	r2, [r3, #0]
    return true;
 800372e:	2301      	movs	r3, #1
}
 8003730:	4618      	mov	r0, r3
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	2b05      	cmp	r3, #5
 8003748:	d826      	bhi.n	8003798 <pb_skip_field+0x60>
 800374a:	a201      	add	r2, pc, #4	; (adr r2, 8003750 <pb_skip_field+0x18>)
 800374c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003750:	08003769 	.word	0x08003769
 8003754:	08003773 	.word	0x08003773
 8003758:	08003781 	.word	0x08003781
 800375c:	08003799 	.word	0x08003799
 8003760:	08003799 	.word	0x08003799
 8003764:	0800378b 	.word	0x0800378b
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f7ff ff7d 	bl	8003668 <pb_skip_varint>
 800376e:	4603      	mov	r3, r0
 8003770:	e01d      	b.n	80037ae <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8003772:	2208      	movs	r2, #8
 8003774:	2100      	movs	r1, #0
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fd86 	bl	8003288 <pb_read>
 800377c:	4603      	mov	r3, r0
 800377e:	e016      	b.n	80037ae <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff ff8d 	bl	80036a0 <pb_skip_string>
 8003786:	4603      	mov	r3, r0
 8003788:	e011      	b.n	80037ae <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800378a:	2204      	movs	r2, #4
 800378c:	2100      	movs	r1, #0
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7ff fd7a 	bl	8003288 <pb_read>
 8003794:	4603      	mov	r3, r0
 8003796:	e00a      	b.n	80037ae <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <pb_skip_field+0x6e>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	e000      	b.n	80037a8 <pb_skip_field+0x70>
 80037a6:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <pb_skip_field+0x80>)
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	60d3      	str	r3, [r2, #12]
 80037ac:	2300      	movs	r3, #0
    }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	0800b13c 	.word	0x0800b13c

080037bc <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	607a      	str	r2, [r7, #4]
 80037c6:	603b      	str	r3, [r7, #0]
 80037c8:	460b      	mov	r3, r1
 80037ca:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 80037d2:	7afb      	ldrb	r3, [r7, #11]
 80037d4:	2b05      	cmp	r3, #5
 80037d6:	d03f      	beq.n	8003858 <read_raw_value+0x9c>
 80037d8:	2b05      	cmp	r3, #5
 80037da:	dc47      	bgt.n	800386c <read_raw_value+0xb0>
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d002      	beq.n	80037e6 <read_raw_value+0x2a>
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d02f      	beq.n	8003844 <read_raw_value+0x88>
 80037e4:	e042      	b.n	800386c <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d20b      	bcs.n	8003818 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <read_raw_value+0x52>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	e000      	b.n	8003810 <read_raw_value+0x54>
 800380e:	4b1f      	ldr	r3, [pc, #124]	; (800388c <read_raw_value+0xd0>)
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	60d3      	str	r3, [r2, #12]
 8003814:	2300      	movs	r3, #0
 8003816:	e034      	b.n	8003882 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8003818:	2201      	movs	r2, #1
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f7ff fd33 	bl	8003288 <pb_read>
 8003822:	4603      	mov	r3, r0
 8003824:	f083 0301 	eor.w	r3, r3, #1
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <read_raw_value+0x76>
                    return false;
 800382e:	2300      	movs	r3, #0
 8003830:	e027      	b.n	8003882 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	b25b      	sxtb	r3, r3
 800383c:	2b00      	cmp	r3, #0
 800383e:	dbd5      	blt.n	80037ec <read_raw_value+0x30>
            return true;
 8003840:	2301      	movs	r3, #1
 8003842:	e01e      	b.n	8003882 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2208      	movs	r2, #8
 8003848:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 800384a:	2208      	movs	r2, #8
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff fd1a 	bl	8003288 <pb_read>
 8003854:	4603      	mov	r3, r0
 8003856:	e014      	b.n	8003882 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	2204      	movs	r2, #4
 800385c:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 800385e:	2204      	movs	r2, #4
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f7ff fd10 	bl	8003288 <pb_read>
 8003868:	4603      	mov	r3, r0
 800386a:	e00a      	b.n	8003882 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <read_raw_value+0xbe>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	e000      	b.n	800387c <read_raw_value+0xc0>
 800387a:	4b05      	ldr	r3, [pc, #20]	; (8003890 <read_raw_value+0xd4>)
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	60d3      	str	r3, [r2, #12]
 8003880:	2300      	movs	r3, #0
    }
}
 8003882:	4618      	mov	r0, r3
 8003884:	3718      	adds	r7, #24
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	0800b12c 	.word	0x0800b12c
 8003890:	0800b13c 	.word	0x0800b13c

08003894 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 800389e:	f107 030c 	add.w	r3, r7, #12
 80038a2:	4619      	mov	r1, r3
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff fe69 	bl	800357c <pb_decode_varint32>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f083 0301 	eor.w	r3, r3, #1
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <pb_make_string_substream+0x26>
        return false;
 80038b6:	2300      	movs	r3, #0
 80038b8:	e020      	b.n	80038fc <pb_make_string_substream+0x68>
    
    *substream = *stream;
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4614      	mov	r4, r2
 80038c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d20b      	bcs.n	80038e8 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <pb_make_string_substream+0x4a>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	e000      	b.n	80038e0 <pb_make_string_substream+0x4c>
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <pb_make_string_substream+0x70>)
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	60d3      	str	r3, [r2, #12]
 80038e4:	2300      	movs	r3, #0
 80038e6:	e009      	b.n	80038fc <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1ad2      	subs	r2, r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	609a      	str	r2, [r3, #8]
    return true;
 80038fa:	2301      	movs	r3, #1
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	bd90      	pop	{r4, r7, pc}
 8003904:	0800b150 	.word	0x0800b150

08003908 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00e      	beq.n	8003938 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	461a      	mov	r2, r3
 8003920:	2100      	movs	r1, #0
 8003922:	6838      	ldr	r0, [r7, #0]
 8003924:	f7ff fcb0 	bl	8003288 <pb_read>
 8003928:	4603      	mov	r3, r0
 800392a:	f083 0301 	eor.w	r3, r3, #1
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <pb_close_string_substream+0x30>
            return false;
 8003934:	2300      	movs	r3, #0
 8003936:	e008      	b.n	800394a <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	68da      	ldr	r2, [r3, #12]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8003948:	2301      	movs	r3, #1
}
 800394a:	4618      	mov	r0, r3
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	460b      	mov	r3, r1
 800395e:	607a      	str	r2, [r7, #4]
 8003960:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	7d9b      	ldrb	r3, [r3, #22]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	2b0b      	cmp	r3, #11
 800396c:	f200 80d4 	bhi.w	8003b18 <decode_basic_field+0x1c4>
 8003970:	a201      	add	r2, pc, #4	; (adr r2, 8003978 <decode_basic_field+0x24>)
 8003972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003976:	bf00      	nop
 8003978:	080039a9 	.word	0x080039a9
 800397c:	080039d9 	.word	0x080039d9
 8003980:	080039d9 	.word	0x080039d9
 8003984:	080039d9 	.word	0x080039d9
 8003988:	08003a09 	.word	0x08003a09
 800398c:	08003a3d 	.word	0x08003a3d
 8003990:	08003a71 	.word	0x08003a71
 8003994:	08003a9b 	.word	0x08003a9b
 8003998:	08003ac5 	.word	0x08003ac5
 800399c:	08003ac5 	.word	0x08003ac5
 80039a0:	08003b19 	.word	0x08003b19
 80039a4:	08003aef 	.word	0x08003aef
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80039a8:	7afb      	ldrb	r3, [r7, #11]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00e      	beq.n	80039cc <decode_basic_field+0x78>
 80039ae:	7afb      	ldrb	r3, [r7, #11]
 80039b0:	2bff      	cmp	r3, #255	; 0xff
 80039b2:	d00b      	beq.n	80039cc <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <decode_basic_field+0x6e>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	e000      	b.n	80039c4 <decode_basic_field+0x70>
 80039c2:	4b5d      	ldr	r3, [pc, #372]	; (8003b38 <decode_basic_field+0x1e4>)
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	60d3      	str	r3, [r2, #12]
 80039c8:	2300      	movs	r3, #0
 80039ca:	e0b0      	b.n	8003b2e <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fef6 	bl	80047c0 <pb_dec_bool>
 80039d4:	4603      	mov	r3, r0
 80039d6:	e0aa      	b.n	8003b2e <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80039d8:	7afb      	ldrb	r3, [r7, #11]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00e      	beq.n	80039fc <decode_basic_field+0xa8>
 80039de:	7afb      	ldrb	r3, [r7, #11]
 80039e0:	2bff      	cmp	r3, #255	; 0xff
 80039e2:	d00b      	beq.n	80039fc <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d002      	beq.n	80039f2 <decode_basic_field+0x9e>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	e000      	b.n	80039f4 <decode_basic_field+0xa0>
 80039f2:	4b51      	ldr	r3, [pc, #324]	; (8003b38 <decode_basic_field+0x1e4>)
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	60d3      	str	r3, [r2, #12]
 80039f8:	2300      	movs	r3, #0
 80039fa:	e098      	b.n	8003b2e <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 80039fc:	6879      	ldr	r1, [r7, #4]
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f000 feee 	bl	80047e0 <pb_dec_varint>
 8003a04:	4603      	mov	r3, r0
 8003a06:	e092      	b.n	8003b2e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8003a08:	7afb      	ldrb	r3, [r7, #11]
 8003a0a:	2b05      	cmp	r3, #5
 8003a0c:	d00e      	beq.n	8003a2c <decode_basic_field+0xd8>
 8003a0e:	7afb      	ldrb	r3, [r7, #11]
 8003a10:	2bff      	cmp	r3, #255	; 0xff
 8003a12:	d00b      	beq.n	8003a2c <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <decode_basic_field+0xce>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	e000      	b.n	8003a24 <decode_basic_field+0xd0>
 8003a22:	4b45      	ldr	r3, [pc, #276]	; (8003b38 <decode_basic_field+0x1e4>)
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	60d3      	str	r3, [r2, #12]
 8003a28:	2300      	movs	r3, #0
 8003a2a:	e080      	b.n	8003b2e <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69db      	ldr	r3, [r3, #28]
 8003a30:	4619      	mov	r1, r3
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f000 fe8a 	bl	800474c <pb_decode_fixed32>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	e078      	b.n	8003b2e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8003a3c:	7afb      	ldrb	r3, [r7, #11]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d00e      	beq.n	8003a60 <decode_basic_field+0x10c>
 8003a42:	7afb      	ldrb	r3, [r7, #11]
 8003a44:	2bff      	cmp	r3, #255	; 0xff
 8003a46:	d00b      	beq.n	8003a60 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <decode_basic_field+0x102>
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	e000      	b.n	8003a58 <decode_basic_field+0x104>
 8003a56:	4b38      	ldr	r3, [pc, #224]	; (8003b38 <decode_basic_field+0x1e4>)
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	60d3      	str	r3, [r2, #12]
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e066      	b.n	8003b2e <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
 8003a64:	4619      	mov	r1, r3
 8003a66:	68f8      	ldr	r0, [r7, #12]
 8003a68:	f000 fe8c 	bl	8004784 <pb_decode_fixed64>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	e05e      	b.n	8003b2e <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8003a70:	7afb      	ldrb	r3, [r7, #11]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d00b      	beq.n	8003a8e <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d002      	beq.n	8003a84 <decode_basic_field+0x130>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	68db      	ldr	r3, [r3, #12]
 8003a82:	e000      	b.n	8003a86 <decode_basic_field+0x132>
 8003a84:	4b2c      	ldr	r3, [pc, #176]	; (8003b38 <decode_basic_field+0x1e4>)
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	60d3      	str	r3, [r2, #12]
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e04f      	b.n	8003b2e <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	68f8      	ldr	r0, [r7, #12]
 8003a92:	f000 ffd1 	bl	8004a38 <pb_dec_bytes>
 8003a96:	4603      	mov	r3, r0
 8003a98:	e049      	b.n	8003b2e <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 8003a9a:	7afb      	ldrb	r3, [r7, #11]
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d00b      	beq.n	8003ab8 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <decode_basic_field+0x15a>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	e000      	b.n	8003ab0 <decode_basic_field+0x15c>
 8003aae:	4b22      	ldr	r3, [pc, #136]	; (8003b38 <decode_basic_field+0x1e4>)
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	60d3      	str	r3, [r2, #12]
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	e03a      	b.n	8003b2e <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f001 f830 	bl	8004b20 <pb_dec_string>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	e034      	b.n	8003b2e <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8003ac4:	7afb      	ldrb	r3, [r7, #11]
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d00b      	beq.n	8003ae2 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d002      	beq.n	8003ad8 <decode_basic_field+0x184>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	e000      	b.n	8003ada <decode_basic_field+0x186>
 8003ad8:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <decode_basic_field+0x1e4>)
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	60d3      	str	r3, [r2, #12]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	e025      	b.n	8003b2e <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	f001 f897 	bl	8004c18 <pb_dec_submessage>
 8003aea:	4603      	mov	r3, r0
 8003aec:	e01f      	b.n	8003b2e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8003aee:	7afb      	ldrb	r3, [r7, #11]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d00b      	beq.n	8003b0c <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <decode_basic_field+0x1ae>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	e000      	b.n	8003b04 <decode_basic_field+0x1b0>
 8003b02:	4b0d      	ldr	r3, [pc, #52]	; (8003b38 <decode_basic_field+0x1e4>)
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	60d3      	str	r3, [r2, #12]
 8003b08:	2300      	movs	r3, #0
 8003b0a:	e010      	b.n	8003b2e <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	f001 f90c 	bl	8004d2c <pb_dec_fixed_length_bytes>
 8003b14:	4603      	mov	r3, r0
 8003b16:	e00a      	b.n	8003b2e <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d002      	beq.n	8003b26 <decode_basic_field+0x1d2>
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	e000      	b.n	8003b28 <decode_basic_field+0x1d4>
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <decode_basic_field+0x1e8>)
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	60d3      	str	r3, [r2, #12]
 8003b2c:	2300      	movs	r3, #0
    }
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	0800b168 	.word	0x0800b168
 8003b3c:	0800b178 	.word	0x0800b178

08003b40 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b096      	sub	sp, #88	; 0x58
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	7d9b      	ldrb	r3, [r3, #22]
 8003b52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b56:	2b30      	cmp	r3, #48	; 0x30
 8003b58:	f000 80c2 	beq.w	8003ce0 <decode_static_field+0x1a0>
 8003b5c:	2b30      	cmp	r3, #48	; 0x30
 8003b5e:	f200 811a 	bhi.w	8003d96 <decode_static_field+0x256>
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d01f      	beq.n	8003ba6 <decode_static_field+0x66>
 8003b66:	2b20      	cmp	r3, #32
 8003b68:	f200 8115 	bhi.w	8003d96 <decode_static_field+0x256>
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <decode_static_field+0x36>
 8003b70:	2b10      	cmp	r3, #16
 8003b72:	d008      	beq.n	8003b86 <decode_static_field+0x46>
 8003b74:	e10f      	b.n	8003d96 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8003b76:	7afb      	ldrb	r3, [r7, #11]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	68f8      	ldr	r0, [r7, #12]
 8003b7e:	f7ff fee9 	bl	8003954 <decode_basic_field>
 8003b82:	4603      	mov	r3, r0
 8003b84:	e112      	b.n	8003dac <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a1b      	ldr	r3, [r3, #32]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8003b96:	7afb      	ldrb	r3, [r7, #11]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4619      	mov	r1, r3
 8003b9c:	68f8      	ldr	r0, [r7, #12]
 8003b9e:	f7ff fed9 	bl	8003954 <decode_basic_field>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	e102      	b.n	8003dac <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8003ba6:	7afb      	ldrb	r3, [r7, #11]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d16c      	bne.n	8003c86 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	7d9b      	ldrb	r3, [r3, #22]
 8003bb0:	f003 030f 	and.w	r3, r3, #15
 8003bb4:	2b05      	cmp	r3, #5
 8003bb6:	d866      	bhi.n	8003c86 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	8a52      	ldrh	r2, [r2, #18]
 8003bcc:	4611      	mov	r1, r2
 8003bce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bd0:	8812      	ldrh	r2, [r2, #0]
 8003bd2:	fb01 f202 	mul.w	r2, r1, r2
 8003bd6:	441a      	add	r2, r3
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8003bdc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003be0:	4619      	mov	r1, r3
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff fe56 	bl	8003894 <pb_make_string_substream>
 8003be8:	4603      	mov	r3, r0
 8003bea:	f083 0301 	eor.w	r3, r3, #1
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01f      	beq.n	8003c34 <decode_static_field+0xf4>
                    return false;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	e0d9      	b.n	8003dac <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8003bf8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	21ff      	movs	r1, #255	; 0xff
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff fea7 	bl	8003954 <decode_basic_field>
 8003c06:	4603      	mov	r3, r0
 8003c08:	f083 0301 	eor.w	r3, r3, #1
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d003      	beq.n	8003c1a <decode_static_field+0xda>
                    {
                        status = false;
 8003c12:	2300      	movs	r3, #0
 8003c14:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8003c18:	e015      	b.n	8003c46 <decode_static_field+0x106>
                    }
                    (*size)++;
 8003c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c24:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	69db      	ldr	r3, [r3, #28]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	8a52      	ldrh	r2, [r2, #18]
 8003c2e:	441a      	add	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8003c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d005      	beq.n	8003c46 <decode_static_field+0x106>
 8003c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c3c:	881a      	ldrh	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8a9b      	ldrh	r3, [r3, #20]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d3d8      	bcc.n	8003bf8 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8003c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d00b      	beq.n	8003c64 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <decode_static_field+0x11a>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	e000      	b.n	8003c5c <decode_static_field+0x11c>
 8003c5a:	4b56      	ldr	r3, [pc, #344]	; (8003db4 <decode_static_field+0x274>)
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	60d3      	str	r3, [r2, #12]
 8003c60:	2300      	movs	r3, #0
 8003c62:	e0a3      	b.n	8003dac <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8003c64:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c68:	4619      	mov	r1, r3
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	f7ff fe4c 	bl	8003908 <pb_close_string_substream>
 8003c70:	4603      	mov	r3, r0
 8003c72:	f083 0301 	eor.w	r3, r3, #1
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d001      	beq.n	8003c80 <decode_static_field+0x140>
                    return false;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	e095      	b.n	8003dac <decode_static_field+0x26c>

                return status;
 8003c80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c84:	e092      	b.n	8003dac <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	8a52      	ldrh	r2, [r2, #18]
 8003c94:	4611      	mov	r1, r2
 8003c96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c98:	8812      	ldrh	r2, [r2, #0]
 8003c9a:	fb01 f202 	mul.w	r2, r1, r2
 8003c9e:	441a      	add	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8003ca4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca6:	881b      	ldrh	r3, [r3, #0]
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	b291      	uxth	r1, r2
 8003cac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003cae:	8011      	strh	r1, [r2, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	8a92      	ldrh	r2, [r2, #20]
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d30b      	bcc.n	8003cd0 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d002      	beq.n	8003cc6 <decode_static_field+0x186>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	e000      	b.n	8003cc8 <decode_static_field+0x188>
 8003cc6:	4b3b      	ldr	r3, [pc, #236]	; (8003db4 <decode_static_field+0x274>)
 8003cc8:	68fa      	ldr	r2, [r7, #12]
 8003cca:	60d3      	str	r3, [r2, #12]
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e06d      	b.n	8003dac <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8003cd0:	7afb      	ldrb	r3, [r7, #11]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff fe3c 	bl	8003954 <decode_basic_field>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	e065      	b.n	8003dac <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	7d9b      	ldrb	r3, [r3, #22]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	2b08      	cmp	r3, #8
 8003cea:	d005      	beq.n	8003cf8 <decode_static_field+0x1b8>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7d9b      	ldrb	r3, [r3, #22]
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	2b09      	cmp	r3, #9
 8003cf6:	d141      	bne.n	8003d7c <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a1b      	ldr	r3, [r3, #32]
 8003cfc:	881a      	ldrh	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d03a      	beq.n	8003d7c <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69d8      	ldr	r0, [r3, #28]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8a5b      	ldrh	r3, [r3, #18]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2100      	movs	r1, #0
 8003d12:	f006 fc6d 	bl	800a5f0 <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d105      	bne.n	8003d36 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d022      	beq.n	8003d7c <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	69da      	ldr	r2, [r3, #28]
 8003d3e:	f107 0314 	add.w	r3, r7, #20
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7ff f935 	bl	8002fb2 <pb_field_iter_begin>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d016      	beq.n	8003d7c <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8003d4e:	f107 0314 	add.w	r3, r7, #20
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 fa4d 	bl	80041f2 <pb_message_set_to_defaults>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	f083 0301 	eor.w	r3, r3, #1
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00b      	beq.n	8003d7c <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <decode_static_field+0x232>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	e000      	b.n	8003d74 <decode_static_field+0x234>
 8003d72:	4b11      	ldr	r3, [pc, #68]	; (8003db8 <decode_static_field+0x278>)
 8003d74:	68fa      	ldr	r2, [r7, #12]
 8003d76:	60d3      	str	r3, [r2, #12]
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e017      	b.n	8003dac <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	8a12      	ldrh	r2, [r2, #16]
 8003d84:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f7ff fde1 	bl	8003954 <decode_basic_field>
 8003d92:	4603      	mov	r3, r0
 8003d94:	e00a      	b.n	8003dac <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d002      	beq.n	8003da4 <decode_static_field+0x264>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	e000      	b.n	8003da6 <decode_static_field+0x266>
 8003da4:	4b05      	ldr	r3, [pc, #20]	; (8003dbc <decode_static_field+0x27c>)
 8003da6:	68fa      	ldr	r2, [r7, #12]
 8003da8:	60d3      	str	r3, [r2, #12]
 8003daa:	2300      	movs	r3, #0
    }
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3758      	adds	r7, #88	; 0x58
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}
 8003db4:	0800b18c 	.word	0x0800b18c
 8003db8:	0800b19c 	.word	0x0800b19c
 8003dbc:	0800b178 	.word	0x0800b178

08003dc0 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68db      	ldr	r3, [r3, #12]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <decode_pointer_field+0x1c>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	e000      	b.n	8003dde <decode_pointer_field+0x1e>
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <decode_pointer_field+0x30>)
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	60d3      	str	r3, [r2, #12]
 8003de2:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	0800b1b4 	.word	0x0800b1b4

08003df4 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003df4:	b590      	push	{r4, r7, lr}
 8003df6:	b097      	sub	sp, #92	; 0x5c
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	61f8      	str	r0, [r7, #28]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	617a      	str	r2, [r7, #20]
 8003e00:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d106      	bne.n	8003e1a <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8003e0c:	7efb      	ldrb	r3, [r7, #27]
 8003e0e:	4619      	mov	r1, r3
 8003e10:	69f8      	ldr	r0, [r7, #28]
 8003e12:	f7ff fc91 	bl	8003738 <pb_skip_field>
 8003e16:	4603      	mov	r3, r0
 8003e18:	e070      	b.n	8003efc <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8003e1a:	7efb      	ldrb	r3, [r7, #27]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d145      	bne.n	8003eac <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8003e20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e24:	4619      	mov	r1, r3
 8003e26:	69f8      	ldr	r0, [r7, #28]
 8003e28:	f7ff fd34 	bl	8003894 <pb_make_string_substream>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f083 0301 	eor.w	r3, r3, #1
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d001      	beq.n	8003e3c <decode_callback_field+0x48>
            return false;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e05f      	b.n	8003efc <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8003e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e3e:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	2100      	movs	r1, #0
 8003e4e:	4798      	blx	r3
 8003e50:	4603      	mov	r3, r0
 8003e52:	f083 0301 	eor.w	r3, r3, #1
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d010      	beq.n	8003e7e <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <decode_callback_field+0x76>
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	e005      	b.n	8003e76 <decode_callback_field+0x82>
 8003e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <decode_callback_field+0x80>
 8003e70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e72:	e000      	b.n	8003e76 <decode_callback_field+0x82>
 8003e74:	4b23      	ldr	r3, [pc, #140]	; (8003f04 <decode_callback_field+0x110>)
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	60d3      	str	r3, [r2, #12]
                return false;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	e03e      	b.n	8003efc <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8003e7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d003      	beq.n	8003e8c <decode_callback_field+0x98>
 8003e84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d8d7      	bhi.n	8003e3c <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8003e8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e90:	4619      	mov	r1, r3
 8003e92:	69f8      	ldr	r0, [r7, #28]
 8003e94:	f7ff fd38 	bl	8003908 <pb_close_string_substream>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	f083 0301 	eor.w	r3, r3, #1
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d001      	beq.n	8003ea8 <decode_callback_field+0xb4>
            return false;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e029      	b.n	8003efc <decode_callback_field+0x108>

        return true;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e027      	b.n	8003efc <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8003eac:	230a      	movs	r3, #10
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8003eb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003eb4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003eb8:	7ef9      	ldrb	r1, [r7, #27]
 8003eba:	69f8      	ldr	r0, [r7, #28]
 8003ebc:	f7ff fc7e 	bl	80037bc <read_raw_value>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f083 0301 	eor.w	r3, r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <decode_callback_field+0xdc>
            return false;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e015      	b.n	8003efc <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8003ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ed2:	463b      	mov	r3, r7
 8003ed4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7ff fa87 	bl	80033ec <pb_istream_from_buffer>
 8003ede:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8003ee2:	463b      	mov	r3, r7
 8003ee4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ee6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	4798      	blx	r3
 8003efa:	4603      	mov	r3, r0
    }
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	375c      	adds	r7, #92	; 0x5c
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd90      	pop	{r4, r7, pc}
 8003f04:	0800b1c8 	.word	0x0800b1c8

08003f08 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	60f8      	str	r0, [r7, #12]
 8003f10:	460b      	mov	r3, r1
 8003f12:	607a      	str	r2, [r7, #4]
 8003f14:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	7d9b      	ldrb	r3, [r3, #22]
 8003f1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f1e:	2b80      	cmp	r3, #128	; 0x80
 8003f20:	d00e      	beq.n	8003f40 <decode_field+0x38>
 8003f22:	2b80      	cmp	r3, #128	; 0x80
 8003f24:	d81c      	bhi.n	8003f60 <decode_field+0x58>
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d002      	beq.n	8003f30 <decode_field+0x28>
 8003f2a:	2b40      	cmp	r3, #64	; 0x40
 8003f2c:	d010      	beq.n	8003f50 <decode_field+0x48>
 8003f2e:	e017      	b.n	8003f60 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8003f30:	7afb      	ldrb	r3, [r7, #11]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4619      	mov	r1, r3
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f7ff fe02 	bl	8003b40 <decode_static_field>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	e01a      	b.n	8003f76 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8003f40:	7afb      	ldrb	r3, [r7, #11]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4619      	mov	r1, r3
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f7ff ff3a 	bl	8003dc0 <decode_pointer_field>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	e012      	b.n	8003f76 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8003f50:	7afb      	ldrb	r3, [r7, #11]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	4619      	mov	r1, r3
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7ff ff4c 	bl	8003df4 <decode_callback_field>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	e00a      	b.n	8003f76 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <decode_field+0x66>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	68db      	ldr	r3, [r3, #12]
 8003f6c:	e000      	b.n	8003f70 <decode_field+0x68>
 8003f6e:	4b04      	ldr	r3, [pc, #16]	; (8003f80 <decode_field+0x78>)
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	60d3      	str	r3, [r2, #12]
 8003f74:	2300      	movs	r3, #0
    }
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3710      	adds	r7, #16
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}
 8003f7e:	bf00      	nop
 8003f80:	0800b178 	.word	0x0800b178

08003f84 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08e      	sub	sp, #56	; 0x38
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
 8003f90:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8003f92:	f107 0310 	add.w	r3, r7, #16
 8003f96:	68b9      	ldr	r1, [r7, #8]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff f823 	bl	8002fe4 <pb_field_iter_begin_extension>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	f083 0301 	eor.w	r3, r3, #1
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	68db      	ldr	r3, [r3, #12]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <default_extension_decoder+0x34>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	e000      	b.n	8003fba <default_extension_decoder+0x36>
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ff4 <default_extension_decoder+0x70>)
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	60d3      	str	r3, [r2, #12]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	e014      	b.n	8003fec <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8003fc2:	8c3b      	ldrh	r3, [r7, #32]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d102      	bne.n	8003fd2 <default_extension_decoder+0x4e>
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <default_extension_decoder+0x52>
        return true;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e00a      	b.n	8003fec <default_extension_decoder+0x68>

    extension->found = true;
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8003fdc:	f107 0210 	add.w	r2, r7, #16
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7ff ff8f 	bl	8003f08 <decode_field>
 8003fea:	4603      	mov	r3, r0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3738      	adds	r7, #56	; 0x38
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	0800b1d8 	.word	0x0800b1d8

08003ff8 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	4613      	mov	r3, r2
 8004006:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 800400e:	e022      	b.n	8004056 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681c      	ldr	r4, [r3, #0]
 8004020:	79fb      	ldrb	r3, [r7, #7]
 8004022:	68ba      	ldr	r2, [r7, #8]
 8004024:	6839      	ldr	r1, [r7, #0]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	47a0      	blx	r4
 800402a:	4603      	mov	r3, r0
 800402c:	75fb      	strb	r3, [r7, #23]
 800402e:	e007      	b.n	8004040 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8004030:	79fb      	ldrb	r3, [r7, #7]
 8004032:	68ba      	ldr	r2, [r7, #8]
 8004034:	6839      	ldr	r1, [r7, #0]
 8004036:	68f8      	ldr	r0, [r7, #12]
 8004038:	f7ff ffa4 	bl	8003f84 <default_extension_decoder>
 800403c:	4603      	mov	r3, r0
 800403e:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8004040:	7dfb      	ldrb	r3, [r7, #23]
 8004042:	f083 0301 	eor.w	r3, r3, #1
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <decode_extension+0x58>
            return false;
 800404c:	2300      	movs	r3, #0
 800404e:	e00b      	b.n	8004068 <decode_extension+0x70>
        
        extension = extension->next;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d004      	beq.n	8004066 <decode_extension+0x6e>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	429a      	cmp	r2, r3
 8004064:	d0d4      	beq.n	8004010 <decode_extension+0x18>
    }
    
    return true;
 8004066:	2301      	movs	r3, #1
}
 8004068:	4618      	mov	r0, r3
 800406a:	371c      	adds	r7, #28
 800406c:	46bd      	mov	sp, r7
 800406e:	bd90      	pop	{r4, r7, pc}

08004070 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08e      	sub	sp, #56	; 0x38
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	7d9b      	ldrb	r3, [r3, #22]
 800407c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8004080:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004084:	f003 030f 	and.w	r3, r3, #15
 8004088:	2b0a      	cmp	r3, #10
 800408a:	d124      	bne.n	80040d6 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 8004094:	e01b      	b.n	80040ce <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8004096:	f107 0308 	add.w	r3, r7, #8
 800409a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800409c:	4618      	mov	r0, r3
 800409e:	f7fe ffa1 	bl	8002fe4 <pb_field_iter_begin_extension>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d00f      	beq.n	80040c8 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 80040a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040aa:	2200      	movs	r2, #0
 80040ac:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 80040ae:	f107 0308 	add.w	r3, r7, #8
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f89d 	bl	80041f2 <pb_message_set_to_defaults>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f083 0301 	eor.w	r3, r3, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <pb_field_set_to_default+0x58>
                    return false;
 80040c4:	2300      	movs	r3, #0
 80040c6:	e090      	b.n	80041ea <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 80040c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 80040ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e0      	bne.n	8004096 <pb_field_set_to_default+0x26>
 80040d4:	e088      	b.n	80041e8 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80040d6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80040da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d166      	bne.n	80041b0 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 80040e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80040ec:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d108      	bne.n	8004106 <pb_field_set_to_default+0x96>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d004      	beq.n	8004106 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6a1b      	ldr	r3, [r3, #32]
 8004100:	2200      	movs	r2, #0
 8004102:	701a      	strb	r2, [r3, #0]
 8004104:	e012      	b.n	800412c <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004106:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800410a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800410e:	2b20      	cmp	r3, #32
 8004110:	d005      	beq.n	800411e <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8004112:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004116:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800411a:	2b30      	cmp	r3, #48	; 0x30
 800411c:	d106      	bne.n	800412c <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	2200      	movs	r2, #0
 8004124:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8004126:	2300      	movs	r3, #0
 8004128:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 800412c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004130:	2b00      	cmp	r3, #0
 8004132:	d059      	beq.n	80041e8 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	7d9b      	ldrb	r3, [r3, #22]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	2b08      	cmp	r3, #8
 800413e:	d005      	beq.n	800414c <pb_field_set_to_default+0xdc>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	7d9b      	ldrb	r3, [r3, #22]
 8004144:	f003 030f 	and.w	r3, r3, #15
 8004148:	2b09      	cmp	r3, #9
 800414a:	d128      	bne.n	800419e <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004150:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 800415c:	2b00      	cmp	r3, #0
 800415e:	d105      	bne.n	800416c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8004168:	2b00      	cmp	r3, #0
 800416a:	d018      	beq.n	800419e <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	69da      	ldr	r2, [r3, #28]
 8004174:	f107 0308 	add.w	r3, r7, #8
 8004178:	4618      	mov	r0, r3
 800417a:	f7fe ff1a 	bl	8002fb2 <pb_field_iter_begin>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d030      	beq.n	80041e6 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8004184:	f107 0308 	add.w	r3, r7, #8
 8004188:	4618      	mov	r0, r3
 800418a:	f000 f832 	bl	80041f2 <pb_message_set_to_defaults>
 800418e:	4603      	mov	r3, r0
 8004190:	f083 0301 	eor.w	r3, r3, #1
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d025      	beq.n	80041e6 <pb_field_set_to_default+0x176>
                        return false;
 800419a:	2300      	movs	r3, #0
 800419c:	e025      	b.n	80041ea <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69d8      	ldr	r0, [r3, #28]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	8a5b      	ldrh	r3, [r3, #18]
 80041a6:	461a      	mov	r2, r3
 80041a8:	2100      	movs	r1, #0
 80041aa:	f006 fa21 	bl	800a5f0 <memset>
 80041ae:	e01b      	b.n	80041e8 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80041b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80041b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041b8:	2b80      	cmp	r3, #128	; 0x80
 80041ba:	d115      	bne.n	80041e8 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80041c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80041c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d005      	beq.n	80041dc <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80041d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80041d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80041d8:	2b30      	cmp	r3, #48	; 0x30
 80041da:	d105      	bne.n	80041e8 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	2200      	movs	r2, #0
 80041e2:	801a      	strh	r2, [r3, #0]
 80041e4:	e000      	b.n	80041e8 <pb_field_set_to_default+0x178>
            {
 80041e6:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 80041e8:	2301      	movs	r3, #1
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3738      	adds	r7, #56	; 0x38
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 80041f2:	b590      	push	{r4, r7, lr}
 80041f4:	b08d      	sub	sp, #52	; 0x34
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 80041fa:	f107 0320 	add.w	r3, r7, #32
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
 8004202:	605a      	str	r2, [r3, #4]
 8004204:	609a      	str	r2, [r3, #8]
 8004206:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 800420c:	2300      	movs	r3, #0
 800420e:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d020      	beq.n	800425c <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	6899      	ldr	r1, [r3, #8]
 8004220:	463b      	mov	r3, r7
 8004222:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff f8e0 	bl	80033ec <pb_istream_from_buffer>
 800422c:	f107 0420 	add.w	r4, r7, #32
 8004230:	463b      	mov	r3, r7
 8004232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8004238:	f107 031a 	add.w	r3, r7, #26
 800423c:	f107 021c 	add.w	r2, r7, #28
 8004240:	f107 011b 	add.w	r1, r7, #27
 8004244:	f107 0020 	add.w	r0, r7, #32
 8004248:	f7ff fa47 	bl	80036da <pb_decode_tag>
 800424c:	4603      	mov	r3, r0
 800424e:	f083 0301 	eor.w	r3, r3, #1
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <pb_message_set_to_defaults+0x6a>
            return false;
 8004258:	2300      	movs	r3, #0
 800425a:	e043      	b.n	80042e4 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 800425c:	6978      	ldr	r0, [r7, #20]
 800425e:	f7ff ff07 	bl	8004070 <pb_field_set_to_default>
 8004262:	4603      	mov	r3, r0
 8004264:	f083 0301 	eor.w	r3, r3, #1
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <pb_message_set_to_defaults+0x80>
            return false;
 800426e:	2300      	movs	r3, #0
 8004270:	e038      	b.n	80042e4 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d02e      	beq.n	80042d6 <pb_message_set_to_defaults+0xe4>
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	8a1b      	ldrh	r3, [r3, #16]
 800427c:	461a      	mov	r2, r3
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	429a      	cmp	r2, r3
 8004282:	d128      	bne.n	80042d6 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8004284:	7ef9      	ldrb	r1, [r7, #27]
 8004286:	f107 0320 	add.w	r3, r7, #32
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fe3b 	bl	8003f08 <decode_field>
 8004292:	4603      	mov	r3, r0
 8004294:	f083 0301 	eor.w	r3, r3, #1
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d001      	beq.n	80042a2 <pb_message_set_to_defaults+0xb0>
                return false;
 800429e:	2300      	movs	r3, #0
 80042a0:	e020      	b.n	80042e4 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 80042a2:	f107 031a 	add.w	r3, r7, #26
 80042a6:	f107 021c 	add.w	r2, r7, #28
 80042aa:	f107 011b 	add.w	r1, r7, #27
 80042ae:	f107 0020 	add.w	r0, r7, #32
 80042b2:	f7ff fa12 	bl	80036da <pb_decode_tag>
 80042b6:	4603      	mov	r3, r0
 80042b8:	f083 0301 	eor.w	r3, r3, #1
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d001      	beq.n	80042c6 <pb_message_set_to_defaults+0xd4>
                return false;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e00e      	b.n	80042e4 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	6a1b      	ldr	r3, [r3, #32]
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 80042d6:	6978      	ldr	r0, [r7, #20]
 80042d8:	f7fe feb4 	bl	8003044 <pb_field_iter_next>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1bc      	bne.n	800425c <pb_message_set_to_defaults+0x6a>

    return true;
 80042e2:	2301      	movs	r3, #1
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3734      	adds	r7, #52	; 0x34
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd90      	pop	{r4, r7, pc}

080042ec <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b09a      	sub	sp, #104	; 0x68
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 80042fa:	2300      	movs	r3, #0
 80042fc:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 80042fe:	2300      	movs	r3, #0
 8004300:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8004302:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004306:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 800430a:	2300      	movs	r3, #0
 800430c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 8004310:	2300      	movs	r3, #0
 8004312:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8004316:	2300      	movs	r3, #0
 8004318:	643b      	str	r3, [r7, #64]	; 0x40
 800431a:	2300      	movs	r3, #0
 800431c:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 800431e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004322:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8004324:	f107 0318 	add.w	r3, r7, #24
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	68b9      	ldr	r1, [r7, #8]
 800432c:	4618      	mov	r0, r3
 800432e:	f7fe fe40 	bl	8002fb2 <pb_field_iter_begin>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	f000 8102 	beq.w	800453e <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	f040 80fc 	bne.w	800453e <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8004346:	f107 0318 	add.w	r3, r7, #24
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff ff51 	bl	80041f2 <pb_message_set_to_defaults>
 8004350:	4603      	mov	r3, r0
 8004352:	f083 0301 	eor.w	r3, r3, #1
 8004356:	b2db      	uxtb	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	f000 80f0 	beq.w	800453e <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <pb_decode_inner+0x80>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	e000      	b.n	800436e <pb_decode_inner+0x82>
 800436c:	4b99      	ldr	r3, [pc, #612]	; (80045d4 <pb_decode_inner+0x2e8>)
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	60d3      	str	r3, [r2, #12]
 8004372:	2300      	movs	r3, #0
 8004374:	e16d      	b.n	8004652 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8004376:	f107 0312 	add.w	r3, r7, #18
 800437a:	f107 0214 	add.w	r2, r7, #20
 800437e:	f107 0113 	add.w	r1, r7, #19
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f7ff f9a9 	bl	80036da <pb_decode_tag>
 8004388:	4603      	mov	r3, r0
 800438a:	f083 0301 	eor.w	r3, r3, #1
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <pb_decode_inner+0xb4>
        {
            if (eof)
 8004394:	7cbb      	ldrb	r3, [r7, #18]
 8004396:	2b00      	cmp	r3, #0
 8004398:	f040 80d7 	bne.w	800454a <pb_decode_inner+0x25e>
                break;
            else
                return false;
 800439c:	2300      	movs	r3, #0
 800439e:	e158      	b.n	8004652 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d111      	bne.n	80043ca <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	f003 0304 	and.w	r3, r3, #4
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f040 80ce 	bne.w	800454e <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <pb_decode_inner+0xd4>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	e000      	b.n	80043c2 <pb_decode_inner+0xd6>
 80043c0:	4b85      	ldr	r3, [pc, #532]	; (80045d8 <pb_decode_inner+0x2ec>)
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	60d3      	str	r3, [r2, #12]
 80043c6:	2300      	movs	r3, #0
 80043c8:	e143      	b.n	8004652 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	f107 0318 	add.w	r3, r7, #24
 80043d0:	4611      	mov	r1, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fe fe4b 	bl	800306e <pb_field_iter_find>
 80043d8:	4603      	mov	r3, r0
 80043da:	f083 0301 	eor.w	r3, r3, #1
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d105      	bne.n	80043f0 <pb_decode_inner+0x104>
 80043e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	2b0a      	cmp	r3, #10
 80043ee:	d13c      	bne.n	800446a <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 80043f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d112      	bne.n	800441c <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 80043f6:	f107 0318 	add.w	r3, r7, #24
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7fe fe8d 	bl	800311a <pb_field_iter_find_extension>
 8004400:	4603      	mov	r3, r0
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8004406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 800440c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800440e:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 8004410:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8004416:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800441a:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004420:	429a      	cmp	r2, r3
 8004422:	d815      	bhi.n	8004450 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 800442a:	6979      	ldr	r1, [r7, #20]
 800442c:	7cfa      	ldrb	r2, [r7, #19]
 800442e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f7ff fde1 	bl	8003ff8 <decode_extension>
 8004436:	4603      	mov	r3, r0
 8004438:	f083 0301 	eor.w	r3, r3, #1
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <pb_decode_inner+0x15a>
                    return false;
 8004442:	2300      	movs	r3, #0
 8004444:	e105      	b.n	8004652 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800444c:	429a      	cmp	r2, r3
 800444e:	d173      	bne.n	8004538 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8004450:	7cfb      	ldrb	r3, [r7, #19]
 8004452:	4619      	mov	r1, r3
 8004454:	68f8      	ldr	r0, [r7, #12]
 8004456:	f7ff f96f 	bl	8003738 <pb_skip_field>
 800445a:	4603      	mov	r3, r0
 800445c:	f083 0301 	eor.w	r3, r3, #1
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d06a      	beq.n	800453c <pb_decode_inner+0x250>
                return false;
 8004466:	2300      	movs	r3, #0
 8004468:	e0f3      	b.n	8004652 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 800446a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800446e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004472:	2b20      	cmp	r3, #32
 8004474:	d12e      	bne.n	80044d4 <pb_decode_inner+0x1e8>
 8004476:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004478:	f107 0318 	add.w	r3, r7, #24
 800447c:	3314      	adds	r3, #20
 800447e:	429a      	cmp	r2, r3
 8004480:	d128      	bne.n	80044d4 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8004482:	8c3b      	ldrh	r3, [r7, #32]
 8004484:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8004488:	429a      	cmp	r2, r3
 800448a:	d020      	beq.n	80044ce <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 800448c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004494:	4293      	cmp	r3, r2
 8004496:	d011      	beq.n	80044bc <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8004498:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 800449c:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d00b      	beq.n	80044bc <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d002      	beq.n	80044b2 <pb_decode_inner+0x1c6>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	e000      	b.n	80044b4 <pb_decode_inner+0x1c8>
 80044b2:	4b4a      	ldr	r3, [pc, #296]	; (80045dc <pb_decode_inner+0x2f0>)
 80044b4:	68fa      	ldr	r2, [r7, #12]
 80044b6:	60d3      	str	r3, [r2, #12]
 80044b8:	2300      	movs	r3, #0
 80044ba:	e0ca      	b.n	8004652 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 80044bc:	8c3b      	ldrh	r3, [r7, #32]
 80044be:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 80044c2:	2300      	movs	r3, #0
 80044c4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 80044c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80044ca:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 80044ce:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 80044d2:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 80044d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80044d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d11c      	bne.n	800451a <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 80044e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044e2:	2b3f      	cmp	r3, #63	; 0x3f
 80044e4:	d819      	bhi.n	800451a <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 80044e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	2201      	movs	r2, #1
 80044ee:	fa02 f303 	lsl.w	r3, r2, r3
 80044f2:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 80044f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044f6:	095b      	lsrs	r3, r3, #5
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	3368      	adds	r3, #104	; 0x68
 80044fe:	443b      	add	r3, r7
 8004500:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8004504:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	b29b      	uxth	r3, r3
 800450a:	4619      	mov	r1, r3
 800450c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800450e:	431a      	orrs	r2, r3
 8004510:	008b      	lsls	r3, r1, #2
 8004512:	3368      	adds	r3, #104	; 0x68
 8004514:	443b      	add	r3, r7
 8004516:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 800451a:	7cfb      	ldrb	r3, [r7, #19]
 800451c:	f107 0218 	add.w	r2, r7, #24
 8004520:	4619      	mov	r1, r3
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f7ff fcf0 	bl	8003f08 <decode_field>
 8004528:	4603      	mov	r3, r0
 800452a:	f083 0301 	eor.w	r3, r3, #1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b00      	cmp	r3, #0
 8004532:	d004      	beq.n	800453e <pb_decode_inner+0x252>
            return false;
 8004534:	2300      	movs	r3, #0
 8004536:	e08c      	b.n	8004652 <pb_decode_inner+0x366>
                    continue;
 8004538:	bf00      	nop
 800453a:	e000      	b.n	800453e <pb_decode_inner+0x252>
            continue;
 800453c:	bf00      	nop
    while (stream->bytes_left)
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	2b00      	cmp	r3, #0
 8004544:	f47f af17 	bne.w	8004376 <pb_decode_inner+0x8a>
 8004548:	e002      	b.n	8004550 <pb_decode_inner+0x264>
                break;
 800454a:	bf00      	nop
 800454c:	e000      	b.n	8004550 <pb_decode_inner+0x264>
            break;
 800454e:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8004550:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004554:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004558:	4293      	cmp	r3, r2
 800455a:	d011      	beq.n	8004580 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 800455c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8004560:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8004564:	429a      	cmp	r2, r3
 8004566:	d00b      	beq.n	8004580 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d002      	beq.n	8004576 <pb_decode_inner+0x28a>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	e000      	b.n	8004578 <pb_decode_inner+0x28c>
 8004576:	4b19      	ldr	r3, [pc, #100]	; (80045dc <pb_decode_inner+0x2f0>)
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	60d3      	str	r3, [r2, #12]
 800457c:	2300      	movs	r3, #0
 800457e:	e068      	b.n	8004652 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	8a5b      	ldrh	r3, [r3, #18]
 8004584:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 8004588:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800458c:	2b00      	cmp	r3, #0
 800458e:	d05f      	beq.n	8004650 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8004590:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004594:	2b40      	cmp	r3, #64	; 0x40
 8004596:	d902      	bls.n	800459e <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8004598:	2340      	movs	r3, #64	; 0x40
 800459a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 800459e:	2300      	movs	r3, #0
 80045a0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80045a4:	e023      	b.n	80045ee <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 80045a6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	3368      	adds	r3, #104	; 0x68
 80045ae:	443b      	add	r3, r7
 80045b0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80045b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d014      	beq.n	80045e4 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <pb_decode_inner+0x2dc>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	e000      	b.n	80045ca <pb_decode_inner+0x2de>
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <pb_decode_inner+0x2f4>)
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	60d3      	str	r3, [r2, #12]
 80045ce:	2300      	movs	r3, #0
 80045d0:	e03f      	b.n	8004652 <pb_decode_inner+0x366>
 80045d2:	bf00      	nop
 80045d4:	0800b19c 	.word	0x0800b19c
 80045d8:	0800b1ec 	.word	0x0800b1ec
 80045dc:	0800b1f8 	.word	0x0800b1f8
 80045e0:	0800b21c 	.word	0x0800b21c
            for (i = 0; i < (req_field_count >> 5); i++)
 80045e4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80045e8:	3301      	adds	r3, #1
 80045ea:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80045ee:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80045fa:	429a      	cmp	r2, r3
 80045fc:	d3d3      	bcc.n	80045a6 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 80045fe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004602:	f003 031f 	and.w	r3, r3, #31
 8004606:	2b00      	cmp	r3, #0
 8004608:	d022      	beq.n	8004650 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 800460a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800460e:	095b      	lsrs	r3, r3, #5
 8004610:	b29b      	uxth	r3, r3
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	3368      	adds	r3, #104	; 0x68
 8004616:	443b      	add	r3, r7
 8004618:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 800461c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f003 031f 	and.w	r3, r3, #31
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f1c3 0320 	rsb	r3, r3, #32
 800462c:	b2db      	uxtb	r3, r3
 800462e:	4619      	mov	r1, r3
 8004630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004632:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8004634:	429a      	cmp	r2, r3
 8004636:	d00b      	beq.n	8004650 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d002      	beq.n	8004646 <pb_decode_inner+0x35a>
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	e000      	b.n	8004648 <pb_decode_inner+0x35c>
 8004646:	4b05      	ldr	r3, [pc, #20]	; (800465c <pb_decode_inner+0x370>)
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	60d3      	str	r3, [r2, #12]
 800464c:	2300      	movs	r3, #0
 800464e:	e000      	b.n	8004652 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8004650:	2301      	movs	r3, #1
}
 8004652:	4618      	mov	r0, r3
 8004654:	3768      	adds	r7, #104	; 0x68
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	0800b21c 	.word	0x0800b21c

08004660 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 800466c:	2300      	movs	r3, #0
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	68b9      	ldr	r1, [r7, #8]
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7ff fe3a 	bl	80042ec <pb_decode_inner>
 8004678:	4603      	mov	r3, r0
 800467a:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 800467c:	7dfb      	ldrb	r3, [r7, #23]
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b084      	sub	sp, #16
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
 800468e:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8004690:	f107 030c 	add.w	r3, r7, #12
 8004694:	4619      	mov	r1, r3
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f7fe ff70 	bl	800357c <pb_decode_varint32>
 800469c:	4603      	mov	r3, r0
 800469e:	f083 0301 	eor.w	r3, r3, #1
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <pb_decode_bool+0x26>
        return false;
 80046a8:	2300      	movs	r3, #0
 80046aa:	e008      	b.n	80046be <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	bf14      	ite	ne
 80046b2:	2301      	movne	r3, #1
 80046b4:	2300      	moveq	r3, #0
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	701a      	strb	r2, [r3, #0]
    return true;
 80046bc:	2301      	movs	r3, #1
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 80046c6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 80046d2:	f107 0308 	add.w	r3, r7, #8
 80046d6:	4619      	mov	r1, r3
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7fe ff5f 	bl	800359c <pb_decode_varint>
 80046de:	4603      	mov	r3, r0
 80046e0:	f083 0301 	eor.w	r3, r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d001      	beq.n	80046ee <pb_decode_svarint+0x28>
        return false;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e029      	b.n	8004742 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 80046ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046f2:	f002 0401 	and.w	r4, r2, #1
 80046f6:	2500      	movs	r5, #0
 80046f8:	ea54 0305 	orrs.w	r3, r4, r5
 80046fc:	d013      	beq.n	8004726 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 80046fe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	0842      	lsrs	r2, r0, #1
 800470c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004710:	084b      	lsrs	r3, r1, #1
 8004712:	ea6f 0802 	mvn.w	r8, r2
 8004716:	ea6f 0903 	mvn.w	r9, r3
 800471a:	4642      	mov	r2, r8
 800471c:	464b      	mov	r3, r9
 800471e:	6839      	ldr	r1, [r7, #0]
 8004720:	e9c1 2300 	strd	r2, r3, [r1]
 8004724:	e00c      	b.n	8004740 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8004726:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	0842      	lsrs	r2, r0, #1
 8004734:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004738:	084b      	lsrs	r3, r1, #1
 800473a:	6839      	ldr	r1, [r7, #0]
 800473c:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8004740:	2301      	movs	r3, #1
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800474c <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b084      	sub	sp, #16
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 8004756:	f107 030c 	add.w	r3, r7, #12
 800475a:	2204      	movs	r2, #4
 800475c:	4619      	mov	r1, r3
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7fe fd92 	bl	8003288 <pb_read>
 8004764:	4603      	mov	r3, r0
 8004766:	f083 0301 	eor.w	r3, r3, #1
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b00      	cmp	r3, #0
 800476e:	d001      	beq.n	8004774 <pb_decode_fixed32+0x28>
        return false;
 8004770:	2300      	movs	r3, #0
 8004772:	e003      	b.n	800477c <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 800477a:	2301      	movs	r3, #1
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 800478e:	f107 0308 	add.w	r3, r7, #8
 8004792:	2208      	movs	r2, #8
 8004794:	4619      	mov	r1, r3
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fe fd76 	bl	8003288 <pb_read>
 800479c:	4603      	mov	r3, r0
 800479e:	f083 0301 	eor.w	r3, r3, #1
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <pb_decode_fixed64+0x28>
        return false;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e005      	b.n	80047b8 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 80047ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 80047b6:	2301      	movs	r3, #1
}
 80047b8:	4618      	mov	r0, r3
 80047ba:	3710      	adds	r7, #16
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}

080047c0 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	69db      	ldr	r3, [r3, #28]
 80047ce:	4619      	mov	r1, r3
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff ff58 	bl	8004686 <pb_decode_bool>
 80047d6:	4603      	mov	r3, r0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3708      	adds	r7, #8
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80047e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047e4:	b094      	sub	sp, #80	; 0x50
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6278      	str	r0, [r7, #36]	; 0x24
 80047ea:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	7d9b      	ldrb	r3, [r3, #22]
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d179      	bne.n	80048ec <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 80047f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80047fc:	4619      	mov	r1, r3
 80047fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004800:	f7fe fecc 	bl	800359c <pb_decode_varint>
 8004804:	4603      	mov	r3, r0
 8004806:	f083 0301 	eor.w	r3, r3, #1
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <pb_dec_varint+0x34>
            return false;
 8004810:	2300      	movs	r3, #0
 8004812:	e107      	b.n	8004a24 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8004814:	6a3b      	ldr	r3, [r7, #32]
 8004816:	8a5b      	ldrh	r3, [r3, #18]
 8004818:	2b08      	cmp	r3, #8
 800481a:	d10a      	bne.n	8004832 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 800481c:	6a3b      	ldr	r3, [r7, #32]
 800481e:	69d9      	ldr	r1, [r3, #28]
 8004820:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004824:	e9c1 2300 	strd	r2, r3, [r1]
 8004828:	e9d1 2300 	ldrd	r2, r3, [r1]
 800482c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004830:	e046      	b.n	80048c0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	8a5b      	ldrh	r3, [r3, #18]
 8004836:	2b04      	cmp	r3, #4
 8004838:	d10e      	bne.n	8004858 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 800483a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	69db      	ldr	r3, [r3, #28]
 8004842:	4602      	mov	r2, r0
 8004844:	601a      	str	r2, [r3, #0]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2200      	movs	r2, #0
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	617a      	str	r2, [r7, #20]
 800484e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004852:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8004856:	e033      	b.n	80048c0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	8a5b      	ldrh	r3, [r3, #18]
 800485c:	2b02      	cmp	r3, #2
 800485e:	d10f      	bne.n	8004880 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8004860:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004864:	6a3b      	ldr	r3, [r7, #32]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	b282      	uxth	r2, r0
 800486a:	801a      	strh	r2, [r3, #0]
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	2200      	movs	r2, #0
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	60fa      	str	r2, [r7, #12]
 8004876:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800487a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800487e:	e01f      	b.n	80048c0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	8a5b      	ldrh	r3, [r3, #18]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d10f      	bne.n	80048a8 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 8004888:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	b2c2      	uxtb	r2, r0
 8004892:	701a      	strb	r2, [r3, #0]
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2200      	movs	r2, #0
 800489a:	603b      	str	r3, [r7, #0]
 800489c:	607a      	str	r2, [r7, #4]
 800489e:	e9d7 3400 	ldrd	r3, r4, [r7]
 80048a2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80048a6:	e00b      	b.n	80048c0 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d002      	beq.n	80048b6 <pb_dec_varint+0xd6>
 80048b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	e000      	b.n	80048b8 <pb_dec_varint+0xd8>
 80048b6:	4b5e      	ldr	r3, [pc, #376]	; (8004a30 <pb_dec_varint+0x250>)
 80048b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ba:	60d3      	str	r3, [r2, #12]
 80048bc:	2300      	movs	r3, #0
 80048be:	e0b1      	b.n	8004a24 <pb_dec_varint+0x244>

        if (clamped != value)
 80048c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048c4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048c8:	4299      	cmp	r1, r3
 80048ca:	bf08      	it	eq
 80048cc:	4290      	cmpeq	r0, r2
 80048ce:	d00b      	beq.n	80048e8 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 80048d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d002      	beq.n	80048de <pb_dec_varint+0xfe>
 80048d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	e000      	b.n	80048e0 <pb_dec_varint+0x100>
 80048de:	4b55      	ldr	r3, [pc, #340]	; (8004a34 <pb_dec_varint+0x254>)
 80048e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e2:	60d3      	str	r3, [r2, #12]
 80048e4:	2300      	movs	r3, #0
 80048e6:	e09d      	b.n	8004a24 <pb_dec_varint+0x244>

        return true;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e09b      	b.n	8004a24 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	7d9b      	ldrb	r3, [r3, #22]
 80048f0:	f003 030f 	and.w	r3, r3, #15
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d10d      	bne.n	8004914 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 80048f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048fc:	4619      	mov	r1, r3
 80048fe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004900:	f7ff fee1 	bl	80046c6 <pb_decode_svarint>
 8004904:	4603      	mov	r3, r0
 8004906:	f083 0301 	eor.w	r3, r3, #1
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d022      	beq.n	8004956 <pb_dec_varint+0x176>
                return false;
 8004910:	2300      	movs	r3, #0
 8004912:	e087      	b.n	8004a24 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8004914:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004918:	4619      	mov	r1, r3
 800491a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800491c:	f7fe fe3e 	bl	800359c <pb_decode_varint>
 8004920:	4603      	mov	r3, r0
 8004922:	f083 0301 	eor.w	r3, r3, #1
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <pb_dec_varint+0x150>
                return false;
 800492c:	2300      	movs	r3, #0
 800492e:	e079      	b.n	8004a24 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	8a5b      	ldrh	r3, [r3, #18]
 8004934:	2b08      	cmp	r3, #8
 8004936:	d104      	bne.n	8004942 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8004938:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800493c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004940:	e009      	b.n	8004956 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 8004942:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004946:	4613      	mov	r3, r2
 8004948:	17da      	asrs	r2, r3, #31
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	61fa      	str	r2, [r7, #28]
 800494e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004952:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	8a5b      	ldrh	r3, [r3, #18]
 800495a:	2b08      	cmp	r3, #8
 800495c:	d10a      	bne.n	8004974 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	69d9      	ldr	r1, [r3, #28]
 8004962:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004966:	e9c1 2300 	strd	r2, r3, [r1]
 800496a:	e9d1 2300 	ldrd	r2, r3, [r1]
 800496e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004972:	e042      	b.n	80049fa <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	8a5b      	ldrh	r3, [r3, #18]
 8004978:	2b04      	cmp	r3, #4
 800497a:	d10c      	bne.n	8004996 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 800497c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	69db      	ldr	r3, [r3, #28]
 8004984:	4602      	mov	r2, r0
 8004986:	601a      	str	r2, [r3, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	17da      	asrs	r2, r3, #31
 800498c:	469a      	mov	sl, r3
 800498e:	4693      	mov	fp, r2
 8004990:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 8004994:	e031      	b.n	80049fa <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	8a5b      	ldrh	r3, [r3, #18]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d10e      	bne.n	80049bc <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 800499e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	b202      	sxth	r2, r0
 80049a8:	801a      	strh	r2, [r3, #0]
 80049aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049ae:	b21b      	sxth	r3, r3
 80049b0:	17da      	asrs	r2, r3, #31
 80049b2:	4698      	mov	r8, r3
 80049b4:	4691      	mov	r9, r2
 80049b6:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 80049ba:	e01e      	b.n	80049fa <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	8a5b      	ldrh	r3, [r3, #18]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	d10e      	bne.n	80049e2 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 80049c4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	69db      	ldr	r3, [r3, #28]
 80049cc:	b242      	sxtb	r2, r0
 80049ce:	701a      	strb	r2, [r3, #0]
 80049d0:	f993 3000 	ldrsb.w	r3, [r3]
 80049d4:	b25b      	sxtb	r3, r3
 80049d6:	17da      	asrs	r2, r3, #31
 80049d8:	461c      	mov	r4, r3
 80049da:	4615      	mov	r5, r2
 80049dc:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 80049e0:	e00b      	b.n	80049fa <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d002      	beq.n	80049f0 <pb_dec_varint+0x210>
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	e000      	b.n	80049f2 <pb_dec_varint+0x212>
 80049f0:	4b0f      	ldr	r3, [pc, #60]	; (8004a30 <pb_dec_varint+0x250>)
 80049f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f4:	60d3      	str	r3, [r2, #12]
 80049f6:	2300      	movs	r3, #0
 80049f8:	e014      	b.n	8004a24 <pb_dec_varint+0x244>

        if (clamped != svalue)
 80049fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049fe:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004a02:	4299      	cmp	r1, r3
 8004a04:	bf08      	it	eq
 8004a06:	4290      	cmpeq	r0, r2
 8004a08:	d00b      	beq.n	8004a22 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 8004a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <pb_dec_varint+0x238>
 8004a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	e000      	b.n	8004a1a <pb_dec_varint+0x23a>
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <pb_dec_varint+0x254>)
 8004a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a1c:	60d3      	str	r3, [r2, #12]
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e000      	b.n	8004a24 <pb_dec_varint+0x244>

        return true;
 8004a22:	2301      	movs	r3, #1
    }
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3750      	adds	r7, #80	; 0x50
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a2e:	bf00      	nop
 8004a30:	0800b234 	.word	0x0800b234
 8004a34:	0800b248 	.word	0x0800b248

08004a38 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 8004a42:	f107 030c 	add.w	r3, r7, #12
 8004a46:	4619      	mov	r1, r3
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f7fe fd97 	bl	800357c <pb_decode_varint32>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	f083 0301 	eor.w	r3, r3, #1
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <pb_dec_bytes+0x26>
        return false;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e055      	b.n	8004b0a <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a64:	d30b      	bcc.n	8004a7e <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <pb_dec_bytes+0x3c>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	e000      	b.n	8004a76 <pb_dec_bytes+0x3e>
 8004a74:	4b27      	ldr	r3, [pc, #156]	; (8004b14 <pb_dec_bytes+0xdc>)
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	60d3      	str	r3, [r2, #12]
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	e045      	b.n	8004b0a <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3302      	adds	r3, #2
 8004a82:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	697a      	ldr	r2, [r7, #20]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d20b      	bcs.n	8004aa4 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d002      	beq.n	8004a9a <pb_dec_bytes+0x62>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	e000      	b.n	8004a9c <pb_dec_bytes+0x64>
 8004a9a:	4b1f      	ldr	r3, [pc, #124]	; (8004b18 <pb_dec_bytes+0xe0>)
 8004a9c:	687a      	ldr	r2, [r7, #4]
 8004a9e:	60d3      	str	r3, [r2, #12]
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	e032      	b.n	8004b0a <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	7d9b      	ldrb	r3, [r3, #22]
 8004aa8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004aac:	2b80      	cmp	r3, #128	; 0x80
 8004aae:	d10b      	bne.n	8004ac8 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d002      	beq.n	8004abe <pb_dec_bytes+0x86>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	e000      	b.n	8004ac0 <pb_dec_bytes+0x88>
 8004abe:	4b17      	ldr	r3, [pc, #92]	; (8004b1c <pb_dec_bytes+0xe4>)
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	60d3      	str	r3, [r2, #12]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e020      	b.n	8004b0a <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	8a5b      	ldrh	r3, [r3, #18]
 8004acc:	461a      	mov	r2, r3
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d90b      	bls.n	8004aec <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <pb_dec_bytes+0xaa>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	e000      	b.n	8004ae4 <pb_dec_bytes+0xac>
 8004ae2:	4b0c      	ldr	r3, [pc, #48]	; (8004b14 <pb_dec_bytes+0xdc>)
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	60d3      	str	r3, [r2, #12]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e00e      	b.n	8004b0a <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	69db      	ldr	r3, [r3, #28]
 8004af0:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	3302      	adds	r3, #2
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	4619      	mov	r1, r3
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f7fe fbc0 	bl	8003288 <pb_read>
 8004b08:	4603      	mov	r3, r0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	0800b25c 	.word	0x0800b25c
 8004b18:	0800b26c 	.word	0x0800b26c
 8004b1c:	0800b1b4 	.word	0x0800b1b4

08004b20 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8004b30:	f107 030c 	add.w	r3, r7, #12
 8004b34:	4619      	mov	r1, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fe fd20 	bl	800357c <pb_decode_varint32>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	f083 0301 	eor.w	r3, r3, #1
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d001      	beq.n	8004b4c <pb_dec_string+0x2c>
        return false;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e05a      	b.n	8004c02 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b52:	d10b      	bne.n	8004b6c <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d002      	beq.n	8004b62 <pb_dec_string+0x42>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	e000      	b.n	8004b64 <pb_dec_string+0x44>
 8004b62:	4b2a      	ldr	r3, [pc, #168]	; (8004c0c <pb_dec_string+0xec>)
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	60d3      	str	r3, [r2, #12]
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e04a      	b.n	8004c02 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d20b      	bcs.n	8004b92 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d002      	beq.n	8004b88 <pb_dec_string+0x68>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	e000      	b.n	8004b8a <pb_dec_string+0x6a>
 8004b88:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <pb_dec_string+0xec>)
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	60d3      	str	r3, [r2, #12]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	e037      	b.n	8004c02 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	7d9b      	ldrb	r3, [r3, #22]
 8004b96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b9a:	2b80      	cmp	r3, #128	; 0x80
 8004b9c:	d10b      	bne.n	8004bb6 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d002      	beq.n	8004bac <pb_dec_string+0x8c>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	68db      	ldr	r3, [r3, #12]
 8004baa:	e000      	b.n	8004bae <pb_dec_string+0x8e>
 8004bac:	4b18      	ldr	r3, [pc, #96]	; (8004c10 <pb_dec_string+0xf0>)
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	60d3      	str	r3, [r2, #12]
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	e025      	b.n	8004c02 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	8a5b      	ldrh	r3, [r3, #18]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d90b      	bls.n	8004bda <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	68db      	ldr	r3, [r3, #12]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d002      	beq.n	8004bd0 <pb_dec_string+0xb0>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	e000      	b.n	8004bd2 <pb_dec_string+0xb2>
 8004bd0:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <pb_dec_string+0xf4>)
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	60d3      	str	r3, [r2, #12]
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	e013      	b.n	8004c02 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	4413      	add	r3, r2
 8004be0:	2200      	movs	r2, #0
 8004be2:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	461a      	mov	r2, r3
 8004be8:	6979      	ldr	r1, [r7, #20]
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7fe fb4c 	bl	8003288 <pb_read>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	f083 0301 	eor.w	r3, r3, #1
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <pb_dec_string+0xe0>
        return false;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e000      	b.n	8004c02 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8004c00:	2301      	movs	r3, #1
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	0800b26c 	.word	0x0800b26c
 8004c10:	0800b1b4 	.word	0x0800b1b4
 8004c14:	0800b27c 	.word	0x0800b27c

08004c18 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
    bool status = true;
 8004c22:	2301      	movs	r3, #1
 8004c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8004c2e:	f107 030c 	add.w	r3, r7, #12
 8004c32:	4619      	mov	r1, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7fe fe2d 	bl	8003894 <pb_make_string_substream>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	f083 0301 	eor.w	r3, r3, #1
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <pb_dec_submessage+0x32>
        return false;
 8004c46:	2300      	movs	r3, #0
 8004c48:	e069      	b.n	8004d1e <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10b      	bne.n	8004c6a <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <pb_dec_submessage+0x48>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	e000      	b.n	8004c62 <pb_dec_submessage+0x4a>
 8004c60:	4b31      	ldr	r3, [pc, #196]	; (8004d28 <pb_dec_submessage+0x110>)
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	60d3      	str	r3, [r2, #12]
 8004c66:	2300      	movs	r3, #0
 8004c68:	e059      	b.n	8004d1e <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	7d9b      	ldrb	r3, [r3, #22]
 8004c6e:	f003 030f 	and.w	r3, r3, #15
 8004c72:	2b09      	cmp	r3, #9
 8004c74:	d11c      	bne.n	8004cb0 <pb_dec_submessage+0x98>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d018      	beq.n	8004cb0 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	3b08      	subs	r3, #8
 8004c84:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d010      	beq.n	8004cb0 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	3204      	adds	r2, #4
 8004c96:	f107 000c 	add.w	r0, r7, #12
 8004c9a:	6839      	ldr	r1, [r7, #0]
 8004c9c:	4798      	blx	r3
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d102      	bne.n	8004cb0 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8004caa:	2301      	movs	r3, #1
 8004cac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8004cb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d022      	beq.n	8004cfe <pb_dec_submessage+0xe6>
 8004cb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004cbc:	f083 0301 	eor.w	r3, r3, #1
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d01b      	beq.n	8004cfe <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	7d9b      	ldrb	r3, [r3, #22]
 8004cce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d107      	bne.n	8004ce6 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	7d9b      	ldrb	r3, [r3, #22]
 8004cda:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8004cde:	2b20      	cmp	r3, #32
 8004ce0:	d001      	beq.n	8004ce6 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	69da      	ldr	r2, [r3, #28]
 8004cee:	f107 000c 	add.w	r0, r7, #12
 8004cf2:	6a3b      	ldr	r3, [r7, #32]
 8004cf4:	f7ff fafa 	bl	80042ec <pb_decode_inner>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8004cfe:	f107 030c 	add.w	r3, r7, #12
 8004d02:	4619      	mov	r1, r3
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f7fe fdff 	bl	8003908 <pb_close_string_substream>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	f083 0301 	eor.w	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <pb_dec_submessage+0x102>
        return false;
 8004d16:	2300      	movs	r3, #0
 8004d18:	e001      	b.n	8004d1e <pb_dec_submessage+0x106>

    return status;
 8004d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3728      	adds	r7, #40	; 0x28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	0800b28c 	.word	0x0800b28c

08004d2c <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8004d36:	f107 030c 	add.w	r3, r7, #12
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f7fe fc1d 	bl	800357c <pb_decode_varint32>
 8004d42:	4603      	mov	r3, r0
 8004d44:	f083 0301 	eor.w	r3, r3, #1
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <pb_dec_fixed_length_bytes+0x26>
        return false;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e037      	b.n	8004dc2 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d58:	d30b      	bcc.n	8004d72 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d002      	beq.n	8004d68 <pb_dec_fixed_length_bytes+0x3c>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	e000      	b.n	8004d6a <pb_dec_fixed_length_bytes+0x3e>
 8004d68:	4b18      	ldr	r3, [pc, #96]	; (8004dcc <pb_dec_fixed_length_bytes+0xa0>)
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	60d3      	str	r3, [r2, #12]
 8004d6e:	2300      	movs	r3, #0
 8004d70:	e027      	b.n	8004dc2 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d109      	bne.n	8004d8c <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	69d8      	ldr	r0, [r3, #28]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	8a5b      	ldrh	r3, [r3, #18]
 8004d80:	461a      	mov	r2, r3
 8004d82:	2100      	movs	r1, #0
 8004d84:	f005 fc34 	bl	800a5f0 <memset>
        return true;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e01a      	b.n	8004dc2 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	8a5b      	ldrh	r3, [r3, #18]
 8004d90:	461a      	mov	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d00b      	beq.n	8004db0 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d002      	beq.n	8004da6 <pb_dec_fixed_length_bytes+0x7a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	e000      	b.n	8004da8 <pb_dec_fixed_length_bytes+0x7c>
 8004da6:	4b0a      	ldr	r3, [pc, #40]	; (8004dd0 <pb_dec_fixed_length_bytes+0xa4>)
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	60d3      	str	r3, [r2, #12]
 8004dac:	2300      	movs	r3, #0
 8004dae:	e008      	b.n	8004dc2 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	69d9      	ldr	r1, [r3, #28]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	8a5b      	ldrh	r3, [r3, #18]
 8004db8:	461a      	mov	r2, r3
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f7fe fa64 	bl	8003288 <pb_read>
 8004dc0:	4603      	mov	r3, r0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
 8004dca:	bf00      	nop
 8004dcc:	0800b25c 	.word	0x0800b25c
 8004dd0:	0800b2a8 	.word	0x0800b2a8

08004dd4 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b086      	sub	sp, #24
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	441a      	add	r2, r3
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	6978      	ldr	r0, [r7, #20]
 8004df6:	f005 fcca 	bl	800a78e <memcpy>
    
    return true;
 8004dfa:	2301      	movs	r3, #1
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3718      	adds	r7, #24
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 8004e04:	b4b0      	push	{r4, r5, r7}
 8004e06:	b08b      	sub	sp, #44	; 0x2c
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <pb_ostream_from_buffer+0x3c>)
 8004e12:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8004e20:	2300      	movs	r3, #0
 8004e22:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	461d      	mov	r5, r3
 8004e28:	f107 0414 	add.w	r4, r7, #20
 8004e2c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e2e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	602b      	str	r3, [r5, #0]
}
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	372c      	adds	r7, #44	; 0x2c
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bcb0      	pop	{r4, r5, r7}
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	08004dd5 	.word	0x08004dd5

08004e44 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d037      	beq.n	8004ec6 <pb_write+0x82>
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d033      	beq.n	8004ec6 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	68da      	ldr	r2, [r3, #12]
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	441a      	add	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d307      	bcc.n	8004e7e <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	441a      	add	r2, r3
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d90b      	bls.n	8004e96 <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d002      	beq.n	8004e8c <pb_write+0x48>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	e000      	b.n	8004e8e <pb_write+0x4a>
 8004e8c:	4b13      	ldr	r3, [pc, #76]	; (8004edc <pb_write+0x98>)
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	6113      	str	r3, [r2, #16]
 8004e92:	2300      	movs	r3, #0
 8004e94:	e01e      	b.n	8004ed4 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	68b9      	ldr	r1, [r7, #8]
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	4798      	blx	r3
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	f083 0301 	eor.w	r3, r3, #1
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00b      	beq.n	8004ec6 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d002      	beq.n	8004ebc <pb_write+0x78>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	e000      	b.n	8004ebe <pb_write+0x7a>
 8004ebc:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <pb_write+0x9c>)
 8004ebe:	68fa      	ldr	r2, [r7, #12]
 8004ec0:	6113      	str	r3, [r2, #16]
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e006      	b.n	8004ed4 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	441a      	add	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	60da      	str	r2, [r3, #12]
    return true;
 8004ed2:	2301      	movs	r3, #1
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	0800b2cc 	.word	0x0800b2cc
 8004ee0:	0800b2d8 	.word	0x0800b2d8

08004ee4 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	60fb      	str	r3, [r7, #12]
 8004ef4:	e00a      	b.n	8004f0c <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	4413      	add	r3, r2
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <safe_read_bool+0x22>
            return true;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e006      	b.n	8004f14 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3301      	adds	r3, #1
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f1      	beq.n	8004ef6 <safe_read_bool+0x12>
    }
    return false;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8004f20:	b5b0      	push	{r4, r5, r7, lr}
 8004f22:	b08c      	sub	sp, #48	; 0x30
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	881b      	ldrh	r3, [r3, #0]
 8004f30:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (count == 0)
 8004f32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d101      	bne.n	8004f3c <encode_array+0x1c>
        return true;
 8004f38:	2301      	movs	r3, #1
 8004f3a:	e13d      	b.n	80051b8 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	7d9b      	ldrb	r3, [r3, #22]
 8004f40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f44:	2b80      	cmp	r3, #128	; 0x80
 8004f46:	d010      	beq.n	8004f6a <encode_array+0x4a>
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	8a9b      	ldrh	r3, [r3, #20]
 8004f4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d90b      	bls.n	8004f6a <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d002      	beq.n	8004f60 <encode_array+0x40>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	691b      	ldr	r3, [r3, #16]
 8004f5e:	e000      	b.n	8004f62 <encode_array+0x42>
 8004f60:	4b97      	ldr	r3, [pc, #604]	; (80051c0 <encode_array+0x2a0>)
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6113      	str	r3, [r2, #16]
 8004f66:	2300      	movs	r3, #0
 8004f68:	e126      	b.n	80051b8 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	7d9b      	ldrb	r3, [r3, #22]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	2b05      	cmp	r3, #5
 8004f74:	f200 80b3 	bhi.w	80050de <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	8a1b      	ldrh	r3, [r3, #16]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	2102      	movs	r1, #2
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fcdd 	bl	8005940 <pb_encode_tag>
 8004f86:	4603      	mov	r3, r0
 8004f88:	f083 0301 	eor.w	r3, r3, #1
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d001      	beq.n	8004f96 <encode_array+0x76>
            return false;
 8004f92:	2300      	movs	r3, #0
 8004f94:	e110      	b.n	80051b8 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	7d9b      	ldrb	r3, [r3, #22]
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d103      	bne.n	8004faa <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 8004fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fa8:	e047      	b.n	800503a <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	7d9b      	ldrb	r3, [r3, #22]
 8004fae:	f003 030f 	and.w	r3, r3, #15
 8004fb2:	2b05      	cmp	r3, #5
 8004fb4:	d103      	bne.n	8004fbe <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 8004fb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fbc:	e03d      	b.n	800503a <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8004fbe:	f107 0308 	add.w	r3, r7, #8
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	605a      	str	r2, [r3, #4]
 8004fc8:	609a      	str	r2, [r3, #8]
 8004fca:	60da      	str	r2, [r3, #12]
 8004fcc:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004fd8:	e026      	b.n	8005028 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 8004fda:	f107 0308 	add.w	r3, r7, #8
 8004fde:	6839      	ldr	r1, [r7, #0]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fdef 	bl	8005bc4 <pb_enc_varint>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	f083 0301 	eor.w	r3, r3, #1
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d010      	beq.n	8005014 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <encode_array+0xe0>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	e005      	b.n	800500c <encode_array+0xec>
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <encode_array+0xea>
 8005006:	69bb      	ldr	r3, [r7, #24]
 8005008:	e000      	b.n	800500c <encode_array+0xec>
 800500a:	4b6e      	ldr	r3, [pc, #440]	; (80051c4 <encode_array+0x2a4>)
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6113      	str	r3, [r2, #16]
 8005010:	2300      	movs	r3, #0
 8005012:	e0d1      	b.n	80051b8 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	69db      	ldr	r3, [r3, #28]
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	8a52      	ldrh	r2, [r2, #18]
 800501c:	441a      	add	r2, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 8005022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005024:	3301      	adds	r3, #1
 8005026:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005028:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800502a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800502c:	429a      	cmp	r2, r3
 800502e:	d3d4      	bcc.n	8004fda <encode_array+0xba>
            }
            field->pData = pData_orig;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	69fa      	ldr	r2, [r7, #28]
 8005034:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800503a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503c:	2200      	movs	r2, #0
 800503e:	461c      	mov	r4, r3
 8005040:	4615      	mov	r5, r2
 8005042:	4622      	mov	r2, r4
 8005044:	462b      	mov	r3, r5
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 fbf7 	bl	800583a <pb_encode_varint>
 800504c:	4603      	mov	r3, r0
 800504e:	f083 0301 	eor.w	r3, r3, #1
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d001      	beq.n	800505c <encode_array+0x13c>
            return false;
 8005058:	2300      	movs	r3, #0
 800505a:	e0ad      	b.n	80051b8 <encode_array+0x298>
        
        if (stream->callback == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d106      	bne.n	8005072 <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005066:	2100      	movs	r1, #0
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff feeb 	bl	8004e44 <pb_write>
 800506e:	4603      	mov	r3, r0
 8005070:	e0a2      	b.n	80051b8 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 8005072:	2300      	movs	r3, #0
 8005074:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005076:	e02d      	b.n	80050d4 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	7d9b      	ldrb	r3, [r3, #22]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	2b04      	cmp	r3, #4
 8005082:	d005      	beq.n	8005090 <encode_array+0x170>
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	7d9b      	ldrb	r3, [r3, #22]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	2b05      	cmp	r3, #5
 800508e:	d10b      	bne.n	80050a8 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 8005090:	6839      	ldr	r1, [r7, #0]
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fe58 	bl	8005d48 <pb_enc_fixed>
 8005098:	4603      	mov	r3, r0
 800509a:	f083 0301 	eor.w	r3, r3, #1
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00d      	beq.n	80050c0 <encode_array+0x1a0>
                    return false;
 80050a4:	2300      	movs	r3, #0
 80050a6:	e087      	b.n	80051b8 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 80050a8:	6839      	ldr	r1, [r7, #0]
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fd8a 	bl	8005bc4 <pb_enc_varint>
 80050b0:	4603      	mov	r3, r0
 80050b2:	f083 0301 	eor.w	r3, r3, #1
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <encode_array+0x1a0>
                    return false;
 80050bc:	2300      	movs	r3, #0
 80050be:	e07b      	b.n	80051b8 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	69db      	ldr	r3, [r3, #28]
 80050c4:	683a      	ldr	r2, [r7, #0]
 80050c6:	8a52      	ldrh	r2, [r2, #18]
 80050c8:	441a      	add	r2, r3
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80050ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050d0:	3301      	adds	r3, #1
 80050d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80050d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80050d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050d8:	429a      	cmp	r2, r3
 80050da:	d3cd      	bcc.n	8005078 <encode_array+0x158>
 80050dc:	e06b      	b.n	80051b6 <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 80050de:	2300      	movs	r3, #0
 80050e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80050e2:	e064      	b.n	80051ae <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	7d9b      	ldrb	r3, [r3, #22]
 80050e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050ec:	2b80      	cmp	r3, #128	; 0x80
 80050ee:	d147      	bne.n	8005180 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	7d9b      	ldrb	r3, [r3, #22]
 80050f4:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80050f8:	2b07      	cmp	r3, #7
 80050fa:	d005      	beq.n	8005108 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	7d9b      	ldrb	r3, [r3, #22]
 8005100:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8005104:	2b06      	cmp	r3, #6
 8005106:	d13b      	bne.n	8005180 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	69db      	ldr	r3, [r3, #28]
 800510c:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d11c      	bne.n	800515a <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 8005120:	6839      	ldr	r1, [r7, #0]
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fc36 	bl	8005994 <pb_encode_tag_for_field>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d00b      	beq.n	8005146 <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 800512e:	f04f 0200 	mov.w	r2, #0
 8005132:	f04f 0300 	mov.w	r3, #0
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fb7f 	bl	800583a <pb_encode_varint>
 800513c:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 800513e:	2b00      	cmp	r3, #0
 8005140:	d001      	beq.n	8005146 <encode_array+0x226>
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <encode_array+0x228>
 8005146:	2300      	movs	r3, #0
 8005148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800514c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005158:	e006      	b.n	8005168 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 800515a:	6839      	ldr	r1, [r7, #0]
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f951 	bl	8005404 <encode_basic_field>
 8005162:	4603      	mov	r3, r0
 8005164:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                field->pData = pData_orig;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6a3a      	ldr	r2, [r7, #32]
 800516c:	61da      	str	r2, [r3, #28]

                if (!status)
 800516e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005172:	f083 0301 	eor.w	r3, r3, #1
 8005176:	b2db      	uxtb	r3, r3
 8005178:	2b00      	cmp	r3, #0
 800517a:	d00d      	beq.n	8005198 <encode_array+0x278>
                    return false;
 800517c:	2300      	movs	r3, #0
 800517e:	e01b      	b.n	80051b8 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8005180:	6839      	ldr	r1, [r7, #0]
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f93e 	bl	8005404 <encode_basic_field>
 8005188:	4603      	mov	r3, r0
 800518a:	f083 0301 	eor.w	r3, r3, #1
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <encode_array+0x27a>
                    return false;
 8005194:	2300      	movs	r3, #0
 8005196:	e00f      	b.n	80051b8 <encode_array+0x298>
            {
 8005198:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	69db      	ldr	r3, [r3, #28]
 800519e:	683a      	ldr	r2, [r7, #0]
 80051a0:	8a52      	ldrh	r2, [r2, #18]
 80051a2:	441a      	add	r2, r3
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80051a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80051aa:	3301      	adds	r3, #1
 80051ac:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80051ae:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80051b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d396      	bcc.n	80050e4 <encode_array+0x1c4>
        }
    }
    
    return true;
 80051b6:	2301      	movs	r3, #1
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3730      	adds	r7, #48	; 0x30
 80051bc:	46bd      	mov	sp, r7
 80051be:	bdb0      	pop	{r4, r5, r7, pc}
 80051c0:	0800b2e4 	.word	0x0800b2e4
 80051c4:	0800b2fc 	.word	0x0800b2fc

080051c8 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b092      	sub	sp, #72	; 0x48
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	7d9b      	ldrb	r3, [r3, #22]
 80051d4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80051d8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80051dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f040 80c9 	bne.w	8005378 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80051e6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80051ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 80051f2:	2300      	movs	r3, #0
 80051f4:	e100      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 80051f6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80051fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051fe:	2b20      	cmp	r3, #32
 8005200:	d108      	bne.n	8005214 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	2b00      	cmp	r3, #0
 800520a:	bf0c      	ite	eq
 800520c:	2301      	moveq	r3, #1
 800520e:	2300      	movne	r3, #0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	e0f1      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8005214:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005218:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800521c:	2b30      	cmp	r3, #48	; 0x30
 800521e:	d108      	bne.n	8005232 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	bf0c      	ite	eq
 800522a:	2301      	moveq	r3, #1
 800522c:	2300      	movne	r3, #0
 800522e:	b2db      	uxtb	r3, r3
 8005230:	e0e2      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8005232:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005236:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800523a:	2b10      	cmp	r3, #16
 800523c:	d115      	bne.n	800526a <pb_check_proto3_default_value+0xa2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d011      	beq.n	800526a <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	4618      	mov	r0, r3
 800524c:	f7ff fe4a 	bl	8004ee4 <safe_read_bool>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	bf14      	ite	ne
 8005256:	2301      	movne	r3, #1
 8005258:	2300      	moveq	r3, #0
 800525a:	b2db      	uxtb	r3, r3
 800525c:	f083 0301 	eor.w	r3, r3, #1
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	b2db      	uxtb	r3, r3
 8005268:	e0c6      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8005274:	2300      	movs	r3, #0
 8005276:	e0bf      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8005278:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800527c:	f003 030f 	and.w	r3, r3, #15
 8005280:	2b05      	cmp	r3, #5
 8005282:	d81c      	bhi.n	80052be <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	69db      	ldr	r3, [r3, #28]
 8005288:	637b      	str	r3, [r7, #52]	; 0x34
            for (i = 0; i < field->data_size; i++)
 800528a:	2300      	movs	r3, #0
 800528c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005290:	e00d      	b.n	80052ae <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 8005292:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8005296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005298:	4413      	add	r3, r2
 800529a:	781b      	ldrb	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d001      	beq.n	80052a4 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 80052a0:	2300      	movs	r3, #0
 80052a2:	e0a9      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 80052a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80052a8:	3301      	adds	r3, #1
 80052aa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	8a5b      	ldrh	r3, [r3, #18]
 80052b2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d3eb      	bcc.n	8005292 <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e09c      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 80052be:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	2b06      	cmp	r3, #6
 80052c8:	d10a      	bne.n	80052e0 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	63bb      	str	r3, [r7, #56]	; 0x38
            return bytes->size == 0;
 80052d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d2:	881b      	ldrh	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	e08b      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 80052e0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80052e4:	f003 030f 	and.w	r3, r3, #15
 80052e8:	2b07      	cmp	r3, #7
 80052ea:	d108      	bne.n	80052fe <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69db      	ldr	r3, [r3, #28]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	bf0c      	ite	eq
 80052f6:	2301      	moveq	r3, #1
 80052f8:	2300      	movne	r3, #0
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	e07c      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 80052fe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005302:	f003 030f 	and.w	r3, r3, #15
 8005306:	2b0b      	cmp	r3, #11
 8005308:	d107      	bne.n	800531a <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	8a5b      	ldrh	r3, [r3, #18]
 800530e:	2b00      	cmp	r3, #0
 8005310:	bf0c      	ite	eq
 8005312:	2301      	moveq	r3, #1
 8005314:	2300      	movne	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	e06e      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 800531a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	2b08      	cmp	r3, #8
 8005324:	d005      	beq.n	8005332 <pb_check_proto3_default_value+0x16a>
 8005326:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800532a:	f003 030f 	and.w	r3, r3, #15
 800532e:	2b09      	cmp	r3, #9
 8005330:	d161      	bne.n	80053f6 <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	69da      	ldr	r2, [r3, #28]
 800533a:	f107 030c 	add.w	r3, r7, #12
 800533e:	4618      	mov	r0, r3
 8005340:	f7fd fe37 	bl	8002fb2 <pb_field_iter_begin>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d014      	beq.n	8005374 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 800534a:	f107 030c 	add.w	r3, r7, #12
 800534e:	4618      	mov	r0, r3
 8005350:	f7ff ff3a 	bl	80051c8 <pb_check_proto3_default_value>
 8005354:	4603      	mov	r3, r0
 8005356:	f083 0301 	eor.w	r3, r3, #1
 800535a:	b2db      	uxtb	r3, r3
 800535c:	2b00      	cmp	r3, #0
 800535e:	d001      	beq.n	8005364 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8005360:	2300      	movs	r3, #0
 8005362:	e049      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8005364:	f107 030c 	add.w	r3, r7, #12
 8005368:	4618      	mov	r0, r3
 800536a:	f7fd fe6b 	bl	8003044 <pb_field_iter_next>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1ea      	bne.n	800534a <pb_check_proto3_default_value+0x182>
            }
            return true;
 8005374:	2301      	movs	r3, #1
 8005376:	e03f      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8005378:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800537c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005380:	2b80      	cmp	r3, #128	; 0x80
 8005382:	d107      	bne.n	8005394 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	69db      	ldr	r3, [r3, #28]
 8005388:	2b00      	cmp	r3, #0
 800538a:	bf0c      	ite	eq
 800538c:	2301      	moveq	r3, #1
 800538e:	2300      	movne	r3, #0
 8005390:	b2db      	uxtb	r3, r3
 8005392:	e031      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 8005394:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005398:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d12a      	bne.n	80053f6 <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80053a0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80053a4:	f003 030f 	and.w	r3, r3, #15
 80053a8:	2b0a      	cmp	r3, #10
 80053aa:	d10a      	bne.n	80053c2 <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	63fb      	str	r3, [r7, #60]	; 0x3c
            return extension == NULL;
 80053b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	bf0c      	ite	eq
 80053ba:	2301      	moveq	r3, #1
 80053bc:	2300      	movne	r3, #0
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	e01a      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	4a0d      	ldr	r2, [pc, #52]	; (8005400 <pb_check_proto3_default_value+0x238>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d10a      	bne.n	80053e4 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	69db      	ldr	r3, [r3, #28]
 80053d2:	643b      	str	r3, [r7, #64]	; 0x40
            return pCallback->funcs.encode == NULL;
 80053d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	bf0c      	ite	eq
 80053dc:	2301      	moveq	r3, #1
 80053de:	2300      	movne	r3, #0
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	e009      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	bf0c      	ite	eq
 80053ee:	2301      	moveq	r3, #1
 80053f0:	2300      	movne	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	e000      	b.n	80053f8 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3748      	adds	r7, #72	; 0x48
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	080031e7 	.word	0x080031e7

08005404 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b082      	sub	sp, #8
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	69db      	ldr	r3, [r3, #28]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 8005416:	2301      	movs	r3, #1
 8005418:	e061      	b.n	80054de <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 800541a:	6839      	ldr	r1, [r7, #0]
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fab9 	bl	8005994 <pb_encode_tag_for_field>
 8005422:	4603      	mov	r3, r0
 8005424:	f083 0301 	eor.w	r3, r3, #1
 8005428:	b2db      	uxtb	r3, r3
 800542a:	2b00      	cmp	r3, #0
 800542c:	d001      	beq.n	8005432 <encode_basic_field+0x2e>
        return false;
 800542e:	2300      	movs	r3, #0
 8005430:	e055      	b.n	80054de <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	7d9b      	ldrb	r3, [r3, #22]
 8005436:	f003 030f 	and.w	r3, r3, #15
 800543a:	2b0b      	cmp	r3, #11
 800543c:	d844      	bhi.n	80054c8 <encode_basic_field+0xc4>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <encode_basic_field+0x40>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	08005475 	.word	0x08005475
 8005448:	08005481 	.word	0x08005481
 800544c:	08005481 	.word	0x08005481
 8005450:	08005481 	.word	0x08005481
 8005454:	0800548d 	.word	0x0800548d
 8005458:	0800548d 	.word	0x0800548d
 800545c:	08005499 	.word	0x08005499
 8005460:	080054a5 	.word	0x080054a5
 8005464:	080054b1 	.word	0x080054b1
 8005468:	080054b1 	.word	0x080054b1
 800546c:	080054c9 	.word	0x080054c9
 8005470:	080054bd 	.word	0x080054bd
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fb8a 	bl	8005b90 <pb_enc_bool>
 800547c:	4603      	mov	r3, r0
 800547e:	e02e      	b.n	80054de <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fb9e 	bl	8005bc4 <pb_enc_varint>
 8005488:	4603      	mov	r3, r0
 800548a:	e028      	b.n	80054de <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fc5a 	bl	8005d48 <pb_enc_fixed>
 8005494:	4603      	mov	r3, r0
 8005496:	e022      	b.n	80054de <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 8005498:	6839      	ldr	r1, [r7, #0]
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fc82 	bl	8005da4 <pb_enc_bytes>
 80054a0:	4603      	mov	r3, r0
 80054a2:	e01c      	b.n	80054de <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fcba 	bl	8005e20 <pb_enc_string>
 80054ac:	4603      	mov	r3, r0
 80054ae:	e016      	b.n	80054de <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fd12 	bl	8005edc <pb_enc_submessage>
 80054b8:	4603      	mov	r3, r0
 80054ba:	e010      	b.n	80054de <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fd52 	bl	8005f68 <pb_enc_fixed_length_bytes>
 80054c4:	4603      	mov	r3, r0
 80054c6:	e00a      	b.n	80054de <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d002      	beq.n	80054d6 <encode_basic_field+0xd2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	e000      	b.n	80054d8 <encode_basic_field+0xd4>
 80054d6:	4b04      	ldr	r3, [pc, #16]	; (80054e8 <encode_basic_field+0xe4>)
 80054d8:	687a      	ldr	r2, [r7, #4]
 80054da:	6113      	str	r3, [r2, #16]
 80054dc:	2300      	movs	r3, #0
    }
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	0800b304 	.word	0x0800b304

080054ec <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d018      	beq.n	8005532 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	6879      	ldr	r1, [r7, #4]
 800550a:	2000      	movs	r0, #0
 800550c:	4798      	blx	r3
 800550e:	4603      	mov	r3, r0
 8005510:	f083 0301 	eor.w	r3, r3, #1
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00b      	beq.n	8005532 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <encode_callback_field+0x3c>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	e000      	b.n	800552a <encode_callback_field+0x3e>
 8005528:	4b04      	ldr	r3, [pc, #16]	; (800553c <encode_callback_field+0x50>)
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6113      	str	r3, [r2, #16]
 800552e:	2300      	movs	r3, #0
 8005530:	e000      	b.n	8005534 <encode_callback_field+0x48>
    }
    return true;
 8005532:	2301      	movs	r3, #1
}
 8005534:	4618      	mov	r0, r3
 8005536:	3708      	adds	r7, #8
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	0800b318 	.word	0x0800b318

08005540 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b082      	sub	sp, #8
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	7d9b      	ldrb	r3, [r3, #22]
 800554e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005552:	2b30      	cmp	r3, #48	; 0x30
 8005554:	d108      	bne.n	8005568 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6a1b      	ldr	r3, [r3, #32]
 800555a:	881a      	ldrh	r2, [r3, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	8a1b      	ldrh	r3, [r3, #16]
 8005560:	429a      	cmp	r2, r3
 8005562:	d026      	beq.n	80055b2 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 8005564:	2301      	movs	r3, #1
 8005566:	e059      	b.n	800561c <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	7d9b      	ldrb	r3, [r3, #22]
 800556c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005570:	2b10      	cmp	r3, #16
 8005572:	d11e      	bne.n	80055b2 <encode_field+0x72>
    {
        if (field->pSize)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d00c      	beq.n	8005596 <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	6a1b      	ldr	r3, [r3, #32]
 8005580:	4618      	mov	r0, r3
 8005582:	f7ff fcaf 	bl	8004ee4 <safe_read_bool>
 8005586:	4603      	mov	r3, r0
 8005588:	f083 0301 	eor.w	r3, r3, #1
 800558c:	b2db      	uxtb	r3, r3
 800558e:	2b00      	cmp	r3, #0
 8005590:	d00f      	beq.n	80055b2 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 8005592:	2301      	movs	r3, #1
 8005594:	e042      	b.n	800561c <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	7d9b      	ldrb	r3, [r3, #22]
 800559a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d107      	bne.n	80055b2 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 80055a2:	6838      	ldr	r0, [r7, #0]
 80055a4:	f7ff fe10 	bl	80051c8 <pb_check_proto3_default_value>
 80055a8:	4603      	mov	r3, r0
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d001      	beq.n	80055b2 <encode_field+0x72>
                return true;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e034      	b.n	800561c <encode_field+0xdc>
        }
    }

    if (!field->pData)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	69db      	ldr	r3, [r3, #28]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d113      	bne.n	80055e2 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	7d9b      	ldrb	r3, [r3, #22]
 80055be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d10b      	bne.n	80055de <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	691b      	ldr	r3, [r3, #16]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <encode_field+0x94>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	e000      	b.n	80055d6 <encode_field+0x96>
 80055d4:	4b13      	ldr	r3, [pc, #76]	; (8005624 <encode_field+0xe4>)
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6113      	str	r3, [r2, #16]
 80055da:	2300      	movs	r3, #0
 80055dc:	e01e      	b.n	800561c <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 80055de:	2301      	movs	r3, #1
 80055e0:	e01c      	b.n	800561c <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	7d9b      	ldrb	r3, [r3, #22]
 80055e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055ea:	2b40      	cmp	r3, #64	; 0x40
 80055ec:	d105      	bne.n	80055fa <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f7ff ff7b 	bl	80054ec <encode_callback_field>
 80055f6:	4603      	mov	r3, r0
 80055f8:	e010      	b.n	800561c <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	7d9b      	ldrb	r3, [r3, #22]
 80055fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005602:	2b20      	cmp	r3, #32
 8005604:	d105      	bne.n	8005612 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff fc89 	bl	8004f20 <encode_array>
 800560e:	4603      	mov	r3, r0
 8005610:	e004      	b.n	800561c <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 8005612:	6839      	ldr	r1, [r7, #0]
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff fef5 	bl	8005404 <encode_basic_field>
 800561a:	4603      	mov	r3, r0
    }
}
 800561c:	4618      	mov	r0, r3
 800561e:	3708      	adds	r7, #8
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	0800b328 	.word	0x0800b328

08005628 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b08c      	sub	sp, #48	; 0x30
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 8005632:	f107 0308 	add.w	r3, r7, #8
 8005636:	6839      	ldr	r1, [r7, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f7fd fdc2 	bl	80031c2 <pb_field_iter_begin_extension_const>
 800563e:	4603      	mov	r3, r0
 8005640:	f083 0301 	eor.w	r3, r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00b      	beq.n	8005662 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <default_extension_encoder+0x30>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	e000      	b.n	800565a <default_extension_encoder+0x32>
 8005658:	4b07      	ldr	r3, [pc, #28]	; (8005678 <default_extension_encoder+0x50>)
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6113      	str	r3, [r2, #16]
 800565e:	2300      	movs	r3, #0
 8005660:	e006      	b.n	8005670 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 8005662:	f107 0308 	add.w	r3, r7, #8
 8005666:	4619      	mov	r1, r3
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff ff69 	bl	8005540 <encode_field>
 800566e:	4603      	mov	r3, r0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3730      	adds	r7, #48	; 0x30
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	0800b340 	.word	0x0800b340

0800567c <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b084      	sub	sp, #16
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	69db      	ldr	r3, [r3, #28]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	60fb      	str	r3, [r7, #12]

    while (extension)
 800568e:	e01e      	b.n	80056ce <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d008      	beq.n	80056ac <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	68f9      	ldr	r1, [r7, #12]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	4798      	blx	r3
 80056a6:	4603      	mov	r3, r0
 80056a8:	72fb      	strb	r3, [r7, #11]
 80056aa:	e005      	b.n	80056b8 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 80056ac:	68f9      	ldr	r1, [r7, #12]
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff ffba 	bl	8005628 <default_extension_encoder>
 80056b4:	4603      	mov	r3, r0
 80056b6:	72fb      	strb	r3, [r7, #11]

        if (!status)
 80056b8:	7afb      	ldrb	r3, [r7, #11]
 80056ba:	f083 0301 	eor.w	r3, r3, #1
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d001      	beq.n	80056c8 <encode_extension_field+0x4c>
            return false;
 80056c4:	2300      	movs	r3, #0
 80056c6:	e006      	b.n	80056d6 <encode_extension_field+0x5a>
        
        extension = extension->next;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	60fb      	str	r3, [r7, #12]
    while (extension)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d1dd      	bne.n	8005690 <encode_extension_field+0x14>
    }
    
    return true;
 80056d4:	2301      	movs	r3, #1
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3710      	adds	r7, #16
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}

080056de <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 80056de:	b580      	push	{r7, lr}
 80056e0:	b08e      	sub	sp, #56	; 0x38
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	60f8      	str	r0, [r7, #12]
 80056e6:	60b9      	str	r1, [r7, #8]
 80056e8:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 80056ea:	f107 0310 	add.w	r3, r7, #16
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	68b9      	ldr	r1, [r7, #8]
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fd fd51 	bl	800319a <pb_field_iter_begin_const>
 80056f8:	4603      	mov	r3, r0
 80056fa:	f083 0301 	eor.w	r3, r3, #1
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <pb_encode+0x2a>
        return true; /* Empty message type */
 8005704:	2301      	movs	r3, #1
 8005706:	e02a      	b.n	800575e <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8005708:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	2b0a      	cmp	r3, #10
 8005712:	d10d      	bne.n	8005730 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 8005714:	f107 0310 	add.w	r3, r7, #16
 8005718:	4619      	mov	r1, r3
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff ffae 	bl	800567c <encode_extension_field>
 8005720:	4603      	mov	r3, r0
 8005722:	f083 0301 	eor.w	r3, r3, #1
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00f      	beq.n	800574c <pb_encode+0x6e>
                return false;
 800572c:	2300      	movs	r3, #0
 800572e:	e016      	b.n	800575e <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 8005730:	f107 0310 	add.w	r3, r7, #16
 8005734:	4619      	mov	r1, r3
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7ff ff02 	bl	8005540 <encode_field>
 800573c:	4603      	mov	r3, r0
 800573e:	f083 0301 	eor.w	r3, r3, #1
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <pb_encode+0x6e>
                return false;
 8005748:	2300      	movs	r3, #0
 800574a:	e008      	b.n	800575e <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 800574c:	f107 0310 	add.w	r3, r7, #16
 8005750:	4618      	mov	r0, r3
 8005752:	f7fd fc77 	bl	8003044 <pb_field_iter_next>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1d5      	bne.n	8005708 <pb_encode+0x2a>
    
    return true;
 800575c:	2301      	movs	r3, #1
}
 800575e:	4618      	mov	r0, r3
 8005760:	3738      	adds	r7, #56	; 0x38
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b088      	sub	sp, #32
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	60b9      	str	r1, [r7, #8]
 8005770:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8005772:	2300      	movs	r3, #0
 8005774:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800577e:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	09db      	lsrs	r3, r3, #7
 8005784:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 8005786:	e013      	b.n	80057b0 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 8005788:	7efb      	ldrb	r3, [r7, #27]
 800578a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800578e:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	61fa      	str	r2, [r7, #28]
 8005796:	3320      	adds	r3, #32
 8005798:	443b      	add	r3, r7
 800579a:	7efa      	ldrb	r2, [r7, #27]
 800579c:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057a8:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	09db      	lsrs	r3, r3, #7
 80057ae:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d805      	bhi.n	80057c2 <pb_encode_varint_32+0x5c>
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e5      	bne.n	8005788 <pb_encode_varint_32+0x22>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1e2      	bne.n	8005788 <pb_encode_varint_32+0x22>
    }

    if (high)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d024      	beq.n	8005812 <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	011b      	lsls	r3, r3, #4
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057d4:	b2da      	uxtb	r2, r3
 80057d6:	7efb      	ldrb	r3, [r7, #27]
 80057d8:	4313      	orrs	r3, r2
 80057da:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	08db      	lsrs	r3, r3, #3
 80057e0:	607b      	str	r3, [r7, #4]

        while (high)
 80057e2:	e013      	b.n	800580c <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 80057e4:	7efb      	ldrb	r3, [r7, #27]
 80057e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057ea:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	1c5a      	adds	r2, r3, #1
 80057f0:	61fa      	str	r2, [r7, #28]
 80057f2:	3320      	adds	r3, #32
 80057f4:	443b      	add	r3, r7
 80057f6:	7efa      	ldrb	r2, [r7, #27]
 80057f8:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005804:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	09db      	lsrs	r3, r3, #7
 800580a:	607b      	str	r3, [r7, #4]
        while (high)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e8      	bne.n	80057e4 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	1c5a      	adds	r2, r3, #1
 8005816:	61fa      	str	r2, [r7, #28]
 8005818:	3320      	adds	r3, #32
 800581a:	443b      	add	r3, r7
 800581c:	7efa      	ldrb	r2, [r7, #27]
 800581e:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 8005822:	f107 0310 	add.w	r3, r7, #16
 8005826:	69fa      	ldr	r2, [r7, #28]
 8005828:	4619      	mov	r1, r3
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7ff fb0a 	bl	8004e44 <pb_write>
 8005830:	4603      	mov	r3, r0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800583a:	b590      	push	{r4, r7, lr}
 800583c:	b087      	sub	sp, #28
 800583e:	af00      	add	r7, sp, #0
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 8005846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800584a:	2a80      	cmp	r2, #128	; 0x80
 800584c:	f173 0300 	sbcs.w	r3, r3, #0
 8005850:	d20a      	bcs.n	8005868 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 8005852:	783b      	ldrb	r3, [r7, #0]
 8005854:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 8005856:	f107 0317 	add.w	r3, r7, #23
 800585a:	2201      	movs	r2, #1
 800585c:	4619      	mov	r1, r3
 800585e:	68f8      	ldr	r0, [r7, #12]
 8005860:	f7ff faf0 	bl	8004e44 <pb_write>
 8005864:	4603      	mov	r3, r0
 8005866:	e00f      	b.n	8005888 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 8005868:	683c      	ldr	r4, [r7, #0]
 800586a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800586e:	f04f 0200 	mov.w	r2, #0
 8005872:	f04f 0300 	mov.w	r3, #0
 8005876:	000a      	movs	r2, r1
 8005878:	2300      	movs	r3, #0
 800587a:	4613      	mov	r3, r2
 800587c:	461a      	mov	r2, r3
 800587e:	4621      	mov	r1, r4
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f7ff ff70 	bl	8005766 <pb_encode_varint_32>
 8005886:	4603      	mov	r3, r0
#endif
    }
}
 8005888:	4618      	mov	r0, r3
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd90      	pop	{r4, r7, pc}

08005890 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8005890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005894:	b08a      	sub	sp, #40	; 0x28
 8005896:	af00      	add	r7, sp, #0
 8005898:	6178      	str	r0, [r7, #20]
 800589a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 800589e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058a2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80058a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 80058aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	da15      	bge.n	80058de <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 80058b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ba:	ea00 0402 	and.w	r4, r0, r2
 80058be:	ea01 0503 	and.w	r5, r1, r3
 80058c2:	1923      	adds	r3, r4, r4
 80058c4:	603b      	str	r3, [r7, #0]
 80058c6:	eb45 0305 	adc.w	r3, r5, r5
 80058ca:	607b      	str	r3, [r7, #4]
 80058cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058d0:	ea6f 0a02 	mvn.w	sl, r2
 80058d4:	ea6f 0b03 	mvn.w	fp, r3
 80058d8:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80058dc:	e007      	b.n	80058ee <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 80058de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058e2:	eb12 0802 	adds.w	r8, r2, r2
 80058e6:	eb43 0903 	adc.w	r9, r3, r3
 80058ea:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 80058ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058f2:	6978      	ldr	r0, [r7, #20]
 80058f4:	f7ff ffa1 	bl	800583a <pb_encode_varint>
 80058f8:	4603      	mov	r3, r0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3728      	adds	r7, #40	; 0x28
 80058fe:	46bd      	mov	sp, r7
 8005900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005904 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 800590e:	2204      	movs	r2, #4
 8005910:	6839      	ldr	r1, [r7, #0]
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f7ff fa96 	bl	8004e44 <pb_write>
 8005918:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 800591a:	4618      	mov	r0, r3
 800591c:	3708      	adds	r7, #8
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}

08005922 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 8005922:	b580      	push	{r7, lr}
 8005924:	b082      	sub	sp, #8
 8005926:	af00      	add	r7, sp, #0
 8005928:	6078      	str	r0, [r7, #4]
 800592a:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 800592c:	2208      	movs	r2, #8
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f7ff fa87 	bl	8004e44 <pb_write>
 8005936:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 8005938:	4618      	mov	r0, r3
 800593a:	3708      	adds	r7, #8
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 8005940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005944:	b088      	sub	sp, #32
 8005946:	af00      	add	r7, sp, #0
 8005948:	6178      	str	r0, [r7, #20]
 800594a:	460b      	mov	r3, r1
 800594c:	60fa      	str	r2, [r7, #12]
 800594e:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2200      	movs	r2, #0
 8005954:	469a      	mov	sl, r3
 8005956:	4693      	mov	fp, r2
 8005958:	ea4f 755a 	mov.w	r5, sl, lsr #29
 800595c:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8005960:	7cfb      	ldrb	r3, [r7, #19]
 8005962:	2200      	movs	r2, #0
 8005964:	4698      	mov	r8, r3
 8005966:	4691      	mov	r9, r2
 8005968:	ea44 0308 	orr.w	r3, r4, r8
 800596c:	603b      	str	r3, [r7, #0]
 800596e:	ea45 0309 	orr.w	r3, r5, r9
 8005972:	607b      	str	r3, [r7, #4]
 8005974:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005978:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 800597c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005980:	6978      	ldr	r0, [r7, #20]
 8005982:	f7ff ff5a 	bl	800583a <pb_encode_varint>
 8005986:	4603      	mov	r3, r0
}
 8005988:	4618      	mov	r0, r3
 800598a:	3720      	adds	r7, #32
 800598c:	46bd      	mov	sp, r7
 800598e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005994 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	7d9b      	ldrb	r3, [r3, #22]
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	2b0b      	cmp	r3, #11
 80059a8:	d826      	bhi.n	80059f8 <pb_encode_tag_for_field+0x64>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <pb_encode_tag_for_field+0x1c>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059e1 	.word	0x080059e1
 80059b4:	080059e1 	.word	0x080059e1
 80059b8:	080059e1 	.word	0x080059e1
 80059bc:	080059e1 	.word	0x080059e1
 80059c0:	080059e7 	.word	0x080059e7
 80059c4:	080059ed 	.word	0x080059ed
 80059c8:	080059f3 	.word	0x080059f3
 80059cc:	080059f3 	.word	0x080059f3
 80059d0:	080059f3 	.word	0x080059f3
 80059d4:	080059f3 	.word	0x080059f3
 80059d8:	080059f9 	.word	0x080059f9
 80059dc:	080059f3 	.word	0x080059f3
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 80059e0:	2300      	movs	r3, #0
 80059e2:	73fb      	strb	r3, [r7, #15]
            break;
 80059e4:	e014      	b.n	8005a10 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 80059e6:	2305      	movs	r3, #5
 80059e8:	73fb      	strb	r3, [r7, #15]
            break;
 80059ea:	e011      	b.n	8005a10 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 80059ec:	2301      	movs	r3, #1
 80059ee:	73fb      	strb	r3, [r7, #15]
            break;
 80059f0:	e00e      	b.n	8005a10 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 80059f2:	2302      	movs	r3, #2
 80059f4:	73fb      	strb	r3, [r7, #15]
            break;
 80059f6:	e00b      	b.n	8005a10 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d002      	beq.n	8005a06 <pb_encode_tag_for_field+0x72>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	691b      	ldr	r3, [r3, #16]
 8005a04:	e000      	b.n	8005a08 <pb_encode_tag_for_field+0x74>
 8005a06:	4b09      	ldr	r3, [pc, #36]	; (8005a2c <pb_encode_tag_for_field+0x98>)
 8005a08:	687a      	ldr	r2, [r7, #4]
 8005a0a:	6113      	str	r3, [r2, #16]
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e008      	b.n	8005a22 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	8a1b      	ldrh	r3, [r3, #16]
 8005a14:	461a      	mov	r2, r3
 8005a16:	7bfb      	ldrb	r3, [r7, #15]
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff ff90 	bl	8005940 <pb_encode_tag>
 8005a20:	4603      	mov	r3, r0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	0800b304 	.word	0x0800b304

08005a30 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 8005a30:	b5b0      	push	{r4, r5, r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	461c      	mov	r4, r3
 8005a42:	4615      	mov	r5, r2
 8005a44:	4622      	mov	r2, r4
 8005a46:	462b      	mov	r3, r5
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f7ff fef6 	bl	800583a <pb_encode_varint>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	f083 0301 	eor.w	r3, r3, #1
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d001      	beq.n	8005a5e <pb_encode_string+0x2e>
        return false;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e005      	b.n	8005a6a <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	68b9      	ldr	r1, [r7, #8]
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f7ff f9ee 	bl	8004e44 <pb_write>
 8005a68:	4603      	mov	r3, r0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005a74 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8005a74:	b5b0      	push	{r4, r5, r7, lr}
 8005a76:	b08c      	sub	sp, #48	; 0x30
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	60f8      	str	r0, [r7, #12]
 8005a7c:	60b9      	str	r1, [r7, #8]
 8005a7e:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8005a80:	f107 0314 	add.w	r3, r7, #20
 8005a84:	2200      	movs	r2, #0
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	605a      	str	r2, [r3, #4]
 8005a8a:	609a      	str	r2, [r3, #8]
 8005a8c:	60da      	str	r2, [r3, #12]
 8005a8e:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 8005a90:	f107 0314 	add.w	r3, r7, #20
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	68b9      	ldr	r1, [r7, #8]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f7ff fe20 	bl	80056de <pb_encode>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	f083 0301 	eor.w	r3, r3, #1
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d004      	beq.n	8005ab4 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 8005aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	611a      	str	r2, [r3, #16]
#endif
        return false;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	e065      	b.n	8005b80 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	2200      	movs	r2, #0
 8005abc:	461c      	mov	r4, r3
 8005abe:	4615      	mov	r5, r2
 8005ac0:	4622      	mov	r2, r4
 8005ac2:	462b      	mov	r3, r5
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f7ff feb8 	bl	800583a <pb_encode_varint>
 8005aca:	4603      	mov	r3, r0
 8005acc:	f083 0301 	eor.w	r3, r3, #1
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <pb_encode_submessage+0x66>
        return false;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e052      	b.n	8005b80 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d106      	bne.n	8005af0 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 8005ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	68f8      	ldr	r0, [r7, #12]
 8005ae8:	f7ff f9ac 	bl	8004e44 <pb_write>
 8005aec:	4603      	mov	r3, r0
 8005aee:	e047      	b.n	8005b80 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	68da      	ldr	r2, [r3, #12]
 8005af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af6:	441a      	add	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d90b      	bls.n	8005b18 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <pb_encode_submessage+0x9a>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	691b      	ldr	r3, [r3, #16]
 8005b0c:	e000      	b.n	8005b10 <pb_encode_submessage+0x9c>
 8005b0e:	4b1e      	ldr	r3, [pc, #120]	; (8005b88 <pb_encode_submessage+0x114>)
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	6113      	str	r3, [r2, #16]
 8005b14:	2300      	movs	r3, #0
 8005b16:	e033      	b.n	8005b80 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 8005b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b26:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8005b28:	2300      	movs	r3, #0
 8005b2a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 8005b30:	f107 0314 	add.w	r3, r7, #20
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff fdd0 	bl	80056de <pb_encode>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	68da      	ldr	r2, [r3, #12]
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	441a      	add	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 8005b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d00b      	beq.n	8005b7c <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <pb_encode_submessage+0xfe>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	e000      	b.n	8005b74 <pb_encode_submessage+0x100>
 8005b72:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <pb_encode_submessage+0x118>)
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	6113      	str	r3, [r2, #16]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e001      	b.n	8005b80 <pb_encode_submessage+0x10c>
    
    return status;
 8005b7c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3730      	adds	r7, #48	; 0x30
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bdb0      	pop	{r4, r5, r7, pc}
 8005b88:	0800b2cc 	.word	0x0800b2cc
 8005b8c:	0800b354 	.word	0x0800b354

08005b90 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005b90:	b5b0      	push	{r4, r5, r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	69db      	ldr	r3, [r3, #28]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff f9a0 	bl	8004ee4 <safe_read_bool>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	461c      	mov	r4, r3
 8005bae:	4615      	mov	r5, r2
 8005bb0:	4622      	mov	r2, r4
 8005bb2:	462b      	mov	r3, r5
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f7ff fe40 	bl	800583a <pb_encode_varint>
 8005bba:	4603      	mov	r3, r0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3710      	adds	r7, #16
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bdb0      	pop	{r4, r5, r7, pc}

08005bc4 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc8:	b08c      	sub	sp, #48	; 0x30
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	61f8      	str	r0, [r7, #28]
 8005bce:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	7d9b      	ldrb	r3, [r3, #22]
 8005bd4:	f003 030f 	and.w	r3, r3, #15
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d152      	bne.n	8005c82 <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

        if (field->data_size == sizeof(uint_least8_t))
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	8a5b      	ldrh	r3, [r3, #18]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d10b      	bne.n	8005c08 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 8005bf0:	69bb      	ldr	r3, [r7, #24]
 8005bf2:	69db      	ldr	r3, [r3, #28]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	b2db      	uxtb	r3, r3
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	613b      	str	r3, [r7, #16]
 8005bfc:	617a      	str	r2, [r7, #20]
 8005bfe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005c02:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8005c06:	e035      	b.n	8005c74 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	8a5b      	ldrh	r3, [r3, #18]
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d10b      	bne.n	8005c28 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	69db      	ldr	r3, [r3, #28]
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b29b      	uxth	r3, r3
 8005c18:	2200      	movs	r2, #0
 8005c1a:	60bb      	str	r3, [r7, #8]
 8005c1c:	60fa      	str	r2, [r7, #12]
 8005c1e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005c22:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8005c26:	e025      	b.n	8005c74 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 8005c28:	69bb      	ldr	r3, [r7, #24]
 8005c2a:	8a5b      	ldrh	r3, [r3, #18]
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d10a      	bne.n	8005c46 <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	69db      	ldr	r3, [r3, #28]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2200      	movs	r2, #0
 8005c38:	603b      	str	r3, [r7, #0]
 8005c3a:	607a      	str	r2, [r7, #4]
 8005c3c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005c40:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8005c44:	e016      	b.n	8005c74 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	8a5b      	ldrh	r3, [r3, #18]
 8005c4a:	2b08      	cmp	r3, #8
 8005c4c:	d106      	bne.n	8005c5c <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	69db      	ldr	r3, [r3, #28]
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005c5a:	e00b      	b.n	8005c74 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d002      	beq.n	8005c6a <pb_enc_varint+0xa6>
 8005c64:	69fb      	ldr	r3, [r7, #28]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	e000      	b.n	8005c6c <pb_enc_varint+0xa8>
 8005c6a:	4b36      	ldr	r3, [pc, #216]	; (8005d44 <pb_enc_varint+0x180>)
 8005c6c:	69fa      	ldr	r2, [r7, #28]
 8005c6e:	6113      	str	r3, [r2, #16]
 8005c70:	2300      	movs	r3, #0
 8005c72:	e061      	b.n	8005d38 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 8005c74:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c78:	69f8      	ldr	r0, [r7, #28]
 8005c7a:	f7ff fdde 	bl	800583a <pb_encode_varint>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	e05a      	b.n	8005d38 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	8a5b      	ldrh	r3, [r3, #18]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d10a      	bne.n	8005cac <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	f993 3000 	ldrsb.w	r3, [r3]
 8005c9e:	b25b      	sxtb	r3, r3
 8005ca0:	17da      	asrs	r2, r3, #31
 8005ca2:	469a      	mov	sl, r3
 8005ca4:	4693      	mov	fp, r2
 8005ca6:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8005caa:	e032      	b.n	8005d12 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	8a5b      	ldrh	r3, [r3, #18]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d10a      	bne.n	8005cca <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cbc:	b21b      	sxth	r3, r3
 8005cbe:	17da      	asrs	r2, r3, #31
 8005cc0:	4698      	mov	r8, r3
 8005cc2:	4691      	mov	r9, r2
 8005cc4:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8005cc8:	e023      	b.n	8005d12 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	8a5b      	ldrh	r3, [r3, #18]
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d108      	bne.n	8005ce4 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	69db      	ldr	r3, [r3, #28]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	17da      	asrs	r2, r3, #31
 8005cda:	461c      	mov	r4, r3
 8005cdc:	4615      	mov	r5, r2
 8005cde:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8005ce2:	e016      	b.n	8005d12 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	8a5b      	ldrh	r3, [r3, #18]
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d106      	bne.n	8005cfa <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005cf8:	e00b      	b.n	8005d12 <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <pb_enc_varint+0x144>
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	e000      	b.n	8005d0a <pb_enc_varint+0x146>
 8005d08:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <pb_enc_varint+0x180>)
 8005d0a:	69fa      	ldr	r2, [r7, #28]
 8005d0c:	6113      	str	r3, [r2, #16]
 8005d0e:	2300      	movs	r3, #0
 8005d10:	e012      	b.n	8005d38 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	7d9b      	ldrb	r3, [r3, #22]
 8005d16:	f003 030f 	and.w	r3, r3, #15
 8005d1a:	2b03      	cmp	r3, #3
 8005d1c:	d106      	bne.n	8005d2c <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 8005d1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d22:	69f8      	ldr	r0, [r7, #28]
 8005d24:	f7ff fdb4 	bl	8005890 <pb_encode_svarint>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	e005      	b.n	8005d38 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 8005d2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d30:	69f8      	ldr	r0, [r7, #28]
 8005d32:	f7ff fd82 	bl	800583a <pb_encode_varint>
 8005d36:	4603      	mov	r3, r0

    }
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3730      	adds	r7, #48	; 0x30
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d42:	bf00      	nop
 8005d44:	0800b368 	.word	0x0800b368

08005d48 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b082      	sub	sp, #8
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	8a5b      	ldrh	r3, [r3, #18]
 8005d56:	2b04      	cmp	r3, #4
 8005d58:	d107      	bne.n	8005d6a <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	4619      	mov	r1, r3
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f7ff fdcf 	bl	8005904 <pb_encode_fixed32>
 8005d66:	4603      	mov	r3, r0
 8005d68:	e016      	b.n	8005d98 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	8a5b      	ldrh	r3, [r3, #18]
 8005d6e:	2b08      	cmp	r3, #8
 8005d70:	d107      	bne.n	8005d82 <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	4619      	mov	r1, r3
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f7ff fdd2 	bl	8005922 <pb_encode_fixed64>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	e00a      	b.n	8005d98 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <pb_enc_fixed+0x48>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	691b      	ldr	r3, [r3, #16]
 8005d8e:	e000      	b.n	8005d92 <pb_enc_fixed+0x4a>
 8005d90:	4b03      	ldr	r3, [pc, #12]	; (8005da0 <pb_enc_fixed+0x58>)
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	6113      	str	r3, [r2, #16]
 8005d96:	2300      	movs	r3, #0
    }
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3708      	adds	r7, #8
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	0800b368 	.word	0x0800b368

08005da4 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
 8005dac:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 8005dae:	2300      	movs	r3, #0
 8005db0:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	69db      	ldr	r3, [r3, #28]
 8005db6:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d106      	bne.n	8005dcc <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f7ff fe34 	bl	8005a30 <pb_encode_string>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	e022      	b.n	8005e12 <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	7d9b      	ldrb	r3, [r3, #22]
 8005dd0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d113      	bne.n	8005e00 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	461a      	mov	r2, r3
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	8a5b      	ldrh	r3, [r3, #18]
 8005de2:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d90b      	bls.n	8005e00 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	691b      	ldr	r3, [r3, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <pb_enc_bytes+0x52>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	e000      	b.n	8005df8 <pb_enc_bytes+0x54>
 8005df6:	4b09      	ldr	r3, [pc, #36]	; (8005e1c <pb_enc_bytes+0x78>)
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6113      	str	r3, [r2, #16]
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	e008      	b.n	8005e12 <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	1c99      	adds	r1, r3, #2
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	881b      	ldrh	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff fe10 	bl	8005a30 <pb_encode_string>
 8005e10:	4603      	mov	r3, r0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3710      	adds	r7, #16
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	0800b37c 	.word	0x0800b37c

08005e20 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b086      	sub	sp, #24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	8a5b      	ldrh	r3, [r3, #18]
 8005e32:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	7d9b      	ldrb	r3, [r3, #22]
 8005e3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e42:	2b80      	cmp	r3, #128	; 0x80
 8005e44:	d103      	bne.n	8005e4e <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 8005e46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e4a:	613b      	str	r3, [r7, #16]
 8005e4c:	e011      	b.n	8005e72 <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d10b      	bne.n	8005e6c <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <pb_enc_string+0x42>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	e000      	b.n	8005e64 <pb_enc_string+0x44>
 8005e62:	4b1c      	ldr	r3, [pc, #112]	; (8005ed4 <pb_enc_string+0xb4>)
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	6113      	str	r3, [r2, #16]
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e02f      	b.n	8005ecc <pb_enc_string+0xac>

        max_size -= 1;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d102      	bne.n	8005e7e <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 8005e78:	2300      	movs	r3, #0
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	e020      	b.n	8005ec0 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 8005e82:	e005      	b.n	8005e90 <pb_enc_string+0x70>
        {
            size++;
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	3301      	adds	r3, #1
 8005e88:	617b      	str	r3, [r7, #20]
            p++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 8005e90:	697a      	ldr	r2, [r7, #20]
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	429a      	cmp	r2, r3
 8005e96:	d203      	bcs.n	8005ea0 <pb_enc_string+0x80>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d1f1      	bne.n	8005e84 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00b      	beq.n	8005ec0 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691b      	ldr	r3, [r3, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <pb_enc_string+0x96>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	e000      	b.n	8005eb8 <pb_enc_string+0x98>
 8005eb6:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <pb_enc_string+0xb8>)
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6113      	str	r3, [r2, #16]
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	e005      	b.n	8005ecc <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	68b9      	ldr	r1, [r7, #8]
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff fdb3 	bl	8005a30 <pb_encode_string>
 8005eca:	4603      	mov	r3, r0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	0800b390 	.word	0x0800b390
 8005ed8:	0800b3a4 	.word	0x0800b3a4

08005edc <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10b      	bne.n	8005f06 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <pb_enc_submessage+0x20>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	e000      	b.n	8005efe <pb_enc_submessage+0x22>
 8005efc:	4b19      	ldr	r3, [pc, #100]	; (8005f64 <pb_enc_submessage+0x88>)
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6113      	str	r3, [r2, #16]
 8005f02:	2300      	movs	r3, #0
 8005f04:	e029      	b.n	8005f5a <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	7d9b      	ldrb	r3, [r3, #22]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	2b09      	cmp	r3, #9
 8005f10:	d11a      	bne.n	8005f48 <pb_enc_submessage+0x6c>
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d016      	beq.n	8005f48 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	3b08      	subs	r3, #8
 8005f20:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00e      	beq.n	8005f48 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	3204      	adds	r2, #4
 8005f32:	6839      	ldr	r1, [r7, #0]
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
 8005f38:	4603      	mov	r3, r0
 8005f3a:	f083 0301 	eor.w	r3, r3, #1
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <pb_enc_submessage+0x6c>
                return false;
 8005f44:	2300      	movs	r3, #0
 8005f46:	e008      	b.n	8005f5a <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	461a      	mov	r2, r3
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff fd8e 	bl	8005a74 <pb_encode_submessage>
 8005f58:	4603      	mov	r3, r0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	0800b3b8 	.word	0x0800b3b8

08005f68 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b082      	sub	sp, #8
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	69d9      	ldr	r1, [r3, #28]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	8a5b      	ldrh	r3, [r3, #18]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff fd57 	bl	8005a30 <pb_encode_string>
 8005f82:	4603      	mov	r3, r0
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3708      	adds	r7, #8
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}

08005f8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f92:	4b0f      	ldr	r3, [pc, #60]	; (8005fd0 <HAL_MspInit+0x44>)
 8005f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f96:	4a0e      	ldr	r2, [pc, #56]	; (8005fd0 <HAL_MspInit+0x44>)
 8005f98:	f043 0301 	orr.w	r3, r3, #1
 8005f9c:	6613      	str	r3, [r2, #96]	; 0x60
 8005f9e:	4b0c      	ldr	r3, [pc, #48]	; (8005fd0 <HAL_MspInit+0x44>)
 8005fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	607b      	str	r3, [r7, #4]
 8005fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005faa:	4b09      	ldr	r3, [pc, #36]	; (8005fd0 <HAL_MspInit+0x44>)
 8005fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fae:	4a08      	ldr	r2, [pc, #32]	; (8005fd0 <HAL_MspInit+0x44>)
 8005fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fb4:	6593      	str	r3, [r2, #88]	; 0x58
 8005fb6:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <HAL_MspInit+0x44>)
 8005fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005fc2:	f001 fc6b 	bl	800789c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fc6:	bf00      	nop
 8005fc8:	3708      	adds	r7, #8
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40021000 	.word	0x40021000

08005fd4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b09a      	sub	sp, #104	; 0x68
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fdc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	601a      	str	r2, [r3, #0]
 8005fe4:	605a      	str	r2, [r3, #4]
 8005fe6:	609a      	str	r2, [r3, #8]
 8005fe8:	60da      	str	r2, [r3, #12]
 8005fea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005fec:	f107 0310 	add.w	r3, r7, #16
 8005ff0:	2244      	movs	r2, #68	; 0x44
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f004 fafb 	bl	800a5f0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a24      	ldr	r2, [pc, #144]	; (8006090 <HAL_FDCAN_MspInit+0xbc>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d141      	bne.n	8006088 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8006004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006008:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800600a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800600e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006010:	f107 0310 	add.w	r3, r7, #16
 8006014:	4618      	mov	r0, r3
 8006016:	f002 f947 	bl	80082a8 <HAL_RCCEx_PeriphCLKConfig>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d001      	beq.n	8006024 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8006020:	f7fc fd9c 	bl	8002b5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8006024:	4b1b      	ldr	r3, [pc, #108]	; (8006094 <HAL_FDCAN_MspInit+0xc0>)
 8006026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006028:	4a1a      	ldr	r2, [pc, #104]	; (8006094 <HAL_FDCAN_MspInit+0xc0>)
 800602a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800602e:	6593      	str	r3, [r2, #88]	; 0x58
 8006030:	4b18      	ldr	r3, [pc, #96]	; (8006094 <HAL_FDCAN_MspInit+0xc0>)
 8006032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800603c:	4b15      	ldr	r3, [pc, #84]	; (8006094 <HAL_FDCAN_MspInit+0xc0>)
 800603e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006040:	4a14      	ldr	r2, [pc, #80]	; (8006094 <HAL_FDCAN_MspInit+0xc0>)
 8006042:	f043 0301 	orr.w	r3, r3, #1
 8006046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006048:	4b12      	ldr	r3, [pc, #72]	; (8006094 <HAL_FDCAN_MspInit+0xc0>)
 800604a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	60bb      	str	r3, [r7, #8]
 8006052:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006054:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006058:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800605a:	2302      	movs	r3, #2
 800605c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800605e:	2300      	movs	r3, #0
 8006060:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006062:	2300      	movs	r3, #0
 8006064:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8006066:	2309      	movs	r3, #9
 8006068:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800606a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800606e:	4619      	mov	r1, r3
 8006070:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006074:	f001 f9d4 	bl	8007420 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8006078:	2200      	movs	r2, #0
 800607a:	2100      	movs	r1, #0
 800607c:	2015      	movs	r0, #21
 800607e:	f000 fb86 	bl	800678e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8006082:	2015      	movs	r0, #21
 8006084:	f000 fb9d 	bl	80067c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8006088:	bf00      	nop
 800608a:	3768      	adds	r7, #104	; 0x68
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40006400 	.word	0x40006400
 8006094:	40021000 	.word	0x40021000

08006098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <HAL_TIM_Base_MspInit+0x8c>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d10c      	bne.n	80060c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80060aa:	4b1f      	ldr	r3, [pc, #124]	; (8006128 <HAL_TIM_Base_MspInit+0x90>)
 80060ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ae:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <HAL_TIM_Base_MspInit+0x90>)
 80060b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060b4:	6613      	str	r3, [r2, #96]	; 0x60
 80060b6:	4b1c      	ldr	r3, [pc, #112]	; (8006128 <HAL_TIM_Base_MspInit+0x90>)
 80060b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80060c2:	e02a      	b.n	800611a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a18      	ldr	r2, [pc, #96]	; (800612c <HAL_TIM_Base_MspInit+0x94>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d114      	bne.n	80060f8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80060ce:	4b16      	ldr	r3, [pc, #88]	; (8006128 <HAL_TIM_Base_MspInit+0x90>)
 80060d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d2:	4a15      	ldr	r2, [pc, #84]	; (8006128 <HAL_TIM_Base_MspInit+0x90>)
 80060d4:	f043 0310 	orr.w	r3, r3, #16
 80060d8:	6593      	str	r3, [r2, #88]	; 0x58
 80060da:	4b13      	ldr	r3, [pc, #76]	; (8006128 <HAL_TIM_Base_MspInit+0x90>)
 80060dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060de:	f003 0310 	and.w	r3, r3, #16
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80060e6:	2200      	movs	r2, #0
 80060e8:	2100      	movs	r1, #0
 80060ea:	2036      	movs	r0, #54	; 0x36
 80060ec:	f000 fb4f 	bl	800678e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80060f0:	2036      	movs	r0, #54	; 0x36
 80060f2:	f000 fb66 	bl	80067c2 <HAL_NVIC_EnableIRQ>
}
 80060f6:	e010      	b.n	800611a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a0c      	ldr	r2, [pc, #48]	; (8006130 <HAL_TIM_Base_MspInit+0x98>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d10b      	bne.n	800611a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006102:	4b09      	ldr	r3, [pc, #36]	; (8006128 <HAL_TIM_Base_MspInit+0x90>)
 8006104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006106:	4a08      	ldr	r2, [pc, #32]	; (8006128 <HAL_TIM_Base_MspInit+0x90>)
 8006108:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800610c:	6613      	str	r3, [r2, #96]	; 0x60
 800610e:	4b06      	ldr	r3, [pc, #24]	; (8006128 <HAL_TIM_Base_MspInit+0x90>)
 8006110:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006112:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	68fb      	ldr	r3, [r7, #12]
}
 800611a:	bf00      	nop
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	40012c00 	.word	0x40012c00
 8006128:	40021000 	.word	0x40021000
 800612c:	40001000 	.word	0x40001000
 8006130:	40013400 	.word	0x40013400

08006134 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006134:	b480      	push	{r7}
 8006136:	b085      	sub	sp, #20
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a0a      	ldr	r2, [pc, #40]	; (800616c <HAL_TIM_PWM_MspInit+0x38>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d10b      	bne.n	800615e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006146:	4b0a      	ldr	r3, [pc, #40]	; (8006170 <HAL_TIM_PWM_MspInit+0x3c>)
 8006148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800614a:	4a09      	ldr	r2, [pc, #36]	; (8006170 <HAL_TIM_PWM_MspInit+0x3c>)
 800614c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006150:	6613      	str	r3, [r2, #96]	; 0x60
 8006152:	4b07      	ldr	r3, [pc, #28]	; (8006170 <HAL_TIM_PWM_MspInit+0x3c>)
 8006154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006156:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800615e:	bf00      	nop
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40014000 	.word	0x40014000
 8006170:	40021000 	.word	0x40021000

08006174 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800617c:	f107 0314 	add.w	r3, r7, #20
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	605a      	str	r2, [r3, #4]
 8006186:	609a      	str	r2, [r3, #8]
 8006188:	60da      	str	r2, [r3, #12]
 800618a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a35      	ldr	r2, [pc, #212]	; (8006268 <HAL_TIM_MspPostInit+0xf4>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d11e      	bne.n	80061d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006196:	4b35      	ldr	r3, [pc, #212]	; (800626c <HAL_TIM_MspPostInit+0xf8>)
 8006198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619a:	4a34      	ldr	r2, [pc, #208]	; (800626c <HAL_TIM_MspPostInit+0xf8>)
 800619c:	f043 0301 	orr.w	r3, r3, #1
 80061a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061a2:	4b32      	ldr	r3, [pc, #200]	; (800626c <HAL_TIM_MspPostInit+0xf8>)
 80061a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061a6:	f003 0301 	and.w	r3, r3, #1
 80061aa:	613b      	str	r3, [r7, #16]
 80061ac:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80061ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061b4:	2302      	movs	r3, #2
 80061b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80061b8:	2302      	movs	r3, #2
 80061ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061bc:	2300      	movs	r3, #0
 80061be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80061c0:	2306      	movs	r3, #6
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061c4:	f107 0314 	add.w	r3, r7, #20
 80061c8:	4619      	mov	r1, r3
 80061ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061ce:	f001 f927 	bl	8007420 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80061d2:	e045      	b.n	8006260 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM8)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a25      	ldr	r2, [pc, #148]	; (8006270 <HAL_TIM_MspPostInit+0xfc>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d11e      	bne.n	800621c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061de:	4b23      	ldr	r3, [pc, #140]	; (800626c <HAL_TIM_MspPostInit+0xf8>)
 80061e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e2:	4a22      	ldr	r2, [pc, #136]	; (800626c <HAL_TIM_MspPostInit+0xf8>)
 80061e4:	f043 0301 	orr.w	r3, r3, #1
 80061e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061ea:	4b20      	ldr	r3, [pc, #128]	; (800626c <HAL_TIM_MspPostInit+0xf8>)
 80061ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ee:	f003 0301 	and.w	r3, r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]
 80061f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80061f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061fc:	2302      	movs	r3, #2
 80061fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006200:	2302      	movs	r3, #2
 8006202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006204:	2300      	movs	r3, #0
 8006206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8006208:	2302      	movs	r3, #2
 800620a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800620c:	f107 0314 	add.w	r3, r7, #20
 8006210:	4619      	mov	r1, r3
 8006212:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006216:	f001 f903 	bl	8007420 <HAL_GPIO_Init>
}
 800621a:	e021      	b.n	8006260 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM15)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a14      	ldr	r2, [pc, #80]	; (8006274 <HAL_TIM_MspPostInit+0x100>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d11c      	bne.n	8006260 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006226:	4b11      	ldr	r3, [pc, #68]	; (800626c <HAL_TIM_MspPostInit+0xf8>)
 8006228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622a:	4a10      	ldr	r2, [pc, #64]	; (800626c <HAL_TIM_MspPostInit+0xf8>)
 800622c:	f043 0301 	orr.w	r3, r3, #1
 8006230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006232:	4b0e      	ldr	r3, [pc, #56]	; (800626c <HAL_TIM_MspPostInit+0xf8>)
 8006234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006236:	f003 0301 	and.w	r3, r3, #1
 800623a:	60bb      	str	r3, [r7, #8]
 800623c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800623e:	2304      	movs	r3, #4
 8006240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006242:	2302      	movs	r3, #2
 8006244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006246:	2302      	movs	r3, #2
 8006248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800624a:	2300      	movs	r3, #0
 800624c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800624e:	2309      	movs	r3, #9
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006252:	f107 0314 	add.w	r3, r7, #20
 8006256:	4619      	mov	r1, r3
 8006258:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800625c:	f001 f8e0 	bl	8007420 <HAL_GPIO_Init>
}
 8006260:	bf00      	nop
 8006262:	3728      	adds	r7, #40	; 0x28
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	40012c00 	.word	0x40012c00
 800626c:	40021000 	.word	0x40021000
 8006270:	40013400 	.word	0x40013400
 8006274:	40014000 	.word	0x40014000

08006278 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800627c:	e7fe      	b.n	800627c <NMI_Handler+0x4>

0800627e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800627e:	b480      	push	{r7}
 8006280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006282:	e7fe      	b.n	8006282 <HardFault_Handler+0x4>

08006284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006288:	e7fe      	b.n	8006288 <MemManage_Handler+0x4>

0800628a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800628a:	b480      	push	{r7}
 800628c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800628e:	e7fe      	b.n	800628e <BusFault_Handler+0x4>

08006290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006290:	b480      	push	{r7}
 8006292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006294:	e7fe      	b.n	8006294 <UsageFault_Handler+0x4>

08006296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006296:	b480      	push	{r7}
 8006298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800629a:	bf00      	nop
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80062a4:	b480      	push	{r7}
 80062a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80062a8:	bf00      	nop
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr

080062b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062b2:	b480      	push	{r7}
 80062b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80062b6:	bf00      	nop
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80062c4:	f000 f96a 	bl	800659c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80062c8:	bf00      	nop
 80062ca:	bd80      	pop	{r7, pc}

080062cc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80062d0:	4802      	ldr	r0, [pc, #8]	; (80062dc <FDCAN1_IT0_IRQHandler+0x10>)
 80062d2:	f000 fe45 	bl	8006f60 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80062d6:	bf00      	nop
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop
 80062dc:	20000088 	.word	0x20000088

080062e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80062e4:	4802      	ldr	r0, [pc, #8]	; (80062f0 <TIM6_DAC_IRQHandler+0x10>)
 80062e6:	f002 fbe9 	bl	8008abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80062ea:	bf00      	nop
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	20000138 	.word	0x20000138

080062f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80062f4:	b480      	push	{r7}
 80062f6:	af00      	add	r7, sp, #0
  return 1;
 80062f8:	2301      	movs	r3, #1
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <_kill>:

int _kill(int pid, int sig)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800630e:	f004 fa11 	bl	800a734 <__errno>
 8006312:	4603      	mov	r3, r0
 8006314:	2216      	movs	r2, #22
 8006316:	601a      	str	r2, [r3, #0]
  return -1;
 8006318:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800631c:	4618      	mov	r0, r3
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <_exit>:

void _exit (int status)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800632c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff ffe7 	bl	8006304 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006336:	e7fe      	b.n	8006336 <_exit+0x12>

08006338 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006344:	2300      	movs	r3, #0
 8006346:	617b      	str	r3, [r7, #20]
 8006348:	e00a      	b.n	8006360 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800634a:	f3af 8000 	nop.w
 800634e:	4601      	mov	r1, r0
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	1c5a      	adds	r2, r3, #1
 8006354:	60ba      	str	r2, [r7, #8]
 8006356:	b2ca      	uxtb	r2, r1
 8006358:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	3301      	adds	r3, #1
 800635e:	617b      	str	r3, [r7, #20]
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	429a      	cmp	r2, r3
 8006366:	dbf0      	blt.n	800634a <_read+0x12>
  }

  return len;
 8006368:	687b      	ldr	r3, [r7, #4]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006372:	b580      	push	{r7, lr}
 8006374:	b086      	sub	sp, #24
 8006376:	af00      	add	r7, sp, #0
 8006378:	60f8      	str	r0, [r7, #12]
 800637a:	60b9      	str	r1, [r7, #8]
 800637c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800637e:	2300      	movs	r3, #0
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	e009      	b.n	8006398 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	60ba      	str	r2, [r7, #8]
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	4618      	mov	r0, r3
 800638e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	3301      	adds	r3, #1
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	697a      	ldr	r2, [r7, #20]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	429a      	cmp	r2, r3
 800639e:	dbf1      	blt.n	8006384 <_write+0x12>
  }
  return len;
 80063a0:	687b      	ldr	r3, [r7, #4]
}
 80063a2:	4618      	mov	r0, r3
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}

080063aa <_close>:

int _close(int file)
{
 80063aa:	b480      	push	{r7}
 80063ac:	b083      	sub	sp, #12
 80063ae:	af00      	add	r7, sp, #0
 80063b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80063b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063d2:	605a      	str	r2, [r3, #4]
  return 0;
 80063d4:	2300      	movs	r3, #0
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	370c      	adds	r7, #12
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr

080063e2 <_isatty>:

int _isatty(int file)
{
 80063e2:	b480      	push	{r7}
 80063e4:	b083      	sub	sp, #12
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80063ea:	2301      	movs	r3, #1
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b085      	sub	sp, #20
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
	...

08006414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800641c:	4a14      	ldr	r2, [pc, #80]	; (8006470 <_sbrk+0x5c>)
 800641e:	4b15      	ldr	r3, [pc, #84]	; (8006474 <_sbrk+0x60>)
 8006420:	1ad3      	subs	r3, r2, r3
 8006422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006428:	4b13      	ldr	r3, [pc, #76]	; (8006478 <_sbrk+0x64>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d102      	bne.n	8006436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006430:	4b11      	ldr	r3, [pc, #68]	; (8006478 <_sbrk+0x64>)
 8006432:	4a12      	ldr	r2, [pc, #72]	; (800647c <_sbrk+0x68>)
 8006434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006436:	4b10      	ldr	r3, [pc, #64]	; (8006478 <_sbrk+0x64>)
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4413      	add	r3, r2
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	429a      	cmp	r2, r3
 8006442:	d207      	bcs.n	8006454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006444:	f004 f976 	bl	800a734 <__errno>
 8006448:	4603      	mov	r3, r0
 800644a:	220c      	movs	r2, #12
 800644c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800644e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006452:	e009      	b.n	8006468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006454:	4b08      	ldr	r3, [pc, #32]	; (8006478 <_sbrk+0x64>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800645a:	4b07      	ldr	r3, [pc, #28]	; (8006478 <_sbrk+0x64>)
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4413      	add	r3, r2
 8006462:	4a05      	ldr	r2, [pc, #20]	; (8006478 <_sbrk+0x64>)
 8006464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006466:	68fb      	ldr	r3, [r7, #12]
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}
 8006470:	20008000 	.word	0x20008000
 8006474:	00000400 	.word	0x00000400
 8006478:	2000070c 	.word	0x2000070c
 800647c:	20000868 	.word	0x20000868

08006480 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006480:	b480      	push	{r7}
 8006482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006484:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <SystemInit+0x20>)
 8006486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800648a:	4a05      	ldr	r2, [pc, #20]	; (80064a0 <SystemInit+0x20>)
 800648c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006494:	bf00      	nop
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	e000ed00 	.word	0xe000ed00

080064a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80064a4:	480d      	ldr	r0, [pc, #52]	; (80064dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80064a6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80064a8:	f7ff ffea 	bl	8006480 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80064ac:	480c      	ldr	r0, [pc, #48]	; (80064e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80064ae:	490d      	ldr	r1, [pc, #52]	; (80064e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80064b0:	4a0d      	ldr	r2, [pc, #52]	; (80064e8 <LoopForever+0xe>)
  movs r3, #0
 80064b2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80064b4:	e002      	b.n	80064bc <LoopCopyDataInit>

080064b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064ba:	3304      	adds	r3, #4

080064bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064c0:	d3f9      	bcc.n	80064b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064c2:	4a0a      	ldr	r2, [pc, #40]	; (80064ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80064c4:	4c0a      	ldr	r4, [pc, #40]	; (80064f0 <LoopForever+0x16>)
  movs r3, #0
 80064c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064c8:	e001      	b.n	80064ce <LoopFillZerobss>

080064ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064cc:	3204      	adds	r2, #4

080064ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064d0:	d3fb      	bcc.n	80064ca <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80064d2:	f004 f935 	bl	800a740 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80064d6:	f7fb fec5 	bl	8002264 <main>

080064da <LoopForever>:

LoopForever:
    b LoopForever
 80064da:	e7fe      	b.n	80064da <LoopForever>
  ldr   r0, =_estack
 80064dc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80064e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064e4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80064e8:	0800b4e8 	.word	0x0800b4e8
  ldr r2, =_sbss
 80064ec:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80064f0:	20000864 	.word	0x20000864

080064f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80064f4:	e7fe      	b.n	80064f4 <ADC1_2_IRQHandler>

080064f6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b082      	sub	sp, #8
 80064fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006500:	2003      	movs	r0, #3
 8006502:	f000 f939 	bl	8006778 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006506:	200f      	movs	r0, #15
 8006508:	f000 f80e 	bl	8006528 <HAL_InitTick>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	71fb      	strb	r3, [r7, #7]
 8006516:	e001      	b.n	800651c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006518:	f7ff fd38 	bl	8005f8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800651c:	79fb      	ldrb	r3, [r7, #7]

}
 800651e:	4618      	mov	r0, r3
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006534:	4b16      	ldr	r3, [pc, #88]	; (8006590 <HAL_InitTick+0x68>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d022      	beq.n	8006582 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800653c:	4b15      	ldr	r3, [pc, #84]	; (8006594 <HAL_InitTick+0x6c>)
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	4b13      	ldr	r3, [pc, #76]	; (8006590 <HAL_InitTick+0x68>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006548:	fbb1 f3f3 	udiv	r3, r1, r3
 800654c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006550:	4618      	mov	r0, r3
 8006552:	f000 f944 	bl	80067de <HAL_SYSTICK_Config>
 8006556:	4603      	mov	r3, r0
 8006558:	2b00      	cmp	r3, #0
 800655a:	d10f      	bne.n	800657c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2b0f      	cmp	r3, #15
 8006560:	d809      	bhi.n	8006576 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006562:	2200      	movs	r2, #0
 8006564:	6879      	ldr	r1, [r7, #4]
 8006566:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800656a:	f000 f910 	bl	800678e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800656e:	4a0a      	ldr	r2, [pc, #40]	; (8006598 <HAL_InitTick+0x70>)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6013      	str	r3, [r2, #0]
 8006574:	e007      	b.n	8006586 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	73fb      	strb	r3, [r7, #15]
 800657a:	e004      	b.n	8006586 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	73fb      	strb	r3, [r7, #15]
 8006580:	e001      	b.n	8006586 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006586:	7bfb      	ldrb	r3, [r7, #15]
}
 8006588:	4618      	mov	r0, r3
 800658a:	3710      	adds	r7, #16
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}
 8006590:	20000008 	.word	0x20000008
 8006594:	20000000 	.word	0x20000000
 8006598:	20000004 	.word	0x20000004

0800659c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80065a0:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <HAL_IncTick+0x1c>)
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	4b05      	ldr	r3, [pc, #20]	; (80065bc <HAL_IncTick+0x20>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4413      	add	r3, r2
 80065aa:	4a03      	ldr	r2, [pc, #12]	; (80065b8 <HAL_IncTick+0x1c>)
 80065ac:	6013      	str	r3, [r2, #0]
}
 80065ae:	bf00      	nop
 80065b0:	46bd      	mov	sp, r7
 80065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b6:	4770      	bx	lr
 80065b8:	20000710 	.word	0x20000710
 80065bc:	20000008 	.word	0x20000008

080065c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065c0:	b480      	push	{r7}
 80065c2:	af00      	add	r7, sp, #0
  return uwTick;
 80065c4:	4b03      	ldr	r3, [pc, #12]	; (80065d4 <HAL_GetTick+0x14>)
 80065c6:	681b      	ldr	r3, [r3, #0]
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	20000710 	.word	0x20000710

080065d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065d8:	b480      	push	{r7}
 80065da:	b085      	sub	sp, #20
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f003 0307 	and.w	r3, r3, #7
 80065e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80065e8:	4b0c      	ldr	r3, [pc, #48]	; (800661c <__NVIC_SetPriorityGrouping+0x44>)
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80065f4:	4013      	ands	r3, r2
 80065f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800660a:	4a04      	ldr	r2, [pc, #16]	; (800661c <__NVIC_SetPriorityGrouping+0x44>)
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	60d3      	str	r3, [r2, #12]
}
 8006610:	bf00      	nop
 8006612:	3714      	adds	r7, #20
 8006614:	46bd      	mov	sp, r7
 8006616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661a:	4770      	bx	lr
 800661c:	e000ed00 	.word	0xe000ed00

08006620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006620:	b480      	push	{r7}
 8006622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006624:	4b04      	ldr	r3, [pc, #16]	; (8006638 <__NVIC_GetPriorityGrouping+0x18>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	0a1b      	lsrs	r3, r3, #8
 800662a:	f003 0307 	and.w	r3, r3, #7
}
 800662e:	4618      	mov	r0, r3
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr
 8006638:	e000ed00 	.word	0xe000ed00

0800663c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	4603      	mov	r3, r0
 8006644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800664a:	2b00      	cmp	r3, #0
 800664c:	db0b      	blt.n	8006666 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800664e:	79fb      	ldrb	r3, [r7, #7]
 8006650:	f003 021f 	and.w	r2, r3, #31
 8006654:	4907      	ldr	r1, [pc, #28]	; (8006674 <__NVIC_EnableIRQ+0x38>)
 8006656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800665a:	095b      	lsrs	r3, r3, #5
 800665c:	2001      	movs	r0, #1
 800665e:	fa00 f202 	lsl.w	r2, r0, r2
 8006662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	e000e100 	.word	0xe000e100

08006678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	6039      	str	r1, [r7, #0]
 8006682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006688:	2b00      	cmp	r3, #0
 800668a:	db0a      	blt.n	80066a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	b2da      	uxtb	r2, r3
 8006690:	490c      	ldr	r1, [pc, #48]	; (80066c4 <__NVIC_SetPriority+0x4c>)
 8006692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006696:	0112      	lsls	r2, r2, #4
 8006698:	b2d2      	uxtb	r2, r2
 800669a:	440b      	add	r3, r1
 800669c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066a0:	e00a      	b.n	80066b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	b2da      	uxtb	r2, r3
 80066a6:	4908      	ldr	r1, [pc, #32]	; (80066c8 <__NVIC_SetPriority+0x50>)
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	f003 030f 	and.w	r3, r3, #15
 80066ae:	3b04      	subs	r3, #4
 80066b0:	0112      	lsls	r2, r2, #4
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	440b      	add	r3, r1
 80066b6:	761a      	strb	r2, [r3, #24]
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr
 80066c4:	e000e100 	.word	0xe000e100
 80066c8:	e000ed00 	.word	0xe000ed00

080066cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b089      	sub	sp, #36	; 0x24
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	f003 0307 	and.w	r3, r3, #7
 80066de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f1c3 0307 	rsb	r3, r3, #7
 80066e6:	2b04      	cmp	r3, #4
 80066e8:	bf28      	it	cs
 80066ea:	2304      	movcs	r3, #4
 80066ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	3304      	adds	r3, #4
 80066f2:	2b06      	cmp	r3, #6
 80066f4:	d902      	bls.n	80066fc <NVIC_EncodePriority+0x30>
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	3b03      	subs	r3, #3
 80066fa:	e000      	b.n	80066fe <NVIC_EncodePriority+0x32>
 80066fc:	2300      	movs	r3, #0
 80066fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	fa02 f303 	lsl.w	r3, r2, r3
 800670a:	43da      	mvns	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	401a      	ands	r2, r3
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	fa01 f303 	lsl.w	r3, r1, r3
 800671e:	43d9      	mvns	r1, r3
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006724:	4313      	orrs	r3, r2
         );
}
 8006726:	4618      	mov	r0, r3
 8006728:	3724      	adds	r7, #36	; 0x24
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
	...

08006734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3b01      	subs	r3, #1
 8006740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006744:	d301      	bcc.n	800674a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006746:	2301      	movs	r3, #1
 8006748:	e00f      	b.n	800676a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800674a:	4a0a      	ldr	r2, [pc, #40]	; (8006774 <SysTick_Config+0x40>)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3b01      	subs	r3, #1
 8006750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006752:	210f      	movs	r1, #15
 8006754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006758:	f7ff ff8e 	bl	8006678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800675c:	4b05      	ldr	r3, [pc, #20]	; (8006774 <SysTick_Config+0x40>)
 800675e:	2200      	movs	r2, #0
 8006760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006762:	4b04      	ldr	r3, [pc, #16]	; (8006774 <SysTick_Config+0x40>)
 8006764:	2207      	movs	r2, #7
 8006766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006768:	2300      	movs	r3, #0
}
 800676a:	4618      	mov	r0, r3
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	e000e010 	.word	0xe000e010

08006778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f7ff ff29 	bl	80065d8 <__NVIC_SetPriorityGrouping>
}
 8006786:	bf00      	nop
 8006788:	3708      	adds	r7, #8
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800678e:	b580      	push	{r7, lr}
 8006790:	b086      	sub	sp, #24
 8006792:	af00      	add	r7, sp, #0
 8006794:	4603      	mov	r3, r0
 8006796:	60b9      	str	r1, [r7, #8]
 8006798:	607a      	str	r2, [r7, #4]
 800679a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800679c:	f7ff ff40 	bl	8006620 <__NVIC_GetPriorityGrouping>
 80067a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	68b9      	ldr	r1, [r7, #8]
 80067a6:	6978      	ldr	r0, [r7, #20]
 80067a8:	f7ff ff90 	bl	80066cc <NVIC_EncodePriority>
 80067ac:	4602      	mov	r2, r0
 80067ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067b2:	4611      	mov	r1, r2
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7ff ff5f 	bl	8006678 <__NVIC_SetPriority>
}
 80067ba:	bf00      	nop
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	4603      	mov	r3, r0
 80067ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7ff ff33 	bl	800663c <__NVIC_EnableIRQ>
}
 80067d6:	bf00      	nop
 80067d8:	3708      	adds	r7, #8
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7ff ffa4 	bl	8006734 <SysTick_Config>
 80067ec:	4603      	mov	r3, r0
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3708      	adds	r7, #8
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
	...

080067f8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	e147      	b.n	8006a9a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006810:	b2db      	uxtb	r3, r3
 8006812:	2b00      	cmp	r3, #0
 8006814:	d106      	bne.n	8006824 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff fbd8 	bl	8005fd4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699a      	ldr	r2, [r3, #24]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f022 0210 	bic.w	r2, r2, #16
 8006832:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006834:	f7ff fec4 	bl	80065c0 <HAL_GetTick>
 8006838:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800683a:	e012      	b.n	8006862 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800683c:	f7ff fec0 	bl	80065c0 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b0a      	cmp	r3, #10
 8006848:	d90b      	bls.n	8006862 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800684e:	f043 0201 	orr.w	r2, r3, #1
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2203      	movs	r2, #3
 800685a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e11b      	b.n	8006a9a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b08      	cmp	r3, #8
 800686e:	d0e5      	beq.n	800683c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699a      	ldr	r2, [r3, #24]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f042 0201 	orr.w	r2, r2, #1
 800687e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006880:	f7ff fe9e 	bl	80065c0 <HAL_GetTick>
 8006884:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006886:	e012      	b.n	80068ae <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006888:	f7ff fe9a 	bl	80065c0 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b0a      	cmp	r3, #10
 8006894:	d90b      	bls.n	80068ae <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689a:	f043 0201 	orr.w	r2, r3, #1
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2203      	movs	r2, #3
 80068a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e0f5      	b.n	8006a9a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d0e5      	beq.n	8006888 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699a      	ldr	r2, [r3, #24]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0202 	orr.w	r2, r2, #2
 80068ca:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4a74      	ldr	r2, [pc, #464]	; (8006aa4 <HAL_FDCAN_Init+0x2ac>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d103      	bne.n	80068de <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80068d6:	4a74      	ldr	r2, [pc, #464]	; (8006aa8 <HAL_FDCAN_Init+0x2b0>)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	7c1b      	ldrb	r3, [r3, #16]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d108      	bne.n	80068f8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	699a      	ldr	r2, [r3, #24]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f4:	619a      	str	r2, [r3, #24]
 80068f6:	e007      	b.n	8006908 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	699a      	ldr	r2, [r3, #24]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006906:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	7c5b      	ldrb	r3, [r3, #17]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d108      	bne.n	8006922 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699a      	ldr	r2, [r3, #24]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800691e:	619a      	str	r2, [r3, #24]
 8006920:	e007      	b.n	8006932 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	699a      	ldr	r2, [r3, #24]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006930:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	7c9b      	ldrb	r3, [r3, #18]
 8006936:	2b01      	cmp	r3, #1
 8006938:	d108      	bne.n	800694c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	699a      	ldr	r2, [r3, #24]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006948:	619a      	str	r2, [r3, #24]
 800694a:	e007      	b.n	800695c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	699a      	ldr	r2, [r3, #24]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800695a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699a      	ldr	r2, [r3, #24]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006980:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0210 	bic.w	r2, r2, #16
 8006990:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	2b01      	cmp	r3, #1
 8006998:	d108      	bne.n	80069ac <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699a      	ldr	r2, [r3, #24]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f042 0204 	orr.w	r2, r2, #4
 80069a8:	619a      	str	r2, [r3, #24]
 80069aa:	e02c      	b.n	8006a06 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d028      	beq.n	8006a06 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d01c      	beq.n	80069f6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	699a      	ldr	r2, [r3, #24]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069ca:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0210 	orr.w	r2, r2, #16
 80069da:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68db      	ldr	r3, [r3, #12]
 80069e0:	2b03      	cmp	r3, #3
 80069e2:	d110      	bne.n	8006a06 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	699a      	ldr	r2, [r3, #24]
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f042 0220 	orr.w	r2, r2, #32
 80069f2:	619a      	str	r2, [r3, #24]
 80069f4:	e007      	b.n	8006a06 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	699a      	ldr	r2, [r3, #24]
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f042 0220 	orr.w	r2, r2, #32
 8006a04:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	699b      	ldr	r3, [r3, #24]
 8006a0a:	3b01      	subs	r3, #1
 8006a0c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	69db      	ldr	r3, [r3, #28]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a16:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a1b      	ldr	r3, [r3, #32]
 8006a1c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006a1e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	3b01      	subs	r3, #1
 8006a28:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006a2e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a30:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a3a:	d115      	bne.n	8006a68 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a40:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a46:	3b01      	subs	r3, #1
 8006a48:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a4a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a50:	3b01      	subs	r3, #1
 8006a52:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a54:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5c:	3b01      	subs	r3, #1
 8006a5e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a64:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a66:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fbfc 	bl	800727c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3710      	adds	r7, #16
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	40006400 	.word	0x40006400
 8006aa8:	40006500 	.word	0x40006500

08006aac <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006aba:	b2db      	uxtb	r3, r3
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	d110      	bne.n	8006ae2 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2202      	movs	r2, #2
 8006ac4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0201 	bic.w	r2, r2, #1
 8006ad6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	e006      	b.n	8006af0 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ae6:	f043 0204 	orr.w	r2, r3, #4
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
  }
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	60b9      	str	r1, [r7, #8]
 8006b06:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d12c      	bne.n	8006b6e <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006b1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d007      	beq.n	8006b34 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b28:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e023      	b.n	8006b7c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006b3c:	0c1b      	lsrs	r3, r3, #16
 8006b3e:	f003 0303 	and.w	r3, r3, #3
 8006b42:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	687a      	ldr	r2, [r7, #4]
 8006b48:	68b9      	ldr	r1, [r7, #8]
 8006b4a:	68f8      	ldr	r0, [r7, #12]
 8006b4c:	f000 fbec 	bl	8007328 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2101      	movs	r1, #1
 8006b56:	697a      	ldr	r2, [r7, #20]
 8006b58:	fa01 f202 	lsl.w	r2, r1, r2
 8006b5c:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006b60:	2201      	movs	r2, #1
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	409a      	lsls	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	e006      	b.n	8006b7c <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b72:	f043 0208 	orr.w	r2, r3, #8
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
  }
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3718      	adds	r7, #24
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b08b      	sub	sp, #44	; 0x2c
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006b92:	2300      	movs	r3, #0
 8006b94:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b9c:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006b9e:	7efb      	ldrb	r3, [r7, #27]
 8006ba0:	2b02      	cmp	r3, #2
 8006ba2:	f040 80e8 	bne.w	8006d76 <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	2b40      	cmp	r3, #64	; 0x40
 8006baa:	d137      	bne.n	8006c1c <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb4:	f003 030f 	and.w	r3, r3, #15
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d107      	bne.n	8006bcc <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e0db      	b.n	8006d84 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd4:	0e1b      	lsrs	r3, r3, #24
 8006bd6:	f003 0301 	and.w	r3, r3, #1
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d10a      	bne.n	8006bf4 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006be6:	0a5b      	lsrs	r3, r3, #9
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d101      	bne.n	8006bf4 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfc:	0a1b      	lsrs	r3, r3, #8
 8006bfe:	f003 0303 	and.w	r3, r3, #3
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	4413      	add	r3, r2
 8006c06:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006c0c:	69fa      	ldr	r2, [r7, #28]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	00db      	lsls	r3, r3, #3
 8006c12:	4413      	add	r3, r2
 8006c14:	00db      	lsls	r3, r3, #3
 8006c16:	440b      	add	r3, r1
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1a:	e036      	b.n	8006c8a <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c24:	f003 030f 	and.w	r3, r3, #15
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d107      	bne.n	8006c3c <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e0a3      	b.n	8006d84 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c44:	0e1b      	lsrs	r3, r3, #24
 8006c46:	f003 0301 	and.w	r3, r3, #1
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d10a      	bne.n	8006c64 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c56:	0a1b      	lsrs	r3, r3, #8
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d101      	bne.n	8006c64 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006c60:	2301      	movs	r3, #1
 8006c62:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c6c:	0a1b      	lsrs	r3, r3, #8
 8006c6e:	f003 0303 	and.w	r3, r3, #3
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	4413      	add	r3, r2
 8006c76:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006c7c:	69fa      	ldr	r2, [r7, #28]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	4413      	add	r3, r2
 8006c84:	00db      	lsls	r3, r3, #3
 8006c86:	440b      	add	r3, r1
 8006c88:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d107      	bne.n	8006cae <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	0c9b      	lsrs	r3, r3, #18
 8006ca4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	601a      	str	r2, [r3, #0]
 8006cac:	e005      	b.n	8006cba <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	0c1b      	lsrs	r3, r3, #16
 8006ce8:	f003 020f 	and.w	r2, r3, #15
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	0e1b      	lsrs	r3, r3, #24
 8006d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	0fda      	lsrs	r2, r3, #31
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	3304      	adds	r3, #4
 8006d24:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d28:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	623b      	str	r3, [r7, #32]
 8006d2e:	e00a      	b.n	8006d46 <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006d30:	697a      	ldr	r2, [r7, #20]
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	441a      	add	r2, r3
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6a3b      	ldr	r3, [r7, #32]
 8006d3a:	440b      	add	r3, r1
 8006d3c:	7812      	ldrb	r2, [r2, #0]
 8006d3e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006d40:	6a3b      	ldr	r3, [r7, #32]
 8006d42:	3301      	adds	r3, #1
 8006d44:	623b      	str	r3, [r7, #32]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	4a11      	ldr	r2, [pc, #68]	; (8006d90 <HAL_FDCAN_GetRxMessage+0x20c>)
 8006d4c:	5cd3      	ldrb	r3, [r2, r3]
 8006d4e:	461a      	mov	r2, r3
 8006d50:	6a3b      	ldr	r3, [r7, #32]
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d3ec      	bcc.n	8006d30 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	2b40      	cmp	r3, #64	; 0x40
 8006d5a:	d105      	bne.n	8006d68 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8006d66:	e004      	b.n	8006d72 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006d72:	2300      	movs	r3, #0
 8006d74:	e006      	b.n	8006d84 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d7a:	f043 0208 	orr.w	r2, r3, #8
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
  }
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	372c      	adds	r7, #44	; 0x2c
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	0800b450 	.word	0x0800b450

08006d94 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006da6:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006da8:	7dfb      	ldrb	r3, [r7, #23]
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d003      	beq.n	8006db6 <HAL_FDCAN_ActivateNotification+0x22>
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	f040 80c8 	bne.w	8006f46 <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbc:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d004      	beq.n	8006dd2 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d03b      	beq.n	8006e4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f003 0302 	and.w	r3, r3, #2
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d031      	beq.n	8006e4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d004      	beq.n	8006dfa <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f003 0304 	and.w	r3, r3, #4
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d027      	beq.n	8006e4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d004      	beq.n	8006e0e <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	f003 0308 	and.w	r3, r3, #8
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d01d      	beq.n	8006e4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d004      	beq.n	8006e22 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f003 0310 	and.w	r3, r3, #16
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d013      	beq.n	8006e4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d004      	beq.n	8006e36 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d009      	beq.n	8006e4a <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00c      	beq.n	8006e5a <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d107      	bne.n	8006e5a <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f042 0201 	orr.w	r2, r2, #1
 8006e58:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f003 0301 	and.w	r3, r3, #1
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d13b      	bne.n	8006ee6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d004      	beq.n	8006e82 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f003 0302 	and.w	r3, r3, #2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d131      	bne.n	8006ee6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d004      	beq.n	8006e96 <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f003 0304 	and.w	r3, r3, #4
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d127      	bne.n	8006ee6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d004      	beq.n	8006eaa <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	f003 0308 	and.w	r3, r3, #8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d11d      	bne.n	8006ee6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d004      	beq.n	8006ebe <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f003 0310 	and.w	r3, r3, #16
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d113      	bne.n	8006ee6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d004      	beq.n	8006ed2 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f003 0320 	and.w	r3, r3, #32
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d00c      	beq.n	8006ef6 <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f042 0202 	orr.w	r2, r2, #2
 8006ef4:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	430a      	orrs	r2, r1
 8006f10:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d009      	beq.n	8006f32 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	687a      	ldr	r2, [r7, #4]
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68ba      	ldr	r2, [r7, #8]
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e006      	b.n	8006f54 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f4a:	f043 0202 	orr.w	r2, r3, #2
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006f52:	2301      	movs	r3, #1
  }
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	371c      	adds	r7, #28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b08c      	sub	sp, #48	; 0x30
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f86:	f003 0307 	and.w	r3, r3, #7
 8006f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f94:	4013      	ands	r3, r2
 8006f96:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fac:	4013      	ands	r3, r2
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fb6:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8006fba:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fc2:	6a3a      	ldr	r2, [r7, #32]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fce:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8006fd2:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fda:	69fa      	ldr	r2, [r7, #28]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe6:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fee:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00b      	beq.n	8007012 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	d006      	beq.n	8007012 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2240      	movs	r2, #64	; 0x40
 800700a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 f916 	bl	800723e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007018:	2b00      	cmp	r3, #0
 800701a:	d019      	beq.n	8007050 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007022:	2b00      	cmp	r3, #0
 8007024:	d014      	beq.n	8007050 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800702e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	4013      	ands	r3, r2
 800703c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007046:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007048:	6939      	ldr	r1, [r7, #16]
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f8d8 	bl	8007200 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	2b00      	cmp	r3, #0
 8007054:	d007      	beq.n	8007066 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800705c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800705e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f000 f8a2 	bl	80071aa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007072:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007074:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7fa fea2 	bl	8001dc0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 800707c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707e:	2b00      	cmp	r3, #0
 8007080:	d007      	beq.n	8007092 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007088:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800708a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f897 	bl	80071c0 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00c      	beq.n	80070b6 <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 800709c:	69bb      	ldr	r3, [r7, #24]
 800709e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d007      	beq.n	80070b6 <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070ae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f890 	bl	80071d6 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d018      	beq.n	80070f2 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d013      	beq.n	80070f2 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80070d2:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80070dc:	68fa      	ldr	r2, [r7, #12]
 80070de:	4013      	ands	r3, r2
 80070e0:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2280      	movs	r2, #128	; 0x80
 80070e8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80070ea:	68f9      	ldr	r1, [r7, #12]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f87c 	bl	80071ea <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00c      	beq.n	8007116 <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80070fc:	69bb      	ldr	r3, [r7, #24]
 80070fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d007      	beq.n	8007116 <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800710e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 f880 	bl	8007216 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800711c:	2b00      	cmp	r3, #0
 800711e:	d00c      	beq.n	800713a <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007120:	69bb      	ldr	r3, [r7, #24]
 8007122:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007126:	2b00      	cmp	r3, #0
 8007128:	d007      	beq.n	800713a <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007132:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f878 	bl	800722a <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d00f      	beq.n	8007164 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007156:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800715c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69fa      	ldr	r2, [r7, #28]
 8007170:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007172:	69f9      	ldr	r1, [r7, #28]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f876 	bl	8007266 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d009      	beq.n	8007194 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	6a3a      	ldr	r2, [r7, #32]
 8007186:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	431a      	orrs	r2, r3
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 f858 	bl	8007252 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80071a2:	bf00      	nop
 80071a4:	3730      	adds	r7, #48	; 0x30
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80071b4:	bf00      	nop
 80071b6:	370c      	adds	r7, #12
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b083      	sub	sp, #12
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80071ca:	bf00      	nop
 80071cc:	370c      	adds	r7, #12
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80071d6:	b480      	push	{r7}
 80071d8:	b083      	sub	sp, #12
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80071de:	bf00      	nop
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
 80071f2:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80071f4:	bf00      	nop
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007200:	b480      	push	{r7}
 8007202:	b083      	sub	sp, #12
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr

08007216 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007216:	b480      	push	{r7}
 8007218:	b083      	sub	sp, #12
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800721e:	bf00      	nop
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800722a:	b480      	push	{r7}
 800722c:	b083      	sub	sp, #12
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8007232:	bf00      	nop
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007246:	bf00      	nop
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr

08007252 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800725a:	bf00      	nop
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
 800726e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007284:	4b27      	ldr	r3, [pc, #156]	; (8007324 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007286:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68ba      	ldr	r2, [r7, #8]
 800728c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007296:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800729e:	041a      	lsls	r2, r3, #16
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	430a      	orrs	r2, r1
 80072a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072bc:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072c4:	061a      	lsls	r2, r3, #24
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	430a      	orrs	r2, r1
 80072cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f503 7218 	add.w	r2, r3, #608	; 0x260
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f503 721e 	add.w	r2, r3, #632	; 0x278
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	e005      	b.n	800730a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3304      	adds	r3, #4
 8007308:	60fb      	str	r3, [r7, #12]
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	429a      	cmp	r2, r3
 8007314:	d3f3      	bcc.n	80072fe <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8007316:	bf00      	nop
 8007318:	bf00      	nop
 800731a:	3714      	adds	r7, #20
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr
 8007324:	4000a400 	.word	0x4000a400

08007328 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8007328:	b480      	push	{r7}
 800732a:	b089      	sub	sp, #36	; 0x24
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
 8007334:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d10a      	bne.n	8007354 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007346:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800734e:	4313      	orrs	r3, r2
 8007350:	61fb      	str	r3, [r7, #28]
 8007352:	e00a      	b.n	800736a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800735c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007362:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007368:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007374:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800737a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8007380:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007388:	4313      	orrs	r3, r2
 800738a:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	4613      	mov	r3, r2
 8007394:	00db      	lsls	r3, r3, #3
 8007396:	4413      	add	r3, r2
 8007398:	00db      	lsls	r3, r3, #3
 800739a:	440b      	add	r3, r1
 800739c:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	69fa      	ldr	r2, [r7, #28]
 80073a2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	3304      	adds	r3, #4
 80073a8:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	3304      	adds	r3, #4
 80073b4:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80073b6:	2300      	movs	r3, #0
 80073b8:	617b      	str	r3, [r7, #20]
 80073ba:	e020      	b.n	80073fe <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	3303      	adds	r3, #3
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	4413      	add	r3, r2
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	3302      	adds	r3, #2
 80073cc:	6879      	ldr	r1, [r7, #4]
 80073ce:	440b      	add	r3, r1
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80073d4:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	3301      	adds	r3, #1
 80073da:	6879      	ldr	r1, [r7, #4]
 80073dc:	440b      	add	r3, r1
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80073e2:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	440a      	add	r2, r1
 80073ea:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80073ec:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	3304      	adds	r3, #4
 80073f6:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	3304      	adds	r3, #4
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	4a06      	ldr	r2, [pc, #24]	; (800741c <FDCAN_CopyMessageToRAM+0xf4>)
 8007404:	5cd3      	ldrb	r3, [r2, r3]
 8007406:	461a      	mov	r2, r3
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	4293      	cmp	r3, r2
 800740c:	d3d6      	bcc.n	80073bc <FDCAN_CopyMessageToRAM+0x94>
  }
}
 800740e:	bf00      	nop
 8007410:	bf00      	nop
 8007412:	3724      	adds	r7, #36	; 0x24
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr
 800741c:	0800b450 	.word	0x0800b450

08007420 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800742a:	2300      	movs	r3, #0
 800742c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800742e:	e15a      	b.n	80076e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	2101      	movs	r1, #1
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	fa01 f303 	lsl.w	r3, r1, r3
 800743c:	4013      	ands	r3, r2
 800743e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2b00      	cmp	r3, #0
 8007444:	f000 814c 	beq.w	80076e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	f003 0303 	and.w	r3, r3, #3
 8007450:	2b01      	cmp	r3, #1
 8007452:	d005      	beq.n	8007460 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800745c:	2b02      	cmp	r3, #2
 800745e:	d130      	bne.n	80074c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	2203      	movs	r2, #3
 800746c:	fa02 f303 	lsl.w	r3, r2, r3
 8007470:	43db      	mvns	r3, r3
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	4013      	ands	r3, r2
 8007476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	68da      	ldr	r2, [r3, #12]
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	005b      	lsls	r3, r3, #1
 8007480:	fa02 f303 	lsl.w	r3, r2, r3
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	693a      	ldr	r2, [r7, #16]
 800748e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007496:	2201      	movs	r2, #1
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	43db      	mvns	r3, r3
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	4013      	ands	r3, r2
 80074a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	091b      	lsrs	r3, r3, #4
 80074ac:	f003 0201 	and.w	r2, r3, #1
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	fa02 f303 	lsl.w	r3, r2, r3
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	693a      	ldr	r2, [r7, #16]
 80074c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	f003 0303 	and.w	r3, r3, #3
 80074ca:	2b03      	cmp	r3, #3
 80074cc:	d017      	beq.n	80074fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	2203      	movs	r2, #3
 80074da:	fa02 f303 	lsl.w	r3, r2, r3
 80074de:	43db      	mvns	r3, r3
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	4013      	ands	r3, r2
 80074e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	689a      	ldr	r2, [r3, #8]
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	fa02 f303 	lsl.w	r3, r2, r3
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	4313      	orrs	r3, r2
 80074f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	2b02      	cmp	r3, #2
 8007508:	d123      	bne.n	8007552 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	08da      	lsrs	r2, r3, #3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3208      	adds	r2, #8
 8007512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007516:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	220f      	movs	r2, #15
 8007522:	fa02 f303 	lsl.w	r3, r2, r3
 8007526:	43db      	mvns	r3, r3
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	4013      	ands	r3, r2
 800752c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	691a      	ldr	r2, [r3, #16]
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	f003 0307 	and.w	r3, r3, #7
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	fa02 f303 	lsl.w	r3, r2, r3
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	4313      	orrs	r3, r2
 8007542:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	08da      	lsrs	r2, r3, #3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	3208      	adds	r2, #8
 800754c:	6939      	ldr	r1, [r7, #16]
 800754e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007558:	697b      	ldr	r3, [r7, #20]
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	2203      	movs	r2, #3
 800755e:	fa02 f303 	lsl.w	r3, r2, r3
 8007562:	43db      	mvns	r3, r3
 8007564:	693a      	ldr	r2, [r7, #16]
 8007566:	4013      	ands	r3, r2
 8007568:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	f003 0203 	and.w	r2, r3, #3
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	005b      	lsls	r3, r3, #1
 8007576:	fa02 f303 	lsl.w	r3, r2, r3
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	4313      	orrs	r3, r2
 800757e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	693a      	ldr	r2, [r7, #16]
 8007584:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800758e:	2b00      	cmp	r3, #0
 8007590:	f000 80a6 	beq.w	80076e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007594:	4b5b      	ldr	r3, [pc, #364]	; (8007704 <HAL_GPIO_Init+0x2e4>)
 8007596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007598:	4a5a      	ldr	r2, [pc, #360]	; (8007704 <HAL_GPIO_Init+0x2e4>)
 800759a:	f043 0301 	orr.w	r3, r3, #1
 800759e:	6613      	str	r3, [r2, #96]	; 0x60
 80075a0:	4b58      	ldr	r3, [pc, #352]	; (8007704 <HAL_GPIO_Init+0x2e4>)
 80075a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	60bb      	str	r3, [r7, #8]
 80075aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075ac:	4a56      	ldr	r2, [pc, #344]	; (8007708 <HAL_GPIO_Init+0x2e8>)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	089b      	lsrs	r3, r3, #2
 80075b2:	3302      	adds	r3, #2
 80075b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	f003 0303 	and.w	r3, r3, #3
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	220f      	movs	r2, #15
 80075c4:	fa02 f303 	lsl.w	r3, r2, r3
 80075c8:	43db      	mvns	r3, r3
 80075ca:	693a      	ldr	r2, [r7, #16]
 80075cc:	4013      	ands	r3, r2
 80075ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80075d6:	d01f      	beq.n	8007618 <HAL_GPIO_Init+0x1f8>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a4c      	ldr	r2, [pc, #304]	; (800770c <HAL_GPIO_Init+0x2ec>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d019      	beq.n	8007614 <HAL_GPIO_Init+0x1f4>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	4a4b      	ldr	r2, [pc, #300]	; (8007710 <HAL_GPIO_Init+0x2f0>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d013      	beq.n	8007610 <HAL_GPIO_Init+0x1f0>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	4a4a      	ldr	r2, [pc, #296]	; (8007714 <HAL_GPIO_Init+0x2f4>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d00d      	beq.n	800760c <HAL_GPIO_Init+0x1ec>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4a49      	ldr	r2, [pc, #292]	; (8007718 <HAL_GPIO_Init+0x2f8>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d007      	beq.n	8007608 <HAL_GPIO_Init+0x1e8>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a48      	ldr	r2, [pc, #288]	; (800771c <HAL_GPIO_Init+0x2fc>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d101      	bne.n	8007604 <HAL_GPIO_Init+0x1e4>
 8007600:	2305      	movs	r3, #5
 8007602:	e00a      	b.n	800761a <HAL_GPIO_Init+0x1fa>
 8007604:	2306      	movs	r3, #6
 8007606:	e008      	b.n	800761a <HAL_GPIO_Init+0x1fa>
 8007608:	2304      	movs	r3, #4
 800760a:	e006      	b.n	800761a <HAL_GPIO_Init+0x1fa>
 800760c:	2303      	movs	r3, #3
 800760e:	e004      	b.n	800761a <HAL_GPIO_Init+0x1fa>
 8007610:	2302      	movs	r3, #2
 8007612:	e002      	b.n	800761a <HAL_GPIO_Init+0x1fa>
 8007614:	2301      	movs	r3, #1
 8007616:	e000      	b.n	800761a <HAL_GPIO_Init+0x1fa>
 8007618:	2300      	movs	r3, #0
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	f002 0203 	and.w	r2, r2, #3
 8007620:	0092      	lsls	r2, r2, #2
 8007622:	4093      	lsls	r3, r2
 8007624:	693a      	ldr	r2, [r7, #16]
 8007626:	4313      	orrs	r3, r2
 8007628:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800762a:	4937      	ldr	r1, [pc, #220]	; (8007708 <HAL_GPIO_Init+0x2e8>)
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	089b      	lsrs	r3, r3, #2
 8007630:	3302      	adds	r3, #2
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007638:	4b39      	ldr	r3, [pc, #228]	; (8007720 <HAL_GPIO_Init+0x300>)
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	43db      	mvns	r3, r3
 8007642:	693a      	ldr	r2, [r7, #16]
 8007644:	4013      	ands	r3, r2
 8007646:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4313      	orrs	r3, r2
 800765a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800765c:	4a30      	ldr	r2, [pc, #192]	; (8007720 <HAL_GPIO_Init+0x300>)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007662:	4b2f      	ldr	r3, [pc, #188]	; (8007720 <HAL_GPIO_Init+0x300>)
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	43db      	mvns	r3, r3
 800766c:	693a      	ldr	r2, [r7, #16]
 800766e:	4013      	ands	r3, r2
 8007670:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007686:	4a26      	ldr	r2, [pc, #152]	; (8007720 <HAL_GPIO_Init+0x300>)
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800768c:	4b24      	ldr	r3, [pc, #144]	; (8007720 <HAL_GPIO_Init+0x300>)
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	43db      	mvns	r3, r3
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	4013      	ands	r3, r2
 800769a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80076a8:	693a      	ldr	r2, [r7, #16]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80076b0:	4a1b      	ldr	r2, [pc, #108]	; (8007720 <HAL_GPIO_Init+0x300>)
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80076b6:	4b1a      	ldr	r3, [pc, #104]	; (8007720 <HAL_GPIO_Init+0x300>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	43db      	mvns	r3, r3
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4013      	ands	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d003      	beq.n	80076da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80076da:	4a11      	ldr	r2, [pc, #68]	; (8007720 <HAL_GPIO_Init+0x300>)
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	3301      	adds	r3, #1
 80076e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80076e6:	683b      	ldr	r3, [r7, #0]
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	fa22 f303 	lsr.w	r3, r2, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f47f ae9d 	bne.w	8007430 <HAL_GPIO_Init+0x10>
  }
}
 80076f6:	bf00      	nop
 80076f8:	bf00      	nop
 80076fa:	371c      	adds	r7, #28
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	40021000 	.word	0x40021000
 8007708:	40010000 	.word	0x40010000
 800770c:	48000400 	.word	0x48000400
 8007710:	48000800 	.word	0x48000800
 8007714:	48000c00 	.word	0x48000c00
 8007718:	48001000 	.word	0x48001000
 800771c:	48001400 	.word	0x48001400
 8007720:	40010400 	.word	0x40010400

08007724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	460b      	mov	r3, r1
 800772e:	807b      	strh	r3, [r7, #2]
 8007730:	4613      	mov	r3, r2
 8007732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007734:	787b      	ldrb	r3, [r7, #1]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800773a:	887a      	ldrh	r2, [r7, #2]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007740:	e002      	b.n	8007748 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007742:	887a      	ldrh	r2, [r7, #2]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d141      	bne.n	80077e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007762:	4b4b      	ldr	r3, [pc, #300]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800776a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800776e:	d131      	bne.n	80077d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007770:	4b47      	ldr	r3, [pc, #284]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007776:	4a46      	ldr	r2, [pc, #280]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800777c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007780:	4b43      	ldr	r3, [pc, #268]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007788:	4a41      	ldr	r2, [pc, #260]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800778a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800778e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007790:	4b40      	ldr	r3, [pc, #256]	; (8007894 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2232      	movs	r2, #50	; 0x32
 8007796:	fb02 f303 	mul.w	r3, r2, r3
 800779a:	4a3f      	ldr	r2, [pc, #252]	; (8007898 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800779c:	fba2 2303 	umull	r2, r3, r2, r3
 80077a0:	0c9b      	lsrs	r3, r3, #18
 80077a2:	3301      	adds	r3, #1
 80077a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80077a6:	e002      	b.n	80077ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	3b01      	subs	r3, #1
 80077ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80077ae:	4b38      	ldr	r3, [pc, #224]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ba:	d102      	bne.n	80077c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f2      	bne.n	80077a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80077c2:	4b33      	ldr	r3, [pc, #204]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077c4:	695b      	ldr	r3, [r3, #20]
 80077c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ce:	d158      	bne.n	8007882 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80077d0:	2303      	movs	r3, #3
 80077d2:	e057      	b.n	8007884 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80077d4:	4b2e      	ldr	r3, [pc, #184]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077da:	4a2d      	ldr	r2, [pc, #180]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80077e4:	e04d      	b.n	8007882 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80077ec:	d141      	bne.n	8007872 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80077ee:	4b28      	ldr	r3, [pc, #160]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80077f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077fa:	d131      	bne.n	8007860 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80077fc:	4b24      	ldr	r3, [pc, #144]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80077fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007802:	4a23      	ldr	r2, [pc, #140]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007808:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800780c:	4b20      	ldr	r3, [pc, #128]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007814:	4a1e      	ldr	r2, [pc, #120]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800781a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800781c:	4b1d      	ldr	r3, [pc, #116]	; (8007894 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2232      	movs	r2, #50	; 0x32
 8007822:	fb02 f303 	mul.w	r3, r2, r3
 8007826:	4a1c      	ldr	r2, [pc, #112]	; (8007898 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007828:	fba2 2303 	umull	r2, r3, r2, r3
 800782c:	0c9b      	lsrs	r3, r3, #18
 800782e:	3301      	adds	r3, #1
 8007830:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007832:	e002      	b.n	800783a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	3b01      	subs	r3, #1
 8007838:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800783a:	4b15      	ldr	r3, [pc, #84]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800783c:	695b      	ldr	r3, [r3, #20]
 800783e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007842:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007846:	d102      	bne.n	800784e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1f2      	bne.n	8007834 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800784e:	4b10      	ldr	r3, [pc, #64]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007850:	695b      	ldr	r3, [r3, #20]
 8007852:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007856:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800785a:	d112      	bne.n	8007882 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800785c:	2303      	movs	r3, #3
 800785e:	e011      	b.n	8007884 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007860:	4b0b      	ldr	r3, [pc, #44]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007866:	4a0a      	ldr	r2, [pc, #40]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800786c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007870:	e007      	b.n	8007882 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007872:	4b07      	ldr	r3, [pc, #28]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800787a:	4a05      	ldr	r2, [pc, #20]	; (8007890 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800787c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007880:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	3714      	adds	r7, #20
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	40007000 	.word	0x40007000
 8007894:	20000000 	.word	0x20000000
 8007898:	431bde83 	.word	0x431bde83

0800789c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80078a0:	4b05      	ldr	r3, [pc, #20]	; (80078b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	4a04      	ldr	r2, [pc, #16]	; (80078b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80078a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80078aa:	6093      	str	r3, [r2, #8]
}
 80078ac:	bf00      	nop
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	40007000 	.word	0x40007000

080078bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b088      	sub	sp, #32
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d101      	bne.n	80078ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e2fe      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0301 	and.w	r3, r3, #1
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d075      	beq.n	80079c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078da:	4b97      	ldr	r3, [pc, #604]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 80078dc:	689b      	ldr	r3, [r3, #8]
 80078de:	f003 030c 	and.w	r3, r3, #12
 80078e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078e4:	4b94      	ldr	r3, [pc, #592]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f003 0303 	and.w	r3, r3, #3
 80078ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80078ee:	69bb      	ldr	r3, [r7, #24]
 80078f0:	2b0c      	cmp	r3, #12
 80078f2:	d102      	bne.n	80078fa <HAL_RCC_OscConfig+0x3e>
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	d002      	beq.n	8007900 <HAL_RCC_OscConfig+0x44>
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	2b08      	cmp	r3, #8
 80078fe:	d10b      	bne.n	8007918 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007900:	4b8d      	ldr	r3, [pc, #564]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007908:	2b00      	cmp	r3, #0
 800790a:	d05b      	beq.n	80079c4 <HAL_RCC_OscConfig+0x108>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d157      	bne.n	80079c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e2d9      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	685b      	ldr	r3, [r3, #4]
 800791c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007920:	d106      	bne.n	8007930 <HAL_RCC_OscConfig+0x74>
 8007922:	4b85      	ldr	r3, [pc, #532]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a84      	ldr	r2, [pc, #528]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800792c:	6013      	str	r3, [r2, #0]
 800792e:	e01d      	b.n	800796c <HAL_RCC_OscConfig+0xb0>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007938:	d10c      	bne.n	8007954 <HAL_RCC_OscConfig+0x98>
 800793a:	4b7f      	ldr	r3, [pc, #508]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a7e      	ldr	r2, [pc, #504]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007944:	6013      	str	r3, [r2, #0]
 8007946:	4b7c      	ldr	r3, [pc, #496]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a7b      	ldr	r2, [pc, #492]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 800794c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007950:	6013      	str	r3, [r2, #0]
 8007952:	e00b      	b.n	800796c <HAL_RCC_OscConfig+0xb0>
 8007954:	4b78      	ldr	r3, [pc, #480]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a77      	ldr	r2, [pc, #476]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 800795a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800795e:	6013      	str	r3, [r2, #0]
 8007960:	4b75      	ldr	r3, [pc, #468]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a74      	ldr	r2, [pc, #464]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007966:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800796a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d013      	beq.n	800799c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007974:	f7fe fe24 	bl	80065c0 <HAL_GetTick>
 8007978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800797a:	e008      	b.n	800798e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800797c:	f7fe fe20 	bl	80065c0 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	2b64      	cmp	r3, #100	; 0x64
 8007988:	d901      	bls.n	800798e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e29e      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800798e:	4b6a      	ldr	r3, [pc, #424]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d0f0      	beq.n	800797c <HAL_RCC_OscConfig+0xc0>
 800799a:	e014      	b.n	80079c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800799c:	f7fe fe10 	bl	80065c0 <HAL_GetTick>
 80079a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80079a2:	e008      	b.n	80079b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80079a4:	f7fe fe0c 	bl	80065c0 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b64      	cmp	r3, #100	; 0x64
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e28a      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80079b6:	4b60      	ldr	r3, [pc, #384]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1f0      	bne.n	80079a4 <HAL_RCC_OscConfig+0xe8>
 80079c2:	e000      	b.n	80079c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0302 	and.w	r3, r3, #2
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d075      	beq.n	8007abe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80079d2:	4b59      	ldr	r3, [pc, #356]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 030c 	and.w	r3, r3, #12
 80079da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80079dc:	4b56      	ldr	r3, [pc, #344]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f003 0303 	and.w	r3, r3, #3
 80079e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	2b0c      	cmp	r3, #12
 80079ea:	d102      	bne.n	80079f2 <HAL_RCC_OscConfig+0x136>
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d002      	beq.n	80079f8 <HAL_RCC_OscConfig+0x13c>
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	2b04      	cmp	r3, #4
 80079f6:	d11f      	bne.n	8007a38 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079f8:	4b4f      	ldr	r3, [pc, #316]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d005      	beq.n	8007a10 <HAL_RCC_OscConfig+0x154>
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d101      	bne.n	8007a10 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e25d      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a10:	4b49      	ldr	r3, [pc, #292]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	061b      	lsls	r3, r3, #24
 8007a1e:	4946      	ldr	r1, [pc, #280]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007a24:	4b45      	ldr	r3, [pc, #276]	; (8007b3c <HAL_RCC_OscConfig+0x280>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7fe fd7d 	bl	8006528 <HAL_InitTick>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d043      	beq.n	8007abc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e249      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d023      	beq.n	8007a88 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a40:	4b3d      	ldr	r3, [pc, #244]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a3c      	ldr	r2, [pc, #240]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a4c:	f7fe fdb8 	bl	80065c0 <HAL_GetTick>
 8007a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a52:	e008      	b.n	8007a66 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a54:	f7fe fdb4 	bl	80065c0 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	693b      	ldr	r3, [r7, #16]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e232      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007a66:	4b34      	ldr	r3, [pc, #208]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0f0      	beq.n	8007a54 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a72:	4b31      	ldr	r3, [pc, #196]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007a74:	685b      	ldr	r3, [r3, #4]
 8007a76:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	061b      	lsls	r3, r3, #24
 8007a80:	492d      	ldr	r1, [pc, #180]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	604b      	str	r3, [r1, #4]
 8007a86:	e01a      	b.n	8007abe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a88:	4b2b      	ldr	r3, [pc, #172]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	4a2a      	ldr	r2, [pc, #168]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007a8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a94:	f7fe fd94 	bl	80065c0 <HAL_GetTick>
 8007a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a9c:	f7fe fd90 	bl	80065c0 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e20e      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007aae:	4b22      	ldr	r3, [pc, #136]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1f0      	bne.n	8007a9c <HAL_RCC_OscConfig+0x1e0>
 8007aba:	e000      	b.n	8007abe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007abc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f003 0308 	and.w	r3, r3, #8
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d041      	beq.n	8007b4e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	695b      	ldr	r3, [r3, #20]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d01c      	beq.n	8007b0c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ad2:	4b19      	ldr	r3, [pc, #100]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ad8:	4a17      	ldr	r2, [pc, #92]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007ada:	f043 0301 	orr.w	r3, r3, #1
 8007ade:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ae2:	f7fe fd6d 	bl	80065c0 <HAL_GetTick>
 8007ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007ae8:	e008      	b.n	8007afc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aea:	f7fe fd69 	bl	80065c0 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	2b02      	cmp	r3, #2
 8007af6:	d901      	bls.n	8007afc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007af8:	2303      	movs	r3, #3
 8007afa:	e1e7      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007afc:	4b0e      	ldr	r3, [pc, #56]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007afe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b02:	f003 0302 	and.w	r3, r3, #2
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d0ef      	beq.n	8007aea <HAL_RCC_OscConfig+0x22e>
 8007b0a:	e020      	b.n	8007b4e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b12:	4a09      	ldr	r2, [pc, #36]	; (8007b38 <HAL_RCC_OscConfig+0x27c>)
 8007b14:	f023 0301 	bic.w	r3, r3, #1
 8007b18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b1c:	f7fe fd50 	bl	80065c0 <HAL_GetTick>
 8007b20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b22:	e00d      	b.n	8007b40 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b24:	f7fe fd4c 	bl	80065c0 <HAL_GetTick>
 8007b28:	4602      	mov	r2, r0
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	1ad3      	subs	r3, r2, r3
 8007b2e:	2b02      	cmp	r3, #2
 8007b30:	d906      	bls.n	8007b40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e1ca      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
 8007b36:	bf00      	nop
 8007b38:	40021000 	.word	0x40021000
 8007b3c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007b40:	4b8c      	ldr	r3, [pc, #560]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1ea      	bne.n	8007b24 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	f000 80a6 	beq.w	8007ca8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007b60:	4b84      	ldr	r3, [pc, #528]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <HAL_RCC_OscConfig+0x2b4>
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e000      	b.n	8007b72 <HAL_RCC_OscConfig+0x2b6>
 8007b70:	2300      	movs	r3, #0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00d      	beq.n	8007b92 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b76:	4b7f      	ldr	r3, [pc, #508]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b7a:	4a7e      	ldr	r2, [pc, #504]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007b7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b80:	6593      	str	r3, [r2, #88]	; 0x58
 8007b82:	4b7c      	ldr	r3, [pc, #496]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007b84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b92:	4b79      	ldr	r3, [pc, #484]	; (8007d78 <HAL_RCC_OscConfig+0x4bc>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d118      	bne.n	8007bd0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007b9e:	4b76      	ldr	r3, [pc, #472]	; (8007d78 <HAL_RCC_OscConfig+0x4bc>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a75      	ldr	r2, [pc, #468]	; (8007d78 <HAL_RCC_OscConfig+0x4bc>)
 8007ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ba8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007baa:	f7fe fd09 	bl	80065c0 <HAL_GetTick>
 8007bae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bb0:	e008      	b.n	8007bc4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bb2:	f7fe fd05 	bl	80065c0 <HAL_GetTick>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	1ad3      	subs	r3, r2, r3
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d901      	bls.n	8007bc4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007bc0:	2303      	movs	r3, #3
 8007bc2:	e183      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007bc4:	4b6c      	ldr	r3, [pc, #432]	; (8007d78 <HAL_RCC_OscConfig+0x4bc>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d0f0      	beq.n	8007bb2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d108      	bne.n	8007bea <HAL_RCC_OscConfig+0x32e>
 8007bd8:	4b66      	ldr	r3, [pc, #408]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bde:	4a65      	ldr	r2, [pc, #404]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007be0:	f043 0301 	orr.w	r3, r3, #1
 8007be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007be8:	e024      	b.n	8007c34 <HAL_RCC_OscConfig+0x378>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	2b05      	cmp	r3, #5
 8007bf0:	d110      	bne.n	8007c14 <HAL_RCC_OscConfig+0x358>
 8007bf2:	4b60      	ldr	r3, [pc, #384]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007bf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf8:	4a5e      	ldr	r2, [pc, #376]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007bfa:	f043 0304 	orr.w	r3, r3, #4
 8007bfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c02:	4b5c      	ldr	r3, [pc, #368]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c08:	4a5a      	ldr	r2, [pc, #360]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007c0a:	f043 0301 	orr.w	r3, r3, #1
 8007c0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c12:	e00f      	b.n	8007c34 <HAL_RCC_OscConfig+0x378>
 8007c14:	4b57      	ldr	r3, [pc, #348]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c1a:	4a56      	ldr	r2, [pc, #344]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007c1c:	f023 0301 	bic.w	r3, r3, #1
 8007c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c24:	4b53      	ldr	r3, [pc, #332]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c2a:	4a52      	ldr	r2, [pc, #328]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007c2c:	f023 0304 	bic.w	r3, r3, #4
 8007c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d016      	beq.n	8007c6a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c3c:	f7fe fcc0 	bl	80065c0 <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c42:	e00a      	b.n	8007c5a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c44:	f7fe fcbc 	bl	80065c0 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d901      	bls.n	8007c5a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007c56:	2303      	movs	r3, #3
 8007c58:	e138      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007c5a:	4b46      	ldr	r3, [pc, #280]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c60:	f003 0302 	and.w	r3, r3, #2
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d0ed      	beq.n	8007c44 <HAL_RCC_OscConfig+0x388>
 8007c68:	e015      	b.n	8007c96 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c6a:	f7fe fca9 	bl	80065c0 <HAL_GetTick>
 8007c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007c70:	e00a      	b.n	8007c88 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007c72:	f7fe fca5 	bl	80065c0 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d901      	bls.n	8007c88 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e121      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007c88:	4b3a      	ldr	r3, [pc, #232]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c8e:	f003 0302 	and.w	r3, r3, #2
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1ed      	bne.n	8007c72 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c96:	7ffb      	ldrb	r3, [r7, #31]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d105      	bne.n	8007ca8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c9c:	4b35      	ldr	r3, [pc, #212]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca0:	4a34      	ldr	r2, [pc, #208]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007ca2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ca6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f003 0320 	and.w	r3, r3, #32
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d03c      	beq.n	8007d2e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d01c      	beq.n	8007cf6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007cbc:	4b2d      	ldr	r3, [pc, #180]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cc2:	4a2c      	ldr	r2, [pc, #176]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007cc4:	f043 0301 	orr.w	r3, r3, #1
 8007cc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ccc:	f7fe fc78 	bl	80065c0 <HAL_GetTick>
 8007cd0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007cd2:	e008      	b.n	8007ce6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007cd4:	f7fe fc74 	bl	80065c0 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d901      	bls.n	8007ce6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e0f2      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007ce6:	4b23      	ldr	r3, [pc, #140]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cec:	f003 0302 	and.w	r3, r3, #2
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d0ef      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x418>
 8007cf4:	e01b      	b.n	8007d2e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007cf6:	4b1f      	ldr	r3, [pc, #124]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cfc:	4a1d      	ldr	r2, [pc, #116]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007cfe:	f023 0301 	bic.w	r3, r3, #1
 8007d02:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d06:	f7fe fc5b 	bl	80065c0 <HAL_GetTick>
 8007d0a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007d0c:	e008      	b.n	8007d20 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d0e:	f7fe fc57 	bl	80065c0 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	2b02      	cmp	r3, #2
 8007d1a:	d901      	bls.n	8007d20 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007d1c:	2303      	movs	r3, #3
 8007d1e:	e0d5      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007d20:	4b14      	ldr	r3, [pc, #80]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007d22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1ef      	bne.n	8007d0e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	69db      	ldr	r3, [r3, #28]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	f000 80c9 	beq.w	8007eca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d38:	4b0e      	ldr	r3, [pc, #56]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f003 030c 	and.w	r3, r3, #12
 8007d40:	2b0c      	cmp	r3, #12
 8007d42:	f000 8083 	beq.w	8007e4c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	69db      	ldr	r3, [r3, #28]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d15e      	bne.n	8007e0c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d4e:	4b09      	ldr	r3, [pc, #36]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a08      	ldr	r2, [pc, #32]	; (8007d74 <HAL_RCC_OscConfig+0x4b8>)
 8007d54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d5a:	f7fe fc31 	bl	80065c0 <HAL_GetTick>
 8007d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d60:	e00c      	b.n	8007d7c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d62:	f7fe fc2d 	bl	80065c0 <HAL_GetTick>
 8007d66:	4602      	mov	r2, r0
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	1ad3      	subs	r3, r2, r3
 8007d6c:	2b02      	cmp	r3, #2
 8007d6e:	d905      	bls.n	8007d7c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007d70:	2303      	movs	r3, #3
 8007d72:	e0ab      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
 8007d74:	40021000 	.word	0x40021000
 8007d78:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007d7c:	4b55      	ldr	r3, [pc, #340]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1ec      	bne.n	8007d62 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d88:	4b52      	ldr	r3, [pc, #328]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007d8a:	68da      	ldr	r2, [r3, #12]
 8007d8c:	4b52      	ldr	r3, [pc, #328]	; (8007ed8 <HAL_RCC_OscConfig+0x61c>)
 8007d8e:	4013      	ands	r3, r2
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	6a11      	ldr	r1, [r2, #32]
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d98:	3a01      	subs	r2, #1
 8007d9a:	0112      	lsls	r2, r2, #4
 8007d9c:	4311      	orrs	r1, r2
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007da2:	0212      	lsls	r2, r2, #8
 8007da4:	4311      	orrs	r1, r2
 8007da6:	687a      	ldr	r2, [r7, #4]
 8007da8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007daa:	0852      	lsrs	r2, r2, #1
 8007dac:	3a01      	subs	r2, #1
 8007dae:	0552      	lsls	r2, r2, #21
 8007db0:	4311      	orrs	r1, r2
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007db6:	0852      	lsrs	r2, r2, #1
 8007db8:	3a01      	subs	r2, #1
 8007dba:	0652      	lsls	r2, r2, #25
 8007dbc:	4311      	orrs	r1, r2
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007dc2:	06d2      	lsls	r2, r2, #27
 8007dc4:	430a      	orrs	r2, r1
 8007dc6:	4943      	ldr	r1, [pc, #268]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007dcc:	4b41      	ldr	r3, [pc, #260]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a40      	ldr	r2, [pc, #256]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dd6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007dd8:	4b3e      	ldr	r3, [pc, #248]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	4a3d      	ldr	r2, [pc, #244]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007dde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007de2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de4:	f7fe fbec 	bl	80065c0 <HAL_GetTick>
 8007de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007dea:	e008      	b.n	8007dfe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dec:	f7fe fbe8 	bl	80065c0 <HAL_GetTick>
 8007df0:	4602      	mov	r2, r0
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	2b02      	cmp	r3, #2
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e066      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007dfe:	4b35      	ldr	r3, [pc, #212]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d0f0      	beq.n	8007dec <HAL_RCC_OscConfig+0x530>
 8007e0a:	e05e      	b.n	8007eca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e0c:	4b31      	ldr	r3, [pc, #196]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a30      	ldr	r2, [pc, #192]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007e12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e18:	f7fe fbd2 	bl	80065c0 <HAL_GetTick>
 8007e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e1e:	e008      	b.n	8007e32 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e20:	f7fe fbce 	bl	80065c0 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e04c      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e32:	4b28      	ldr	r3, [pc, #160]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f0      	bne.n	8007e20 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007e3e:	4b25      	ldr	r3, [pc, #148]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007e40:	68da      	ldr	r2, [r3, #12]
 8007e42:	4924      	ldr	r1, [pc, #144]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007e44:	4b25      	ldr	r3, [pc, #148]	; (8007edc <HAL_RCC_OscConfig+0x620>)
 8007e46:	4013      	ands	r3, r2
 8007e48:	60cb      	str	r3, [r1, #12]
 8007e4a:	e03e      	b.n	8007eca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d101      	bne.n	8007e58 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e039      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007e58:	4b1e      	ldr	r3, [pc, #120]	; (8007ed4 <HAL_RCC_OscConfig+0x618>)
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f003 0203 	and.w	r2, r3, #3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a1b      	ldr	r3, [r3, #32]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d12c      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	3b01      	subs	r3, #1
 8007e78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d123      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d11b      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e9a:	429a      	cmp	r2, r3
 8007e9c:	d113      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea8:	085b      	lsrs	r3, r3, #1
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d109      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ebc:	085b      	lsrs	r3, r3, #1
 8007ebe:	3b01      	subs	r3, #1
 8007ec0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007ec2:	429a      	cmp	r2, r3
 8007ec4:	d001      	beq.n	8007eca <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e000      	b.n	8007ecc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3720      	adds	r7, #32
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	40021000 	.word	0x40021000
 8007ed8:	019f800c 	.word	0x019f800c
 8007edc:	feeefffc 	.word	0xfeeefffc

08007ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b086      	sub	sp, #24
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007eea:	2300      	movs	r3, #0
 8007eec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d101      	bne.n	8007ef8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e11e      	b.n	8008136 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ef8:	4b91      	ldr	r3, [pc, #580]	; (8008140 <HAL_RCC_ClockConfig+0x260>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f003 030f 	and.w	r3, r3, #15
 8007f00:	683a      	ldr	r2, [r7, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d910      	bls.n	8007f28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f06:	4b8e      	ldr	r3, [pc, #568]	; (8008140 <HAL_RCC_ClockConfig+0x260>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f023 020f 	bic.w	r2, r3, #15
 8007f0e:	498c      	ldr	r1, [pc, #560]	; (8008140 <HAL_RCC_ClockConfig+0x260>)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f16:	4b8a      	ldr	r3, [pc, #552]	; (8008140 <HAL_RCC_ClockConfig+0x260>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d001      	beq.n	8007f28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007f24:	2301      	movs	r3, #1
 8007f26:	e106      	b.n	8008136 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d073      	beq.n	800801c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	2b03      	cmp	r3, #3
 8007f3a:	d129      	bne.n	8007f90 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f3c:	4b81      	ldr	r3, [pc, #516]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d101      	bne.n	8007f4c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e0f4      	b.n	8008136 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007f4c:	f000 f966 	bl	800821c <RCC_GetSysClockFreqFromPLLSource>
 8007f50:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	4a7c      	ldr	r2, [pc, #496]	; (8008148 <HAL_RCC_ClockConfig+0x268>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d93f      	bls.n	8007fda <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007f5a:	4b7a      	ldr	r3, [pc, #488]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d009      	beq.n	8007f7a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d033      	beq.n	8007fda <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d12f      	bne.n	8007fda <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007f7a:	4b72      	ldr	r3, [pc, #456]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f82:	4a70      	ldr	r2, [pc, #448]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8007f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f88:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8007f8a:	2380      	movs	r3, #128	; 0x80
 8007f8c:	617b      	str	r3, [r7, #20]
 8007f8e:	e024      	b.n	8007fda <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	2b02      	cmp	r3, #2
 8007f96:	d107      	bne.n	8007fa8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f98:	4b6a      	ldr	r3, [pc, #424]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d109      	bne.n	8007fb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	e0c6      	b.n	8008136 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fa8:	4b66      	ldr	r3, [pc, #408]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d101      	bne.n	8007fb8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e0be      	b.n	8008136 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007fb8:	f000 f8ce 	bl	8008158 <HAL_RCC_GetSysClockFreq>
 8007fbc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	4a61      	ldr	r2, [pc, #388]	; (8008148 <HAL_RCC_ClockConfig+0x268>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d909      	bls.n	8007fda <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007fc6:	4b5f      	ldr	r3, [pc, #380]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fce:	4a5d      	ldr	r2, [pc, #372]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8007fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fd4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007fd6:	2380      	movs	r3, #128	; 0x80
 8007fd8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007fda:	4b5a      	ldr	r3, [pc, #360]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f023 0203 	bic.w	r2, r3, #3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	4957      	ldr	r1, [pc, #348]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8007fe8:	4313      	orrs	r3, r2
 8007fea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fec:	f7fe fae8 	bl	80065c0 <HAL_GetTick>
 8007ff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ff2:	e00a      	b.n	800800a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ff4:	f7fe fae4 	bl	80065c0 <HAL_GetTick>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008002:	4293      	cmp	r3, r2
 8008004:	d901      	bls.n	800800a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008006:	2303      	movs	r3, #3
 8008008:	e095      	b.n	8008136 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800800a:	4b4e      	ldr	r3, [pc, #312]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	f003 020c 	and.w	r2, r3, #12
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	685b      	ldr	r3, [r3, #4]
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	429a      	cmp	r2, r3
 800801a:	d1eb      	bne.n	8007ff4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0302 	and.w	r3, r3, #2
 8008024:	2b00      	cmp	r3, #0
 8008026:	d023      	beq.n	8008070 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0304 	and.w	r3, r3, #4
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008034:	4b43      	ldr	r3, [pc, #268]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	4a42      	ldr	r2, [pc, #264]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 800803a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800803e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b00      	cmp	r3, #0
 800804a:	d007      	beq.n	800805c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800804c:	4b3d      	ldr	r3, [pc, #244]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008054:	4a3b      	ldr	r2, [pc, #236]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8008056:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800805a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800805c:	4b39      	ldr	r3, [pc, #228]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	4936      	ldr	r1, [pc, #216]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 800806a:	4313      	orrs	r3, r2
 800806c:	608b      	str	r3, [r1, #8]
 800806e:	e008      	b.n	8008082 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2b80      	cmp	r3, #128	; 0x80
 8008074:	d105      	bne.n	8008082 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008076:	4b33      	ldr	r3, [pc, #204]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	4a32      	ldr	r2, [pc, #200]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 800807c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008080:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008082:	4b2f      	ldr	r3, [pc, #188]	; (8008140 <HAL_RCC_ClockConfig+0x260>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 030f 	and.w	r3, r3, #15
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	429a      	cmp	r2, r3
 800808e:	d21d      	bcs.n	80080cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008090:	4b2b      	ldr	r3, [pc, #172]	; (8008140 <HAL_RCC_ClockConfig+0x260>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f023 020f 	bic.w	r2, r3, #15
 8008098:	4929      	ldr	r1, [pc, #164]	; (8008140 <HAL_RCC_ClockConfig+0x260>)
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	4313      	orrs	r3, r2
 800809e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80080a0:	f7fe fa8e 	bl	80065c0 <HAL_GetTick>
 80080a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080a6:	e00a      	b.n	80080be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080a8:	f7fe fa8a 	bl	80065c0 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d901      	bls.n	80080be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e03b      	b.n	8008136 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080be:	4b20      	ldr	r3, [pc, #128]	; (8008140 <HAL_RCC_ClockConfig+0x260>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 030f 	and.w	r3, r3, #15
 80080c6:	683a      	ldr	r2, [r7, #0]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d1ed      	bne.n	80080a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d008      	beq.n	80080ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080d8:	4b1a      	ldr	r3, [pc, #104]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	4917      	ldr	r1, [pc, #92]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0308 	and.w	r3, r3, #8
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d009      	beq.n	800810a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80080f6:	4b13      	ldr	r3, [pc, #76]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	490f      	ldr	r1, [pc, #60]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8008106:	4313      	orrs	r3, r2
 8008108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800810a:	f000 f825 	bl	8008158 <HAL_RCC_GetSysClockFreq>
 800810e:	4602      	mov	r2, r0
 8008110:	4b0c      	ldr	r3, [pc, #48]	; (8008144 <HAL_RCC_ClockConfig+0x264>)
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	091b      	lsrs	r3, r3, #4
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	490c      	ldr	r1, [pc, #48]	; (800814c <HAL_RCC_ClockConfig+0x26c>)
 800811c:	5ccb      	ldrb	r3, [r1, r3]
 800811e:	f003 031f 	and.w	r3, r3, #31
 8008122:	fa22 f303 	lsr.w	r3, r2, r3
 8008126:	4a0a      	ldr	r2, [pc, #40]	; (8008150 <HAL_RCC_ClockConfig+0x270>)
 8008128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800812a:	4b0a      	ldr	r3, [pc, #40]	; (8008154 <HAL_RCC_ClockConfig+0x274>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe f9fa 	bl	8006528 <HAL_InitTick>
 8008134:	4603      	mov	r3, r0
}
 8008136:	4618      	mov	r0, r3
 8008138:	3718      	adds	r7, #24
 800813a:	46bd      	mov	sp, r7
 800813c:	bd80      	pop	{r7, pc}
 800813e:	bf00      	nop
 8008140:	40022000 	.word	0x40022000
 8008144:	40021000 	.word	0x40021000
 8008148:	04c4b400 	.word	0x04c4b400
 800814c:	0800b440 	.word	0x0800b440
 8008150:	20000000 	.word	0x20000000
 8008154:	20000004 	.word	0x20000004

08008158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008158:	b480      	push	{r7}
 800815a:	b087      	sub	sp, #28
 800815c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800815e:	4b2c      	ldr	r3, [pc, #176]	; (8008210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008160:	689b      	ldr	r3, [r3, #8]
 8008162:	f003 030c 	and.w	r3, r3, #12
 8008166:	2b04      	cmp	r3, #4
 8008168:	d102      	bne.n	8008170 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800816a:	4b2a      	ldr	r3, [pc, #168]	; (8008214 <HAL_RCC_GetSysClockFreq+0xbc>)
 800816c:	613b      	str	r3, [r7, #16]
 800816e:	e047      	b.n	8008200 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008170:	4b27      	ldr	r3, [pc, #156]	; (8008210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008172:	689b      	ldr	r3, [r3, #8]
 8008174:	f003 030c 	and.w	r3, r3, #12
 8008178:	2b08      	cmp	r3, #8
 800817a:	d102      	bne.n	8008182 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800817c:	4b26      	ldr	r3, [pc, #152]	; (8008218 <HAL_RCC_GetSysClockFreq+0xc0>)
 800817e:	613b      	str	r3, [r7, #16]
 8008180:	e03e      	b.n	8008200 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008182:	4b23      	ldr	r3, [pc, #140]	; (8008210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f003 030c 	and.w	r3, r3, #12
 800818a:	2b0c      	cmp	r3, #12
 800818c:	d136      	bne.n	80081fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800818e:	4b20      	ldr	r3, [pc, #128]	; (8008210 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008190:	68db      	ldr	r3, [r3, #12]
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008198:	4b1d      	ldr	r3, [pc, #116]	; (8008210 <HAL_RCC_GetSysClockFreq+0xb8>)
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	091b      	lsrs	r3, r3, #4
 800819e:	f003 030f 	and.w	r3, r3, #15
 80081a2:	3301      	adds	r3, #1
 80081a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2b03      	cmp	r3, #3
 80081aa:	d10c      	bne.n	80081c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80081ac:	4a1a      	ldr	r2, [pc, #104]	; (8008218 <HAL_RCC_GetSysClockFreq+0xc0>)
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081b4:	4a16      	ldr	r2, [pc, #88]	; (8008210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081b6:	68d2      	ldr	r2, [r2, #12]
 80081b8:	0a12      	lsrs	r2, r2, #8
 80081ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80081be:	fb02 f303 	mul.w	r3, r2, r3
 80081c2:	617b      	str	r3, [r7, #20]
      break;
 80081c4:	e00c      	b.n	80081e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80081c6:	4a13      	ldr	r2, [pc, #76]	; (8008214 <HAL_RCC_GetSysClockFreq+0xbc>)
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ce:	4a10      	ldr	r2, [pc, #64]	; (8008210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081d0:	68d2      	ldr	r2, [r2, #12]
 80081d2:	0a12      	lsrs	r2, r2, #8
 80081d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80081d8:	fb02 f303 	mul.w	r3, r2, r3
 80081dc:	617b      	str	r3, [r7, #20]
      break;
 80081de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80081e0:	4b0b      	ldr	r3, [pc, #44]	; (8008210 <HAL_RCC_GetSysClockFreq+0xb8>)
 80081e2:	68db      	ldr	r3, [r3, #12]
 80081e4:	0e5b      	lsrs	r3, r3, #25
 80081e6:	f003 0303 	and.w	r3, r3, #3
 80081ea:	3301      	adds	r3, #1
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f8:	613b      	str	r3, [r7, #16]
 80081fa:	e001      	b.n	8008200 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80081fc:	2300      	movs	r3, #0
 80081fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008200:	693b      	ldr	r3, [r7, #16]
}
 8008202:	4618      	mov	r0, r3
 8008204:	371c      	adds	r7, #28
 8008206:	46bd      	mov	sp, r7
 8008208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820c:	4770      	bx	lr
 800820e:	bf00      	nop
 8008210:	40021000 	.word	0x40021000
 8008214:	00f42400 	.word	0x00f42400
 8008218:	007a1200 	.word	0x007a1200

0800821c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800821c:	b480      	push	{r7}
 800821e:	b087      	sub	sp, #28
 8008220:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008222:	4b1e      	ldr	r3, [pc, #120]	; (800829c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008224:	68db      	ldr	r3, [r3, #12]
 8008226:	f003 0303 	and.w	r3, r3, #3
 800822a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800822c:	4b1b      	ldr	r3, [pc, #108]	; (800829c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	091b      	lsrs	r3, r3, #4
 8008232:	f003 030f 	and.w	r3, r3, #15
 8008236:	3301      	adds	r3, #1
 8008238:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2b03      	cmp	r3, #3
 800823e:	d10c      	bne.n	800825a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008240:	4a17      	ldr	r2, [pc, #92]	; (80082a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	fbb2 f3f3 	udiv	r3, r2, r3
 8008248:	4a14      	ldr	r2, [pc, #80]	; (800829c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800824a:	68d2      	ldr	r2, [r2, #12]
 800824c:	0a12      	lsrs	r2, r2, #8
 800824e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008252:	fb02 f303 	mul.w	r3, r2, r3
 8008256:	617b      	str	r3, [r7, #20]
    break;
 8008258:	e00c      	b.n	8008274 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800825a:	4a12      	ldr	r2, [pc, #72]	; (80082a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008262:	4a0e      	ldr	r2, [pc, #56]	; (800829c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008264:	68d2      	ldr	r2, [r2, #12]
 8008266:	0a12      	lsrs	r2, r2, #8
 8008268:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800826c:	fb02 f303 	mul.w	r3, r2, r3
 8008270:	617b      	str	r3, [r7, #20]
    break;
 8008272:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008274:	4b09      	ldr	r3, [pc, #36]	; (800829c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	0e5b      	lsrs	r3, r3, #25
 800827a:	f003 0303 	and.w	r3, r3, #3
 800827e:	3301      	adds	r3, #1
 8008280:	005b      	lsls	r3, r3, #1
 8008282:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008284:	697a      	ldr	r2, [r7, #20]
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	fbb2 f3f3 	udiv	r3, r2, r3
 800828c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800828e:	687b      	ldr	r3, [r7, #4]
}
 8008290:	4618      	mov	r0, r3
 8008292:	371c      	adds	r7, #28
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	40021000 	.word	0x40021000
 80082a0:	007a1200 	.word	0x007a1200
 80082a4:	00f42400 	.word	0x00f42400

080082a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80082b0:	2300      	movs	r3, #0
 80082b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80082b4:	2300      	movs	r3, #0
 80082b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 8098 	beq.w	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082c6:	2300      	movs	r3, #0
 80082c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082ca:	4b43      	ldr	r3, [pc, #268]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10d      	bne.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082d6:	4b40      	ldr	r3, [pc, #256]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082da:	4a3f      	ldr	r2, [pc, #252]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082e0:	6593      	str	r3, [r2, #88]	; 0x58
 80082e2:	4b3d      	ldr	r3, [pc, #244]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80082e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ea:	60bb      	str	r3, [r7, #8]
 80082ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082ee:	2301      	movs	r3, #1
 80082f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80082f2:	4b3a      	ldr	r3, [pc, #232]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a39      	ldr	r2, [pc, #228]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80082f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082fe:	f7fe f95f 	bl	80065c0 <HAL_GetTick>
 8008302:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008304:	e009      	b.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008306:	f7fe f95b 	bl	80065c0 <HAL_GetTick>
 800830a:	4602      	mov	r2, r0
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	1ad3      	subs	r3, r2, r3
 8008310:	2b02      	cmp	r3, #2
 8008312:	d902      	bls.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	74fb      	strb	r3, [r7, #19]
        break;
 8008318:	e005      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800831a:	4b30      	ldr	r3, [pc, #192]	; (80083dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008322:	2b00      	cmp	r3, #0
 8008324:	d0ef      	beq.n	8008306 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008326:	7cfb      	ldrb	r3, [r7, #19]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d159      	bne.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800832c:	4b2a      	ldr	r3, [pc, #168]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800832e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008336:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d01e      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008342:	697a      	ldr	r2, [r7, #20]
 8008344:	429a      	cmp	r2, r3
 8008346:	d019      	beq.n	800837c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008348:	4b23      	ldr	r3, [pc, #140]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800834a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800834e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008352:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008354:	4b20      	ldr	r3, [pc, #128]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800835a:	4a1f      	ldr	r2, [pc, #124]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800835c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008360:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008364:	4b1c      	ldr	r3, [pc, #112]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800836a:	4a1b      	ldr	r2, [pc, #108]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800836c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008374:	4a18      	ldr	r2, [pc, #96]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d016      	beq.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008386:	f7fe f91b 	bl	80065c0 <HAL_GetTick>
 800838a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800838c:	e00b      	b.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800838e:	f7fe f917 	bl	80065c0 <HAL_GetTick>
 8008392:	4602      	mov	r2, r0
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	1ad3      	subs	r3, r2, r3
 8008398:	f241 3288 	movw	r2, #5000	; 0x1388
 800839c:	4293      	cmp	r3, r2
 800839e:	d902      	bls.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80083a0:	2303      	movs	r3, #3
 80083a2:	74fb      	strb	r3, [r7, #19]
            break;
 80083a4:	e006      	b.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083a6:	4b0c      	ldr	r3, [pc, #48]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ac:	f003 0302 	and.w	r3, r3, #2
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d0ec      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80083b4:	7cfb      	ldrb	r3, [r7, #19]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10b      	bne.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80083ba:	4b07      	ldr	r3, [pc, #28]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c8:	4903      	ldr	r1, [pc, #12]	; (80083d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083ca:	4313      	orrs	r3, r2
 80083cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80083d0:	e008      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083d2:	7cfb      	ldrb	r3, [r7, #19]
 80083d4:	74bb      	strb	r3, [r7, #18]
 80083d6:	e005      	b.n	80083e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80083d8:	40021000 	.word	0x40021000
 80083dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083e0:	7cfb      	ldrb	r3, [r7, #19]
 80083e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80083e4:	7c7b      	ldrb	r3, [r7, #17]
 80083e6:	2b01      	cmp	r3, #1
 80083e8:	d105      	bne.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083ea:	4ba6      	ldr	r3, [pc, #664]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083ee:	4aa5      	ldr	r2, [pc, #660]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80083f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0301 	and.w	r3, r3, #1
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d00a      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008402:	4ba0      	ldr	r3, [pc, #640]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008408:	f023 0203 	bic.w	r2, r3, #3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	685b      	ldr	r3, [r3, #4]
 8008410:	499c      	ldr	r1, [pc, #624]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008412:	4313      	orrs	r3, r2
 8008414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00a      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008424:	4b97      	ldr	r3, [pc, #604]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842a:	f023 020c 	bic.w	r2, r3, #12
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	689b      	ldr	r3, [r3, #8]
 8008432:	4994      	ldr	r1, [pc, #592]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008434:	4313      	orrs	r3, r2
 8008436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 0304 	and.w	r3, r3, #4
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008446:	4b8f      	ldr	r3, [pc, #572]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800844c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	68db      	ldr	r3, [r3, #12]
 8008454:	498b      	ldr	r1, [pc, #556]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008456:	4313      	orrs	r3, r2
 8008458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0308 	and.w	r3, r3, #8
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00a      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008468:	4b86      	ldr	r3, [pc, #536]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800846a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800846e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	691b      	ldr	r3, [r3, #16]
 8008476:	4983      	ldr	r1, [pc, #524]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008478:	4313      	orrs	r3, r2
 800847a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0320 	and.w	r3, r3, #32
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800848a:	4b7e      	ldr	r3, [pc, #504]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800848c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008490:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	695b      	ldr	r3, [r3, #20]
 8008498:	497a      	ldr	r1, [pc, #488]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800849a:	4313      	orrs	r3, r2
 800849c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00a      	beq.n	80084c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80084ac:	4b75      	ldr	r3, [pc, #468]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	4972      	ldr	r1, [pc, #456]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084bc:	4313      	orrs	r3, r2
 80084be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80084ce:	4b6d      	ldr	r3, [pc, #436]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	4969      	ldr	r1, [pc, #420]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084de:	4313      	orrs	r3, r2
 80084e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00a      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80084f0:	4b64      	ldr	r3, [pc, #400]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	4961      	ldr	r1, [pc, #388]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008500:	4313      	orrs	r3, r2
 8008502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008512:	4b5c      	ldr	r3, [pc, #368]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008518:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	4958      	ldr	r1, [pc, #352]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008522:	4313      	orrs	r3, r2
 8008524:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008530:	2b00      	cmp	r3, #0
 8008532:	d015      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008534:	4b53      	ldr	r3, [pc, #332]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800853a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008542:	4950      	ldr	r1, [pc, #320]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008544:	4313      	orrs	r3, r2
 8008546:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008552:	d105      	bne.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008554:	4b4b      	ldr	r3, [pc, #300]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	4a4a      	ldr	r2, [pc, #296]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800855a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800855e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008568:	2b00      	cmp	r3, #0
 800856a:	d015      	beq.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800856c:	4b45      	ldr	r3, [pc, #276]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800856e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008572:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857a:	4942      	ldr	r1, [pc, #264]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800857c:	4313      	orrs	r3, r2
 800857e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800858a:	d105      	bne.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800858c:	4b3d      	ldr	r3, [pc, #244]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	4a3c      	ldr	r2, [pc, #240]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008592:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008596:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d015      	beq.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085a4:	4b37      	ldr	r3, [pc, #220]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085b2:	4934      	ldr	r1, [pc, #208]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085b4:	4313      	orrs	r3, r2
 80085b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80085c2:	d105      	bne.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085c4:	4b2f      	ldr	r3, [pc, #188]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	4a2e      	ldr	r2, [pc, #184]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d015      	beq.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085dc:	4b29      	ldr	r3, [pc, #164]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ea:	4926      	ldr	r1, [pc, #152]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085ec:	4313      	orrs	r3, r2
 80085ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085fa:	d105      	bne.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085fc:	4b21      	ldr	r3, [pc, #132]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085fe:	68db      	ldr	r3, [r3, #12]
 8008600:	4a20      	ldr	r2, [pc, #128]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008606:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008610:	2b00      	cmp	r3, #0
 8008612:	d015      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008614:	4b1b      	ldr	r3, [pc, #108]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800861a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008622:	4918      	ldr	r1, [pc, #96]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008624:	4313      	orrs	r3, r2
 8008626:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800862e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008632:	d105      	bne.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008634:	4b13      	ldr	r3, [pc, #76]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	4a12      	ldr	r2, [pc, #72]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800863a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800863e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d015      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800864c:	4b0d      	ldr	r3, [pc, #52]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800864e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008652:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800865a:	490a      	ldr	r1, [pc, #40]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800865c:	4313      	orrs	r3, r2
 800865e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800866a:	d105      	bne.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800866c:	4b05      	ldr	r3, [pc, #20]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	4a04      	ldr	r2, [pc, #16]	; (8008684 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008672:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008676:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008678:	7cbb      	ldrb	r3, [r7, #18]
}
 800867a:	4618      	mov	r0, r3
 800867c:	3718      	adds	r7, #24
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}
 8008682:	bf00      	nop
 8008684:	40021000 	.word	0x40021000

08008688 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b082      	sub	sp, #8
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e049      	b.n	800872e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d106      	bne.n	80086b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f7fd fcf2 	bl	8006098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2202      	movs	r2, #2
 80086b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	3304      	adds	r3, #4
 80086c4:	4619      	mov	r1, r3
 80086c6:	4610      	mov	r0, r2
 80086c8:	f000 fd7e 	bl	80091c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2201      	movs	r2, #1
 80086d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2201      	movs	r2, #1
 80086f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800872c:	2300      	movs	r3, #0
}
 800872e:	4618      	mov	r0, r3
 8008730:	3708      	adds	r7, #8
 8008732:	46bd      	mov	sp, r7
 8008734:	bd80      	pop	{r7, pc}
	...

08008738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008746:	b2db      	uxtb	r3, r3
 8008748:	2b01      	cmp	r3, #1
 800874a:	d001      	beq.n	8008750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800874c:	2301      	movs	r3, #1
 800874e:	e04a      	b.n	80087e6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	68da      	ldr	r2, [r3, #12]
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f042 0201 	orr.w	r2, r2, #1
 8008766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a21      	ldr	r2, [pc, #132]	; (80087f4 <HAL_TIM_Base_Start_IT+0xbc>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d018      	beq.n	80087a4 <HAL_TIM_Base_Start_IT+0x6c>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800877a:	d013      	beq.n	80087a4 <HAL_TIM_Base_Start_IT+0x6c>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a1d      	ldr	r2, [pc, #116]	; (80087f8 <HAL_TIM_Base_Start_IT+0xc0>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d00e      	beq.n	80087a4 <HAL_TIM_Base_Start_IT+0x6c>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a1c      	ldr	r2, [pc, #112]	; (80087fc <HAL_TIM_Base_Start_IT+0xc4>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d009      	beq.n	80087a4 <HAL_TIM_Base_Start_IT+0x6c>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a1a      	ldr	r2, [pc, #104]	; (8008800 <HAL_TIM_Base_Start_IT+0xc8>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d004      	beq.n	80087a4 <HAL_TIM_Base_Start_IT+0x6c>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a19      	ldr	r2, [pc, #100]	; (8008804 <HAL_TIM_Base_Start_IT+0xcc>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d115      	bne.n	80087d0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	689a      	ldr	r2, [r3, #8]
 80087aa:	4b17      	ldr	r3, [pc, #92]	; (8008808 <HAL_TIM_Base_Start_IT+0xd0>)
 80087ac:	4013      	ands	r3, r2
 80087ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b06      	cmp	r3, #6
 80087b4:	d015      	beq.n	80087e2 <HAL_TIM_Base_Start_IT+0xaa>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80087bc:	d011      	beq.n	80087e2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f042 0201 	orr.w	r2, r2, #1
 80087cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087ce:	e008      	b.n	80087e2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f042 0201 	orr.w	r2, r2, #1
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	e000      	b.n	80087e4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80087e4:	2300      	movs	r3, #0
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3714      	adds	r7, #20
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr
 80087f2:	bf00      	nop
 80087f4:	40012c00 	.word	0x40012c00
 80087f8:	40000400 	.word	0x40000400
 80087fc:	40000800 	.word	0x40000800
 8008800:	40013400 	.word	0x40013400
 8008804:	40014000 	.word	0x40014000
 8008808:	00010007 	.word	0x00010007

0800880c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d101      	bne.n	800881e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e049      	b.n	80088b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008824:	b2db      	uxtb	r3, r3
 8008826:	2b00      	cmp	r3, #0
 8008828:	d106      	bne.n	8008838 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2200      	movs	r2, #0
 800882e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7fd fc7e 	bl	8006134 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2202      	movs	r2, #2
 800883c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	3304      	adds	r3, #4
 8008848:	4619      	mov	r1, r3
 800884a:	4610      	mov	r0, r2
 800884c:	f000 fcbc 	bl	80091c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2201      	movs	r2, #1
 8008874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2201      	movs	r2, #1
 8008894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2201      	movs	r2, #1
 80088ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3708      	adds	r7, #8
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
	...

080088bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d109      	bne.n	80088e0 <HAL_TIM_PWM_Start+0x24>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088d2:	b2db      	uxtb	r3, r3
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	bf14      	ite	ne
 80088d8:	2301      	movne	r3, #1
 80088da:	2300      	moveq	r3, #0
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	e03c      	b.n	800895a <HAL_TIM_PWM_Start+0x9e>
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d109      	bne.n	80088fa <HAL_TIM_PWM_Start+0x3e>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b01      	cmp	r3, #1
 80088f0:	bf14      	ite	ne
 80088f2:	2301      	movne	r3, #1
 80088f4:	2300      	moveq	r3, #0
 80088f6:	b2db      	uxtb	r3, r3
 80088f8:	e02f      	b.n	800895a <HAL_TIM_PWM_Start+0x9e>
 80088fa:	683b      	ldr	r3, [r7, #0]
 80088fc:	2b08      	cmp	r3, #8
 80088fe:	d109      	bne.n	8008914 <HAL_TIM_PWM_Start+0x58>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b01      	cmp	r3, #1
 800890a:	bf14      	ite	ne
 800890c:	2301      	movne	r3, #1
 800890e:	2300      	moveq	r3, #0
 8008910:	b2db      	uxtb	r3, r3
 8008912:	e022      	b.n	800895a <HAL_TIM_PWM_Start+0x9e>
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	2b0c      	cmp	r3, #12
 8008918:	d109      	bne.n	800892e <HAL_TIM_PWM_Start+0x72>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b01      	cmp	r3, #1
 8008924:	bf14      	ite	ne
 8008926:	2301      	movne	r3, #1
 8008928:	2300      	moveq	r3, #0
 800892a:	b2db      	uxtb	r3, r3
 800892c:	e015      	b.n	800895a <HAL_TIM_PWM_Start+0x9e>
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	2b10      	cmp	r3, #16
 8008932:	d109      	bne.n	8008948 <HAL_TIM_PWM_Start+0x8c>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800893a:	b2db      	uxtb	r3, r3
 800893c:	2b01      	cmp	r3, #1
 800893e:	bf14      	ite	ne
 8008940:	2301      	movne	r3, #1
 8008942:	2300      	moveq	r3, #0
 8008944:	b2db      	uxtb	r3, r3
 8008946:	e008      	b.n	800895a <HAL_TIM_PWM_Start+0x9e>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800894e:	b2db      	uxtb	r3, r3
 8008950:	2b01      	cmp	r3, #1
 8008952:	bf14      	ite	ne
 8008954:	2301      	movne	r3, #1
 8008956:	2300      	moveq	r3, #0
 8008958:	b2db      	uxtb	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	d001      	beq.n	8008962 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e097      	b.n	8008a92 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d104      	bne.n	8008972 <HAL_TIM_PWM_Start+0xb6>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008970:	e023      	b.n	80089ba <HAL_TIM_PWM_Start+0xfe>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b04      	cmp	r3, #4
 8008976:	d104      	bne.n	8008982 <HAL_TIM_PWM_Start+0xc6>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2202      	movs	r2, #2
 800897c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008980:	e01b      	b.n	80089ba <HAL_TIM_PWM_Start+0xfe>
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	2b08      	cmp	r3, #8
 8008986:	d104      	bne.n	8008992 <HAL_TIM_PWM_Start+0xd6>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2202      	movs	r2, #2
 800898c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008990:	e013      	b.n	80089ba <HAL_TIM_PWM_Start+0xfe>
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	2b0c      	cmp	r3, #12
 8008996:	d104      	bne.n	80089a2 <HAL_TIM_PWM_Start+0xe6>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80089a0:	e00b      	b.n	80089ba <HAL_TIM_PWM_Start+0xfe>
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	2b10      	cmp	r3, #16
 80089a6:	d104      	bne.n	80089b2 <HAL_TIM_PWM_Start+0xf6>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80089b0:	e003      	b.n	80089ba <HAL_TIM_PWM_Start+0xfe>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2202      	movs	r2, #2
 80089b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2201      	movs	r2, #1
 80089c0:	6839      	ldr	r1, [r7, #0]
 80089c2:	4618      	mov	r0, r3
 80089c4:	f001 f82e 	bl	8009a24 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a33      	ldr	r2, [pc, #204]	; (8008a9c <HAL_TIM_PWM_Start+0x1e0>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d013      	beq.n	80089fa <HAL_TIM_PWM_Start+0x13e>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a32      	ldr	r2, [pc, #200]	; (8008aa0 <HAL_TIM_PWM_Start+0x1e4>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d00e      	beq.n	80089fa <HAL_TIM_PWM_Start+0x13e>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a30      	ldr	r2, [pc, #192]	; (8008aa4 <HAL_TIM_PWM_Start+0x1e8>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d009      	beq.n	80089fa <HAL_TIM_PWM_Start+0x13e>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a2f      	ldr	r2, [pc, #188]	; (8008aa8 <HAL_TIM_PWM_Start+0x1ec>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d004      	beq.n	80089fa <HAL_TIM_PWM_Start+0x13e>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a2d      	ldr	r2, [pc, #180]	; (8008aac <HAL_TIM_PWM_Start+0x1f0>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d101      	bne.n	80089fe <HAL_TIM_PWM_Start+0x142>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e000      	b.n	8008a00 <HAL_TIM_PWM_Start+0x144>
 80089fe:	2300      	movs	r3, #0
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d007      	beq.n	8008a14 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a20      	ldr	r2, [pc, #128]	; (8008a9c <HAL_TIM_PWM_Start+0x1e0>)
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d018      	beq.n	8008a50 <HAL_TIM_PWM_Start+0x194>
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a26:	d013      	beq.n	8008a50 <HAL_TIM_PWM_Start+0x194>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	4a20      	ldr	r2, [pc, #128]	; (8008ab0 <HAL_TIM_PWM_Start+0x1f4>)
 8008a2e:	4293      	cmp	r3, r2
 8008a30:	d00e      	beq.n	8008a50 <HAL_TIM_PWM_Start+0x194>
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4a1f      	ldr	r2, [pc, #124]	; (8008ab4 <HAL_TIM_PWM_Start+0x1f8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d009      	beq.n	8008a50 <HAL_TIM_PWM_Start+0x194>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	4a17      	ldr	r2, [pc, #92]	; (8008aa0 <HAL_TIM_PWM_Start+0x1e4>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d004      	beq.n	8008a50 <HAL_TIM_PWM_Start+0x194>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4a16      	ldr	r2, [pc, #88]	; (8008aa4 <HAL_TIM_PWM_Start+0x1e8>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d115      	bne.n	8008a7c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	689a      	ldr	r2, [r3, #8]
 8008a56:	4b18      	ldr	r3, [pc, #96]	; (8008ab8 <HAL_TIM_PWM_Start+0x1fc>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2b06      	cmp	r3, #6
 8008a60:	d015      	beq.n	8008a8e <HAL_TIM_PWM_Start+0x1d2>
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a68:	d011      	beq.n	8008a8e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f042 0201 	orr.w	r2, r2, #1
 8008a78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a7a:	e008      	b.n	8008a8e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f042 0201 	orr.w	r2, r2, #1
 8008a8a:	601a      	str	r2, [r3, #0]
 8008a8c:	e000      	b.n	8008a90 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	bf00      	nop
 8008a9c:	40012c00 	.word	0x40012c00
 8008aa0:	40013400 	.word	0x40013400
 8008aa4:	40014000 	.word	0x40014000
 8008aa8:	40014400 	.word	0x40014400
 8008aac:	40014800 	.word	0x40014800
 8008ab0:	40000400 	.word	0x40000400
 8008ab4:	40000800 	.word	0x40000800
 8008ab8:	00010007 	.word	0x00010007

08008abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	f003 0302 	and.w	r3, r3, #2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d020      	beq.n	8008b20 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	f003 0302 	and.w	r3, r3, #2
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d01b      	beq.n	8008b20 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f06f 0202 	mvn.w	r2, #2
 8008af0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2201      	movs	r2, #1
 8008af6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	f003 0303 	and.w	r3, r3, #3
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d003      	beq.n	8008b0e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fb40 	bl	800918c <HAL_TIM_IC_CaptureCallback>
 8008b0c:	e005      	b.n	8008b1a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fb32 	bl	8009178 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fb43 	bl	80091a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	f003 0304 	and.w	r3, r3, #4
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d020      	beq.n	8008b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f003 0304 	and.w	r3, r3, #4
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d01b      	beq.n	8008b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f06f 0204 	mvn.w	r2, #4
 8008b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2202      	movs	r2, #2
 8008b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d003      	beq.n	8008b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fb1a 	bl	800918c <HAL_TIM_IC_CaptureCallback>
 8008b58:	e005      	b.n	8008b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 fb0c 	bl	8009178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fb1d 	bl	80091a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f003 0308 	and.w	r3, r3, #8
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d020      	beq.n	8008bb8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f003 0308 	and.w	r3, r3, #8
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d01b      	beq.n	8008bb8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f06f 0208 	mvn.w	r2, #8
 8008b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2204      	movs	r2, #4
 8008b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	69db      	ldr	r3, [r3, #28]
 8008b96:	f003 0303 	and.w	r3, r3, #3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d003      	beq.n	8008ba6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 faf4 	bl	800918c <HAL_TIM_IC_CaptureCallback>
 8008ba4:	e005      	b.n	8008bb2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f000 fae6 	bl	8009178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 faf7 	bl	80091a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	f003 0310 	and.w	r3, r3, #16
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d020      	beq.n	8008c04 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	f003 0310 	and.w	r3, r3, #16
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d01b      	beq.n	8008c04 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f06f 0210 	mvn.w	r2, #16
 8008bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2208      	movs	r2, #8
 8008bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	69db      	ldr	r3, [r3, #28]
 8008be2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d003      	beq.n	8008bf2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 face 	bl	800918c <HAL_TIM_IC_CaptureCallback>
 8008bf0:	e005      	b.n	8008bfe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 fac0 	bl	8009178 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 fad1 	bl	80091a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	f003 0301 	and.w	r3, r3, #1
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00c      	beq.n	8008c28 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f003 0301 	and.w	r3, r3, #1
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d007      	beq.n	8008c28 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f06f 0201 	mvn.w	r2, #1
 8008c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7f9 f8ba 	bl	8001d9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d104      	bne.n	8008c3c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d00c      	beq.n	8008c56 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d007      	beq.n	8008c56 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8008c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f001 f825 	bl	8009ca0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00c      	beq.n	8008c7a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d007      	beq.n	8008c7a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008c72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 f81d 	bl	8009cb4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00c      	beq.n	8008c9e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d007      	beq.n	8008c9e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008c96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fa8b 	bl	80091b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	f003 0320 	and.w	r3, r3, #32
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d00c      	beq.n	8008cc2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f003 0320 	and.w	r3, r3, #32
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d007      	beq.n	8008cc2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f06f 0220 	mvn.w	r2, #32
 8008cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 ffe5 	bl	8009c8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d00c      	beq.n	8008ce6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d007      	beq.n	8008ce6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fff1 	bl	8009cc8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d00c      	beq.n	8008d0a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d007      	beq.n	8008d0a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 ffe9 	bl	8009cdc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d00c      	beq.n	8008d2e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d007      	beq.n	8008d2e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 ffe1 	bl	8009cf0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00c      	beq.n	8008d52 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d007      	beq.n	8008d52 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 ffd9 	bl	8009d04 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d52:	bf00      	nop
 8008d54:	3710      	adds	r7, #16
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}
	...

08008d5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d101      	bne.n	8008d7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d76:	2302      	movs	r3, #2
 8008d78:	e0ff      	b.n	8008f7a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2b14      	cmp	r3, #20
 8008d86:	f200 80f0 	bhi.w	8008f6a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d8a:	a201      	add	r2, pc, #4	; (adr r2, 8008d90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d90:	08008de5 	.word	0x08008de5
 8008d94:	08008f6b 	.word	0x08008f6b
 8008d98:	08008f6b 	.word	0x08008f6b
 8008d9c:	08008f6b 	.word	0x08008f6b
 8008da0:	08008e25 	.word	0x08008e25
 8008da4:	08008f6b 	.word	0x08008f6b
 8008da8:	08008f6b 	.word	0x08008f6b
 8008dac:	08008f6b 	.word	0x08008f6b
 8008db0:	08008e67 	.word	0x08008e67
 8008db4:	08008f6b 	.word	0x08008f6b
 8008db8:	08008f6b 	.word	0x08008f6b
 8008dbc:	08008f6b 	.word	0x08008f6b
 8008dc0:	08008ea7 	.word	0x08008ea7
 8008dc4:	08008f6b 	.word	0x08008f6b
 8008dc8:	08008f6b 	.word	0x08008f6b
 8008dcc:	08008f6b 	.word	0x08008f6b
 8008dd0:	08008ee9 	.word	0x08008ee9
 8008dd4:	08008f6b 	.word	0x08008f6b
 8008dd8:	08008f6b 	.word	0x08008f6b
 8008ddc:	08008f6b 	.word	0x08008f6b
 8008de0:	08008f29 	.word	0x08008f29
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	68b9      	ldr	r1, [r7, #8]
 8008dea:	4618      	mov	r0, r3
 8008dec:	f000 fa88 	bl	8009300 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	699a      	ldr	r2, [r3, #24]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f042 0208 	orr.w	r2, r2, #8
 8008dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	699a      	ldr	r2, [r3, #24]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f022 0204 	bic.w	r2, r2, #4
 8008e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	6999      	ldr	r1, [r3, #24]
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	691a      	ldr	r2, [r3, #16]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	430a      	orrs	r2, r1
 8008e20:	619a      	str	r2, [r3, #24]
      break;
 8008e22:	e0a5      	b.n	8008f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68b9      	ldr	r1, [r7, #8]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 faf8 	bl	8009420 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	699a      	ldr	r2, [r3, #24]
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	699a      	ldr	r2, [r3, #24]
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	6999      	ldr	r1, [r3, #24]
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	691b      	ldr	r3, [r3, #16]
 8008e5a:	021a      	lsls	r2, r3, #8
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	430a      	orrs	r2, r1
 8008e62:	619a      	str	r2, [r3, #24]
      break;
 8008e64:	e084      	b.n	8008f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68b9      	ldr	r1, [r7, #8]
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 fb61 	bl	8009534 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69da      	ldr	r2, [r3, #28]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	f042 0208 	orr.w	r2, r2, #8
 8008e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	69da      	ldr	r2, [r3, #28]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f022 0204 	bic.w	r2, r2, #4
 8008e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	69d9      	ldr	r1, [r3, #28]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	691a      	ldr	r2, [r3, #16]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	430a      	orrs	r2, r1
 8008ea2:	61da      	str	r2, [r3, #28]
      break;
 8008ea4:	e064      	b.n	8008f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68b9      	ldr	r1, [r7, #8]
 8008eac:	4618      	mov	r0, r3
 8008eae:	f000 fbc9 	bl	8009644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	69da      	ldr	r2, [r3, #28]
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ec0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	69da      	ldr	r2, [r3, #28]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ed0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	69d9      	ldr	r1, [r3, #28]
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	691b      	ldr	r3, [r3, #16]
 8008edc:	021a      	lsls	r2, r3, #8
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	430a      	orrs	r2, r1
 8008ee4:	61da      	str	r2, [r3, #28]
      break;
 8008ee6:	e043      	b.n	8008f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68b9      	ldr	r1, [r7, #8]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 fc32 	bl	8009758 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f042 0208 	orr.w	r2, r2, #8
 8008f02:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f022 0204 	bic.w	r2, r2, #4
 8008f12:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	691a      	ldr	r2, [r3, #16]
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	430a      	orrs	r2, r1
 8008f24:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008f26:	e023      	b.n	8008f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	68b9      	ldr	r1, [r7, #8]
 8008f2e:	4618      	mov	r0, r3
 8008f30:	f000 fc76 	bl	8009820 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f42:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f52:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	691b      	ldr	r3, [r3, #16]
 8008f5e:	021a      	lsls	r2, r3, #8
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	430a      	orrs	r2, r1
 8008f66:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008f68:	e002      	b.n	8008f70 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	75fb      	strb	r3, [r7, #23]
      break;
 8008f6e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3718      	adds	r7, #24
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop

08008f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
 8008f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f8e:	2300      	movs	r3, #0
 8008f90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d101      	bne.n	8008fa0 <HAL_TIM_ConfigClockSource+0x1c>
 8008f9c:	2302      	movs	r3, #2
 8008f9e:	e0de      	b.n	800915e <HAL_TIM_ConfigClockSource+0x1da>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2202      	movs	r2, #2
 8008fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008fbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	68ba      	ldr	r2, [r7, #8]
 8008fd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a63      	ldr	r2, [pc, #396]	; (8009168 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	f000 80a9 	beq.w	8009132 <HAL_TIM_ConfigClockSource+0x1ae>
 8008fe0:	4a61      	ldr	r2, [pc, #388]	; (8009168 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	f200 80ae 	bhi.w	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
 8008fe8:	4a60      	ldr	r2, [pc, #384]	; (800916c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	f000 80a1 	beq.w	8009132 <HAL_TIM_ConfigClockSource+0x1ae>
 8008ff0:	4a5e      	ldr	r2, [pc, #376]	; (800916c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	f200 80a6 	bhi.w	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
 8008ff8:	4a5d      	ldr	r2, [pc, #372]	; (8009170 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	f000 8099 	beq.w	8009132 <HAL_TIM_ConfigClockSource+0x1ae>
 8009000:	4a5b      	ldr	r2, [pc, #364]	; (8009170 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009002:	4293      	cmp	r3, r2
 8009004:	f200 809e 	bhi.w	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
 8009008:	4a5a      	ldr	r2, [pc, #360]	; (8009174 <HAL_TIM_ConfigClockSource+0x1f0>)
 800900a:	4293      	cmp	r3, r2
 800900c:	f000 8091 	beq.w	8009132 <HAL_TIM_ConfigClockSource+0x1ae>
 8009010:	4a58      	ldr	r2, [pc, #352]	; (8009174 <HAL_TIM_ConfigClockSource+0x1f0>)
 8009012:	4293      	cmp	r3, r2
 8009014:	f200 8096 	bhi.w	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
 8009018:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800901c:	f000 8089 	beq.w	8009132 <HAL_TIM_ConfigClockSource+0x1ae>
 8009020:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009024:	f200 808e 	bhi.w	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
 8009028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800902c:	d03e      	beq.n	80090ac <HAL_TIM_ConfigClockSource+0x128>
 800902e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009032:	f200 8087 	bhi.w	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
 8009036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800903a:	f000 8086 	beq.w	800914a <HAL_TIM_ConfigClockSource+0x1c6>
 800903e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009042:	d87f      	bhi.n	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
 8009044:	2b70      	cmp	r3, #112	; 0x70
 8009046:	d01a      	beq.n	800907e <HAL_TIM_ConfigClockSource+0xfa>
 8009048:	2b70      	cmp	r3, #112	; 0x70
 800904a:	d87b      	bhi.n	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
 800904c:	2b60      	cmp	r3, #96	; 0x60
 800904e:	d050      	beq.n	80090f2 <HAL_TIM_ConfigClockSource+0x16e>
 8009050:	2b60      	cmp	r3, #96	; 0x60
 8009052:	d877      	bhi.n	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
 8009054:	2b50      	cmp	r3, #80	; 0x50
 8009056:	d03c      	beq.n	80090d2 <HAL_TIM_ConfigClockSource+0x14e>
 8009058:	2b50      	cmp	r3, #80	; 0x50
 800905a:	d873      	bhi.n	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
 800905c:	2b40      	cmp	r3, #64	; 0x40
 800905e:	d058      	beq.n	8009112 <HAL_TIM_ConfigClockSource+0x18e>
 8009060:	2b40      	cmp	r3, #64	; 0x40
 8009062:	d86f      	bhi.n	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
 8009064:	2b30      	cmp	r3, #48	; 0x30
 8009066:	d064      	beq.n	8009132 <HAL_TIM_ConfigClockSource+0x1ae>
 8009068:	2b30      	cmp	r3, #48	; 0x30
 800906a:	d86b      	bhi.n	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
 800906c:	2b20      	cmp	r3, #32
 800906e:	d060      	beq.n	8009132 <HAL_TIM_ConfigClockSource+0x1ae>
 8009070:	2b20      	cmp	r3, #32
 8009072:	d867      	bhi.n	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
 8009074:	2b00      	cmp	r3, #0
 8009076:	d05c      	beq.n	8009132 <HAL_TIM_ConfigClockSource+0x1ae>
 8009078:	2b10      	cmp	r3, #16
 800907a:	d05a      	beq.n	8009132 <HAL_TIM_ConfigClockSource+0x1ae>
 800907c:	e062      	b.n	8009144 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800908e:	f000 fca9 	bl	80099e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80090a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68ba      	ldr	r2, [r7, #8]
 80090a8:	609a      	str	r2, [r3, #8]
      break;
 80090aa:	e04f      	b.n	800914c <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090bc:	f000 fc92 	bl	80099e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090ce:	609a      	str	r2, [r3, #8]
      break;
 80090d0:	e03c      	b.n	800914c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090de:	461a      	mov	r2, r3
 80090e0:	f000 fc04 	bl	80098ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2150      	movs	r1, #80	; 0x50
 80090ea:	4618      	mov	r0, r3
 80090ec:	f000 fc5d 	bl	80099aa <TIM_ITRx_SetConfig>
      break;
 80090f0:	e02c      	b.n	800914c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090fe:	461a      	mov	r2, r3
 8009100:	f000 fc23 	bl	800994a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2160      	movs	r1, #96	; 0x60
 800910a:	4618      	mov	r0, r3
 800910c:	f000 fc4d 	bl	80099aa <TIM_ITRx_SetConfig>
      break;
 8009110:	e01c      	b.n	800914c <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800911e:	461a      	mov	r2, r3
 8009120:	f000 fbe4 	bl	80098ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	2140      	movs	r1, #64	; 0x40
 800912a:	4618      	mov	r0, r3
 800912c:	f000 fc3d 	bl	80099aa <TIM_ITRx_SetConfig>
      break;
 8009130:	e00c      	b.n	800914c <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681a      	ldr	r2, [r3, #0]
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4619      	mov	r1, r3
 800913c:	4610      	mov	r0, r2
 800913e:	f000 fc34 	bl	80099aa <TIM_ITRx_SetConfig>
      break;
 8009142:	e003      	b.n	800914c <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	73fb      	strb	r3, [r7, #15]
      break;
 8009148:	e000      	b.n	800914c <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800914a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2201      	movs	r2, #1
 8009150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2200      	movs	r2, #0
 8009158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800915c:	7bfb      	ldrb	r3, [r7, #15]
}
 800915e:	4618      	mov	r0, r3
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	00100070 	.word	0x00100070
 800916c:	00100040 	.word	0x00100040
 8009170:	00100030 	.word	0x00100030
 8009174:	00100020 	.word	0x00100020

08009178 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009178:	b480      	push	{r7}
 800917a:	b083      	sub	sp, #12
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009180:	bf00      	nop
 8009182:	370c      	adds	r7, #12
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr

0800918c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800918c:	b480      	push	{r7}
 800918e:	b083      	sub	sp, #12
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009194:	bf00      	nop
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b083      	sub	sp, #12
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091a8:	bf00      	nop
 80091aa:	370c      	adds	r7, #12
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091bc:	bf00      	nop
 80091be:	370c      	adds	r7, #12
 80091c0:	46bd      	mov	sp, r7
 80091c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c6:	4770      	bx	lr

080091c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
 80091d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a42      	ldr	r2, [pc, #264]	; (80092e4 <TIM_Base_SetConfig+0x11c>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d00f      	beq.n	8009200 <TIM_Base_SetConfig+0x38>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091e6:	d00b      	beq.n	8009200 <TIM_Base_SetConfig+0x38>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a3f      	ldr	r2, [pc, #252]	; (80092e8 <TIM_Base_SetConfig+0x120>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d007      	beq.n	8009200 <TIM_Base_SetConfig+0x38>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a3e      	ldr	r2, [pc, #248]	; (80092ec <TIM_Base_SetConfig+0x124>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d003      	beq.n	8009200 <TIM_Base_SetConfig+0x38>
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	4a3d      	ldr	r2, [pc, #244]	; (80092f0 <TIM_Base_SetConfig+0x128>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d108      	bne.n	8009212 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	68fa      	ldr	r2, [r7, #12]
 800920e:	4313      	orrs	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a33      	ldr	r2, [pc, #204]	; (80092e4 <TIM_Base_SetConfig+0x11c>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d01b      	beq.n	8009252 <TIM_Base_SetConfig+0x8a>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009220:	d017      	beq.n	8009252 <TIM_Base_SetConfig+0x8a>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	4a30      	ldr	r2, [pc, #192]	; (80092e8 <TIM_Base_SetConfig+0x120>)
 8009226:	4293      	cmp	r3, r2
 8009228:	d013      	beq.n	8009252 <TIM_Base_SetConfig+0x8a>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4a2f      	ldr	r2, [pc, #188]	; (80092ec <TIM_Base_SetConfig+0x124>)
 800922e:	4293      	cmp	r3, r2
 8009230:	d00f      	beq.n	8009252 <TIM_Base_SetConfig+0x8a>
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	4a2e      	ldr	r2, [pc, #184]	; (80092f0 <TIM_Base_SetConfig+0x128>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d00b      	beq.n	8009252 <TIM_Base_SetConfig+0x8a>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a2d      	ldr	r2, [pc, #180]	; (80092f4 <TIM_Base_SetConfig+0x12c>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d007      	beq.n	8009252 <TIM_Base_SetConfig+0x8a>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a2c      	ldr	r2, [pc, #176]	; (80092f8 <TIM_Base_SetConfig+0x130>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d003      	beq.n	8009252 <TIM_Base_SetConfig+0x8a>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a2b      	ldr	r2, [pc, #172]	; (80092fc <TIM_Base_SetConfig+0x134>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d108      	bne.n	8009264 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	68fa      	ldr	r2, [r7, #12]
 8009260:	4313      	orrs	r3, r2
 8009262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	4313      	orrs	r3, r2
 8009270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	689a      	ldr	r2, [r3, #8]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a16      	ldr	r2, [pc, #88]	; (80092e4 <TIM_Base_SetConfig+0x11c>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d00f      	beq.n	80092b0 <TIM_Base_SetConfig+0xe8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a17      	ldr	r2, [pc, #92]	; (80092f0 <TIM_Base_SetConfig+0x128>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d00b      	beq.n	80092b0 <TIM_Base_SetConfig+0xe8>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a16      	ldr	r2, [pc, #88]	; (80092f4 <TIM_Base_SetConfig+0x12c>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d007      	beq.n	80092b0 <TIM_Base_SetConfig+0xe8>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	4a15      	ldr	r2, [pc, #84]	; (80092f8 <TIM_Base_SetConfig+0x130>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d003      	beq.n	80092b0 <TIM_Base_SetConfig+0xe8>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a14      	ldr	r2, [pc, #80]	; (80092fc <TIM_Base_SetConfig+0x134>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d103      	bne.n	80092b8 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	691a      	ldr	r2, [r3, #16]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2201      	movs	r2, #1
 80092bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	2b01      	cmp	r3, #1
 80092c8:	d105      	bne.n	80092d6 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	691b      	ldr	r3, [r3, #16]
 80092ce:	f023 0201 	bic.w	r2, r3, #1
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	611a      	str	r2, [r3, #16]
  }
}
 80092d6:	bf00      	nop
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
 80092e2:	bf00      	nop
 80092e4:	40012c00 	.word	0x40012c00
 80092e8:	40000400 	.word	0x40000400
 80092ec:	40000800 	.word	0x40000800
 80092f0:	40013400 	.word	0x40013400
 80092f4:	40014000 	.word	0x40014000
 80092f8:	40014400 	.word	0x40014400
 80092fc:	40014800 	.word	0x40014800

08009300 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009300:	b480      	push	{r7}
 8009302:	b087      	sub	sp, #28
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6a1b      	ldr	r3, [r3, #32]
 8009314:	f023 0201 	bic.w	r2, r3, #1
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	699b      	ldr	r3, [r3, #24]
 8009326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800932e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f023 0303 	bic.w	r3, r3, #3
 800933a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	4313      	orrs	r3, r2
 8009344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f023 0302 	bic.w	r3, r3, #2
 800934c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	689b      	ldr	r3, [r3, #8]
 8009352:	697a      	ldr	r2, [r7, #20]
 8009354:	4313      	orrs	r3, r2
 8009356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	4a2c      	ldr	r2, [pc, #176]	; (800940c <TIM_OC1_SetConfig+0x10c>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d00f      	beq.n	8009380 <TIM_OC1_SetConfig+0x80>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a2b      	ldr	r2, [pc, #172]	; (8009410 <TIM_OC1_SetConfig+0x110>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d00b      	beq.n	8009380 <TIM_OC1_SetConfig+0x80>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a2a      	ldr	r2, [pc, #168]	; (8009414 <TIM_OC1_SetConfig+0x114>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d007      	beq.n	8009380 <TIM_OC1_SetConfig+0x80>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a29      	ldr	r2, [pc, #164]	; (8009418 <TIM_OC1_SetConfig+0x118>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d003      	beq.n	8009380 <TIM_OC1_SetConfig+0x80>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a28      	ldr	r2, [pc, #160]	; (800941c <TIM_OC1_SetConfig+0x11c>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d10c      	bne.n	800939a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	f023 0308 	bic.w	r3, r3, #8
 8009386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	68db      	ldr	r3, [r3, #12]
 800938c:	697a      	ldr	r2, [r7, #20]
 800938e:	4313      	orrs	r3, r2
 8009390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f023 0304 	bic.w	r3, r3, #4
 8009398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a1b      	ldr	r2, [pc, #108]	; (800940c <TIM_OC1_SetConfig+0x10c>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d00f      	beq.n	80093c2 <TIM_OC1_SetConfig+0xc2>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a1a      	ldr	r2, [pc, #104]	; (8009410 <TIM_OC1_SetConfig+0x110>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d00b      	beq.n	80093c2 <TIM_OC1_SetConfig+0xc2>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a19      	ldr	r2, [pc, #100]	; (8009414 <TIM_OC1_SetConfig+0x114>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d007      	beq.n	80093c2 <TIM_OC1_SetConfig+0xc2>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a18      	ldr	r2, [pc, #96]	; (8009418 <TIM_OC1_SetConfig+0x118>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d003      	beq.n	80093c2 <TIM_OC1_SetConfig+0xc2>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a17      	ldr	r2, [pc, #92]	; (800941c <TIM_OC1_SetConfig+0x11c>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d111      	bne.n	80093e6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093c2:	693b      	ldr	r3, [r7, #16]
 80093c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80093d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	695b      	ldr	r3, [r3, #20]
 80093d6:	693a      	ldr	r2, [r7, #16]
 80093d8:	4313      	orrs	r3, r2
 80093da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	699b      	ldr	r3, [r3, #24]
 80093e0:	693a      	ldr	r2, [r7, #16]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	693a      	ldr	r2, [r7, #16]
 80093ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	697a      	ldr	r2, [r7, #20]
 80093fe:	621a      	str	r2, [r3, #32]
}
 8009400:	bf00      	nop
 8009402:	371c      	adds	r7, #28
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr
 800940c:	40012c00 	.word	0x40012c00
 8009410:	40013400 	.word	0x40013400
 8009414:	40014000 	.word	0x40014000
 8009418:	40014400 	.word	0x40014400
 800941c:	40014800 	.word	0x40014800

08009420 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009420:	b480      	push	{r7}
 8009422:	b087      	sub	sp, #28
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
 8009428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6a1b      	ldr	r3, [r3, #32]
 800942e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6a1b      	ldr	r3, [r3, #32]
 8009434:	f023 0210 	bic.w	r2, r3, #16
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	699b      	ldr	r3, [r3, #24]
 8009446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800944e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800945a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	021b      	lsls	r3, r3, #8
 8009462:	68fa      	ldr	r2, [r7, #12]
 8009464:	4313      	orrs	r3, r2
 8009466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	f023 0320 	bic.w	r3, r3, #32
 800946e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	689b      	ldr	r3, [r3, #8]
 8009474:	011b      	lsls	r3, r3, #4
 8009476:	697a      	ldr	r2, [r7, #20]
 8009478:	4313      	orrs	r3, r2
 800947a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	4a28      	ldr	r2, [pc, #160]	; (8009520 <TIM_OC2_SetConfig+0x100>)
 8009480:	4293      	cmp	r3, r2
 8009482:	d003      	beq.n	800948c <TIM_OC2_SetConfig+0x6c>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	4a27      	ldr	r2, [pc, #156]	; (8009524 <TIM_OC2_SetConfig+0x104>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d10d      	bne.n	80094a8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	68db      	ldr	r3, [r3, #12]
 8009498:	011b      	lsls	r3, r3, #4
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	4313      	orrs	r3, r2
 800949e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a1d      	ldr	r2, [pc, #116]	; (8009520 <TIM_OC2_SetConfig+0x100>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d00f      	beq.n	80094d0 <TIM_OC2_SetConfig+0xb0>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a1c      	ldr	r2, [pc, #112]	; (8009524 <TIM_OC2_SetConfig+0x104>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d00b      	beq.n	80094d0 <TIM_OC2_SetConfig+0xb0>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a1b      	ldr	r2, [pc, #108]	; (8009528 <TIM_OC2_SetConfig+0x108>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d007      	beq.n	80094d0 <TIM_OC2_SetConfig+0xb0>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a1a      	ldr	r2, [pc, #104]	; (800952c <TIM_OC2_SetConfig+0x10c>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d003      	beq.n	80094d0 <TIM_OC2_SetConfig+0xb0>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	4a19      	ldr	r2, [pc, #100]	; (8009530 <TIM_OC2_SetConfig+0x110>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d113      	bne.n	80094f8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094d8:	693b      	ldr	r3, [r7, #16]
 80094da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	009b      	lsls	r3, r3, #2
 80094e6:	693a      	ldr	r2, [r7, #16]
 80094e8:	4313      	orrs	r3, r2
 80094ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	699b      	ldr	r3, [r3, #24]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	685a      	ldr	r2, [r3, #4]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	697a      	ldr	r2, [r7, #20]
 8009510:	621a      	str	r2, [r3, #32]
}
 8009512:	bf00      	nop
 8009514:	371c      	adds	r7, #28
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	40012c00 	.word	0x40012c00
 8009524:	40013400 	.word	0x40013400
 8009528:	40014000 	.word	0x40014000
 800952c:	40014400 	.word	0x40014400
 8009530:	40014800 	.word	0x40014800

08009534 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009534:	b480      	push	{r7}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a1b      	ldr	r3, [r3, #32]
 8009548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f023 0303 	bic.w	r3, r3, #3
 800956e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	4313      	orrs	r3, r2
 8009578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800957a:	697b      	ldr	r3, [r7, #20]
 800957c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	021b      	lsls	r3, r3, #8
 8009588:	697a      	ldr	r2, [r7, #20]
 800958a:	4313      	orrs	r3, r2
 800958c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	4a27      	ldr	r2, [pc, #156]	; (8009630 <TIM_OC3_SetConfig+0xfc>)
 8009592:	4293      	cmp	r3, r2
 8009594:	d003      	beq.n	800959e <TIM_OC3_SetConfig+0x6a>
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	4a26      	ldr	r2, [pc, #152]	; (8009634 <TIM_OC3_SetConfig+0x100>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d10d      	bne.n	80095ba <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	68db      	ldr	r3, [r3, #12]
 80095aa:	021b      	lsls	r3, r3, #8
 80095ac:	697a      	ldr	r2, [r7, #20]
 80095ae:	4313      	orrs	r3, r2
 80095b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a1c      	ldr	r2, [pc, #112]	; (8009630 <TIM_OC3_SetConfig+0xfc>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d00f      	beq.n	80095e2 <TIM_OC3_SetConfig+0xae>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a1b      	ldr	r2, [pc, #108]	; (8009634 <TIM_OC3_SetConfig+0x100>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d00b      	beq.n	80095e2 <TIM_OC3_SetConfig+0xae>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a1a      	ldr	r2, [pc, #104]	; (8009638 <TIM_OC3_SetConfig+0x104>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d007      	beq.n	80095e2 <TIM_OC3_SetConfig+0xae>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a19      	ldr	r2, [pc, #100]	; (800963c <TIM_OC3_SetConfig+0x108>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d003      	beq.n	80095e2 <TIM_OC3_SetConfig+0xae>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a18      	ldr	r2, [pc, #96]	; (8009640 <TIM_OC3_SetConfig+0x10c>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d113      	bne.n	800960a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	695b      	ldr	r3, [r3, #20]
 80095f6:	011b      	lsls	r3, r3, #4
 80095f8:	693a      	ldr	r2, [r7, #16]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095fe:	683b      	ldr	r3, [r7, #0]
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	011b      	lsls	r3, r3, #4
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	4313      	orrs	r3, r2
 8009608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	68fa      	ldr	r2, [r7, #12]
 8009614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	685a      	ldr	r2, [r3, #4]
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	697a      	ldr	r2, [r7, #20]
 8009622:	621a      	str	r2, [r3, #32]
}
 8009624:	bf00      	nop
 8009626:	371c      	adds	r7, #28
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	40012c00 	.word	0x40012c00
 8009634:	40013400 	.word	0x40013400
 8009638:	40014000 	.word	0x40014000
 800963c:	40014400 	.word	0x40014400
 8009640:	40014800 	.word	0x40014800

08009644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009644:	b480      	push	{r7}
 8009646:	b087      	sub	sp, #28
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	6a1b      	ldr	r3, [r3, #32]
 8009652:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a1b      	ldr	r3, [r3, #32]
 8009658:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	69db      	ldr	r3, [r3, #28]
 800966a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009672:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800967e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	021b      	lsls	r3, r3, #8
 8009686:	68fa      	ldr	r2, [r7, #12]
 8009688:	4313      	orrs	r3, r2
 800968a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800968c:	697b      	ldr	r3, [r7, #20]
 800968e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009692:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	031b      	lsls	r3, r3, #12
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	4313      	orrs	r3, r2
 800969e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	4a28      	ldr	r2, [pc, #160]	; (8009744 <TIM_OC4_SetConfig+0x100>)
 80096a4:	4293      	cmp	r3, r2
 80096a6:	d003      	beq.n	80096b0 <TIM_OC4_SetConfig+0x6c>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	4a27      	ldr	r2, [pc, #156]	; (8009748 <TIM_OC4_SetConfig+0x104>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d10d      	bne.n	80096cc <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80096b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	68db      	ldr	r3, [r3, #12]
 80096bc:	031b      	lsls	r3, r3, #12
 80096be:	697a      	ldr	r2, [r7, #20]
 80096c0:	4313      	orrs	r3, r2
 80096c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a1d      	ldr	r2, [pc, #116]	; (8009744 <TIM_OC4_SetConfig+0x100>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d00f      	beq.n	80096f4 <TIM_OC4_SetConfig+0xb0>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a1c      	ldr	r2, [pc, #112]	; (8009748 <TIM_OC4_SetConfig+0x104>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d00b      	beq.n	80096f4 <TIM_OC4_SetConfig+0xb0>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	4a1b      	ldr	r2, [pc, #108]	; (800974c <TIM_OC4_SetConfig+0x108>)
 80096e0:	4293      	cmp	r3, r2
 80096e2:	d007      	beq.n	80096f4 <TIM_OC4_SetConfig+0xb0>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	4a1a      	ldr	r2, [pc, #104]	; (8009750 <TIM_OC4_SetConfig+0x10c>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d003      	beq.n	80096f4 <TIM_OC4_SetConfig+0xb0>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	4a19      	ldr	r2, [pc, #100]	; (8009754 <TIM_OC4_SetConfig+0x110>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d113      	bne.n	800971c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096fa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009702:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	695b      	ldr	r3, [r3, #20]
 8009708:	019b      	lsls	r3, r3, #6
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	4313      	orrs	r3, r2
 800970e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	699b      	ldr	r3, [r3, #24]
 8009714:	019b      	lsls	r3, r3, #6
 8009716:	693a      	ldr	r2, [r7, #16]
 8009718:	4313      	orrs	r3, r2
 800971a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	693a      	ldr	r2, [r7, #16]
 8009720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	685a      	ldr	r2, [r3, #4]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	697a      	ldr	r2, [r7, #20]
 8009734:	621a      	str	r2, [r3, #32]
}
 8009736:	bf00      	nop
 8009738:	371c      	adds	r7, #28
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	40012c00 	.word	0x40012c00
 8009748:	40013400 	.word	0x40013400
 800974c:	40014000 	.word	0x40014000
 8009750:	40014400 	.word	0x40014400
 8009754:	40014800 	.word	0x40014800

08009758 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009758:	b480      	push	{r7}
 800975a:	b087      	sub	sp, #28
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a1b      	ldr	r3, [r3, #32]
 800976c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800977e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800978a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	68fa      	ldr	r2, [r7, #12]
 8009792:	4313      	orrs	r3, r2
 8009794:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009796:	693b      	ldr	r3, [r7, #16]
 8009798:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800979c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	041b      	lsls	r3, r3, #16
 80097a4:	693a      	ldr	r2, [r7, #16]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a17      	ldr	r2, [pc, #92]	; (800980c <TIM_OC5_SetConfig+0xb4>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d00f      	beq.n	80097d2 <TIM_OC5_SetConfig+0x7a>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	4a16      	ldr	r2, [pc, #88]	; (8009810 <TIM_OC5_SetConfig+0xb8>)
 80097b6:	4293      	cmp	r3, r2
 80097b8:	d00b      	beq.n	80097d2 <TIM_OC5_SetConfig+0x7a>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	4a15      	ldr	r2, [pc, #84]	; (8009814 <TIM_OC5_SetConfig+0xbc>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d007      	beq.n	80097d2 <TIM_OC5_SetConfig+0x7a>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a14      	ldr	r2, [pc, #80]	; (8009818 <TIM_OC5_SetConfig+0xc0>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d003      	beq.n	80097d2 <TIM_OC5_SetConfig+0x7a>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a13      	ldr	r2, [pc, #76]	; (800981c <TIM_OC5_SetConfig+0xc4>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d109      	bne.n	80097e6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80097d2:	697b      	ldr	r3, [r7, #20]
 80097d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	695b      	ldr	r3, [r3, #20]
 80097de:	021b      	lsls	r3, r3, #8
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	685a      	ldr	r2, [r3, #4]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	621a      	str	r2, [r3, #32]
}
 8009800:	bf00      	nop
 8009802:	371c      	adds	r7, #28
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr
 800980c:	40012c00 	.word	0x40012c00
 8009810:	40013400 	.word	0x40013400
 8009814:	40014000 	.word	0x40014000
 8009818:	40014400 	.word	0x40014400
 800981c:	40014800 	.word	0x40014800

08009820 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009820:	b480      	push	{r7}
 8009822:	b087      	sub	sp, #28
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6a1b      	ldr	r3, [r3, #32]
 800982e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6a1b      	ldr	r3, [r3, #32]
 8009834:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800984e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	021b      	lsls	r3, r3, #8
 800985a:	68fa      	ldr	r2, [r7, #12]
 800985c:	4313      	orrs	r3, r2
 800985e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009866:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	689b      	ldr	r3, [r3, #8]
 800986c:	051b      	lsls	r3, r3, #20
 800986e:	693a      	ldr	r2, [r7, #16]
 8009870:	4313      	orrs	r3, r2
 8009872:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	4a18      	ldr	r2, [pc, #96]	; (80098d8 <TIM_OC6_SetConfig+0xb8>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d00f      	beq.n	800989c <TIM_OC6_SetConfig+0x7c>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	4a17      	ldr	r2, [pc, #92]	; (80098dc <TIM_OC6_SetConfig+0xbc>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d00b      	beq.n	800989c <TIM_OC6_SetConfig+0x7c>
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a16      	ldr	r2, [pc, #88]	; (80098e0 <TIM_OC6_SetConfig+0xc0>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d007      	beq.n	800989c <TIM_OC6_SetConfig+0x7c>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a15      	ldr	r2, [pc, #84]	; (80098e4 <TIM_OC6_SetConfig+0xc4>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d003      	beq.n	800989c <TIM_OC6_SetConfig+0x7c>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a14      	ldr	r2, [pc, #80]	; (80098e8 <TIM_OC6_SetConfig+0xc8>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d109      	bne.n	80098b0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	695b      	ldr	r3, [r3, #20]
 80098a8:	029b      	lsls	r3, r3, #10
 80098aa:	697a      	ldr	r2, [r7, #20]
 80098ac:	4313      	orrs	r3, r2
 80098ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	697a      	ldr	r2, [r7, #20]
 80098b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	621a      	str	r2, [r3, #32]
}
 80098ca:	bf00      	nop
 80098cc:	371c      	adds	r7, #28
 80098ce:	46bd      	mov	sp, r7
 80098d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d4:	4770      	bx	lr
 80098d6:	bf00      	nop
 80098d8:	40012c00 	.word	0x40012c00
 80098dc:	40013400 	.word	0x40013400
 80098e0:	40014000 	.word	0x40014000
 80098e4:	40014400 	.word	0x40014400
 80098e8:	40014800 	.word	0x40014800

080098ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	60f8      	str	r0, [r7, #12]
 80098f4:	60b9      	str	r1, [r7, #8]
 80098f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6a1b      	ldr	r3, [r3, #32]
 80098fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	6a1b      	ldr	r3, [r3, #32]
 8009902:	f023 0201 	bic.w	r2, r3, #1
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	011b      	lsls	r3, r3, #4
 800991c:	693a      	ldr	r2, [r7, #16]
 800991e:	4313      	orrs	r3, r2
 8009920:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	f023 030a 	bic.w	r3, r3, #10
 8009928:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	4313      	orrs	r3, r2
 8009930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	693a      	ldr	r2, [r7, #16]
 8009936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	697a      	ldr	r2, [r7, #20]
 800993c:	621a      	str	r2, [r3, #32]
}
 800993e:	bf00      	nop
 8009940:	371c      	adds	r7, #28
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr

0800994a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800994a:	b480      	push	{r7}
 800994c:	b087      	sub	sp, #28
 800994e:	af00      	add	r7, sp, #0
 8009950:	60f8      	str	r0, [r7, #12]
 8009952:	60b9      	str	r1, [r7, #8]
 8009954:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	6a1b      	ldr	r3, [r3, #32]
 800995a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	6a1b      	ldr	r3, [r3, #32]
 8009960:	f023 0210 	bic.w	r2, r3, #16
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	699b      	ldr	r3, [r3, #24]
 800996c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009974:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	031b      	lsls	r3, r3, #12
 800997a:	693a      	ldr	r2, [r7, #16]
 800997c:	4313      	orrs	r3, r2
 800997e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009986:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	011b      	lsls	r3, r3, #4
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	4313      	orrs	r3, r2
 8009990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	697a      	ldr	r2, [r7, #20]
 800999c:	621a      	str	r2, [r3, #32]
}
 800999e:	bf00      	nop
 80099a0:	371c      	adds	r7, #28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099aa:	b480      	push	{r7}
 80099ac:	b085      	sub	sp, #20
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	689b      	ldr	r3, [r3, #8]
 80099b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80099c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	f043 0307 	orr.w	r3, r3, #7
 80099d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	609a      	str	r2, [r3, #8]
}
 80099d8:	bf00      	nop
 80099da:	3714      	adds	r7, #20
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b087      	sub	sp, #28
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	689b      	ldr	r3, [r3, #8]
 80099f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80099f8:	697b      	ldr	r3, [r7, #20]
 80099fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80099fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	021a      	lsls	r2, r3, #8
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	431a      	orrs	r2, r3
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	697a      	ldr	r2, [r7, #20]
 8009a16:	609a      	str	r2, [r3, #8]
}
 8009a18:	bf00      	nop
 8009a1a:	371c      	adds	r7, #28
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	60b9      	str	r1, [r7, #8]
 8009a2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f003 031f 	and.w	r3, r3, #31
 8009a36:	2201      	movs	r2, #1
 8009a38:	fa02 f303 	lsl.w	r3, r2, r3
 8009a3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	6a1a      	ldr	r2, [r3, #32]
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	43db      	mvns	r3, r3
 8009a46:	401a      	ands	r2, r3
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	6a1a      	ldr	r2, [r3, #32]
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	f003 031f 	and.w	r3, r3, #31
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	fa01 f303 	lsl.w	r3, r1, r3
 8009a5c:	431a      	orrs	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	621a      	str	r2, [r3, #32]
}
 8009a62:	bf00      	nop
 8009a64:	371c      	adds	r7, #28
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
	...

08009a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e065      	b.n	8009b54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2202      	movs	r2, #2
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a2c      	ldr	r2, [pc, #176]	; (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d004      	beq.n	8009abc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a2b      	ldr	r2, [pc, #172]	; (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d108      	bne.n	8009ace <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ac2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4313      	orrs	r3, r2
 8009acc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009ad4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	4313      	orrs	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a1b      	ldr	r2, [pc, #108]	; (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d018      	beq.n	8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009afe:	d013      	beq.n	8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a18      	ldr	r2, [pc, #96]	; (8009b68 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d00e      	beq.n	8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a17      	ldr	r2, [pc, #92]	; (8009b6c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d009      	beq.n	8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a12      	ldr	r2, [pc, #72]	; (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d004      	beq.n	8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a13      	ldr	r2, [pc, #76]	; (8009b70 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d10c      	bne.n	8009b42 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b2e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	689b      	ldr	r3, [r3, #8]
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	4313      	orrs	r3, r2
 8009b38:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b52:	2300      	movs	r3, #0
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3714      	adds	r7, #20
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	40012c00 	.word	0x40012c00
 8009b64:	40013400 	.word	0x40013400
 8009b68:	40000400 	.word	0x40000400
 8009b6c:	40000800 	.word	0x40000800
 8009b70:	40014000 	.word	0x40014000

08009b74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b88:	2b01      	cmp	r3, #1
 8009b8a:	d101      	bne.n	8009b90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009b8c:	2302      	movs	r3, #2
 8009b8e:	e073      	b.n	8009c78 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2201      	movs	r2, #1
 8009b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009b9e:	683b      	ldr	r3, [r7, #0]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	691b      	ldr	r3, [r3, #16]
 8009bda:	4313      	orrs	r3, r2
 8009bdc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	699b      	ldr	r3, [r3, #24]
 8009c04:	041b      	lsls	r3, r3, #16
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	69db      	ldr	r3, [r3, #28]
 8009c14:	4313      	orrs	r3, r2
 8009c16:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a19      	ldr	r2, [pc, #100]	; (8009c84 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d004      	beq.n	8009c2c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a18      	ldr	r2, [pc, #96]	; (8009c88 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d11c      	bne.n	8009c66 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c36:	051b      	lsls	r3, r3, #20
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009c42:	683b      	ldr	r3, [r7, #0]
 8009c44:	6a1b      	ldr	r3, [r3, #32]
 8009c46:	4313      	orrs	r3, r2
 8009c48:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c54:	4313      	orrs	r3, r2
 8009c56:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c62:	4313      	orrs	r3, r2
 8009c64:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c76:	2300      	movs	r3, #0
}
 8009c78:	4618      	mov	r0, r3
 8009c7a:	3714      	adds	r7, #20
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c82:	4770      	bx	lr
 8009c84:	40012c00 	.word	0x40012c00
 8009c88:	40013400 	.word	0x40013400

08009c8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009cd0:	bf00      	nop
 8009cd2:	370c      	adds	r7, #12
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cda:	4770      	bx	lr

08009cdc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009cdc:	b480      	push	{r7}
 8009cde:	b083      	sub	sp, #12
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009ce4:	bf00      	nop
 8009ce6:	370c      	adds	r7, #12
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cee:	4770      	bx	lr

08009cf0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b083      	sub	sp, #12
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009d0c:	bf00      	nop
 8009d0e:	370c      	adds	r7, #12
 8009d10:	46bd      	mov	sp, r7
 8009d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d16:	4770      	bx	lr

08009d18 <_ZdlPvj>:
 8009d18:	f000 b97a 	b.w	800a010 <_ZdlPv>

08009d1c <_ZNSaIcEC1Ev>:
 8009d1c:	4770      	bx	lr

08009d1e <_ZNSaIcED1Ev>:
 8009d1e:	4770      	bx	lr

08009d20 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8009d20:	b10a      	cbz	r2, 8009d26 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8009d22:	f000 bd34 	b.w	800a78e <memcpy>
 8009d26:	4770      	bx	lr

08009d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8009d28:	b508      	push	{r3, lr}
 8009d2a:	680b      	ldr	r3, [r1, #0]
 8009d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d30:	d302      	bcc.n	8009d38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8009d32:	480d      	ldr	r0, [pc, #52]	; (8009d68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8009d34:	f000 f985 	bl	800a042 <_ZSt20__throw_length_errorPKc>
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d90b      	bls.n	8009d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8009d3c:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8009d40:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8009d44:	d206      	bcs.n	8009d54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8009d46:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009d4a:	bf2a      	itet	cs
 8009d4c:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8009d50:	6008      	strcc	r0, [r1, #0]
 8009d52:	600b      	strcs	r3, [r1, #0]
 8009d54:	6808      	ldr	r0, [r1, #0]
 8009d56:	3001      	adds	r0, #1
 8009d58:	d501      	bpl.n	8009d5e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8009d5a:	f000 f96c 	bl	800a036 <_ZSt17__throw_bad_allocv>
 8009d5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009d62:	f000 b957 	b.w	800a014 <_Znwj>
 8009d66:	bf00      	nop
 8009d68:	0800b460 	.word	0x0800b460

08009d6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8009d6c:	f850 3b08 	ldr.w	r3, [r0], #8
 8009d70:	4283      	cmp	r3, r0
 8009d72:	d002      	beq.n	8009d7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8009d74:	4618      	mov	r0, r3
 8009d76:	f000 b94b 	b.w	800a010 <_ZdlPv>
 8009d7a:	4770      	bx	lr

08009d7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8009d7c:	2a01      	cmp	r2, #1
 8009d7e:	b410      	push	{r4}
 8009d80:	d104      	bne.n	8009d8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8009d82:	780a      	ldrb	r2, [r1, #0]
 8009d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d88:	7002      	strb	r2, [r0, #0]
 8009d8a:	4770      	bx	lr
 8009d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d90:	f7ff bfc6 	b.w	8009d20 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08009d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8009d94:	b508      	push	{r3, lr}
 8009d96:	1a52      	subs	r2, r2, r1
 8009d98:	f7ff fff0 	bl	8009d7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009d9c:	bd08      	pop	{r3, pc}

08009d9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8009d9e:	b508      	push	{r3, lr}
 8009da0:	1a52      	subs	r2, r2, r1
 8009da2:	f7ff ffeb 	bl	8009d7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009da6:	bd08      	pop	{r3, pc}

08009da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8009da8:	4288      	cmp	r0, r1
 8009daa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dac:	4604      	mov	r4, r0
 8009dae:	460e      	mov	r6, r1
 8009db0:	d01e      	beq.n	8009df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 8009db2:	4603      	mov	r3, r0
 8009db4:	684d      	ldr	r5, [r1, #4]
 8009db6:	f853 2b08 	ldr.w	r2, [r3], #8
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	bf14      	ite	ne
 8009dbe:	6882      	ldrne	r2, [r0, #8]
 8009dc0:	220f      	moveq	r2, #15
 8009dc2:	42aa      	cmp	r2, r5
 8009dc4:	d20a      	bcs.n	8009ddc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8009dc6:	a901      	add	r1, sp, #4
 8009dc8:	9501      	str	r5, [sp, #4]
 8009dca:	f7ff ffad 	bl	8009d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009dce:	4607      	mov	r7, r0
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f7ff ffcb 	bl	8009d6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009dd6:	9b01      	ldr	r3, [sp, #4]
 8009dd8:	6027      	str	r7, [r4, #0]
 8009dda:	60a3      	str	r3, [r4, #8]
 8009ddc:	b125      	cbz	r5, 8009de8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 8009dde:	6831      	ldr	r1, [r6, #0]
 8009de0:	6820      	ldr	r0, [r4, #0]
 8009de2:	462a      	mov	r2, r5
 8009de4:	f7ff ffca 	bl	8009d7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009de8:	6823      	ldr	r3, [r4, #0]
 8009dea:	6065      	str	r5, [r4, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	555a      	strb	r2, [r3, r5]
 8009df0:	b003      	add	sp, #12
 8009df2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8009df4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009df8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009dfa:	461f      	mov	r7, r3
 8009dfc:	6843      	ldr	r3, [r0, #4]
 8009dfe:	eb01 0802 	add.w	r8, r1, r2
 8009e02:	1ab2      	subs	r2, r6, r2
 8009e04:	441a      	add	r2, r3
 8009e06:	eba3 0908 	sub.w	r9, r3, r8
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	9201      	str	r2, [sp, #4]
 8009e0e:	f853 2b08 	ldr.w	r2, [r3], #8
 8009e12:	429a      	cmp	r2, r3
 8009e14:	bf18      	it	ne
 8009e16:	6882      	ldrne	r2, [r0, #8]
 8009e18:	460d      	mov	r5, r1
 8009e1a:	bf08      	it	eq
 8009e1c:	220f      	moveq	r2, #15
 8009e1e:	a901      	add	r1, sp, #4
 8009e20:	4604      	mov	r4, r0
 8009e22:	f7ff ff81 	bl	8009d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009e26:	4682      	mov	sl, r0
 8009e28:	b11d      	cbz	r5, 8009e32 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8009e2a:	6821      	ldr	r1, [r4, #0]
 8009e2c:	462a      	mov	r2, r5
 8009e2e:	f7ff ffa5 	bl	8009d7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009e32:	b137      	cbz	r7, 8009e42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009e34:	b12e      	cbz	r6, 8009e42 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009e36:	4632      	mov	r2, r6
 8009e38:	4639      	mov	r1, r7
 8009e3a:	eb0a 0005 	add.w	r0, sl, r5
 8009e3e:	f7ff ff9d 	bl	8009d7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009e42:	f1b9 0f00 	cmp.w	r9, #0
 8009e46:	d007      	beq.n	8009e58 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8009e48:	6821      	ldr	r1, [r4, #0]
 8009e4a:	4435      	add	r5, r6
 8009e4c:	464a      	mov	r2, r9
 8009e4e:	4441      	add	r1, r8
 8009e50:	eb0a 0005 	add.w	r0, sl, r5
 8009e54:	f7ff ff92 	bl	8009d7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009e58:	4620      	mov	r0, r4
 8009e5a:	f7ff ff87 	bl	8009d6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009e5e:	9b01      	ldr	r3, [sp, #4]
 8009e60:	f8c4 a000 	str.w	sl, [r4]
 8009e64:	60a3      	str	r3, [r4, #8]
 8009e66:	b002      	add	sp, #8
 8009e68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009e6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8009e6c:	f100 0208 	add.w	r2, r0, #8
 8009e70:	6002      	str	r2, [r0, #0]
 8009e72:	2200      	movs	r2, #0
 8009e74:	6042      	str	r2, [r0, #4]
 8009e76:	7202      	strb	r2, [r0, #8]
 8009e78:	4770      	bx	lr

08009e7a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8009e7a:	b510      	push	{r4, lr}
 8009e7c:	4604      	mov	r4, r0
 8009e7e:	f7ff ff75 	bl	8009d6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009e82:	4620      	mov	r0, r4
 8009e84:	bd10      	pop	{r4, pc}

08009e86 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8009e86:	b510      	push	{r4, lr}
 8009e88:	4604      	mov	r4, r0
 8009e8a:	f7ff ff8d 	bl	8009da8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8009e8e:	4620      	mov	r0, r4
 8009e90:	bd10      	pop	{r4, pc}

08009e92 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8009e92:	b570      	push	{r4, r5, r6, lr}
 8009e94:	460c      	mov	r4, r1
 8009e96:	f851 3b08 	ldr.w	r3, [r1], #8
 8009e9a:	4299      	cmp	r1, r3
 8009e9c:	4605      	mov	r5, r0
 8009e9e:	6800      	ldr	r0, [r0, #0]
 8009ea0:	d110      	bne.n	8009ec4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x32>
 8009ea2:	42a5      	cmp	r5, r4
 8009ea4:	d008      	beq.n	8009eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 8009ea6:	6862      	ldr	r2, [r4, #4]
 8009ea8:	b10a      	cbz	r2, 8009eae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c>
 8009eaa:	f7ff ff67 	bl	8009d7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009eae:	6863      	ldr	r3, [r4, #4]
 8009eb0:	682a      	ldr	r2, [r5, #0]
 8009eb2:	606b      	str	r3, [r5, #4]
 8009eb4:	2100      	movs	r1, #0
 8009eb6:	54d1      	strb	r1, [r2, r3]
 8009eb8:	6822      	ldr	r2, [r4, #0]
 8009eba:	2300      	movs	r3, #0
 8009ebc:	6063      	str	r3, [r4, #4]
 8009ebe:	7013      	strb	r3, [r2, #0]
 8009ec0:	4628      	mov	r0, r5
 8009ec2:	bd70      	pop	{r4, r5, r6, pc}
 8009ec4:	602b      	str	r3, [r5, #0]
 8009ec6:	f105 0608 	add.w	r6, r5, #8
 8009eca:	6863      	ldr	r3, [r4, #4]
 8009ecc:	606b      	str	r3, [r5, #4]
 8009ece:	42b0      	cmp	r0, r6
 8009ed0:	68a3      	ldr	r3, [r4, #8]
 8009ed2:	bf18      	it	ne
 8009ed4:	68aa      	ldrne	r2, [r5, #8]
 8009ed6:	60ab      	str	r3, [r5, #8]
 8009ed8:	bf08      	it	eq
 8009eda:	2000      	moveq	r0, #0
 8009edc:	b110      	cbz	r0, 8009ee4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x52>
 8009ede:	6020      	str	r0, [r4, #0]
 8009ee0:	60a2      	str	r2, [r4, #8]
 8009ee2:	e7e9      	b.n	8009eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 8009ee4:	6021      	str	r1, [r4, #0]
 8009ee6:	e7e7      	b.n	8009eb8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>

08009ee8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8009ee8:	6840      	ldr	r0, [r0, #4]
 8009eea:	4770      	bx	lr

08009eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8009eec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009eee:	4604      	mov	r4, r0
 8009ef0:	4623      	mov	r3, r4
 8009ef2:	6840      	ldr	r0, [r0, #4]
 8009ef4:	f853 6b08 	ldr.w	r6, [r3], #8
 8009ef8:	429e      	cmp	r6, r3
 8009efa:	bf18      	it	ne
 8009efc:	68a3      	ldrne	r3, [r4, #8]
 8009efe:	eb00 0502 	add.w	r5, r0, r2
 8009f02:	bf08      	it	eq
 8009f04:	230f      	moveq	r3, #15
 8009f06:	429d      	cmp	r5, r3
 8009f08:	d80a      	bhi.n	8009f20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8009f0a:	b112      	cbz	r2, 8009f12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8009f0c:	4430      	add	r0, r6
 8009f0e:	f7ff ff35 	bl	8009d7c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	6065      	str	r5, [r4, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	4620      	mov	r0, r4
 8009f1a:	555a      	strb	r2, [r3, r5]
 8009f1c:	b002      	add	sp, #8
 8009f1e:	bd70      	pop	{r4, r5, r6, pc}
 8009f20:	9200      	str	r2, [sp, #0]
 8009f22:	460b      	mov	r3, r1
 8009f24:	2200      	movs	r2, #0
 8009f26:	4601      	mov	r1, r0
 8009f28:	4620      	mov	r0, r4
 8009f2a:	f7ff ff63 	bl	8009df4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8009f2e:	e7f0      	b.n	8009f12 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08009f30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8009f30:	b508      	push	{r3, lr}
 8009f32:	e9d1 1200 	ldrd	r1, r2, [r1]
 8009f36:	f7ff ffd9 	bl	8009eec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8009f3a:	bd08      	pop	{r3, pc}

08009f3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8009f3c:	b508      	push	{r3, lr}
 8009f3e:	f7ff fff7 	bl	8009f30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8009f42:	bd08      	pop	{r3, pc}

08009f44 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8009f44:	6800      	ldr	r0, [r0, #0]
 8009f46:	4770      	bx	lr

08009f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8009f48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f4a:	4604      	mov	r4, r0
 8009f4c:	4616      	mov	r6, r2
 8009f4e:	460d      	mov	r5, r1
 8009f50:	b919      	cbnz	r1, 8009f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8009f52:	b112      	cbz	r2, 8009f5a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8009f54:	480d      	ldr	r0, [pc, #52]	; (8009f8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8009f56:	f000 f871 	bl	800a03c <_ZSt19__throw_logic_errorPKc>
 8009f5a:	1b73      	subs	r3, r6, r5
 8009f5c:	2b0f      	cmp	r3, #15
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	d907      	bls.n	8009f72 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8009f62:	2200      	movs	r2, #0
 8009f64:	a901      	add	r1, sp, #4
 8009f66:	4620      	mov	r0, r4
 8009f68:	f7ff fede 	bl	8009d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009f6c:	9b01      	ldr	r3, [sp, #4]
 8009f6e:	6020      	str	r0, [r4, #0]
 8009f70:	60a3      	str	r3, [r4, #8]
 8009f72:	4632      	mov	r2, r6
 8009f74:	4629      	mov	r1, r5
 8009f76:	6820      	ldr	r0, [r4, #0]
 8009f78:	f7ff ff0c 	bl	8009d94 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8009f7c:	9b01      	ldr	r3, [sp, #4]
 8009f7e:	6822      	ldr	r2, [r4, #0]
 8009f80:	6063      	str	r3, [r4, #4]
 8009f82:	2100      	movs	r1, #0
 8009f84:	54d1      	strb	r1, [r2, r3]
 8009f86:	b002      	add	sp, #8
 8009f88:	bd70      	pop	{r4, r5, r6, pc}
 8009f8a:	bf00      	nop
 8009f8c:	0800b478 	.word	0x0800b478

08009f90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 8009f90:	b538      	push	{r3, r4, r5, lr}
 8009f92:	f100 0308 	add.w	r3, r0, #8
 8009f96:	6003      	str	r3, [r0, #0]
 8009f98:	e9d1 5200 	ldrd	r5, r2, [r1]
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	f04f 0300 	mov.w	r3, #0
 8009fa2:	442a      	add	r2, r5
 8009fa4:	4629      	mov	r1, r5
 8009fa6:	f7ff ffcf 	bl	8009f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 8009faa:	4620      	mov	r0, r4
 8009fac:	bd38      	pop	{r3, r4, r5, pc}
	...

08009fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 8009fb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	4616      	mov	r6, r2
 8009fb6:	460d      	mov	r5, r1
 8009fb8:	b919      	cbnz	r1, 8009fc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009fba:	b112      	cbz	r2, 8009fc2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 8009fbc:	480d      	ldr	r0, [pc, #52]	; (8009ff4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 8009fbe:	f000 f83d 	bl	800a03c <_ZSt19__throw_logic_errorPKc>
 8009fc2:	1b73      	subs	r3, r6, r5
 8009fc4:	2b0f      	cmp	r3, #15
 8009fc6:	9301      	str	r3, [sp, #4]
 8009fc8:	d907      	bls.n	8009fda <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8009fca:	2200      	movs	r2, #0
 8009fcc:	a901      	add	r1, sp, #4
 8009fce:	4620      	mov	r0, r4
 8009fd0:	f7ff feaa 	bl	8009d28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009fd4:	9b01      	ldr	r3, [sp, #4]
 8009fd6:	6020      	str	r0, [r4, #0]
 8009fd8:	60a3      	str	r3, [r4, #8]
 8009fda:	4632      	mov	r2, r6
 8009fdc:	4629      	mov	r1, r5
 8009fde:	6820      	ldr	r0, [r4, #0]
 8009fe0:	f7ff fedd 	bl	8009d9e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8009fe4:	9b01      	ldr	r3, [sp, #4]
 8009fe6:	6822      	ldr	r2, [r4, #0]
 8009fe8:	6063      	str	r3, [r4, #4]
 8009fea:	2100      	movs	r1, #0
 8009fec:	54d1      	strb	r1, [r2, r3]
 8009fee:	b002      	add	sp, #8
 8009ff0:	bd70      	pop	{r4, r5, r6, pc}
 8009ff2:	bf00      	nop
 8009ff4:	0800b478 	.word	0x0800b478

08009ff8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 8009ff8:	b510      	push	{r4, lr}
 8009ffa:	f100 0308 	add.w	r3, r0, #8
 8009ffe:	4604      	mov	r4, r0
 800a000:	6003      	str	r3, [r0, #0]
 800a002:	440a      	add	r2, r1
 800a004:	f04f 0300 	mov.w	r3, #0
 800a008:	f7ff ffd2 	bl	8009fb0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800a00c:	4620      	mov	r0, r4
 800a00e:	bd10      	pop	{r4, pc}

0800a010 <_ZdlPv>:
 800a010:	f000 b832 	b.w	800a078 <free>

0800a014 <_Znwj>:
 800a014:	2801      	cmp	r0, #1
 800a016:	bf38      	it	cc
 800a018:	2001      	movcc	r0, #1
 800a01a:	b510      	push	{r4, lr}
 800a01c:	4604      	mov	r4, r0
 800a01e:	4620      	mov	r0, r4
 800a020:	f000 f822 	bl	800a068 <malloc>
 800a024:	b100      	cbz	r0, 800a028 <_Znwj+0x14>
 800a026:	bd10      	pop	{r4, pc}
 800a028:	f000 f80e 	bl	800a048 <_ZSt15get_new_handlerv>
 800a02c:	b908      	cbnz	r0, 800a032 <_Znwj+0x1e>
 800a02e:	f000 f813 	bl	800a058 <abort>
 800a032:	4780      	blx	r0
 800a034:	e7f3      	b.n	800a01e <_Znwj+0xa>

0800a036 <_ZSt17__throw_bad_allocv>:
 800a036:	b508      	push	{r3, lr}
 800a038:	f000 f80e 	bl	800a058 <abort>

0800a03c <_ZSt19__throw_logic_errorPKc>:
 800a03c:	b508      	push	{r3, lr}
 800a03e:	f000 f80b 	bl	800a058 <abort>

0800a042 <_ZSt20__throw_length_errorPKc>:
 800a042:	b508      	push	{r3, lr}
 800a044:	f000 f808 	bl	800a058 <abort>

0800a048 <_ZSt15get_new_handlerv>:
 800a048:	4b02      	ldr	r3, [pc, #8]	; (800a054 <_ZSt15get_new_handlerv+0xc>)
 800a04a:	6818      	ldr	r0, [r3, #0]
 800a04c:	f3bf 8f5b 	dmb	ish
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	20000714 	.word	0x20000714

0800a058 <abort>:
 800a058:	b508      	push	{r3, lr}
 800a05a:	2006      	movs	r0, #6
 800a05c:	f000 faf8 	bl	800a650 <raise>
 800a060:	2001      	movs	r0, #1
 800a062:	f7fc f95f 	bl	8006324 <_exit>
	...

0800a068 <malloc>:
 800a068:	4b02      	ldr	r3, [pc, #8]	; (800a074 <malloc+0xc>)
 800a06a:	4601      	mov	r1, r0
 800a06c:	6818      	ldr	r0, [r3, #0]
 800a06e:	f000 b82b 	b.w	800a0c8 <_malloc_r>
 800a072:	bf00      	nop
 800a074:	20000064 	.word	0x20000064

0800a078 <free>:
 800a078:	4b02      	ldr	r3, [pc, #8]	; (800a084 <free+0xc>)
 800a07a:	4601      	mov	r1, r0
 800a07c:	6818      	ldr	r0, [r3, #0]
 800a07e:	f000 bb95 	b.w	800a7ac <_free_r>
 800a082:	bf00      	nop
 800a084:	20000064 	.word	0x20000064

0800a088 <sbrk_aligned>:
 800a088:	b570      	push	{r4, r5, r6, lr}
 800a08a:	4e0e      	ldr	r6, [pc, #56]	; (800a0c4 <sbrk_aligned+0x3c>)
 800a08c:	460c      	mov	r4, r1
 800a08e:	6831      	ldr	r1, [r6, #0]
 800a090:	4605      	mov	r5, r0
 800a092:	b911      	cbnz	r1, 800a09a <sbrk_aligned+0x12>
 800a094:	f000 fb2c 	bl	800a6f0 <_sbrk_r>
 800a098:	6030      	str	r0, [r6, #0]
 800a09a:	4621      	mov	r1, r4
 800a09c:	4628      	mov	r0, r5
 800a09e:	f000 fb27 	bl	800a6f0 <_sbrk_r>
 800a0a2:	1c43      	adds	r3, r0, #1
 800a0a4:	d00a      	beq.n	800a0bc <sbrk_aligned+0x34>
 800a0a6:	1cc4      	adds	r4, r0, #3
 800a0a8:	f024 0403 	bic.w	r4, r4, #3
 800a0ac:	42a0      	cmp	r0, r4
 800a0ae:	d007      	beq.n	800a0c0 <sbrk_aligned+0x38>
 800a0b0:	1a21      	subs	r1, r4, r0
 800a0b2:	4628      	mov	r0, r5
 800a0b4:	f000 fb1c 	bl	800a6f0 <_sbrk_r>
 800a0b8:	3001      	adds	r0, #1
 800a0ba:	d101      	bne.n	800a0c0 <sbrk_aligned+0x38>
 800a0bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a0c0:	4620      	mov	r0, r4
 800a0c2:	bd70      	pop	{r4, r5, r6, pc}
 800a0c4:	2000071c 	.word	0x2000071c

0800a0c8 <_malloc_r>:
 800a0c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0cc:	1ccd      	adds	r5, r1, #3
 800a0ce:	f025 0503 	bic.w	r5, r5, #3
 800a0d2:	3508      	adds	r5, #8
 800a0d4:	2d0c      	cmp	r5, #12
 800a0d6:	bf38      	it	cc
 800a0d8:	250c      	movcc	r5, #12
 800a0da:	2d00      	cmp	r5, #0
 800a0dc:	4607      	mov	r7, r0
 800a0de:	db01      	blt.n	800a0e4 <_malloc_r+0x1c>
 800a0e0:	42a9      	cmp	r1, r5
 800a0e2:	d905      	bls.n	800a0f0 <_malloc_r+0x28>
 800a0e4:	230c      	movs	r3, #12
 800a0e6:	603b      	str	r3, [r7, #0]
 800a0e8:	2600      	movs	r6, #0
 800a0ea:	4630      	mov	r0, r6
 800a0ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a1c4 <_malloc_r+0xfc>
 800a0f4:	f000 f868 	bl	800a1c8 <__malloc_lock>
 800a0f8:	f8d8 3000 	ldr.w	r3, [r8]
 800a0fc:	461c      	mov	r4, r3
 800a0fe:	bb5c      	cbnz	r4, 800a158 <_malloc_r+0x90>
 800a100:	4629      	mov	r1, r5
 800a102:	4638      	mov	r0, r7
 800a104:	f7ff ffc0 	bl	800a088 <sbrk_aligned>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	4604      	mov	r4, r0
 800a10c:	d155      	bne.n	800a1ba <_malloc_r+0xf2>
 800a10e:	f8d8 4000 	ldr.w	r4, [r8]
 800a112:	4626      	mov	r6, r4
 800a114:	2e00      	cmp	r6, #0
 800a116:	d145      	bne.n	800a1a4 <_malloc_r+0xdc>
 800a118:	2c00      	cmp	r4, #0
 800a11a:	d048      	beq.n	800a1ae <_malloc_r+0xe6>
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	4631      	mov	r1, r6
 800a120:	4638      	mov	r0, r7
 800a122:	eb04 0903 	add.w	r9, r4, r3
 800a126:	f000 fae3 	bl	800a6f0 <_sbrk_r>
 800a12a:	4581      	cmp	r9, r0
 800a12c:	d13f      	bne.n	800a1ae <_malloc_r+0xe6>
 800a12e:	6821      	ldr	r1, [r4, #0]
 800a130:	1a6d      	subs	r5, r5, r1
 800a132:	4629      	mov	r1, r5
 800a134:	4638      	mov	r0, r7
 800a136:	f7ff ffa7 	bl	800a088 <sbrk_aligned>
 800a13a:	3001      	adds	r0, #1
 800a13c:	d037      	beq.n	800a1ae <_malloc_r+0xe6>
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	442b      	add	r3, r5
 800a142:	6023      	str	r3, [r4, #0]
 800a144:	f8d8 3000 	ldr.w	r3, [r8]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d038      	beq.n	800a1be <_malloc_r+0xf6>
 800a14c:	685a      	ldr	r2, [r3, #4]
 800a14e:	42a2      	cmp	r2, r4
 800a150:	d12b      	bne.n	800a1aa <_malloc_r+0xe2>
 800a152:	2200      	movs	r2, #0
 800a154:	605a      	str	r2, [r3, #4]
 800a156:	e00f      	b.n	800a178 <_malloc_r+0xb0>
 800a158:	6822      	ldr	r2, [r4, #0]
 800a15a:	1b52      	subs	r2, r2, r5
 800a15c:	d41f      	bmi.n	800a19e <_malloc_r+0xd6>
 800a15e:	2a0b      	cmp	r2, #11
 800a160:	d917      	bls.n	800a192 <_malloc_r+0xca>
 800a162:	1961      	adds	r1, r4, r5
 800a164:	42a3      	cmp	r3, r4
 800a166:	6025      	str	r5, [r4, #0]
 800a168:	bf18      	it	ne
 800a16a:	6059      	strne	r1, [r3, #4]
 800a16c:	6863      	ldr	r3, [r4, #4]
 800a16e:	bf08      	it	eq
 800a170:	f8c8 1000 	streq.w	r1, [r8]
 800a174:	5162      	str	r2, [r4, r5]
 800a176:	604b      	str	r3, [r1, #4]
 800a178:	4638      	mov	r0, r7
 800a17a:	f104 060b 	add.w	r6, r4, #11
 800a17e:	f000 f829 	bl	800a1d4 <__malloc_unlock>
 800a182:	f026 0607 	bic.w	r6, r6, #7
 800a186:	1d23      	adds	r3, r4, #4
 800a188:	1af2      	subs	r2, r6, r3
 800a18a:	d0ae      	beq.n	800a0ea <_malloc_r+0x22>
 800a18c:	1b9b      	subs	r3, r3, r6
 800a18e:	50a3      	str	r3, [r4, r2]
 800a190:	e7ab      	b.n	800a0ea <_malloc_r+0x22>
 800a192:	42a3      	cmp	r3, r4
 800a194:	6862      	ldr	r2, [r4, #4]
 800a196:	d1dd      	bne.n	800a154 <_malloc_r+0x8c>
 800a198:	f8c8 2000 	str.w	r2, [r8]
 800a19c:	e7ec      	b.n	800a178 <_malloc_r+0xb0>
 800a19e:	4623      	mov	r3, r4
 800a1a0:	6864      	ldr	r4, [r4, #4]
 800a1a2:	e7ac      	b.n	800a0fe <_malloc_r+0x36>
 800a1a4:	4634      	mov	r4, r6
 800a1a6:	6876      	ldr	r6, [r6, #4]
 800a1a8:	e7b4      	b.n	800a114 <_malloc_r+0x4c>
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	e7cc      	b.n	800a148 <_malloc_r+0x80>
 800a1ae:	230c      	movs	r3, #12
 800a1b0:	603b      	str	r3, [r7, #0]
 800a1b2:	4638      	mov	r0, r7
 800a1b4:	f000 f80e 	bl	800a1d4 <__malloc_unlock>
 800a1b8:	e797      	b.n	800a0ea <_malloc_r+0x22>
 800a1ba:	6025      	str	r5, [r4, #0]
 800a1bc:	e7dc      	b.n	800a178 <_malloc_r+0xb0>
 800a1be:	605b      	str	r3, [r3, #4]
 800a1c0:	deff      	udf	#255	; 0xff
 800a1c2:	bf00      	nop
 800a1c4:	20000718 	.word	0x20000718

0800a1c8 <__malloc_lock>:
 800a1c8:	4801      	ldr	r0, [pc, #4]	; (800a1d0 <__malloc_lock+0x8>)
 800a1ca:	f000 bade 	b.w	800a78a <__retarget_lock_acquire_recursive>
 800a1ce:	bf00      	nop
 800a1d0:	20000860 	.word	0x20000860

0800a1d4 <__malloc_unlock>:
 800a1d4:	4801      	ldr	r0, [pc, #4]	; (800a1dc <__malloc_unlock+0x8>)
 800a1d6:	f000 bad9 	b.w	800a78c <__retarget_lock_release_recursive>
 800a1da:	bf00      	nop
 800a1dc:	20000860 	.word	0x20000860

0800a1e0 <std>:
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	b510      	push	{r4, lr}
 800a1e4:	4604      	mov	r4, r0
 800a1e6:	e9c0 3300 	strd	r3, r3, [r0]
 800a1ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1ee:	6083      	str	r3, [r0, #8]
 800a1f0:	8181      	strh	r1, [r0, #12]
 800a1f2:	6643      	str	r3, [r0, #100]	; 0x64
 800a1f4:	81c2      	strh	r2, [r0, #14]
 800a1f6:	6183      	str	r3, [r0, #24]
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	2208      	movs	r2, #8
 800a1fc:	305c      	adds	r0, #92	; 0x5c
 800a1fe:	f000 f9f7 	bl	800a5f0 <memset>
 800a202:	4b0d      	ldr	r3, [pc, #52]	; (800a238 <std+0x58>)
 800a204:	6263      	str	r3, [r4, #36]	; 0x24
 800a206:	4b0d      	ldr	r3, [pc, #52]	; (800a23c <std+0x5c>)
 800a208:	62a3      	str	r3, [r4, #40]	; 0x28
 800a20a:	4b0d      	ldr	r3, [pc, #52]	; (800a240 <std+0x60>)
 800a20c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a20e:	4b0d      	ldr	r3, [pc, #52]	; (800a244 <std+0x64>)
 800a210:	6323      	str	r3, [r4, #48]	; 0x30
 800a212:	4b0d      	ldr	r3, [pc, #52]	; (800a248 <std+0x68>)
 800a214:	6224      	str	r4, [r4, #32]
 800a216:	429c      	cmp	r4, r3
 800a218:	d006      	beq.n	800a228 <std+0x48>
 800a21a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a21e:	4294      	cmp	r4, r2
 800a220:	d002      	beq.n	800a228 <std+0x48>
 800a222:	33d0      	adds	r3, #208	; 0xd0
 800a224:	429c      	cmp	r4, r3
 800a226:	d105      	bne.n	800a234 <std+0x54>
 800a228:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a22c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a230:	f000 baaa 	b.w	800a788 <__retarget_lock_init_recursive>
 800a234:	bd10      	pop	{r4, pc}
 800a236:	bf00      	nop
 800a238:	0800a441 	.word	0x0800a441
 800a23c:	0800a463 	.word	0x0800a463
 800a240:	0800a49b 	.word	0x0800a49b
 800a244:	0800a4bf 	.word	0x0800a4bf
 800a248:	20000720 	.word	0x20000720

0800a24c <stdio_exit_handler>:
 800a24c:	4a02      	ldr	r2, [pc, #8]	; (800a258 <stdio_exit_handler+0xc>)
 800a24e:	4903      	ldr	r1, [pc, #12]	; (800a25c <stdio_exit_handler+0x10>)
 800a250:	4803      	ldr	r0, [pc, #12]	; (800a260 <stdio_exit_handler+0x14>)
 800a252:	f000 b869 	b.w	800a328 <_fwalk_sglue>
 800a256:	bf00      	nop
 800a258:	2000000c 	.word	0x2000000c
 800a25c:	0800aef9 	.word	0x0800aef9
 800a260:	20000018 	.word	0x20000018

0800a264 <cleanup_stdio>:
 800a264:	6841      	ldr	r1, [r0, #4]
 800a266:	4b0c      	ldr	r3, [pc, #48]	; (800a298 <cleanup_stdio+0x34>)
 800a268:	4299      	cmp	r1, r3
 800a26a:	b510      	push	{r4, lr}
 800a26c:	4604      	mov	r4, r0
 800a26e:	d001      	beq.n	800a274 <cleanup_stdio+0x10>
 800a270:	f000 fe42 	bl	800aef8 <_fflush_r>
 800a274:	68a1      	ldr	r1, [r4, #8]
 800a276:	4b09      	ldr	r3, [pc, #36]	; (800a29c <cleanup_stdio+0x38>)
 800a278:	4299      	cmp	r1, r3
 800a27a:	d002      	beq.n	800a282 <cleanup_stdio+0x1e>
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 fe3b 	bl	800aef8 <_fflush_r>
 800a282:	68e1      	ldr	r1, [r4, #12]
 800a284:	4b06      	ldr	r3, [pc, #24]	; (800a2a0 <cleanup_stdio+0x3c>)
 800a286:	4299      	cmp	r1, r3
 800a288:	d004      	beq.n	800a294 <cleanup_stdio+0x30>
 800a28a:	4620      	mov	r0, r4
 800a28c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a290:	f000 be32 	b.w	800aef8 <_fflush_r>
 800a294:	bd10      	pop	{r4, pc}
 800a296:	bf00      	nop
 800a298:	20000720 	.word	0x20000720
 800a29c:	20000788 	.word	0x20000788
 800a2a0:	200007f0 	.word	0x200007f0

0800a2a4 <global_stdio_init.part.0>:
 800a2a4:	b510      	push	{r4, lr}
 800a2a6:	4b0b      	ldr	r3, [pc, #44]	; (800a2d4 <global_stdio_init.part.0+0x30>)
 800a2a8:	4c0b      	ldr	r4, [pc, #44]	; (800a2d8 <global_stdio_init.part.0+0x34>)
 800a2aa:	4a0c      	ldr	r2, [pc, #48]	; (800a2dc <global_stdio_init.part.0+0x38>)
 800a2ac:	601a      	str	r2, [r3, #0]
 800a2ae:	4620      	mov	r0, r4
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	2104      	movs	r1, #4
 800a2b4:	f7ff ff94 	bl	800a1e0 <std>
 800a2b8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a2bc:	2201      	movs	r2, #1
 800a2be:	2109      	movs	r1, #9
 800a2c0:	f7ff ff8e 	bl	800a1e0 <std>
 800a2c4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a2c8:	2202      	movs	r2, #2
 800a2ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2ce:	2112      	movs	r1, #18
 800a2d0:	f7ff bf86 	b.w	800a1e0 <std>
 800a2d4:	20000858 	.word	0x20000858
 800a2d8:	20000720 	.word	0x20000720
 800a2dc:	0800a24d 	.word	0x0800a24d

0800a2e0 <__sfp_lock_acquire>:
 800a2e0:	4801      	ldr	r0, [pc, #4]	; (800a2e8 <__sfp_lock_acquire+0x8>)
 800a2e2:	f000 ba52 	b.w	800a78a <__retarget_lock_acquire_recursive>
 800a2e6:	bf00      	nop
 800a2e8:	20000861 	.word	0x20000861

0800a2ec <__sfp_lock_release>:
 800a2ec:	4801      	ldr	r0, [pc, #4]	; (800a2f4 <__sfp_lock_release+0x8>)
 800a2ee:	f000 ba4d 	b.w	800a78c <__retarget_lock_release_recursive>
 800a2f2:	bf00      	nop
 800a2f4:	20000861 	.word	0x20000861

0800a2f8 <__sinit>:
 800a2f8:	b510      	push	{r4, lr}
 800a2fa:	4604      	mov	r4, r0
 800a2fc:	f7ff fff0 	bl	800a2e0 <__sfp_lock_acquire>
 800a300:	6a23      	ldr	r3, [r4, #32]
 800a302:	b11b      	cbz	r3, 800a30c <__sinit+0x14>
 800a304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a308:	f7ff bff0 	b.w	800a2ec <__sfp_lock_release>
 800a30c:	4b04      	ldr	r3, [pc, #16]	; (800a320 <__sinit+0x28>)
 800a30e:	6223      	str	r3, [r4, #32]
 800a310:	4b04      	ldr	r3, [pc, #16]	; (800a324 <__sinit+0x2c>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	2b00      	cmp	r3, #0
 800a316:	d1f5      	bne.n	800a304 <__sinit+0xc>
 800a318:	f7ff ffc4 	bl	800a2a4 <global_stdio_init.part.0>
 800a31c:	e7f2      	b.n	800a304 <__sinit+0xc>
 800a31e:	bf00      	nop
 800a320:	0800a265 	.word	0x0800a265
 800a324:	20000858 	.word	0x20000858

0800a328 <_fwalk_sglue>:
 800a328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a32c:	4607      	mov	r7, r0
 800a32e:	4688      	mov	r8, r1
 800a330:	4614      	mov	r4, r2
 800a332:	2600      	movs	r6, #0
 800a334:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a338:	f1b9 0901 	subs.w	r9, r9, #1
 800a33c:	d505      	bpl.n	800a34a <_fwalk_sglue+0x22>
 800a33e:	6824      	ldr	r4, [r4, #0]
 800a340:	2c00      	cmp	r4, #0
 800a342:	d1f7      	bne.n	800a334 <_fwalk_sglue+0xc>
 800a344:	4630      	mov	r0, r6
 800a346:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a34a:	89ab      	ldrh	r3, [r5, #12]
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	d907      	bls.n	800a360 <_fwalk_sglue+0x38>
 800a350:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a354:	3301      	adds	r3, #1
 800a356:	d003      	beq.n	800a360 <_fwalk_sglue+0x38>
 800a358:	4629      	mov	r1, r5
 800a35a:	4638      	mov	r0, r7
 800a35c:	47c0      	blx	r8
 800a35e:	4306      	orrs	r6, r0
 800a360:	3568      	adds	r5, #104	; 0x68
 800a362:	e7e9      	b.n	800a338 <_fwalk_sglue+0x10>

0800a364 <iprintf>:
 800a364:	b40f      	push	{r0, r1, r2, r3}
 800a366:	b507      	push	{r0, r1, r2, lr}
 800a368:	4906      	ldr	r1, [pc, #24]	; (800a384 <iprintf+0x20>)
 800a36a:	ab04      	add	r3, sp, #16
 800a36c:	6808      	ldr	r0, [r1, #0]
 800a36e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a372:	6881      	ldr	r1, [r0, #8]
 800a374:	9301      	str	r3, [sp, #4]
 800a376:	f000 fa8f 	bl	800a898 <_vfiprintf_r>
 800a37a:	b003      	add	sp, #12
 800a37c:	f85d eb04 	ldr.w	lr, [sp], #4
 800a380:	b004      	add	sp, #16
 800a382:	4770      	bx	lr
 800a384:	20000064 	.word	0x20000064

0800a388 <_puts_r>:
 800a388:	6a03      	ldr	r3, [r0, #32]
 800a38a:	b570      	push	{r4, r5, r6, lr}
 800a38c:	6884      	ldr	r4, [r0, #8]
 800a38e:	4605      	mov	r5, r0
 800a390:	460e      	mov	r6, r1
 800a392:	b90b      	cbnz	r3, 800a398 <_puts_r+0x10>
 800a394:	f7ff ffb0 	bl	800a2f8 <__sinit>
 800a398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a39a:	07db      	lsls	r3, r3, #31
 800a39c:	d405      	bmi.n	800a3aa <_puts_r+0x22>
 800a39e:	89a3      	ldrh	r3, [r4, #12]
 800a3a0:	0598      	lsls	r0, r3, #22
 800a3a2:	d402      	bmi.n	800a3aa <_puts_r+0x22>
 800a3a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3a6:	f000 f9f0 	bl	800a78a <__retarget_lock_acquire_recursive>
 800a3aa:	89a3      	ldrh	r3, [r4, #12]
 800a3ac:	0719      	lsls	r1, r3, #28
 800a3ae:	d513      	bpl.n	800a3d8 <_puts_r+0x50>
 800a3b0:	6923      	ldr	r3, [r4, #16]
 800a3b2:	b18b      	cbz	r3, 800a3d8 <_puts_r+0x50>
 800a3b4:	3e01      	subs	r6, #1
 800a3b6:	68a3      	ldr	r3, [r4, #8]
 800a3b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	60a3      	str	r3, [r4, #8]
 800a3c0:	b9e9      	cbnz	r1, 800a3fe <_puts_r+0x76>
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	da2e      	bge.n	800a424 <_puts_r+0x9c>
 800a3c6:	4622      	mov	r2, r4
 800a3c8:	210a      	movs	r1, #10
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f000 f87b 	bl	800a4c6 <__swbuf_r>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d007      	beq.n	800a3e4 <_puts_r+0x5c>
 800a3d4:	250a      	movs	r5, #10
 800a3d6:	e007      	b.n	800a3e8 <_puts_r+0x60>
 800a3d8:	4621      	mov	r1, r4
 800a3da:	4628      	mov	r0, r5
 800a3dc:	f000 f8b0 	bl	800a540 <__swsetup_r>
 800a3e0:	2800      	cmp	r0, #0
 800a3e2:	d0e7      	beq.n	800a3b4 <_puts_r+0x2c>
 800a3e4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a3e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3ea:	07da      	lsls	r2, r3, #31
 800a3ec:	d405      	bmi.n	800a3fa <_puts_r+0x72>
 800a3ee:	89a3      	ldrh	r3, [r4, #12]
 800a3f0:	059b      	lsls	r3, r3, #22
 800a3f2:	d402      	bmi.n	800a3fa <_puts_r+0x72>
 800a3f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3f6:	f000 f9c9 	bl	800a78c <__retarget_lock_release_recursive>
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	bd70      	pop	{r4, r5, r6, pc}
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	da04      	bge.n	800a40c <_puts_r+0x84>
 800a402:	69a2      	ldr	r2, [r4, #24]
 800a404:	429a      	cmp	r2, r3
 800a406:	dc06      	bgt.n	800a416 <_puts_r+0x8e>
 800a408:	290a      	cmp	r1, #10
 800a40a:	d004      	beq.n	800a416 <_puts_r+0x8e>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	1c5a      	adds	r2, r3, #1
 800a410:	6022      	str	r2, [r4, #0]
 800a412:	7019      	strb	r1, [r3, #0]
 800a414:	e7cf      	b.n	800a3b6 <_puts_r+0x2e>
 800a416:	4622      	mov	r2, r4
 800a418:	4628      	mov	r0, r5
 800a41a:	f000 f854 	bl	800a4c6 <__swbuf_r>
 800a41e:	3001      	adds	r0, #1
 800a420:	d1c9      	bne.n	800a3b6 <_puts_r+0x2e>
 800a422:	e7df      	b.n	800a3e4 <_puts_r+0x5c>
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	250a      	movs	r5, #10
 800a428:	1c5a      	adds	r2, r3, #1
 800a42a:	6022      	str	r2, [r4, #0]
 800a42c:	701d      	strb	r5, [r3, #0]
 800a42e:	e7db      	b.n	800a3e8 <_puts_r+0x60>

0800a430 <puts>:
 800a430:	4b02      	ldr	r3, [pc, #8]	; (800a43c <puts+0xc>)
 800a432:	4601      	mov	r1, r0
 800a434:	6818      	ldr	r0, [r3, #0]
 800a436:	f7ff bfa7 	b.w	800a388 <_puts_r>
 800a43a:	bf00      	nop
 800a43c:	20000064 	.word	0x20000064

0800a440 <__sread>:
 800a440:	b510      	push	{r4, lr}
 800a442:	460c      	mov	r4, r1
 800a444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a448:	f000 f92c 	bl	800a6a4 <_read_r>
 800a44c:	2800      	cmp	r0, #0
 800a44e:	bfab      	itete	ge
 800a450:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a452:	89a3      	ldrhlt	r3, [r4, #12]
 800a454:	181b      	addge	r3, r3, r0
 800a456:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a45a:	bfac      	ite	ge
 800a45c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a45e:	81a3      	strhlt	r3, [r4, #12]
 800a460:	bd10      	pop	{r4, pc}

0800a462 <__swrite>:
 800a462:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a466:	461f      	mov	r7, r3
 800a468:	898b      	ldrh	r3, [r1, #12]
 800a46a:	05db      	lsls	r3, r3, #23
 800a46c:	4605      	mov	r5, r0
 800a46e:	460c      	mov	r4, r1
 800a470:	4616      	mov	r6, r2
 800a472:	d505      	bpl.n	800a480 <__swrite+0x1e>
 800a474:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a478:	2302      	movs	r3, #2
 800a47a:	2200      	movs	r2, #0
 800a47c:	f000 f900 	bl	800a680 <_lseek_r>
 800a480:	89a3      	ldrh	r3, [r4, #12]
 800a482:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a48a:	81a3      	strh	r3, [r4, #12]
 800a48c:	4632      	mov	r2, r6
 800a48e:	463b      	mov	r3, r7
 800a490:	4628      	mov	r0, r5
 800a492:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a496:	f000 b93b 	b.w	800a710 <_write_r>

0800a49a <__sseek>:
 800a49a:	b510      	push	{r4, lr}
 800a49c:	460c      	mov	r4, r1
 800a49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a2:	f000 f8ed 	bl	800a680 <_lseek_r>
 800a4a6:	1c43      	adds	r3, r0, #1
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	bf15      	itete	ne
 800a4ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4b6:	81a3      	strheq	r3, [r4, #12]
 800a4b8:	bf18      	it	ne
 800a4ba:	81a3      	strhne	r3, [r4, #12]
 800a4bc:	bd10      	pop	{r4, pc}

0800a4be <__sclose>:
 800a4be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c2:	f000 b8cd 	b.w	800a660 <_close_r>

0800a4c6 <__swbuf_r>:
 800a4c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c8:	460e      	mov	r6, r1
 800a4ca:	4614      	mov	r4, r2
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	b118      	cbz	r0, 800a4d8 <__swbuf_r+0x12>
 800a4d0:	6a03      	ldr	r3, [r0, #32]
 800a4d2:	b90b      	cbnz	r3, 800a4d8 <__swbuf_r+0x12>
 800a4d4:	f7ff ff10 	bl	800a2f8 <__sinit>
 800a4d8:	69a3      	ldr	r3, [r4, #24]
 800a4da:	60a3      	str	r3, [r4, #8]
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	071a      	lsls	r2, r3, #28
 800a4e0:	d525      	bpl.n	800a52e <__swbuf_r+0x68>
 800a4e2:	6923      	ldr	r3, [r4, #16]
 800a4e4:	b31b      	cbz	r3, 800a52e <__swbuf_r+0x68>
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	6922      	ldr	r2, [r4, #16]
 800a4ea:	1a98      	subs	r0, r3, r2
 800a4ec:	6963      	ldr	r3, [r4, #20]
 800a4ee:	b2f6      	uxtb	r6, r6
 800a4f0:	4283      	cmp	r3, r0
 800a4f2:	4637      	mov	r7, r6
 800a4f4:	dc04      	bgt.n	800a500 <__swbuf_r+0x3a>
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	4628      	mov	r0, r5
 800a4fa:	f000 fcfd 	bl	800aef8 <_fflush_r>
 800a4fe:	b9e0      	cbnz	r0, 800a53a <__swbuf_r+0x74>
 800a500:	68a3      	ldr	r3, [r4, #8]
 800a502:	3b01      	subs	r3, #1
 800a504:	60a3      	str	r3, [r4, #8]
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	1c5a      	adds	r2, r3, #1
 800a50a:	6022      	str	r2, [r4, #0]
 800a50c:	701e      	strb	r6, [r3, #0]
 800a50e:	6962      	ldr	r2, [r4, #20]
 800a510:	1c43      	adds	r3, r0, #1
 800a512:	429a      	cmp	r2, r3
 800a514:	d004      	beq.n	800a520 <__swbuf_r+0x5a>
 800a516:	89a3      	ldrh	r3, [r4, #12]
 800a518:	07db      	lsls	r3, r3, #31
 800a51a:	d506      	bpl.n	800a52a <__swbuf_r+0x64>
 800a51c:	2e0a      	cmp	r6, #10
 800a51e:	d104      	bne.n	800a52a <__swbuf_r+0x64>
 800a520:	4621      	mov	r1, r4
 800a522:	4628      	mov	r0, r5
 800a524:	f000 fce8 	bl	800aef8 <_fflush_r>
 800a528:	b938      	cbnz	r0, 800a53a <__swbuf_r+0x74>
 800a52a:	4638      	mov	r0, r7
 800a52c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a52e:	4621      	mov	r1, r4
 800a530:	4628      	mov	r0, r5
 800a532:	f000 f805 	bl	800a540 <__swsetup_r>
 800a536:	2800      	cmp	r0, #0
 800a538:	d0d5      	beq.n	800a4e6 <__swbuf_r+0x20>
 800a53a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a53e:	e7f4      	b.n	800a52a <__swbuf_r+0x64>

0800a540 <__swsetup_r>:
 800a540:	b538      	push	{r3, r4, r5, lr}
 800a542:	4b2a      	ldr	r3, [pc, #168]	; (800a5ec <__swsetup_r+0xac>)
 800a544:	4605      	mov	r5, r0
 800a546:	6818      	ldr	r0, [r3, #0]
 800a548:	460c      	mov	r4, r1
 800a54a:	b118      	cbz	r0, 800a554 <__swsetup_r+0x14>
 800a54c:	6a03      	ldr	r3, [r0, #32]
 800a54e:	b90b      	cbnz	r3, 800a554 <__swsetup_r+0x14>
 800a550:	f7ff fed2 	bl	800a2f8 <__sinit>
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a55a:	0718      	lsls	r0, r3, #28
 800a55c:	d422      	bmi.n	800a5a4 <__swsetup_r+0x64>
 800a55e:	06d9      	lsls	r1, r3, #27
 800a560:	d407      	bmi.n	800a572 <__swsetup_r+0x32>
 800a562:	2309      	movs	r3, #9
 800a564:	602b      	str	r3, [r5, #0]
 800a566:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a56a:	81a3      	strh	r3, [r4, #12]
 800a56c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a570:	e034      	b.n	800a5dc <__swsetup_r+0x9c>
 800a572:	0758      	lsls	r0, r3, #29
 800a574:	d512      	bpl.n	800a59c <__swsetup_r+0x5c>
 800a576:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a578:	b141      	cbz	r1, 800a58c <__swsetup_r+0x4c>
 800a57a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a57e:	4299      	cmp	r1, r3
 800a580:	d002      	beq.n	800a588 <__swsetup_r+0x48>
 800a582:	4628      	mov	r0, r5
 800a584:	f000 f912 	bl	800a7ac <_free_r>
 800a588:	2300      	movs	r3, #0
 800a58a:	6363      	str	r3, [r4, #52]	; 0x34
 800a58c:	89a3      	ldrh	r3, [r4, #12]
 800a58e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a592:	81a3      	strh	r3, [r4, #12]
 800a594:	2300      	movs	r3, #0
 800a596:	6063      	str	r3, [r4, #4]
 800a598:	6923      	ldr	r3, [r4, #16]
 800a59a:	6023      	str	r3, [r4, #0]
 800a59c:	89a3      	ldrh	r3, [r4, #12]
 800a59e:	f043 0308 	orr.w	r3, r3, #8
 800a5a2:	81a3      	strh	r3, [r4, #12]
 800a5a4:	6923      	ldr	r3, [r4, #16]
 800a5a6:	b94b      	cbnz	r3, 800a5bc <__swsetup_r+0x7c>
 800a5a8:	89a3      	ldrh	r3, [r4, #12]
 800a5aa:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a5ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a5b2:	d003      	beq.n	800a5bc <__swsetup_r+0x7c>
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	4628      	mov	r0, r5
 800a5b8:	f000 fcec 	bl	800af94 <__smakebuf_r>
 800a5bc:	89a0      	ldrh	r0, [r4, #12]
 800a5be:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5c2:	f010 0301 	ands.w	r3, r0, #1
 800a5c6:	d00a      	beq.n	800a5de <__swsetup_r+0x9e>
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	60a3      	str	r3, [r4, #8]
 800a5cc:	6963      	ldr	r3, [r4, #20]
 800a5ce:	425b      	negs	r3, r3
 800a5d0:	61a3      	str	r3, [r4, #24]
 800a5d2:	6923      	ldr	r3, [r4, #16]
 800a5d4:	b943      	cbnz	r3, 800a5e8 <__swsetup_r+0xa8>
 800a5d6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a5da:	d1c4      	bne.n	800a566 <__swsetup_r+0x26>
 800a5dc:	bd38      	pop	{r3, r4, r5, pc}
 800a5de:	0781      	lsls	r1, r0, #30
 800a5e0:	bf58      	it	pl
 800a5e2:	6963      	ldrpl	r3, [r4, #20]
 800a5e4:	60a3      	str	r3, [r4, #8]
 800a5e6:	e7f4      	b.n	800a5d2 <__swsetup_r+0x92>
 800a5e8:	2000      	movs	r0, #0
 800a5ea:	e7f7      	b.n	800a5dc <__swsetup_r+0x9c>
 800a5ec:	20000064 	.word	0x20000064

0800a5f0 <memset>:
 800a5f0:	4402      	add	r2, r0
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d100      	bne.n	800a5fa <memset+0xa>
 800a5f8:	4770      	bx	lr
 800a5fa:	f803 1b01 	strb.w	r1, [r3], #1
 800a5fe:	e7f9      	b.n	800a5f4 <memset+0x4>

0800a600 <_raise_r>:
 800a600:	291f      	cmp	r1, #31
 800a602:	b538      	push	{r3, r4, r5, lr}
 800a604:	4604      	mov	r4, r0
 800a606:	460d      	mov	r5, r1
 800a608:	d904      	bls.n	800a614 <_raise_r+0x14>
 800a60a:	2316      	movs	r3, #22
 800a60c:	6003      	str	r3, [r0, #0]
 800a60e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a616:	b112      	cbz	r2, 800a61e <_raise_r+0x1e>
 800a618:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a61c:	b94b      	cbnz	r3, 800a632 <_raise_r+0x32>
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 f864 	bl	800a6ec <_getpid_r>
 800a624:	462a      	mov	r2, r5
 800a626:	4601      	mov	r1, r0
 800a628:	4620      	mov	r0, r4
 800a62a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a62e:	f000 b84b 	b.w	800a6c8 <_kill_r>
 800a632:	2b01      	cmp	r3, #1
 800a634:	d00a      	beq.n	800a64c <_raise_r+0x4c>
 800a636:	1c59      	adds	r1, r3, #1
 800a638:	d103      	bne.n	800a642 <_raise_r+0x42>
 800a63a:	2316      	movs	r3, #22
 800a63c:	6003      	str	r3, [r0, #0]
 800a63e:	2001      	movs	r0, #1
 800a640:	e7e7      	b.n	800a612 <_raise_r+0x12>
 800a642:	2400      	movs	r4, #0
 800a644:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a648:	4628      	mov	r0, r5
 800a64a:	4798      	blx	r3
 800a64c:	2000      	movs	r0, #0
 800a64e:	e7e0      	b.n	800a612 <_raise_r+0x12>

0800a650 <raise>:
 800a650:	4b02      	ldr	r3, [pc, #8]	; (800a65c <raise+0xc>)
 800a652:	4601      	mov	r1, r0
 800a654:	6818      	ldr	r0, [r3, #0]
 800a656:	f7ff bfd3 	b.w	800a600 <_raise_r>
 800a65a:	bf00      	nop
 800a65c:	20000064 	.word	0x20000064

0800a660 <_close_r>:
 800a660:	b538      	push	{r3, r4, r5, lr}
 800a662:	4d06      	ldr	r5, [pc, #24]	; (800a67c <_close_r+0x1c>)
 800a664:	2300      	movs	r3, #0
 800a666:	4604      	mov	r4, r0
 800a668:	4608      	mov	r0, r1
 800a66a:	602b      	str	r3, [r5, #0]
 800a66c:	f7fb fe9d 	bl	80063aa <_close>
 800a670:	1c43      	adds	r3, r0, #1
 800a672:	d102      	bne.n	800a67a <_close_r+0x1a>
 800a674:	682b      	ldr	r3, [r5, #0]
 800a676:	b103      	cbz	r3, 800a67a <_close_r+0x1a>
 800a678:	6023      	str	r3, [r4, #0]
 800a67a:	bd38      	pop	{r3, r4, r5, pc}
 800a67c:	2000085c 	.word	0x2000085c

0800a680 <_lseek_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4d07      	ldr	r5, [pc, #28]	; (800a6a0 <_lseek_r+0x20>)
 800a684:	4604      	mov	r4, r0
 800a686:	4608      	mov	r0, r1
 800a688:	4611      	mov	r1, r2
 800a68a:	2200      	movs	r2, #0
 800a68c:	602a      	str	r2, [r5, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	f7fb feb2 	bl	80063f8 <_lseek>
 800a694:	1c43      	adds	r3, r0, #1
 800a696:	d102      	bne.n	800a69e <_lseek_r+0x1e>
 800a698:	682b      	ldr	r3, [r5, #0]
 800a69a:	b103      	cbz	r3, 800a69e <_lseek_r+0x1e>
 800a69c:	6023      	str	r3, [r4, #0]
 800a69e:	bd38      	pop	{r3, r4, r5, pc}
 800a6a0:	2000085c 	.word	0x2000085c

0800a6a4 <_read_r>:
 800a6a4:	b538      	push	{r3, r4, r5, lr}
 800a6a6:	4d07      	ldr	r5, [pc, #28]	; (800a6c4 <_read_r+0x20>)
 800a6a8:	4604      	mov	r4, r0
 800a6aa:	4608      	mov	r0, r1
 800a6ac:	4611      	mov	r1, r2
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	602a      	str	r2, [r5, #0]
 800a6b2:	461a      	mov	r2, r3
 800a6b4:	f7fb fe40 	bl	8006338 <_read>
 800a6b8:	1c43      	adds	r3, r0, #1
 800a6ba:	d102      	bne.n	800a6c2 <_read_r+0x1e>
 800a6bc:	682b      	ldr	r3, [r5, #0]
 800a6be:	b103      	cbz	r3, 800a6c2 <_read_r+0x1e>
 800a6c0:	6023      	str	r3, [r4, #0]
 800a6c2:	bd38      	pop	{r3, r4, r5, pc}
 800a6c4:	2000085c 	.word	0x2000085c

0800a6c8 <_kill_r>:
 800a6c8:	b538      	push	{r3, r4, r5, lr}
 800a6ca:	4d07      	ldr	r5, [pc, #28]	; (800a6e8 <_kill_r+0x20>)
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	4604      	mov	r4, r0
 800a6d0:	4608      	mov	r0, r1
 800a6d2:	4611      	mov	r1, r2
 800a6d4:	602b      	str	r3, [r5, #0]
 800a6d6:	f7fb fe15 	bl	8006304 <_kill>
 800a6da:	1c43      	adds	r3, r0, #1
 800a6dc:	d102      	bne.n	800a6e4 <_kill_r+0x1c>
 800a6de:	682b      	ldr	r3, [r5, #0]
 800a6e0:	b103      	cbz	r3, 800a6e4 <_kill_r+0x1c>
 800a6e2:	6023      	str	r3, [r4, #0]
 800a6e4:	bd38      	pop	{r3, r4, r5, pc}
 800a6e6:	bf00      	nop
 800a6e8:	2000085c 	.word	0x2000085c

0800a6ec <_getpid_r>:
 800a6ec:	f7fb be02 	b.w	80062f4 <_getpid>

0800a6f0 <_sbrk_r>:
 800a6f0:	b538      	push	{r3, r4, r5, lr}
 800a6f2:	4d06      	ldr	r5, [pc, #24]	; (800a70c <_sbrk_r+0x1c>)
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	4604      	mov	r4, r0
 800a6f8:	4608      	mov	r0, r1
 800a6fa:	602b      	str	r3, [r5, #0]
 800a6fc:	f7fb fe8a 	bl	8006414 <_sbrk>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d102      	bne.n	800a70a <_sbrk_r+0x1a>
 800a704:	682b      	ldr	r3, [r5, #0]
 800a706:	b103      	cbz	r3, 800a70a <_sbrk_r+0x1a>
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	bd38      	pop	{r3, r4, r5, pc}
 800a70c:	2000085c 	.word	0x2000085c

0800a710 <_write_r>:
 800a710:	b538      	push	{r3, r4, r5, lr}
 800a712:	4d07      	ldr	r5, [pc, #28]	; (800a730 <_write_r+0x20>)
 800a714:	4604      	mov	r4, r0
 800a716:	4608      	mov	r0, r1
 800a718:	4611      	mov	r1, r2
 800a71a:	2200      	movs	r2, #0
 800a71c:	602a      	str	r2, [r5, #0]
 800a71e:	461a      	mov	r2, r3
 800a720:	f7fb fe27 	bl	8006372 <_write>
 800a724:	1c43      	adds	r3, r0, #1
 800a726:	d102      	bne.n	800a72e <_write_r+0x1e>
 800a728:	682b      	ldr	r3, [r5, #0]
 800a72a:	b103      	cbz	r3, 800a72e <_write_r+0x1e>
 800a72c:	6023      	str	r3, [r4, #0]
 800a72e:	bd38      	pop	{r3, r4, r5, pc}
 800a730:	2000085c 	.word	0x2000085c

0800a734 <__errno>:
 800a734:	4b01      	ldr	r3, [pc, #4]	; (800a73c <__errno+0x8>)
 800a736:	6818      	ldr	r0, [r3, #0]
 800a738:	4770      	bx	lr
 800a73a:	bf00      	nop
 800a73c:	20000064 	.word	0x20000064

0800a740 <__libc_init_array>:
 800a740:	b570      	push	{r4, r5, r6, lr}
 800a742:	4d0d      	ldr	r5, [pc, #52]	; (800a778 <__libc_init_array+0x38>)
 800a744:	4c0d      	ldr	r4, [pc, #52]	; (800a77c <__libc_init_array+0x3c>)
 800a746:	1b64      	subs	r4, r4, r5
 800a748:	10a4      	asrs	r4, r4, #2
 800a74a:	2600      	movs	r6, #0
 800a74c:	42a6      	cmp	r6, r4
 800a74e:	d109      	bne.n	800a764 <__libc_init_array+0x24>
 800a750:	4d0b      	ldr	r5, [pc, #44]	; (800a780 <__libc_init_array+0x40>)
 800a752:	4c0c      	ldr	r4, [pc, #48]	; (800a784 <__libc_init_array+0x44>)
 800a754:	f000 fc7c 	bl	800b050 <_init>
 800a758:	1b64      	subs	r4, r4, r5
 800a75a:	10a4      	asrs	r4, r4, #2
 800a75c:	2600      	movs	r6, #0
 800a75e:	42a6      	cmp	r6, r4
 800a760:	d105      	bne.n	800a76e <__libc_init_array+0x2e>
 800a762:	bd70      	pop	{r4, r5, r6, pc}
 800a764:	f855 3b04 	ldr.w	r3, [r5], #4
 800a768:	4798      	blx	r3
 800a76a:	3601      	adds	r6, #1
 800a76c:	e7ee      	b.n	800a74c <__libc_init_array+0xc>
 800a76e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a772:	4798      	blx	r3
 800a774:	3601      	adds	r6, #1
 800a776:	e7f2      	b.n	800a75e <__libc_init_array+0x1e>
 800a778:	0800b4d8 	.word	0x0800b4d8
 800a77c:	0800b4d8 	.word	0x0800b4d8
 800a780:	0800b4d8 	.word	0x0800b4d8
 800a784:	0800b4e0 	.word	0x0800b4e0

0800a788 <__retarget_lock_init_recursive>:
 800a788:	4770      	bx	lr

0800a78a <__retarget_lock_acquire_recursive>:
 800a78a:	4770      	bx	lr

0800a78c <__retarget_lock_release_recursive>:
 800a78c:	4770      	bx	lr

0800a78e <memcpy>:
 800a78e:	440a      	add	r2, r1
 800a790:	4291      	cmp	r1, r2
 800a792:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a796:	d100      	bne.n	800a79a <memcpy+0xc>
 800a798:	4770      	bx	lr
 800a79a:	b510      	push	{r4, lr}
 800a79c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7a4:	4291      	cmp	r1, r2
 800a7a6:	d1f9      	bne.n	800a79c <memcpy+0xe>
 800a7a8:	bd10      	pop	{r4, pc}
	...

0800a7ac <_free_r>:
 800a7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7ae:	2900      	cmp	r1, #0
 800a7b0:	d044      	beq.n	800a83c <_free_r+0x90>
 800a7b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7b6:	9001      	str	r0, [sp, #4]
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	f1a1 0404 	sub.w	r4, r1, #4
 800a7be:	bfb8      	it	lt
 800a7c0:	18e4      	addlt	r4, r4, r3
 800a7c2:	f7ff fd01 	bl	800a1c8 <__malloc_lock>
 800a7c6:	4a1e      	ldr	r2, [pc, #120]	; (800a840 <_free_r+0x94>)
 800a7c8:	9801      	ldr	r0, [sp, #4]
 800a7ca:	6813      	ldr	r3, [r2, #0]
 800a7cc:	b933      	cbnz	r3, 800a7dc <_free_r+0x30>
 800a7ce:	6063      	str	r3, [r4, #4]
 800a7d0:	6014      	str	r4, [r2, #0]
 800a7d2:	b003      	add	sp, #12
 800a7d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a7d8:	f7ff bcfc 	b.w	800a1d4 <__malloc_unlock>
 800a7dc:	42a3      	cmp	r3, r4
 800a7de:	d908      	bls.n	800a7f2 <_free_r+0x46>
 800a7e0:	6825      	ldr	r5, [r4, #0]
 800a7e2:	1961      	adds	r1, r4, r5
 800a7e4:	428b      	cmp	r3, r1
 800a7e6:	bf01      	itttt	eq
 800a7e8:	6819      	ldreq	r1, [r3, #0]
 800a7ea:	685b      	ldreq	r3, [r3, #4]
 800a7ec:	1949      	addeq	r1, r1, r5
 800a7ee:	6021      	streq	r1, [r4, #0]
 800a7f0:	e7ed      	b.n	800a7ce <_free_r+0x22>
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	b10b      	cbz	r3, 800a7fc <_free_r+0x50>
 800a7f8:	42a3      	cmp	r3, r4
 800a7fa:	d9fa      	bls.n	800a7f2 <_free_r+0x46>
 800a7fc:	6811      	ldr	r1, [r2, #0]
 800a7fe:	1855      	adds	r5, r2, r1
 800a800:	42a5      	cmp	r5, r4
 800a802:	d10b      	bne.n	800a81c <_free_r+0x70>
 800a804:	6824      	ldr	r4, [r4, #0]
 800a806:	4421      	add	r1, r4
 800a808:	1854      	adds	r4, r2, r1
 800a80a:	42a3      	cmp	r3, r4
 800a80c:	6011      	str	r1, [r2, #0]
 800a80e:	d1e0      	bne.n	800a7d2 <_free_r+0x26>
 800a810:	681c      	ldr	r4, [r3, #0]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	6053      	str	r3, [r2, #4]
 800a816:	440c      	add	r4, r1
 800a818:	6014      	str	r4, [r2, #0]
 800a81a:	e7da      	b.n	800a7d2 <_free_r+0x26>
 800a81c:	d902      	bls.n	800a824 <_free_r+0x78>
 800a81e:	230c      	movs	r3, #12
 800a820:	6003      	str	r3, [r0, #0]
 800a822:	e7d6      	b.n	800a7d2 <_free_r+0x26>
 800a824:	6825      	ldr	r5, [r4, #0]
 800a826:	1961      	adds	r1, r4, r5
 800a828:	428b      	cmp	r3, r1
 800a82a:	bf04      	itt	eq
 800a82c:	6819      	ldreq	r1, [r3, #0]
 800a82e:	685b      	ldreq	r3, [r3, #4]
 800a830:	6063      	str	r3, [r4, #4]
 800a832:	bf04      	itt	eq
 800a834:	1949      	addeq	r1, r1, r5
 800a836:	6021      	streq	r1, [r4, #0]
 800a838:	6054      	str	r4, [r2, #4]
 800a83a:	e7ca      	b.n	800a7d2 <_free_r+0x26>
 800a83c:	b003      	add	sp, #12
 800a83e:	bd30      	pop	{r4, r5, pc}
 800a840:	20000718 	.word	0x20000718

0800a844 <__sfputc_r>:
 800a844:	6893      	ldr	r3, [r2, #8]
 800a846:	3b01      	subs	r3, #1
 800a848:	2b00      	cmp	r3, #0
 800a84a:	b410      	push	{r4}
 800a84c:	6093      	str	r3, [r2, #8]
 800a84e:	da08      	bge.n	800a862 <__sfputc_r+0x1e>
 800a850:	6994      	ldr	r4, [r2, #24]
 800a852:	42a3      	cmp	r3, r4
 800a854:	db01      	blt.n	800a85a <__sfputc_r+0x16>
 800a856:	290a      	cmp	r1, #10
 800a858:	d103      	bne.n	800a862 <__sfputc_r+0x1e>
 800a85a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a85e:	f7ff be32 	b.w	800a4c6 <__swbuf_r>
 800a862:	6813      	ldr	r3, [r2, #0]
 800a864:	1c58      	adds	r0, r3, #1
 800a866:	6010      	str	r0, [r2, #0]
 800a868:	7019      	strb	r1, [r3, #0]
 800a86a:	4608      	mov	r0, r1
 800a86c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a870:	4770      	bx	lr

0800a872 <__sfputs_r>:
 800a872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a874:	4606      	mov	r6, r0
 800a876:	460f      	mov	r7, r1
 800a878:	4614      	mov	r4, r2
 800a87a:	18d5      	adds	r5, r2, r3
 800a87c:	42ac      	cmp	r4, r5
 800a87e:	d101      	bne.n	800a884 <__sfputs_r+0x12>
 800a880:	2000      	movs	r0, #0
 800a882:	e007      	b.n	800a894 <__sfputs_r+0x22>
 800a884:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a888:	463a      	mov	r2, r7
 800a88a:	4630      	mov	r0, r6
 800a88c:	f7ff ffda 	bl	800a844 <__sfputc_r>
 800a890:	1c43      	adds	r3, r0, #1
 800a892:	d1f3      	bne.n	800a87c <__sfputs_r+0xa>
 800a894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a898 <_vfiprintf_r>:
 800a898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a89c:	460d      	mov	r5, r1
 800a89e:	b09d      	sub	sp, #116	; 0x74
 800a8a0:	4614      	mov	r4, r2
 800a8a2:	4698      	mov	r8, r3
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	b118      	cbz	r0, 800a8b0 <_vfiprintf_r+0x18>
 800a8a8:	6a03      	ldr	r3, [r0, #32]
 800a8aa:	b90b      	cbnz	r3, 800a8b0 <_vfiprintf_r+0x18>
 800a8ac:	f7ff fd24 	bl	800a2f8 <__sinit>
 800a8b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8b2:	07d9      	lsls	r1, r3, #31
 800a8b4:	d405      	bmi.n	800a8c2 <_vfiprintf_r+0x2a>
 800a8b6:	89ab      	ldrh	r3, [r5, #12]
 800a8b8:	059a      	lsls	r2, r3, #22
 800a8ba:	d402      	bmi.n	800a8c2 <_vfiprintf_r+0x2a>
 800a8bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8be:	f7ff ff64 	bl	800a78a <__retarget_lock_acquire_recursive>
 800a8c2:	89ab      	ldrh	r3, [r5, #12]
 800a8c4:	071b      	lsls	r3, r3, #28
 800a8c6:	d501      	bpl.n	800a8cc <_vfiprintf_r+0x34>
 800a8c8:	692b      	ldr	r3, [r5, #16]
 800a8ca:	b99b      	cbnz	r3, 800a8f4 <_vfiprintf_r+0x5c>
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f7ff fe36 	bl	800a540 <__swsetup_r>
 800a8d4:	b170      	cbz	r0, 800a8f4 <_vfiprintf_r+0x5c>
 800a8d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8d8:	07dc      	lsls	r4, r3, #31
 800a8da:	d504      	bpl.n	800a8e6 <_vfiprintf_r+0x4e>
 800a8dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8e0:	b01d      	add	sp, #116	; 0x74
 800a8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e6:	89ab      	ldrh	r3, [r5, #12]
 800a8e8:	0598      	lsls	r0, r3, #22
 800a8ea:	d4f7      	bmi.n	800a8dc <_vfiprintf_r+0x44>
 800a8ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8ee:	f7ff ff4d 	bl	800a78c <__retarget_lock_release_recursive>
 800a8f2:	e7f3      	b.n	800a8dc <_vfiprintf_r+0x44>
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f8:	2320      	movs	r3, #32
 800a8fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800a902:	2330      	movs	r3, #48	; 0x30
 800a904:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aab8 <_vfiprintf_r+0x220>
 800a908:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a90c:	f04f 0901 	mov.w	r9, #1
 800a910:	4623      	mov	r3, r4
 800a912:	469a      	mov	sl, r3
 800a914:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a918:	b10a      	cbz	r2, 800a91e <_vfiprintf_r+0x86>
 800a91a:	2a25      	cmp	r2, #37	; 0x25
 800a91c:	d1f9      	bne.n	800a912 <_vfiprintf_r+0x7a>
 800a91e:	ebba 0b04 	subs.w	fp, sl, r4
 800a922:	d00b      	beq.n	800a93c <_vfiprintf_r+0xa4>
 800a924:	465b      	mov	r3, fp
 800a926:	4622      	mov	r2, r4
 800a928:	4629      	mov	r1, r5
 800a92a:	4630      	mov	r0, r6
 800a92c:	f7ff ffa1 	bl	800a872 <__sfputs_r>
 800a930:	3001      	adds	r0, #1
 800a932:	f000 80a9 	beq.w	800aa88 <_vfiprintf_r+0x1f0>
 800a936:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a938:	445a      	add	r2, fp
 800a93a:	9209      	str	r2, [sp, #36]	; 0x24
 800a93c:	f89a 3000 	ldrb.w	r3, [sl]
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 80a1 	beq.w	800aa88 <_vfiprintf_r+0x1f0>
 800a946:	2300      	movs	r3, #0
 800a948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a94c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a950:	f10a 0a01 	add.w	sl, sl, #1
 800a954:	9304      	str	r3, [sp, #16]
 800a956:	9307      	str	r3, [sp, #28]
 800a958:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a95c:	931a      	str	r3, [sp, #104]	; 0x68
 800a95e:	4654      	mov	r4, sl
 800a960:	2205      	movs	r2, #5
 800a962:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a966:	4854      	ldr	r0, [pc, #336]	; (800aab8 <_vfiprintf_r+0x220>)
 800a968:	f7f5 fc5a 	bl	8000220 <memchr>
 800a96c:	9a04      	ldr	r2, [sp, #16]
 800a96e:	b9d8      	cbnz	r0, 800a9a8 <_vfiprintf_r+0x110>
 800a970:	06d1      	lsls	r1, r2, #27
 800a972:	bf44      	itt	mi
 800a974:	2320      	movmi	r3, #32
 800a976:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a97a:	0713      	lsls	r3, r2, #28
 800a97c:	bf44      	itt	mi
 800a97e:	232b      	movmi	r3, #43	; 0x2b
 800a980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a984:	f89a 3000 	ldrb.w	r3, [sl]
 800a988:	2b2a      	cmp	r3, #42	; 0x2a
 800a98a:	d015      	beq.n	800a9b8 <_vfiprintf_r+0x120>
 800a98c:	9a07      	ldr	r2, [sp, #28]
 800a98e:	4654      	mov	r4, sl
 800a990:	2000      	movs	r0, #0
 800a992:	f04f 0c0a 	mov.w	ip, #10
 800a996:	4621      	mov	r1, r4
 800a998:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a99c:	3b30      	subs	r3, #48	; 0x30
 800a99e:	2b09      	cmp	r3, #9
 800a9a0:	d94d      	bls.n	800aa3e <_vfiprintf_r+0x1a6>
 800a9a2:	b1b0      	cbz	r0, 800a9d2 <_vfiprintf_r+0x13a>
 800a9a4:	9207      	str	r2, [sp, #28]
 800a9a6:	e014      	b.n	800a9d2 <_vfiprintf_r+0x13a>
 800a9a8:	eba0 0308 	sub.w	r3, r0, r8
 800a9ac:	fa09 f303 	lsl.w	r3, r9, r3
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	9304      	str	r3, [sp, #16]
 800a9b4:	46a2      	mov	sl, r4
 800a9b6:	e7d2      	b.n	800a95e <_vfiprintf_r+0xc6>
 800a9b8:	9b03      	ldr	r3, [sp, #12]
 800a9ba:	1d19      	adds	r1, r3, #4
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	9103      	str	r1, [sp, #12]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	bfbb      	ittet	lt
 800a9c4:	425b      	neglt	r3, r3
 800a9c6:	f042 0202 	orrlt.w	r2, r2, #2
 800a9ca:	9307      	strge	r3, [sp, #28]
 800a9cc:	9307      	strlt	r3, [sp, #28]
 800a9ce:	bfb8      	it	lt
 800a9d0:	9204      	strlt	r2, [sp, #16]
 800a9d2:	7823      	ldrb	r3, [r4, #0]
 800a9d4:	2b2e      	cmp	r3, #46	; 0x2e
 800a9d6:	d10c      	bne.n	800a9f2 <_vfiprintf_r+0x15a>
 800a9d8:	7863      	ldrb	r3, [r4, #1]
 800a9da:	2b2a      	cmp	r3, #42	; 0x2a
 800a9dc:	d134      	bne.n	800aa48 <_vfiprintf_r+0x1b0>
 800a9de:	9b03      	ldr	r3, [sp, #12]
 800a9e0:	1d1a      	adds	r2, r3, #4
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	9203      	str	r2, [sp, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	bfb8      	it	lt
 800a9ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a9ee:	3402      	adds	r4, #2
 800a9f0:	9305      	str	r3, [sp, #20]
 800a9f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aac8 <_vfiprintf_r+0x230>
 800a9f6:	7821      	ldrb	r1, [r4, #0]
 800a9f8:	2203      	movs	r2, #3
 800a9fa:	4650      	mov	r0, sl
 800a9fc:	f7f5 fc10 	bl	8000220 <memchr>
 800aa00:	b138      	cbz	r0, 800aa12 <_vfiprintf_r+0x17a>
 800aa02:	9b04      	ldr	r3, [sp, #16]
 800aa04:	eba0 000a 	sub.w	r0, r0, sl
 800aa08:	2240      	movs	r2, #64	; 0x40
 800aa0a:	4082      	lsls	r2, r0
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	3401      	adds	r4, #1
 800aa10:	9304      	str	r3, [sp, #16]
 800aa12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa16:	4829      	ldr	r0, [pc, #164]	; (800aabc <_vfiprintf_r+0x224>)
 800aa18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa1c:	2206      	movs	r2, #6
 800aa1e:	f7f5 fbff 	bl	8000220 <memchr>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d03f      	beq.n	800aaa6 <_vfiprintf_r+0x20e>
 800aa26:	4b26      	ldr	r3, [pc, #152]	; (800aac0 <_vfiprintf_r+0x228>)
 800aa28:	bb1b      	cbnz	r3, 800aa72 <_vfiprintf_r+0x1da>
 800aa2a:	9b03      	ldr	r3, [sp, #12]
 800aa2c:	3307      	adds	r3, #7
 800aa2e:	f023 0307 	bic.w	r3, r3, #7
 800aa32:	3308      	adds	r3, #8
 800aa34:	9303      	str	r3, [sp, #12]
 800aa36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa38:	443b      	add	r3, r7
 800aa3a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa3c:	e768      	b.n	800a910 <_vfiprintf_r+0x78>
 800aa3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa42:	460c      	mov	r4, r1
 800aa44:	2001      	movs	r0, #1
 800aa46:	e7a6      	b.n	800a996 <_vfiprintf_r+0xfe>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	3401      	adds	r4, #1
 800aa4c:	9305      	str	r3, [sp, #20]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	f04f 0c0a 	mov.w	ip, #10
 800aa54:	4620      	mov	r0, r4
 800aa56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa5a:	3a30      	subs	r2, #48	; 0x30
 800aa5c:	2a09      	cmp	r2, #9
 800aa5e:	d903      	bls.n	800aa68 <_vfiprintf_r+0x1d0>
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0c6      	beq.n	800a9f2 <_vfiprintf_r+0x15a>
 800aa64:	9105      	str	r1, [sp, #20]
 800aa66:	e7c4      	b.n	800a9f2 <_vfiprintf_r+0x15a>
 800aa68:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e7f0      	b.n	800aa54 <_vfiprintf_r+0x1bc>
 800aa72:	ab03      	add	r3, sp, #12
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	462a      	mov	r2, r5
 800aa78:	4b12      	ldr	r3, [pc, #72]	; (800aac4 <_vfiprintf_r+0x22c>)
 800aa7a:	a904      	add	r1, sp, #16
 800aa7c:	4630      	mov	r0, r6
 800aa7e:	f3af 8000 	nop.w
 800aa82:	4607      	mov	r7, r0
 800aa84:	1c78      	adds	r0, r7, #1
 800aa86:	d1d6      	bne.n	800aa36 <_vfiprintf_r+0x19e>
 800aa88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa8a:	07d9      	lsls	r1, r3, #31
 800aa8c:	d405      	bmi.n	800aa9a <_vfiprintf_r+0x202>
 800aa8e:	89ab      	ldrh	r3, [r5, #12]
 800aa90:	059a      	lsls	r2, r3, #22
 800aa92:	d402      	bmi.n	800aa9a <_vfiprintf_r+0x202>
 800aa94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa96:	f7ff fe79 	bl	800a78c <__retarget_lock_release_recursive>
 800aa9a:	89ab      	ldrh	r3, [r5, #12]
 800aa9c:	065b      	lsls	r3, r3, #25
 800aa9e:	f53f af1d 	bmi.w	800a8dc <_vfiprintf_r+0x44>
 800aaa2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aaa4:	e71c      	b.n	800a8e0 <_vfiprintf_r+0x48>
 800aaa6:	ab03      	add	r3, sp, #12
 800aaa8:	9300      	str	r3, [sp, #0]
 800aaaa:	462a      	mov	r2, r5
 800aaac:	4b05      	ldr	r3, [pc, #20]	; (800aac4 <_vfiprintf_r+0x22c>)
 800aaae:	a904      	add	r1, sp, #16
 800aab0:	4630      	mov	r0, r6
 800aab2:	f000 f879 	bl	800aba8 <_printf_i>
 800aab6:	e7e4      	b.n	800aa82 <_vfiprintf_r+0x1ea>
 800aab8:	0800b4a2 	.word	0x0800b4a2
 800aabc:	0800b4ac 	.word	0x0800b4ac
 800aac0:	00000000 	.word	0x00000000
 800aac4:	0800a873 	.word	0x0800a873
 800aac8:	0800b4a8 	.word	0x0800b4a8

0800aacc <_printf_common>:
 800aacc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aad0:	4616      	mov	r6, r2
 800aad2:	4699      	mov	r9, r3
 800aad4:	688a      	ldr	r2, [r1, #8]
 800aad6:	690b      	ldr	r3, [r1, #16]
 800aad8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aadc:	4293      	cmp	r3, r2
 800aade:	bfb8      	it	lt
 800aae0:	4613      	movlt	r3, r2
 800aae2:	6033      	str	r3, [r6, #0]
 800aae4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aae8:	4607      	mov	r7, r0
 800aaea:	460c      	mov	r4, r1
 800aaec:	b10a      	cbz	r2, 800aaf2 <_printf_common+0x26>
 800aaee:	3301      	adds	r3, #1
 800aaf0:	6033      	str	r3, [r6, #0]
 800aaf2:	6823      	ldr	r3, [r4, #0]
 800aaf4:	0699      	lsls	r1, r3, #26
 800aaf6:	bf42      	ittt	mi
 800aaf8:	6833      	ldrmi	r3, [r6, #0]
 800aafa:	3302      	addmi	r3, #2
 800aafc:	6033      	strmi	r3, [r6, #0]
 800aafe:	6825      	ldr	r5, [r4, #0]
 800ab00:	f015 0506 	ands.w	r5, r5, #6
 800ab04:	d106      	bne.n	800ab14 <_printf_common+0x48>
 800ab06:	f104 0a19 	add.w	sl, r4, #25
 800ab0a:	68e3      	ldr	r3, [r4, #12]
 800ab0c:	6832      	ldr	r2, [r6, #0]
 800ab0e:	1a9b      	subs	r3, r3, r2
 800ab10:	42ab      	cmp	r3, r5
 800ab12:	dc26      	bgt.n	800ab62 <_printf_common+0x96>
 800ab14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ab18:	1e13      	subs	r3, r2, #0
 800ab1a:	6822      	ldr	r2, [r4, #0]
 800ab1c:	bf18      	it	ne
 800ab1e:	2301      	movne	r3, #1
 800ab20:	0692      	lsls	r2, r2, #26
 800ab22:	d42b      	bmi.n	800ab7c <_printf_common+0xb0>
 800ab24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab28:	4649      	mov	r1, r9
 800ab2a:	4638      	mov	r0, r7
 800ab2c:	47c0      	blx	r8
 800ab2e:	3001      	adds	r0, #1
 800ab30:	d01e      	beq.n	800ab70 <_printf_common+0xa4>
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	6922      	ldr	r2, [r4, #16]
 800ab36:	f003 0306 	and.w	r3, r3, #6
 800ab3a:	2b04      	cmp	r3, #4
 800ab3c:	bf02      	ittt	eq
 800ab3e:	68e5      	ldreq	r5, [r4, #12]
 800ab40:	6833      	ldreq	r3, [r6, #0]
 800ab42:	1aed      	subeq	r5, r5, r3
 800ab44:	68a3      	ldr	r3, [r4, #8]
 800ab46:	bf0c      	ite	eq
 800ab48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab4c:	2500      	movne	r5, #0
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	bfc4      	itt	gt
 800ab52:	1a9b      	subgt	r3, r3, r2
 800ab54:	18ed      	addgt	r5, r5, r3
 800ab56:	2600      	movs	r6, #0
 800ab58:	341a      	adds	r4, #26
 800ab5a:	42b5      	cmp	r5, r6
 800ab5c:	d11a      	bne.n	800ab94 <_printf_common+0xc8>
 800ab5e:	2000      	movs	r0, #0
 800ab60:	e008      	b.n	800ab74 <_printf_common+0xa8>
 800ab62:	2301      	movs	r3, #1
 800ab64:	4652      	mov	r2, sl
 800ab66:	4649      	mov	r1, r9
 800ab68:	4638      	mov	r0, r7
 800ab6a:	47c0      	blx	r8
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	d103      	bne.n	800ab78 <_printf_common+0xac>
 800ab70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ab74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab78:	3501      	adds	r5, #1
 800ab7a:	e7c6      	b.n	800ab0a <_printf_common+0x3e>
 800ab7c:	18e1      	adds	r1, r4, r3
 800ab7e:	1c5a      	adds	r2, r3, #1
 800ab80:	2030      	movs	r0, #48	; 0x30
 800ab82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab86:	4422      	add	r2, r4
 800ab88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab90:	3302      	adds	r3, #2
 800ab92:	e7c7      	b.n	800ab24 <_printf_common+0x58>
 800ab94:	2301      	movs	r3, #1
 800ab96:	4622      	mov	r2, r4
 800ab98:	4649      	mov	r1, r9
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	47c0      	blx	r8
 800ab9e:	3001      	adds	r0, #1
 800aba0:	d0e6      	beq.n	800ab70 <_printf_common+0xa4>
 800aba2:	3601      	adds	r6, #1
 800aba4:	e7d9      	b.n	800ab5a <_printf_common+0x8e>
	...

0800aba8 <_printf_i>:
 800aba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800abac:	7e0f      	ldrb	r7, [r1, #24]
 800abae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800abb0:	2f78      	cmp	r7, #120	; 0x78
 800abb2:	4691      	mov	r9, r2
 800abb4:	4680      	mov	r8, r0
 800abb6:	460c      	mov	r4, r1
 800abb8:	469a      	mov	sl, r3
 800abba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800abbe:	d807      	bhi.n	800abd0 <_printf_i+0x28>
 800abc0:	2f62      	cmp	r7, #98	; 0x62
 800abc2:	d80a      	bhi.n	800abda <_printf_i+0x32>
 800abc4:	2f00      	cmp	r7, #0
 800abc6:	f000 80d4 	beq.w	800ad72 <_printf_i+0x1ca>
 800abca:	2f58      	cmp	r7, #88	; 0x58
 800abcc:	f000 80c0 	beq.w	800ad50 <_printf_i+0x1a8>
 800abd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abd8:	e03a      	b.n	800ac50 <_printf_i+0xa8>
 800abda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abde:	2b15      	cmp	r3, #21
 800abe0:	d8f6      	bhi.n	800abd0 <_printf_i+0x28>
 800abe2:	a101      	add	r1, pc, #4	; (adr r1, 800abe8 <_printf_i+0x40>)
 800abe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abe8:	0800ac41 	.word	0x0800ac41
 800abec:	0800ac55 	.word	0x0800ac55
 800abf0:	0800abd1 	.word	0x0800abd1
 800abf4:	0800abd1 	.word	0x0800abd1
 800abf8:	0800abd1 	.word	0x0800abd1
 800abfc:	0800abd1 	.word	0x0800abd1
 800ac00:	0800ac55 	.word	0x0800ac55
 800ac04:	0800abd1 	.word	0x0800abd1
 800ac08:	0800abd1 	.word	0x0800abd1
 800ac0c:	0800abd1 	.word	0x0800abd1
 800ac10:	0800abd1 	.word	0x0800abd1
 800ac14:	0800ad59 	.word	0x0800ad59
 800ac18:	0800ac81 	.word	0x0800ac81
 800ac1c:	0800ad13 	.word	0x0800ad13
 800ac20:	0800abd1 	.word	0x0800abd1
 800ac24:	0800abd1 	.word	0x0800abd1
 800ac28:	0800ad7b 	.word	0x0800ad7b
 800ac2c:	0800abd1 	.word	0x0800abd1
 800ac30:	0800ac81 	.word	0x0800ac81
 800ac34:	0800abd1 	.word	0x0800abd1
 800ac38:	0800abd1 	.word	0x0800abd1
 800ac3c:	0800ad1b 	.word	0x0800ad1b
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	1d1a      	adds	r2, r3, #4
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	602a      	str	r2, [r5, #0]
 800ac48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac50:	2301      	movs	r3, #1
 800ac52:	e09f      	b.n	800ad94 <_printf_i+0x1ec>
 800ac54:	6820      	ldr	r0, [r4, #0]
 800ac56:	682b      	ldr	r3, [r5, #0]
 800ac58:	0607      	lsls	r7, r0, #24
 800ac5a:	f103 0104 	add.w	r1, r3, #4
 800ac5e:	6029      	str	r1, [r5, #0]
 800ac60:	d501      	bpl.n	800ac66 <_printf_i+0xbe>
 800ac62:	681e      	ldr	r6, [r3, #0]
 800ac64:	e003      	b.n	800ac6e <_printf_i+0xc6>
 800ac66:	0646      	lsls	r6, r0, #25
 800ac68:	d5fb      	bpl.n	800ac62 <_printf_i+0xba>
 800ac6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ac6e:	2e00      	cmp	r6, #0
 800ac70:	da03      	bge.n	800ac7a <_printf_i+0xd2>
 800ac72:	232d      	movs	r3, #45	; 0x2d
 800ac74:	4276      	negs	r6, r6
 800ac76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac7a:	485a      	ldr	r0, [pc, #360]	; (800ade4 <_printf_i+0x23c>)
 800ac7c:	230a      	movs	r3, #10
 800ac7e:	e012      	b.n	800aca6 <_printf_i+0xfe>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	6820      	ldr	r0, [r4, #0]
 800ac84:	1d19      	adds	r1, r3, #4
 800ac86:	6029      	str	r1, [r5, #0]
 800ac88:	0605      	lsls	r5, r0, #24
 800ac8a:	d501      	bpl.n	800ac90 <_printf_i+0xe8>
 800ac8c:	681e      	ldr	r6, [r3, #0]
 800ac8e:	e002      	b.n	800ac96 <_printf_i+0xee>
 800ac90:	0641      	lsls	r1, r0, #25
 800ac92:	d5fb      	bpl.n	800ac8c <_printf_i+0xe4>
 800ac94:	881e      	ldrh	r6, [r3, #0]
 800ac96:	4853      	ldr	r0, [pc, #332]	; (800ade4 <_printf_i+0x23c>)
 800ac98:	2f6f      	cmp	r7, #111	; 0x6f
 800ac9a:	bf0c      	ite	eq
 800ac9c:	2308      	moveq	r3, #8
 800ac9e:	230a      	movne	r3, #10
 800aca0:	2100      	movs	r1, #0
 800aca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aca6:	6865      	ldr	r5, [r4, #4]
 800aca8:	60a5      	str	r5, [r4, #8]
 800acaa:	2d00      	cmp	r5, #0
 800acac:	bfa2      	ittt	ge
 800acae:	6821      	ldrge	r1, [r4, #0]
 800acb0:	f021 0104 	bicge.w	r1, r1, #4
 800acb4:	6021      	strge	r1, [r4, #0]
 800acb6:	b90e      	cbnz	r6, 800acbc <_printf_i+0x114>
 800acb8:	2d00      	cmp	r5, #0
 800acba:	d04b      	beq.n	800ad54 <_printf_i+0x1ac>
 800acbc:	4615      	mov	r5, r2
 800acbe:	fbb6 f1f3 	udiv	r1, r6, r3
 800acc2:	fb03 6711 	mls	r7, r3, r1, r6
 800acc6:	5dc7      	ldrb	r7, [r0, r7]
 800acc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800accc:	4637      	mov	r7, r6
 800acce:	42bb      	cmp	r3, r7
 800acd0:	460e      	mov	r6, r1
 800acd2:	d9f4      	bls.n	800acbe <_printf_i+0x116>
 800acd4:	2b08      	cmp	r3, #8
 800acd6:	d10b      	bne.n	800acf0 <_printf_i+0x148>
 800acd8:	6823      	ldr	r3, [r4, #0]
 800acda:	07de      	lsls	r6, r3, #31
 800acdc:	d508      	bpl.n	800acf0 <_printf_i+0x148>
 800acde:	6923      	ldr	r3, [r4, #16]
 800ace0:	6861      	ldr	r1, [r4, #4]
 800ace2:	4299      	cmp	r1, r3
 800ace4:	bfde      	ittt	le
 800ace6:	2330      	movle	r3, #48	; 0x30
 800ace8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800acec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800acf0:	1b52      	subs	r2, r2, r5
 800acf2:	6122      	str	r2, [r4, #16]
 800acf4:	f8cd a000 	str.w	sl, [sp]
 800acf8:	464b      	mov	r3, r9
 800acfa:	aa03      	add	r2, sp, #12
 800acfc:	4621      	mov	r1, r4
 800acfe:	4640      	mov	r0, r8
 800ad00:	f7ff fee4 	bl	800aacc <_printf_common>
 800ad04:	3001      	adds	r0, #1
 800ad06:	d14a      	bne.n	800ad9e <_printf_i+0x1f6>
 800ad08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ad0c:	b004      	add	sp, #16
 800ad0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad12:	6823      	ldr	r3, [r4, #0]
 800ad14:	f043 0320 	orr.w	r3, r3, #32
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	4833      	ldr	r0, [pc, #204]	; (800ade8 <_printf_i+0x240>)
 800ad1c:	2778      	movs	r7, #120	; 0x78
 800ad1e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ad22:	6823      	ldr	r3, [r4, #0]
 800ad24:	6829      	ldr	r1, [r5, #0]
 800ad26:	061f      	lsls	r7, r3, #24
 800ad28:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad2c:	d402      	bmi.n	800ad34 <_printf_i+0x18c>
 800ad2e:	065f      	lsls	r7, r3, #25
 800ad30:	bf48      	it	mi
 800ad32:	b2b6      	uxthmi	r6, r6
 800ad34:	07df      	lsls	r7, r3, #31
 800ad36:	bf48      	it	mi
 800ad38:	f043 0320 	orrmi.w	r3, r3, #32
 800ad3c:	6029      	str	r1, [r5, #0]
 800ad3e:	bf48      	it	mi
 800ad40:	6023      	strmi	r3, [r4, #0]
 800ad42:	b91e      	cbnz	r6, 800ad4c <_printf_i+0x1a4>
 800ad44:	6823      	ldr	r3, [r4, #0]
 800ad46:	f023 0320 	bic.w	r3, r3, #32
 800ad4a:	6023      	str	r3, [r4, #0]
 800ad4c:	2310      	movs	r3, #16
 800ad4e:	e7a7      	b.n	800aca0 <_printf_i+0xf8>
 800ad50:	4824      	ldr	r0, [pc, #144]	; (800ade4 <_printf_i+0x23c>)
 800ad52:	e7e4      	b.n	800ad1e <_printf_i+0x176>
 800ad54:	4615      	mov	r5, r2
 800ad56:	e7bd      	b.n	800acd4 <_printf_i+0x12c>
 800ad58:	682b      	ldr	r3, [r5, #0]
 800ad5a:	6826      	ldr	r6, [r4, #0]
 800ad5c:	6961      	ldr	r1, [r4, #20]
 800ad5e:	1d18      	adds	r0, r3, #4
 800ad60:	6028      	str	r0, [r5, #0]
 800ad62:	0635      	lsls	r5, r6, #24
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	d501      	bpl.n	800ad6c <_printf_i+0x1c4>
 800ad68:	6019      	str	r1, [r3, #0]
 800ad6a:	e002      	b.n	800ad72 <_printf_i+0x1ca>
 800ad6c:	0670      	lsls	r0, r6, #25
 800ad6e:	d5fb      	bpl.n	800ad68 <_printf_i+0x1c0>
 800ad70:	8019      	strh	r1, [r3, #0]
 800ad72:	2300      	movs	r3, #0
 800ad74:	6123      	str	r3, [r4, #16]
 800ad76:	4615      	mov	r5, r2
 800ad78:	e7bc      	b.n	800acf4 <_printf_i+0x14c>
 800ad7a:	682b      	ldr	r3, [r5, #0]
 800ad7c:	1d1a      	adds	r2, r3, #4
 800ad7e:	602a      	str	r2, [r5, #0]
 800ad80:	681d      	ldr	r5, [r3, #0]
 800ad82:	6862      	ldr	r2, [r4, #4]
 800ad84:	2100      	movs	r1, #0
 800ad86:	4628      	mov	r0, r5
 800ad88:	f7f5 fa4a 	bl	8000220 <memchr>
 800ad8c:	b108      	cbz	r0, 800ad92 <_printf_i+0x1ea>
 800ad8e:	1b40      	subs	r0, r0, r5
 800ad90:	6060      	str	r0, [r4, #4]
 800ad92:	6863      	ldr	r3, [r4, #4]
 800ad94:	6123      	str	r3, [r4, #16]
 800ad96:	2300      	movs	r3, #0
 800ad98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad9c:	e7aa      	b.n	800acf4 <_printf_i+0x14c>
 800ad9e:	6923      	ldr	r3, [r4, #16]
 800ada0:	462a      	mov	r2, r5
 800ada2:	4649      	mov	r1, r9
 800ada4:	4640      	mov	r0, r8
 800ada6:	47d0      	blx	sl
 800ada8:	3001      	adds	r0, #1
 800adaa:	d0ad      	beq.n	800ad08 <_printf_i+0x160>
 800adac:	6823      	ldr	r3, [r4, #0]
 800adae:	079b      	lsls	r3, r3, #30
 800adb0:	d413      	bmi.n	800adda <_printf_i+0x232>
 800adb2:	68e0      	ldr	r0, [r4, #12]
 800adb4:	9b03      	ldr	r3, [sp, #12]
 800adb6:	4298      	cmp	r0, r3
 800adb8:	bfb8      	it	lt
 800adba:	4618      	movlt	r0, r3
 800adbc:	e7a6      	b.n	800ad0c <_printf_i+0x164>
 800adbe:	2301      	movs	r3, #1
 800adc0:	4632      	mov	r2, r6
 800adc2:	4649      	mov	r1, r9
 800adc4:	4640      	mov	r0, r8
 800adc6:	47d0      	blx	sl
 800adc8:	3001      	adds	r0, #1
 800adca:	d09d      	beq.n	800ad08 <_printf_i+0x160>
 800adcc:	3501      	adds	r5, #1
 800adce:	68e3      	ldr	r3, [r4, #12]
 800add0:	9903      	ldr	r1, [sp, #12]
 800add2:	1a5b      	subs	r3, r3, r1
 800add4:	42ab      	cmp	r3, r5
 800add6:	dcf2      	bgt.n	800adbe <_printf_i+0x216>
 800add8:	e7eb      	b.n	800adb2 <_printf_i+0x20a>
 800adda:	2500      	movs	r5, #0
 800addc:	f104 0619 	add.w	r6, r4, #25
 800ade0:	e7f5      	b.n	800adce <_printf_i+0x226>
 800ade2:	bf00      	nop
 800ade4:	0800b4b3 	.word	0x0800b4b3
 800ade8:	0800b4c4 	.word	0x0800b4c4

0800adec <__sflush_r>:
 800adec:	898a      	ldrh	r2, [r1, #12]
 800adee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adf2:	4605      	mov	r5, r0
 800adf4:	0710      	lsls	r0, r2, #28
 800adf6:	460c      	mov	r4, r1
 800adf8:	d458      	bmi.n	800aeac <__sflush_r+0xc0>
 800adfa:	684b      	ldr	r3, [r1, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	dc05      	bgt.n	800ae0c <__sflush_r+0x20>
 800ae00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	dc02      	bgt.n	800ae0c <__sflush_r+0x20>
 800ae06:	2000      	movs	r0, #0
 800ae08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae0e:	2e00      	cmp	r6, #0
 800ae10:	d0f9      	beq.n	800ae06 <__sflush_r+0x1a>
 800ae12:	2300      	movs	r3, #0
 800ae14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae18:	682f      	ldr	r7, [r5, #0]
 800ae1a:	6a21      	ldr	r1, [r4, #32]
 800ae1c:	602b      	str	r3, [r5, #0]
 800ae1e:	d032      	beq.n	800ae86 <__sflush_r+0x9a>
 800ae20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae22:	89a3      	ldrh	r3, [r4, #12]
 800ae24:	075a      	lsls	r2, r3, #29
 800ae26:	d505      	bpl.n	800ae34 <__sflush_r+0x48>
 800ae28:	6863      	ldr	r3, [r4, #4]
 800ae2a:	1ac0      	subs	r0, r0, r3
 800ae2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae2e:	b10b      	cbz	r3, 800ae34 <__sflush_r+0x48>
 800ae30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae32:	1ac0      	subs	r0, r0, r3
 800ae34:	2300      	movs	r3, #0
 800ae36:	4602      	mov	r2, r0
 800ae38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae3a:	6a21      	ldr	r1, [r4, #32]
 800ae3c:	4628      	mov	r0, r5
 800ae3e:	47b0      	blx	r6
 800ae40:	1c43      	adds	r3, r0, #1
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	d106      	bne.n	800ae54 <__sflush_r+0x68>
 800ae46:	6829      	ldr	r1, [r5, #0]
 800ae48:	291d      	cmp	r1, #29
 800ae4a:	d82b      	bhi.n	800aea4 <__sflush_r+0xb8>
 800ae4c:	4a29      	ldr	r2, [pc, #164]	; (800aef4 <__sflush_r+0x108>)
 800ae4e:	410a      	asrs	r2, r1
 800ae50:	07d6      	lsls	r6, r2, #31
 800ae52:	d427      	bmi.n	800aea4 <__sflush_r+0xb8>
 800ae54:	2200      	movs	r2, #0
 800ae56:	6062      	str	r2, [r4, #4]
 800ae58:	04d9      	lsls	r1, r3, #19
 800ae5a:	6922      	ldr	r2, [r4, #16]
 800ae5c:	6022      	str	r2, [r4, #0]
 800ae5e:	d504      	bpl.n	800ae6a <__sflush_r+0x7e>
 800ae60:	1c42      	adds	r2, r0, #1
 800ae62:	d101      	bne.n	800ae68 <__sflush_r+0x7c>
 800ae64:	682b      	ldr	r3, [r5, #0]
 800ae66:	b903      	cbnz	r3, 800ae6a <__sflush_r+0x7e>
 800ae68:	6560      	str	r0, [r4, #84]	; 0x54
 800ae6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae6c:	602f      	str	r7, [r5, #0]
 800ae6e:	2900      	cmp	r1, #0
 800ae70:	d0c9      	beq.n	800ae06 <__sflush_r+0x1a>
 800ae72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae76:	4299      	cmp	r1, r3
 800ae78:	d002      	beq.n	800ae80 <__sflush_r+0x94>
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	f7ff fc96 	bl	800a7ac <_free_r>
 800ae80:	2000      	movs	r0, #0
 800ae82:	6360      	str	r0, [r4, #52]	; 0x34
 800ae84:	e7c0      	b.n	800ae08 <__sflush_r+0x1c>
 800ae86:	2301      	movs	r3, #1
 800ae88:	4628      	mov	r0, r5
 800ae8a:	47b0      	blx	r6
 800ae8c:	1c41      	adds	r1, r0, #1
 800ae8e:	d1c8      	bne.n	800ae22 <__sflush_r+0x36>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d0c5      	beq.n	800ae22 <__sflush_r+0x36>
 800ae96:	2b1d      	cmp	r3, #29
 800ae98:	d001      	beq.n	800ae9e <__sflush_r+0xb2>
 800ae9a:	2b16      	cmp	r3, #22
 800ae9c:	d101      	bne.n	800aea2 <__sflush_r+0xb6>
 800ae9e:	602f      	str	r7, [r5, #0]
 800aea0:	e7b1      	b.n	800ae06 <__sflush_r+0x1a>
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aea8:	81a3      	strh	r3, [r4, #12]
 800aeaa:	e7ad      	b.n	800ae08 <__sflush_r+0x1c>
 800aeac:	690f      	ldr	r7, [r1, #16]
 800aeae:	2f00      	cmp	r7, #0
 800aeb0:	d0a9      	beq.n	800ae06 <__sflush_r+0x1a>
 800aeb2:	0793      	lsls	r3, r2, #30
 800aeb4:	680e      	ldr	r6, [r1, #0]
 800aeb6:	bf08      	it	eq
 800aeb8:	694b      	ldreq	r3, [r1, #20]
 800aeba:	600f      	str	r7, [r1, #0]
 800aebc:	bf18      	it	ne
 800aebe:	2300      	movne	r3, #0
 800aec0:	eba6 0807 	sub.w	r8, r6, r7
 800aec4:	608b      	str	r3, [r1, #8]
 800aec6:	f1b8 0f00 	cmp.w	r8, #0
 800aeca:	dd9c      	ble.n	800ae06 <__sflush_r+0x1a>
 800aecc:	6a21      	ldr	r1, [r4, #32]
 800aece:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aed0:	4643      	mov	r3, r8
 800aed2:	463a      	mov	r2, r7
 800aed4:	4628      	mov	r0, r5
 800aed6:	47b0      	blx	r6
 800aed8:	2800      	cmp	r0, #0
 800aeda:	dc06      	bgt.n	800aeea <__sflush_r+0xfe>
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aee2:	81a3      	strh	r3, [r4, #12]
 800aee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aee8:	e78e      	b.n	800ae08 <__sflush_r+0x1c>
 800aeea:	4407      	add	r7, r0
 800aeec:	eba8 0800 	sub.w	r8, r8, r0
 800aef0:	e7e9      	b.n	800aec6 <__sflush_r+0xda>
 800aef2:	bf00      	nop
 800aef4:	dfbffffe 	.word	0xdfbffffe

0800aef8 <_fflush_r>:
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	690b      	ldr	r3, [r1, #16]
 800aefc:	4605      	mov	r5, r0
 800aefe:	460c      	mov	r4, r1
 800af00:	b913      	cbnz	r3, 800af08 <_fflush_r+0x10>
 800af02:	2500      	movs	r5, #0
 800af04:	4628      	mov	r0, r5
 800af06:	bd38      	pop	{r3, r4, r5, pc}
 800af08:	b118      	cbz	r0, 800af12 <_fflush_r+0x1a>
 800af0a:	6a03      	ldr	r3, [r0, #32]
 800af0c:	b90b      	cbnz	r3, 800af12 <_fflush_r+0x1a>
 800af0e:	f7ff f9f3 	bl	800a2f8 <__sinit>
 800af12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d0f3      	beq.n	800af02 <_fflush_r+0xa>
 800af1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af1c:	07d0      	lsls	r0, r2, #31
 800af1e:	d404      	bmi.n	800af2a <_fflush_r+0x32>
 800af20:	0599      	lsls	r1, r3, #22
 800af22:	d402      	bmi.n	800af2a <_fflush_r+0x32>
 800af24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af26:	f7ff fc30 	bl	800a78a <__retarget_lock_acquire_recursive>
 800af2a:	4628      	mov	r0, r5
 800af2c:	4621      	mov	r1, r4
 800af2e:	f7ff ff5d 	bl	800adec <__sflush_r>
 800af32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af34:	07da      	lsls	r2, r3, #31
 800af36:	4605      	mov	r5, r0
 800af38:	d4e4      	bmi.n	800af04 <_fflush_r+0xc>
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	059b      	lsls	r3, r3, #22
 800af3e:	d4e1      	bmi.n	800af04 <_fflush_r+0xc>
 800af40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af42:	f7ff fc23 	bl	800a78c <__retarget_lock_release_recursive>
 800af46:	e7dd      	b.n	800af04 <_fflush_r+0xc>

0800af48 <__swhatbuf_r>:
 800af48:	b570      	push	{r4, r5, r6, lr}
 800af4a:	460c      	mov	r4, r1
 800af4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af50:	2900      	cmp	r1, #0
 800af52:	b096      	sub	sp, #88	; 0x58
 800af54:	4615      	mov	r5, r2
 800af56:	461e      	mov	r6, r3
 800af58:	da0d      	bge.n	800af76 <__swhatbuf_r+0x2e>
 800af5a:	89a3      	ldrh	r3, [r4, #12]
 800af5c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800af60:	f04f 0100 	mov.w	r1, #0
 800af64:	bf0c      	ite	eq
 800af66:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800af6a:	2340      	movne	r3, #64	; 0x40
 800af6c:	2000      	movs	r0, #0
 800af6e:	6031      	str	r1, [r6, #0]
 800af70:	602b      	str	r3, [r5, #0]
 800af72:	b016      	add	sp, #88	; 0x58
 800af74:	bd70      	pop	{r4, r5, r6, pc}
 800af76:	466a      	mov	r2, sp
 800af78:	f000 f848 	bl	800b00c <_fstat_r>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	dbec      	blt.n	800af5a <__swhatbuf_r+0x12>
 800af80:	9901      	ldr	r1, [sp, #4]
 800af82:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800af86:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800af8a:	4259      	negs	r1, r3
 800af8c:	4159      	adcs	r1, r3
 800af8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af92:	e7eb      	b.n	800af6c <__swhatbuf_r+0x24>

0800af94 <__smakebuf_r>:
 800af94:	898b      	ldrh	r3, [r1, #12]
 800af96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af98:	079d      	lsls	r5, r3, #30
 800af9a:	4606      	mov	r6, r0
 800af9c:	460c      	mov	r4, r1
 800af9e:	d507      	bpl.n	800afb0 <__smakebuf_r+0x1c>
 800afa0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afa4:	6023      	str	r3, [r4, #0]
 800afa6:	6123      	str	r3, [r4, #16]
 800afa8:	2301      	movs	r3, #1
 800afaa:	6163      	str	r3, [r4, #20]
 800afac:	b002      	add	sp, #8
 800afae:	bd70      	pop	{r4, r5, r6, pc}
 800afb0:	ab01      	add	r3, sp, #4
 800afb2:	466a      	mov	r2, sp
 800afb4:	f7ff ffc8 	bl	800af48 <__swhatbuf_r>
 800afb8:	9900      	ldr	r1, [sp, #0]
 800afba:	4605      	mov	r5, r0
 800afbc:	4630      	mov	r0, r6
 800afbe:	f7ff f883 	bl	800a0c8 <_malloc_r>
 800afc2:	b948      	cbnz	r0, 800afd8 <__smakebuf_r+0x44>
 800afc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afc8:	059a      	lsls	r2, r3, #22
 800afca:	d4ef      	bmi.n	800afac <__smakebuf_r+0x18>
 800afcc:	f023 0303 	bic.w	r3, r3, #3
 800afd0:	f043 0302 	orr.w	r3, r3, #2
 800afd4:	81a3      	strh	r3, [r4, #12]
 800afd6:	e7e3      	b.n	800afa0 <__smakebuf_r+0xc>
 800afd8:	89a3      	ldrh	r3, [r4, #12]
 800afda:	6020      	str	r0, [r4, #0]
 800afdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afe0:	81a3      	strh	r3, [r4, #12]
 800afe2:	9b00      	ldr	r3, [sp, #0]
 800afe4:	6163      	str	r3, [r4, #20]
 800afe6:	9b01      	ldr	r3, [sp, #4]
 800afe8:	6120      	str	r0, [r4, #16]
 800afea:	b15b      	cbz	r3, 800b004 <__smakebuf_r+0x70>
 800afec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aff0:	4630      	mov	r0, r6
 800aff2:	f000 f81d 	bl	800b030 <_isatty_r>
 800aff6:	b128      	cbz	r0, 800b004 <__smakebuf_r+0x70>
 800aff8:	89a3      	ldrh	r3, [r4, #12]
 800affa:	f023 0303 	bic.w	r3, r3, #3
 800affe:	f043 0301 	orr.w	r3, r3, #1
 800b002:	81a3      	strh	r3, [r4, #12]
 800b004:	89a3      	ldrh	r3, [r4, #12]
 800b006:	431d      	orrs	r5, r3
 800b008:	81a5      	strh	r5, [r4, #12]
 800b00a:	e7cf      	b.n	800afac <__smakebuf_r+0x18>

0800b00c <_fstat_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d07      	ldr	r5, [pc, #28]	; (800b02c <_fstat_r+0x20>)
 800b010:	2300      	movs	r3, #0
 800b012:	4604      	mov	r4, r0
 800b014:	4608      	mov	r0, r1
 800b016:	4611      	mov	r1, r2
 800b018:	602b      	str	r3, [r5, #0]
 800b01a:	f7fb f9d2 	bl	80063c2 <_fstat>
 800b01e:	1c43      	adds	r3, r0, #1
 800b020:	d102      	bne.n	800b028 <_fstat_r+0x1c>
 800b022:	682b      	ldr	r3, [r5, #0]
 800b024:	b103      	cbz	r3, 800b028 <_fstat_r+0x1c>
 800b026:	6023      	str	r3, [r4, #0]
 800b028:	bd38      	pop	{r3, r4, r5, pc}
 800b02a:	bf00      	nop
 800b02c:	2000085c 	.word	0x2000085c

0800b030 <_isatty_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4d06      	ldr	r5, [pc, #24]	; (800b04c <_isatty_r+0x1c>)
 800b034:	2300      	movs	r3, #0
 800b036:	4604      	mov	r4, r0
 800b038:	4608      	mov	r0, r1
 800b03a:	602b      	str	r3, [r5, #0]
 800b03c:	f7fb f9d1 	bl	80063e2 <_isatty>
 800b040:	1c43      	adds	r3, r0, #1
 800b042:	d102      	bne.n	800b04a <_isatty_r+0x1a>
 800b044:	682b      	ldr	r3, [r5, #0]
 800b046:	b103      	cbz	r3, 800b04a <_isatty_r+0x1a>
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
 800b04c:	2000085c 	.word	0x2000085c

0800b050 <_init>:
 800b050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b052:	bf00      	nop
 800b054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b056:	bc08      	pop	{r3}
 800b058:	469e      	mov	lr, r3
 800b05a:	4770      	bx	lr

0800b05c <_fini>:
 800b05c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b05e:	bf00      	nop
 800b060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b062:	bc08      	pop	{r3}
 800b064:	469e      	mov	lr, r3
 800b066:	4770      	bx	lr

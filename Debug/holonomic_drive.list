
holonomic_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004554  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800475c  0800475c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800475c  0800475c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800475c  0800475c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800475c  0800475c  0001475c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004760  08004760  00014760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  2000005c  080047c0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a0  080047c0  000202a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bb1b  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fbd  00000000  00000000  0002bbea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cc8  00000000  00000000  0002dba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d3  00000000  00000000  0002e870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e80b  00000000  00000000  0002f243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cb52  00000000  00000000  0004da4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc58c  00000000  00000000  0005a5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003ad8  00000000  00000000  00116b2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011a604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004714 	.word	0x08004714

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08004714 	.word	0x08004714

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <_Z3subPfS_S_>:

Vel sub(Vel vel1, Vel vel2) {
	return {vel1.x - vel2.x, vel1.y - vel2.y, vel1.theta - vel2.theta};
}

void sub(float* arr1, float* arr2, float* ret) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
	for(int i=0; i<3; i++) {
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e016      	b.n	8000c34 <_Z3subPfS_S_+0x40>
		ret[i] = arr1[i] - arr2[i];
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	ed93 7a00 	vldr	s14, [r3]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	4413      	add	r3, r2
 8000c1a:	edd3 7a00 	vldr	s15, [r3]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c2a:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	dde5      	ble.n	8000c06 <_Z3subPfS_S_+0x12>
	}
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_Z3absPfS_>:

void abs(float* arr, float* ret) {
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	e026      	b.n	8000ca6 <_Z3absPfS_+0x5e>
		if(arr[i]>=0) {
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	edd3 7a00 	vldr	s15, [r3]
 8000c64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6c:	db0a      	blt.n	8000c84 <_Z3absPfS_+0x3c>
			ret[i] = arr[i];
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	441a      	add	r2, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	6839      	ldr	r1, [r7, #0]
 8000c7c:	440b      	add	r3, r1
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	e00d      	b.n	8000ca0 <_Z3absPfS_+0x58>
		}
		else {
			ret[i] = -arr[i];
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	edd3 7a00 	vldr	s15, [r3]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	eef1 7a67 	vneg.f32	s15, s15
 8000c9c:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	ddd5      	ble.n	8000c58 <_Z3absPfS_+0x10>
		}
	}
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <_Z13get_index_maxPf>:

int get_index_max(float* arr) {
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
	if(arr[0] > arr[1] && arr[0] > arr[2]) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	ed93 7a00 	vldr	s14, [r3]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3304      	adds	r3, #4
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd8:	dd0d      	ble.n	8000cf6 <_Z13get_index_maxPf+0x3c>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	ed93 7a00 	vldr	s14, [r3]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3308      	adds	r3, #8
 8000ce4:	edd3 7a00 	vldr	s15, [r3]
 8000ce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf0:	dd01      	ble.n	8000cf6 <_Z13get_index_maxPf+0x3c>
		return 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e01b      	b.n	8000d2e <_Z13get_index_maxPf+0x74>
	}
	else if(arr[1] > arr[0] && arr[1] > arr[2]) {
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	ed93 7a00 	vldr	s14, [r3]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	edd3 7a00 	vldr	s15, [r3]
 8000d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0c:	dd0e      	ble.n	8000d2c <_Z13get_index_maxPf+0x72>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3304      	adds	r3, #4
 8000d12:	ed93 7a00 	vldr	s14, [r3]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3308      	adds	r3, #8
 8000d1a:	edd3 7a00 	vldr	s15, [r3]
 8000d1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d26:	dd01      	ble.n	8000d2c <_Z13get_index_maxPf+0x72>
		return 1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e000      	b.n	8000d2e <_Z13get_index_maxPf+0x74>
	}
	else {
		return 2;
 8000d2c:	2302      	movs	r3, #2
	}
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_ZN3VelC1Ev>:
#define HOLONOMICDRIVE3_H_


#include "Stepper.h"

struct Vel {
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f04f 0200 	mov.w	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_ZN7StepperaSERKS_>:
#ifndef SRC_STEPPER_H_
#define SRC_STEPPER_H_

#include "stm32g4xx_hal.h"

class Stepper {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	1d10      	adds	r0, r2, #4
 8000d78:	3304      	adds	r3, #4
 8000d7a:	224c      	movs	r2, #76	; 0x4c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f003 fc6f 	bl	8004660 <memcpy>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	651a      	str	r2, [r3, #80]	; 0x50
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	659a      	str	r2, [r3, #88]	; 0x58
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	65da      	str	r2, [r3, #92]	; 0x5c
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>:

HolonomicDrive3::HolonomicDrive3(Stepper stepper0, Stepper stepper1, Stepper stepper2, float wheel_radius, float wheel_distance) {
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6178      	str	r0, [r7, #20]
 8000db8:	6139      	str	r1, [r7, #16]
 8000dba:	60fa      	str	r2, [r7, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dc2:	edc7 0a00 	vstr	s1, [r7]
 8000dc6:	4a2e      	ldr	r2, [pc, #184]	; (8000e80 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xd0>)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	3304      	adds	r3, #4
 8000dd0:	2402      	movs	r4, #2
 8000dd2:	461d      	mov	r5, r3
 8000dd4:	e004      	b.n	8000de0 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x30>
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	f000 faee 	bl	80013b8 <_ZN7StepperC1Ev>
 8000ddc:	3560      	adds	r5, #96	; 0x60
 8000dde:	3c01      	subs	r4, #1
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	daf8      	bge.n	8000dd6 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x26>
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ffa5 	bl	8000d3a <_ZN3VelC1Ev>
	this->steppers[0] = stepper0;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3304      	adds	r3, #4
 8000df4:	6939      	ldr	r1, [r7, #16]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffb6 	bl	8000d68 <_ZN7StepperaSERKS_>
	this->steppers[1] = stepper1;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3364      	adds	r3, #100	; 0x64
 8000e00:	68f9      	ldr	r1, [r7, #12]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ffb0 	bl	8000d68 <_ZN7StepperaSERKS_>
	this->steppers[2] = stepper2;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	33c4      	adds	r3, #196	; 0xc4
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ffaa 	bl	8000d68 <_ZN7StepperaSERKS_>
	this->wheel_circumference = wheel_radius * 2.0 * PI;
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff fb63 	bl	80004e0 <__aeabi_f2d>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	f7ff fa01 	bl	8000224 <__adddf3>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	a313      	add	r3, pc, #76	; (adr r3, 8000e78 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xc8>)
 8000e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e30:	f7ff fbae 	bl	8000590 <__aeabi_dmul>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f7ff fe8a 	bl	8000b54 <__aeabi_d2f>
 8000e40:	4602      	mov	r2, r0
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	this->wheel_distance = wheel_distance;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	this->current_wheels_speeds_rps[0] = 0;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	this->current_wheels_speeds_rps[1] = 0;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	this->current_wheels_speeds_rps[2] = 0;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

}
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bdb0      	pop	{r4, r5, r7, pc}
 8000e78:	54442eea 	.word	0x54442eea
 8000e7c:	400921fb 	.word	0x400921fb
 8000e80:	08004734 	.word	0x08004734

08000e84 <_ZN15HolonomicDrive311set_cmd_velE3Vel>:

void HolonomicDrive3::set_cmd_vel(Vel cmd) {
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	eef0 6a40 	vmov.f32	s13, s0
 8000e90:	eeb0 7a60 	vmov.f32	s14, s1
 8000e94:	eef0 7a41 	vmov.f32	s15, s2
 8000e98:	edc7 6a00 	vstr	s13, [r7]
 8000e9c:	ed87 7a01 	vstr	s14, [r7, #4]
 8000ea0:	edc7 7a02 	vstr	s15, [r7, #8]
	this->cmd_vel = cmd;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000eaa:	463a      	mov	r2, r7
 8000eac:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>:

void HolonomicDrive3::compute_wheels_speeds(Vel cmd, float *ret_speeds_rps) {
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6178      	str	r0, [r7, #20]
 8000ec8:	eef0 6a40 	vmov.f32	s13, s0
 8000ecc:	eeb0 7a60 	vmov.f32	s14, s1
 8000ed0:	eef0 7a41 	vmov.f32	s15, s2
 8000ed4:	6079      	str	r1, [r7, #4]
 8000ed6:	edc7 6a02 	vstr	s13, [r7, #8]
 8000eda:	ed87 7a03 	vstr	s14, [r7, #12]
 8000ede:	edc7 7a04 	vstr	s15, [r7, #16]
    float wheel0_mps = 0.5 * this->cmd_vel.x - SQRT_3_OVER_2 * this->cmd_vel.y - this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff faf9 	bl	80004e0 <__aeabi_f2d>
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	4b79      	ldr	r3, [pc, #484]	; (80010d8 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x218>)
 8000ef4:	f7ff fb4c 	bl	8000590 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4614      	mov	r4, r2
 8000efe:	461d      	mov	r5, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff faea 	bl	80004e0 <__aeabi_f2d>
 8000f0c:	a36e      	add	r3, pc, #440	; (adr r3, 80010c8 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x208>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	f7ff fb3d 	bl	8000590 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	4629      	mov	r1, r5
 8000f1e:	f7ff f97f 	bl	8000220 <__aeabi_dsub>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4614      	mov	r4, r2
 8000f28:	461d      	mov	r5, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8000f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3a:	ee17 0a90 	vmov	r0, s15
 8000f3e:	f7ff facf 	bl	80004e0 <__aeabi_f2d>
 8000f42:	a363      	add	r3, pc, #396	; (adr r3, 80010d0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x210>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb22 	bl	8000590 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b60      	ldr	r3, [pc, #384]	; (80010dc <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x21c>)
 8000f5a:	f7ff fc43 	bl	80007e4 <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4620      	mov	r0, r4
 8000f64:	4629      	mov	r1, r5
 8000f66:	f7ff f95b 	bl	8000220 <__aeabi_dsub>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f7ff fdef 	bl	8000b54 <__aeabi_d2f>
 8000f76:	4603      	mov	r3, r0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    float wheel1_mps = 0.5 * this->cmd_vel.x + SQRT_3_OVER_2 * this->cmd_vel.y - this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff faad 	bl	80004e0 <__aeabi_f2d>
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x218>)
 8000f8c:	f7ff fb00 	bl	8000590 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4614      	mov	r4, r2
 8000f96:	461d      	mov	r5, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fa9e 	bl	80004e0 <__aeabi_f2d>
 8000fa4:	a348      	add	r3, pc, #288	; (adr r3, 80010c8 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x208>)
 8000fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000faa:	f7ff faf1 	bl	8000590 <__aeabi_dmul>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	4629      	mov	r1, r5
 8000fb6:	f7ff f935 	bl	8000224 <__adddf3>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4614      	mov	r4, r2
 8000fc0:	461d      	mov	r5, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8000fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd2:	ee17 0a90 	vmov	r0, s15
 8000fd6:	f7ff fa83 	bl	80004e0 <__aeabi_f2d>
 8000fda:	a33d      	add	r3, pc, #244	; (adr r3, 80010d0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x210>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff fad6 	bl	8000590 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x21c>)
 8000ff2:	f7ff fbf7 	bl	80007e4 <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	f7ff f90f 	bl	8000220 <__aeabi_dsub>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fda3 	bl	8000b54 <__aeabi_d2f>
 800100e:	4603      	mov	r3, r0
 8001010:	623b      	str	r3, [r7, #32]
    float wheel2_mps = - this->cmd_vel.x + this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 8001018:	eef1 7a67 	vneg.f32	s15, s15
 800101c:	ee17 3a90 	vmov	r3, s15
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa5d 	bl	80004e0 <__aeabi_f2d>
 8001026:	4604      	mov	r4, r0
 8001028:	460d      	mov	r5, r1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8001036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103a:	ee17 0a90 	vmov	r0, s15
 800103e:	f7ff fa4f 	bl	80004e0 <__aeabi_f2d>
 8001042:	a323      	add	r3, pc, #140	; (adr r3, 80010d0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x210>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff faa2 	bl	8000590 <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b20      	ldr	r3, [pc, #128]	; (80010dc <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x21c>)
 800105a:	f7ff fbc3 	bl	80007e4 <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4620      	mov	r0, r4
 8001064:	4629      	mov	r1, r5
 8001066:	f7ff f8dd 	bl	8000224 <__adddf3>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	f7ff fd6f 	bl	8000b54 <__aeabi_d2f>
 8001076:	4603      	mov	r3, r0
 8001078:	61fb      	str	r3, [r7, #28]
    // wheel mps -> wheel rps
    ret_speeds_rps[0] = wheel0_mps / this->wheel_circumference;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8001080:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[1] = wheel1_mps / this->wheel_circumference;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3304      	adds	r3, #4
 8001098:	edd7 6a08 	vldr	s13, [r7, #32]
 800109c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a0:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[2] = wheel2_mps / this->wheel_circumference;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3308      	adds	r3, #8
 80010ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80010b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b6:	edc3 7a00 	vstr	s15, [r3]
}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bdb0      	pop	{r4, r5, r7, pc}
 80010c2:	bf00      	nop
 80010c4:	f3af 8000 	nop.w
 80010c8:	e857b07f 	.word	0xe857b07f
 80010cc:	3febb67a 	.word	0x3febb67a
 80010d0:	54442eea 	.word	0x54442eea
 80010d4:	400921fb 	.word	0x400921fb
 80010d8:	3fe00000 	.word	0x3fe00000
 80010dc:	40668000 	.word	0x40668000

080010e0 <_ZN15HolonomicDrive319write_wheels_speedsEPf>:

void HolonomicDrive3::write_wheels_speeds(float *speeds_rps) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e020      	b.n	8001132 <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x52>
		this->steppers[i].set_speed_rps(speeds_rps[i]);
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	015b      	lsls	r3, r3, #5
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	1d19      	adds	r1, r3, #4
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	4608      	mov	r0, r1
 8001112:	f000 f9d7 	bl	80014c4 <_ZN7Stepper13set_speed_rpsEf>
		this->current_wheels_speeds_rps[i] = speeds_rps[i];
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	4413      	add	r3, r2
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	334e      	adds	r3, #78	; 0x4e
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b02      	cmp	r3, #2
 8001136:	dddb      	ble.n	80010f0 <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x10>
	}
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	0000      	movs	r0, r0
 8001144:	0000      	movs	r0, r0
	...

08001148 <_ZN15HolonomicDrive324spin_once_motors_controlEv>:

void HolonomicDrive3::spin_once_motors_control() {
 8001148:	b580      	push	{r7, lr}
 800114a:	b092      	sub	sp, #72	; 0x48
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

	// compare current_vel and cmd_vel wheels speeds to check the required acceleration to transition directly from current to command
	float cmd_wheels_speeds_rps[3];
	this->compute_wheels_speeds(cmd_vel, cmd_wheels_speeds_rps);
 8001150:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edd3 6a4b 	vldr	s13, [r3, #300]	; 0x12c
 800115a:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 800115e:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8001162:	4611      	mov	r1, r2
 8001164:	eeb0 0a66 	vmov.f32	s0, s13
 8001168:	eef0 0a47 	vmov.f32	s1, s14
 800116c:	eeb0 1a67 	vmov.f32	s2, s15
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fea5 	bl	8000ec0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>

	float cmd_sub_current_speeds[3];
	sub(cmd_wheels_speeds_rps, this->current_wheels_speeds_rps, cmd_sub_current_speeds);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800117c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001180:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fd35 	bl	8000bf4 <_Z3subPfS_S_>

	float speeds_diff[3];
	abs(cmd_sub_current_speeds, speeds_diff);
 800118a:	f107 0218 	add.w	r2, r7, #24
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fd57 	bl	8000c48 <_Z3absPfS_>
	if(speeds_diff[0] < MAX_ACCEL_WHEEL && speeds_diff[1] < MAX_ACCEL_WHEEL && speeds_diff[2] < MAX_ACCEL_WHEEL) {
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f99f 	bl	80004e0 <__aeabi_f2d>
 80011a2:	a33b      	add	r3, pc, #236	; (adr r3, 8001290 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fc64 	bl	8000a74 <__aeabi_dcmplt>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d01e      	beq.n	80011f0 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xa8>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f993 	bl	80004e0 <__aeabi_f2d>
 80011ba:	a335      	add	r3, pc, #212	; (adr r3, 8001290 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fc58 	bl	8000a74 <__aeabi_dcmplt>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d012      	beq.n	80011f0 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xa8>
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f987 	bl	80004e0 <__aeabi_f2d>
 80011d2:	a32f      	add	r3, pc, #188	; (adr r3, 8001290 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff fc4c 	bl	8000a74 <__aeabi_dcmplt>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xa8>
		// acceleration requested is ok, no need to accelerate gradually.
		this->write_wheels_speeds(cmd_wheels_speeds_rps);
 80011e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e6:	4619      	mov	r1, r3
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff79 	bl	80010e0 <_ZN15HolonomicDrive319write_wheels_speedsEPf>
 80011ee:	e048      	b.n	8001282 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x13a>
	}
	else {
		// find max accel needed
		int i_max = get_index_max(speeds_diff);
 80011f0:	f107 0318 	add.w	r3, r7, #24
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fd60 	bl	8000cba <_Z13get_index_maxPf>
 80011fa:	6438      	str	r0, [r7, #64]	; 0x40

		float speed_ratio = MAX_ACCEL_WHEEL / speeds_diff[i_max]; // speed ratio of each original speed to add
 80011fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	3348      	adds	r3, #72	; 0x48
 8001202:	443b      	add	r3, r7
 8001204:	3b30      	subs	r3, #48	; 0x30
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f969 	bl	80004e0 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	a11f      	add	r1, pc, #124	; (adr r1, 8001290 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 8001214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001218:	f7ff fae4 	bl	80007e4 <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fc96 	bl	8000b54 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c

		float new_speeds_cmds[3];
		for(int i=0; i<3; i++) {
 800122c:	2300      	movs	r3, #0
 800122e:	647b      	str	r3, [r7, #68]	; 0x44
 8001230:	e01d      	b.n	800126e <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x126>
			new_speeds_cmds[i] = current_wheels_speeds_rps[i] + speed_ratio * cmd_sub_current_speeds[i];;
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001236:	334e      	adds	r3, #78	; 0x4e
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	ed93 7a00 	vldr	s14, [r3]
 8001240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	3348      	adds	r3, #72	; 0x48
 8001246:	443b      	add	r3, r7
 8001248:	3b24      	subs	r3, #36	; 0x24
 800124a:	edd3 6a00 	vldr	s13, [r3]
 800124e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	3348      	adds	r3, #72	; 0x48
 8001260:	443b      	add	r3, r7
 8001262:	3b3c      	subs	r3, #60	; 0x3c
 8001264:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i<3; i++) {
 8001268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800126a:	3301      	adds	r3, #1
 800126c:	647b      	str	r3, [r7, #68]	; 0x44
 800126e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001270:	2b02      	cmp	r3, #2
 8001272:	ddde      	ble.n	8001232 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xea>
		}

		// set speed
		this->write_wheels_speeds(new_speeds_cmds);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4619      	mov	r1, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff30 	bl	80010e0 <_ZN15HolonomicDrive319write_wheels_speedsEPf>
		// todo documenter les equations


	}

}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3748      	adds	r7, #72	; 0x48
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	9999999a 	.word	0x9999999a
 8001294:	3fb99999 	.word	0x3fb99999

08001298 <_ZN15HolonomicDrive3D1Ev>:


HolonomicDrive3::~HolonomicDrive3() {
 8001298:	b590      	push	{r4, r7, lr}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <_ZN15HolonomicDrive3D1Ev+0x40>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3304      	adds	r3, #4
	// TODO Auto-generated destructor stub
}
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00d      	beq.n	80012ca <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	3304      	adds	r3, #4
 80012b2:	f503 7490 	add.w	r4, r3, #288	; 0x120
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	3304      	adds	r3, #4
}
 80012ba:	429c      	cmp	r4, r3
 80012bc:	d005      	beq.n	80012ca <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 80012be:	3c60      	subs	r4, #96	; 0x60
 80012c0:	6823      	ldr	r3, [r4, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4620      	mov	r0, r4
 80012c6:	4798      	blx	r3
}
 80012c8:	e7f5      	b.n	80012b6 <_ZN15HolonomicDrive3D1Ev+0x1e>
HolonomicDrive3::~HolonomicDrive3() {
 80012ca:	bf00      	nop
}
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	370c      	adds	r7, #12
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd90      	pop	{r4, r7, pc}
 80012d6:	bf00      	nop
 80012d8:	08004734 	.word	0x08004734

080012dc <_ZN15HolonomicDrive3D0Ev>:
HolonomicDrive3::~HolonomicDrive3() {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
}
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ffd7 	bl	8001298 <_ZN15HolonomicDrive3D1Ev>
 80012ea:	f44f 71a2 	mov.w	r1, #324	; 0x144
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f003 f970 	bl	80045d4 <_ZdlPvj>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4618      	mov	r0, r3
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
	...

08001300 <_Z21PWM_set_high_durationP11TIM_TypeDefi>:

#define SYS_CORE_CLOCK_HZ 16000000.
#define SYS_CORE_CLOCK_MHZ 16.


void PWM_set_high_duration(TIM_TypeDef *timx, int us) {
 8001300:	b5b0      	push	{r4, r5, r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
	timx->CCR1 = SYS_CORE_CLOCK_MHZ/timx->PSC * us;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f8c4 	bl	800049c <__aeabi_ui2d>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	f04f 0000 	mov.w	r0, #0
 800131c:	490e      	ldr	r1, [pc, #56]	; (8001358 <_Z21PWM_set_high_durationP11TIM_TypeDefi+0x58>)
 800131e:	f7ff fa61 	bl	80007e4 <__aeabi_ddiv>
 8001322:	4602      	mov	r2, r0
 8001324:	460b      	mov	r3, r1
 8001326:	4614      	mov	r4, r2
 8001328:	461d      	mov	r5, r3
 800132a:	6838      	ldr	r0, [r7, #0]
 800132c:	f7ff f8c6 	bl	80004bc <__aeabi_i2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4620      	mov	r0, r4
 8001336:	4629      	mov	r1, r5
 8001338:	f7ff f92a 	bl	8000590 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fbe6 	bl	8000b14 <__aeabi_d2uiz>
 8001348:	4602      	mov	r2, r0
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bdb0      	pop	{r4, r5, r7, pc}
 8001356:	bf00      	nop
 8001358:	40300000 	.word	0x40300000
 800135c:	00000000 	.word	0x00000000

08001360 <_Z12PWM_set_freqP11TIM_TypeDefi>:

void PWM_set_freq(TIM_TypeDef *timx, int hz) {
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
	int arr = SYS_CORE_CLOCK_HZ/(timx->PSC*hz);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136e:	683a      	ldr	r2, [r7, #0]
 8001370:	fb02 f303 	mul.w	r3, r2, r3
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f891 	bl	800049c <__aeabi_ui2d>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	a10c      	add	r1, pc, #48	; (adr r1, 80013b0 <_Z12PWM_set_freqP11TIM_TypeDefi+0x50>)
 8001380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001384:	f7ff fa2e 	bl	80007e4 <__aeabi_ddiv>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fb98 	bl	8000ac4 <__aeabi_d2iz>
 8001394:	4603      	mov	r3, r0
 8001396:	60fb      	str	r3, [r7, #12]
	timx->CNT = 0;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2200      	movs	r2, #0
 800139c:	625a      	str	r2, [r3, #36]	; 0x24
	timx->ARR = arr;
 800139e:	68fa      	ldr	r2, [r7, #12]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80013a4:	bf00      	nop
 80013a6:	3710      	adds	r7, #16
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	f3af 8000 	nop.w
 80013b0:	00000000 	.word	0x00000000
 80013b4:	416e8480 	.word	0x416e8480

080013b8 <_ZN7StepperC1Ev>:

Stepper::Stepper() {}
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	4a04      	ldr	r2, [pc, #16]	; (80013d4 <_ZN7StepperC1Ev+0x1c>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4618      	mov	r0, r3
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	08004744 	.word	0x08004744

080013d8 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>:

Stepper::Stepper(TIM_HandleTypeDef tim_handle_step, GPIO_TypeDef *GPIOx_dir, uint16_t GPIO_Pin_dir) {
 80013d8:	b084      	sub	sp, #16
 80013da:	b580      	push	{r7, lr}
 80013dc:	b082      	sub	sp, #8
 80013de:	af00      	add	r7, sp, #0
 80013e0:	6078      	str	r0, [r7, #4]
 80013e2:	f107 0014 	add.w	r0, r7, #20
 80013e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80013ea:	4a18      	ldr	r2, [pc, #96]	; (800144c <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft+0x74>)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->tim_handle = tim_handle_step;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3304      	adds	r3, #4
 80013f4:	f107 0114 	add.w	r1, r7, #20
 80013f8:	224c      	movs	r2, #76	; 0x4c
 80013fa:	4618      	mov	r0, r3
 80013fc:	f003 f930 	bl	8004660 <memcpy>
	this->GPIOx_dir = GPIOx_dir;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001404:	651a      	str	r2, [r3, #80]	; 0x50
	this->GPIO_Pin_dir = GPIO_Pin_dir;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800140c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	PWM_set_high_duration(this->tim_handle.Instance, 10);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	210a      	movs	r1, #10
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff72 	bl	8001300 <_Z21PWM_set_high_durationP11TIM_TypeDefi>
	HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001426:	2201      	movs	r2, #1
 8001428:	4619      	mov	r1, r3
 800142a:	f001 f953 	bl	80026d4 <HAL_GPIO_WritePin>

	this->current_dir = 0;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	65da      	str	r2, [r3, #92]	; 0x5c
	this->current_freq = 0;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2200      	movs	r2, #0
 8001438:	659a      	str	r2, [r3, #88]	; 0x58
}
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4618      	mov	r0, r3
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001446:	b004      	add	sp, #16
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	08004744 	.word	0x08004744

08001450 <_ZN7Stepper19set_speed_step_freqEii>:

void Stepper::set_speed_step_freq(int hz, int dir) {
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
	if(hz < 15){// todo calculer freq min automatiquement
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	2b0e      	cmp	r3, #14
 8001460:	dc06      	bgt.n	8001470 <_ZN7Stepper19set_speed_step_freqEii+0x20>
		HAL_TIM_PWM_Stop(&this->tim_handle, TIM_CHANNEL_1);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	3304      	adds	r3, #4
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f002 f8ad 	bl	80035c8 <HAL_TIM_PWM_Stop>
		return;
 800146e:	e025      	b.n	80014bc <_ZN7Stepper19set_speed_step_freqEii+0x6c>
	}
	if(!this->current_freq) {
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <_ZN7Stepper19set_speed_step_freqEii+0x34>
		// stepper stopped, start pwm
		HAL_TIM_PWM_Start(&this->tim_handle, TIM_CHANNEL_1);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3304      	adds	r3, #4
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f001 ffa2 	bl	80033c8 <HAL_TIM_PWM_Start>
	}
	PWM_set_freq(this->tim_handle.Instance, hz);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	68b9      	ldr	r1, [r7, #8]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff ff68 	bl	8001360 <_Z12PWM_set_freqP11TIM_TypeDefi>

	if(dir==1) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d109      	bne.n	80014aa <_ZN7Stepper19set_speed_step_freqEii+0x5a>
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80014a0:	2201      	movs	r2, #1
 80014a2:	4619      	mov	r1, r3
 80014a4:	f001 f916 	bl	80026d4 <HAL_GPIO_WritePin>
 80014a8:	e008      	b.n	80014bc <_ZN7Stepper19set_speed_step_freqEii+0x6c>
	}else {
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_RESET);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80014b4:	2200      	movs	r2, #0
 80014b6:	4619      	mov	r1, r3
 80014b8:	f001 f90c 	bl	80026d4 <HAL_GPIO_WritePin>
	}
}
 80014bc:	3710      	adds	r7, #16
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <_ZN7Stepper13set_speed_rpsEf>:

void Stepper::set_speed_rps(float rps) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
 80014cc:	ed87 0a00 	vstr	s0, [r7]
	// 3200 steps per revolution
	int hz = rps * 3200.0;
 80014d0:	6838      	ldr	r0, [r7, #0]
 80014d2:	f7ff f805 	bl	80004e0 <__aeabi_f2d>
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	4b0f      	ldr	r3, [pc, #60]	; (8001518 <_ZN7Stepper13set_speed_rpsEf+0x54>)
 80014dc:	f7ff f858 	bl	8000590 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff faec 	bl	8000ac4 <__aeabi_d2iz>
 80014ec:	4603      	mov	r3, r0
 80014ee:	60fb      	str	r3, [r7, #12]
	if(hz>=0) {
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	db05      	blt.n	8001502 <_ZN7Stepper13set_speed_rpsEf+0x3e>
		this->set_speed_step_freq(hz, 1);
 80014f6:	2201      	movs	r2, #1
 80014f8:	68f9      	ldr	r1, [r7, #12]
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff ffa8 	bl	8001450 <_ZN7Stepper19set_speed_step_freqEii>
	}
	else {
		this->set_speed_step_freq(-hz, 0);
	}
}
 8001500:	e006      	b.n	8001510 <_ZN7Stepper13set_speed_rpsEf+0x4c>
		this->set_speed_step_freq(-hz, 0);
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	425b      	negs	r3, r3
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffa0 	bl	8001450 <_ZN7Stepper19set_speed_step_freqEii>
}
 8001510:	bf00      	nop
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40a90000 	.word	0x40a90000

0800151c <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	4a04      	ldr	r2, [pc, #16]	; (8001538 <_ZN7StepperD1Ev+0x1c>)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4618      	mov	r0, r3
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	08004744 	.word	0x08004744

0800153c <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
}
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff ffe9 	bl	800151c <_ZN7StepperD1Ev>
 800154a:	2160      	movs	r1, #96	; 0x60
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	f003 f841 	bl	80045d4 <_ZdlPvj>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <_ZN7StepperC1ERKS_>:
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
 8001566:	4a11      	ldr	r2, [pc, #68]	; (80015ac <_ZN7StepperC1ERKS_+0x50>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	1d10      	adds	r0, r2, #4
 8001572:	3304      	adds	r3, #4
 8001574:	224c      	movs	r2, #76	; 0x4c
 8001576:	4619      	mov	r1, r3
 8001578:	f003 f872 	bl	8004660 <memcpy>
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	651a      	str	r2, [r3, #80]	; 0x50
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	659a      	str	r2, [r3, #88]	; 0x58
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	65da      	str	r2, [r3, #92]	; 0x5c
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	08004744 	.word	0x08004744

080015b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015b2:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
 80015b6:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b8:	f000 fd93 	bl	80020e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015bc:	f000 f982 	bl	80018c4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c0:	f000 fbf6 	bl	8001db0 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 80015c4:	f000 f9c8 	bl	8001958 <_ZL12MX_TIM1_Initv>
  MX_TIM4_Init();
 80015c8:	f000 fa94 	bl	8001af4 <_ZL12MX_TIM4_Initv>
  MX_TIM8_Init();
 80015cc:	f000 fb22 	bl	8001c14 <_ZL12MX_TIM8_Initv>
  /* USER CODE BEGIN 2 */

  Stepper stepper1 = Stepper(htim1, GPIOA, GPIO_PIN_0);
 80015d0:	4eb7      	ldr	r6, [pc, #732]	; (80018b0 <main+0x300>)
 80015d2:	f507 7c0d 	add.w	ip, r7, #564	; 0x234
 80015d6:	2301      	movs	r3, #1
 80015d8:	9311      	str	r3, [sp, #68]	; 0x44
 80015da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80015de:	9310      	str	r3, [sp, #64]	; 0x40
 80015e0:	466d      	mov	r5, sp
 80015e2:	f106 040c 	add.w	r4, r6, #12
 80015e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015f2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80015f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80015fa:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80015fe:	4660      	mov	r0, ip
 8001600:	f7ff feea 	bl	80013d8 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>
  Stepper stepper2 = Stepper(htim4, GPIOA, GPIO_PIN_1);
 8001604:	4eab      	ldr	r6, [pc, #684]	; (80018b4 <main+0x304>)
 8001606:	f507 7cea 	add.w	ip, r7, #468	; 0x1d4
 800160a:	2302      	movs	r3, #2
 800160c:	9311      	str	r3, [sp, #68]	; 0x44
 800160e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001612:	9310      	str	r3, [sp, #64]	; 0x40
 8001614:	466d      	mov	r5, sp
 8001616:	f106 040c 	add.w	r4, r6, #12
 800161a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800161c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800161e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001626:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800162a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800162e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001632:	4660      	mov	r0, ip
 8001634:	f7ff fed0 	bl	80013d8 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>
  Stepper stepper3 = Stepper(htim8, GPIOA, GPIO_PIN_4);
 8001638:	4e9f      	ldr	r6, [pc, #636]	; (80018b8 <main+0x308>)
 800163a:	f507 7cba 	add.w	ip, r7, #372	; 0x174
 800163e:	2310      	movs	r3, #16
 8001640:	9311      	str	r3, [sp, #68]	; 0x44
 8001642:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001646:	9310      	str	r3, [sp, #64]	; 0x40
 8001648:	466d      	mov	r5, sp
 800164a:	f106 040c 	add.w	r4, r6, #12
 800164e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800165e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001662:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001666:	4660      	mov	r0, ip
 8001668:	f7ff feb6 	bl	80013d8 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>

  HolonomicDrive3 holo_drive = HolonomicDrive3(stepper3, stepper1, stepper2, 0.029, 0.175);
 800166c:	f507 72ba 	add.w	r2, r7, #372	; 0x174
 8001670:	f507 7325 	add.w	r3, r7, #660	; 0x294
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff70 	bl	800155c <_ZN7StepperC1ERKS_>
 800167c:	f507 720d 	add.w	r2, r7, #564	; 0x234
 8001680:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8001684:	4611      	mov	r1, r2
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff68 	bl	800155c <_ZN7StepperC1ERKS_>
 800168c:	f507 72ea 	add.w	r2, r7, #468	; 0x1d4
 8001690:	f507 7355 	add.w	r3, r7, #852	; 0x354
 8001694:	4611      	mov	r1, r2
 8001696:	4618      	mov	r0, r3
 8001698:	f7ff ff60 	bl	800155c <_ZN7StepperC1ERKS_>
 800169c:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80016a0:	f507 723d 	add.w	r2, r7, #756	; 0x2f4
 80016a4:	f507 7125 	add.w	r1, r7, #660	; 0x294
 80016a8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80016ac:	eddf 0a83 	vldr	s1, [pc, #524]	; 80018bc <main+0x30c>
 80016b0:	ed9f 0a83 	vldr	s0, [pc, #524]	; 80018c0 <main+0x310>
 80016b4:	f7ff fb7c 	bl	8000db0 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>
 80016b8:	f507 7355 	add.w	r3, r7, #852	; 0x354
 80016bc:	4618      	mov	r0, r3
 80016be:	f7ff ff2d 	bl	800151c <_ZN7StepperD1Ev>
 80016c2:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff ff28 	bl	800151c <_ZN7StepperD1Ev>
 80016cc:	f507 7325 	add.w	r3, r7, #660	; 0x294
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff ff23 	bl	800151c <_ZN7StepperD1Ev>

  float sp = 0.5;
 80016d6:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80016da:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc

  Vel cmds[4];
 80016de:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80016e2:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80016e6:	4618      	mov	r0, r3
 80016e8:	2330      	movs	r3, #48	; 0x30
 80016ea:	461a      	mov	r2, r3
 80016ec:	2100      	movs	r1, #0
 80016ee:	f002 ff89 	bl	8004604 <memset>
  cmds[0] = {};
 80016f2:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80016f6:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8001704:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8001712:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	609a      	str	r2, [r3, #8]
  cmds[0].x = sp;
 800171c:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8001720:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001724:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 8001728:	601a      	str	r2, [r3, #0]
  cmds[1] = {};
 800172a:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800172e:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001732:	f04f 0200 	mov.w	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
 8001738:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800173c:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
 8001746:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800174a:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800174e:	f04f 0200 	mov.w	r2, #0
 8001752:	615a      	str	r2, [r3, #20]
  cmds[1].y = sp;
 8001754:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8001758:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800175c:	f8d7 23bc 	ldr.w	r2, [r7, #956]	; 0x3bc
 8001760:	611a      	str	r2, [r3, #16]
  cmds[2] = {};
 8001762:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8001766:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800176a:	f04f 0200 	mov.w	r2, #0
 800176e:	619a      	str	r2, [r3, #24]
 8001770:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8001774:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	61da      	str	r2, [r3, #28]
 800177e:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8001782:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 8001786:	f04f 0200 	mov.w	r2, #0
 800178a:	621a      	str	r2, [r3, #32]
  cmds[2].x = -sp;
 800178c:	edd7 7aef 	vldr	s15, [r7, #956]	; 0x3bc
 8001790:	eef1 7a67 	vneg.f32	s15, s15
 8001794:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8001798:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 800179c:	edc3 7a06 	vstr	s15, [r3, #24]
  cmds[3] = {};
 80017a0:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80017a4:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	625a      	str	r2, [r3, #36]	; 0x24
 80017ae:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80017b2:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80017b6:	f04f 0200 	mov.w	r2, #0
 80017ba:	629a      	str	r2, [r3, #40]	; 0x28
 80017bc:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80017c0:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	62da      	str	r2, [r3, #44]	; 0x2c
  cmds[3].y = -sp;
 80017ca:	edd7 7aef 	vldr	s15, [r7, #956]	; 0x3bc
 80017ce:	eef1 7a67 	vneg.f32	s15, s15
 80017d2:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80017d6:	f5a3 7372 	sub.w	r3, r3, #968	; 0x3c8
 80017da:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint32_t time_switch_cmd = 1000; //ms
 80017de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e2:	f8c7 33b8 	str.w	r3, [r7, #952]	; 0x3b8
  int i_cmd = 0;
 80017e6:	2300      	movs	r3, #0
 80017e8:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4

  uint32_t last_time = HAL_GetTick();
 80017ec:	f000 fcde 	bl	80021ac <HAL_GetTick>
 80017f0:	f8c7 03c0 	str.w	r0, [r7, #960]	; 0x3c0

  holo_drive.set_cmd_vel(cmds[i_cmd]);
 80017f4:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 80017f8:	f5a3 7172 	sub.w	r1, r3, #968	; 0x3c8
 80017fc:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	440b      	add	r3, r1
 800180a:	edd3 6a00 	vldr	s13, [r3]
 800180e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001812:	edd3 7a02 	vldr	s15, [r3, #8]
 8001816:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800181a:	eeb0 0a66 	vmov.f32	s0, s13
 800181e:	eef0 0a47 	vmov.f32	s1, s14
 8001822:	eeb0 1a67 	vmov.f32	s2, s15
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fb2c 	bl	8000e84 <_ZN15HolonomicDrive311set_cmd_velE3Vel>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint32_t current_time = HAL_GetTick();
 800182c:	f000 fcbe 	bl	80021ac <HAL_GetTick>
 8001830:	f8c7 03b4 	str.w	r0, [r7, #948]	; 0x3b4
	  if(current_time-last_time > time_switch_cmd) {
 8001834:	f8d7 23b4 	ldr.w	r2, [r7, #948]	; 0x3b4
 8001838:	f8d7 33c0 	ldr.w	r3, [r7, #960]	; 0x3c0
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f8d7 23b8 	ldr.w	r2, [r7, #952]	; 0x3b8
 8001842:	429a      	cmp	r2, r3
 8001844:	d22b      	bcs.n	800189e <main+0x2ee>
		  i_cmd += 1;
 8001846:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 800184a:	3301      	adds	r3, #1
 800184c:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
		  if(i_cmd == 4) {
 8001850:	f8d7 33c4 	ldr.w	r3, [r7, #964]	; 0x3c4
 8001854:	2b04      	cmp	r3, #4
 8001856:	d102      	bne.n	800185e <main+0x2ae>
			  i_cmd = 0;
 8001858:	2300      	movs	r3, #0
 800185a:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
		  }
		  last_time = current_time;
 800185e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	; 0x3b4
 8001862:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0

		  holo_drive.set_cmd_vel(cmds[i_cmd]);
 8001866:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 800186a:	f5a3 7172 	sub.w	r1, r3, #968	; 0x3c8
 800186e:	f8d7 23c4 	ldr.w	r2, [r7, #964]	; 0x3c4
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	440b      	add	r3, r1
 800187c:	edd3 6a00 	vldr	s13, [r3]
 8001880:	ed93 7a01 	vldr	s14, [r3, #4]
 8001884:	edd3 7a02 	vldr	s15, [r3, #8]
 8001888:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800188c:	eeb0 0a66 	vmov.f32	s0, s13
 8001890:	eef0 0a47 	vmov.f32	s1, s14
 8001894:	eeb0 1a67 	vmov.f32	s2, s15
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff faf3 	bl	8000e84 <_ZN15HolonomicDrive311set_cmd_velE3Vel>
	  }

	  holo_drive.spin_once_motors_control();
 800189e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff fc50 	bl	8001148 <_ZN15HolonomicDrive324spin_once_motors_controlEv>
	  HAL_Delay(10);
 80018a8:	200a      	movs	r0, #10
 80018aa:	f000 fc8b 	bl	80021c4 <HAL_Delay>
//	  stepper3.set_speed_step_freq(0, 1);
//	  HAL_Delay(1000);



  }
 80018ae:	e7bd      	b.n	800182c <main+0x27c>
 80018b0:	20000078 	.word	0x20000078
 80018b4:	200000c4 	.word	0x200000c4
 80018b8:	20000110 	.word	0x20000110
 80018bc:	3e333333 	.word	0x3e333333
 80018c0:	3ced9168 	.word	0x3ced9168

080018c4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b094      	sub	sp, #80	; 0x50
 80018c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ca:	f107 0318 	add.w	r3, r7, #24
 80018ce:	2238      	movs	r2, #56	; 0x38
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f002 fe96 	bl	8004604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80018ea:	f000 ff0b 	bl	8002704 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ee:	2302      	movs	r3, #2
 80018f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f8:	2340      	movs	r3, #64	; 0x40
 80018fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001900:	f107 0318 	add.w	r3, r7, #24
 8001904:	4618      	mov	r0, r3
 8001906:	f000 ffb1 	bl	800286c <HAL_RCC_OscConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	bf14      	ite	ne
 8001910:	2301      	movne	r3, #1
 8001912:	2300      	moveq	r3, #0
 8001914:	b2db      	uxtb	r3, r3
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 800191a:	f000 fa87 	bl	8001e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800191e:	230f      	movs	r3, #15
 8001920:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001922:	2301      	movs	r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	2100      	movs	r1, #0
 8001936:	4618      	mov	r0, r3
 8001938:	f001 faaa 	bl	8002e90 <HAL_RCC_ClockConfig>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	bf14      	ite	ne
 8001942:	2301      	movne	r3, #1
 8001944:	2300      	moveq	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <_Z18SystemClock_Configv+0x8c>
  {
    Error_Handler();
 800194c:	f000 fa6e 	bl	8001e2c <Error_Handler>
  }
}
 8001950:	bf00      	nop
 8001952:	3750      	adds	r7, #80	; 0x50
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}

08001958 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b09c      	sub	sp, #112	; 0x70
 800195c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800195e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]
 800196a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800196c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	605a      	str	r2, [r3, #4]
 8001976:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001978:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
 8001988:	615a      	str	r2, [r3, #20]
 800198a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800198c:	1d3b      	adds	r3, r7, #4
 800198e:	2234      	movs	r2, #52	; 0x34
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f002 fe36 	bl	8004604 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001998:	4b54      	ldr	r3, [pc, #336]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 800199a:	4a55      	ldr	r2, [pc, #340]	; (8001af0 <_ZL12MX_TIM1_Initv+0x198>)
 800199c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 24;
 800199e:	4b53      	ldr	r3, [pc, #332]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 80019a0:	2218      	movs	r2, #24
 80019a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a4:	4b51      	ldr	r3, [pc, #324]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019aa:	4b50      	ldr	r3, [pc, #320]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 80019ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b2:	4b4e      	ldr	r3, [pc, #312]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019b8:	4b4c      	ldr	r3, [pc, #304]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019be:	4b4b      	ldr	r3, [pc, #300]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019c4:	4849      	ldr	r0, [pc, #292]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 80019c6:	f001 fc47 	bl	8003258 <HAL_TIM_Base_Init>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf14      	ite	ne
 80019d0:	2301      	movne	r3, #1
 80019d2:	2300      	moveq	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 80019da:	f000 fa27 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e2:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019e4:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80019e8:	4619      	mov	r1, r3
 80019ea:	4840      	ldr	r0, [pc, #256]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 80019ec:	f001 ff96 	bl	800391c <HAL_TIM_ConfigClockSource>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	bf14      	ite	ne
 80019f6:	2301      	movne	r3, #1
 80019f8:	2300      	moveq	r3, #0
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8001a00:	f000 fa14 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a04:	4839      	ldr	r0, [pc, #228]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 8001a06:	f001 fc7e 	bl	8003306 <HAL_TIM_PWM_Init>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	bf14      	ite	ne
 8001a10:	2301      	movne	r3, #1
 8001a12:	2300      	moveq	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 8001a1a:	f000 fa07 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001a2e:	4619      	mov	r1, r3
 8001a30:	482e      	ldr	r0, [pc, #184]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 8001a32:	f002 fcc1 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	bf14      	ite	ne
 8001a3c:	2301      	movne	r3, #1
 8001a3e:	2300      	moveq	r3, #0
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 8001a46:	f000 f9f1 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4a:	2360      	movs	r3, #96	; 0x60
 8001a4c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a52:	2300      	movs	r3, #0
 8001a54:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a56:	2300      	movs	r3, #0
 8001a58:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a66:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	481f      	ldr	r0, [pc, #124]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 8001a70:	f001 fe40 	bl	80036f4 <HAL_TIM_PWM_ConfigChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf14      	ite	ne
 8001a7a:	2301      	movne	r3, #1
 8001a7c:	2300      	moveq	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <_ZL12MX_TIM1_Initv+0x130>
  {
    Error_Handler();
 8001a84:	f000 f9d2 	bl	8001e2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001aae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001abc:	2300      	movs	r3, #0
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4809      	ldr	r0, [pc, #36]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 8001ac6:	f002 fcf9 	bl	80044bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	bf14      	ite	ne
 8001ad0:	2301      	movne	r3, #1
 8001ad2:	2300      	moveq	r3, #0
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <_ZL12MX_TIM1_Initv+0x186>
  {
    Error_Handler();
 8001ada:	f000 f9a7 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ade:	4803      	ldr	r0, [pc, #12]	; (8001aec <_ZL12MX_TIM1_Initv+0x194>)
 8001ae0:	f000 fa16 	bl	8001f10 <HAL_TIM_MspPostInit>

}
 8001ae4:	bf00      	nop
 8001ae6:	3770      	adds	r7, #112	; 0x70
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000078 	.word	0x20000078
 8001af0:	40012c00 	.word	0x40012c00

08001af4 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08e      	sub	sp, #56	; 0x38
 8001af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001afe:	2200      	movs	r2, #0
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	609a      	str	r2, [r3, #8]
 8001b06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b08:	f107 031c 	add.w	r3, r7, #28
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b14:	463b      	mov	r3, r7
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	605a      	str	r2, [r3, #4]
 8001b1c:	609a      	str	r2, [r3, #8]
 8001b1e:	60da      	str	r2, [r3, #12]
 8001b20:	611a      	str	r2, [r3, #16]
 8001b22:	615a      	str	r2, [r3, #20]
 8001b24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001b26:	4b39      	ldr	r3, [pc, #228]	; (8001c0c <_ZL12MX_TIM4_Initv+0x118>)
 8001b28:	4a39      	ldr	r2, [pc, #228]	; (8001c10 <_ZL12MX_TIM4_Initv+0x11c>)
 8001b2a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 24;
 8001b2c:	4b37      	ldr	r3, [pc, #220]	; (8001c0c <_ZL12MX_TIM4_Initv+0x118>)
 8001b2e:	2218      	movs	r2, #24
 8001b30:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b36      	ldr	r3, [pc, #216]	; (8001c0c <_ZL12MX_TIM4_Initv+0x118>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001b38:	4b34      	ldr	r3, [pc, #208]	; (8001c0c <_ZL12MX_TIM4_Initv+0x118>)
 8001b3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b3e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b40:	4b32      	ldr	r3, [pc, #200]	; (8001c0c <_ZL12MX_TIM4_Initv+0x118>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b46:	4b31      	ldr	r3, [pc, #196]	; (8001c0c <_ZL12MX_TIM4_Initv+0x118>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b4c:	482f      	ldr	r0, [pc, #188]	; (8001c0c <_ZL12MX_TIM4_Initv+0x118>)
 8001b4e:	f001 fb83 	bl	8003258 <HAL_TIM_Base_Init>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	bf14      	ite	ne
 8001b58:	2301      	movne	r3, #1
 8001b5a:	2300      	moveq	r3, #0
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 8001b62:	f000 f963 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b6a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b6c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b70:	4619      	mov	r1, r3
 8001b72:	4826      	ldr	r0, [pc, #152]	; (8001c0c <_ZL12MX_TIM4_Initv+0x118>)
 8001b74:	f001 fed2 	bl	800391c <HAL_TIM_ConfigClockSource>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf14      	ite	ne
 8001b7e:	2301      	movne	r3, #1
 8001b80:	2300      	moveq	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 8001b88:	f000 f950 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b8c:	481f      	ldr	r0, [pc, #124]	; (8001c0c <_ZL12MX_TIM4_Initv+0x118>)
 8001b8e:	f001 fbba 	bl	8003306 <HAL_TIM_PWM_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	bf14      	ite	ne
 8001b98:	2301      	movne	r3, #1
 8001b9a:	2300      	moveq	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 8001ba2:	f000 f943 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bae:	f107 031c 	add.w	r3, r7, #28
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4815      	ldr	r0, [pc, #84]	; (8001c0c <_ZL12MX_TIM4_Initv+0x118>)
 8001bb6:	f002 fbff 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	bf14      	ite	ne
 8001bc0:	2301      	movne	r3, #1
 8001bc2:	2300      	moveq	r3, #0
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 8001bca:	f000 f92f 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bce:	2360      	movs	r3, #96	; 0x60
 8001bd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bde:	463b      	mov	r3, r7
 8001be0:	2200      	movs	r2, #0
 8001be2:	4619      	mov	r1, r3
 8001be4:	4809      	ldr	r0, [pc, #36]	; (8001c0c <_ZL12MX_TIM4_Initv+0x118>)
 8001be6:	f001 fd85 	bl	80036f4 <HAL_TIM_PWM_ConfigChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf14      	ite	ne
 8001bf0:	2301      	movne	r3, #1
 8001bf2:	2300      	moveq	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <_ZL12MX_TIM4_Initv+0x10a>
  {
    Error_Handler();
 8001bfa:	f000 f917 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001bfe:	4803      	ldr	r0, [pc, #12]	; (8001c0c <_ZL12MX_TIM4_Initv+0x118>)
 8001c00:	f000 f986 	bl	8001f10 <HAL_TIM_MspPostInit>

}
 8001c04:	bf00      	nop
 8001c06:	3738      	adds	r7, #56	; 0x38
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200000c4 	.word	0x200000c4
 8001c10:	40000800 	.word	0x40000800

08001c14 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b09c      	sub	sp, #112	; 0x70
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c1a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
 8001c26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
 8001c44:	615a      	str	r2, [r3, #20]
 8001c46:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c48:	1d3b      	adds	r3, r7, #4
 8001c4a:	2234      	movs	r2, #52	; 0x34
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fcd8 	bl	8004604 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c54:	4b54      	ldr	r3, [pc, #336]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001c56:	4a55      	ldr	r2, [pc, #340]	; (8001dac <_ZL12MX_TIM8_Initv+0x198>)
 8001c58:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 24;
 8001c5a:	4b53      	ldr	r3, [pc, #332]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001c5c:	2218      	movs	r2, #24
 8001c5e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c60:	4b51      	ldr	r3, [pc, #324]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001c66:	4b50      	ldr	r3, [pc, #320]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001c68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c6c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c6e:	4b4e      	ldr	r3, [pc, #312]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c74:	4b4c      	ldr	r3, [pc, #304]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7a:	4b4b      	ldr	r3, [pc, #300]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c80:	4849      	ldr	r0, [pc, #292]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001c82:	f001 fae9 	bl	8003258 <HAL_TIM_Base_Init>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <_ZL12MX_TIM8_Initv+0x86>
  {
    Error_Handler();
 8001c96:	f000 f8c9 	bl	8001e2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9e:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ca0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4840      	ldr	r0, [pc, #256]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001ca8:	f001 fe38 	bl	800391c <HAL_TIM_ConfigClockSource>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	bf14      	ite	ne
 8001cb2:	2301      	movne	r3, #1
 8001cb4:	2300      	moveq	r3, #0
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <_ZL12MX_TIM8_Initv+0xac>
  {
    Error_Handler();
 8001cbc:	f000 f8b6 	bl	8001e2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001cc0:	4839      	ldr	r0, [pc, #228]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001cc2:	f001 fb20 	bl	8003306 <HAL_TIM_PWM_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	bf14      	ite	ne
 8001ccc:	2301      	movne	r3, #1
 8001cce:	2300      	moveq	r3, #0
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <_ZL12MX_TIM8_Initv+0xc6>
  {
    Error_Handler();
 8001cd6:	f000 f8a9 	bl	8001e2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ce6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cea:	4619      	mov	r1, r3
 8001cec:	482e      	ldr	r0, [pc, #184]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001cee:	f002 fb63 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	bf14      	ite	ne
 8001cf8:	2301      	movne	r3, #1
 8001cfa:	2300      	moveq	r3, #0
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <_ZL12MX_TIM8_Initv+0xf2>
  {
    Error_Handler();
 8001d02:	f000 f893 	bl	8001e2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d06:	2360      	movs	r3, #96	; 0x60
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d12:	2300      	movs	r3, #0
 8001d14:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d26:	2200      	movs	r2, #0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	481f      	ldr	r0, [pc, #124]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001d2c:	f001 fce2 	bl	80036f4 <HAL_TIM_PWM_ConfigChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	bf14      	ite	ne
 8001d36:	2301      	movne	r3, #1
 8001d38:	2300      	moveq	r3, #0
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <_ZL12MX_TIM8_Initv+0x130>
  {
    Error_Handler();
 8001d40:	f000 f874 	bl	8001e2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d5c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d6e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d74:	2300      	movs	r3, #0
 8001d76:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4809      	ldr	r0, [pc, #36]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001d82:	f002 fb9b 	bl	80044bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	bf14      	ite	ne
 8001d8c:	2301      	movne	r3, #1
 8001d8e:	2300      	moveq	r3, #0
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <_ZL12MX_TIM8_Initv+0x186>
  {
    Error_Handler();
 8001d96:	f000 f849 	bl	8001e2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d9a:	4803      	ldr	r0, [pc, #12]	; (8001da8 <_ZL12MX_TIM8_Initv+0x194>)
 8001d9c:	f000 f8b8 	bl	8001f10 <HAL_TIM_MspPostInit>

}
 8001da0:	bf00      	nop
 8001da2:	3770      	adds	r7, #112	; 0x70
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000110 	.word	0x20000110
 8001dac:	40013400 	.word	0x40013400

08001db0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	2200      	movs	r2, #0
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	605a      	str	r2, [r3, #4]
 8001dbe:	609a      	str	r2, [r3, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc4:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <_ZL12MX_GPIO_Initv+0x78>)
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc8:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <_ZL12MX_GPIO_Initv+0x78>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dd0:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <_ZL12MX_GPIO_Initv+0x78>)
 8001dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2193      	movs	r1, #147	; 0x93
 8001de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de4:	f000 fc76 	bl	80026d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001de8:	2313      	movs	r3, #19
 8001dea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dec:	2301      	movs	r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df8:	1d3b      	adds	r3, r7, #4
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e00:	f000 fae6 	bl	80023d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001e08:	2311      	movs	r3, #17
 8001e0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e14:	1d3b      	adds	r3, r7, #4
 8001e16:	4619      	mov	r1, r3
 8001e18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e1c:	f000 fad8 	bl	80023d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001e20:	bf00      	nop
 8001e22:	3718      	adds	r7, #24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	40021000 	.word	0x40021000

08001e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e30:	b672      	cpsid	i
}
 8001e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <Error_Handler+0x8>
	...

08001e38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_MspInit+0x44>)
 8001e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e42:	4a0e      	ldr	r2, [pc, #56]	; (8001e7c <HAL_MspInit+0x44>)
 8001e44:	f043 0301 	orr.w	r3, r3, #1
 8001e48:	6613      	str	r3, [r2, #96]	; 0x60
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_MspInit+0x44>)
 8001e4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e4e:	f003 0301 	and.w	r3, r3, #1
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	4b09      	ldr	r3, [pc, #36]	; (8001e7c <HAL_MspInit+0x44>)
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	4a08      	ldr	r2, [pc, #32]	; (8001e7c <HAL_MspInit+0x44>)
 8001e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e60:	6593      	str	r3, [r2, #88]	; 0x58
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_MspInit+0x44>)
 8001e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6a:	603b      	str	r3, [r7, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001e6e:	f000 fced 	bl	800284c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000

08001e80 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a1c      	ldr	r2, [pc, #112]	; (8001f00 <HAL_TIM_Base_MspInit+0x80>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d10c      	bne.n	8001eac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e92:	4b1c      	ldr	r3, [pc, #112]	; (8001f04 <HAL_TIM_Base_MspInit+0x84>)
 8001e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e96:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_TIM_Base_MspInit+0x84>)
 8001e98:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_TIM_Base_MspInit+0x84>)
 8001ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001eaa:	e022      	b.n	8001ef2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a15      	ldr	r2, [pc, #84]	; (8001f08 <HAL_TIM_Base_MspInit+0x88>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d10c      	bne.n	8001ed0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eb6:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <HAL_TIM_Base_MspInit+0x84>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	4a12      	ldr	r2, [pc, #72]	; (8001f04 <HAL_TIM_Base_MspInit+0x84>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ec2:	4b10      	ldr	r3, [pc, #64]	; (8001f04 <HAL_TIM_Base_MspInit+0x84>)
 8001ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
}
 8001ece:	e010      	b.n	8001ef2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM8)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <HAL_TIM_Base_MspInit+0x8c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_TIM_Base_MspInit+0x84>)
 8001edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ede:	4a09      	ldr	r2, [pc, #36]	; (8001f04 <HAL_TIM_Base_MspInit+0x84>)
 8001ee0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ee4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <HAL_TIM_Base_MspInit+0x84>)
 8001ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
}
 8001ef2:	bf00      	nop
 8001ef4:	371c      	adds	r7, #28
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40012c00 	.word	0x40012c00
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40000800 	.word	0x40000800
 8001f0c:	40013400 	.word	0x40013400

08001f10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08a      	sub	sp, #40	; 0x28
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f18:	f107 0314 	add.w	r3, r7, #20
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
 8001f20:	605a      	str	r2, [r3, #4]
 8001f22:	609a      	str	r2, [r3, #8]
 8001f24:	60da      	str	r2, [r3, #12]
 8001f26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a36      	ldr	r2, [pc, #216]	; (8002008 <HAL_TIM_MspPostInit+0xf8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d11e      	bne.n	8001f70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	4b36      	ldr	r3, [pc, #216]	; (800200c <HAL_TIM_MspPostInit+0xfc>)
 8001f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f36:	4a35      	ldr	r2, [pc, #212]	; (800200c <HAL_TIM_MspPostInit+0xfc>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f3e:	4b33      	ldr	r3, [pc, #204]	; (800200c <HAL_TIM_MspPostInit+0xfc>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	613b      	str	r3, [r7, #16]
 8001f48:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f50:	2302      	movs	r3, #2
 8001f52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f54:	2302      	movs	r3, #2
 8001f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001f5c:	2306      	movs	r3, #6
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f60:	f107 0314 	add.w	r3, r7, #20
 8001f64:	4619      	mov	r1, r3
 8001f66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f6a:	f000 fa31 	bl	80023d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001f6e:	e046      	b.n	8001ffe <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a26      	ldr	r2, [pc, #152]	; (8002010 <HAL_TIM_MspPostInit+0x100>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d11e      	bne.n	8001fb8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <HAL_TIM_MspPostInit+0xfc>)
 8001f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7e:	4a23      	ldr	r2, [pc, #140]	; (800200c <HAL_TIM_MspPostInit+0xfc>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f86:	4b21      	ldr	r3, [pc, #132]	; (800200c <HAL_TIM_MspPostInit+0xfc>)
 8001f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001f92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f9c:	2302      	movs	r3, #2
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001fa4:	230a      	movs	r3, #10
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb2:	f000 fa0d 	bl	80023d0 <HAL_GPIO_Init>
}
 8001fb6:	e022      	b.n	8001ffe <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM8)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a15      	ldr	r2, [pc, #84]	; (8002014 <HAL_TIM_MspPostInit+0x104>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d11d      	bne.n	8001ffe <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b12      	ldr	r3, [pc, #72]	; (800200c <HAL_TIM_MspPostInit+0xfc>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	4a11      	ldr	r2, [pc, #68]	; (800200c <HAL_TIM_MspPostInit+0xfc>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fce:	4b0f      	ldr	r3, [pc, #60]	; (800200c <HAL_TIM_MspPostInit+0xfc>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60bb      	str	r3, [r7, #8]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8001fec:	2302      	movs	r3, #2
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffa:	f000 f9e9 	bl	80023d0 <HAL_GPIO_Init>
}
 8001ffe:	bf00      	nop
 8002000:	3728      	adds	r7, #40	; 0x28
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	40012c00 	.word	0x40012c00
 800200c:	40021000 	.word	0x40021000
 8002010:	40000800 	.word	0x40000800
 8002014:	40013400 	.word	0x40013400

08002018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800201c:	e7fe      	b.n	800201c <NMI_Handler+0x4>

0800201e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002022:	e7fe      	b.n	8002022 <HardFault_Handler+0x4>

08002024 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002028:	e7fe      	b.n	8002028 <MemManage_Handler+0x4>

0800202a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800202a:	b480      	push	{r7}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800202e:	e7fe      	b.n	800202e <BusFault_Handler+0x4>

08002030 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002034:	e7fe      	b.n	8002034 <UsageFault_Handler+0x4>

08002036 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002064:	f000 f890 	bl	8002188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	bd80      	pop	{r7, pc}

0800206c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002070:	4b06      	ldr	r3, [pc, #24]	; (800208c <SystemInit+0x20>)
 8002072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <SystemInit+0x20>)
 8002078:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800207c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002080:	bf00      	nop
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002090:	480d      	ldr	r0, [pc, #52]	; (80020c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002092:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002094:	f7ff ffea 	bl	800206c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <LoopForever+0x6>)
  ldr r1, =_edata
 800209a:	490d      	ldr	r1, [pc, #52]	; (80020d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <LoopForever+0xe>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020b0:	4c0a      	ldr	r4, [pc, #40]	; (80020dc <LoopForever+0x16>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80020be:	f002 faa9 	bl	8004614 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020c2:	f7ff fa75 	bl	80015b0 <main>

080020c6 <LoopForever>:

LoopForever:
    b LoopForever
 80020c6:	e7fe      	b.n	80020c6 <LoopForever>
  ldr   r0, =_estack
 80020c8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80020cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80020d4:	08004764 	.word	0x08004764
  ldr r2, =_sbss
 80020d8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80020dc:	200002a0 	.word	0x200002a0

080020e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020e0:	e7fe      	b.n	80020e0 <ADC1_2_IRQHandler>

080020e2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020e8:	2300      	movs	r3, #0
 80020ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020ec:	2003      	movs	r0, #3
 80020ee:	f000 f93d 	bl	800236c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80020f2:	200f      	movs	r0, #15
 80020f4:	f000 f80e 	bl	8002114 <HAL_InitTick>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d002      	beq.n	8002104 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	71fb      	strb	r3, [r7, #7]
 8002102:	e001      	b.n	8002108 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002104:	f7ff fe98 	bl	8001e38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002108:	79fb      	ldrb	r3, [r7, #7]

}
 800210a:	4618      	mov	r0, r3
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002120:	4b16      	ldr	r3, [pc, #88]	; (800217c <HAL_InitTick+0x68>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d022      	beq.n	800216e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002128:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_InitTick+0x6c>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <HAL_InitTick+0x68>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002134:	fbb1 f3f3 	udiv	r3, r1, r3
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	4618      	mov	r0, r3
 800213e:	f000 f93a 	bl	80023b6 <HAL_SYSTICK_Config>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d10f      	bne.n	8002168 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2b0f      	cmp	r3, #15
 800214c:	d809      	bhi.n	8002162 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214e:	2200      	movs	r2, #0
 8002150:	6879      	ldr	r1, [r7, #4]
 8002152:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002156:	f000 f914 	bl	8002382 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_InitTick+0x70>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e007      	b.n	8002172 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
 8002166:	e004      	b.n	8002172 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	e001      	b.n	8002172 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000008 	.word	0x20000008
 8002180:	20000000 	.word	0x20000000
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_IncTick+0x1c>)
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_IncTick+0x20>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4413      	add	r3, r2
 8002196:	4a03      	ldr	r2, [pc, #12]	; (80021a4 <HAL_IncTick+0x1c>)
 8002198:	6013      	str	r3, [r2, #0]
}
 800219a:	bf00      	nop
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	2000015c 	.word	0x2000015c
 80021a8:	20000008 	.word	0x20000008

080021ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return uwTick;
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_GetTick+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	2000015c 	.word	0x2000015c

080021c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff ffee 	bl	80021ac <HAL_GetTick>
 80021d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021dc:	d004      	beq.n	80021e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_Delay+0x40>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	4413      	add	r3, r2
 80021e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021e8:	bf00      	nop
 80021ea:	f7ff ffdf 	bl	80021ac <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d8f7      	bhi.n	80021ea <HAL_Delay+0x26>
  {
  }
}
 80021fa:	bf00      	nop
 80021fc:	bf00      	nop
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	20000008 	.word	0x20000008

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223a:	4a04      	ldr	r2, [pc, #16]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	60d3      	str	r3, [r2, #12]
}
 8002240:	bf00      	nop
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	e000ed00 	.word	0xe000ed00

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	; (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
         );
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002338:	d301      	bcc.n	800233e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233a:	2301      	movs	r3, #1
 800233c:	e00f      	b.n	800235e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233e:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <SysTick_Config+0x40>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002346:	210f      	movs	r1, #15
 8002348:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800234c:	f7ff ff8e 	bl	800226c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <SysTick_Config+0x40>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <SysTick_Config+0x40>)
 8002358:	2207      	movs	r2, #7
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000e010 	.word	0xe000e010

0800236c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff47 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002390:	f7ff ff5e 	bl	8002250 <__NVIC_GetPriorityGrouping>
 8002394:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68b9      	ldr	r1, [r7, #8]
 800239a:	6978      	ldr	r0, [r7, #20]
 800239c:	f7ff ff90 	bl	80022c0 <NVIC_EncodePriority>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff ff5f 	bl	800226c <__NVIC_SetPriority>
}
 80023ae:	bf00      	nop
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ffb2 	bl	8002328 <SysTick_Config>
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
	...

080023d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b087      	sub	sp, #28
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80023da:	2300      	movs	r3, #0
 80023dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023de:	e15a      	b.n	8002696 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2101      	movs	r1, #1
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	fa01 f303 	lsl.w	r3, r1, r3
 80023ec:	4013      	ands	r3, r2
 80023ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 814c 	beq.w	8002690 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0303 	and.w	r3, r3, #3
 8002400:	2b01      	cmp	r3, #1
 8002402:	d005      	beq.n	8002410 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800240c:	2b02      	cmp	r3, #2
 800240e:	d130      	bne.n	8002472 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	2203      	movs	r2, #3
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4013      	ands	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	693a      	ldr	r2, [r7, #16]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002446:	2201      	movs	r2, #1
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43db      	mvns	r3, r3
 8002450:	693a      	ldr	r2, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	091b      	lsrs	r3, r3, #4
 800245c:	f003 0201 	and.w	r2, r3, #1
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	fa02 f303 	lsl.w	r3, r2, r3
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b03      	cmp	r3, #3
 800247c:	d017      	beq.n	80024ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	2203      	movs	r2, #3
 800248a:	fa02 f303 	lsl.w	r3, r2, r3
 800248e:	43db      	mvns	r3, r3
 8002490:	693a      	ldr	r2, [r7, #16]
 8002492:	4013      	ands	r3, r2
 8002494:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	689a      	ldr	r2, [r3, #8]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d123      	bne.n	8002502 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	08da      	lsrs	r2, r3, #3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3208      	adds	r2, #8
 80024c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	220f      	movs	r2, #15
 80024d2:	fa02 f303 	lsl.w	r3, r2, r3
 80024d6:	43db      	mvns	r3, r3
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4013      	ands	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	691a      	ldr	r2, [r3, #16]
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	08da      	lsrs	r2, r3, #3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	3208      	adds	r2, #8
 80024fc:	6939      	ldr	r1, [r7, #16]
 80024fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	2203      	movs	r2, #3
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	693a      	ldr	r2, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 0203 	and.w	r2, r3, #3
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4313      	orrs	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	693a      	ldr	r2, [r7, #16]
 8002534:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 80a6 	beq.w	8002690 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002544:	4b5b      	ldr	r3, [pc, #364]	; (80026b4 <HAL_GPIO_Init+0x2e4>)
 8002546:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002548:	4a5a      	ldr	r2, [pc, #360]	; (80026b4 <HAL_GPIO_Init+0x2e4>)
 800254a:	f043 0301 	orr.w	r3, r3, #1
 800254e:	6613      	str	r3, [r2, #96]	; 0x60
 8002550:	4b58      	ldr	r3, [pc, #352]	; (80026b4 <HAL_GPIO_Init+0x2e4>)
 8002552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002554:	f003 0301 	and.w	r3, r3, #1
 8002558:	60bb      	str	r3, [r7, #8]
 800255a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800255c:	4a56      	ldr	r2, [pc, #344]	; (80026b8 <HAL_GPIO_Init+0x2e8>)
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	3302      	adds	r3, #2
 8002564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	f003 0303 	and.w	r3, r3, #3
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	220f      	movs	r2, #15
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	43db      	mvns	r3, r3
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	4013      	ands	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002586:	d01f      	beq.n	80025c8 <HAL_GPIO_Init+0x1f8>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a4c      	ldr	r2, [pc, #304]	; (80026bc <HAL_GPIO_Init+0x2ec>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d019      	beq.n	80025c4 <HAL_GPIO_Init+0x1f4>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a4b      	ldr	r2, [pc, #300]	; (80026c0 <HAL_GPIO_Init+0x2f0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d013      	beq.n	80025c0 <HAL_GPIO_Init+0x1f0>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a4a      	ldr	r2, [pc, #296]	; (80026c4 <HAL_GPIO_Init+0x2f4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d00d      	beq.n	80025bc <HAL_GPIO_Init+0x1ec>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a49      	ldr	r2, [pc, #292]	; (80026c8 <HAL_GPIO_Init+0x2f8>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d007      	beq.n	80025b8 <HAL_GPIO_Init+0x1e8>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a48      	ldr	r2, [pc, #288]	; (80026cc <HAL_GPIO_Init+0x2fc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d101      	bne.n	80025b4 <HAL_GPIO_Init+0x1e4>
 80025b0:	2305      	movs	r3, #5
 80025b2:	e00a      	b.n	80025ca <HAL_GPIO_Init+0x1fa>
 80025b4:	2306      	movs	r3, #6
 80025b6:	e008      	b.n	80025ca <HAL_GPIO_Init+0x1fa>
 80025b8:	2304      	movs	r3, #4
 80025ba:	e006      	b.n	80025ca <HAL_GPIO_Init+0x1fa>
 80025bc:	2303      	movs	r3, #3
 80025be:	e004      	b.n	80025ca <HAL_GPIO_Init+0x1fa>
 80025c0:	2302      	movs	r3, #2
 80025c2:	e002      	b.n	80025ca <HAL_GPIO_Init+0x1fa>
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_GPIO_Init+0x1fa>
 80025c8:	2300      	movs	r3, #0
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	f002 0203 	and.w	r2, r2, #3
 80025d0:	0092      	lsls	r2, r2, #2
 80025d2:	4093      	lsls	r3, r2
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025da:	4937      	ldr	r1, [pc, #220]	; (80026b8 <HAL_GPIO_Init+0x2e8>)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3302      	adds	r3, #2
 80025e2:	693a      	ldr	r2, [r7, #16]
 80025e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025e8:	4b39      	ldr	r3, [pc, #228]	; (80026d0 <HAL_GPIO_Init+0x300>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	693a      	ldr	r2, [r7, #16]
 80025f4:	4013      	ands	r3, r2
 80025f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4313      	orrs	r3, r2
 800260a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800260c:	4a30      	ldr	r2, [pc, #192]	; (80026d0 <HAL_GPIO_Init+0x300>)
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002612:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <HAL_GPIO_Init+0x300>)
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	43db      	mvns	r3, r3
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4013      	ands	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	4313      	orrs	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002636:	4a26      	ldr	r2, [pc, #152]	; (80026d0 <HAL_GPIO_Init+0x300>)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <HAL_GPIO_Init+0x300>)
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	43db      	mvns	r3, r3
 8002646:	693a      	ldr	r2, [r7, #16]
 8002648:	4013      	ands	r3, r2
 800264a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002660:	4a1b      	ldr	r2, [pc, #108]	; (80026d0 <HAL_GPIO_Init+0x300>)
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002666:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <HAL_GPIO_Init+0x300>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	43db      	mvns	r3, r3
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	4013      	ands	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d003      	beq.n	800268a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	4313      	orrs	r3, r2
 8002688:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800268a:	4a11      	ldr	r2, [pc, #68]	; (80026d0 <HAL_GPIO_Init+0x300>)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	3301      	adds	r3, #1
 8002694:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	fa22 f303 	lsr.w	r3, r2, r3
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f47f ae9d 	bne.w	80023e0 <HAL_GPIO_Init+0x10>
  }
}
 80026a6:	bf00      	nop
 80026a8:	bf00      	nop
 80026aa:	371c      	adds	r7, #28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40010000 	.word	0x40010000
 80026bc:	48000400 	.word	0x48000400
 80026c0:	48000800 	.word	0x48000800
 80026c4:	48000c00 	.word	0x48000c00
 80026c8:	48001000 	.word	0x48001000
 80026cc:	48001400 	.word	0x48001400
 80026d0:	40010400 	.word	0x40010400

080026d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]
 80026e0:	4613      	mov	r3, r2
 80026e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026e4:	787b      	ldrb	r3, [r7, #1]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026f0:	e002      	b.n	80026f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002704:	b480      	push	{r7}
 8002706:	b085      	sub	sp, #20
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d141      	bne.n	8002796 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002712:	4b4b      	ldr	r3, [pc, #300]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800271a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800271e:	d131      	bne.n	8002784 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002720:	4b47      	ldr	r3, [pc, #284]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002726:	4a46      	ldr	r2, [pc, #280]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800272c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002730:	4b43      	ldr	r3, [pc, #268]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002738:	4a41      	ldr	r2, [pc, #260]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800273a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800273e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002740:	4b40      	ldr	r3, [pc, #256]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2232      	movs	r2, #50	; 0x32
 8002746:	fb02 f303 	mul.w	r3, r2, r3
 800274a:	4a3f      	ldr	r2, [pc, #252]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800274c:	fba2 2303 	umull	r2, r3, r2, r3
 8002750:	0c9b      	lsrs	r3, r3, #18
 8002752:	3301      	adds	r3, #1
 8002754:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002756:	e002      	b.n	800275e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	3b01      	subs	r3, #1
 800275c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800275e:	4b38      	ldr	r3, [pc, #224]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800276a:	d102      	bne.n	8002772 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f2      	bne.n	8002758 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002772:	4b33      	ldr	r3, [pc, #204]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002774:	695b      	ldr	r3, [r3, #20]
 8002776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800277a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800277e:	d158      	bne.n	8002832 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e057      	b.n	8002834 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002784:	4b2e      	ldr	r3, [pc, #184]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002786:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800278a:	4a2d      	ldr	r2, [pc, #180]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800278c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002790:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002794:	e04d      	b.n	8002832 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800279c:	d141      	bne.n	8002822 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800279e:	4b28      	ldr	r3, [pc, #160]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027aa:	d131      	bne.n	8002810 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80027ac:	4b24      	ldr	r3, [pc, #144]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027b2:	4a23      	ldr	r2, [pc, #140]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80027bc:	4b20      	ldr	r3, [pc, #128]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80027c4:	4a1e      	ldr	r2, [pc, #120]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ca:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2232      	movs	r2, #50	; 0x32
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	4a1c      	ldr	r2, [pc, #112]	; (8002848 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80027d8:	fba2 2303 	umull	r2, r3, r2, r3
 80027dc:	0c9b      	lsrs	r3, r3, #18
 80027de:	3301      	adds	r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027e2:	e002      	b.n	80027ea <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80027ea:	4b15      	ldr	r3, [pc, #84]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027f6:	d102      	bne.n	80027fe <HAL_PWREx_ControlVoltageScaling+0xfa>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f2      	bne.n	80027e4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80027fe:	4b10      	ldr	r3, [pc, #64]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800280a:	d112      	bne.n	8002832 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e011      	b.n	8002834 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002812:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002816:	4a0a      	ldr	r2, [pc, #40]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002820:	e007      	b.n	8002832 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002822:	4b07      	ldr	r3, [pc, #28]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800282c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002830:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3714      	adds	r7, #20
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	40007000 	.word	0x40007000
 8002844:	20000000 	.word	0x20000000
 8002848:	431bde83 	.word	0x431bde83

0800284c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	4a04      	ldr	r2, [pc, #16]	; (8002868 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800285a:	6093      	str	r3, [r2, #8]
}
 800285c:	bf00      	nop
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
 8002866:	bf00      	nop
 8002868:	40007000 	.word	0x40007000

0800286c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d101      	bne.n	800287e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e2fe      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 0301 	and.w	r3, r3, #1
 8002886:	2b00      	cmp	r3, #0
 8002888:	d075      	beq.n	8002976 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800288a:	4b97      	ldr	r3, [pc, #604]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 030c 	and.w	r3, r3, #12
 8002892:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002894:	4b94      	ldr	r3, [pc, #592]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f003 0303 	and.w	r3, r3, #3
 800289c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	2b0c      	cmp	r3, #12
 80028a2:	d102      	bne.n	80028aa <HAL_RCC_OscConfig+0x3e>
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b03      	cmp	r3, #3
 80028a8:	d002      	beq.n	80028b0 <HAL_RCC_OscConfig+0x44>
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d10b      	bne.n	80028c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028b0:	4b8d      	ldr	r3, [pc, #564]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d05b      	beq.n	8002974 <HAL_RCC_OscConfig+0x108>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d157      	bne.n	8002974 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e2d9      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d0:	d106      	bne.n	80028e0 <HAL_RCC_OscConfig+0x74>
 80028d2:	4b85      	ldr	r3, [pc, #532]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a84      	ldr	r2, [pc, #528]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80028d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028dc:	6013      	str	r3, [r2, #0]
 80028de:	e01d      	b.n	800291c <HAL_RCC_OscConfig+0xb0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x98>
 80028ea:	4b7f      	ldr	r3, [pc, #508]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a7e      	ldr	r2, [pc, #504]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80028f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028f4:	6013      	str	r3, [r2, #0]
 80028f6:	4b7c      	ldr	r3, [pc, #496]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a7b      	ldr	r2, [pc, #492]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e00b      	b.n	800291c <HAL_RCC_OscConfig+0xb0>
 8002904:	4b78      	ldr	r3, [pc, #480]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a77      	ldr	r2, [pc, #476]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 800290a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800290e:	6013      	str	r3, [r2, #0]
 8002910:	4b75      	ldr	r3, [pc, #468]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a74      	ldr	r2, [pc, #464]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002916:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800291a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d013      	beq.n	800294c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002924:	f7ff fc42 	bl	80021ac <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800292c:	f7ff fc3e 	bl	80021ac <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b64      	cmp	r3, #100	; 0x64
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e29e      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800293e:	4b6a      	ldr	r3, [pc, #424]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d0f0      	beq.n	800292c <HAL_RCC_OscConfig+0xc0>
 800294a:	e014      	b.n	8002976 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7ff fc2e 	bl	80021ac <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002954:	f7ff fc2a 	bl	80021ac <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b64      	cmp	r3, #100	; 0x64
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e28a      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002966:	4b60      	ldr	r3, [pc, #384]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0xe8>
 8002972:	e000      	b.n	8002976 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002974:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0302 	and.w	r3, r3, #2
 800297e:	2b00      	cmp	r3, #0
 8002980:	d075      	beq.n	8002a6e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002982:	4b59      	ldr	r3, [pc, #356]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	f003 030c 	and.w	r3, r3, #12
 800298a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800298c:	4b56      	ldr	r3, [pc, #344]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	2b0c      	cmp	r3, #12
 800299a:	d102      	bne.n	80029a2 <HAL_RCC_OscConfig+0x136>
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d002      	beq.n	80029a8 <HAL_RCC_OscConfig+0x13c>
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d11f      	bne.n	80029e8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029a8:	4b4f      	ldr	r3, [pc, #316]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_OscConfig+0x154>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d101      	bne.n	80029c0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e25d      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c0:	4b49      	ldr	r3, [pc, #292]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	4946      	ldr	r1, [pc, #280]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80029d4:	4b45      	ldr	r3, [pc, #276]	; (8002aec <HAL_RCC_OscConfig+0x280>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fb9b 	bl	8002114 <HAL_InitTick>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d043      	beq.n	8002a6c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e249      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d023      	beq.n	8002a38 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f0:	4b3d      	ldr	r3, [pc, #244]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a3c      	ldr	r2, [pc, #240]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 80029f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7ff fbd6 	bl	80021ac <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a04:	f7ff fbd2 	bl	80021ac <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e232      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a16:	4b34      	ldr	r3, [pc, #208]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a22:	4b31      	ldr	r3, [pc, #196]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	061b      	lsls	r3, r3, #24
 8002a30:	492d      	ldr	r1, [pc, #180]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	604b      	str	r3, [r1, #4]
 8002a36:	e01a      	b.n	8002a6e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a38:	4b2b      	ldr	r3, [pc, #172]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002a3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7ff fbb2 	bl	80021ac <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a4c:	f7ff fbae 	bl	80021ac <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e20e      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x1e0>
 8002a6a:	e000      	b.n	8002a6e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a6c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d041      	beq.n	8002afe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	695b      	ldr	r3, [r3, #20]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01c      	beq.n	8002abc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a82:	4b19      	ldr	r3, [pc, #100]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002a84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a88:	4a17      	ldr	r2, [pc, #92]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a92:	f7ff fb8b 	bl	80021ac <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a9a:	f7ff fb87 	bl	80021ac <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e1e7      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aac:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002aae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0ef      	beq.n	8002a9a <HAL_RCC_OscConfig+0x22e>
 8002aba:	e020      	b.n	8002afe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002abc:	4b0a      	ldr	r3, [pc, #40]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ac2:	4a09      	ldr	r2, [pc, #36]	; (8002ae8 <HAL_RCC_OscConfig+0x27c>)
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7ff fb6e 	bl	80021ac <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ad2:	e00d      	b.n	8002af0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ad4:	f7ff fb6a 	bl	80021ac <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d906      	bls.n	8002af0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e1ca      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
 8002ae6:	bf00      	nop
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af0:	4b8c      	ldr	r3, [pc, #560]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ea      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80a6 	beq.w	8002c58 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b10:	4b84      	ldr	r3, [pc, #528]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_RCC_OscConfig+0x2b4>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <HAL_RCC_OscConfig+0x2b6>
 8002b20:	2300      	movs	r3, #0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00d      	beq.n	8002b42 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b26:	4b7f      	ldr	r3, [pc, #508]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2a:	4a7e      	ldr	r2, [pc, #504]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b30:	6593      	str	r3, [r2, #88]	; 0x58
 8002b32:	4b7c      	ldr	r3, [pc, #496]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b42:	4b79      	ldr	r3, [pc, #484]	; (8002d28 <HAL_RCC_OscConfig+0x4bc>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d118      	bne.n	8002b80 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b4e:	4b76      	ldr	r3, [pc, #472]	; (8002d28 <HAL_RCC_OscConfig+0x4bc>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a75      	ldr	r2, [pc, #468]	; (8002d28 <HAL_RCC_OscConfig+0x4bc>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b5a:	f7ff fb27 	bl	80021ac <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b60:	e008      	b.n	8002b74 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b62:	f7ff fb23 	bl	80021ac <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d901      	bls.n	8002b74 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	e183      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b74:	4b6c      	ldr	r3, [pc, #432]	; (8002d28 <HAL_RCC_OscConfig+0x4bc>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d0f0      	beq.n	8002b62 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d108      	bne.n	8002b9a <HAL_RCC_OscConfig+0x32e>
 8002b88:	4b66      	ldr	r3, [pc, #408]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b8e:	4a65      	ldr	r2, [pc, #404]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b98:	e024      	b.n	8002be4 <HAL_RCC_OscConfig+0x378>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b05      	cmp	r3, #5
 8002ba0:	d110      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x358>
 8002ba2:	4b60      	ldr	r3, [pc, #384]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	4a5e      	ldr	r2, [pc, #376]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002baa:	f043 0304 	orr.w	r3, r3, #4
 8002bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bb2:	4b5c      	ldr	r3, [pc, #368]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb8:	4a5a      	ldr	r2, [pc, #360]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002bba:	f043 0301 	orr.w	r3, r3, #1
 8002bbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bc2:	e00f      	b.n	8002be4 <HAL_RCC_OscConfig+0x378>
 8002bc4:	4b57      	ldr	r3, [pc, #348]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bca:	4a56      	ldr	r2, [pc, #344]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bd4:	4b53      	ldr	r3, [pc, #332]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bda:	4a52      	ldr	r2, [pc, #328]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002bdc:	f023 0304 	bic.w	r3, r3, #4
 8002be0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d016      	beq.n	8002c1a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bec:	f7ff fade 	bl	80021ac <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf2:	e00a      	b.n	8002c0a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bf4:	f7ff fada 	bl	80021ac <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e138      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c0a:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ed      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x388>
 8002c18:	e015      	b.n	8002c46 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7ff fac7 	bl	80021ac <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c20:	e00a      	b.n	8002c38 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c22:	f7ff fac3 	bl	80021ac <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d901      	bls.n	8002c38 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002c34:	2303      	movs	r3, #3
 8002c36:	e121      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c38:	4b3a      	ldr	r3, [pc, #232]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1ed      	bne.n	8002c22 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c46:	7ffb      	ldrb	r3, [r7, #31]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4c:	4b35      	ldr	r3, [pc, #212]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	4a34      	ldr	r2, [pc, #208]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d03c      	beq.n	8002cde <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01c      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c6c:	4b2d      	ldr	r3, [pc, #180]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c72:	4a2c      	ldr	r2, [pc, #176]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7ff fa96 	bl	80021ac <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c84:	f7ff fa92 	bl	80021ac <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e0f2      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c96:	4b23      	ldr	r3, [pc, #140]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <HAL_RCC_OscConfig+0x418>
 8002ca4:	e01b      	b.n	8002cde <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ca6:	4b1f      	ldr	r3, [pc, #124]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cac:	4a1d      	ldr	r2, [pc, #116]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7ff fa79 	bl	80021ac <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cbe:	f7ff fa75 	bl	80021ac <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e0d5      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cd0:	4b14      	ldr	r3, [pc, #80]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ef      	bne.n	8002cbe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69db      	ldr	r3, [r3, #28]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80c9 	beq.w	8002e7a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f003 030c 	and.w	r3, r3, #12
 8002cf0:	2b0c      	cmp	r3, #12
 8002cf2:	f000 8083 	beq.w	8002dfc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d15e      	bne.n	8002dbc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a08      	ldr	r2, [pc, #32]	; (8002d24 <HAL_RCC_OscConfig+0x4b8>)
 8002d04:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0a:	f7ff fa4f 	bl	80021ac <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d10:	e00c      	b.n	8002d2c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d12:	f7ff fa4b 	bl	80021ac <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d905      	bls.n	8002d2c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e0ab      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d2c:	4b55      	ldr	r3, [pc, #340]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d1ec      	bne.n	8002d12 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d38:	4b52      	ldr	r3, [pc, #328]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002d3a:	68da      	ldr	r2, [r3, #12]
 8002d3c:	4b52      	ldr	r3, [pc, #328]	; (8002e88 <HAL_RCC_OscConfig+0x61c>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6a11      	ldr	r1, [r2, #32]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d48:	3a01      	subs	r2, #1
 8002d4a:	0112      	lsls	r2, r2, #4
 8002d4c:	4311      	orrs	r1, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002d52:	0212      	lsls	r2, r2, #8
 8002d54:	4311      	orrs	r1, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d5a:	0852      	lsrs	r2, r2, #1
 8002d5c:	3a01      	subs	r2, #1
 8002d5e:	0552      	lsls	r2, r2, #21
 8002d60:	4311      	orrs	r1, r2
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d66:	0852      	lsrs	r2, r2, #1
 8002d68:	3a01      	subs	r2, #1
 8002d6a:	0652      	lsls	r2, r2, #25
 8002d6c:	4311      	orrs	r1, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d72:	06d2      	lsls	r2, r2, #27
 8002d74:	430a      	orrs	r2, r1
 8002d76:	4943      	ldr	r1, [pc, #268]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d7c:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a40      	ldr	r2, [pc, #256]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002d82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d86:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d88:	4b3e      	ldr	r3, [pc, #248]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a3d      	ldr	r2, [pc, #244]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d92:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d94:	f7ff fa0a 	bl	80021ac <HAL_GetTick>
 8002d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d9a:	e008      	b.n	8002dae <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d9c:	f7ff fa06 	bl	80021ac <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d901      	bls.n	8002dae <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	e066      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dae:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d0f0      	beq.n	8002d9c <HAL_RCC_OscConfig+0x530>
 8002dba:	e05e      	b.n	8002e7a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbc:	4b31      	ldr	r3, [pc, #196]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a30      	ldr	r2, [pc, #192]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc8:	f7ff f9f0 	bl	80021ac <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7ff f9ec 	bl	80021ac <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e04c      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002de2:	4b28      	ldr	r3, [pc, #160]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d1f0      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002dee:	4b25      	ldr	r3, [pc, #148]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002df0:	68da      	ldr	r2, [r3, #12]
 8002df2:	4924      	ldr	r1, [pc, #144]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002df4:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_RCC_OscConfig+0x620>)
 8002df6:	4013      	ands	r3, r2
 8002df8:	60cb      	str	r3, [r1, #12]
 8002dfa:	e03e      	b.n	8002e7a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e039      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002e08:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <HAL_RCC_OscConfig+0x618>)
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f003 0203 	and.w	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a1b      	ldr	r3, [r3, #32]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d12c      	bne.n	8002e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	3b01      	subs	r3, #1
 8002e28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d123      	bne.n	8002e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e38:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d11b      	bne.n	8002e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d113      	bne.n	8002e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e58:	085b      	lsrs	r3, r3, #1
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d109      	bne.n	8002e76 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e6c:	085b      	lsrs	r3, r3, #1
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d001      	beq.n	8002e7a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e000      	b.n	8002e7c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3720      	adds	r7, #32
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	40021000 	.word	0x40021000
 8002e88:	019f800c 	.word	0x019f800c
 8002e8c:	feeefffc 	.word	0xfeeefffc

08002e90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e11e      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea8:	4b91      	ldr	r3, [pc, #580]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d910      	bls.n	8002ed8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb6:	4b8e      	ldr	r3, [pc, #568]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f023 020f 	bic.w	r2, r3, #15
 8002ebe:	498c      	ldr	r1, [pc, #560]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec6:	4b8a      	ldr	r3, [pc, #552]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	d001      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e106      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0301 	and.w	r3, r3, #1
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d073      	beq.n	8002fcc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d129      	bne.n	8002f40 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eec:	4b81      	ldr	r3, [pc, #516]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0f4      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002efc:	f000 f966 	bl	80031cc <RCC_GetSysClockFreqFromPLLSource>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	4a7c      	ldr	r2, [pc, #496]	; (80030f8 <HAL_RCC_ClockConfig+0x268>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d93f      	bls.n	8002f8a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f0a:	4b7a      	ldr	r3, [pc, #488]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d033      	beq.n	8002f8a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d12f      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f2a:	4b72      	ldr	r3, [pc, #456]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f32:	4a70      	ldr	r2, [pc, #448]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f38:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002f3a:	2380      	movs	r3, #128	; 0x80
 8002f3c:	617b      	str	r3, [r7, #20]
 8002f3e:	e024      	b.n	8002f8a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f48:	4b6a      	ldr	r3, [pc, #424]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0c6      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f58:	4b66      	ldr	r3, [pc, #408]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0be      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002f68:	f000 f8ce 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 8002f6c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4a61      	ldr	r2, [pc, #388]	; (80030f8 <HAL_RCC_ClockConfig+0x268>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d909      	bls.n	8002f8a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002f76:	4b5f      	ldr	r3, [pc, #380]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f7e:	4a5d      	ldr	r2, [pc, #372]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f84:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002f86:	2380      	movs	r3, #128	; 0x80
 8002f88:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f8a:	4b5a      	ldr	r3, [pc, #360]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f023 0203 	bic.w	r2, r3, #3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	4957      	ldr	r1, [pc, #348]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9c:	f7ff f906 	bl	80021ac <HAL_GetTick>
 8002fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa2:	e00a      	b.n	8002fba <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa4:	f7ff f902 	bl	80021ac <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d901      	bls.n	8002fba <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	e095      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fba:	4b4e      	ldr	r3, [pc, #312]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 020c 	and.w	r2, r3, #12
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d1eb      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0302 	and.w	r3, r3, #2
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d023      	beq.n	8003020 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d005      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fe4:	4b43      	ldr	r3, [pc, #268]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	4a42      	ldr	r2, [pc, #264]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002fea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002fee:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0308 	and.w	r3, r3, #8
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d007      	beq.n	800300c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ffc:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003004:	4a3b      	ldr	r2, [pc, #236]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8003006:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800300a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800300c:	4b39      	ldr	r3, [pc, #228]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	4936      	ldr	r1, [pc, #216]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
 800301e:	e008      	b.n	8003032 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2b80      	cmp	r3, #128	; 0x80
 8003024:	d105      	bne.n	8003032 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003026:	4b33      	ldr	r3, [pc, #204]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	4a32      	ldr	r2, [pc, #200]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 800302c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003030:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003032:	4b2f      	ldr	r3, [pc, #188]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d21d      	bcs.n	800307c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003040:	4b2b      	ldr	r3, [pc, #172]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f023 020f 	bic.w	r2, r3, #15
 8003048:	4929      	ldr	r1, [pc, #164]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003050:	f7ff f8ac 	bl	80021ac <HAL_GetTick>
 8003054:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	e00a      	b.n	800306e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003058:	f7ff f8a8 	bl	80021ac <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	f241 3288 	movw	r2, #5000	; 0x1388
 8003066:	4293      	cmp	r3, r2
 8003068:	d901      	bls.n	800306e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e03b      	b.n	80030e6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b20      	ldr	r3, [pc, #128]	; (80030f0 <HAL_RCC_ClockConfig+0x260>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d1ed      	bne.n	8003058 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	d008      	beq.n	800309a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003088:	4b1a      	ldr	r3, [pc, #104]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4917      	ldr	r1, [pc, #92]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 8003096:	4313      	orrs	r3, r2
 8003098:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030a6:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	00db      	lsls	r3, r3, #3
 80030b4:	490f      	ldr	r1, [pc, #60]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030ba:	f000 f825 	bl	8003108 <HAL_RCC_GetSysClockFreq>
 80030be:	4602      	mov	r2, r0
 80030c0:	4b0c      	ldr	r3, [pc, #48]	; (80030f4 <HAL_RCC_ClockConfig+0x264>)
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	091b      	lsrs	r3, r3, #4
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	490c      	ldr	r1, [pc, #48]	; (80030fc <HAL_RCC_ClockConfig+0x26c>)
 80030cc:	5ccb      	ldrb	r3, [r1, r3]
 80030ce:	f003 031f 	and.w	r3, r3, #31
 80030d2:	fa22 f303 	lsr.w	r3, r2, r3
 80030d6:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <HAL_RCC_ClockConfig+0x270>)
 80030d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_RCC_ClockConfig+0x274>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff f818 	bl	8002114 <HAL_InitTick>
 80030e4:	4603      	mov	r3, r0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	40022000 	.word	0x40022000
 80030f4:	40021000 	.word	0x40021000
 80030f8:	04c4b400 	.word	0x04c4b400
 80030fc:	0800474c 	.word	0x0800474c
 8003100:	20000000 	.word	0x20000000
 8003104:	20000004 	.word	0x20000004

08003108 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003108:	b480      	push	{r7}
 800310a:	b087      	sub	sp, #28
 800310c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800310e:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	f003 030c 	and.w	r3, r3, #12
 8003116:	2b04      	cmp	r3, #4
 8003118:	d102      	bne.n	8003120 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800311a:	4b2a      	ldr	r3, [pc, #168]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	e047      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003120:	4b27      	ldr	r3, [pc, #156]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003122:	689b      	ldr	r3, [r3, #8]
 8003124:	f003 030c 	and.w	r3, r3, #12
 8003128:	2b08      	cmp	r3, #8
 800312a:	d102      	bne.n	8003132 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800312c:	4b26      	ldr	r3, [pc, #152]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800312e:	613b      	str	r3, [r7, #16]
 8003130:	e03e      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003132:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d136      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800313e:	4b20      	ldr	r3, [pc, #128]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	f003 0303 	and.w	r3, r3, #3
 8003146:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	091b      	lsrs	r3, r3, #4
 800314e:	f003 030f 	and.w	r3, r3, #15
 8003152:	3301      	adds	r3, #1
 8003154:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2b03      	cmp	r3, #3
 800315a:	d10c      	bne.n	8003176 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800315c:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	fbb2 f3f3 	udiv	r3, r2, r3
 8003164:	4a16      	ldr	r2, [pc, #88]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003166:	68d2      	ldr	r2, [r2, #12]
 8003168:	0a12      	lsrs	r2, r2, #8
 800316a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	617b      	str	r3, [r7, #20]
      break;
 8003174:	e00c      	b.n	8003190 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003176:	4a13      	ldr	r2, [pc, #76]	; (80031c4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	fbb2 f3f3 	udiv	r3, r2, r3
 800317e:	4a10      	ldr	r2, [pc, #64]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	0a12      	lsrs	r2, r2, #8
 8003184:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003188:	fb02 f303 	mul.w	r3, r2, r3
 800318c:	617b      	str	r3, [r7, #20]
      break;
 800318e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003192:	68db      	ldr	r3, [r3, #12]
 8003194:	0e5b      	lsrs	r3, r3, #25
 8003196:	f003 0303 	and.w	r3, r3, #3
 800319a:	3301      	adds	r3, #1
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80031a0:	697a      	ldr	r2, [r7, #20]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	e001      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80031b0:	693b      	ldr	r3, [r7, #16]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	371c      	adds	r7, #28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	00f42400 	.word	0x00f42400
 80031c8:	007a1200 	.word	0x007a1200

080031cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b087      	sub	sp, #28
 80031d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031d2:	4b1e      	ldr	r3, [pc, #120]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031d4:	68db      	ldr	r3, [r3, #12]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031dc:	4b1b      	ldr	r3, [pc, #108]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 030f 	and.w	r3, r3, #15
 80031e6:	3301      	adds	r3, #1
 80031e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	2b03      	cmp	r3, #3
 80031ee:	d10c      	bne.n	800320a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031f0:	4a17      	ldr	r2, [pc, #92]	; (8003250 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	4a14      	ldr	r2, [pc, #80]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031fa:	68d2      	ldr	r2, [r2, #12]
 80031fc:	0a12      	lsrs	r2, r2, #8
 80031fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003202:	fb02 f303 	mul.w	r3, r2, r3
 8003206:	617b      	str	r3, [r7, #20]
    break;
 8003208:	e00c      	b.n	8003224 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800320a:	4a12      	ldr	r2, [pc, #72]	; (8003254 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003212:	4a0e      	ldr	r2, [pc, #56]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003214:	68d2      	ldr	r2, [r2, #12]
 8003216:	0a12      	lsrs	r2, r2, #8
 8003218:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800321c:	fb02 f303 	mul.w	r3, r2, r3
 8003220:	617b      	str	r3, [r7, #20]
    break;
 8003222:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	0e5b      	lsrs	r3, r3, #25
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	3301      	adds	r3, #1
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	fbb2 f3f3 	udiv	r3, r2, r3
 800323c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800323e:	687b      	ldr	r3, [r7, #4]
}
 8003240:	4618      	mov	r0, r3
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	40021000 	.word	0x40021000
 8003250:	007a1200 	.word	0x007a1200
 8003254:	00f42400 	.word	0x00f42400

08003258 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e049      	b.n	80032fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b00      	cmp	r3, #0
 8003274:	d106      	bne.n	8003284 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe fdfe 	bl	8001e80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	4619      	mov	r1, r3
 8003296:	4610      	mov	r0, r2
 8003298:	f000 fc3a 	bl	8003b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e049      	b.n	80033ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d106      	bne.n	8003332 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f841 	bl	80033b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2202      	movs	r2, #2
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	3304      	adds	r3, #4
 8003342:	4619      	mov	r1, r3
 8003344:	4610      	mov	r0, r2
 8003346:	f000 fbe3 	bl	8003b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2201      	movs	r2, #1
 800335e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2201      	movs	r2, #1
 8003366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2201      	movs	r2, #1
 8003376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2201      	movs	r2, #1
 800337e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2201      	movs	r2, #1
 800338e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b083      	sub	sp, #12
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033bc:	bf00      	nop
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d109      	bne.n	80033ec <HAL_TIM_PWM_Start+0x24>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	bf14      	ite	ne
 80033e4:	2301      	movne	r3, #1
 80033e6:	2300      	moveq	r3, #0
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	e03c      	b.n	8003466 <HAL_TIM_PWM_Start+0x9e>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	2b04      	cmp	r3, #4
 80033f0:	d109      	bne.n	8003406 <HAL_TIM_PWM_Start+0x3e>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	bf14      	ite	ne
 80033fe:	2301      	movne	r3, #1
 8003400:	2300      	moveq	r3, #0
 8003402:	b2db      	uxtb	r3, r3
 8003404:	e02f      	b.n	8003466 <HAL_TIM_PWM_Start+0x9e>
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d109      	bne.n	8003420 <HAL_TIM_PWM_Start+0x58>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	bf14      	ite	ne
 8003418:	2301      	movne	r3, #1
 800341a:	2300      	moveq	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e022      	b.n	8003466 <HAL_TIM_PWM_Start+0x9e>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d109      	bne.n	800343a <HAL_TIM_PWM_Start+0x72>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b01      	cmp	r3, #1
 8003430:	bf14      	ite	ne
 8003432:	2301      	movne	r3, #1
 8003434:	2300      	moveq	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	e015      	b.n	8003466 <HAL_TIM_PWM_Start+0x9e>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	2b10      	cmp	r3, #16
 800343e:	d109      	bne.n	8003454 <HAL_TIM_PWM_Start+0x8c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b01      	cmp	r3, #1
 800344a:	bf14      	ite	ne
 800344c:	2301      	movne	r3, #1
 800344e:	2300      	moveq	r3, #0
 8003450:	b2db      	uxtb	r3, r3
 8003452:	e008      	b.n	8003466 <HAL_TIM_PWM_Start+0x9e>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800345a:	b2db      	uxtb	r3, r3
 800345c:	2b01      	cmp	r3, #1
 800345e:	bf14      	ite	ne
 8003460:	2301      	movne	r3, #1
 8003462:	2300      	moveq	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e097      	b.n	800359e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d104      	bne.n	800347e <HAL_TIM_PWM_Start+0xb6>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800347c:	e023      	b.n	80034c6 <HAL_TIM_PWM_Start+0xfe>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b04      	cmp	r3, #4
 8003482:	d104      	bne.n	800348e <HAL_TIM_PWM_Start+0xc6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800348c:	e01b      	b.n	80034c6 <HAL_TIM_PWM_Start+0xfe>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b08      	cmp	r3, #8
 8003492:	d104      	bne.n	800349e <HAL_TIM_PWM_Start+0xd6>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2202      	movs	r2, #2
 8003498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800349c:	e013      	b.n	80034c6 <HAL_TIM_PWM_Start+0xfe>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d104      	bne.n	80034ae <HAL_TIM_PWM_Start+0xe6>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034ac:	e00b      	b.n	80034c6 <HAL_TIM_PWM_Start+0xfe>
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2b10      	cmp	r3, #16
 80034b2:	d104      	bne.n	80034be <HAL_TIM_PWM_Start+0xf6>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034bc:	e003      	b.n	80034c6 <HAL_TIM_PWM_Start+0xfe>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2201      	movs	r2, #1
 80034cc:	6839      	ldr	r1, [r7, #0]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 ff4c 	bl	800436c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a33      	ldr	r2, [pc, #204]	; (80035a8 <HAL_TIM_PWM_Start+0x1e0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_TIM_PWM_Start+0x13e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a32      	ldr	r2, [pc, #200]	; (80035ac <HAL_TIM_PWM_Start+0x1e4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d00e      	beq.n	8003506 <HAL_TIM_PWM_Start+0x13e>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a30      	ldr	r2, [pc, #192]	; (80035b0 <HAL_TIM_PWM_Start+0x1e8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d009      	beq.n	8003506 <HAL_TIM_PWM_Start+0x13e>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a2f      	ldr	r2, [pc, #188]	; (80035b4 <HAL_TIM_PWM_Start+0x1ec>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d004      	beq.n	8003506 <HAL_TIM_PWM_Start+0x13e>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a2d      	ldr	r2, [pc, #180]	; (80035b8 <HAL_TIM_PWM_Start+0x1f0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d101      	bne.n	800350a <HAL_TIM_PWM_Start+0x142>
 8003506:	2301      	movs	r3, #1
 8003508:	e000      	b.n	800350c <HAL_TIM_PWM_Start+0x144>
 800350a:	2300      	movs	r3, #0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d007      	beq.n	8003520 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800351e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a20      	ldr	r2, [pc, #128]	; (80035a8 <HAL_TIM_PWM_Start+0x1e0>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d018      	beq.n	800355c <HAL_TIM_PWM_Start+0x194>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003532:	d013      	beq.n	800355c <HAL_TIM_PWM_Start+0x194>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a20      	ldr	r2, [pc, #128]	; (80035bc <HAL_TIM_PWM_Start+0x1f4>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00e      	beq.n	800355c <HAL_TIM_PWM_Start+0x194>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a1f      	ldr	r2, [pc, #124]	; (80035c0 <HAL_TIM_PWM_Start+0x1f8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d009      	beq.n	800355c <HAL_TIM_PWM_Start+0x194>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a17      	ldr	r2, [pc, #92]	; (80035ac <HAL_TIM_PWM_Start+0x1e4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d004      	beq.n	800355c <HAL_TIM_PWM_Start+0x194>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a16      	ldr	r2, [pc, #88]	; (80035b0 <HAL_TIM_PWM_Start+0x1e8>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d115      	bne.n	8003588 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <HAL_TIM_PWM_Start+0x1fc>)
 8003564:	4013      	ands	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b06      	cmp	r3, #6
 800356c:	d015      	beq.n	800359a <HAL_TIM_PWM_Start+0x1d2>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003574:	d011      	beq.n	800359a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003586:	e008      	b.n	800359a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	e000      	b.n	800359c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3710      	adds	r7, #16
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40012c00 	.word	0x40012c00
 80035ac:	40013400 	.word	0x40013400
 80035b0:	40014000 	.word	0x40014000
 80035b4:	40014400 	.word	0x40014400
 80035b8:	40014800 	.word	0x40014800
 80035bc:	40000400 	.word	0x40000400
 80035c0:	40000800 	.word	0x40000800
 80035c4:	00010007 	.word	0x00010007

080035c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2200      	movs	r2, #0
 80035d8:	6839      	ldr	r1, [r7, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 fec6 	bl	800436c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a3e      	ldr	r2, [pc, #248]	; (80036e0 <HAL_TIM_PWM_Stop+0x118>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d013      	beq.n	8003612 <HAL_TIM_PWM_Stop+0x4a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a3d      	ldr	r2, [pc, #244]	; (80036e4 <HAL_TIM_PWM_Stop+0x11c>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d00e      	beq.n	8003612 <HAL_TIM_PWM_Stop+0x4a>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a3b      	ldr	r2, [pc, #236]	; (80036e8 <HAL_TIM_PWM_Stop+0x120>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d009      	beq.n	8003612 <HAL_TIM_PWM_Stop+0x4a>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a3a      	ldr	r2, [pc, #232]	; (80036ec <HAL_TIM_PWM_Stop+0x124>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d004      	beq.n	8003612 <HAL_TIM_PWM_Stop+0x4a>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a38      	ldr	r2, [pc, #224]	; (80036f0 <HAL_TIM_PWM_Stop+0x128>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <HAL_TIM_PWM_Stop+0x4e>
 8003612:	2301      	movs	r3, #1
 8003614:	e000      	b.n	8003618 <HAL_TIM_PWM_Stop+0x50>
 8003616:	2300      	movs	r3, #0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d017      	beq.n	800364c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6a1a      	ldr	r2, [r3, #32]
 8003622:	f241 1311 	movw	r3, #4369	; 0x1111
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	d10f      	bne.n	800364c <HAL_TIM_PWM_Stop+0x84>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	6a1a      	ldr	r2, [r3, #32]
 8003632:	f244 4344 	movw	r3, #17476	; 0x4444
 8003636:	4013      	ands	r3, r2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d107      	bne.n	800364c <HAL_TIM_PWM_Stop+0x84>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800364a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a1a      	ldr	r2, [r3, #32]
 8003652:	f241 1311 	movw	r3, #4369	; 0x1111
 8003656:	4013      	ands	r3, r2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10f      	bne.n	800367c <HAL_TIM_PWM_Stop+0xb4>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6a1a      	ldr	r2, [r3, #32]
 8003662:	f244 4344 	movw	r3, #17476	; 0x4444
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d107      	bne.n	800367c <HAL_TIM_PWM_Stop+0xb4>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d104      	bne.n	800368c <HAL_TIM_PWM_Stop+0xc4>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800368a:	e023      	b.n	80036d4 <HAL_TIM_PWM_Stop+0x10c>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	2b04      	cmp	r3, #4
 8003690:	d104      	bne.n	800369c <HAL_TIM_PWM_Stop+0xd4>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800369a:	e01b      	b.n	80036d4 <HAL_TIM_PWM_Stop+0x10c>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d104      	bne.n	80036ac <HAL_TIM_PWM_Stop+0xe4>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036aa:	e013      	b.n	80036d4 <HAL_TIM_PWM_Stop+0x10c>
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d104      	bne.n	80036bc <HAL_TIM_PWM_Stop+0xf4>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ba:	e00b      	b.n	80036d4 <HAL_TIM_PWM_Stop+0x10c>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	2b10      	cmp	r3, #16
 80036c0:	d104      	bne.n	80036cc <HAL_TIM_PWM_Stop+0x104>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ca:	e003      	b.n	80036d4 <HAL_TIM_PWM_Stop+0x10c>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40012c00 	.word	0x40012c00
 80036e4:	40013400 	.word	0x40013400
 80036e8:	40014000 	.word	0x40014000
 80036ec:	40014400 	.word	0x40014400
 80036f0:	40014800 	.word	0x40014800

080036f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800370e:	2302      	movs	r3, #2
 8003710:	e0ff      	b.n	8003912 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b14      	cmp	r3, #20
 800371e:	f200 80f0 	bhi.w	8003902 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003722:	a201      	add	r2, pc, #4	; (adr r2, 8003728 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	0800377d 	.word	0x0800377d
 800372c:	08003903 	.word	0x08003903
 8003730:	08003903 	.word	0x08003903
 8003734:	08003903 	.word	0x08003903
 8003738:	080037bd 	.word	0x080037bd
 800373c:	08003903 	.word	0x08003903
 8003740:	08003903 	.word	0x08003903
 8003744:	08003903 	.word	0x08003903
 8003748:	080037ff 	.word	0x080037ff
 800374c:	08003903 	.word	0x08003903
 8003750:	08003903 	.word	0x08003903
 8003754:	08003903 	.word	0x08003903
 8003758:	0800383f 	.word	0x0800383f
 800375c:	08003903 	.word	0x08003903
 8003760:	08003903 	.word	0x08003903
 8003764:	08003903 	.word	0x08003903
 8003768:	08003881 	.word	0x08003881
 800376c:	08003903 	.word	0x08003903
 8003770:	08003903 	.word	0x08003903
 8003774:	08003903 	.word	0x08003903
 8003778:	080038c1 	.word	0x080038c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	68b9      	ldr	r1, [r7, #8]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 fa60 	bl	8003c48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699a      	ldr	r2, [r3, #24]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0208 	orr.w	r2, r2, #8
 8003796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	699a      	ldr	r2, [r3, #24]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0204 	bic.w	r2, r2, #4
 80037a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6999      	ldr	r1, [r3, #24]
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	619a      	str	r2, [r3, #24]
      break;
 80037ba:	e0a5      	b.n	8003908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	4618      	mov	r0, r3
 80037c4:	f000 fad0 	bl	8003d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	699a      	ldr	r2, [r3, #24]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6999      	ldr	r1, [r3, #24]
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	021a      	lsls	r2, r3, #8
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	619a      	str	r2, [r3, #24]
      break;
 80037fc:	e084      	b.n	8003908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	68b9      	ldr	r1, [r7, #8]
 8003804:	4618      	mov	r0, r3
 8003806:	f000 fb39 	bl	8003e7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	69da      	ldr	r2, [r3, #28]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f042 0208 	orr.w	r2, r2, #8
 8003818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	69da      	ldr	r2, [r3, #28]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0204 	bic.w	r2, r2, #4
 8003828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69d9      	ldr	r1, [r3, #28]
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	61da      	str	r2, [r3, #28]
      break;
 800383c:	e064      	b.n	8003908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68b9      	ldr	r1, [r7, #8]
 8003844:	4618      	mov	r0, r3
 8003846:	f000 fba1 	bl	8003f8c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	69da      	ldr	r2, [r3, #28]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	69d9      	ldr	r1, [r3, #28]
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	021a      	lsls	r2, r3, #8
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	61da      	str	r2, [r3, #28]
      break;
 800387e:	e043      	b.n	8003908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68b9      	ldr	r1, [r7, #8]
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fc0a 	bl	80040a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f042 0208 	orr.w	r2, r2, #8
 800389a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0204 	bic.w	r2, r2, #4
 80038aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80038be:	e023      	b.n	8003908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	68b9      	ldr	r1, [r7, #8]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fc4e 	bl	8004168 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	021a      	lsls	r2, r3, #8
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	430a      	orrs	r2, r1
 80038fe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003900:	e002      	b.n	8003908 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]
      break;
 8003906:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003910:	7dfb      	ldrb	r3, [r7, #23]
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop

0800391c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b084      	sub	sp, #16
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
 8003924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003926:	2300      	movs	r3, #0
 8003928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <HAL_TIM_ConfigClockSource+0x1c>
 8003934:	2302      	movs	r3, #2
 8003936:	e0de      	b.n	8003af6 <HAL_TIM_ConfigClockSource+0x1da>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2202      	movs	r2, #2
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800395a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a63      	ldr	r2, [pc, #396]	; (8003b00 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	f000 80a9 	beq.w	8003aca <HAL_TIM_ConfigClockSource+0x1ae>
 8003978:	4a61      	ldr	r2, [pc, #388]	; (8003b00 <HAL_TIM_ConfigClockSource+0x1e4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	f200 80ae 	bhi.w	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
 8003980:	4a60      	ldr	r2, [pc, #384]	; (8003b04 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003982:	4293      	cmp	r3, r2
 8003984:	f000 80a1 	beq.w	8003aca <HAL_TIM_ConfigClockSource+0x1ae>
 8003988:	4a5e      	ldr	r2, [pc, #376]	; (8003b04 <HAL_TIM_ConfigClockSource+0x1e8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	f200 80a6 	bhi.w	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
 8003990:	4a5d      	ldr	r2, [pc, #372]	; (8003b08 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003992:	4293      	cmp	r3, r2
 8003994:	f000 8099 	beq.w	8003aca <HAL_TIM_ConfigClockSource+0x1ae>
 8003998:	4a5b      	ldr	r2, [pc, #364]	; (8003b08 <HAL_TIM_ConfigClockSource+0x1ec>)
 800399a:	4293      	cmp	r3, r2
 800399c:	f200 809e 	bhi.w	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
 80039a0:	4a5a      	ldr	r2, [pc, #360]	; (8003b0c <HAL_TIM_ConfigClockSource+0x1f0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	f000 8091 	beq.w	8003aca <HAL_TIM_ConfigClockSource+0x1ae>
 80039a8:	4a58      	ldr	r2, [pc, #352]	; (8003b0c <HAL_TIM_ConfigClockSource+0x1f0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	f200 8096 	bhi.w	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
 80039b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80039b4:	f000 8089 	beq.w	8003aca <HAL_TIM_ConfigClockSource+0x1ae>
 80039b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80039bc:	f200 808e 	bhi.w	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
 80039c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c4:	d03e      	beq.n	8003a44 <HAL_TIM_ConfigClockSource+0x128>
 80039c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039ca:	f200 8087 	bhi.w	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
 80039ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039d2:	f000 8086 	beq.w	8003ae2 <HAL_TIM_ConfigClockSource+0x1c6>
 80039d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039da:	d87f      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
 80039dc:	2b70      	cmp	r3, #112	; 0x70
 80039de:	d01a      	beq.n	8003a16 <HAL_TIM_ConfigClockSource+0xfa>
 80039e0:	2b70      	cmp	r3, #112	; 0x70
 80039e2:	d87b      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
 80039e4:	2b60      	cmp	r3, #96	; 0x60
 80039e6:	d050      	beq.n	8003a8a <HAL_TIM_ConfigClockSource+0x16e>
 80039e8:	2b60      	cmp	r3, #96	; 0x60
 80039ea:	d877      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
 80039ec:	2b50      	cmp	r3, #80	; 0x50
 80039ee:	d03c      	beq.n	8003a6a <HAL_TIM_ConfigClockSource+0x14e>
 80039f0:	2b50      	cmp	r3, #80	; 0x50
 80039f2:	d873      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
 80039f4:	2b40      	cmp	r3, #64	; 0x40
 80039f6:	d058      	beq.n	8003aaa <HAL_TIM_ConfigClockSource+0x18e>
 80039f8:	2b40      	cmp	r3, #64	; 0x40
 80039fa:	d86f      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
 80039fc:	2b30      	cmp	r3, #48	; 0x30
 80039fe:	d064      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x1ae>
 8003a00:	2b30      	cmp	r3, #48	; 0x30
 8003a02:	d86b      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d060      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x1ae>
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d867      	bhi.n	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d05c      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x1ae>
 8003a10:	2b10      	cmp	r3, #16
 8003a12:	d05a      	beq.n	8003aca <HAL_TIM_ConfigClockSource+0x1ae>
 8003a14:	e062      	b.n	8003adc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a26:	f000 fc81 	bl	800432c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	68ba      	ldr	r2, [r7, #8]
 8003a40:	609a      	str	r2, [r3, #8]
      break;
 8003a42:	e04f      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003a54:	f000 fc6a 	bl	800432c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	689a      	ldr	r2, [r3, #8]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a66:	609a      	str	r2, [r3, #8]
      break;
 8003a68:	e03c      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a76:	461a      	mov	r2, r3
 8003a78:	f000 fbdc 	bl	8004234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2150      	movs	r1, #80	; 0x50
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 fc35 	bl	80042f2 <TIM_ITRx_SetConfig>
      break;
 8003a88:	e02c      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a96:	461a      	mov	r2, r3
 8003a98:	f000 fbfb 	bl	8004292 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2160      	movs	r1, #96	; 0x60
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 fc25 	bl	80042f2 <TIM_ITRx_SetConfig>
      break;
 8003aa8:	e01c      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f000 fbbc 	bl	8004234 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	2140      	movs	r1, #64	; 0x40
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 fc15 	bl	80042f2 <TIM_ITRx_SetConfig>
      break;
 8003ac8:	e00c      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	f000 fc0c 	bl	80042f2 <TIM_ITRx_SetConfig>
      break;
 8003ada:	e003      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae0:	e000      	b.n	8003ae4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	00100070 	.word	0x00100070
 8003b04:	00100040 	.word	0x00100040
 8003b08:	00100030 	.word	0x00100030
 8003b0c:	00100020 	.word	0x00100020

08003b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b085      	sub	sp, #20
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a42      	ldr	r2, [pc, #264]	; (8003c2c <TIM_Base_SetConfig+0x11c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d00f      	beq.n	8003b48 <TIM_Base_SetConfig+0x38>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b2e:	d00b      	beq.n	8003b48 <TIM_Base_SetConfig+0x38>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a3f      	ldr	r2, [pc, #252]	; (8003c30 <TIM_Base_SetConfig+0x120>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d007      	beq.n	8003b48 <TIM_Base_SetConfig+0x38>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a3e      	ldr	r2, [pc, #248]	; (8003c34 <TIM_Base_SetConfig+0x124>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_Base_SetConfig+0x38>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a3d      	ldr	r2, [pc, #244]	; (8003c38 <TIM_Base_SetConfig+0x128>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d108      	bne.n	8003b5a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	68fa      	ldr	r2, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a33      	ldr	r2, [pc, #204]	; (8003c2c <TIM_Base_SetConfig+0x11c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01b      	beq.n	8003b9a <TIM_Base_SetConfig+0x8a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b68:	d017      	beq.n	8003b9a <TIM_Base_SetConfig+0x8a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a30      	ldr	r2, [pc, #192]	; (8003c30 <TIM_Base_SetConfig+0x120>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <TIM_Base_SetConfig+0x8a>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a2f      	ldr	r2, [pc, #188]	; (8003c34 <TIM_Base_SetConfig+0x124>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00f      	beq.n	8003b9a <TIM_Base_SetConfig+0x8a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a2e      	ldr	r2, [pc, #184]	; (8003c38 <TIM_Base_SetConfig+0x128>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d00b      	beq.n	8003b9a <TIM_Base_SetConfig+0x8a>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a2d      	ldr	r2, [pc, #180]	; (8003c3c <TIM_Base_SetConfig+0x12c>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d007      	beq.n	8003b9a <TIM_Base_SetConfig+0x8a>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a2c      	ldr	r2, [pc, #176]	; (8003c40 <TIM_Base_SetConfig+0x130>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d003      	beq.n	8003b9a <TIM_Base_SetConfig+0x8a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a2b      	ldr	r2, [pc, #172]	; (8003c44 <TIM_Base_SetConfig+0x134>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d108      	bne.n	8003bac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ba0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <TIM_Base_SetConfig+0x11c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d00f      	beq.n	8003bf8 <TIM_Base_SetConfig+0xe8>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a17      	ldr	r2, [pc, #92]	; (8003c38 <TIM_Base_SetConfig+0x128>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d00b      	beq.n	8003bf8 <TIM_Base_SetConfig+0xe8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a16      	ldr	r2, [pc, #88]	; (8003c3c <TIM_Base_SetConfig+0x12c>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d007      	beq.n	8003bf8 <TIM_Base_SetConfig+0xe8>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <TIM_Base_SetConfig+0x130>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_Base_SetConfig+0xe8>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <TIM_Base_SetConfig+0x134>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d103      	bne.n	8003c00 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d105      	bne.n	8003c1e <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691b      	ldr	r3, [r3, #16]
 8003c16:	f023 0201 	bic.w	r2, r3, #1
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	611a      	str	r2, [r3, #16]
  }
}
 8003c1e:	bf00      	nop
 8003c20:	3714      	adds	r7, #20
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	40012c00 	.word	0x40012c00
 8003c30:	40000400 	.word	0x40000400
 8003c34:	40000800 	.word	0x40000800
 8003c38:	40013400 	.word	0x40013400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40014400 	.word	0x40014400
 8003c44:	40014800 	.word	0x40014800

08003c48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
 8003c50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a1b      	ldr	r3, [r3, #32]
 8003c56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	f023 0201 	bic.w	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f023 0302 	bic.w	r3, r3, #2
 8003c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a2c      	ldr	r2, [pc, #176]	; (8003d54 <TIM_OC1_SetConfig+0x10c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d00f      	beq.n	8003cc8 <TIM_OC1_SetConfig+0x80>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a2b      	ldr	r2, [pc, #172]	; (8003d58 <TIM_OC1_SetConfig+0x110>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d00b      	beq.n	8003cc8 <TIM_OC1_SetConfig+0x80>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a2a      	ldr	r2, [pc, #168]	; (8003d5c <TIM_OC1_SetConfig+0x114>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d007      	beq.n	8003cc8 <TIM_OC1_SetConfig+0x80>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a29      	ldr	r2, [pc, #164]	; (8003d60 <TIM_OC1_SetConfig+0x118>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d003      	beq.n	8003cc8 <TIM_OC1_SetConfig+0x80>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a28      	ldr	r2, [pc, #160]	; (8003d64 <TIM_OC1_SetConfig+0x11c>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d10c      	bne.n	8003ce2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0308 	bic.w	r3, r3, #8
 8003cce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	f023 0304 	bic.w	r3, r3, #4
 8003ce0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1b      	ldr	r2, [pc, #108]	; (8003d54 <TIM_OC1_SetConfig+0x10c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00f      	beq.n	8003d0a <TIM_OC1_SetConfig+0xc2>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a1a      	ldr	r2, [pc, #104]	; (8003d58 <TIM_OC1_SetConfig+0x110>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00b      	beq.n	8003d0a <TIM_OC1_SetConfig+0xc2>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a19      	ldr	r2, [pc, #100]	; (8003d5c <TIM_OC1_SetConfig+0x114>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <TIM_OC1_SetConfig+0xc2>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a18      	ldr	r2, [pc, #96]	; (8003d60 <TIM_OC1_SetConfig+0x118>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_OC1_SetConfig+0xc2>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <TIM_OC1_SetConfig+0x11c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d111      	bne.n	8003d2e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	693a      	ldr	r2, [r7, #16]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	621a      	str	r2, [r3, #32]
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40013400 	.word	0x40013400
 8003d5c:	40014000 	.word	0x40014000
 8003d60:	40014400 	.word	0x40014400
 8003d64:	40014800 	.word	0x40014800

08003d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b087      	sub	sp, #28
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6a1b      	ldr	r3, [r3, #32]
 8003d76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a1b      	ldr	r3, [r3, #32]
 8003d7c:	f023 0210 	bic.w	r2, r3, #16
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f023 0320 	bic.w	r3, r3, #32
 8003db6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a28      	ldr	r2, [pc, #160]	; (8003e68 <TIM_OC2_SetConfig+0x100>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_OC2_SetConfig+0x6c>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <TIM_OC2_SetConfig+0x104>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d10d      	bne.n	8003df0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003dda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003dee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	4a1d      	ldr	r2, [pc, #116]	; (8003e68 <TIM_OC2_SetConfig+0x100>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d00f      	beq.n	8003e18 <TIM_OC2_SetConfig+0xb0>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	4a1c      	ldr	r2, [pc, #112]	; (8003e6c <TIM_OC2_SetConfig+0x104>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d00b      	beq.n	8003e18 <TIM_OC2_SetConfig+0xb0>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a1b      	ldr	r2, [pc, #108]	; (8003e70 <TIM_OC2_SetConfig+0x108>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d007      	beq.n	8003e18 <TIM_OC2_SetConfig+0xb0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <TIM_OC2_SetConfig+0x10c>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_OC2_SetConfig+0xb0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a19      	ldr	r2, [pc, #100]	; (8003e78 <TIM_OC2_SetConfig+0x110>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d113      	bne.n	8003e40 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	695b      	ldr	r3, [r3, #20]
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	4313      	orrs	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	697a      	ldr	r2, [r7, #20]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40013400 	.word	0x40013400
 8003e70:	40014000 	.word	0x40014000
 8003e74:	40014400 	.word	0x40014400
 8003e78:	40014800 	.word	0x40014800

08003e7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b087      	sub	sp, #28
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
 8003e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a1b      	ldr	r3, [r3, #32]
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	69db      	ldr	r3, [r3, #28]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0303 	bic.w	r3, r3, #3
 8003eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	021b      	lsls	r3, r3, #8
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a27      	ldr	r2, [pc, #156]	; (8003f78 <TIM_OC3_SetConfig+0xfc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <TIM_OC3_SetConfig+0x6a>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a26      	ldr	r2, [pc, #152]	; (8003f7c <TIM_OC3_SetConfig+0x100>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d10d      	bne.n	8003f02 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	697a      	ldr	r2, [r7, #20]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a1c      	ldr	r2, [pc, #112]	; (8003f78 <TIM_OC3_SetConfig+0xfc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d00f      	beq.n	8003f2a <TIM_OC3_SetConfig+0xae>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <TIM_OC3_SetConfig+0x100>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00b      	beq.n	8003f2a <TIM_OC3_SetConfig+0xae>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <TIM_OC3_SetConfig+0x104>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <TIM_OC3_SetConfig+0xae>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a19      	ldr	r2, [pc, #100]	; (8003f84 <TIM_OC3_SetConfig+0x108>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d003      	beq.n	8003f2a <TIM_OC3_SetConfig+0xae>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <TIM_OC3_SetConfig+0x10c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d113      	bne.n	8003f52 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	695b      	ldr	r3, [r3, #20]
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	693a      	ldr	r2, [r7, #16]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68fa      	ldr	r2, [r7, #12]
 8003f5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	621a      	str	r2, [r3, #32]
}
 8003f6c:	bf00      	nop
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	40013400 	.word	0x40013400
 8003f80:	40014000 	.word	0x40014000
 8003f84:	40014400 	.word	0x40014400
 8003f88:	40014800 	.word	0x40014800

08003f8c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	021b      	lsls	r3, r3, #8
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	031b      	lsls	r3, r3, #12
 8003fe2:	697a      	ldr	r2, [r7, #20]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a28      	ldr	r2, [pc, #160]	; (800408c <TIM_OC4_SetConfig+0x100>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d003      	beq.n	8003ff8 <TIM_OC4_SetConfig+0x6c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a27      	ldr	r2, [pc, #156]	; (8004090 <TIM_OC4_SetConfig+0x104>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d10d      	bne.n	8004014 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	031b      	lsls	r3, r3, #12
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	4313      	orrs	r3, r2
 800400a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004012:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a1d      	ldr	r2, [pc, #116]	; (800408c <TIM_OC4_SetConfig+0x100>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00f      	beq.n	800403c <TIM_OC4_SetConfig+0xb0>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a1c      	ldr	r2, [pc, #112]	; (8004090 <TIM_OC4_SetConfig+0x104>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d00b      	beq.n	800403c <TIM_OC4_SetConfig+0xb0>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a1b      	ldr	r2, [pc, #108]	; (8004094 <TIM_OC4_SetConfig+0x108>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d007      	beq.n	800403c <TIM_OC4_SetConfig+0xb0>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a1a      	ldr	r2, [pc, #104]	; (8004098 <TIM_OC4_SetConfig+0x10c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d003      	beq.n	800403c <TIM_OC4_SetConfig+0xb0>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a19      	ldr	r2, [pc, #100]	; (800409c <TIM_OC4_SetConfig+0x110>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d113      	bne.n	8004064 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004042:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800404a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	019b      	lsls	r3, r3, #6
 8004052:	693a      	ldr	r2, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	019b      	lsls	r3, r3, #6
 800405e:	693a      	ldr	r2, [r7, #16]
 8004060:	4313      	orrs	r3, r2
 8004062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	697a      	ldr	r2, [r7, #20]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40013400 	.word	0x40013400
 8004094:	40014000 	.word	0x40014000
 8004098:	40014400 	.word	0x40014400
 800409c:	40014800 	.word	0x40014800

080040a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	4313      	orrs	r3, r2
 80040dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	041b      	lsls	r3, r3, #16
 80040ec:	693a      	ldr	r2, [r7, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a17      	ldr	r2, [pc, #92]	; (8004154 <TIM_OC5_SetConfig+0xb4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00f      	beq.n	800411a <TIM_OC5_SetConfig+0x7a>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a16      	ldr	r2, [pc, #88]	; (8004158 <TIM_OC5_SetConfig+0xb8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00b      	beq.n	800411a <TIM_OC5_SetConfig+0x7a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a15      	ldr	r2, [pc, #84]	; (800415c <TIM_OC5_SetConfig+0xbc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d007      	beq.n	800411a <TIM_OC5_SetConfig+0x7a>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a14      	ldr	r2, [pc, #80]	; (8004160 <TIM_OC5_SetConfig+0xc0>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d003      	beq.n	800411a <TIM_OC5_SetConfig+0x7a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	4a13      	ldr	r2, [pc, #76]	; (8004164 <TIM_OC5_SetConfig+0xc4>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d109      	bne.n	800412e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004120:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	021b      	lsls	r3, r3, #8
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	4313      	orrs	r3, r2
 800412c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685a      	ldr	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	621a      	str	r2, [r3, #32]
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr
 8004154:	40012c00 	.word	0x40012c00
 8004158:	40013400 	.word	0x40013400
 800415c:	40014000 	.word	0x40014000
 8004160:	40014400 	.word	0x40014400
 8004164:	40014800 	.word	0x40014800

08004168 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800419a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	021b      	lsls	r3, r3, #8
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	051b      	lsls	r3, r3, #20
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a18      	ldr	r2, [pc, #96]	; (8004220 <TIM_OC6_SetConfig+0xb8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00f      	beq.n	80041e4 <TIM_OC6_SetConfig+0x7c>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a17      	ldr	r2, [pc, #92]	; (8004224 <TIM_OC6_SetConfig+0xbc>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00b      	beq.n	80041e4 <TIM_OC6_SetConfig+0x7c>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a16      	ldr	r2, [pc, #88]	; (8004228 <TIM_OC6_SetConfig+0xc0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d007      	beq.n	80041e4 <TIM_OC6_SetConfig+0x7c>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a15      	ldr	r2, [pc, #84]	; (800422c <TIM_OC6_SetConfig+0xc4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d003      	beq.n	80041e4 <TIM_OC6_SetConfig+0x7c>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a14      	ldr	r2, [pc, #80]	; (8004230 <TIM_OC6_SetConfig+0xc8>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d109      	bne.n	80041f8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041ea:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	029b      	lsls	r3, r3, #10
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	697a      	ldr	r2, [r7, #20]
 80041fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	621a      	str	r2, [r3, #32]
}
 8004212:	bf00      	nop
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40012c00 	.word	0x40012c00
 8004224:	40013400 	.word	0x40013400
 8004228:	40014000 	.word	0x40014000
 800422c:	40014400 	.word	0x40014400
 8004230:	40014800 	.word	0x40014800

08004234 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f023 0201 	bic.w	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800425e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	011b      	lsls	r3, r3, #4
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	4313      	orrs	r3, r2
 8004268:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f023 030a 	bic.w	r3, r3, #10
 8004270:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004272:	697a      	ldr	r2, [r7, #20]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	4313      	orrs	r3, r2
 8004278:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004292:	b480      	push	{r7}
 8004294:	b087      	sub	sp, #28
 8004296:	af00      	add	r7, sp, #0
 8004298:	60f8      	str	r0, [r7, #12]
 800429a:	60b9      	str	r1, [r7, #8]
 800429c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1b      	ldr	r3, [r3, #32]
 80042a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	f023 0210 	bic.w	r2, r3, #16
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80042bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	031b      	lsls	r3, r3, #12
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80042ce:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	011b      	lsls	r3, r3, #4
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	621a      	str	r2, [r3, #32]
}
 80042e6:	bf00      	nop
 80042e8:	371c      	adds	r7, #28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b085      	sub	sp, #20
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
 80042fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	f043 0307 	orr.w	r3, r3, #7
 8004318:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	609a      	str	r2, [r3, #8]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004346:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	021a      	lsls	r2, r3, #8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	431a      	orrs	r2, r3
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4313      	orrs	r3, r2
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	697a      	ldr	r2, [r7, #20]
 800435e:	609a      	str	r2, [r3, #8]
}
 8004360:	bf00      	nop
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800436c:	b480      	push	{r7}
 800436e:	b087      	sub	sp, #28
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f003 031f 	and.w	r3, r3, #31
 800437e:	2201      	movs	r2, #1
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a1a      	ldr	r2, [r3, #32]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	43db      	mvns	r3, r3
 800438e:	401a      	ands	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6a1a      	ldr	r2, [r3, #32]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	f003 031f 	and.w	r3, r3, #31
 800439e:	6879      	ldr	r1, [r7, #4]
 80043a0:	fa01 f303 	lsl.w	r3, r1, r3
 80043a4:	431a      	orrs	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e065      	b.n	800449c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2c      	ldr	r2, [pc, #176]	; (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a2b      	ldr	r2, [pc, #172]	; (80044ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d108      	bne.n	8004416 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800440a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800441c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004420:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	4313      	orrs	r3, r2
 800442a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68fa      	ldr	r2, [r7, #12]
 8004432:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a1b      	ldr	r2, [pc, #108]	; (80044a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d018      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004446:	d013      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a18      	ldr	r2, [pc, #96]	; (80044b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00e      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a17      	ldr	r2, [pc, #92]	; (80044b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d009      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a12      	ldr	r2, [pc, #72]	; (80044ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d004      	beq.n	8004470 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a13      	ldr	r2, [pc, #76]	; (80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d10c      	bne.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004476:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	4313      	orrs	r3, r2
 8004480:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2201      	movs	r2, #1
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800449a:	2300      	movs	r3, #0
}
 800449c:	4618      	mov	r0, r3
 800449e:	3714      	adds	r7, #20
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40013400 	.word	0x40013400
 80044b0:	40000400 	.word	0x40000400
 80044b4:	40000800 	.word	0x40000800
 80044b8:	40014000 	.word	0x40014000

080044bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e073      	b.n	80045c0 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	695b      	ldr	r3, [r3, #20]
 8004530:	4313      	orrs	r3, r2
 8004532:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	4313      	orrs	r3, r2
 8004540:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	041b      	lsls	r3, r3, #16
 800454e:	4313      	orrs	r3, r2
 8004550:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	4313      	orrs	r3, r2
 800455e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a19      	ldr	r2, [pc, #100]	; (80045cc <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d004      	beq.n	8004574 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a18      	ldr	r2, [pc, #96]	; (80045d0 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d11c      	bne.n	80045ae <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457e:	051b      	lsls	r3, r3, #20
 8004580:	4313      	orrs	r3, r2
 8004582:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4313      	orrs	r3, r2
 8004590:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459c:	4313      	orrs	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3714      	adds	r7, #20
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	40012c00 	.word	0x40012c00
 80045d0:	40013400 	.word	0x40013400

080045d4 <_ZdlPvj>:
 80045d4:	f000 b800 	b.w	80045d8 <_ZdlPv>

080045d8 <_ZdlPv>:
 80045d8:	f000 b800 	b.w	80045dc <free>

080045dc <free>:
 80045dc:	4b02      	ldr	r3, [pc, #8]	; (80045e8 <free+0xc>)
 80045de:	4601      	mov	r1, r0
 80045e0:	6818      	ldr	r0, [r3, #0]
 80045e2:	f000 b84b 	b.w	800467c <_free_r>
 80045e6:	bf00      	nop
 80045e8:	20000058 	.word	0x20000058

080045ec <__malloc_lock>:
 80045ec:	4801      	ldr	r0, [pc, #4]	; (80045f4 <__malloc_lock+0x8>)
 80045ee:	f000 b835 	b.w	800465c <__retarget_lock_acquire_recursive>
 80045f2:	bf00      	nop
 80045f4:	2000029c 	.word	0x2000029c

080045f8 <__malloc_unlock>:
 80045f8:	4801      	ldr	r0, [pc, #4]	; (8004600 <__malloc_unlock+0x8>)
 80045fa:	f000 b830 	b.w	800465e <__retarget_lock_release_recursive>
 80045fe:	bf00      	nop
 8004600:	2000029c 	.word	0x2000029c

08004604 <memset>:
 8004604:	4402      	add	r2, r0
 8004606:	4603      	mov	r3, r0
 8004608:	4293      	cmp	r3, r2
 800460a:	d100      	bne.n	800460e <memset+0xa>
 800460c:	4770      	bx	lr
 800460e:	f803 1b01 	strb.w	r1, [r3], #1
 8004612:	e7f9      	b.n	8004608 <memset+0x4>

08004614 <__libc_init_array>:
 8004614:	b570      	push	{r4, r5, r6, lr}
 8004616:	4d0d      	ldr	r5, [pc, #52]	; (800464c <__libc_init_array+0x38>)
 8004618:	4c0d      	ldr	r4, [pc, #52]	; (8004650 <__libc_init_array+0x3c>)
 800461a:	1b64      	subs	r4, r4, r5
 800461c:	10a4      	asrs	r4, r4, #2
 800461e:	2600      	movs	r6, #0
 8004620:	42a6      	cmp	r6, r4
 8004622:	d109      	bne.n	8004638 <__libc_init_array+0x24>
 8004624:	4d0b      	ldr	r5, [pc, #44]	; (8004654 <__libc_init_array+0x40>)
 8004626:	4c0c      	ldr	r4, [pc, #48]	; (8004658 <__libc_init_array+0x44>)
 8004628:	f000 f874 	bl	8004714 <_init>
 800462c:	1b64      	subs	r4, r4, r5
 800462e:	10a4      	asrs	r4, r4, #2
 8004630:	2600      	movs	r6, #0
 8004632:	42a6      	cmp	r6, r4
 8004634:	d105      	bne.n	8004642 <__libc_init_array+0x2e>
 8004636:	bd70      	pop	{r4, r5, r6, pc}
 8004638:	f855 3b04 	ldr.w	r3, [r5], #4
 800463c:	4798      	blx	r3
 800463e:	3601      	adds	r6, #1
 8004640:	e7ee      	b.n	8004620 <__libc_init_array+0xc>
 8004642:	f855 3b04 	ldr.w	r3, [r5], #4
 8004646:	4798      	blx	r3
 8004648:	3601      	adds	r6, #1
 800464a:	e7f2      	b.n	8004632 <__libc_init_array+0x1e>
 800464c:	0800475c 	.word	0x0800475c
 8004650:	0800475c 	.word	0x0800475c
 8004654:	0800475c 	.word	0x0800475c
 8004658:	08004760 	.word	0x08004760

0800465c <__retarget_lock_acquire_recursive>:
 800465c:	4770      	bx	lr

0800465e <__retarget_lock_release_recursive>:
 800465e:	4770      	bx	lr

08004660 <memcpy>:
 8004660:	440a      	add	r2, r1
 8004662:	4291      	cmp	r1, r2
 8004664:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004668:	d100      	bne.n	800466c <memcpy+0xc>
 800466a:	4770      	bx	lr
 800466c:	b510      	push	{r4, lr}
 800466e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004672:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004676:	4291      	cmp	r1, r2
 8004678:	d1f9      	bne.n	800466e <memcpy+0xe>
 800467a:	bd10      	pop	{r4, pc}

0800467c <_free_r>:
 800467c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800467e:	2900      	cmp	r1, #0
 8004680:	d044      	beq.n	800470c <_free_r+0x90>
 8004682:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004686:	9001      	str	r0, [sp, #4]
 8004688:	2b00      	cmp	r3, #0
 800468a:	f1a1 0404 	sub.w	r4, r1, #4
 800468e:	bfb8      	it	lt
 8004690:	18e4      	addlt	r4, r4, r3
 8004692:	f7ff ffab 	bl	80045ec <__malloc_lock>
 8004696:	4a1e      	ldr	r2, [pc, #120]	; (8004710 <_free_r+0x94>)
 8004698:	9801      	ldr	r0, [sp, #4]
 800469a:	6813      	ldr	r3, [r2, #0]
 800469c:	b933      	cbnz	r3, 80046ac <_free_r+0x30>
 800469e:	6063      	str	r3, [r4, #4]
 80046a0:	6014      	str	r4, [r2, #0]
 80046a2:	b003      	add	sp, #12
 80046a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046a8:	f7ff bfa6 	b.w	80045f8 <__malloc_unlock>
 80046ac:	42a3      	cmp	r3, r4
 80046ae:	d908      	bls.n	80046c2 <_free_r+0x46>
 80046b0:	6825      	ldr	r5, [r4, #0]
 80046b2:	1961      	adds	r1, r4, r5
 80046b4:	428b      	cmp	r3, r1
 80046b6:	bf01      	itttt	eq
 80046b8:	6819      	ldreq	r1, [r3, #0]
 80046ba:	685b      	ldreq	r3, [r3, #4]
 80046bc:	1949      	addeq	r1, r1, r5
 80046be:	6021      	streq	r1, [r4, #0]
 80046c0:	e7ed      	b.n	800469e <_free_r+0x22>
 80046c2:	461a      	mov	r2, r3
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	b10b      	cbz	r3, 80046cc <_free_r+0x50>
 80046c8:	42a3      	cmp	r3, r4
 80046ca:	d9fa      	bls.n	80046c2 <_free_r+0x46>
 80046cc:	6811      	ldr	r1, [r2, #0]
 80046ce:	1855      	adds	r5, r2, r1
 80046d0:	42a5      	cmp	r5, r4
 80046d2:	d10b      	bne.n	80046ec <_free_r+0x70>
 80046d4:	6824      	ldr	r4, [r4, #0]
 80046d6:	4421      	add	r1, r4
 80046d8:	1854      	adds	r4, r2, r1
 80046da:	42a3      	cmp	r3, r4
 80046dc:	6011      	str	r1, [r2, #0]
 80046de:	d1e0      	bne.n	80046a2 <_free_r+0x26>
 80046e0:	681c      	ldr	r4, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	6053      	str	r3, [r2, #4]
 80046e6:	440c      	add	r4, r1
 80046e8:	6014      	str	r4, [r2, #0]
 80046ea:	e7da      	b.n	80046a2 <_free_r+0x26>
 80046ec:	d902      	bls.n	80046f4 <_free_r+0x78>
 80046ee:	230c      	movs	r3, #12
 80046f0:	6003      	str	r3, [r0, #0]
 80046f2:	e7d6      	b.n	80046a2 <_free_r+0x26>
 80046f4:	6825      	ldr	r5, [r4, #0]
 80046f6:	1961      	adds	r1, r4, r5
 80046f8:	428b      	cmp	r3, r1
 80046fa:	bf04      	itt	eq
 80046fc:	6819      	ldreq	r1, [r3, #0]
 80046fe:	685b      	ldreq	r3, [r3, #4]
 8004700:	6063      	str	r3, [r4, #4]
 8004702:	bf04      	itt	eq
 8004704:	1949      	addeq	r1, r1, r5
 8004706:	6021      	streq	r1, [r4, #0]
 8004708:	6054      	str	r4, [r2, #4]
 800470a:	e7ca      	b.n	80046a2 <_free_r+0x26>
 800470c:	b003      	add	sp, #12
 800470e:	bd30      	pop	{r4, r5, pc}
 8004710:	20000160 	.word	0x20000160

08004714 <_init>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	bf00      	nop
 8004718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471a:	bc08      	pop	{r3}
 800471c:	469e      	mov	lr, r3
 800471e:	4770      	bx	lr

08004720 <_fini>:
 8004720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004722:	bf00      	nop
 8004724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004726:	bc08      	pop	{r3}
 8004728:	469e      	mov	lr, r3
 800472a:	4770      	bx	lr

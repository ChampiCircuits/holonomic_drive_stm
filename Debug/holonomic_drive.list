
holonomic_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c90  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e98  08004e98  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08004e98  08004e98  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e98  08004e98  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004e98  08004e98  00014e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004ea0  08004ea0  00014ea0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004ea8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000530  2000005c  08004f04  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08004f04  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c796  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002192  00000000  00000000  0002c865  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  0002e9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a18  00000000  00000000  0002f718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e817  00000000  00000000  00030130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cd33  00000000  00000000  0004e947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc6ae  00000000  00000000  0005b67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c54  00000000  00000000  00117d28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  0011b97c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000005c 	.word	0x2000005c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08004e50 	.word	0x08004e50

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000060 	.word	0x20000060
 8000214:	08004e50 	.word	0x08004e50

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <_Z3subPfS_S_>:

Vel sub(Vel vel1, Vel vel2) {
	return {vel1.x - vel2.x, vel1.y - vel2.y, vel1.theta - vel2.theta};
}

void sub(float* arr1, float* arr2, float* ret) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
	for(int i=0; i<3; i++) {
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e016      	b.n	8000c34 <_Z3subPfS_S_+0x40>
		ret[i] = arr1[i] - arr2[i];
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	009b      	lsls	r3, r3, #2
 8000c0a:	68fa      	ldr	r2, [r7, #12]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	ed93 7a00 	vldr	s14, [r3]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	68ba      	ldr	r2, [r7, #8]
 8000c18:	4413      	add	r3, r2
 8000c1a:	edd3 7a00 	vldr	s15, [r3]
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c2a:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	3301      	adds	r3, #1
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	697b      	ldr	r3, [r7, #20]
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	dde5      	ble.n	8000c06 <_Z3subPfS_S_+0x12>
	}
}
 8000c3a:	bf00      	nop
 8000c3c:	bf00      	nop
 8000c3e:	371c      	adds	r7, #28
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <_Z3absPfS_>:

void abs(float* arr, float* ret) {
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	e026      	b.n	8000ca6 <_Z3absPfS_+0x5e>
		if(arr[i]>=0) {
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	687a      	ldr	r2, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	edd3 7a00 	vldr	s15, [r3]
 8000c64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6c:	db0a      	blt.n	8000c84 <_Z3absPfS_+0x3c>
			ret[i] = arr[i];
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	687a      	ldr	r2, [r7, #4]
 8000c74:	441a      	add	r2, r3
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	6839      	ldr	r1, [r7, #0]
 8000c7c:	440b      	add	r3, r1
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	e00d      	b.n	8000ca0 <_Z3absPfS_+0x58>
		}
		else {
			ret[i] = -arr[i];
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	edd3 7a00 	vldr	s15, [r3]
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	4413      	add	r3, r2
 8000c98:	eef1 7a67 	vneg.f32	s15, s15
 8000c9c:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2b02      	cmp	r3, #2
 8000caa:	ddd5      	ble.n	8000c58 <_Z3absPfS_+0x10>
		}
	}
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3714      	adds	r7, #20
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr

08000cba <_Z13get_index_maxPf>:

int get_index_max(float* arr) {
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
	if(arr[0] > arr[1] && arr[0] > arr[2]) {
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	ed93 7a00 	vldr	s14, [r3]
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3304      	adds	r3, #4
 8000ccc:	edd3 7a00 	vldr	s15, [r3]
 8000cd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cd8:	dd0d      	ble.n	8000cf6 <_Z13get_index_maxPf+0x3c>
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	ed93 7a00 	vldr	s14, [r3]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3308      	adds	r3, #8
 8000ce4:	edd3 7a00 	vldr	s15, [r3]
 8000ce8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cf0:	dd01      	ble.n	8000cf6 <_Z13get_index_maxPf+0x3c>
		return 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e01b      	b.n	8000d2e <_Z13get_index_maxPf+0x74>
	}
	else if(arr[1] > arr[0] && arr[1] > arr[2]) {
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	ed93 7a00 	vldr	s14, [r3]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	edd3 7a00 	vldr	s15, [r3]
 8000d04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d0c:	dd0e      	ble.n	8000d2c <_Z13get_index_maxPf+0x72>
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3304      	adds	r3, #4
 8000d12:	ed93 7a00 	vldr	s14, [r3]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	3308      	adds	r3, #8
 8000d1a:	edd3 7a00 	vldr	s15, [r3]
 8000d1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d26:	dd01      	ble.n	8000d2c <_Z13get_index_maxPf+0x72>
		return 1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e000      	b.n	8000d2e <_Z13get_index_maxPf+0x74>
	}
	else {
		return 2;
 8000d2c:	2302      	movs	r3, #2
	}
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr

08000d3a <_ZN3VelC1Ev>:
#define HOLONOMICDRIVE3_H_


#include "Stepper.h"

struct Vel {
 8000d3a:	b480      	push	{r7}
 8000d3c:	b083      	sub	sp, #12
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	6078      	str	r0, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f04f 0200 	mov.w	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f04f 0200 	mov.w	r2, #0
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f04f 0200 	mov.w	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_ZN7StepperaSERKS_>:
#ifndef SRC_STEPPER_H_
#define SRC_STEPPER_H_

#include "stm32g4xx_hal.h"

class Stepper {
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
 8000d72:	687a      	ldr	r2, [r7, #4]
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	1d10      	adds	r0, r2, #4
 8000d78:	3304      	adds	r3, #4
 8000d7a:	224c      	movs	r2, #76	; 0x4c
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	f004 f80d 	bl	8004d9c <memcpy>
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	651a      	str	r2, [r3, #80]	; 0x50
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	659a      	str	r2, [r3, #88]	; 0x58
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	65da      	str	r2, [r3, #92]	; 0x5c
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	4618      	mov	r0, r3
 8000daa:	3708      	adds	r7, #8
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}

08000db0 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>:

HolonomicDrive3::HolonomicDrive3(Stepper stepper0, Stepper stepper1, Stepper stepper2, float wheel_radius, float wheel_distance) {
 8000db0:	b5b0      	push	{r4, r5, r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6178      	str	r0, [r7, #20]
 8000db8:	6139      	str	r1, [r7, #16]
 8000dba:	60fa      	str	r2, [r7, #12]
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000dc2:	edc7 0a00 	vstr	s1, [r7]
 8000dc6:	4a2e      	ldr	r2, [pc, #184]	; (8000e80 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xd0>)
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	3304      	adds	r3, #4
 8000dd0:	2402      	movs	r4, #2
 8000dd2:	461d      	mov	r5, r3
 8000dd4:	e004      	b.n	8000de0 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x30>
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	f000 fb0e 	bl	80013f8 <_ZN7StepperC1Ev>
 8000ddc:	3560      	adds	r5, #96	; 0x60
 8000dde:	3c01      	subs	r4, #1
 8000de0:	2c00      	cmp	r4, #0
 8000de2:	daf8      	bge.n	8000dd6 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x26>
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ffa5 	bl	8000d3a <_ZN3VelC1Ev>
	this->steppers[0] = stepper0;
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3304      	adds	r3, #4
 8000df4:	6939      	ldr	r1, [r7, #16]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f7ff ffb6 	bl	8000d68 <_ZN7StepperaSERKS_>
	this->steppers[1] = stepper1;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3364      	adds	r3, #100	; 0x64
 8000e00:	68f9      	ldr	r1, [r7, #12]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ffb0 	bl	8000d68 <_ZN7StepperaSERKS_>
	this->steppers[2] = stepper2;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	33c4      	adds	r3, #196	; 0xc4
 8000e0c:	68b9      	ldr	r1, [r7, #8]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ffaa 	bl	8000d68 <_ZN7StepperaSERKS_>
	this->wheel_circumference = wheel_radius * 2.0 * PI;
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff fb63 	bl	80004e0 <__aeabi_f2d>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	f7ff fa01 	bl	8000224 <__adddf3>
 8000e22:	4602      	mov	r2, r0
 8000e24:	460b      	mov	r3, r1
 8000e26:	4610      	mov	r0, r2
 8000e28:	4619      	mov	r1, r3
 8000e2a:	a313      	add	r3, pc, #76	; (adr r3, 8000e78 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xc8>)
 8000e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e30:	f7ff fbae 	bl	8000590 <__aeabi_dmul>
 8000e34:	4602      	mov	r2, r0
 8000e36:	460b      	mov	r3, r1
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	f7ff fe8a 	bl	8000b54 <__aeabi_d2f>
 8000e40:	4602      	mov	r2, r0
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
	this->wheel_distance = wheel_distance;
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	683a      	ldr	r2, [r7, #0]
 8000e4c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
	this->current_wheels_speeds_rps[0] = 0;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
	this->current_wheels_speeds_rps[1] = 0;
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	f04f 0200 	mov.w	r2, #0
 8000e60:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
	this->current_wheels_speeds_rps[2] = 0;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	f04f 0200 	mov.w	r2, #0
 8000e6a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140

}
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	4618      	mov	r0, r3
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bdb0      	pop	{r4, r5, r7, pc}
 8000e78:	54442eea 	.word	0x54442eea
 8000e7c:	400921fb 	.word	0x400921fb
 8000e80:	08004e70 	.word	0x08004e70

08000e84 <_ZN15HolonomicDrive311set_cmd_velE3Vel>:

void HolonomicDrive3::set_cmd_vel(Vel cmd) {
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	eef0 6a40 	vmov.f32	s13, s0
 8000e90:	eeb0 7a60 	vmov.f32	s14, s1
 8000e94:	eef0 7a41 	vmov.f32	s15, s2
 8000e98:	edc7 6a00 	vstr	s13, [r7]
 8000e9c:	ed87 7a01 	vstr	s14, [r7, #4]
 8000ea0:	edc7 7a02 	vstr	s15, [r7, #8]
	this->cmd_vel = cmd;
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8000eaa:	463a      	mov	r2, r7
 8000eac:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8000eb2:	bf00      	nop
 8000eb4:	3714      	adds	r7, #20
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
	...

08000ec0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>:

void HolonomicDrive3::compute_wheels_speeds(Vel cmd, float *ret_speeds_rps) {
 8000ec0:	b5b0      	push	{r4, r5, r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6178      	str	r0, [r7, #20]
 8000ec8:	eef0 6a40 	vmov.f32	s13, s0
 8000ecc:	eeb0 7a60 	vmov.f32	s14, s1
 8000ed0:	eef0 7a41 	vmov.f32	s15, s2
 8000ed4:	6079      	str	r1, [r7, #4]
 8000ed6:	edc7 6a02 	vstr	s13, [r7, #8]
 8000eda:	ed87 7a03 	vstr	s14, [r7, #12]
 8000ede:	edc7 7a04 	vstr	s15, [r7, #16]
    float wheel0_mps = 0.5 * this->cmd_vel.x - SQRT_3_OVER_2 * this->cmd_vel.y - this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff faf9 	bl	80004e0 <__aeabi_f2d>
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	4b79      	ldr	r3, [pc, #484]	; (80010d8 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x218>)
 8000ef4:	f7ff fb4c 	bl	8000590 <__aeabi_dmul>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4614      	mov	r4, r2
 8000efe:	461d      	mov	r5, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff faea 	bl	80004e0 <__aeabi_f2d>
 8000f0c:	a36e      	add	r3, pc, #440	; (adr r3, 80010c8 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x208>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	f7ff fb3d 	bl	8000590 <__aeabi_dmul>
 8000f16:	4602      	mov	r2, r0
 8000f18:	460b      	mov	r3, r1
 8000f1a:	4620      	mov	r0, r4
 8000f1c:	4629      	mov	r1, r5
 8000f1e:	f7ff f97f 	bl	8000220 <__aeabi_dsub>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4614      	mov	r4, r2
 8000f28:	461d      	mov	r5, r3
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8000f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3a:	ee17 0a90 	vmov	r0, s15
 8000f3e:	f7ff facf 	bl	80004e0 <__aeabi_f2d>
 8000f42:	a363      	add	r3, pc, #396	; (adr r3, 80010d0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x210>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff fb22 	bl	8000590 <__aeabi_dmul>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	460b      	mov	r3, r1
 8000f50:	4610      	mov	r0, r2
 8000f52:	4619      	mov	r1, r3
 8000f54:	f04f 0200 	mov.w	r2, #0
 8000f58:	4b60      	ldr	r3, [pc, #384]	; (80010dc <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x21c>)
 8000f5a:	f7ff fc43 	bl	80007e4 <__aeabi_ddiv>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	460b      	mov	r3, r1
 8000f62:	4620      	mov	r0, r4
 8000f64:	4629      	mov	r1, r5
 8000f66:	f7ff f95b 	bl	8000220 <__aeabi_dsub>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4610      	mov	r0, r2
 8000f70:	4619      	mov	r1, r3
 8000f72:	f7ff fdef 	bl	8000b54 <__aeabi_d2f>
 8000f76:	4603      	mov	r3, r0
 8000f78:	627b      	str	r3, [r7, #36]	; 0x24
    float wheel1_mps = 0.5 * this->cmd_vel.x + SQRT_3_OVER_2 * this->cmd_vel.y - this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff faad 	bl	80004e0 <__aeabi_f2d>
 8000f86:	f04f 0200 	mov.w	r2, #0
 8000f8a:	4b53      	ldr	r3, [pc, #332]	; (80010d8 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x218>)
 8000f8c:	f7ff fb00 	bl	8000590 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4614      	mov	r4, r2
 8000f96:	461d      	mov	r5, r3
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f7ff fa9e 	bl	80004e0 <__aeabi_f2d>
 8000fa4:	a348      	add	r3, pc, #288	; (adr r3, 80010c8 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x208>)
 8000fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000faa:	f7ff faf1 	bl	8000590 <__aeabi_dmul>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	460b      	mov	r3, r1
 8000fb2:	4620      	mov	r0, r4
 8000fb4:	4629      	mov	r1, r5
 8000fb6:	f7ff f935 	bl	8000224 <__adddf3>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4614      	mov	r4, r2
 8000fc0:	461d      	mov	r5, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8000fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fd2:	ee17 0a90 	vmov	r0, s15
 8000fd6:	f7ff fa83 	bl	80004e0 <__aeabi_f2d>
 8000fda:	a33d      	add	r3, pc, #244	; (adr r3, 80010d0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x210>)
 8000fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe0:	f7ff fad6 	bl	8000590 <__aeabi_dmul>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	460b      	mov	r3, r1
 8000fe8:	4610      	mov	r0, r2
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 0200 	mov.w	r2, #0
 8000ff0:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x21c>)
 8000ff2:	f7ff fbf7 	bl	80007e4 <__aeabi_ddiv>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	460b      	mov	r3, r1
 8000ffa:	4620      	mov	r0, r4
 8000ffc:	4629      	mov	r1, r5
 8000ffe:	f7ff f90f 	bl	8000220 <__aeabi_dsub>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4610      	mov	r0, r2
 8001008:	4619      	mov	r1, r3
 800100a:	f7ff fda3 	bl	8000b54 <__aeabi_d2f>
 800100e:	4603      	mov	r3, r0
 8001010:	623b      	str	r3, [r7, #32]
    float wheel2_mps = - this->cmd_vel.x + this->wheel_distance * this->cmd_vel.theta * PI / 180.0;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 8001018:	eef1 7a67 	vneg.f32	s15, s15
 800101c:	ee17 3a90 	vmov	r3, s15
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa5d 	bl	80004e0 <__aeabi_f2d>
 8001026:	4604      	mov	r4, r0
 8001028:	460d      	mov	r5, r1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8001036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103a:	ee17 0a90 	vmov	r0, s15
 800103e:	f7ff fa4f 	bl	80004e0 <__aeabi_f2d>
 8001042:	a323      	add	r3, pc, #140	; (adr r3, 80010d0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x210>)
 8001044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001048:	f7ff faa2 	bl	8000590 <__aeabi_dmul>
 800104c:	4602      	mov	r2, r0
 800104e:	460b      	mov	r3, r1
 8001050:	4610      	mov	r0, r2
 8001052:	4619      	mov	r1, r3
 8001054:	f04f 0200 	mov.w	r2, #0
 8001058:	4b20      	ldr	r3, [pc, #128]	; (80010dc <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x21c>)
 800105a:	f7ff fbc3 	bl	80007e4 <__aeabi_ddiv>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	4620      	mov	r0, r4
 8001064:	4629      	mov	r1, r5
 8001066:	f7ff f8dd 	bl	8000224 <__adddf3>
 800106a:	4602      	mov	r2, r0
 800106c:	460b      	mov	r3, r1
 800106e:	4610      	mov	r0, r2
 8001070:	4619      	mov	r1, r3
 8001072:	f7ff fd6f 	bl	8000b54 <__aeabi_d2f>
 8001076:	4603      	mov	r3, r0
 8001078:	61fb      	str	r3, [r7, #28]
    // wheel mps -> wheel rps
    ret_speeds_rps[0] = wheel0_mps / this->wheel_circumference;
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8001080:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8001084:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[1] = wheel1_mps / this->wheel_circumference;
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3304      	adds	r3, #4
 8001098:	edd7 6a08 	vldr	s13, [r7, #32]
 800109c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010a0:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[2] = wheel2_mps / this->wheel_circumference;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	3308      	adds	r3, #8
 80010ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80010b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b6:	edc3 7a00 	vstr	s15, [r3]
}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bdb0      	pop	{r4, r5, r7, pc}
 80010c2:	bf00      	nop
 80010c4:	f3af 8000 	nop.w
 80010c8:	e857b07f 	.word	0xe857b07f
 80010cc:	3febb67a 	.word	0x3febb67a
 80010d0:	54442eea 	.word	0x54442eea
 80010d4:	400921fb 	.word	0x400921fb
 80010d8:	3fe00000 	.word	0x3fe00000
 80010dc:	40668000 	.word	0x40668000

080010e0 <_ZN15HolonomicDrive319write_wheels_speedsEPf>:

void HolonomicDrive3::write_wheels_speeds(float *speeds_rps) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
 80010ee:	e020      	b.n	8001132 <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x52>
		this->steppers[i].set_speed_rps(speeds_rps[i]);
 80010f0:	68fa      	ldr	r2, [r7, #12]
 80010f2:	4613      	mov	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	4413      	add	r3, r2
 80010f8:	015b      	lsls	r3, r3, #5
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	1d19      	adds	r1, r3, #4
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	edd3 7a00 	vldr	s15, [r3]
 800110c:	eeb0 0a67 	vmov.f32	s0, s15
 8001110:	4608      	mov	r0, r1
 8001112:	f000 f9f7 	bl	8001504 <_ZN7Stepper13set_speed_rpsEf>
		this->current_wheels_speeds_rps[i] = speeds_rps[i];
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	4413      	add	r3, r2
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	334e      	adds	r3, #78	; 0x4e
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	440b      	add	r3, r1
 800112a:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	3301      	adds	r3, #1
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b02      	cmp	r3, #2
 8001136:	dddb      	ble.n	80010f0 <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x10>
	}
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	0000      	movs	r0, r0
 8001144:	0000      	movs	r0, r0
	...

08001148 <_ZN15HolonomicDrive324spin_once_motors_controlEv>:

void HolonomicDrive3::spin_once_motors_control() {
 8001148:	b580      	push	{r7, lr}
 800114a:	b092      	sub	sp, #72	; 0x48
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

	// compare current_vel and cmd_vel wheels speeds to check the required acceleration to transition directly from current to command
	float cmd_wheels_speeds[3]; // rotations per second
	this->compute_wheels_speeds(cmd_vel, cmd_wheels_speeds);
 8001150:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	edd3 6a4b 	vldr	s13, [r3, #300]	; 0x12c
 800115a:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 800115e:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8001162:	4611      	mov	r1, r2
 8001164:	eeb0 0a66 	vmov.f32	s0, s13
 8001168:	eef0 0a47 	vmov.f32	s1, s14
 800116c:	eeb0 1a67 	vmov.f32	s2, s15
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff fea5 	bl	8000ec0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>

	float desired_accels_wheels[3];
	sub(cmd_wheels_speeds, this->current_wheels_speeds_rps, desired_accels_wheels);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f503 719c 	add.w	r1, r3, #312	; 0x138
 800117c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001180:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fd35 	bl	8000bf4 <_Z3subPfS_S_>

	float abs_desired_accels_wheels[3];
	abs(desired_accels_wheels, abs_desired_accels_wheels);
 800118a:	f107 0218 	add.w	r2, r7, #24
 800118e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff fd57 	bl	8000c48 <_Z3absPfS_>
	if(abs_desired_accels_wheels[0] < MAX_ACCEL_PER_CYCLE && abs_desired_accels_wheels[1] < MAX_ACCEL_PER_CYCLE && abs_desired_accels_wheels[2] < MAX_ACCEL_PER_CYCLE) {
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f99f 	bl	80004e0 <__aeabi_f2d>
 80011a2:	a33b      	add	r3, pc, #236	; (adr r3, 8001290 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff fc64 	bl	8000a74 <__aeabi_dcmplt>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d01e      	beq.n	80011f0 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xa8>
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f993 	bl	80004e0 <__aeabi_f2d>
 80011ba:	a335      	add	r3, pc, #212	; (adr r3, 8001290 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 80011bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c0:	f7ff fc58 	bl	8000a74 <__aeabi_dcmplt>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d012      	beq.n	80011f0 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xa8>
 80011ca:	6a3b      	ldr	r3, [r7, #32]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f987 	bl	80004e0 <__aeabi_f2d>
 80011d2:	a32f      	add	r3, pc, #188	; (adr r3, 8001290 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 80011d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d8:	f7ff fc4c 	bl	8000a74 <__aeabi_dcmplt>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d006      	beq.n	80011f0 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xa8>
		// acceleration requested is ok, no need to accelerate gradually.
		this->write_wheels_speeds(cmd_wheels_speeds);
 80011e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011e6:	4619      	mov	r1, r3
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f7ff ff79 	bl	80010e0 <_ZN15HolonomicDrive319write_wheels_speedsEPf>
 80011ee:	e048      	b.n	8001282 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x13a>
	}
	else {
		// Trouver la roue qui pose le + problème. On va alors pouvoir réduire les accélérations des 3 roues de façon
		// de façon proportionelle, de façon que la roue qui pose le + problème ait une accélération égale à MAX_ACCEL_PER_CYCLE
		int i_max = get_index_max(abs_desired_accels_wheels);
 80011f0:	f107 0318 	add.w	r3, r7, #24
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff fd60 	bl	8000cba <_Z13get_index_maxPf>
 80011fa:	6438      	str	r0, [r7, #64]	; 0x40

		float speed_ratio = MAX_ACCEL_PER_CYCLE / abs_desired_accels_wheels[i_max]; // speed ratio of each original speed to add
 80011fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	3348      	adds	r3, #72	; 0x48
 8001202:	443b      	add	r3, r7
 8001204:	3b30      	subs	r3, #48	; 0x30
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f969 	bl	80004e0 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	a11f      	add	r1, pc, #124	; (adr r1, 8001290 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x148>)
 8001214:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001218:	f7ff fae4 	bl	80007e4 <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fc96 	bl	8000b54 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	63fb      	str	r3, [r7, #60]	; 0x3c

		float new_speeds_cmds[3];
		for(int i=0; i<3; i++) {
 800122c:	2300      	movs	r3, #0
 800122e:	647b      	str	r3, [r7, #68]	; 0x44
 8001230:	e01d      	b.n	800126e <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x126>
			new_speeds_cmds[i] = current_wheels_speeds_rps[i] + speed_ratio * desired_accels_wheels[i];;
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001236:	334e      	adds	r3, #78	; 0x4e
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	4413      	add	r3, r2
 800123c:	ed93 7a00 	vldr	s14, [r3]
 8001240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	3348      	adds	r3, #72	; 0x48
 8001246:	443b      	add	r3, r7
 8001248:	3b24      	subs	r3, #36	; 0x24
 800124a:	edd3 6a00 	vldr	s13, [r3]
 800124e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800125a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	3348      	adds	r3, #72	; 0x48
 8001260:	443b      	add	r3, r7
 8001262:	3b3c      	subs	r3, #60	; 0x3c
 8001264:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i<3; i++) {
 8001268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800126a:	3301      	adds	r3, #1
 800126c:	647b      	str	r3, [r7, #68]	; 0x44
 800126e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001270:	2b02      	cmp	r3, #2
 8001272:	ddde      	ble.n	8001232 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xea>
		}

		// set speed
		this->write_wheels_speeds(new_speeds_cmds);
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	4619      	mov	r1, r3
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ff30 	bl	80010e0 <_ZN15HolonomicDrive319write_wheels_speedsEPf>


	}

}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	3748      	adds	r7, #72	; 0x48
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	9999999a 	.word	0x9999999a
 8001294:	3fb99999 	.word	0x3fb99999

08001298 <_ZN15HolonomicDrive3C1Ev>:

HolonomicDrive3::HolonomicDrive3() {
 8001298:	b5b0      	push	{r4, r5, r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	4a0c      	ldr	r2, [pc, #48]	; (80012d4 <_ZN15HolonomicDrive3C1Ev+0x3c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3304      	adds	r3, #4
 80012aa:	2402      	movs	r4, #2
 80012ac:	461d      	mov	r5, r3
 80012ae:	e004      	b.n	80012ba <_ZN15HolonomicDrive3C1Ev+0x22>
 80012b0:	4628      	mov	r0, r5
 80012b2:	f000 f8a1 	bl	80013f8 <_ZN7StepperC1Ev>
 80012b6:	3560      	adds	r5, #96	; 0x60
 80012b8:	3c01      	subs	r4, #1
 80012ba:	2c00      	cmp	r4, #0
 80012bc:	daf8      	bge.n	80012b0 <_ZN15HolonomicDrive3C1Ev+0x18>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff fd38 	bl	8000d3a <_ZN3VelC1Ev>
}
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bdb0      	pop	{r4, r5, r7, pc}
 80012d4:	08004e70 	.word	0x08004e70

080012d8 <_ZN15HolonomicDrive3D1Ev>:

HolonomicDrive3::~HolonomicDrive3() {
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <_ZN15HolonomicDrive3D1Ev+0x40>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3304      	adds	r3, #4
	// TODO Auto-generated destructor stub
}
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00d      	beq.n	800130a <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3304      	adds	r3, #4
 80012f2:	f503 7490 	add.w	r4, r3, #288	; 0x120
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	3304      	adds	r3, #4
}
 80012fa:	429c      	cmp	r4, r3
 80012fc:	d005      	beq.n	800130a <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 80012fe:	3c60      	subs	r4, #96	; 0x60
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4620      	mov	r0, r4
 8001306:	4798      	blx	r3
}
 8001308:	e7f5      	b.n	80012f6 <_ZN15HolonomicDrive3D1Ev+0x1e>
HolonomicDrive3::~HolonomicDrive3() {
 800130a:	bf00      	nop
}
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	bd90      	pop	{r4, r7, pc}
 8001316:	bf00      	nop
 8001318:	08004e70 	.word	0x08004e70

0800131c <_ZN15HolonomicDrive3D0Ev>:
HolonomicDrive3::~HolonomicDrive3() {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
}
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f7ff ffd7 	bl	80012d8 <_ZN15HolonomicDrive3D1Ev>
 800132a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f003 fcee 	bl	8004d10 <_ZdlPvj>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <_Z21PWM_set_high_durationP11TIM_TypeDefi>:

#define SYS_CORE_CLOCK_HZ 170000000.
#define SYS_CORE_CLOCK_MHZ 170.


void PWM_set_high_duration(TIM_TypeDef *timx, int us) {
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
	timx->CCR1 = SYS_CORE_CLOCK_MHZ/(timx->PSC+1) * us;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800134e:	3301      	adds	r3, #1
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff f8a3 	bl	800049c <__aeabi_ui2d>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	f04f 0000 	mov.w	r0, #0
 800135e:	490e      	ldr	r1, [pc, #56]	; (8001398 <_Z21PWM_set_high_durationP11TIM_TypeDefi+0x58>)
 8001360:	f7ff fa40 	bl	80007e4 <__aeabi_ddiv>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4614      	mov	r4, r2
 800136a:	461d      	mov	r5, r3
 800136c:	6838      	ldr	r0, [r7, #0]
 800136e:	f7ff f8a5 	bl	80004bc <__aeabi_i2d>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4620      	mov	r0, r4
 8001378:	4629      	mov	r1, r5
 800137a:	f7ff f909 	bl	8000590 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f7ff fbc5 	bl	8000b14 <__aeabi_d2uiz>
 800138a:	4602      	mov	r2, r0
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bdb0      	pop	{r4, r5, r7, pc}
 8001398:	40654000 	.word	0x40654000
 800139c:	00000000 	.word	0x00000000

080013a0 <_Z12PWM_set_freqP11TIM_TypeDefi>:

void PWM_set_freq(TIM_TypeDef *timx, int hz) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
	int arr = SYS_CORE_CLOCK_HZ/((timx->PSC+1)*hz);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	3301      	adds	r3, #1
 80013b0:	683a      	ldr	r2, [r7, #0]
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f870 	bl	800049c <__aeabi_ui2d>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	a10b      	add	r1, pc, #44	; (adr r1, 80013f0 <_Z12PWM_set_freqP11TIM_TypeDefi+0x50>)
 80013c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80013c6:	f7ff fa0d 	bl	80007e4 <__aeabi_ddiv>
 80013ca:	4602      	mov	r2, r0
 80013cc:	460b      	mov	r3, r1
 80013ce:	4610      	mov	r0, r2
 80013d0:	4619      	mov	r1, r3
 80013d2:	f7ff fb77 	bl	8000ac4 <__aeabi_d2iz>
 80013d6:	4603      	mov	r3, r0
 80013d8:	60fb      	str	r3, [r7, #12]
	timx->CNT = 0;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	625a      	str	r2, [r3, #36]	; 0x24
	timx->ARR = arr;
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	00000000 	.word	0x00000000
 80013f4:	41a443fd 	.word	0x41a443fd

080013f8 <_ZN7StepperC1Ev>:

Stepper::Stepper() {}
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
 8001400:	4a04      	ldr	r2, [pc, #16]	; (8001414 <_ZN7StepperC1Ev+0x1c>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4618      	mov	r0, r3
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	08004e80 	.word	0x08004e80

08001418 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>:

Stepper::Stepper(TIM_HandleTypeDef tim_handle_step, GPIO_TypeDef *GPIOx_dir, uint16_t GPIO_Pin_dir) {
 8001418:	b084      	sub	sp, #16
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
 8001422:	f107 0014 	add.w	r0, r7, #20
 8001426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800142a:	4a18      	ldr	r2, [pc, #96]	; (800148c <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft+0x74>)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->tim_handle = tim_handle_step;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	3304      	adds	r3, #4
 8001434:	f107 0114 	add.w	r1, r7, #20
 8001438:	224c      	movs	r2, #76	; 0x4c
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fcae 	bl	8004d9c <memcpy>
	this->GPIOx_dir = GPIOx_dir;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001444:	651a      	str	r2, [r3, #80]	; 0x50
	this->GPIO_Pin_dir = GPIO_Pin_dir;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
 800144c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	PWM_set_high_duration(this->tim_handle.Instance, 10);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	210a      	movs	r1, #10
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff72 	bl	8001340 <_Z21PWM_set_high_durationP11TIM_TypeDefi>
	HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001466:	2201      	movs	r2, #1
 8001468:	4619      	mov	r1, r3
 800146a:	f001 faa7 	bl	80029bc <HAL_GPIO_WritePin>

	this->current_dir = 0;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	65da      	str	r2, [r3, #92]	; 0x5c
	this->current_freq = 0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	659a      	str	r2, [r3, #88]	; 0x58
}
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001486:	b004      	add	sp, #16
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	08004e80 	.word	0x08004e80

08001490 <_ZN7Stepper19set_speed_step_freqEii>:

void Stepper::set_speed_step_freq(int hz, int dir) {
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	60f8      	str	r0, [r7, #12]
 8001498:	60b9      	str	r1, [r7, #8]
 800149a:	607a      	str	r2, [r7, #4]
	if(hz < 15){// todo calculer freq min automatiquement
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	2b0e      	cmp	r3, #14
 80014a0:	dc06      	bgt.n	80014b0 <_ZN7Stepper19set_speed_step_freqEii+0x20>
		HAL_TIM_PWM_Stop(&this->tim_handle, TIM_CHANNEL_1);
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f002 fa6d 	bl	8003988 <HAL_TIM_PWM_Stop>
		return;
 80014ae:	e025      	b.n	80014fc <_ZN7Stepper19set_speed_step_freqEii+0x6c>
	}
	if(!this->current_freq) {
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d105      	bne.n	80014c4 <_ZN7Stepper19set_speed_step_freqEii+0x34>
		// stepper stopped, start pwm
		HAL_TIM_PWM_Start(&this->tim_handle, TIM_CHANNEL_1);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	3304      	adds	r3, #4
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f002 f962 	bl	8003788 <HAL_TIM_PWM_Start>
	}
	PWM_set_freq(this->tim_handle.Instance, hz);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff68 	bl	80013a0 <_Z12PWM_set_freqP11TIM_TypeDefi>

	if(dir==1) {
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d109      	bne.n	80014ea <_ZN7Stepper19set_speed_step_freqEii+0x5a>
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80014e0:	2201      	movs	r2, #1
 80014e2:	4619      	mov	r1, r3
 80014e4:	f001 fa6a 	bl	80029bc <HAL_GPIO_WritePin>
 80014e8:	e008      	b.n	80014fc <_ZN7Stepper19set_speed_step_freqEii+0x6c>
	}else {
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_RESET);
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80014f4:	2200      	movs	r2, #0
 80014f6:	4619      	mov	r1, r3
 80014f8:	f001 fa60 	bl	80029bc <HAL_GPIO_WritePin>
	}
}
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <_ZN7Stepper13set_speed_rpsEf>:

void Stepper::set_speed_rps(float rps) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	ed87 0a00 	vstr	s0, [r7]
	// 3200 steps per revolution
	int hz = rps * 3200.0;
 8001510:	6838      	ldr	r0, [r7, #0]
 8001512:	f7fe ffe5 	bl	80004e0 <__aeabi_f2d>
 8001516:	f04f 0200 	mov.w	r2, #0
 800151a:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <_ZN7Stepper13set_speed_rpsEf+0x54>)
 800151c:	f7ff f838 	bl	8000590 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	f7ff facc 	bl	8000ac4 <__aeabi_d2iz>
 800152c:	4603      	mov	r3, r0
 800152e:	60fb      	str	r3, [r7, #12]
	if(hz>=0) {
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	2b00      	cmp	r3, #0
 8001534:	db05      	blt.n	8001542 <_ZN7Stepper13set_speed_rpsEf+0x3e>
		this->set_speed_step_freq(hz, 1);
 8001536:	2201      	movs	r2, #1
 8001538:	68f9      	ldr	r1, [r7, #12]
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa8 	bl	8001490 <_ZN7Stepper19set_speed_step_freqEii>
	}
	else {
		this->set_speed_step_freq(-hz, 0);
	}
}
 8001540:	e006      	b.n	8001550 <_ZN7Stepper13set_speed_rpsEf+0x4c>
		this->set_speed_step_freq(-hz, 0);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	425b      	negs	r3, r3
 8001546:	2200      	movs	r2, #0
 8001548:	4619      	mov	r1, r3
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff ffa0 	bl	8001490 <_ZN7Stepper19set_speed_step_freqEii>
}
 8001550:	bf00      	nop
 8001552:	3710      	adds	r7, #16
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40a90000 	.word	0x40a90000

0800155c <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	4a04      	ldr	r2, [pc, #16]	; (8001578 <_ZN7StepperD1Ev+0x1c>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	08004e80 	.word	0x08004e80

0800157c <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
}
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f7ff ffe9 	bl	800155c <_ZN7StepperD1Ev>
 800158a:	2160      	movs	r1, #96	; 0x60
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f003 fbbf 	bl	8004d10 <_ZdlPvj>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4618      	mov	r0, r3
 8001596:	3708      	adds	r7, #8
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}

0800159c <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
bool instance_ok;
bool flag_ok;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6) {
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a04      	ldr	r2, [pc, #16]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d101      	bne.n	80015b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    	loop();
 80015ae:	f000 f83d 	bl	800162c <_Z4loopv>
    }

}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	40001000 	.word	0x40001000

080015c0 <_Z13set_loop_freqi>:

void set_loop_freq(int hz) {
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	htim6.Instance->ARR = SYS_CORE_CLOCK_HZ / (htim6.Instance->PSC+1) / hz;
 80015c8:	4b17      	ldr	r3, [pc, #92]	; (8001628 <_Z13set_loop_freqi+0x68>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ce:	3301      	adds	r3, #1
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ff63 	bl	800049c <__aeabi_ui2d>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	a111      	add	r1, pc, #68	; (adr r1, 8001620 <_Z13set_loop_freqi+0x60>)
 80015dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015e0:	f7ff f900 	bl	80007e4 <__aeabi_ddiv>
 80015e4:	4602      	mov	r2, r0
 80015e6:	460b      	mov	r3, r1
 80015e8:	4614      	mov	r4, r2
 80015ea:	461d      	mov	r5, r3
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7fe ff65 	bl	80004bc <__aeabi_i2d>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4620      	mov	r0, r4
 80015f8:	4629      	mov	r1, r5
 80015fa:	f7ff f8f3 	bl	80007e4 <__aeabi_ddiv>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4909      	ldr	r1, [pc, #36]	; (8001628 <_Z13set_loop_freqi+0x68>)
 8001604:	680c      	ldr	r4, [r1, #0]
 8001606:	4610      	mov	r0, r2
 8001608:	4619      	mov	r1, r3
 800160a:	f7ff fa83 	bl	8000b14 <__aeabi_d2uiz>
 800160e:	4603      	mov	r3, r0
 8001610:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bdb0      	pop	{r4, r5, r7, pc}
 800161a:	bf00      	nop
 800161c:	f3af 8000 	nop.w
 8001620:	00000000 	.word	0x00000000
 8001624:	41a443fd 	.word	0x41a443fd
 8001628:	20000110 	.word	0x20000110

0800162c <_Z4loopv>:

void loop() {
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
	uint32_t current_time = HAL_GetTick();
 8001632:	f000 ff25 	bl	8002480 <HAL_GetTick>
 8001636:	6078      	str	r0, [r7, #4]
	if(current_time-last_time > time_switch_cmd) {
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <_Z4loopv+0x78>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	1ad2      	subs	r2, r2, r3
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <_Z4loopv+0x7c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	429a      	cmp	r2, r3
 8001646:	d925      	bls.n	8001694 <_Z4loopv+0x68>
		i_cmd += 1;
 8001648:	4b18      	ldr	r3, [pc, #96]	; (80016ac <_Z4loopv+0x80>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	3301      	adds	r3, #1
 800164e:	4a17      	ldr	r2, [pc, #92]	; (80016ac <_Z4loopv+0x80>)
 8001650:	6013      	str	r3, [r2, #0]
		if(i_cmd == 4) {
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <_Z4loopv+0x80>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b04      	cmp	r3, #4
 8001658:	d102      	bne.n	8001660 <_Z4loopv+0x34>
			i_cmd = 0;
 800165a:	4b14      	ldr	r3, [pc, #80]	; (80016ac <_Z4loopv+0x80>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
		}
		last_time = current_time;
 8001660:	4a10      	ldr	r2, [pc, #64]	; (80016a4 <_Z4loopv+0x78>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]

		holo_drive.set_cmd_vel(cmds[i_cmd]);
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <_Z4loopv+0x80>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4911      	ldr	r1, [pc, #68]	; (80016b0 <_Z4loopv+0x84>)
 800166c:	4613      	mov	r3, r2
 800166e:	005b      	lsls	r3, r3, #1
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	440b      	add	r3, r1
 8001676:	edd3 6a00 	vldr	s13, [r3]
 800167a:	ed93 7a01 	vldr	s14, [r3, #4]
 800167e:	edd3 7a02 	vldr	s15, [r3, #8]
 8001682:	eeb0 0a66 	vmov.f32	s0, s13
 8001686:	eef0 0a47 	vmov.f32	s1, s14
 800168a:	eeb0 1a67 	vmov.f32	s2, s15
 800168e:	4809      	ldr	r0, [pc, #36]	; (80016b4 <_Z4loopv+0x88>)
 8001690:	f7ff fbf8 	bl	8000e84 <_ZN15HolonomicDrive311set_cmd_velE3Vel>
	}

	holo_drive.spin_once_motors_control();
 8001694:	4807      	ldr	r0, [pc, #28]	; (80016b4 <_Z4loopv+0x88>)
 8001696:	f7ff fd57 	bl	8001148 <_ZN15HolonomicDrive324spin_once_motors_controlEv>
}
 800169a:	bf00      	nop
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	2000040c 	.word	0x2000040c
 80016a8:	20000410 	.word	0x20000410
 80016ac:	20000414 	.word	0x20000414
 80016b0:	20000418 	.word	0x20000418
 80016b4:	200002c8 	.word	0x200002c8

080016b8 <_ZN7StepperC1ERKS_>:
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	4a11      	ldr	r2, [pc, #68]	; (8001708 <_ZN7StepperC1ERKS_+0x50>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	1d10      	adds	r0, r2, #4
 80016ce:	3304      	adds	r3, #4
 80016d0:	224c      	movs	r2, #76	; 0x4c
 80016d2:	4619      	mov	r1, r3
 80016d4:	f003 fb62 	bl	8004d9c <memcpy>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	651a      	str	r2, [r3, #80]	; 0x50
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	659a      	str	r2, [r3, #88]	; 0x58
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	65da      	str	r2, [r3, #92]	; 0x5c
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	08004e80 	.word	0x08004e80

0800170c <_ZN15HolonomicDrive3aSERKS_>:
	float x = 0;
	float y = 0;
	float theta = 0;
};

class HolonomicDrive3 {
 800170c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	1d1a      	adds	r2, r3, #4
 800171a:	2502      	movs	r5, #2
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	1d1c      	adds	r4, r3, #4
 8001720:	4616      	mov	r6, r2
 8001722:	e006      	b.n	8001732 <_ZN15HolonomicDrive3aSERKS_+0x26>
 8001724:	4621      	mov	r1, r4
 8001726:	4630      	mov	r0, r6
 8001728:	f7ff fb1e 	bl	8000d68 <_ZN7StepperaSERKS_>
 800172c:	3660      	adds	r6, #96	; 0x60
 800172e:	3460      	adds	r4, #96	; 0x60
 8001730:	3d01      	subs	r5, #1
 8001732:	2d00      	cmp	r5, #0
 8001734:	daf6      	bge.n	8001724 <_ZN15HolonomicDrive3aSERKS_+0x18>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f8d3 2128 	ldr.w	r2, [r3, #296]	; 0x128
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8001756:	f502 7296 	add.w	r2, r2, #300	; 0x12c
 800175a:	ca07      	ldmia	r2, {r0, r1, r2}
 800175c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	f503 719c 	add.w	r1, r3, #312	; 0x138
 8001766:	2202      	movs	r2, #2
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800176e:	e004      	b.n	800177a <_ZN15HolonomicDrive3aSERKS_+0x6e>
 8001770:	6818      	ldr	r0, [r3, #0]
 8001772:	6008      	str	r0, [r1, #0]
 8001774:	3104      	adds	r1, #4
 8001776:	3304      	adds	r3, #4
 8001778:	3a01      	subs	r2, #1
 800177a:	2a00      	cmp	r2, #0
 800177c:	daf8      	bge.n	8001770 <_ZN15HolonomicDrive3aSERKS_+0x64>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4618      	mov	r0, r3
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800178a:	f5ad 7d75 	sub.w	sp, sp, #980	; 0x3d4
 800178e:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001790:	f000 fe11 	bl	80023b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001794:	f000 f940 	bl	8001a18 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001798:	f000 fc06 	bl	8001fa8 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 800179c:	f000 f992 	bl	8001ac4 <_ZL12MX_TIM1_Initv>
  MX_TIM4_Init();
 80017a0:	f000 fa60 	bl	8001c64 <_ZL12MX_TIM4_Initv>
  MX_TIM8_Init();
 80017a4:	f000 fb30 	bl	8001e08 <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 80017a8:	f000 faee 	bl	8001d88 <_ZL12MX_TIM6_Initv>
  /* USER CODE BEGIN 2 */

  stepper0 = Stepper(htim8, GPIOA, GPIO_PIN_4);
 80017ac:	4e8c      	ldr	r6, [pc, #560]	; (80019e0 <main+0x258>)
 80017ae:	46bc      	mov	ip, r7
 80017b0:	2310      	movs	r3, #16
 80017b2:	9311      	str	r3, [sp, #68]	; 0x44
 80017b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017b8:	9310      	str	r3, [sp, #64]	; 0x40
 80017ba:	466d      	mov	r5, sp
 80017bc:	f106 040c 	add.w	r4, r6, #12
 80017c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80017ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80017d0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80017d4:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80017d8:	4660      	mov	r0, ip
 80017da:	f7ff fe1d 	bl	8001418 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>
 80017de:	463b      	mov	r3, r7
 80017e0:	4619      	mov	r1, r3
 80017e2:	4880      	ldr	r0, [pc, #512]	; (80019e4 <main+0x25c>)
 80017e4:	f7ff fac0 	bl	8000d68 <_ZN7StepperaSERKS_>
 80017e8:	463b      	mov	r3, r7
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff feb6 	bl	800155c <_ZN7StepperD1Ev>
  stepper1 = Stepper(htim1, GPIOA, GPIO_PIN_0);
 80017f0:	4e7d      	ldr	r6, [pc, #500]	; (80019e8 <main+0x260>)
 80017f2:	f107 0c60 	add.w	ip, r7, #96	; 0x60
 80017f6:	2301      	movs	r3, #1
 80017f8:	9311      	str	r3, [sp, #68]	; 0x44
 80017fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80017fe:	9310      	str	r3, [sp, #64]	; 0x40
 8001800:	466d      	mov	r5, sp
 8001802:	f106 040c 	add.w	r4, r6, #12
 8001806:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001808:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800180c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800180e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001810:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001812:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001816:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800181a:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800181e:	4660      	mov	r0, ip
 8001820:	f7ff fdfa 	bl	8001418 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>
 8001824:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001828:	4619      	mov	r1, r3
 800182a:	4870      	ldr	r0, [pc, #448]	; (80019ec <main+0x264>)
 800182c:	f7ff fa9c 	bl	8000d68 <_ZN7StepperaSERKS_>
 8001830:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff fe91 	bl	800155c <_ZN7StepperD1Ev>
  stepper2 = Stepper(htim4, GPIOA, GPIO_PIN_1);
 800183a:	4e6d      	ldr	r6, [pc, #436]	; (80019f0 <main+0x268>)
 800183c:	f107 0cc0 	add.w	ip, r7, #192	; 0xc0
 8001840:	2302      	movs	r3, #2
 8001842:	9311      	str	r3, [sp, #68]	; 0x44
 8001844:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001848:	9310      	str	r3, [sp, #64]	; 0x40
 800184a:	466d      	mov	r5, sp
 800184c:	f106 040c 	add.w	r4, r6, #12
 8001850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001858:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800185a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800185c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001860:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001864:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001868:	4660      	mov	r0, ip
 800186a:	f7ff fdd5 	bl	8001418 <_ZN7StepperC1E17TIM_HandleTypeDefP12GPIO_TypeDeft>
 800186e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001872:	4619      	mov	r1, r3
 8001874:	485f      	ldr	r0, [pc, #380]	; (80019f4 <main+0x26c>)
 8001876:	f7ff fa77 	bl	8000d68 <_ZN7StepperaSERKS_>
 800187a:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff fe6c 	bl	800155c <_ZN7StepperD1Ev>

  holo_drive = HolonomicDrive3(stepper0, stepper1, stepper2, 0.029, 0.175);
 8001884:	f507 7319 	add.w	r3, r7, #612	; 0x264
 8001888:	4956      	ldr	r1, [pc, #344]	; (80019e4 <main+0x25c>)
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff ff14 	bl	80016b8 <_ZN7StepperC1ERKS_>
 8001890:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 8001894:	4955      	ldr	r1, [pc, #340]	; (80019ec <main+0x264>)
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff ff0e 	bl	80016b8 <_ZN7StepperC1ERKS_>
 800189c:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80018a0:	4954      	ldr	r1, [pc, #336]	; (80019f4 <main+0x26c>)
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7ff ff08 	bl	80016b8 <_ZN7StepperC1ERKS_>
 80018a8:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80018ac:	f507 7231 	add.w	r2, r7, #708	; 0x2c4
 80018b0:	f507 7119 	add.w	r1, r7, #612	; 0x264
 80018b4:	f507 7090 	add.w	r0, r7, #288	; 0x120
 80018b8:	eddf 0a4f 	vldr	s1, [pc, #316]	; 80019f8 <main+0x270>
 80018bc:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 80019fc <main+0x274>
 80018c0:	f7ff fa76 	bl	8000db0 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>
 80018c4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80018c8:	4619      	mov	r1, r3
 80018ca:	484d      	ldr	r0, [pc, #308]	; (8001a00 <main+0x278>)
 80018cc:	f7ff ff1e 	bl	800170c <_ZN15HolonomicDrive3aSERKS_>
 80018d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fcff 	bl	80012d8 <_ZN15HolonomicDrive3D1Ev>
 80018da:	f507 7349 	add.w	r3, r7, #804	; 0x324
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff fe3c 	bl	800155c <_ZN7StepperD1Ev>
 80018e4:	f507 7331 	add.w	r3, r7, #708	; 0x2c4
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fe37 	bl	800155c <_ZN7StepperD1Ev>
 80018ee:	f507 7319 	add.w	r3, r7, #612	; 0x264
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fe32 	bl	800155c <_ZN7StepperD1Ev>

  set_loop_freq(100);
 80018f8:	2064      	movs	r0, #100	; 0x64
 80018fa:	f7ff fe61 	bl	80015c0 <_Z13set_loop_freqi>
  HAL_TIM_Base_Start_IT(&htim6);
 80018fe:	4841      	ldr	r0, [pc, #260]	; (8001a04 <main+0x27c>)
 8001900:	f001 fe76 	bl	80035f0 <HAL_TIM_Base_Start_IT>

  float sp = 0.5;
 8001904:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8001908:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384

  cmds[0] = {};
 800190c:	4b3e      	ldr	r3, [pc, #248]	; (8001a08 <main+0x280>)
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
 8001914:	4b3c      	ldr	r3, [pc, #240]	; (8001a08 <main+0x280>)
 8001916:	f04f 0200 	mov.w	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	4b3a      	ldr	r3, [pc, #232]	; (8001a08 <main+0x280>)
 800191e:	f04f 0200 	mov.w	r2, #0
 8001922:	609a      	str	r2, [r3, #8]
  cmds[0].x = sp;
 8001924:	4a38      	ldr	r2, [pc, #224]	; (8001a08 <main+0x280>)
 8001926:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800192a:	6013      	str	r3, [r2, #0]
  cmds[1] = {};
 800192c:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <main+0x280>)
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
 8001934:	4b34      	ldr	r3, [pc, #208]	; (8001a08 <main+0x280>)
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <main+0x280>)
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	615a      	str	r2, [r3, #20]
  cmds[1].y = sp;
 8001944:	4a30      	ldr	r2, [pc, #192]	; (8001a08 <main+0x280>)
 8001946:	f8d7 3384 	ldr.w	r3, [r7, #900]	; 0x384
 800194a:	6113      	str	r3, [r2, #16]
  cmds[2] = {};
 800194c:	4b2e      	ldr	r3, [pc, #184]	; (8001a08 <main+0x280>)
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	619a      	str	r2, [r3, #24]
 8001954:	4b2c      	ldr	r3, [pc, #176]	; (8001a08 <main+0x280>)
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	61da      	str	r2, [r3, #28]
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <main+0x280>)
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	621a      	str	r2, [r3, #32]
  cmds[2].x = -sp;
 8001964:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 8001968:	eef1 7a67 	vneg.f32	s15, s15
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <main+0x280>)
 800196e:	edc3 7a06 	vstr	s15, [r3, #24]
  cmds[3] = {};
 8001972:	4b25      	ldr	r3, [pc, #148]	; (8001a08 <main+0x280>)
 8001974:	f04f 0200 	mov.w	r2, #0
 8001978:	625a      	str	r2, [r3, #36]	; 0x24
 800197a:	4b23      	ldr	r3, [pc, #140]	; (8001a08 <main+0x280>)
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	629a      	str	r2, [r3, #40]	; 0x28
 8001982:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <main+0x280>)
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
  cmds[3].y = -sp;
 800198a:	edd7 7ae1 	vldr	s15, [r7, #900]	; 0x384
 800198e:	eef1 7a67 	vneg.f32	s15, s15
 8001992:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <main+0x280>)
 8001994:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  time_switch_cmd = 1000; //ms
 8001998:	4b1c      	ldr	r3, [pc, #112]	; (8001a0c <main+0x284>)
 800199a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800199e:	601a      	str	r2, [r3, #0]
  i_cmd = 0;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <main+0x288>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]

  last_time = HAL_GetTick();
 80019a6:	f000 fd6b 	bl	8002480 <HAL_GetTick>
 80019aa:	4603      	mov	r3, r0
 80019ac:	4a19      	ldr	r2, [pc, #100]	; (8001a14 <main+0x28c>)
 80019ae:	6013      	str	r3, [r2, #0]

  holo_drive.set_cmd_vel(cmds[i_cmd]);
 80019b0:	4b17      	ldr	r3, [pc, #92]	; (8001a10 <main+0x288>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4914      	ldr	r1, [pc, #80]	; (8001a08 <main+0x280>)
 80019b6:	4613      	mov	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	440b      	add	r3, r1
 80019c0:	edd3 6a00 	vldr	s13, [r3]
 80019c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80019c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80019cc:	eeb0 0a66 	vmov.f32	s0, s13
 80019d0:	eef0 0a47 	vmov.f32	s1, s14
 80019d4:	eeb0 1a67 	vmov.f32	s2, s15
 80019d8:	4809      	ldr	r0, [pc, #36]	; (8001a00 <main+0x278>)
 80019da:	f7ff fa53 	bl	8000e84 <_ZN15HolonomicDrive311set_cmd_velE3Vel>

  while (1)
 80019de:	e7fe      	b.n	80019de <main+0x256>
 80019e0:	2000015c 	.word	0x2000015c
 80019e4:	200001a8 	.word	0x200001a8
 80019e8:	20000078 	.word	0x20000078
 80019ec:	20000208 	.word	0x20000208
 80019f0:	200000c4 	.word	0x200000c4
 80019f4:	20000268 	.word	0x20000268
 80019f8:	3e333333 	.word	0x3e333333
 80019fc:	3ced9168 	.word	0x3ced9168
 8001a00:	200002c8 	.word	0x200002c8
 8001a04:	20000110 	.word	0x20000110
 8001a08:	20000418 	.word	0x20000418
 8001a0c:	20000410 	.word	0x20000410
 8001a10:	20000414 	.word	0x20000414
 8001a14:	2000040c 	.word	0x2000040c

08001a18 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b094      	sub	sp, #80	; 0x50
 8001a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a1e:	f107 0318 	add.w	r3, r7, #24
 8001a22:	2238      	movs	r2, #56	; 0x38
 8001a24:	2100      	movs	r1, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f003 f98a 	bl	8004d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a2c:	1d3b      	adds	r3, r7, #4
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
 8001a38:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	f000 ffd6 	bl	80029ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a40:	2302      	movs	r3, #2
 8001a42:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a4a:	2340      	movs	r3, #64	; 0x40
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a52:	2302      	movs	r3, #2
 8001a54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001a56:	2304      	movs	r3, #4
 8001a58:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001a5a:	2355      	movs	r3, #85	; 0x55
 8001a5c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001a62:	2302      	movs	r3, #2
 8001a64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001a66:	2302      	movs	r3, #2
 8001a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a6a:	f107 0318 	add.w	r3, r7, #24
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f001 f870 	bl	8002b54 <HAL_RCC_OscConfig>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf14      	ite	ne
 8001a7a:	2301      	movne	r3, #1
 8001a7c:	2300      	moveq	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8001a84:	f000 face 	bl	8002024 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a88:	230f      	movs	r3, #15
 8001a8a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2104      	movs	r1, #4
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f001 fb69 	bl	8003178 <HAL_RCC_ClockConfig>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	bf14      	ite	ne
 8001aac:	2301      	movne	r3, #1
 8001aae:	2300      	moveq	r3, #0
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001ab6:	f000 fab5 	bl	8002024 <Error_Handler>
  }
}
 8001aba:	bf00      	nop
 8001abc:	3750      	adds	r7, #80	; 0x50
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b09c      	sub	sp, #112	; 0x70
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
 8001af2:	611a      	str	r2, [r3, #16]
 8001af4:	615a      	str	r2, [r3, #20]
 8001af6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2234      	movs	r2, #52	; 0x34
 8001afc:	2100      	movs	r1, #0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 f91e 	bl	8004d40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b04:	4b55      	ldr	r3, [pc, #340]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001b06:	4a56      	ldr	r2, [pc, #344]	; (8001c60 <_ZL12MX_TIM1_Initv+0x19c>)
 8001b08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 260;
 8001b0a:	4b54      	ldr	r3, [pc, #336]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001b0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b12:	4b52      	ldr	r3, [pc, #328]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b20:	4b4e      	ldr	r3, [pc, #312]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b26:	4b4d      	ldr	r3, [pc, #308]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b32:	484a      	ldr	r0, [pc, #296]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001b34:	f001 fd04 	bl	8003540 <HAL_TIM_Base_Init>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	bf14      	ite	ne
 8001b3e:	2301      	movne	r3, #1
 8001b40:	2300      	moveq	r3, #0
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8001b48:	f000 fa6c 	bl	8002024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b50:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b52:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001b56:	4619      	mov	r1, r3
 8001b58:	4840      	ldr	r0, [pc, #256]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001b5a:	f002 fa0f 	bl	8003f7c <HAL_TIM_ConfigClockSource>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf14      	ite	ne
 8001b64:	2301      	movne	r3, #1
 8001b66:	2300      	moveq	r3, #0
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8001b6e:	f000 fa59 	bl	8002024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b72:	483a      	ldr	r0, [pc, #232]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001b74:	f001 fda6 	bl	80036c4 <HAL_TIM_PWM_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf14      	ite	ne
 8001b7e:	2301      	movne	r3, #1
 8001b80:	2300      	moveq	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <_ZL12MX_TIM1_Initv+0xc8>
  {
    Error_Handler();
 8001b88:	f000 fa4c 	bl	8002024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b90:	2300      	movs	r3, #0
 8001b92:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	482f      	ldr	r0, [pc, #188]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001ba0:	f002 ff62 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	bf14      	ite	ne
 8001baa:	2301      	movne	r3, #1
 8001bac:	2300      	moveq	r3, #0
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <_ZL12MX_TIM1_Initv+0xf4>
  {
    Error_Handler();
 8001bb4:	f000 fa36 	bl	8002024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb8:	2360      	movs	r3, #96	; 0x60
 8001bba:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bd8:	2200      	movs	r2, #0
 8001bda:	4619      	mov	r1, r3
 8001bdc:	481f      	ldr	r0, [pc, #124]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001bde:	f002 f8b9 	bl	8003d54 <HAL_TIM_PWM_ConfigChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf14      	ite	ne
 8001be8:	2301      	movne	r3, #1
 8001bea:	2300      	moveq	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 8001bf2:	f000 fa17 	bl	8002024 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c0e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c20:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c26:	2300      	movs	r3, #0
 8001c28:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	480a      	ldr	r0, [pc, #40]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001c34:	f002 ff9a 	bl	8004b6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	bf14      	ite	ne
 8001c3e:	2301      	movne	r3, #1
 8001c40:	2300      	moveq	r3, #0
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <_ZL12MX_TIM1_Initv+0x188>
  {
    Error_Handler();
 8001c48:	f000 f9ec 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c4c:	4803      	ldr	r0, [pc, #12]	; (8001c5c <_ZL12MX_TIM1_Initv+0x198>)
 8001c4e:	f000 fabf 	bl	80021d0 <HAL_TIM_MspPostInit>

}
 8001c52:	bf00      	nop
 8001c54:	3770      	adds	r7, #112	; 0x70
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	20000078 	.word	0x20000078
 8001c60:	40012c00 	.word	0x40012c00

08001c64 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08e      	sub	sp, #56	; 0x38
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c84:	463b      	mov	r3, r7
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
 8001c90:	611a      	str	r2, [r3, #16]
 8001c92:	615a      	str	r2, [r3, #20]
 8001c94:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c96:	4b3a      	ldr	r3, [pc, #232]	; (8001d80 <_ZL12MX_TIM4_Initv+0x11c>)
 8001c98:	4a3a      	ldr	r2, [pc, #232]	; (8001d84 <_ZL12MX_TIM4_Initv+0x120>)
 8001c9a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 260;
 8001c9c:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <_ZL12MX_TIM4_Initv+0x11c>)
 8001c9e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ca2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b36      	ldr	r3, [pc, #216]	; (8001d80 <_ZL12MX_TIM4_Initv+0x11c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001caa:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <_ZL12MX_TIM4_Initv+0x11c>)
 8001cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	4b33      	ldr	r3, [pc, #204]	; (8001d80 <_ZL12MX_TIM4_Initv+0x11c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b31      	ldr	r3, [pc, #196]	; (8001d80 <_ZL12MX_TIM4_Initv+0x11c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cbe:	4830      	ldr	r0, [pc, #192]	; (8001d80 <_ZL12MX_TIM4_Initv+0x11c>)
 8001cc0:	f001 fc3e 	bl	8003540 <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	bf14      	ite	ne
 8001cca:	2301      	movne	r3, #1
 8001ccc:	2300      	moveq	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <_ZL12MX_TIM4_Initv+0x74>
  {
    Error_Handler();
 8001cd4:	f000 f9a6 	bl	8002024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4826      	ldr	r0, [pc, #152]	; (8001d80 <_ZL12MX_TIM4_Initv+0x11c>)
 8001ce6:	f002 f949 	bl	8003f7c <HAL_TIM_ConfigClockSource>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	bf14      	ite	ne
 8001cf0:	2301      	movne	r3, #1
 8001cf2:	2300      	moveq	r3, #0
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <_ZL12MX_TIM4_Initv+0x9a>
  {
    Error_Handler();
 8001cfa:	f000 f993 	bl	8002024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001cfe:	4820      	ldr	r0, [pc, #128]	; (8001d80 <_ZL12MX_TIM4_Initv+0x11c>)
 8001d00:	f001 fce0 	bl	80036c4 <HAL_TIM_PWM_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	bf14      	ite	ne
 8001d0a:	2301      	movne	r3, #1
 8001d0c:	2300      	moveq	r3, #0
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <_ZL12MX_TIM4_Initv+0xb4>
  {
    Error_Handler();
 8001d14:	f000 f986 	bl	8002024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d20:	f107 031c 	add.w	r3, r7, #28
 8001d24:	4619      	mov	r1, r3
 8001d26:	4816      	ldr	r0, [pc, #88]	; (8001d80 <_ZL12MX_TIM4_Initv+0x11c>)
 8001d28:	f002 fe9e 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	bf14      	ite	ne
 8001d32:	2301      	movne	r3, #1
 8001d34:	2300      	moveq	r3, #0
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d001      	beq.n	8001d40 <_ZL12MX_TIM4_Initv+0xdc>
  {
    Error_Handler();
 8001d3c:	f000 f972 	bl	8002024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d40:	2360      	movs	r3, #96	; 0x60
 8001d42:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d50:	463b      	mov	r3, r7
 8001d52:	2200      	movs	r2, #0
 8001d54:	4619      	mov	r1, r3
 8001d56:	480a      	ldr	r0, [pc, #40]	; (8001d80 <_ZL12MX_TIM4_Initv+0x11c>)
 8001d58:	f001 fffc 	bl	8003d54 <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	bf14      	ite	ne
 8001d62:	2301      	movne	r3, #1
 8001d64:	2300      	moveq	r3, #0
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <_ZL12MX_TIM4_Initv+0x10c>
  {
    Error_Handler();
 8001d6c:	f000 f95a 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001d70:	4803      	ldr	r0, [pc, #12]	; (8001d80 <_ZL12MX_TIM4_Initv+0x11c>)
 8001d72:	f000 fa2d 	bl	80021d0 <HAL_TIM_MspPostInit>

}
 8001d76:	bf00      	nop
 8001d78:	3738      	adds	r7, #56	; 0x38
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200000c4 	.word	0x200000c4
 8001d84:	40000800 	.word	0x40000800

08001d88 <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8e:	1d3b      	adds	r3, r7, #4
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d98:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001d9a:	4a1a      	ldr	r2, [pc, #104]	; (8001e04 <_ZL12MX_TIM6_Initv+0x7c>)
 8001d9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001da0:	2264      	movs	r2, #100	; 0x64
 8001da2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da4:	4b16      	ldr	r3, [pc, #88]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001dac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001db0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db2:	4b13      	ldr	r3, [pc, #76]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001db8:	4811      	ldr	r0, [pc, #68]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001dba:	f001 fbc1 	bl	8003540 <HAL_TIM_Base_Init>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bf14      	ite	ne
 8001dc4:	2301      	movne	r3, #1
 8001dc6:	2300      	moveq	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8001dce:	f000 f929 	bl	8002024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4808      	ldr	r0, [pc, #32]	; (8001e00 <_ZL12MX_TIM6_Initv+0x78>)
 8001de0:	f002 fe42 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bf14      	ite	ne
 8001dea:	2301      	movne	r3, #1
 8001dec:	2300      	moveq	r3, #0
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8001df4:	f000 f916 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000110 	.word	0x20000110
 8001e04:	40001000 	.word	0x40001000

08001e08 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b09c      	sub	sp, #112	; 0x70
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
 8001e38:	615a      	str	r2, [r3, #20]
 8001e3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	2234      	movs	r2, #52	; 0x34
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f002 ff7c 	bl	8004d40 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e48:	4b55      	ldr	r3, [pc, #340]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001e4a:	4a56      	ldr	r2, [pc, #344]	; (8001fa4 <_ZL12MX_TIM8_Initv+0x19c>)
 8001e4c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 260;
 8001e4e:	4b54      	ldr	r3, [pc, #336]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001e50:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001e54:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e56:	4b52      	ldr	r3, [pc, #328]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001e5c:	4b50      	ldr	r3, [pc, #320]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e62:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e64:	4b4e      	ldr	r3, [pc, #312]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e6a:	4b4d      	ldr	r3, [pc, #308]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e70:	4b4b      	ldr	r3, [pc, #300]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e76:	484a      	ldr	r0, [pc, #296]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001e78:	f001 fb62 	bl	8003540 <HAL_TIM_Base_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	bf14      	ite	ne
 8001e82:	2301      	movne	r3, #1
 8001e84:	2300      	moveq	r3, #0
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d001      	beq.n	8001e90 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8001e8c:	f000 f8ca 	bl	8002024 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e94:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e96:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4840      	ldr	r0, [pc, #256]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001e9e:	f002 f86d 	bl	8003f7c <HAL_TIM_ConfigClockSource>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	bf14      	ite	ne
 8001ea8:	2301      	movne	r3, #1
 8001eaa:	2300      	moveq	r3, #0
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <_ZL12MX_TIM8_Initv+0xae>
  {
    Error_Handler();
 8001eb2:	f000 f8b7 	bl	8002024 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001eb6:	483a      	ldr	r0, [pc, #232]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001eb8:	f001 fc04 	bl	80036c4 <HAL_TIM_PWM_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	bf14      	ite	ne
 8001ec2:	2301      	movne	r3, #1
 8001ec4:	2300      	moveq	r3, #0
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <_ZL12MX_TIM8_Initv+0xc8>
  {
    Error_Handler();
 8001ecc:	f000 f8aa 	bl	8002024 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001edc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	482f      	ldr	r0, [pc, #188]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001ee4:	f002 fdc0 	bl	8004a68 <HAL_TIMEx_MasterConfigSynchronization>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	bf14      	ite	ne
 8001eee:	2301      	movne	r3, #1
 8001ef0:	2300      	moveq	r3, #0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <_ZL12MX_TIM8_Initv+0xf4>
  {
    Error_Handler();
 8001ef8:	f000 f894 	bl	8002024 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001efc:	2360      	movs	r3, #96	; 0x60
 8001efe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f04:	2300      	movs	r3, #0
 8001f06:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001f14:	2300      	movs	r3, #0
 8001f16:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f18:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	4619      	mov	r1, r3
 8001f20:	481f      	ldr	r0, [pc, #124]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001f22:	f001 ff17 	bl	8003d54 <HAL_TIM_PWM_ConfigChannel>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	bf14      	ite	ne
 8001f2c:	2301      	movne	r3, #1
 8001f2e:	2300      	moveq	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <_ZL12MX_TIM8_Initv+0x132>
  {
    Error_Handler();
 8001f36:	f000 f875 	bl	8002024 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f52:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001f60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f64:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f66:	2300      	movs	r3, #0
 8001f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	480a      	ldr	r0, [pc, #40]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001f78:	f002 fdf8 	bl	8004b6c <HAL_TIMEx_ConfigBreakDeadTime>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	bf14      	ite	ne
 8001f82:	2301      	movne	r3, #1
 8001f84:	2300      	moveq	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <_ZL12MX_TIM8_Initv+0x188>
  {
    Error_Handler();
 8001f8c:	f000 f84a 	bl	8002024 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001f90:	4803      	ldr	r0, [pc, #12]	; (8001fa0 <_ZL12MX_TIM8_Initv+0x198>)
 8001f92:	f000 f91d 	bl	80021d0 <HAL_TIM_MspPostInit>

}
 8001f96:	bf00      	nop
 8001f98:	3770      	adds	r7, #112	; 0x70
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	2000015c 	.word	0x2000015c
 8001fa4:	40013400 	.word	0x40013400

08001fa8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b086      	sub	sp, #24
 8001fac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
 8001fb4:	605a      	str	r2, [r3, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
 8001fb8:	60da      	str	r2, [r3, #12]
 8001fba:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbc:	4b18      	ldr	r3, [pc, #96]	; (8002020 <_ZL12MX_GPIO_Initv+0x78>)
 8001fbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc0:	4a17      	ldr	r2, [pc, #92]	; (8002020 <_ZL12MX_GPIO_Initv+0x78>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc8:	4b15      	ldr	r3, [pc, #84]	; (8002020 <_ZL12MX_GPIO_Initv+0x78>)
 8001fca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	603b      	str	r3, [r7, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	2193      	movs	r1, #147	; 0x93
 8001fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fdc:	f000 fcee 	bl	80029bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8001fe0:	2313      	movs	r3, #19
 8001fe2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f000 fb5e 	bl	80026b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002000:	2311      	movs	r3, #17
 8002002:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200c:	1d3b      	adds	r3, r7, #4
 800200e:	4619      	mov	r1, r3
 8002010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002014:	f000 fb50 	bl	80026b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002018:	bf00      	nop
 800201a:	3718      	adds	r7, #24
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	40021000 	.word	0x40021000

08002024 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002028:	b672      	cpsid	i
}
 800202a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800202c:	e7fe      	b.n	800202c <Error_Handler+0x8>
	...

08002030 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d110      	bne.n	8002062 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002046:	4293      	cmp	r3, r2
 8002048:	d10b      	bne.n	8002062 <_Z41__static_initialization_and_destruction_0ii+0x32>
Stepper stepper0;
 800204a:	4812      	ldr	r0, [pc, #72]	; (8002094 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800204c:	f7ff f9d4 	bl	80013f8 <_ZN7StepperC1Ev>
Stepper stepper1;
 8002050:	4811      	ldr	r0, [pc, #68]	; (8002098 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002052:	f7ff f9d1 	bl	80013f8 <_ZN7StepperC1Ev>
Stepper stepper2;
 8002056:	4811      	ldr	r0, [pc, #68]	; (800209c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8002058:	f7ff f9ce 	bl	80013f8 <_ZN7StepperC1Ev>
HolonomicDrive3 holo_drive;
 800205c:	4810      	ldr	r0, [pc, #64]	; (80020a0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800205e:	f7ff f91b 	bl	8001298 <_ZN15HolonomicDrive3C1Ev>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d110      	bne.n	800208a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800206e:	4293      	cmp	r3, r2
 8002070:	d10b      	bne.n	800208a <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8002072:	480b      	ldr	r0, [pc, #44]	; (80020a0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8002074:	f7ff f930 	bl	80012d8 <_ZN15HolonomicDrive3D1Ev>
Stepper stepper2;
 8002078:	4808      	ldr	r0, [pc, #32]	; (800209c <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 800207a:	f7ff fa6f 	bl	800155c <_ZN7StepperD1Ev>
Stepper stepper1;
 800207e:	4806      	ldr	r0, [pc, #24]	; (8002098 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8002080:	f7ff fa6c 	bl	800155c <_ZN7StepperD1Ev>
Stepper stepper0;
 8002084:	4803      	ldr	r0, [pc, #12]	; (8002094 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8002086:	f7ff fa69 	bl	800155c <_ZN7StepperD1Ev>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200001a8 	.word	0x200001a8
 8002098:	20000208 	.word	0x20000208
 800209c:	20000268 	.word	0x20000268
 80020a0:	200002c8 	.word	0x200002c8

080020a4 <_GLOBAL__sub_I_htim1>:
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020ac:	2001      	movs	r0, #1
 80020ae:	f7ff ffbf 	bl	8002030 <_Z41__static_initialization_and_destruction_0ii>
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_GLOBAL__sub_D_htim1>:
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80020bc:	2000      	movs	r0, #0
 80020be:	f7ff ffb7 	bl	8002030 <_Z41__static_initialization_and_destruction_0ii>
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ca:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <HAL_MspInit+0x44>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	4a0e      	ldr	r2, [pc, #56]	; (8002108 <HAL_MspInit+0x44>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6613      	str	r3, [r2, #96]	; 0x60
 80020d6:	4b0c      	ldr	r3, [pc, #48]	; (8002108 <HAL_MspInit+0x44>)
 80020d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	607b      	str	r3, [r7, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_MspInit+0x44>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_MspInit+0x44>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ec:	6593      	str	r3, [r2, #88]	; 0x58
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_MspInit+0x44>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020f6:	603b      	str	r3, [r7, #0]
 80020f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80020fa:	f000 fd1b 	bl	8002b34 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40021000 	.word	0x40021000

0800210c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a28      	ldr	r2, [pc, #160]	; (80021bc <HAL_TIM_Base_MspInit+0xb0>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d10c      	bne.n	8002138 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800211e:	4b28      	ldr	r3, [pc, #160]	; (80021c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002122:	4a27      	ldr	r2, [pc, #156]	; (80021c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002124:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002128:	6613      	str	r3, [r2, #96]	; 0x60
 800212a:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <HAL_TIM_Base_MspInit+0xb4>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002136:	e03c      	b.n	80021b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a21      	ldr	r2, [pc, #132]	; (80021c4 <HAL_TIM_Base_MspInit+0xb8>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d10c      	bne.n	800215c <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002142:	4b1f      	ldr	r3, [pc, #124]	; (80021c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	4a1e      	ldr	r2, [pc, #120]	; (80021c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	6593      	str	r3, [r2, #88]	; 0x58
 800214e:	4b1c      	ldr	r3, [pc, #112]	; (80021c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
}
 800215a:	e02a      	b.n	80021b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM6)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a19      	ldr	r2, [pc, #100]	; (80021c8 <HAL_TIM_Base_MspInit+0xbc>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d114      	bne.n	8002190 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002166:	4b16      	ldr	r3, [pc, #88]	; (80021c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216a:	4a15      	ldr	r2, [pc, #84]	; (80021c0 <HAL_TIM_Base_MspInit+0xb4>)
 800216c:	f043 0310 	orr.w	r3, r3, #16
 8002170:	6593      	str	r3, [r2, #88]	; 0x58
 8002172:	4b13      	ldr	r3, [pc, #76]	; (80021c0 <HAL_TIM_Base_MspInit+0xb4>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800217e:	2200      	movs	r2, #0
 8002180:	2100      	movs	r1, #0
 8002182:	2036      	movs	r0, #54	; 0x36
 8002184:	f000 fa63 	bl	800264e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002188:	2036      	movs	r0, #54	; 0x36
 800218a:	f000 fa7a 	bl	8002682 <HAL_NVIC_EnableIRQ>
}
 800218e:	e010      	b.n	80021b2 <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM8)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0d      	ldr	r2, [pc, #52]	; (80021cc <HAL_TIM_Base_MspInit+0xc0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d10b      	bne.n	80021b2 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_TIM_Base_MspInit+0xb4>)
 800219c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800219e:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <HAL_TIM_Base_MspInit+0xb4>)
 80021a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021a4:	6613      	str	r3, [r2, #96]	; 0x60
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_TIM_Base_MspInit+0xb4>)
 80021a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021aa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ae:	60bb      	str	r3, [r7, #8]
 80021b0:	68bb      	ldr	r3, [r7, #8]
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40012c00 	.word	0x40012c00
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40000800 	.word	0x40000800
 80021c8:	40001000 	.word	0x40001000
 80021cc:	40013400 	.word	0x40013400

080021d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b08a      	sub	sp, #40	; 0x28
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	605a      	str	r2, [r3, #4]
 80021e2:	609a      	str	r2, [r3, #8]
 80021e4:	60da      	str	r2, [r3, #12]
 80021e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a36      	ldr	r2, [pc, #216]	; (80022c8 <HAL_TIM_MspPostInit+0xf8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d11e      	bne.n	8002230 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	4b36      	ldr	r3, [pc, #216]	; (80022cc <HAL_TIM_MspPostInit+0xfc>)
 80021f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f6:	4a35      	ldr	r2, [pc, #212]	; (80022cc <HAL_TIM_MspPostInit+0xfc>)
 80021f8:	f043 0301 	orr.w	r3, r3, #1
 80021fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021fe:	4b33      	ldr	r3, [pc, #204]	; (80022cc <HAL_TIM_MspPostInit+0xfc>)
 8002200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002202:	f003 0301 	and.w	r3, r3, #1
 8002206:	613b      	str	r3, [r7, #16]
 8002208:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800220a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800220e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	2302      	movs	r3, #2
 8002212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002214:	2302      	movs	r3, #2
 8002216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002218:	2300      	movs	r3, #0
 800221a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800221c:	2306      	movs	r3, #6
 800221e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002220:	f107 0314 	add.w	r3, r7, #20
 8002224:	4619      	mov	r1, r3
 8002226:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800222a:	f000 fa45 	bl	80026b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800222e:	e046      	b.n	80022be <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM4)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <HAL_TIM_MspPostInit+0x100>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d11e      	bne.n	8002278 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <HAL_TIM_MspPostInit+0xfc>)
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	4a23      	ldr	r2, [pc, #140]	; (80022cc <HAL_TIM_MspPostInit+0xfc>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002246:	4b21      	ldr	r3, [pc, #132]	; (80022cc <HAL_TIM_MspPostInit+0xfc>)
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002252:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002258:	2302      	movs	r3, #2
 800225a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800225c:	2302      	movs	r3, #2
 800225e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002264:	230a      	movs	r3, #10
 8002266:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002268:	f107 0314 	add.w	r3, r7, #20
 800226c:	4619      	mov	r1, r3
 800226e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002272:	f000 fa21 	bl	80026b8 <HAL_GPIO_Init>
}
 8002276:	e022      	b.n	80022be <HAL_TIM_MspPostInit+0xee>
  else if(htim->Instance==TIM8)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a15      	ldr	r2, [pc, #84]	; (80022d4 <HAL_TIM_MspPostInit+0x104>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d11d      	bne.n	80022be <HAL_TIM_MspPostInit+0xee>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <HAL_TIM_MspPostInit+0xfc>)
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	4a11      	ldr	r2, [pc, #68]	; (80022cc <HAL_TIM_MspPostInit+0xfc>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800228e:	4b0f      	ldr	r3, [pc, #60]	; (80022cc <HAL_TIM_MspPostInit+0xfc>)
 8002290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800229a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800229e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022a4:	2302      	movs	r3, #2
 80022a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a8:	2300      	movs	r3, #0
 80022aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80022ac:	2302      	movs	r3, #2
 80022ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	4619      	mov	r1, r3
 80022b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ba:	f000 f9fd 	bl	80026b8 <HAL_GPIO_Init>
}
 80022be:	bf00      	nop
 80022c0:	3728      	adds	r7, #40	; 0x28
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40012c00 	.word	0x40012c00
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40000800 	.word	0x40000800
 80022d4:	40013400 	.word	0x40013400

080022d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022dc:	e7fe      	b.n	80022dc <NMI_Handler+0x4>

080022de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022de:	b480      	push	{r7}
 80022e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e2:	e7fe      	b.n	80022e2 <HardFault_Handler+0x4>

080022e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022e8:	e7fe      	b.n	80022e8 <MemManage_Handler+0x4>

080022ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ea:	b480      	push	{r7}
 80022ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ee:	e7fe      	b.n	80022ee <BusFault_Handler+0x4>

080022f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022f4:	e7fe      	b.n	80022f4 <UsageFault_Handler+0x4>

080022f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002324:	f000 f89a 	bl	800245c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <TIM6_DAC_IRQHandler+0x10>)
 8002332:	f001 fbbf 	bl	8003ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000110 	.word	0x20000110

08002340 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002344:	4b06      	ldr	r3, [pc, #24]	; (8002360 <SystemInit+0x20>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234a:	4a05      	ldr	r2, [pc, #20]	; (8002360 <SystemInit+0x20>)
 800234c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002364:	480d      	ldr	r0, [pc, #52]	; (800239c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002366:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002368:	f7ff ffea 	bl	8002340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800236c:	480c      	ldr	r0, [pc, #48]	; (80023a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800236e:	490d      	ldr	r1, [pc, #52]	; (80023a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002370:	4a0d      	ldr	r2, [pc, #52]	; (80023a8 <LoopForever+0xe>)
  movs r3, #0
 8002372:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002374:	e002      	b.n	800237c <LoopCopyDataInit>

08002376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800237a:	3304      	adds	r3, #4

0800237c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800237c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002380:	d3f9      	bcc.n	8002376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002384:	4c0a      	ldr	r4, [pc, #40]	; (80023b0 <LoopForever+0x16>)
  movs r3, #0
 8002386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002388:	e001      	b.n	800238e <LoopFillZerobss>

0800238a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800238a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800238c:	3204      	adds	r2, #4

0800238e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002390:	d3fb      	bcc.n	800238a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8002392:	f002 fcdd 	bl	8004d50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002396:	f7ff f9f7 	bl	8001788 <main>

0800239a <LoopForever>:

LoopForever:
    b LoopForever
 800239a:	e7fe      	b.n	800239a <LoopForever>
  ldr   r0, =_estack
 800239c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80023a8:	08004ea8 	.word	0x08004ea8
  ldr r2, =_sbss
 80023ac:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80023b0:	2000058c 	.word	0x2000058c

080023b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <ADC1_2_IRQHandler>

080023b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b082      	sub	sp, #8
 80023ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023c0:	2003      	movs	r0, #3
 80023c2:	f000 f939 	bl	8002638 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023c6:	200f      	movs	r0, #15
 80023c8:	f000 f80e 	bl	80023e8 <HAL_InitTick>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d002      	beq.n	80023d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	71fb      	strb	r3, [r7, #7]
 80023d6:	e001      	b.n	80023dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023d8:	f7ff fe74 	bl	80020c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023dc:	79fb      	ldrb	r3, [r7, #7]

}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
	...

080023e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80023f4:	4b16      	ldr	r3, [pc, #88]	; (8002450 <HAL_InitTick+0x68>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d022      	beq.n	8002442 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <HAL_InitTick+0x6c>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	4b13      	ldr	r3, [pc, #76]	; (8002450 <HAL_InitTick+0x68>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002408:	fbb1 f3f3 	udiv	r3, r1, r3
 800240c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f944 	bl	800269e <HAL_SYSTICK_Config>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10f      	bne.n	800243c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b0f      	cmp	r3, #15
 8002420:	d809      	bhi.n	8002436 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002422:	2200      	movs	r2, #0
 8002424:	6879      	ldr	r1, [r7, #4]
 8002426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800242a:	f000 f910 	bl	800264e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800242e:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <HAL_InitTick+0x70>)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	e007      	b.n	8002446 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
 800243a:	e004      	b.n	8002446 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e001      	b.n	8002446 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002446:	7bfb      	ldrb	r3, [r7, #15]
}
 8002448:	4618      	mov	r0, r3
 800244a:	3710      	adds	r7, #16
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000008 	.word	0x20000008
 8002454:	20000000 	.word	0x20000000
 8002458:	20000004 	.word	0x20000004

0800245c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002460:	4b05      	ldr	r3, [pc, #20]	; (8002478 <HAL_IncTick+0x1c>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_IncTick+0x20>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4413      	add	r3, r2
 800246a:	4a03      	ldr	r2, [pc, #12]	; (8002478 <HAL_IncTick+0x1c>)
 800246c:	6013      	str	r3, [r2, #0]
}
 800246e:	bf00      	nop
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	20000448 	.word	0x20000448
 800247c:	20000008 	.word	0x20000008

08002480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return uwTick;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_GetTick+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000448 	.word	0x20000448

08002498 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002498:	b480      	push	{r7}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f003 0307 	and.w	r3, r3, #7
 80024a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024b4:	4013      	ands	r3, r2
 80024b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024ca:	4a04      	ldr	r2, [pc, #16]	; (80024dc <__NVIC_SetPriorityGrouping+0x44>)
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	60d3      	str	r3, [r2, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	e000ed00 	.word	0xe000ed00

080024e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <__NVIC_GetPriorityGrouping+0x18>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f003 0307 	and.w	r3, r3, #7
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	4603      	mov	r3, r0
 8002504:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800250a:	2b00      	cmp	r3, #0
 800250c:	db0b      	blt.n	8002526 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	f003 021f 	and.w	r2, r3, #31
 8002514:	4907      	ldr	r1, [pc, #28]	; (8002534 <__NVIC_EnableIRQ+0x38>)
 8002516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251a:	095b      	lsrs	r3, r3, #5
 800251c:	2001      	movs	r0, #1
 800251e:	fa00 f202 	lsl.w	r2, r0, r2
 8002522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	e000e100 	.word	0xe000e100

08002538 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	6039      	str	r1, [r7, #0]
 8002542:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002548:	2b00      	cmp	r3, #0
 800254a:	db0a      	blt.n	8002562 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	b2da      	uxtb	r2, r3
 8002550:	490c      	ldr	r1, [pc, #48]	; (8002584 <__NVIC_SetPriority+0x4c>)
 8002552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002556:	0112      	lsls	r2, r2, #4
 8002558:	b2d2      	uxtb	r2, r2
 800255a:	440b      	add	r3, r1
 800255c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002560:	e00a      	b.n	8002578 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4908      	ldr	r1, [pc, #32]	; (8002588 <__NVIC_SetPriority+0x50>)
 8002568:	79fb      	ldrb	r3, [r7, #7]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	3b04      	subs	r3, #4
 8002570:	0112      	lsls	r2, r2, #4
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	440b      	add	r3, r1
 8002576:	761a      	strb	r2, [r3, #24]
}
 8002578:	bf00      	nop
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	e000e100 	.word	0xe000e100
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800258c:	b480      	push	{r7}
 800258e:	b089      	sub	sp, #36	; 0x24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f1c3 0307 	rsb	r3, r3, #7
 80025a6:	2b04      	cmp	r3, #4
 80025a8:	bf28      	it	cs
 80025aa:	2304      	movcs	r3, #4
 80025ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	3304      	adds	r3, #4
 80025b2:	2b06      	cmp	r3, #6
 80025b4:	d902      	bls.n	80025bc <NVIC_EncodePriority+0x30>
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3b03      	subs	r3, #3
 80025ba:	e000      	b.n	80025be <NVIC_EncodePriority+0x32>
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	43da      	mvns	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	401a      	ands	r2, r3
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	fa01 f303 	lsl.w	r3, r1, r3
 80025de:	43d9      	mvns	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025e4:	4313      	orrs	r3, r2
         );
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3724      	adds	r7, #36	; 0x24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3b01      	subs	r3, #1
 8002600:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002604:	d301      	bcc.n	800260a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002606:	2301      	movs	r3, #1
 8002608:	e00f      	b.n	800262a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800260a:	4a0a      	ldr	r2, [pc, #40]	; (8002634 <SysTick_Config+0x40>)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3b01      	subs	r3, #1
 8002610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002612:	210f      	movs	r1, #15
 8002614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002618:	f7ff ff8e 	bl	8002538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <SysTick_Config+0x40>)
 800261e:	2200      	movs	r2, #0
 8002620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002622:	4b04      	ldr	r3, [pc, #16]	; (8002634 <SysTick_Config+0x40>)
 8002624:	2207      	movs	r2, #7
 8002626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	e000e010 	.word	0xe000e010

08002638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff29 	bl	8002498 <__NVIC_SetPriorityGrouping>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800265c:	f7ff ff40 	bl	80024e0 <__NVIC_GetPriorityGrouping>
 8002660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002662:	687a      	ldr	r2, [r7, #4]
 8002664:	68b9      	ldr	r1, [r7, #8]
 8002666:	6978      	ldr	r0, [r7, #20]
 8002668:	f7ff ff90 	bl	800258c <NVIC_EncodePriority>
 800266c:	4602      	mov	r2, r0
 800266e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002672:	4611      	mov	r1, r2
 8002674:	4618      	mov	r0, r3
 8002676:	f7ff ff5f 	bl	8002538 <__NVIC_SetPriority>
}
 800267a:	bf00      	nop
 800267c:	3718      	adds	r7, #24
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	4603      	mov	r3, r0
 800268a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800268c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff ff33 	bl	80024fc <__NVIC_EnableIRQ>
}
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f7ff ffa4 	bl	80025f4 <SysTick_Config>
 80026ac:	4603      	mov	r3, r0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b087      	sub	sp, #28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80026c2:	2300      	movs	r3, #0
 80026c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80026c6:	e15a      	b.n	800297e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	2101      	movs	r1, #1
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	fa01 f303 	lsl.w	r3, r1, r3
 80026d4:	4013      	ands	r3, r2
 80026d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	f000 814c 	beq.w	8002978 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d005      	beq.n	80026f8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d130      	bne.n	800275a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	2203      	movs	r2, #3
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	693a      	ldr	r2, [r7, #16]
 800270c:	4013      	ands	r3, r2
 800270e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68da      	ldr	r2, [r3, #12]
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800272e:	2201      	movs	r2, #1
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	fa02 f303 	lsl.w	r3, r2, r3
 8002736:	43db      	mvns	r3, r3
 8002738:	693a      	ldr	r2, [r7, #16]
 800273a:	4013      	ands	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 0201 	and.w	r2, r3, #1
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa02 f303 	lsl.w	r3, r2, r3
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b03      	cmp	r3, #3
 8002764:	d017      	beq.n	8002796 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	2203      	movs	r2, #3
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43db      	mvns	r3, r3
 8002778:	693a      	ldr	r2, [r7, #16]
 800277a:	4013      	ands	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	693a      	ldr	r2, [r7, #16]
 800278c:	4313      	orrs	r3, r2
 800278e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	693a      	ldr	r2, [r7, #16]
 8002794:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f003 0303 	and.w	r3, r3, #3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d123      	bne.n	80027ea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	08da      	lsrs	r2, r3, #3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3208      	adds	r2, #8
 80027aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f003 0307 	and.w	r3, r3, #7
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	4013      	ands	r3, r2
 80027c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	fa02 f303 	lsl.w	r3, r2, r3
 80027d6:	693a      	ldr	r2, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	08da      	lsrs	r2, r3, #3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	3208      	adds	r2, #8
 80027e4:	6939      	ldr	r1, [r7, #16]
 80027e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	693a      	ldr	r2, [r7, #16]
 80027fe:	4013      	ands	r3, r2
 8002800:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 0203 	and.w	r2, r3, #3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	693a      	ldr	r2, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002826:	2b00      	cmp	r3, #0
 8002828:	f000 80a6 	beq.w	8002978 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800282c:	4b5b      	ldr	r3, [pc, #364]	; (800299c <HAL_GPIO_Init+0x2e4>)
 800282e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002830:	4a5a      	ldr	r2, [pc, #360]	; (800299c <HAL_GPIO_Init+0x2e4>)
 8002832:	f043 0301 	orr.w	r3, r3, #1
 8002836:	6613      	str	r3, [r2, #96]	; 0x60
 8002838:	4b58      	ldr	r3, [pc, #352]	; (800299c <HAL_GPIO_Init+0x2e4>)
 800283a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283c:	f003 0301 	and.w	r3, r3, #1
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002844:	4a56      	ldr	r2, [pc, #344]	; (80029a0 <HAL_GPIO_Init+0x2e8>)
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	089b      	lsrs	r3, r3, #2
 800284a:	3302      	adds	r3, #2
 800284c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002850:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	f003 0303 	and.w	r3, r3, #3
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	220f      	movs	r2, #15
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800286e:	d01f      	beq.n	80028b0 <HAL_GPIO_Init+0x1f8>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a4c      	ldr	r2, [pc, #304]	; (80029a4 <HAL_GPIO_Init+0x2ec>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d019      	beq.n	80028ac <HAL_GPIO_Init+0x1f4>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a4b      	ldr	r2, [pc, #300]	; (80029a8 <HAL_GPIO_Init+0x2f0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d013      	beq.n	80028a8 <HAL_GPIO_Init+0x1f0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a4a      	ldr	r2, [pc, #296]	; (80029ac <HAL_GPIO_Init+0x2f4>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d00d      	beq.n	80028a4 <HAL_GPIO_Init+0x1ec>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a49      	ldr	r2, [pc, #292]	; (80029b0 <HAL_GPIO_Init+0x2f8>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d007      	beq.n	80028a0 <HAL_GPIO_Init+0x1e8>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	4a48      	ldr	r2, [pc, #288]	; (80029b4 <HAL_GPIO_Init+0x2fc>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d101      	bne.n	800289c <HAL_GPIO_Init+0x1e4>
 8002898:	2305      	movs	r3, #5
 800289a:	e00a      	b.n	80028b2 <HAL_GPIO_Init+0x1fa>
 800289c:	2306      	movs	r3, #6
 800289e:	e008      	b.n	80028b2 <HAL_GPIO_Init+0x1fa>
 80028a0:	2304      	movs	r3, #4
 80028a2:	e006      	b.n	80028b2 <HAL_GPIO_Init+0x1fa>
 80028a4:	2303      	movs	r3, #3
 80028a6:	e004      	b.n	80028b2 <HAL_GPIO_Init+0x1fa>
 80028a8:	2302      	movs	r3, #2
 80028aa:	e002      	b.n	80028b2 <HAL_GPIO_Init+0x1fa>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <HAL_GPIO_Init+0x1fa>
 80028b0:	2300      	movs	r3, #0
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	f002 0203 	and.w	r2, r2, #3
 80028b8:	0092      	lsls	r2, r2, #2
 80028ba:	4093      	lsls	r3, r2
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028c2:	4937      	ldr	r1, [pc, #220]	; (80029a0 <HAL_GPIO_Init+0x2e8>)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	693a      	ldr	r2, [r7, #16]
 80028cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80028d0:	4b39      	ldr	r3, [pc, #228]	; (80029b8 <HAL_GPIO_Init+0x300>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	43db      	mvns	r3, r3
 80028da:	693a      	ldr	r2, [r7, #16]
 80028dc:	4013      	ands	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d003      	beq.n	80028f4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80028f4:	4a30      	ldr	r2, [pc, #192]	; (80029b8 <HAL_GPIO_Init+0x300>)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80028fa:	4b2f      	ldr	r3, [pc, #188]	; (80029b8 <HAL_GPIO_Init+0x300>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	43db      	mvns	r3, r3
 8002904:	693a      	ldr	r2, [r7, #16]
 8002906:	4013      	ands	r3, r2
 8002908:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d003      	beq.n	800291e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002916:	693a      	ldr	r2, [r7, #16]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4313      	orrs	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800291e:	4a26      	ldr	r2, [pc, #152]	; (80029b8 <HAL_GPIO_Init+0x300>)
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <HAL_GPIO_Init+0x300>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	43db      	mvns	r3, r3
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4013      	ands	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d003      	beq.n	8002948 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002948:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <HAL_GPIO_Init+0x300>)
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800294e:	4b1a      	ldr	r3, [pc, #104]	; (80029b8 <HAL_GPIO_Init+0x300>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	43db      	mvns	r3, r3
 8002958:	693a      	ldr	r2, [r7, #16]
 800295a:	4013      	ands	r3, r2
 800295c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800296a:	693a      	ldr	r2, [r7, #16]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002972:	4a11      	ldr	r2, [pc, #68]	; (80029b8 <HAL_GPIO_Init+0x300>)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	3301      	adds	r3, #1
 800297c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	fa22 f303 	lsr.w	r3, r2, r3
 8002988:	2b00      	cmp	r3, #0
 800298a:	f47f ae9d 	bne.w	80026c8 <HAL_GPIO_Init+0x10>
  }
}
 800298e:	bf00      	nop
 8002990:	bf00      	nop
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40021000 	.word	0x40021000
 80029a0:	40010000 	.word	0x40010000
 80029a4:	48000400 	.word	0x48000400
 80029a8:	48000800 	.word	0x48000800
 80029ac:	48000c00 	.word	0x48000c00
 80029b0:	48001000 	.word	0x48001000
 80029b4:	48001400 	.word	0x48001400
 80029b8:	40010400 	.word	0x40010400

080029bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	460b      	mov	r3, r1
 80029c6:	807b      	strh	r3, [r7, #2]
 80029c8:	4613      	mov	r3, r2
 80029ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80029cc:	787b      	ldrb	r3, [r7, #1]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d003      	beq.n	80029da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80029d2:	887a      	ldrh	r2, [r7, #2]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80029d8:	e002      	b.n	80029e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80029da:	887a      	ldrh	r2, [r7, #2]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d141      	bne.n	8002a7e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80029fa:	4b4b      	ldr	r3, [pc, #300]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a06:	d131      	bne.n	8002a6c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a08:	4b47      	ldr	r3, [pc, #284]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a0e:	4a46      	ldr	r2, [pc, #280]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a18:	4b43      	ldr	r3, [pc, #268]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a20:	4a41      	ldr	r2, [pc, #260]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002a28:	4b40      	ldr	r3, [pc, #256]	; (8002b2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2232      	movs	r2, #50	; 0x32
 8002a2e:	fb02 f303 	mul.w	r3, r2, r3
 8002a32:	4a3f      	ldr	r2, [pc, #252]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002a34:	fba2 2303 	umull	r2, r3, r2, r3
 8002a38:	0c9b      	lsrs	r3, r3, #18
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a3e:	e002      	b.n	8002a46 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	3b01      	subs	r3, #1
 8002a44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002a46:	4b38      	ldr	r3, [pc, #224]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a52:	d102      	bne.n	8002a5a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f2      	bne.n	8002a40 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002a5a:	4b33      	ldr	r3, [pc, #204]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a66:	d158      	bne.n	8002b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e057      	b.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a6c:	4b2e      	ldr	r3, [pc, #184]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a72:	4a2d      	ldr	r2, [pc, #180]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002a7c:	e04d      	b.n	8002b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a84:	d141      	bne.n	8002b0a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002a86:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a92:	d131      	bne.n	8002af8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002a94:	4b24      	ldr	r3, [pc, #144]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a9a:	4a23      	ldr	r2, [pc, #140]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aa0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aa4:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002aac:	4a1e      	ldr	r2, [pc, #120]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ab2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ab4:	4b1d      	ldr	r3, [pc, #116]	; (8002b2c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2232      	movs	r2, #50	; 0x32
 8002aba:	fb02 f303 	mul.w	r3, r2, r3
 8002abe:	4a1c      	ldr	r2, [pc, #112]	; (8002b30 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	0c9b      	lsrs	r3, r3, #18
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002aca:	e002      	b.n	8002ad2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ada:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ade:	d102      	bne.n	8002ae6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f2      	bne.n	8002acc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ae6:	4b10      	ldr	r3, [pc, #64]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af2:	d112      	bne.n	8002b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e011      	b.n	8002b1c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002af8:	4b0b      	ldr	r3, [pc, #44]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002afe:	4a0a      	ldr	r2, [pc, #40]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002b08:	e007      	b.n	8002b1a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002b0a:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002b12:	4a05      	ldr	r2, [pc, #20]	; (8002b28 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002b14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b18:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	20000000 	.word	0x20000000
 8002b30:	431bde83 	.word	0x431bde83

08002b34 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	4a04      	ldr	r2, [pc, #16]	; (8002b50 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b42:	6093      	str	r3, [r2, #8]
}
 8002b44:	bf00      	nop
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40007000 	.word	0x40007000

08002b54 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b088      	sub	sp, #32
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e2fe      	b.n	8003164 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d075      	beq.n	8002c5e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b72:	4b97      	ldr	r3, [pc, #604]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 030c 	and.w	r3, r3, #12
 8002b7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b7c:	4b94      	ldr	r3, [pc, #592]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0303 	and.w	r3, r3, #3
 8002b84:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b0c      	cmp	r3, #12
 8002b8a:	d102      	bne.n	8002b92 <HAL_RCC_OscConfig+0x3e>
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b03      	cmp	r3, #3
 8002b90:	d002      	beq.n	8002b98 <HAL_RCC_OscConfig+0x44>
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b08      	cmp	r3, #8
 8002b96:	d10b      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b98:	4b8d      	ldr	r3, [pc, #564]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d05b      	beq.n	8002c5c <HAL_RCC_OscConfig+0x108>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d157      	bne.n	8002c5c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e2d9      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bb8:	d106      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x74>
 8002bba:	4b85      	ldr	r3, [pc, #532]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a84      	ldr	r2, [pc, #528]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e01d      	b.n	8002c04 <HAL_RCC_OscConfig+0xb0>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCC_OscConfig+0x98>
 8002bd2:	4b7f      	ldr	r3, [pc, #508]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a7e      	ldr	r2, [pc, #504]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	4b7c      	ldr	r3, [pc, #496]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a7b      	ldr	r2, [pc, #492]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	e00b      	b.n	8002c04 <HAL_RCC_OscConfig+0xb0>
 8002bec:	4b78      	ldr	r3, [pc, #480]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a77      	ldr	r2, [pc, #476]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bf6:	6013      	str	r3, [r2, #0]
 8002bf8:	4b75      	ldr	r3, [pc, #468]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a74      	ldr	r2, [pc, #464]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002bfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d013      	beq.n	8002c34 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7ff fc38 	bl	8002480 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c14:	f7ff fc34 	bl	8002480 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e29e      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c26:	4b6a      	ldr	r3, [pc, #424]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d0f0      	beq.n	8002c14 <HAL_RCC_OscConfig+0xc0>
 8002c32:	e014      	b.n	8002c5e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c34:	f7ff fc24 	bl	8002480 <HAL_GetTick>
 8002c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c3a:	e008      	b.n	8002c4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c3c:	f7ff fc20 	bl	8002480 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	2b64      	cmp	r3, #100	; 0x64
 8002c48:	d901      	bls.n	8002c4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e28a      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c4e:	4b60      	ldr	r3, [pc, #384]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f0      	bne.n	8002c3c <HAL_RCC_OscConfig+0xe8>
 8002c5a:	e000      	b.n	8002c5e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 0302 	and.w	r3, r3, #2
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d075      	beq.n	8002d56 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c6a:	4b59      	ldr	r3, [pc, #356]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c74:	4b56      	ldr	r3, [pc, #344]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	2b0c      	cmp	r3, #12
 8002c82:	d102      	bne.n	8002c8a <HAL_RCC_OscConfig+0x136>
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d002      	beq.n	8002c90 <HAL_RCC_OscConfig+0x13c>
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d11f      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c90:	4b4f      	ldr	r3, [pc, #316]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x154>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e25d      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b49      	ldr	r3, [pc, #292]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	061b      	lsls	r3, r3, #24
 8002cb6:	4946      	ldr	r1, [pc, #280]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002cbc:	4b45      	ldr	r3, [pc, #276]	; (8002dd4 <HAL_RCC_OscConfig+0x280>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fb91 	bl	80023e8 <HAL_InitTick>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d043      	beq.n	8002d54 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e249      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d023      	beq.n	8002d20 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd8:	4b3d      	ldr	r3, [pc, #244]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a3c      	ldr	r2, [pc, #240]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002cde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ce2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7ff fbcc 	bl	8002480 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cec:	f7ff fbc8 	bl	8002480 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e232      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cfe:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d0f0      	beq.n	8002cec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d0a:	4b31      	ldr	r3, [pc, #196]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	061b      	lsls	r3, r3, #24
 8002d18:	492d      	ldr	r1, [pc, #180]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	604b      	str	r3, [r1, #4]
 8002d1e:	e01a      	b.n	8002d56 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d20:	4b2b      	ldr	r3, [pc, #172]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a2a      	ldr	r2, [pc, #168]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d2c:	f7ff fba8 	bl	8002480 <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d34:	f7ff fba4 	bl	8002480 <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e20e      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d46:	4b22      	ldr	r3, [pc, #136]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1f0      	bne.n	8002d34 <HAL_RCC_OscConfig+0x1e0>
 8002d52:	e000      	b.n	8002d56 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d54:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d041      	beq.n	8002de6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695b      	ldr	r3, [r3, #20]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d6a:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d70:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d7a:	f7ff fb81 	bl	8002480 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d82:	f7ff fb7d 	bl	8002480 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e1e7      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d94:	4b0e      	ldr	r3, [pc, #56]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d0ef      	beq.n	8002d82 <HAL_RCC_OscConfig+0x22e>
 8002da2:	e020      	b.n	8002de6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002da4:	4b0a      	ldr	r3, [pc, #40]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002daa:	4a09      	ldr	r2, [pc, #36]	; (8002dd0 <HAL_RCC_OscConfig+0x27c>)
 8002dac:	f023 0301 	bic.w	r3, r3, #1
 8002db0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002db4:	f7ff fb64 	bl	8002480 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dba:	e00d      	b.n	8002dd8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dbc:	f7ff fb60 	bl	8002480 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d906      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1ca      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
 8002dce:	bf00      	nop
 8002dd0:	40021000 	.word	0x40021000
 8002dd4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002dd8:	4b8c      	ldr	r3, [pc, #560]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1ea      	bne.n	8002dbc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	f000 80a6 	beq.w	8002f40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002df4:	2300      	movs	r3, #0
 8002df6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002df8:	4b84      	ldr	r3, [pc, #528]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d101      	bne.n	8002e08 <HAL_RCC_OscConfig+0x2b4>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <HAL_RCC_OscConfig+0x2b6>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00d      	beq.n	8002e2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e0e:	4b7f      	ldr	r3, [pc, #508]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e12:	4a7e      	ldr	r2, [pc, #504]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e18:	6593      	str	r3, [r2, #88]	; 0x58
 8002e1a:	4b7c      	ldr	r3, [pc, #496]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002e26:	2301      	movs	r3, #1
 8002e28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e2a:	4b79      	ldr	r3, [pc, #484]	; (8003010 <HAL_RCC_OscConfig+0x4bc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d118      	bne.n	8002e68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e36:	4b76      	ldr	r3, [pc, #472]	; (8003010 <HAL_RCC_OscConfig+0x4bc>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a75      	ldr	r2, [pc, #468]	; (8003010 <HAL_RCC_OscConfig+0x4bc>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e42:	f7ff fb1d 	bl	8002480 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e48:	e008      	b.n	8002e5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4a:	f7ff fb19 	bl	8002480 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e183      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e5c:	4b6c      	ldr	r3, [pc, #432]	; (8003010 <HAL_RCC_OscConfig+0x4bc>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0f0      	beq.n	8002e4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d108      	bne.n	8002e82 <HAL_RCC_OscConfig+0x32e>
 8002e70:	4b66      	ldr	r3, [pc, #408]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e76:	4a65      	ldr	r2, [pc, #404]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e80:	e024      	b.n	8002ecc <HAL_RCC_OscConfig+0x378>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	2b05      	cmp	r3, #5
 8002e88:	d110      	bne.n	8002eac <HAL_RCC_OscConfig+0x358>
 8002e8a:	4b60      	ldr	r3, [pc, #384]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	4a5e      	ldr	r2, [pc, #376]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e92:	f043 0304 	orr.w	r3, r3, #4
 8002e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e9a:	4b5c      	ldr	r3, [pc, #368]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	4a5a      	ldr	r2, [pc, #360]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002ea2:	f043 0301 	orr.w	r3, r3, #1
 8002ea6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002eaa:	e00f      	b.n	8002ecc <HAL_RCC_OscConfig+0x378>
 8002eac:	4b57      	ldr	r3, [pc, #348]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	4a56      	ldr	r2, [pc, #344]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002eb4:	f023 0301 	bic.w	r3, r3, #1
 8002eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ebc:	4b53      	ldr	r3, [pc, #332]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ec2:	4a52      	ldr	r2, [pc, #328]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002ec4:	f023 0304 	bic.w	r3, r3, #4
 8002ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d016      	beq.n	8002f02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed4:	f7ff fad4 	bl	8002480 <HAL_GetTick>
 8002ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002eda:	e00a      	b.n	8002ef2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002edc:	f7ff fad0 	bl	8002480 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e138      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ef2:	4b46      	ldr	r3, [pc, #280]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d0ed      	beq.n	8002edc <HAL_RCC_OscConfig+0x388>
 8002f00:	e015      	b.n	8002f2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f02:	f7ff fabd 	bl	8002480 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f08:	e00a      	b.n	8002f20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f0a:	f7ff fab9 	bl	8002480 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d901      	bls.n	8002f20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	e121      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002f20:	4b3a      	ldr	r3, [pc, #232]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d1ed      	bne.n	8002f0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f2e:	7ffb      	ldrb	r3, [r7, #31]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d105      	bne.n	8002f40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f34:	4b35      	ldr	r3, [pc, #212]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f38:	4a34      	ldr	r2, [pc, #208]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0320 	and.w	r3, r3, #32
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d03c      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d01c      	beq.n	8002f8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f5a:	4a2c      	ldr	r2, [pc, #176]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f5c:	f043 0301 	orr.w	r3, r3, #1
 8002f60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f64:	f7ff fa8c 	bl	8002480 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f6c:	f7ff fa88 	bl	8002480 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e0f2      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f7e:	4b23      	ldr	r3, [pc, #140]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d0ef      	beq.n	8002f6c <HAL_RCC_OscConfig+0x418>
 8002f8c:	e01b      	b.n	8002fc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f8e:	4b1f      	ldr	r3, [pc, #124]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f94:	4a1d      	ldr	r2, [pc, #116]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002f96:	f023 0301 	bic.w	r3, r3, #1
 8002f9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9e:	f7ff fa6f 	bl	8002480 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002fa6:	f7ff fa6b 	bl	8002480 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e0d5      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fb8:	4b14      	ldr	r3, [pc, #80]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002fbe:	f003 0302 	and.w	r3, r3, #2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1ef      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	f000 80c9 	beq.w	8003162 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fd0:	4b0e      	ldr	r3, [pc, #56]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 030c 	and.w	r3, r3, #12
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	f000 8083 	beq.w	80030e4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d15e      	bne.n	80030a4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fe6:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a08      	ldr	r2, [pc, #32]	; (800300c <HAL_RCC_OscConfig+0x4b8>)
 8002fec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7ff fa45 	bl	8002480 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff8:	e00c      	b.n	8003014 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ffa:	f7ff fa41 	bl	8002480 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d905      	bls.n	8003014 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e0ab      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
 800300c:	40021000 	.word	0x40021000
 8003010:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003014:	4b55      	ldr	r3, [pc, #340]	; (800316c <HAL_RCC_OscConfig+0x618>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1ec      	bne.n	8002ffa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003020:	4b52      	ldr	r3, [pc, #328]	; (800316c <HAL_RCC_OscConfig+0x618>)
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	4b52      	ldr	r3, [pc, #328]	; (8003170 <HAL_RCC_OscConfig+0x61c>)
 8003026:	4013      	ands	r3, r2
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	6a11      	ldr	r1, [r2, #32]
 800302c:	687a      	ldr	r2, [r7, #4]
 800302e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003030:	3a01      	subs	r2, #1
 8003032:	0112      	lsls	r2, r2, #4
 8003034:	4311      	orrs	r1, r2
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800303a:	0212      	lsls	r2, r2, #8
 800303c:	4311      	orrs	r1, r2
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003042:	0852      	lsrs	r2, r2, #1
 8003044:	3a01      	subs	r2, #1
 8003046:	0552      	lsls	r2, r2, #21
 8003048:	4311      	orrs	r1, r2
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800304e:	0852      	lsrs	r2, r2, #1
 8003050:	3a01      	subs	r2, #1
 8003052:	0652      	lsls	r2, r2, #25
 8003054:	4311      	orrs	r1, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800305a:	06d2      	lsls	r2, r2, #27
 800305c:	430a      	orrs	r2, r1
 800305e:	4943      	ldr	r1, [pc, #268]	; (800316c <HAL_RCC_OscConfig+0x618>)
 8003060:	4313      	orrs	r3, r2
 8003062:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003064:	4b41      	ldr	r3, [pc, #260]	; (800316c <HAL_RCC_OscConfig+0x618>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a40      	ldr	r2, [pc, #256]	; (800316c <HAL_RCC_OscConfig+0x618>)
 800306a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003070:	4b3e      	ldr	r3, [pc, #248]	; (800316c <HAL_RCC_OscConfig+0x618>)
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4a3d      	ldr	r2, [pc, #244]	; (800316c <HAL_RCC_OscConfig+0x618>)
 8003076:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800307a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800307c:	f7ff fa00 	bl	8002480 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003084:	f7ff f9fc 	bl	8002480 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e066      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003096:	4b35      	ldr	r3, [pc, #212]	; (800316c <HAL_RCC_OscConfig+0x618>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x530>
 80030a2:	e05e      	b.n	8003162 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a4:	4b31      	ldr	r3, [pc, #196]	; (800316c <HAL_RCC_OscConfig+0x618>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a30      	ldr	r2, [pc, #192]	; (800316c <HAL_RCC_OscConfig+0x618>)
 80030aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b0:	f7ff f9e6 	bl	8002480 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b8:	f7ff f9e2 	bl	8002480 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e04c      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030ca:	4b28      	ldr	r3, [pc, #160]	; (800316c <HAL_RCC_OscConfig+0x618>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d1f0      	bne.n	80030b8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80030d6:	4b25      	ldr	r3, [pc, #148]	; (800316c <HAL_RCC_OscConfig+0x618>)
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	4924      	ldr	r1, [pc, #144]	; (800316c <HAL_RCC_OscConfig+0x618>)
 80030dc:	4b25      	ldr	r3, [pc, #148]	; (8003174 <HAL_RCC_OscConfig+0x620>)
 80030de:	4013      	ands	r3, r2
 80030e0:	60cb      	str	r3, [r1, #12]
 80030e2:	e03e      	b.n	8003162 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e039      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80030f0:	4b1e      	ldr	r3, [pc, #120]	; (800316c <HAL_RCC_OscConfig+0x618>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	f003 0203 	and.w	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	429a      	cmp	r2, r3
 8003102:	d12c      	bne.n	800315e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310e:	3b01      	subs	r3, #1
 8003110:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	429a      	cmp	r2, r3
 8003114:	d123      	bne.n	800315e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003122:	429a      	cmp	r2, r3
 8003124:	d11b      	bne.n	800315e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003132:	429a      	cmp	r2, r3
 8003134:	d113      	bne.n	800315e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003140:	085b      	lsrs	r3, r3, #1
 8003142:	3b01      	subs	r3, #1
 8003144:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003146:	429a      	cmp	r2, r3
 8003148:	d109      	bne.n	800315e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	3b01      	subs	r3, #1
 8003158:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d001      	beq.n	8003162 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000
 8003170:	019f800c 	.word	0x019f800c
 8003174:	feeefffc 	.word	0xfeeefffc

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003182:	2300      	movs	r3, #0
 8003184:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e11e      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b91      	ldr	r3, [pc, #580]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 030f 	and.w	r3, r3, #15
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d910      	bls.n	80031c0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b8e      	ldr	r3, [pc, #568]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f023 020f 	bic.w	r2, r3, #15
 80031a6:	498c      	ldr	r1, [pc, #560]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ae:	4b8a      	ldr	r3, [pc, #552]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	683a      	ldr	r2, [r7, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d001      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e106      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d073      	beq.n	80032b4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	2b03      	cmp	r3, #3
 80031d2:	d129      	bne.n	8003228 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031d4:	4b81      	ldr	r3, [pc, #516]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d101      	bne.n	80031e4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e0f4      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80031e4:	f000 f966 	bl	80034b4 <RCC_GetSysClockFreqFromPLLSource>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4a7c      	ldr	r2, [pc, #496]	; (80033e0 <HAL_RCC_ClockConfig+0x268>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d93f      	bls.n	8003272 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80031f2:	4b7a      	ldr	r3, [pc, #488]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d009      	beq.n	8003212 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003206:	2b00      	cmp	r3, #0
 8003208:	d033      	beq.n	8003272 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800320e:	2b00      	cmp	r3, #0
 8003210:	d12f      	bne.n	8003272 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003212:	4b72      	ldr	r3, [pc, #456]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800321a:	4a70      	ldr	r2, [pc, #448]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 800321c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003220:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003222:	2380      	movs	r3, #128	; 0x80
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e024      	b.n	8003272 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d107      	bne.n	8003240 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003230:	4b6a      	ldr	r3, [pc, #424]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d109      	bne.n	8003250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e0c6      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003240:	4b66      	ldr	r3, [pc, #408]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0be      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003250:	f000 f8ce 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8003254:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	4a61      	ldr	r2, [pc, #388]	; (80033e0 <HAL_RCC_ClockConfig+0x268>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d909      	bls.n	8003272 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800325e:	4b5f      	ldr	r3, [pc, #380]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003266:	4a5d      	ldr	r2, [pc, #372]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800326c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003272:	4b5a      	ldr	r3, [pc, #360]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f023 0203 	bic.w	r2, r3, #3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4957      	ldr	r1, [pc, #348]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003280:	4313      	orrs	r3, r2
 8003282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003284:	f7ff f8fc 	bl	8002480 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800328c:	f7ff f8f8 	bl	8002480 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e095      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	4b4e      	ldr	r3, [pc, #312]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 020c 	and.w	r2, r3, #12
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d1eb      	bne.n	800328c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d023      	beq.n	8003308 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032cc:	4b43      	ldr	r3, [pc, #268]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	4a42      	ldr	r2, [pc, #264]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032d6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80032e4:	4b3d      	ldr	r3, [pc, #244]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032e6:	689b      	ldr	r3, [r3, #8]
 80032e8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80032ec:	4a3b      	ldr	r2, [pc, #236]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80032f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032f4:	4b39      	ldr	r3, [pc, #228]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	4936      	ldr	r1, [pc, #216]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003302:	4313      	orrs	r3, r2
 8003304:	608b      	str	r3, [r1, #8]
 8003306:	e008      	b.n	800331a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	d105      	bne.n	800331a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800330e:	4b33      	ldr	r3, [pc, #204]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	4a32      	ldr	r2, [pc, #200]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003314:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003318:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800331a:	4b2f      	ldr	r3, [pc, #188]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d21d      	bcs.n	8003364 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003328:	4b2b      	ldr	r3, [pc, #172]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f023 020f 	bic.w	r2, r3, #15
 8003330:	4929      	ldr	r1, [pc, #164]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	4313      	orrs	r3, r2
 8003336:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003338:	f7ff f8a2 	bl	8002480 <HAL_GetTick>
 800333c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	e00a      	b.n	8003356 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003340:	f7ff f89e 	bl	8002480 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e03b      	b.n	80033ce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003356:	4b20      	ldr	r3, [pc, #128]	; (80033d8 <HAL_RCC_ClockConfig+0x260>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	683a      	ldr	r2, [r7, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d1ed      	bne.n	8003340 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003370:	4b1a      	ldr	r3, [pc, #104]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4917      	ldr	r1, [pc, #92]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 800337e:	4313      	orrs	r3, r2
 8003380:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338e:	4b13      	ldr	r3, [pc, #76]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	00db      	lsls	r3, r3, #3
 800339c:	490f      	ldr	r1, [pc, #60]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 800339e:	4313      	orrs	r3, r2
 80033a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80033a2:	f000 f825 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80033a6:	4602      	mov	r2, r0
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <HAL_RCC_ClockConfig+0x264>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	091b      	lsrs	r3, r3, #4
 80033ae:	f003 030f 	and.w	r3, r3, #15
 80033b2:	490c      	ldr	r1, [pc, #48]	; (80033e4 <HAL_RCC_ClockConfig+0x26c>)
 80033b4:	5ccb      	ldrb	r3, [r1, r3]
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	fa22 f303 	lsr.w	r3, r2, r3
 80033be:	4a0a      	ldr	r2, [pc, #40]	; (80033e8 <HAL_RCC_ClockConfig+0x270>)
 80033c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033c2:	4b0a      	ldr	r3, [pc, #40]	; (80033ec <HAL_RCC_ClockConfig+0x274>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff f80e 	bl	80023e8 <HAL_InitTick>
 80033cc:	4603      	mov	r3, r0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	40022000 	.word	0x40022000
 80033dc:	40021000 	.word	0x40021000
 80033e0:	04c4b400 	.word	0x04c4b400
 80033e4:	08004e88 	.word	0x08004e88
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000004 	.word	0x20000004

080033f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b087      	sub	sp, #28
 80033f4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80033f6:	4b2c      	ldr	r3, [pc, #176]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 030c 	and.w	r3, r3, #12
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d102      	bne.n	8003408 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003402:	4b2a      	ldr	r3, [pc, #168]	; (80034ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	e047      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003408:	4b27      	ldr	r3, [pc, #156]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	2b08      	cmp	r3, #8
 8003412:	d102      	bne.n	800341a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003414:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003416:	613b      	str	r3, [r7, #16]
 8003418:	e03e      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800341a:	4b23      	ldr	r3, [pc, #140]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 030c 	and.w	r3, r3, #12
 8003422:	2b0c      	cmp	r3, #12
 8003424:	d136      	bne.n	8003494 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003426:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003430:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 030f 	and.w	r3, r3, #15
 800343a:	3301      	adds	r3, #1
 800343c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2b03      	cmp	r3, #3
 8003442:	d10c      	bne.n	800345e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003444:	4a1a      	ldr	r2, [pc, #104]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	fbb2 f3f3 	udiv	r3, r2, r3
 800344c:	4a16      	ldr	r2, [pc, #88]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800344e:	68d2      	ldr	r2, [r2, #12]
 8003450:	0a12      	lsrs	r2, r2, #8
 8003452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003456:	fb02 f303 	mul.w	r3, r2, r3
 800345a:	617b      	str	r3, [r7, #20]
      break;
 800345c:	e00c      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800345e:	4a13      	ldr	r2, [pc, #76]	; (80034ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	4a10      	ldr	r2, [pc, #64]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003468:	68d2      	ldr	r2, [r2, #12]
 800346a:	0a12      	lsrs	r2, r2, #8
 800346c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003470:	fb02 f303 	mul.w	r3, r2, r3
 8003474:	617b      	str	r3, [r7, #20]
      break;
 8003476:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003478:	4b0b      	ldr	r3, [pc, #44]	; (80034a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	0e5b      	lsrs	r3, r3, #25
 800347e:	f003 0303 	and.w	r3, r3, #3
 8003482:	3301      	adds	r3, #1
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003488:	697a      	ldr	r2, [r7, #20]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	e001      	b.n	8003498 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003498:	693b      	ldr	r3, [r7, #16]
}
 800349a:	4618      	mov	r0, r3
 800349c:	371c      	adds	r7, #28
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40021000 	.word	0x40021000
 80034ac:	00f42400 	.word	0x00f42400
 80034b0:	007a1200 	.word	0x007a1200

080034b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b087      	sub	sp, #28
 80034b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80034ba:	4b1e      	ldr	r3, [pc, #120]	; (8003534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	091b      	lsrs	r3, r3, #4
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	3301      	adds	r3, #1
 80034d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b03      	cmp	r3, #3
 80034d6:	d10c      	bne.n	80034f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034d8:	4a17      	ldr	r2, [pc, #92]	; (8003538 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	4a14      	ldr	r2, [pc, #80]	; (8003534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034e2:	68d2      	ldr	r2, [r2, #12]
 80034e4:	0a12      	lsrs	r2, r2, #8
 80034e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	617b      	str	r3, [r7, #20]
    break;
 80034f0:	e00c      	b.n	800350c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034f2:	4a12      	ldr	r2, [pc, #72]	; (800353c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fa:	4a0e      	ldr	r2, [pc, #56]	; (8003534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80034fc:	68d2      	ldr	r2, [r2, #12]
 80034fe:	0a12      	lsrs	r2, r2, #8
 8003500:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003504:	fb02 f303 	mul.w	r3, r2, r3
 8003508:	617b      	str	r3, [r7, #20]
    break;
 800350a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800350c:	4b09      	ldr	r3, [pc, #36]	; (8003534 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	0e5b      	lsrs	r3, r3, #25
 8003512:	f003 0303 	and.w	r3, r3, #3
 8003516:	3301      	adds	r3, #1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	fbb2 f3f3 	udiv	r3, r2, r3
 8003524:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003526:	687b      	ldr	r3, [r7, #4]
}
 8003528:	4618      	mov	r0, r3
 800352a:	371c      	adds	r7, #28
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr
 8003534:	40021000 	.word	0x40021000
 8003538:	007a1200 	.word	0x007a1200
 800353c:	00f42400 	.word	0x00f42400

08003540 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e049      	b.n	80035e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d106      	bne.n	800356c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f7fe fdd0 	bl	800210c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2202      	movs	r2, #2
 8003570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681a      	ldr	r2, [r3, #0]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	3304      	adds	r3, #4
 800357c:	4619      	mov	r1, r3
 800357e:	4610      	mov	r0, r2
 8003580:	f000 fe1e 	bl	80041c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2201      	movs	r2, #1
 80035c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2201      	movs	r2, #1
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	d001      	beq.n	8003608 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e04a      	b.n	800369e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f042 0201 	orr.w	r2, r2, #1
 800361e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a21      	ldr	r2, [pc, #132]	; (80036ac <HAL_TIM_Base_Start_IT+0xbc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d018      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x6c>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003632:	d013      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x6c>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a1d      	ldr	r2, [pc, #116]	; (80036b0 <HAL_TIM_Base_Start_IT+0xc0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00e      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x6c>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d009      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x6c>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a1a      	ldr	r2, [pc, #104]	; (80036b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d004      	beq.n	800365c <HAL_TIM_Base_Start_IT+0x6c>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a19      	ldr	r2, [pc, #100]	; (80036bc <HAL_TIM_Base_Start_IT+0xcc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d115      	bne.n	8003688 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	4b17      	ldr	r3, [pc, #92]	; (80036c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8003664:	4013      	ands	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b06      	cmp	r3, #6
 800366c:	d015      	beq.n	800369a <HAL_TIM_Base_Start_IT+0xaa>
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003674:	d011      	beq.n	800369a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 0201 	orr.w	r2, r2, #1
 8003684:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003686:	e008      	b.n	800369a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f042 0201 	orr.w	r2, r2, #1
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	e000      	b.n	800369c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800369a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40012c00 	.word	0x40012c00
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000800 	.word	0x40000800
 80036b8:	40013400 	.word	0x40013400
 80036bc:	40014000 	.word	0x40014000
 80036c0:	00010007 	.word	0x00010007

080036c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e049      	b.n	800376a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d106      	bne.n	80036f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f841 	bl	8003772 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2202      	movs	r2, #2
 80036f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	3304      	adds	r3, #4
 8003700:	4619      	mov	r1, r3
 8003702:	4610      	mov	r0, r2
 8003704:	f000 fd5c 	bl	80041c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
	...

08003788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d109      	bne.n	80037ac <HAL_TIM_PWM_Start+0x24>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e03c      	b.n	8003826 <HAL_TIM_PWM_Start+0x9e>
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b04      	cmp	r3, #4
 80037b0:	d109      	bne.n	80037c6 <HAL_TIM_PWM_Start+0x3e>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	bf14      	ite	ne
 80037be:	2301      	movne	r3, #1
 80037c0:	2300      	moveq	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	e02f      	b.n	8003826 <HAL_TIM_PWM_Start+0x9e>
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d109      	bne.n	80037e0 <HAL_TIM_PWM_Start+0x58>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	bf14      	ite	ne
 80037d8:	2301      	movne	r3, #1
 80037da:	2300      	moveq	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	e022      	b.n	8003826 <HAL_TIM_PWM_Start+0x9e>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b0c      	cmp	r3, #12
 80037e4:	d109      	bne.n	80037fa <HAL_TIM_PWM_Start+0x72>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	bf14      	ite	ne
 80037f2:	2301      	movne	r3, #1
 80037f4:	2300      	moveq	r3, #0
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	e015      	b.n	8003826 <HAL_TIM_PWM_Start+0x9e>
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b10      	cmp	r3, #16
 80037fe:	d109      	bne.n	8003814 <HAL_TIM_PWM_Start+0x8c>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2b01      	cmp	r3, #1
 800380a:	bf14      	ite	ne
 800380c:	2301      	movne	r3, #1
 800380e:	2300      	moveq	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	e008      	b.n	8003826 <HAL_TIM_PWM_Start+0x9e>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b01      	cmp	r3, #1
 800381e:	bf14      	ite	ne
 8003820:	2301      	movne	r3, #1
 8003822:	2300      	moveq	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e097      	b.n	800395e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d104      	bne.n	800383e <HAL_TIM_PWM_Start+0xb6>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2202      	movs	r2, #2
 8003838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800383c:	e023      	b.n	8003886 <HAL_TIM_PWM_Start+0xfe>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2b04      	cmp	r3, #4
 8003842:	d104      	bne.n	800384e <HAL_TIM_PWM_Start+0xc6>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2202      	movs	r2, #2
 8003848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800384c:	e01b      	b.n	8003886 <HAL_TIM_PWM_Start+0xfe>
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	2b08      	cmp	r3, #8
 8003852:	d104      	bne.n	800385e <HAL_TIM_PWM_Start+0xd6>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2202      	movs	r2, #2
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800385c:	e013      	b.n	8003886 <HAL_TIM_PWM_Start+0xfe>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b0c      	cmp	r3, #12
 8003862:	d104      	bne.n	800386e <HAL_TIM_PWM_Start+0xe6>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800386c:	e00b      	b.n	8003886 <HAL_TIM_PWM_Start+0xfe>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b10      	cmp	r3, #16
 8003872:	d104      	bne.n	800387e <HAL_TIM_PWM_Start+0xf6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800387c:	e003      	b.n	8003886 <HAL_TIM_PWM_Start+0xfe>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2202      	movs	r2, #2
 8003882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2201      	movs	r2, #1
 800388c:	6839      	ldr	r1, [r7, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f001 f8c4 	bl	8004a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a33      	ldr	r2, [pc, #204]	; (8003968 <HAL_TIM_PWM_Start+0x1e0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d013      	beq.n	80038c6 <HAL_TIM_PWM_Start+0x13e>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a32      	ldr	r2, [pc, #200]	; (800396c <HAL_TIM_PWM_Start+0x1e4>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00e      	beq.n	80038c6 <HAL_TIM_PWM_Start+0x13e>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a30      	ldr	r2, [pc, #192]	; (8003970 <HAL_TIM_PWM_Start+0x1e8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d009      	beq.n	80038c6 <HAL_TIM_PWM_Start+0x13e>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <HAL_TIM_PWM_Start+0x1ec>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d004      	beq.n	80038c6 <HAL_TIM_PWM_Start+0x13e>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a2d      	ldr	r2, [pc, #180]	; (8003978 <HAL_TIM_PWM_Start+0x1f0>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d101      	bne.n	80038ca <HAL_TIM_PWM_Start+0x142>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_TIM_PWM_Start+0x144>
 80038ca:	2300      	movs	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a20      	ldr	r2, [pc, #128]	; (8003968 <HAL_TIM_PWM_Start+0x1e0>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d018      	beq.n	800391c <HAL_TIM_PWM_Start+0x194>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f2:	d013      	beq.n	800391c <HAL_TIM_PWM_Start+0x194>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a20      	ldr	r2, [pc, #128]	; (800397c <HAL_TIM_PWM_Start+0x1f4>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00e      	beq.n	800391c <HAL_TIM_PWM_Start+0x194>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <HAL_TIM_PWM_Start+0x1f8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d009      	beq.n	800391c <HAL_TIM_PWM_Start+0x194>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a17      	ldr	r2, [pc, #92]	; (800396c <HAL_TIM_PWM_Start+0x1e4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d004      	beq.n	800391c <HAL_TIM_PWM_Start+0x194>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a16      	ldr	r2, [pc, #88]	; (8003970 <HAL_TIM_PWM_Start+0x1e8>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d115      	bne.n	8003948 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	4b18      	ldr	r3, [pc, #96]	; (8003984 <HAL_TIM_PWM_Start+0x1fc>)
 8003924:	4013      	ands	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2b06      	cmp	r3, #6
 800392c:	d015      	beq.n	800395a <HAL_TIM_PWM_Start+0x1d2>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003934:	d011      	beq.n	800395a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 0201 	orr.w	r2, r2, #1
 8003944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003946:	e008      	b.n	800395a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0201 	orr.w	r2, r2, #1
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	e000      	b.n	800395c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	4618      	mov	r0, r3
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	40012c00 	.word	0x40012c00
 800396c:	40013400 	.word	0x40013400
 8003970:	40014000 	.word	0x40014000
 8003974:	40014400 	.word	0x40014400
 8003978:	40014800 	.word	0x40014800
 800397c:	40000400 	.word	0x40000400
 8003980:	40000800 	.word	0x40000800
 8003984:	00010007 	.word	0x00010007

08003988 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
 8003990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2200      	movs	r2, #0
 8003998:	6839      	ldr	r1, [r7, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f001 f83e 	bl	8004a1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a3e      	ldr	r2, [pc, #248]	; (8003aa0 <HAL_TIM_PWM_Stop+0x118>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <HAL_TIM_PWM_Stop+0x4a>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a3d      	ldr	r2, [pc, #244]	; (8003aa4 <HAL_TIM_PWM_Stop+0x11c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d00e      	beq.n	80039d2 <HAL_TIM_PWM_Stop+0x4a>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a3b      	ldr	r2, [pc, #236]	; (8003aa8 <HAL_TIM_PWM_Stop+0x120>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d009      	beq.n	80039d2 <HAL_TIM_PWM_Stop+0x4a>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a3a      	ldr	r2, [pc, #232]	; (8003aac <HAL_TIM_PWM_Stop+0x124>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d004      	beq.n	80039d2 <HAL_TIM_PWM_Stop+0x4a>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a38      	ldr	r2, [pc, #224]	; (8003ab0 <HAL_TIM_PWM_Stop+0x128>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d101      	bne.n	80039d6 <HAL_TIM_PWM_Stop+0x4e>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <HAL_TIM_PWM_Stop+0x50>
 80039d6:	2300      	movs	r3, #0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d017      	beq.n	8003a0c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6a1a      	ldr	r2, [r3, #32]
 80039e2:	f241 1311 	movw	r3, #4369	; 0x1111
 80039e6:	4013      	ands	r3, r2
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10f      	bne.n	8003a0c <HAL_TIM_PWM_Stop+0x84>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6a1a      	ldr	r2, [r3, #32]
 80039f2:	f244 4344 	movw	r3, #17476	; 0x4444
 80039f6:	4013      	ands	r3, r2
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d107      	bne.n	8003a0c <HAL_TIM_PWM_Stop+0x84>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a0a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6a1a      	ldr	r2, [r3, #32]
 8003a12:	f241 1311 	movw	r3, #4369	; 0x1111
 8003a16:	4013      	ands	r3, r2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d10f      	bne.n	8003a3c <HAL_TIM_PWM_Stop+0xb4>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	6a1a      	ldr	r2, [r3, #32]
 8003a22:	f244 4344 	movw	r3, #17476	; 0x4444
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d107      	bne.n	8003a3c <HAL_TIM_PWM_Stop+0xb4>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 0201 	bic.w	r2, r2, #1
 8003a3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d104      	bne.n	8003a4c <HAL_TIM_PWM_Stop+0xc4>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a4a:	e023      	b.n	8003a94 <HAL_TIM_PWM_Stop+0x10c>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d104      	bne.n	8003a5c <HAL_TIM_PWM_Stop+0xd4>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2201      	movs	r2, #1
 8003a56:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a5a:	e01b      	b.n	8003a94 <HAL_TIM_PWM_Stop+0x10c>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b08      	cmp	r3, #8
 8003a60:	d104      	bne.n	8003a6c <HAL_TIM_PWM_Stop+0xe4>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a6a:	e013      	b.n	8003a94 <HAL_TIM_PWM_Stop+0x10c>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	2b0c      	cmp	r3, #12
 8003a70:	d104      	bne.n	8003a7c <HAL_TIM_PWM_Stop+0xf4>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a7a:	e00b      	b.n	8003a94 <HAL_TIM_PWM_Stop+0x10c>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b10      	cmp	r3, #16
 8003a80:	d104      	bne.n	8003a8c <HAL_TIM_PWM_Stop+0x104>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a8a:	e003      	b.n	8003a94 <HAL_TIM_PWM_Stop+0x10c>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8003a94:	2300      	movs	r3, #0
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40013400 	.word	0x40013400
 8003aa8:	40014000 	.word	0x40014000
 8003aac:	40014400 	.word	0x40014400
 8003ab0:	40014800 	.word	0x40014800

08003ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d020      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f003 0302 	and.w	r3, r3, #2
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d01b      	beq.n	8003b18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f06f 0202 	mvn.w	r2, #2
 8003ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d003      	beq.n	8003b06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fb40 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003b04:	e005      	b.n	8003b12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b06:	6878      	ldr	r0, [r7, #4]
 8003b08:	f000 fb32 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fb43 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f003 0304 	and.w	r3, r3, #4
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d020      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d01b      	beq.n	8003b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f06f 0204 	mvn.w	r2, #4
 8003b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	699b      	ldr	r3, [r3, #24]
 8003b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fb1a 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003b50:	e005      	b.n	8003b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 fb0c 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fb1d 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d020      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f003 0308 	and.w	r3, r3, #8
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d01b      	beq.n	8003bb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f06f 0208 	mvn.w	r2, #8
 8003b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2204      	movs	r2, #4
 8003b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69db      	ldr	r3, [r3, #28]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 faf4 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003b9c:	e005      	b.n	8003baa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fae6 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 faf7 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	f003 0310 	and.w	r3, r3, #16
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d020      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d01b      	beq.n	8003bfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0210 	mvn.w	r2, #16
 8003bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2208      	movs	r2, #8
 8003bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 face 	bl	8004184 <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fac0 	bl	8004170 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fad1 	bl	8004198 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f003 0301 	and.w	r3, r3, #1
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d007      	beq.n	8003c20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f06f 0201 	mvn.w	r2, #1
 8003c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd fcbe 	bl	800159c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d104      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00c      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d007      	beq.n	8003c4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	f001 f825 	bl	8004c98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d00c      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f001 f81d 	bl	8004cac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00c      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fa8b 	bl	80041ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f003 0320 	and.w	r3, r3, #32
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00c      	beq.n	8003cba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f003 0320 	and.w	r3, r3, #32
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f06f 0220 	mvn.w	r2, #32
 8003cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 ffe5 	bl	8004c84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00c      	beq.n	8003cde <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d007      	beq.n	8003cde <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003cd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fff1 	bl	8004cc0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00c      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d007      	beq.n	8003d02 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003cfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 ffe9 	bl	8004cd4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00c      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d007      	beq.n	8003d26 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8003d1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 ffe1 	bl	8004ce8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00c      	beq.n	8003d4a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d007      	beq.n	8003d4a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8003d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f000 ffd9 	bl	8004cfc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b086      	sub	sp, #24
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d60:	2300      	movs	r3, #0
 8003d62:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d6e:	2302      	movs	r3, #2
 8003d70:	e0ff      	b.n	8003f72 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b14      	cmp	r3, #20
 8003d7e:	f200 80f0 	bhi.w	8003f62 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003d82:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d88:	08003ddd 	.word	0x08003ddd
 8003d8c:	08003f63 	.word	0x08003f63
 8003d90:	08003f63 	.word	0x08003f63
 8003d94:	08003f63 	.word	0x08003f63
 8003d98:	08003e1d 	.word	0x08003e1d
 8003d9c:	08003f63 	.word	0x08003f63
 8003da0:	08003f63 	.word	0x08003f63
 8003da4:	08003f63 	.word	0x08003f63
 8003da8:	08003e5f 	.word	0x08003e5f
 8003dac:	08003f63 	.word	0x08003f63
 8003db0:	08003f63 	.word	0x08003f63
 8003db4:	08003f63 	.word	0x08003f63
 8003db8:	08003e9f 	.word	0x08003e9f
 8003dbc:	08003f63 	.word	0x08003f63
 8003dc0:	08003f63 	.word	0x08003f63
 8003dc4:	08003f63 	.word	0x08003f63
 8003dc8:	08003ee1 	.word	0x08003ee1
 8003dcc:	08003f63 	.word	0x08003f63
 8003dd0:	08003f63 	.word	0x08003f63
 8003dd4:	08003f63 	.word	0x08003f63
 8003dd8:	08003f21 	.word	0x08003f21
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fa88 	bl	80042f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	699a      	ldr	r2, [r3, #24]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f042 0208 	orr.w	r2, r2, #8
 8003df6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699a      	ldr	r2, [r3, #24]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f022 0204 	bic.w	r2, r2, #4
 8003e06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6999      	ldr	r1, [r3, #24]
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	619a      	str	r2, [r3, #24]
      break;
 8003e1a:	e0a5      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 faf8 	bl	8004418 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	699a      	ldr	r2, [r3, #24]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699a      	ldr	r2, [r3, #24]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6999      	ldr	r1, [r3, #24]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	021a      	lsls	r2, r3, #8
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	619a      	str	r2, [r3, #24]
      break;
 8003e5c:	e084      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68b9      	ldr	r1, [r7, #8]
 8003e64:	4618      	mov	r0, r3
 8003e66:	f000 fb61 	bl	800452c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	69da      	ldr	r2, [r3, #28]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0208 	orr.w	r2, r2, #8
 8003e78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	69da      	ldr	r2, [r3, #28]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0204 	bic.w	r2, r2, #4
 8003e88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	69d9      	ldr	r1, [r3, #28]
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	430a      	orrs	r2, r1
 8003e9a:	61da      	str	r2, [r3, #28]
      break;
 8003e9c:	e064      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68b9      	ldr	r1, [r7, #8]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fbc9 	bl	800463c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	69da      	ldr	r2, [r3, #28]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ec8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69d9      	ldr	r1, [r3, #28]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	021a      	lsls	r2, r3, #8
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	430a      	orrs	r2, r1
 8003edc:	61da      	str	r2, [r3, #28]
      break;
 8003ede:	e043      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68b9      	ldr	r1, [r7, #8]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 fc32 	bl	8004750 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0208 	orr.w	r2, r2, #8
 8003efa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f022 0204 	bic.w	r2, r2, #4
 8003f0a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	691a      	ldr	r2, [r3, #16]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003f1e:	e023      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68b9      	ldr	r1, [r7, #8]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fc76 	bl	8004818 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f3a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f4a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	021a      	lsls	r2, r3, #8
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	430a      	orrs	r2, r1
 8003f5e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003f60:	e002      	b.n	8003f68 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	75fb      	strb	r3, [r7, #23]
      break;
 8003f66:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f70:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop

08003f7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d101      	bne.n	8003f98 <HAL_TIM_ConfigClockSource+0x1c>
 8003f94:	2302      	movs	r3, #2
 8003f96:	e0de      	b.n	8004156 <HAL_TIM_ConfigClockSource+0x1da>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003fb6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a63      	ldr	r2, [pc, #396]	; (8004160 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	f000 80a9 	beq.w	800412a <HAL_TIM_ConfigClockSource+0x1ae>
 8003fd8:	4a61      	ldr	r2, [pc, #388]	; (8004160 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	f200 80ae 	bhi.w	800413c <HAL_TIM_ConfigClockSource+0x1c0>
 8003fe0:	4a60      	ldr	r2, [pc, #384]	; (8004164 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	f000 80a1 	beq.w	800412a <HAL_TIM_ConfigClockSource+0x1ae>
 8003fe8:	4a5e      	ldr	r2, [pc, #376]	; (8004164 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	f200 80a6 	bhi.w	800413c <HAL_TIM_ConfigClockSource+0x1c0>
 8003ff0:	4a5d      	ldr	r2, [pc, #372]	; (8004168 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	f000 8099 	beq.w	800412a <HAL_TIM_ConfigClockSource+0x1ae>
 8003ff8:	4a5b      	ldr	r2, [pc, #364]	; (8004168 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	f200 809e 	bhi.w	800413c <HAL_TIM_ConfigClockSource+0x1c0>
 8004000:	4a5a      	ldr	r2, [pc, #360]	; (800416c <HAL_TIM_ConfigClockSource+0x1f0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	f000 8091 	beq.w	800412a <HAL_TIM_ConfigClockSource+0x1ae>
 8004008:	4a58      	ldr	r2, [pc, #352]	; (800416c <HAL_TIM_ConfigClockSource+0x1f0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	f200 8096 	bhi.w	800413c <HAL_TIM_ConfigClockSource+0x1c0>
 8004010:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004014:	f000 8089 	beq.w	800412a <HAL_TIM_ConfigClockSource+0x1ae>
 8004018:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800401c:	f200 808e 	bhi.w	800413c <HAL_TIM_ConfigClockSource+0x1c0>
 8004020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004024:	d03e      	beq.n	80040a4 <HAL_TIM_ConfigClockSource+0x128>
 8004026:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800402a:	f200 8087 	bhi.w	800413c <HAL_TIM_ConfigClockSource+0x1c0>
 800402e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004032:	f000 8086 	beq.w	8004142 <HAL_TIM_ConfigClockSource+0x1c6>
 8004036:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800403a:	d87f      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x1c0>
 800403c:	2b70      	cmp	r3, #112	; 0x70
 800403e:	d01a      	beq.n	8004076 <HAL_TIM_ConfigClockSource+0xfa>
 8004040:	2b70      	cmp	r3, #112	; 0x70
 8004042:	d87b      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x1c0>
 8004044:	2b60      	cmp	r3, #96	; 0x60
 8004046:	d050      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x16e>
 8004048:	2b60      	cmp	r3, #96	; 0x60
 800404a:	d877      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x1c0>
 800404c:	2b50      	cmp	r3, #80	; 0x50
 800404e:	d03c      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x14e>
 8004050:	2b50      	cmp	r3, #80	; 0x50
 8004052:	d873      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x1c0>
 8004054:	2b40      	cmp	r3, #64	; 0x40
 8004056:	d058      	beq.n	800410a <HAL_TIM_ConfigClockSource+0x18e>
 8004058:	2b40      	cmp	r3, #64	; 0x40
 800405a:	d86f      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x1c0>
 800405c:	2b30      	cmp	r3, #48	; 0x30
 800405e:	d064      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x1ae>
 8004060:	2b30      	cmp	r3, #48	; 0x30
 8004062:	d86b      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x1c0>
 8004064:	2b20      	cmp	r3, #32
 8004066:	d060      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x1ae>
 8004068:	2b20      	cmp	r3, #32
 800406a:	d867      	bhi.n	800413c <HAL_TIM_ConfigClockSource+0x1c0>
 800406c:	2b00      	cmp	r3, #0
 800406e:	d05c      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x1ae>
 8004070:	2b10      	cmp	r3, #16
 8004072:	d05a      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x1ae>
 8004074:	e062      	b.n	800413c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004086:	f000 fca9 	bl	80049dc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004098:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	609a      	str	r2, [r3, #8]
      break;
 80040a2:	e04f      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040b4:	f000 fc92 	bl	80049dc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80040c6:	609a      	str	r2, [r3, #8]
      break;
 80040c8:	e03c      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d6:	461a      	mov	r2, r3
 80040d8:	f000 fc04 	bl	80048e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2150      	movs	r1, #80	; 0x50
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fc5d 	bl	80049a2 <TIM_ITRx_SetConfig>
      break;
 80040e8:	e02c      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040f6:	461a      	mov	r2, r3
 80040f8:	f000 fc23 	bl	8004942 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2160      	movs	r1, #96	; 0x60
 8004102:	4618      	mov	r0, r3
 8004104:	f000 fc4d 	bl	80049a2 <TIM_ITRx_SetConfig>
      break;
 8004108:	e01c      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004116:	461a      	mov	r2, r3
 8004118:	f000 fbe4 	bl	80048e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2140      	movs	r1, #64	; 0x40
 8004122:	4618      	mov	r0, r3
 8004124:	f000 fc3d 	bl	80049a2 <TIM_ITRx_SetConfig>
      break;
 8004128:	e00c      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f000 fc34 	bl	80049a2 <TIM_ITRx_SetConfig>
      break;
 800413a:	e003      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	73fb      	strb	r3, [r7, #15]
      break;
 8004140:	e000      	b.n	8004144 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004142:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004154:	7bfb      	ldrb	r3, [r7, #15]
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	00100070 	.word	0x00100070
 8004164:	00100040 	.word	0x00100040
 8004168:	00100030 	.word	0x00100030
 800416c:	00100020 	.word	0x00100020

08004170 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a42      	ldr	r2, [pc, #264]	; (80042dc <TIM_Base_SetConfig+0x11c>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d00f      	beq.n	80041f8 <TIM_Base_SetConfig+0x38>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041de:	d00b      	beq.n	80041f8 <TIM_Base_SetConfig+0x38>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a3f      	ldr	r2, [pc, #252]	; (80042e0 <TIM_Base_SetConfig+0x120>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d007      	beq.n	80041f8 <TIM_Base_SetConfig+0x38>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a3e      	ldr	r2, [pc, #248]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d003      	beq.n	80041f8 <TIM_Base_SetConfig+0x38>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a3d      	ldr	r2, [pc, #244]	; (80042e8 <TIM_Base_SetConfig+0x128>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d108      	bne.n	800420a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a33      	ldr	r2, [pc, #204]	; (80042dc <TIM_Base_SetConfig+0x11c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d01b      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004218:	d017      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a30      	ldr	r2, [pc, #192]	; (80042e0 <TIM_Base_SetConfig+0x120>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d013      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2f      	ldr	r2, [pc, #188]	; (80042e4 <TIM_Base_SetConfig+0x124>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00f      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2e      	ldr	r2, [pc, #184]	; (80042e8 <TIM_Base_SetConfig+0x128>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d00b      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a2d      	ldr	r2, [pc, #180]	; (80042ec <TIM_Base_SetConfig+0x12c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d007      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a2c      	ldr	r2, [pc, #176]	; (80042f0 <TIM_Base_SetConfig+0x130>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d003      	beq.n	800424a <TIM_Base_SetConfig+0x8a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	4a2b      	ldr	r2, [pc, #172]	; (80042f4 <TIM_Base_SetConfig+0x134>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d108      	bne.n	800425c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	4313      	orrs	r3, r2
 800425a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a16      	ldr	r2, [pc, #88]	; (80042dc <TIM_Base_SetConfig+0x11c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00f      	beq.n	80042a8 <TIM_Base_SetConfig+0xe8>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a17      	ldr	r2, [pc, #92]	; (80042e8 <TIM_Base_SetConfig+0x128>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00b      	beq.n	80042a8 <TIM_Base_SetConfig+0xe8>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a16      	ldr	r2, [pc, #88]	; (80042ec <TIM_Base_SetConfig+0x12c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d007      	beq.n	80042a8 <TIM_Base_SetConfig+0xe8>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <TIM_Base_SetConfig+0x130>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_Base_SetConfig+0xe8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a14      	ldr	r2, [pc, #80]	; (80042f4 <TIM_Base_SetConfig+0x134>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d103      	bne.n	80042b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	f003 0301 	and.w	r3, r3, #1
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d105      	bne.n	80042ce <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f023 0201 	bic.w	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	611a      	str	r2, [r3, #16]
  }
}
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40012c00 	.word	0x40012c00
 80042e0:	40000400 	.word	0x40000400
 80042e4:	40000800 	.word	0x40000800
 80042e8:	40013400 	.word	0x40013400
 80042ec:	40014000 	.word	0x40014000
 80042f0:	40014400 	.word	0x40014400
 80042f4:	40014800 	.word	0x40014800

080042f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	f023 0201 	bic.w	r2, r3, #1
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	699b      	ldr	r3, [r3, #24]
 800431e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0303 	bic.w	r3, r3, #3
 8004332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f023 0302 	bic.w	r3, r3, #2
 8004344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	697a      	ldr	r2, [r7, #20]
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a2c      	ldr	r2, [pc, #176]	; (8004404 <TIM_OC1_SetConfig+0x10c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00f      	beq.n	8004378 <TIM_OC1_SetConfig+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a2b      	ldr	r2, [pc, #172]	; (8004408 <TIM_OC1_SetConfig+0x110>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00b      	beq.n	8004378 <TIM_OC1_SetConfig+0x80>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a2a      	ldr	r2, [pc, #168]	; (800440c <TIM_OC1_SetConfig+0x114>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <TIM_OC1_SetConfig+0x80>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a29      	ldr	r2, [pc, #164]	; (8004410 <TIM_OC1_SetConfig+0x118>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <TIM_OC1_SetConfig+0x80>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a28      	ldr	r2, [pc, #160]	; (8004414 <TIM_OC1_SetConfig+0x11c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d10c      	bne.n	8004392 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0308 	bic.w	r3, r3, #8
 800437e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f023 0304 	bic.w	r3, r3, #4
 8004390:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a1b      	ldr	r2, [pc, #108]	; (8004404 <TIM_OC1_SetConfig+0x10c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d00f      	beq.n	80043ba <TIM_OC1_SetConfig+0xc2>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a1a      	ldr	r2, [pc, #104]	; (8004408 <TIM_OC1_SetConfig+0x110>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d00b      	beq.n	80043ba <TIM_OC1_SetConfig+0xc2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	4a19      	ldr	r2, [pc, #100]	; (800440c <TIM_OC1_SetConfig+0x114>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d007      	beq.n	80043ba <TIM_OC1_SetConfig+0xc2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a18      	ldr	r2, [pc, #96]	; (8004410 <TIM_OC1_SetConfig+0x118>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_OC1_SetConfig+0xc2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a17      	ldr	r2, [pc, #92]	; (8004414 <TIM_OC1_SetConfig+0x11c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d111      	bne.n	80043de <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80043c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	621a      	str	r2, [r3, #32]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40012c00 	.word	0x40012c00
 8004408:	40013400 	.word	0x40013400
 800440c:	40014000 	.word	0x40014000
 8004410:	40014400 	.word	0x40014400
 8004414:	40014800 	.word	0x40014800

08004418 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	f023 0210 	bic.w	r2, r3, #16
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	699b      	ldr	r3, [r3, #24]
 800443e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004446:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800444a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	021b      	lsls	r3, r3, #8
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	4313      	orrs	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f023 0320 	bic.w	r3, r3, #32
 8004466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	011b      	lsls	r3, r3, #4
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	4313      	orrs	r3, r2
 8004472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	4a28      	ldr	r2, [pc, #160]	; (8004518 <TIM_OC2_SetConfig+0x100>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d003      	beq.n	8004484 <TIM_OC2_SetConfig+0x6c>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	4a27      	ldr	r2, [pc, #156]	; (800451c <TIM_OC2_SetConfig+0x104>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d10d      	bne.n	80044a0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800448a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800449e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a1d      	ldr	r2, [pc, #116]	; (8004518 <TIM_OC2_SetConfig+0x100>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00f      	beq.n	80044c8 <TIM_OC2_SetConfig+0xb0>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	4a1c      	ldr	r2, [pc, #112]	; (800451c <TIM_OC2_SetConfig+0x104>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d00b      	beq.n	80044c8 <TIM_OC2_SetConfig+0xb0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a1b      	ldr	r2, [pc, #108]	; (8004520 <TIM_OC2_SetConfig+0x108>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d007      	beq.n	80044c8 <TIM_OC2_SetConfig+0xb0>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a1a      	ldr	r2, [pc, #104]	; (8004524 <TIM_OC2_SetConfig+0x10c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d003      	beq.n	80044c8 <TIM_OC2_SetConfig+0xb0>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a19      	ldr	r2, [pc, #100]	; (8004528 <TIM_OC2_SetConfig+0x110>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d113      	bne.n	80044f0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	693a      	ldr	r2, [r7, #16]
 80044f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	621a      	str	r2, [r3, #32]
}
 800450a:	bf00      	nop
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40012c00 	.word	0x40012c00
 800451c:	40013400 	.word	0x40013400
 8004520:	40014000 	.word	0x40014000
 8004524:	40014400 	.word	0x40014400
 8004528:	40014800 	.word	0x40014800

0800452c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69db      	ldr	r3, [r3, #28]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0303 	bic.w	r3, r3, #3
 8004566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4313      	orrs	r3, r2
 8004570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	4313      	orrs	r3, r2
 8004584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a27      	ldr	r2, [pc, #156]	; (8004628 <TIM_OC3_SetConfig+0xfc>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d003      	beq.n	8004596 <TIM_OC3_SetConfig+0x6a>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a26      	ldr	r2, [pc, #152]	; (800462c <TIM_OC3_SetConfig+0x100>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d10d      	bne.n	80045b2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800459c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	021b      	lsls	r3, r3, #8
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1c      	ldr	r2, [pc, #112]	; (8004628 <TIM_OC3_SetConfig+0xfc>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00f      	beq.n	80045da <TIM_OC3_SetConfig+0xae>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a1b      	ldr	r2, [pc, #108]	; (800462c <TIM_OC3_SetConfig+0x100>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00b      	beq.n	80045da <TIM_OC3_SetConfig+0xae>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a1a      	ldr	r2, [pc, #104]	; (8004630 <TIM_OC3_SetConfig+0x104>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <TIM_OC3_SetConfig+0xae>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a19      	ldr	r2, [pc, #100]	; (8004634 <TIM_OC3_SetConfig+0x108>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_OC3_SetConfig+0xae>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a18      	ldr	r2, [pc, #96]	; (8004638 <TIM_OC3_SetConfig+0x10c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d113      	bne.n	8004602 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	011b      	lsls	r3, r3, #4
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	697a      	ldr	r2, [r7, #20]
 800461a:	621a      	str	r2, [r3, #32]
}
 800461c:	bf00      	nop
 800461e:	371c      	adds	r7, #28
 8004620:	46bd      	mov	sp, r7
 8004622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004626:	4770      	bx	lr
 8004628:	40012c00 	.word	0x40012c00
 800462c:	40013400 	.word	0x40013400
 8004630:	40014000 	.word	0x40014000
 8004634:	40014400 	.word	0x40014400
 8004638:	40014800 	.word	0x40014800

0800463c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800463c:	b480      	push	{r7}
 800463e:	b087      	sub	sp, #28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
 8004644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800466a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800466e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004676:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	021b      	lsls	r3, r3, #8
 800467e:	68fa      	ldr	r2, [r7, #12]
 8004680:	4313      	orrs	r3, r2
 8004682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800468a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	031b      	lsls	r3, r3, #12
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4a28      	ldr	r2, [pc, #160]	; (800473c <TIM_OC4_SetConfig+0x100>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d003      	beq.n	80046a8 <TIM_OC4_SetConfig+0x6c>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a27      	ldr	r2, [pc, #156]	; (8004740 <TIM_OC4_SetConfig+0x104>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d10d      	bne.n	80046c4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80046a8:	697b      	ldr	r3, [r7, #20]
 80046aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	031b      	lsls	r3, r3, #12
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4a1d      	ldr	r2, [pc, #116]	; (800473c <TIM_OC4_SetConfig+0x100>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d00f      	beq.n	80046ec <TIM_OC4_SetConfig+0xb0>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a1c      	ldr	r2, [pc, #112]	; (8004740 <TIM_OC4_SetConfig+0x104>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00b      	beq.n	80046ec <TIM_OC4_SetConfig+0xb0>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a1b      	ldr	r2, [pc, #108]	; (8004744 <TIM_OC4_SetConfig+0x108>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d007      	beq.n	80046ec <TIM_OC4_SetConfig+0xb0>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <TIM_OC4_SetConfig+0x10c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d003      	beq.n	80046ec <TIM_OC4_SetConfig+0xb0>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a19      	ldr	r2, [pc, #100]	; (800474c <TIM_OC4_SetConfig+0x110>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d113      	bne.n	8004714 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046f2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046fa:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	695b      	ldr	r3, [r3, #20]
 8004700:	019b      	lsls	r3, r3, #6
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	019b      	lsls	r3, r3, #6
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	4313      	orrs	r3, r2
 8004712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	693a      	ldr	r2, [r7, #16]
 8004718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	697a      	ldr	r2, [r7, #20]
 800472c:	621a      	str	r2, [r3, #32]
}
 800472e:	bf00      	nop
 8004730:	371c      	adds	r7, #28
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	40012c00 	.word	0x40012c00
 8004740:	40013400 	.word	0x40013400
 8004744:	40014000 	.word	0x40014000
 8004748:	40014400 	.word	0x40014400
 800474c:	40014800 	.word	0x40014800

08004750 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800477e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004794:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	041b      	lsls	r3, r3, #16
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	4313      	orrs	r3, r2
 80047a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a17      	ldr	r2, [pc, #92]	; (8004804 <TIM_OC5_SetConfig+0xb4>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d00f      	beq.n	80047ca <TIM_OC5_SetConfig+0x7a>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a16      	ldr	r2, [pc, #88]	; (8004808 <TIM_OC5_SetConfig+0xb8>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00b      	beq.n	80047ca <TIM_OC5_SetConfig+0x7a>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a15      	ldr	r2, [pc, #84]	; (800480c <TIM_OC5_SetConfig+0xbc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d007      	beq.n	80047ca <TIM_OC5_SetConfig+0x7a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a14      	ldr	r2, [pc, #80]	; (8004810 <TIM_OC5_SetConfig+0xc0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d003      	beq.n	80047ca <TIM_OC5_SetConfig+0x7a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a13      	ldr	r2, [pc, #76]	; (8004814 <TIM_OC5_SetConfig+0xc4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d109      	bne.n	80047de <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	695b      	ldr	r3, [r3, #20]
 80047d6:	021b      	lsls	r3, r3, #8
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	693a      	ldr	r2, [r7, #16]
 80047f6:	621a      	str	r2, [r3, #32]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	40012c00 	.word	0x40012c00
 8004808:	40013400 	.word	0x40013400
 800480c:	40014000 	.word	0x40014000
 8004810:	40014400 	.word	0x40014400
 8004814:	40014800 	.word	0x40014800

08004818 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004818:	b480      	push	{r7}
 800481a:	b087      	sub	sp, #28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
 8004820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800483e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800484a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	021b      	lsls	r3, r3, #8
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4313      	orrs	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800485e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	051b      	lsls	r3, r3, #20
 8004866:	693a      	ldr	r2, [r7, #16]
 8004868:	4313      	orrs	r3, r2
 800486a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a18      	ldr	r2, [pc, #96]	; (80048d0 <TIM_OC6_SetConfig+0xb8>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00f      	beq.n	8004894 <TIM_OC6_SetConfig+0x7c>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <TIM_OC6_SetConfig+0xbc>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00b      	beq.n	8004894 <TIM_OC6_SetConfig+0x7c>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a16      	ldr	r2, [pc, #88]	; (80048d8 <TIM_OC6_SetConfig+0xc0>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d007      	beq.n	8004894 <TIM_OC6_SetConfig+0x7c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a15      	ldr	r2, [pc, #84]	; (80048dc <TIM_OC6_SetConfig+0xc4>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d003      	beq.n	8004894 <TIM_OC6_SetConfig+0x7c>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a14      	ldr	r2, [pc, #80]	; (80048e0 <TIM_OC6_SetConfig+0xc8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d109      	bne.n	80048a8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800489a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	029b      	lsls	r3, r3, #10
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	697a      	ldr	r2, [r7, #20]
 80048ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	68fa      	ldr	r2, [r7, #12]
 80048b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	621a      	str	r2, [r3, #32]
}
 80048c2:	bf00      	nop
 80048c4:	371c      	adds	r7, #28
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr
 80048ce:	bf00      	nop
 80048d0:	40012c00 	.word	0x40012c00
 80048d4:	40013400 	.word	0x40013400
 80048d8:	40014000 	.word	0x40014000
 80048dc:	40014400 	.word	0x40014400
 80048e0:	40014800 	.word	0x40014800

080048e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	f023 0201 	bic.w	r2, r3, #1
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800490e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	f023 030a 	bic.w	r3, r3, #10
 8004920:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	4313      	orrs	r3, r2
 8004928:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	621a      	str	r2, [r3, #32]
}
 8004936:	bf00      	nop
 8004938:	371c      	adds	r7, #28
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004942:	b480      	push	{r7}
 8004944:	b087      	sub	sp, #28
 8004946:	af00      	add	r7, sp, #0
 8004948:	60f8      	str	r0, [r7, #12]
 800494a:	60b9      	str	r1, [r7, #8]
 800494c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	f023 0210 	bic.w	r2, r3, #16
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800496c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	031b      	lsls	r3, r3, #12
 8004972:	693a      	ldr	r2, [r7, #16]
 8004974:	4313      	orrs	r3, r2
 8004976:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800497e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	011b      	lsls	r3, r3, #4
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	621a      	str	r2, [r3, #32]
}
 8004996:	bf00      	nop
 8004998:	371c      	adds	r7, #28
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	689b      	ldr	r3, [r3, #8]
 80049b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80049b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	f043 0307 	orr.w	r3, r3, #7
 80049c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	609a      	str	r2, [r3, #8]
}
 80049d0:	bf00      	nop
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	60f8      	str	r0, [r7, #12]
 80049e4:	60b9      	str	r1, [r7, #8]
 80049e6:	607a      	str	r2, [r7, #4]
 80049e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	021a      	lsls	r2, r3, #8
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	4313      	orrs	r3, r2
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	609a      	str	r2, [r3, #8]
}
 8004a10:	bf00      	nop
 8004a12:	371c      	adds	r7, #28
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f003 031f 	and.w	r3, r3, #31
 8004a2e:	2201      	movs	r2, #1
 8004a30:	fa02 f303 	lsl.w	r3, r2, r3
 8004a34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6a1a      	ldr	r2, [r3, #32]
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	43db      	mvns	r3, r3
 8004a3e:	401a      	ands	r2, r3
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	6a1a      	ldr	r2, [r3, #32]
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	6879      	ldr	r1, [r7, #4]
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	431a      	orrs	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	621a      	str	r2, [r3, #32]
}
 8004a5a:	bf00      	nop
 8004a5c:	371c      	adds	r7, #28
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
	...

08004a68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d101      	bne.n	8004a80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a7c:	2302      	movs	r3, #2
 8004a7e:	e065      	b.n	8004b4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a2c      	ldr	r2, [pc, #176]	; (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d004      	beq.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2b      	ldr	r2, [pc, #172]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d108      	bne.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004aba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1b      	ldr	r2, [pc, #108]	; (8004b58 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d018      	beq.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004af6:	d013      	beq.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a18      	ldr	r2, [pc, #96]	; (8004b60 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d00e      	beq.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a17      	ldr	r2, [pc, #92]	; (8004b64 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d009      	beq.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a12      	ldr	r2, [pc, #72]	; (8004b5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d004      	beq.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d10c      	bne.n	8004b3a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr
 8004b58:	40012c00 	.word	0x40012c00
 8004b5c:	40013400 	.word	0x40013400
 8004b60:	40000400 	.word	0x40000400
 8004b64:	40000800 	.word	0x40000800
 8004b68:	40014000 	.word	0x40014000

08004b6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e073      	b.n	8004c70 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	695b      	ldr	r3, [r3, #20]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	041b      	lsls	r3, r3, #16
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a19      	ldr	r2, [pc, #100]	; (8004c7c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d004      	beq.n	8004c24 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a18      	ldr	r2, [pc, #96]	; (8004c80 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d11c      	bne.n	8004c5e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2e:	051b      	lsls	r3, r3, #20
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr
 8004c7c:	40012c00 	.word	0x40012c00
 8004c80:	40013400 	.word	0x40013400

08004c84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c8c:	bf00      	nop
 8004c8e:	370c      	adds	r7, #12
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <_ZdlPvj>:
 8004d10:	f000 b800 	b.w	8004d14 <_ZdlPv>

08004d14 <_ZdlPv>:
 8004d14:	f000 b800 	b.w	8004d18 <free>

08004d18 <free>:
 8004d18:	4b02      	ldr	r3, [pc, #8]	; (8004d24 <free+0xc>)
 8004d1a:	4601      	mov	r1, r0
 8004d1c:	6818      	ldr	r0, [r3, #0]
 8004d1e:	f000 b84b 	b.w	8004db8 <_free_r>
 8004d22:	bf00      	nop
 8004d24:	20000058 	.word	0x20000058

08004d28 <__malloc_lock>:
 8004d28:	4801      	ldr	r0, [pc, #4]	; (8004d30 <__malloc_lock+0x8>)
 8004d2a:	f000 b835 	b.w	8004d98 <__retarget_lock_acquire_recursive>
 8004d2e:	bf00      	nop
 8004d30:	20000588 	.word	0x20000588

08004d34 <__malloc_unlock>:
 8004d34:	4801      	ldr	r0, [pc, #4]	; (8004d3c <__malloc_unlock+0x8>)
 8004d36:	f000 b830 	b.w	8004d9a <__retarget_lock_release_recursive>
 8004d3a:	bf00      	nop
 8004d3c:	20000588 	.word	0x20000588

08004d40 <memset>:
 8004d40:	4402      	add	r2, r0
 8004d42:	4603      	mov	r3, r0
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d100      	bne.n	8004d4a <memset+0xa>
 8004d48:	4770      	bx	lr
 8004d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d4e:	e7f9      	b.n	8004d44 <memset+0x4>

08004d50 <__libc_init_array>:
 8004d50:	b570      	push	{r4, r5, r6, lr}
 8004d52:	4d0d      	ldr	r5, [pc, #52]	; (8004d88 <__libc_init_array+0x38>)
 8004d54:	4c0d      	ldr	r4, [pc, #52]	; (8004d8c <__libc_init_array+0x3c>)
 8004d56:	1b64      	subs	r4, r4, r5
 8004d58:	10a4      	asrs	r4, r4, #2
 8004d5a:	2600      	movs	r6, #0
 8004d5c:	42a6      	cmp	r6, r4
 8004d5e:	d109      	bne.n	8004d74 <__libc_init_array+0x24>
 8004d60:	4d0b      	ldr	r5, [pc, #44]	; (8004d90 <__libc_init_array+0x40>)
 8004d62:	4c0c      	ldr	r4, [pc, #48]	; (8004d94 <__libc_init_array+0x44>)
 8004d64:	f000 f874 	bl	8004e50 <_init>
 8004d68:	1b64      	subs	r4, r4, r5
 8004d6a:	10a4      	asrs	r4, r4, #2
 8004d6c:	2600      	movs	r6, #0
 8004d6e:	42a6      	cmp	r6, r4
 8004d70:	d105      	bne.n	8004d7e <__libc_init_array+0x2e>
 8004d72:	bd70      	pop	{r4, r5, r6, pc}
 8004d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d78:	4798      	blx	r3
 8004d7a:	3601      	adds	r6, #1
 8004d7c:	e7ee      	b.n	8004d5c <__libc_init_array+0xc>
 8004d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d82:	4798      	blx	r3
 8004d84:	3601      	adds	r6, #1
 8004d86:	e7f2      	b.n	8004d6e <__libc_init_array+0x1e>
 8004d88:	08004e98 	.word	0x08004e98
 8004d8c:	08004e98 	.word	0x08004e98
 8004d90:	08004e98 	.word	0x08004e98
 8004d94:	08004ea0 	.word	0x08004ea0

08004d98 <__retarget_lock_acquire_recursive>:
 8004d98:	4770      	bx	lr

08004d9a <__retarget_lock_release_recursive>:
 8004d9a:	4770      	bx	lr

08004d9c <memcpy>:
 8004d9c:	440a      	add	r2, r1
 8004d9e:	4291      	cmp	r1, r2
 8004da0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004da4:	d100      	bne.n	8004da8 <memcpy+0xc>
 8004da6:	4770      	bx	lr
 8004da8:	b510      	push	{r4, lr}
 8004daa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004db2:	4291      	cmp	r1, r2
 8004db4:	d1f9      	bne.n	8004daa <memcpy+0xe>
 8004db6:	bd10      	pop	{r4, pc}

08004db8 <_free_r>:
 8004db8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004dba:	2900      	cmp	r1, #0
 8004dbc:	d044      	beq.n	8004e48 <_free_r+0x90>
 8004dbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dc2:	9001      	str	r0, [sp, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f1a1 0404 	sub.w	r4, r1, #4
 8004dca:	bfb8      	it	lt
 8004dcc:	18e4      	addlt	r4, r4, r3
 8004dce:	f7ff ffab 	bl	8004d28 <__malloc_lock>
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	; (8004e4c <_free_r+0x94>)
 8004dd4:	9801      	ldr	r0, [sp, #4]
 8004dd6:	6813      	ldr	r3, [r2, #0]
 8004dd8:	b933      	cbnz	r3, 8004de8 <_free_r+0x30>
 8004dda:	6063      	str	r3, [r4, #4]
 8004ddc:	6014      	str	r4, [r2, #0]
 8004dde:	b003      	add	sp, #12
 8004de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004de4:	f7ff bfa6 	b.w	8004d34 <__malloc_unlock>
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	d908      	bls.n	8004dfe <_free_r+0x46>
 8004dec:	6825      	ldr	r5, [r4, #0]
 8004dee:	1961      	adds	r1, r4, r5
 8004df0:	428b      	cmp	r3, r1
 8004df2:	bf01      	itttt	eq
 8004df4:	6819      	ldreq	r1, [r3, #0]
 8004df6:	685b      	ldreq	r3, [r3, #4]
 8004df8:	1949      	addeq	r1, r1, r5
 8004dfa:	6021      	streq	r1, [r4, #0]
 8004dfc:	e7ed      	b.n	8004dda <_free_r+0x22>
 8004dfe:	461a      	mov	r2, r3
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	b10b      	cbz	r3, 8004e08 <_free_r+0x50>
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	d9fa      	bls.n	8004dfe <_free_r+0x46>
 8004e08:	6811      	ldr	r1, [r2, #0]
 8004e0a:	1855      	adds	r5, r2, r1
 8004e0c:	42a5      	cmp	r5, r4
 8004e0e:	d10b      	bne.n	8004e28 <_free_r+0x70>
 8004e10:	6824      	ldr	r4, [r4, #0]
 8004e12:	4421      	add	r1, r4
 8004e14:	1854      	adds	r4, r2, r1
 8004e16:	42a3      	cmp	r3, r4
 8004e18:	6011      	str	r1, [r2, #0]
 8004e1a:	d1e0      	bne.n	8004dde <_free_r+0x26>
 8004e1c:	681c      	ldr	r4, [r3, #0]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	6053      	str	r3, [r2, #4]
 8004e22:	440c      	add	r4, r1
 8004e24:	6014      	str	r4, [r2, #0]
 8004e26:	e7da      	b.n	8004dde <_free_r+0x26>
 8004e28:	d902      	bls.n	8004e30 <_free_r+0x78>
 8004e2a:	230c      	movs	r3, #12
 8004e2c:	6003      	str	r3, [r0, #0]
 8004e2e:	e7d6      	b.n	8004dde <_free_r+0x26>
 8004e30:	6825      	ldr	r5, [r4, #0]
 8004e32:	1961      	adds	r1, r4, r5
 8004e34:	428b      	cmp	r3, r1
 8004e36:	bf04      	itt	eq
 8004e38:	6819      	ldreq	r1, [r3, #0]
 8004e3a:	685b      	ldreq	r3, [r3, #4]
 8004e3c:	6063      	str	r3, [r4, #4]
 8004e3e:	bf04      	itt	eq
 8004e40:	1949      	addeq	r1, r1, r5
 8004e42:	6021      	streq	r1, [r4, #0]
 8004e44:	6054      	str	r4, [r2, #4]
 8004e46:	e7ca      	b.n	8004dde <_free_r+0x26>
 8004e48:	b003      	add	sp, #12
 8004e4a:	bd30      	pop	{r4, r5, pc}
 8004e4c:	2000044c 	.word	0x2000044c

08004e50 <_init>:
 8004e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e52:	bf00      	nop
 8004e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e56:	bc08      	pop	{r3}
 8004e58:	469e      	mov	lr, r3
 8004e5a:	4770      	bx	lr

08004e5c <_fini>:
 8004e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e5e:	bf00      	nop
 8004e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e62:	bc08      	pop	{r3}
 8004e64:	469e      	mov	lr, r3
 8004e66:	4770      	bx	lr

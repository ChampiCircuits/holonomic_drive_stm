
holonomic_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095a4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000324  08009784  08009784  00019784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aa8  08009aa8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08009aa8  08009aa8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009aa8  08009aa8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009aa8  08009aa8  00019aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08009ab0  08009ab0  00019ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08009ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a0  20000068  08009b20  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000808  08009b20  00020808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ff22  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003faa  00000000  00000000  0003fffd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001360  00000000  00000000  00043fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eec  00000000  00000000  00045308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000245b3  00000000  00000000  000461f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000150d0  00000000  00000000  0006a7a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db2ae  00000000  00000000  0007f877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000070d0  00000000  00000000  0015ab28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00161bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800976c 	.word	0x0800976c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800976c 	.word	0x0800976c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>:

#include "stdio.h"

#include <string.h>

ChampiCan::ChampiCan(FDCAN_HandleTypeDef *handle_fdcan) {
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	4a11      	ldr	r2, [pc, #68]	; (8000cec <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef+0x50>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	601a      	str	r2, [r3, #0]

	handle_fdcan_ = handle_fdcan;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	683a      	ldr	r2, [r7, #0]
 8000cb0:	605a      	str	r2, [r3, #4]

	tx_header_.IdType = FDCAN_STANDARD_ID;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
	tx_header_.TxFrameType = FDCAN_DATA_FRAME;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
	tx_header_.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
	tx_header_.BitRateSwitch = FDCAN_BRS_OFF;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
	tx_header_.FDFormat = FDCAN_CLASSIC_CAN;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
	tx_header_.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	625a      	str	r2, [r3, #36]	; 0x24
	tx_header_.MessageMarker = 0;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	629a      	str	r2, [r3, #40]	; 0x28

}
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	080099ac 	.word	0x080099ac

08000cf0 <_ZN9ChampiCan5startEv>:

int ChampiCan::start() {
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(handle_fdcan_) != HAL_OK)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f004 fb23 	bl	8005348 <HAL_FDCAN_Start>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	bf14      	ite	ne
 8000d08:	2301      	movne	r3, #1
 8000d0a:	2300      	moveq	r3, #0
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <_ZN9ChampiCan5startEv+0x26>
	{
		return 1;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e011      	b.n	8000d3a <_ZN9ChampiCan5startEv+0x4a>
	}
	if (HAL_FDCAN_ActivateNotification(handle_fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f004 fc42 	bl	80055a8 <HAL_FDCAN_ActivateNotification>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	bf14      	ite	ne
 8000d2a:	2301      	movne	r3, #1
 8000d2c:	2300      	moveq	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <_ZN9ChampiCan5startEv+0x48>
	{
		return 1;
 8000d34:	2301      	movs	r3, #1
 8000d36:	e000      	b.n	8000d3a <_ZN9ChampiCan5startEv+0x4a>
	}
	return 0;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
	...

08000d44 <_ZN9ChampiCanD1Ev>:

    return 0;
}


ChampiCan::~ChampiCan() {
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <_ZN9ChampiCanD1Ev+0x1c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4618      	mov	r0, r3
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	080099ac 	.word	0x080099ac

08000d64 <_ZN9ChampiCanD0Ev>:
ChampiCan::~ChampiCan() {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
}
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ffe9 	bl	8000d44 <_ZN9ChampiCanD1Ev>
 8000d72:	212c      	movs	r1, #44	; 0x2c
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f007 fb5d 	bl	8008434 <_ZdlPvj>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <_Z3subPfS_S_>:

Vel sub(Vel vel1, Vel vel2) {
	return {vel1.x - vel2.x, vel1.y - vel2.y, vel1.theta - vel2.theta};
}

void sub(float* arr1, float* arr2, float* ret) {
 8000d84:	b480      	push	{r7}
 8000d86:	b087      	sub	sp, #28
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
	for(int i=0; i<3; i++) {
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e016      	b.n	8000dc4 <_Z3subPfS_S_+0x40>
		ret[i] = arr1[i] - arr2[i];
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	ed93 7a00 	vldr	s14, [r3]
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	68ba      	ldr	r2, [r7, #8]
 8000da8:	4413      	add	r3, r2
 8000daa:	edd3 7a00 	vldr	s15, [r3]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	687a      	ldr	r2, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dba:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	dde5      	ble.n	8000d96 <_Z3subPfS_S_+0x12>
	}
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	371c      	adds	r7, #28
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <_Z3absPfS_>:

void abs(float* arr, float* ret) {
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	e026      	b.n	8000e36 <_Z3absPfS_+0x5e>
		if(arr[i]>=0) {
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	009b      	lsls	r3, r3, #2
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	4413      	add	r3, r2
 8000df0:	edd3 7a00 	vldr	s15, [r3]
 8000df4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dfc:	db0a      	blt.n	8000e14 <_Z3absPfS_+0x3c>
			ret[i] = arr[i];
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	009b      	lsls	r3, r3, #2
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	441a      	add	r2, r3
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	6839      	ldr	r1, [r7, #0]
 8000e0c:	440b      	add	r3, r1
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	601a      	str	r2, [r3, #0]
 8000e12:	e00d      	b.n	8000e30 <_Z3absPfS_+0x58>
		}
		else {
			ret[i] = -arr[i];
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	009b      	lsls	r3, r3, #2
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	edd3 7a00 	vldr	s15, [r3]
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	eef1 7a67 	vneg.f32	s15, s15
 8000e2c:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	3301      	adds	r3, #1
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	2b02      	cmp	r3, #2
 8000e3a:	ddd5      	ble.n	8000de8 <_Z3absPfS_+0x10>
		}
	}
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3714      	adds	r7, #20
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr

08000e4a <_Z13get_index_maxPf>:

int get_index_max(float* arr) {
 8000e4a:	b480      	push	{r7}
 8000e4c:	b083      	sub	sp, #12
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
	if(arr[0] >= arr[1] && arr[0] >= arr[2]) {
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	ed93 7a00 	vldr	s14, [r3]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3304      	adds	r3, #4
 8000e5c:	edd3 7a00 	vldr	s15, [r3]
 8000e60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e68:	db0d      	blt.n	8000e86 <_Z13get_index_maxPf+0x3c>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	ed93 7a00 	vldr	s14, [r3]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3308      	adds	r3, #8
 8000e74:	edd3 7a00 	vldr	s15, [r3]
 8000e78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	db01      	blt.n	8000e86 <_Z13get_index_maxPf+0x3c>
		return 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	e01b      	b.n	8000ebe <_Z13get_index_maxPf+0x74>
	}
	else if(arr[1] >= arr[0] && arr[1] >= arr[2]) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3304      	adds	r3, #4
 8000e8a:	ed93 7a00 	vldr	s14, [r3]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e9c:	db0e      	blt.n	8000ebc <_Z13get_index_maxPf+0x72>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	ed93 7a00 	vldr	s14, [r3]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	3308      	adds	r3, #8
 8000eaa:	edd3 7a00 	vldr	s15, [r3]
 8000eae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eb6:	db01      	blt.n	8000ebc <_Z13get_index_maxPf+0x72>
		return 1;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	e000      	b.n	8000ebe <_Z13get_index_maxPf+0x74>
	}
	else {
		return 2;
 8000ebc:	2302      	movs	r3, #2
	}
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <_ZN3VelC1Ev>:
#define HOLONOMICDRIVE3_H_


#include "Stepper.h"

struct Vel {
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f04f 0200 	mov.w	r2, #0
 8000ed8:	601a      	str	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f04f 0200 	mov.w	r2, #0
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f04f 0200 	mov.w	r2, #0
 8000ee8:	609a      	str	r2, [r3, #8]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4618      	mov	r0, r3
 8000eee:	370c      	adds	r7, #12
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef6:	4770      	bx	lr

08000ef8 <_ZN7StepperaSERKS_>:
#ifndef SRC_STEPPER_H_
#define SRC_STEPPER_H_

#include "stm32g4xx_hal.h"

class Stepper {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	1d10      	adds	r0, r2, #4
 8000f08:	3304      	adds	r3, #4
 8000f0a:	224c      	movs	r2, #76	; 0x4c
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f007 ffcc 	bl	8008eaa <memcpy>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	651a      	str	r2, [r3, #80]	; 0x50
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	659a      	str	r2, [r3, #88]	; 0x58
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	661a      	str	r2, [r3, #96]	; 0x60
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>:

HolonomicDrive3::HolonomicDrive3(Stepper stepper0, Stepper stepper1, Stepper stepper2, float wheel_radius, float wheel_distance) {
 8000f50:	b5b0      	push	{r4, r5, r7, lr}
 8000f52:	b086      	sub	sp, #24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6178      	str	r0, [r7, #20]
 8000f58:	6139      	str	r1, [r7, #16]
 8000f5a:	60fa      	str	r2, [r7, #12]
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f62:	edc7 0a00 	vstr	s1, [r7]
 8000f66:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xd0>)
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	3304      	adds	r3, #4
 8000f70:	2402      	movs	r4, #2
 8000f72:	461d      	mov	r5, r3
 8000f74:	e004      	b.n	8000f80 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x30>
 8000f76:	4628      	mov	r0, r5
 8000f78:	f000 fc82 	bl	8001880 <_ZN7StepperC1Ev>
 8000f7c:	3564      	adds	r5, #100	; 0x64
 8000f7e:	3c01      	subs	r4, #1
 8000f80:	2c00      	cmp	r4, #0
 8000f82:	daf8      	bge.n	8000f76 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0x26>
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff9d 	bl	8000eca <_ZN3VelC1Ev>
	this->steppers[0] = stepper0;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	3304      	adds	r3, #4
 8000f94:	6939      	ldr	r1, [r7, #16]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ffae 	bl	8000ef8 <_ZN7StepperaSERKS_>
	this->steppers[1] = stepper1;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3368      	adds	r3, #104	; 0x68
 8000fa0:	68f9      	ldr	r1, [r7, #12]
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff ffa8 	bl	8000ef8 <_ZN7StepperaSERKS_>
	this->steppers[2] = stepper2;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	33cc      	adds	r3, #204	; 0xcc
 8000fac:	68b9      	ldr	r1, [r7, #8]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ffa2 	bl	8000ef8 <_ZN7StepperaSERKS_>
	this->wheel_circumference = wheel_radius * 2.0 * PI;
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fae7 	bl	8000588 <__aeabi_f2d>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	f7ff f985 	bl	80002cc <__adddf3>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	4610      	mov	r0, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	a313      	add	r3, pc, #76	; (adr r3, 8001018 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff+0xc8>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	f7ff fb32 	bl	8000638 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fe0e 	bl	8000bfc <__aeabi_d2f>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	this->wheel_distance = wheel_distance;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	this->current_wheels_speeds_rps[0] = 0;
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	this->current_wheels_speeds_rps[1] = 0;
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	f04f 0200 	mov.w	r2, #0
 8001000:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	this->current_wheels_speeds_rps[2] = 0;
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f04f 0200 	mov.w	r2, #0
 800100a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

}
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	4618      	mov	r0, r3
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bdb0      	pop	{r4, r5, r7, pc}
 8001018:	54442eea 	.word	0x54442eea
 800101c:	400921fb 	.word	0x400921fb
 8001020:	080099bc 	.word	0x080099bc

08001024 <_ZN15HolonomicDrive311set_cmd_velE3Vel>:

void HolonomicDrive3::set_cmd_vel(Vel cmd) {
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	eef0 6a40 	vmov.f32	s13, s0
 8001030:	eeb0 7a60 	vmov.f32	s14, s1
 8001034:	eef0 7a41 	vmov.f32	s15, s2
 8001038:	edc7 6a00 	vstr	s13, [r7]
 800103c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001040:	edc7 7a02 	vstr	s15, [r7, #8]
	this->cmd_vel = cmd;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800104a:	463a      	mov	r2, r7
 800104c:	ca07      	ldmia	r2, {r0, r1, r2}
 800104e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
	...

08001060 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>:

void HolonomicDrive3::compute_wheels_speeds(Vel cmd, float *ret_speeds_rps) {
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b08a      	sub	sp, #40	; 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6178      	str	r0, [r7, #20]
 8001068:	eef0 6a40 	vmov.f32	s13, s0
 800106c:	eeb0 7a60 	vmov.f32	s14, s1
 8001070:	eef0 7a41 	vmov.f32	s15, s2
 8001074:	6079      	str	r1, [r7, #4]
 8001076:	edc7 6a02 	vstr	s13, [r7, #8]
 800107a:	ed87 7a03 	vstr	s14, [r7, #12]
 800107e:	edc7 7a04 	vstr	s15, [r7, #16]
    float wheel0_mps = 0.5 * this->cmd_vel.y - SQRT_3_OVER_2 * this->cmd_vel.x - this->wheel_distance * this->cmd_vel.theta;
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa7d 	bl	8000588 <__aeabi_f2d>
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	4b63      	ldr	r3, [pc, #396]	; (8001220 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x1c0>)
 8001094:	f7ff fad0 	bl	8000638 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4614      	mov	r4, r2
 800109e:	461d      	mov	r5, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff fa6e 	bl	8000588 <__aeabi_f2d>
 80010ac:	a35a      	add	r3, pc, #360	; (adr r3, 8001218 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x1b8>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	f7ff fac1 	bl	8000638 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4620      	mov	r0, r4
 80010bc:	4629      	mov	r1, r5
 80010be:	f7ff f903 	bl	80002c8 <__aeabi_dsub>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	4614      	mov	r4, r2
 80010c8:	461d      	mov	r5, r3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	ed93 7a4d 	vldr	s14, [r3, #308]	; 0x134
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80010d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010da:	ee17 0a90 	vmov	r0, s15
 80010de:	f7ff fa53 	bl	8000588 <__aeabi_f2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4620      	mov	r0, r4
 80010e8:	4629      	mov	r1, r5
 80010ea:	f7ff f8ed 	bl	80002c8 <__aeabi_dsub>
 80010ee:	4602      	mov	r2, r0
 80010f0:	460b      	mov	r3, r1
 80010f2:	4610      	mov	r0, r2
 80010f4:	4619      	mov	r1, r3
 80010f6:	f7ff fd81 	bl	8000bfc <__aeabi_d2f>
 80010fa:	4603      	mov	r3, r0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    float wheel1_mps = 0.5 * this->cmd_vel.y + SQRT_3_OVER_2 * this->cmd_vel.x - this->wheel_distance * this->cmd_vel.theta;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa3f 	bl	8000588 <__aeabi_f2d>
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	4b44      	ldr	r3, [pc, #272]	; (8001220 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x1c0>)
 8001110:	f7ff fa92 	bl	8000638 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4614      	mov	r4, r2
 800111a:	461d      	mov	r5, r3
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fa30 	bl	8000588 <__aeabi_f2d>
 8001128:	a33b      	add	r3, pc, #236	; (adr r3, 8001218 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x1b8>)
 800112a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112e:	f7ff fa83 	bl	8000638 <__aeabi_dmul>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	4620      	mov	r0, r4
 8001138:	4629      	mov	r1, r5
 800113a:	f7ff f8c7 	bl	80002cc <__adddf3>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4614      	mov	r4, r2
 8001144:	461d      	mov	r5, r3
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	ed93 7a4d 	vldr	s14, [r3, #308]	; 0x134
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8001152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001156:	ee17 0a90 	vmov	r0, s15
 800115a:	f7ff fa15 	bl	8000588 <__aeabi_f2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4620      	mov	r0, r4
 8001164:	4629      	mov	r1, r5
 8001166:	f7ff f8af 	bl	80002c8 <__aeabi_dsub>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4610      	mov	r0, r2
 8001170:	4619      	mov	r1, r3
 8001172:	f7ff fd43 	bl	8000bfc <__aeabi_d2f>
 8001176:	4603      	mov	r3, r0
 8001178:	623b      	str	r3, [r7, #32]
    float wheel2_mps = - this->cmd_vel.y - this->wheel_distance * this->cmd_vel.theta;
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 8001180:	eeb1 7a67 	vneg.f32	s14, s15
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	edd3 6a4d 	vldr	s13, [r3, #308]	; 0x134
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8001190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001194:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001198:	edc7 7a07 	vstr	s15, [r7, #28]
    // wheel mps -> wheel rps
    ret_speeds_rps[0] = wheel0_mps / this->wheel_circumference;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 80011a2:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80011a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[1] = wheel1_mps / this->wheel_circumference;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3304      	adds	r3, #4
 80011ba:	edd7 6a08 	vldr	s13, [r7, #32]
 80011be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011c2:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[2] = wheel2_mps / this->wheel_circumference;
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3308      	adds	r3, #8
 80011d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80011d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011d8:	edc3 7a00 	vstr	s15, [r3]

    if(ret_speeds_rps[2]!=ret_speeds_rps[2]) {
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	3308      	adds	r3, #8
 80011e0:	ed93 7a00 	vldr	s14, [r3]
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3308      	adds	r3, #8
 80011e8:	edd3 7a00 	vldr	s15, [r3]
 80011ec:	eeb4 7a67 	vcmp.f32	s14, s15
 80011f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f4:	d009      	beq.n	800120a <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x1aa>
    	ret_speeds_rps[2]--;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3308      	adds	r3, #8
 80011fa:	edd3 7a00 	vldr	s15, [r3]
 80011fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001202:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001206:	edc3 7a00 	vstr	s15, [r3]
    }

}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bdb0      	pop	{r4, r5, r7, pc}
 8001212:	bf00      	nop
 8001214:	f3af 8000 	nop.w
 8001218:	e857b07f 	.word	0xe857b07f
 800121c:	3febb67a 	.word	0x3febb67a
 8001220:	3fe00000 	.word	0x3fe00000

08001224 <_ZN15HolonomicDrive319write_wheels_speedsEPf>:

void HolonomicDrive3::write_wheels_speeds(float *speeds_rps) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	e020      	b.n	8001276 <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x52>
		this->steppers[i].set_speed_rps(speeds_rps[i]);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2264      	movs	r2, #100	; 0x64
 8001238:	fb02 f303 	mul.w	r3, r2, r3
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	4413      	add	r3, r2
 8001240:	1d19      	adds	r1, r3, #4
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	4413      	add	r3, r2
 800124a:	edd3 7a00 	vldr	s15, [r3]
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	4608      	mov	r0, r1
 8001254:	f000 fbb2 	bl	80019bc <_ZN7Stepper13set_speed_rpsEf>
		this->current_wheels_speeds_rps[i] = speeds_rps[i];
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	4413      	add	r3, r2
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3350      	adds	r3, #80	; 0x50
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	440b      	add	r3, r1
 800126c:	3304      	adds	r3, #4
 800126e:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3301      	adds	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2b02      	cmp	r3, #2
 800127a:	dddb      	ble.n	8001234 <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x10>
	}
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <_ZN15HolonomicDrive324spin_once_motors_controlEv>:

void HolonomicDrive3::spin_once_motors_control() {
 8001288:	b580      	push	{r7, lr}
 800128a:	b092      	sub	sp, #72	; 0x48
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]

	// compare current_vel and cmd_vel wheels speeds to check the required acceleration to transition directly from current to command
	float cmd_wheels_speeds[3]; // rotations per second
	this->compute_wheels_speeds(cmd_vel, cmd_wheels_speeds);
 8001290:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	edd3 6a4e 	vldr	s13, [r3, #312]	; 0x138
 800129a:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 800129e:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80012a2:	4611      	mov	r1, r2
 80012a4:	eeb0 0a66 	vmov.f32	s0, s13
 80012a8:	eef0 0a47 	vmov.f32	s1, s14
 80012ac:	eeb0 1a67 	vmov.f32	s2, s15
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fed5 	bl	8001060 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>

	if(this->current_wheels_speeds_rps[2] != this->current_wheels_speeds_rps[2]) {
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 80012c2:	eeb4 7a67 	vcmp.f32	s14, s15
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	d009      	beq.n	80012e0 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x58>
		this->current_wheels_speeds_rps[2]--;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 80012d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
	}

	float desired_accels_wheels[3];
	sub(cmd_wheels_speeds, this->current_wheels_speeds_rps, desired_accels_wheels);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f503 71a2 	add.w	r1, r3, #324	; 0x144
 80012e6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fd48 	bl	8000d84 <_Z3subPfS_S_>

	float abs_desired_accels_wheels[3];
	abs(desired_accels_wheels, abs_desired_accels_wheels);
 80012f4:	f107 0218 	add.w	r2, r7, #24
 80012f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff fd6a 	bl	8000dd8 <_Z3absPfS_>
	if(abs_desired_accels_wheels[0] < MAX_ACCEL_PER_CYCLE && abs_desired_accels_wheels[1] < MAX_ACCEL_PER_CYCLE && abs_desired_accels_wheels[2] < MAX_ACCEL_PER_CYCLE) {
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f93e 	bl	8000588 <__aeabi_f2d>
 800130c:	a33a      	add	r3, pc, #232	; (adr r3, 80013f8 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x170>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fc03 	bl	8000b1c <__aeabi_dcmplt>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d01e      	beq.n	800135a <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xd2>
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f932 	bl	8000588 <__aeabi_f2d>
 8001324:	a334      	add	r3, pc, #208	; (adr r3, 80013f8 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x170>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7ff fbf7 	bl	8000b1c <__aeabi_dcmplt>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d012      	beq.n	800135a <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xd2>
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	4618      	mov	r0, r3
 8001338:	f7ff f926 	bl	8000588 <__aeabi_f2d>
 800133c:	a32e      	add	r3, pc, #184	; (adr r3, 80013f8 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x170>)
 800133e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001342:	f7ff fbeb 	bl	8000b1c <__aeabi_dcmplt>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d006      	beq.n	800135a <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xd2>
		// acceleration requested is ok, no need to accelerate gradually.

		this->write_wheels_speeds(cmd_wheels_speeds);
 800134c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001350:	4619      	mov	r1, r3
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff ff66 	bl	8001224 <_ZN15HolonomicDrive319write_wheels_speedsEPf>
 8001358:	e049      	b.n	80013ee <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x166>
	}
	else {
		// Trouver la roue qui pose le + problème. On va alors pouvoir réduire les accélérations des 3 roues de façon
		// de façon proportionelle, de façon que la roue qui pose le + problème ait une accélération égale à MAX_ACCEL_PER_CYCLE
		int i_max = get_index_max(abs_desired_accels_wheels);
 800135a:	f107 0318 	add.w	r3, r7, #24
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fd73 	bl	8000e4a <_Z13get_index_maxPf>
 8001364:	6438      	str	r0, [r7, #64]	; 0x40

		float speed_ratio = MAX_ACCEL_PER_CYCLE / abs_desired_accels_wheels[i_max]; // speed ratio of each original speed to add
 8001366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	3348      	adds	r3, #72	; 0x48
 800136c:	443b      	add	r3, r7
 800136e:	3b30      	subs	r3, #48	; 0x30
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	f7ff f908 	bl	8000588 <__aeabi_f2d>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	a11e      	add	r1, pc, #120	; (adr r1, 80013f8 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x170>)
 800137e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001382:	f7ff fa83 	bl	800088c <__aeabi_ddiv>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fc35 	bl	8000bfc <__aeabi_d2f>
 8001392:	4603      	mov	r3, r0
 8001394:	63fb      	str	r3, [r7, #60]	; 0x3c

		float new_speeds_cmds[3];
		for(int i=0; i<3; i++) {
 8001396:	2300      	movs	r3, #0
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
 800139a:	e01e      	b.n	80013da <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x152>
			new_speeds_cmds[i] = current_wheels_speeds_rps[i] + speed_ratio * desired_accels_wheels[i];;
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013a0:	3350      	adds	r3, #80	; 0x50
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	4413      	add	r3, r2
 80013a6:	3304      	adds	r3, #4
 80013a8:	ed93 7a00 	vldr	s14, [r3]
 80013ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	3348      	adds	r3, #72	; 0x48
 80013b2:	443b      	add	r3, r7
 80013b4:	3b24      	subs	r3, #36	; 0x24
 80013b6:	edd3 6a00 	vldr	s13, [r3]
 80013ba:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80013be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	3348      	adds	r3, #72	; 0x48
 80013cc:	443b      	add	r3, r7
 80013ce:	3b3c      	subs	r3, #60	; 0x3c
 80013d0:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i<3; i++) {
 80013d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013d6:	3301      	adds	r3, #1
 80013d8:	647b      	str	r3, [r7, #68]	; 0x44
 80013da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013dc:	2b02      	cmp	r3, #2
 80013de:	dddd      	ble.n	800139c <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x114>
		}

		// set speed
		this->write_wheels_speeds(new_speeds_cmds);
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	4619      	mov	r1, r3
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ff1c 	bl	8001224 <_ZN15HolonomicDrive319write_wheels_speedsEPf>


	}

}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	3748      	adds	r7, #72	; 0x48
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	9999999a 	.word	0x9999999a
 80013fc:	3fb99999 	.word	0x3fb99999

08001400 <_ZN15HolonomicDrive3C1Ev>:

HolonomicDrive3::HolonomicDrive3() {
 8001400:	b5b0      	push	{r4, r5, r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	4a0c      	ldr	r2, [pc, #48]	; (800143c <_ZN15HolonomicDrive3C1Ev+0x3c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	601a      	str	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3304      	adds	r3, #4
 8001412:	2402      	movs	r4, #2
 8001414:	461d      	mov	r5, r3
 8001416:	e004      	b.n	8001422 <_ZN15HolonomicDrive3C1Ev+0x22>
 8001418:	4628      	mov	r0, r5
 800141a:	f000 fa31 	bl	8001880 <_ZN7StepperC1Ev>
 800141e:	3564      	adds	r5, #100	; 0x64
 8001420:	3c01      	subs	r4, #1
 8001422:	2c00      	cmp	r4, #0
 8001424:	daf8      	bge.n	8001418 <_ZN15HolonomicDrive3C1Ev+0x18>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fd4c 	bl	8000eca <_ZN3VelC1Ev>
}
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bdb0      	pop	{r4, r5, r7, pc}
 800143c:	080099bc 	.word	0x080099bc

08001440 <_ZN15HolonomicDrive3D1Ev>:

HolonomicDrive3::~HolonomicDrive3() {
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <_ZN15HolonomicDrive3D1Ev+0x40>)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	3304      	adds	r3, #4
	// TODO Auto-generated destructor stub
}
 8001452:	2b00      	cmp	r3, #0
 8001454:	d00d      	beq.n	8001472 <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3304      	adds	r3, #4
 800145a:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	3304      	adds	r3, #4
}
 8001462:	429c      	cmp	r4, r3
 8001464:	d005      	beq.n	8001472 <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 8001466:	3c64      	subs	r4, #100	; 0x64
 8001468:	6823      	ldr	r3, [r4, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4620      	mov	r0, r4
 800146e:	4798      	blx	r3
}
 8001470:	e7f5      	b.n	800145e <_ZN15HolonomicDrive3D1Ev+0x1e>
HolonomicDrive3::~HolonomicDrive3() {
 8001472:	bf00      	nop
}
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4618      	mov	r0, r3
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bd90      	pop	{r4, r7, pc}
 800147e:	bf00      	nop
 8001480:	080099bc 	.word	0x080099bc

08001484 <_ZN15HolonomicDrive3D0Ev>:
HolonomicDrive3::~HolonomicDrive3() {
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
}
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ffd7 	bl	8001440 <_ZN15HolonomicDrive3D1Ev>
 8001492:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f006 ffcc 	bl	8008434 <_ZdlPvj>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
	...

080014a8 <_ZN17MessageRecomposerC1Ev>:
#include "MessageRecomposer.h"

#include "stdio.h"


MessageRecomposer::MessageRecomposer() {
 80014a8:	b5b0      	push	{r4, r5, r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <_ZN17MessageRecomposerC1Ev+0x3c>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3324      	adds	r3, #36	; 0x24
 80014ba:	2413      	movs	r4, #19
 80014bc:	461d      	mov	r5, r3
 80014be:	e004      	b.n	80014ca <_ZN17MessageRecomposerC1Ev+0x22>
 80014c0:	4628      	mov	r0, r5
 80014c2:	f007 f861 	bl	8008588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80014c6:	3518      	adds	r5, #24
 80014c8:	3c01      	subs	r4, #1
 80014ca:	2c00      	cmp	r4, #0
 80014cc:	daf8      	bge.n	80014c0 <_ZN17MessageRecomposerC1Ev+0x18>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014d4:	4618      	mov	r0, r3
 80014d6:	f007 f857 	bl	8008588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

}
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bdb0      	pop	{r4, r5, r7, pc}
 80014e4:	080099cc 	.word	0x080099cc

080014e8 <_ZN17MessageRecomposer9add_frameEPhh>:

void MessageRecomposer::add_frame(uint8_t *frame_data, uint8_t length) {
 80014e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ea:	b09b      	sub	sp, #108	; 0x6c
 80014ec:	af02      	add	r7, sp, #8
 80014ee:	60f8      	str	r0, [r7, #12]
 80014f0:	60b9      	str	r1, [r7, #8]
 80014f2:	4613      	mov	r3, r2
 80014f4:	71fb      	strb	r3, [r7, #7]

	int msg_number;
    int msg_size;
    int frame_index;

    decode_descriptor(frame_data, msg_number, msg_size, frame_index);
 80014f6:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80014fa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80014fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	460b      	mov	r3, r1
 8001506:	68b9      	ldr	r1, [r7, #8]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f000 f910 	bl	800172e <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>

    // TODO check if the number follows the expected order (0 -> 1 -> 2 -> 3 -> 0 -> ...)
    // But it's not that easy bc what if we miss an entire message ? we would loose the 3 messages that follow it
    if(msg_number_ != msg_number) {
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001514:	429a      	cmp	r2, r3
 8001516:	d019      	beq.n	800154c <_ZN17MessageRecomposer9add_frameEPhh+0x64>
        // new message
        printf("New message\n");
 8001518:	4856      	ldr	r0, [pc, #344]	; (8001674 <_ZN17MessageRecomposer9add_frameEPhh+0x18c>)
 800151a:	f007 fb17 	bl	8008b4c <puts>
        msg_number_ = msg_number;
 800151e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	605a      	str	r2, [r3, #4]
        n_frames_ = msg_size;
 8001524:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	609a      	str	r2, [r3, #8]
        for(int i=0; i<n_frames_; i++) {
 800152a:	2300      	movs	r3, #0
 800152c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800152e:	e008      	b.n	8001542 <_ZN17MessageRecomposer9add_frameEPhh+0x5a>
            frames_received_[i] = false;
 8001530:	68fa      	ldr	r2, [r7, #12]
 8001532:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001534:	4413      	add	r3, r2
 8001536:	330d      	adds	r3, #13
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 800153c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800153e:	3301      	adds	r3, #1
 8001540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001548:	429a      	cmp	r2, r3
 800154a:	dbf1      	blt.n	8001530 <_ZN17MessageRecomposer9add_frameEPhh+0x48>
        }
    }

    frames_received_[frame_index] = true;
 800154c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4413      	add	r3, r2
 8001552:	2201      	movs	r2, #1
 8001554:	735a      	strb	r2, [r3, #13]
    msg_parts[frame_index] = std::string((char*)frame_data+2, length-2);
 8001556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	3320      	adds	r3, #32
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4413      	add	r3, r2
 8001566:	1d1c      	adds	r4, r3, #4
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	1c9d      	adds	r5, r3, #2
 800156c:	79fb      	ldrb	r3, [r7, #7]
 800156e:	3b02      	subs	r3, #2
 8001570:	461e      	mov	r6, r3
 8001572:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001576:	4618      	mov	r0, r3
 8001578:	f006 ff5e 	bl	8008438 <_ZNSaIcEC1Ev>
 800157c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001580:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001584:	4632      	mov	r2, r6
 8001586:	4629      	mov	r1, r5
 8001588:	f007 f8c4 	bl	8008714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 800158c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001590:	4619      	mov	r1, r3
 8001592:	4620      	mov	r0, r4
 8001594:	f007 f80b 	bl	80085ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001598:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800159c:	4618      	mov	r0, r3
 800159e:	f006 fffa 	bl	8008596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80015a2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015a6:	4618      	mov	r0, r3
 80015a8:	f006 ff47 	bl	800843a <_ZNSaIcED1Ev>

    for(int i=0; i<n_frames_; i++) {
 80015ac:	2300      	movs	r3, #0
 80015ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80015b0:	e00c      	b.n	80015cc <_ZN17MessageRecomposer9add_frameEPhh+0xe4>
    	printf("Frame %d received : %d\n", i, frames_received_[i]);
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015b6:	4413      	add	r3, r2
 80015b8:	330d      	adds	r3, #13
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80015c0:	482d      	ldr	r0, [pc, #180]	; (8001678 <_ZN17MessageRecomposer9add_frameEPhh+0x190>)
 80015c2:	f007 fa5d 	bl	8008a80 <iprintf>
    for(int i=0; i<n_frames_; i++) {
 80015c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015c8:	3301      	adds	r3, #1
 80015ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015d2:	429a      	cmp	r2, r3
 80015d4:	dbed      	blt.n	80015b2 <_ZN17MessageRecomposer9add_frameEPhh+0xca>
    }

    if(all_frames_received()) {
 80015d6:	68f8      	ldr	r0, [r7, #12]
 80015d8:	f000 f8d3 	bl	8001782 <_ZN17MessageRecomposer19all_frames_receivedEv>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d043      	beq.n	800166a <_ZN17MessageRecomposer9add_frameEPhh+0x182>
        printf("All frames received\n");
 80015e2:	4826      	ldr	r0, [pc, #152]	; (800167c <_ZN17MessageRecomposer9add_frameEPhh+0x194>)
 80015e4:	f007 fab2 	bl	8008b4c <puts>
        std::string full_msg;
 80015e8:	f107 0310 	add.w	r3, r7, #16
 80015ec:	4618      	mov	r0, r3
 80015ee:	f006 ffcb 	bl	8008588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
        for(int i=0; i<n_frames_; i++) {
 80015f2:	2300      	movs	r3, #0
 80015f4:	657b      	str	r3, [r7, #84]	; 0x54
 80015f6:	e011      	b.n	800161c <_ZN17MessageRecomposer9add_frameEPhh+0x134>
            full_msg += msg_parts[i];
 80015f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80015fa:	4613      	mov	r3, r2
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	4413      	add	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	3320      	adds	r3, #32
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	4413      	add	r3, r2
 8001608:	1d1a      	adds	r2, r3, #4
 800160a:	f107 0310 	add.w	r3, r7, #16
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f007 f821 	bl	8008658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
        for(int i=0; i<n_frames_; i++) {
 8001616:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001618:	3301      	adds	r3, #1
 800161a:	657b      	str	r3, [r7, #84]	; 0x54
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001622:	429a      	cmp	r2, r3
 8001624:	dbe8      	blt.n	80015f8 <_ZN17MessageRecomposer9add_frameEPhh+0x110>
        }
        full_msg_ = full_msg;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800162c:	f107 0210 	add.w	r2, r7, #16
 8001630:	4611      	mov	r1, r2
 8001632:	4618      	mov	r0, r3
 8001634:	f006 ffb5 	bl	80085a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
        full_msg_received_ = true;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	2201      	movs	r2, #1
 800163c:	731a      	strb	r2, [r3, #12]
        for(int i=0; i<n_frames_; i++) {
 800163e:	2300      	movs	r3, #0
 8001640:	653b      	str	r3, [r7, #80]	; 0x50
 8001642:	e008      	b.n	8001656 <_ZN17MessageRecomposer9add_frameEPhh+0x16e>
            frames_received_[i] = false;
 8001644:	68fa      	ldr	r2, [r7, #12]
 8001646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001648:	4413      	add	r3, r2
 800164a:	330d      	adds	r3, #13
 800164c:	2200      	movs	r2, #0
 800164e:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 8001650:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001652:	3301      	adds	r3, #1
 8001654:	653b      	str	r3, [r7, #80]	; 0x50
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800165c:	429a      	cmp	r2, r3
 800165e:	dbf1      	blt.n	8001644 <_ZN17MessageRecomposer9add_frameEPhh+0x15c>
        }
    }
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	4618      	mov	r0, r3
 8001666:	f006 ff96 	bl	8008596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 800166a:	bf00      	nop
 800166c:	3764      	adds	r7, #100	; 0x64
 800166e:	46bd      	mov	sp, r7
 8001670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001672:	bf00      	nop
 8001674:	08009784 	.word	0x08009784
 8001678:	08009790 	.word	0x08009790
 800167c:	080097a8 	.word	0x080097a8

08001680 <_ZN17MessageRecomposer21check_if_new_full_msgEv>:

bool MessageRecomposer::check_if_new_full_msg() {
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
    return full_msg_received_;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	7b1b      	ldrb	r3, [r3, #12]
}
 800168c:	4618      	mov	r0, r3
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr

08001698 <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>:

std::string MessageRecomposer::get_full_msg() {
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
    full_msg_received_ = false;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	2200      	movs	r2, #0
 80016a6:	731a      	strb	r2, [r3, #12]
    return full_msg_;
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016ae:	4619      	mov	r1, r3
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f006 fffb 	bl	80086ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <_ZN17MessageRecomposerD1Ev>:

MessageRecomposer::~MessageRecomposer() {
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	4a0f      	ldr	r2, [pc, #60]	; (8001708 <_ZN17MessageRecomposerD1Ev+0x48>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016d4:	4618      	mov	r0, r3
 80016d6:	f006 ff5e 	bl	8008596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3324      	adds	r3, #36	; 0x24
	// TODO Auto-generated destructor stub
}
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d00c      	beq.n	80016fc <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3324      	adds	r3, #36	; 0x24
 80016e6:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	3324      	adds	r3, #36	; 0x24
}
 80016ee:	429c      	cmp	r4, r3
 80016f0:	d004      	beq.n	80016fc <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 80016f2:	3c18      	subs	r4, #24
 80016f4:	4620      	mov	r0, r4
 80016f6:	f006 ff4e 	bl	8008596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80016fa:	e7f6      	b.n	80016ea <_ZN17MessageRecomposerD1Ev+0x2a>
MessageRecomposer::~MessageRecomposer() {
 80016fc:	bf00      	nop
}
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4618      	mov	r0, r3
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bd90      	pop	{r4, r7, pc}
 8001708:	080099cc 	.word	0x080099cc

0800170c <_ZN17MessageRecomposerD0Ev>:
MessageRecomposer::~MessageRecomposer() {
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
}
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f7ff ffd3 	bl	80016c0 <_ZN17MessageRecomposerD1Ev>
 800171a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f006 fe88 	bl	8008434 <_ZdlPvj>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>:

void MessageRecomposer::decode_descriptor(uint8_t *frame_data, int &msg_number,
		int &msg_size, int &frame_index) {
 800172e:	b480      	push	{r7}
 8001730:	b087      	sub	sp, #28
 8001732:	af00      	add	r7, sp, #0
 8001734:	60f8      	str	r0, [r7, #12]
 8001736:	60b9      	str	r1, [r7, #8]
 8001738:	607a      	str	r2, [r7, #4]
 800173a:	603b      	str	r3, [r7, #0]

    uint16_t msg_descriptor = frame_data[1] << 8 | frame_data[0];
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	3301      	adds	r3, #1
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	b21a      	sxth	r2, r3
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b21b      	sxth	r3, r3
 800174c:	4313      	orrs	r3, r2
 800174e:	b21b      	sxth	r3, r3
 8001750:	82fb      	strh	r3, [r7, #22]

    // todo mask the unused bits for safety (eg if error of transmission)

    msg_number = (msg_descriptor >> 12);
 8001752:	8afb      	ldrh	r3, [r7, #22]
 8001754:	0b1b      	lsrs	r3, r3, #12
 8001756:	b29b      	uxth	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	601a      	str	r2, [r3, #0]
    msg_size = (msg_descriptor >> 6) & 0x3F;
 800175e:	8afb      	ldrh	r3, [r7, #22]
 8001760:	099b      	lsrs	r3, r3, #6
 8001762:	b29b      	uxth	r3, r3
 8001764:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	601a      	str	r2, [r3, #0]
    frame_index = msg_descriptor & 0x3F;
 800176c:	8afb      	ldrh	r3, [r7, #22]
 800176e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	601a      	str	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	371c      	adds	r7, #28
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <_ZN17MessageRecomposer19all_frames_receivedEv>:

bool MessageRecomposer::all_frames_received() {
 8001782:	b480      	push	{r7}
 8001784:	b085      	sub	sp, #20
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
    for(int i=0; i<n_frames_; i++) {
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
 800178e:	e00e      	b.n	80017ae <_ZN17MessageRecomposer19all_frames_receivedEv+0x2c>
        if(!frames_received_[i]) {
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	4413      	add	r3, r2
 8001796:	330d      	adds	r3, #13
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	f083 0301 	eor.w	r3, r3, #1
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <_ZN17MessageRecomposer19all_frames_receivedEv+0x26>
            return false;
 80017a4:	2300      	movs	r3, #0
 80017a6:	e008      	b.n	80017ba <_ZN17MessageRecomposer19all_frames_receivedEv+0x38>
    for(int i=0; i<n_frames_; i++) {
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	3301      	adds	r3, #1
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	dbeb      	blt.n	8001790 <_ZN17MessageRecomposer19all_frames_receivedEv+0xe>
        }
    }
    return true;
 80017b8:	2301      	movs	r3, #1
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3714      	adds	r7, #20
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
	...

080017c8 <_Z21PWM_set_high_durationP11TIM_TypeDefi>:

#define SYS_CORE_CLOCK_HZ 170000000.
#define SYS_CORE_CLOCK_MHZ 170.


void PWM_set_high_duration(TIM_TypeDef *timx, int us) {
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
	timx->CCR1 = SYS_CORE_CLOCK_MHZ/(timx->PSC+1) * us;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d6:	3301      	adds	r3, #1
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe feb3 	bl	8000544 <__aeabi_ui2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	f04f 0000 	mov.w	r0, #0
 80017e6:	490e      	ldr	r1, [pc, #56]	; (8001820 <_Z21PWM_set_high_durationP11TIM_TypeDefi+0x58>)
 80017e8:	f7ff f850 	bl	800088c <__aeabi_ddiv>
 80017ec:	4602      	mov	r2, r0
 80017ee:	460b      	mov	r3, r1
 80017f0:	4614      	mov	r4, r2
 80017f2:	461d      	mov	r5, r3
 80017f4:	6838      	ldr	r0, [r7, #0]
 80017f6:	f7fe feb5 	bl	8000564 <__aeabi_i2d>
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	4620      	mov	r0, r4
 8001800:	4629      	mov	r1, r5
 8001802:	f7fe ff19 	bl	8000638 <__aeabi_dmul>
 8001806:	4602      	mov	r2, r0
 8001808:	460b      	mov	r3, r1
 800180a:	4610      	mov	r0, r2
 800180c:	4619      	mov	r1, r3
 800180e:	f7ff f9d5 	bl	8000bbc <__aeabi_d2uiz>
 8001812:	4602      	mov	r2, r0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bdb0      	pop	{r4, r5, r7, pc}
 8001820:	40654000 	.word	0x40654000
 8001824:	00000000 	.word	0x00000000

08001828 <_Z12PWM_set_freqP11TIM_TypeDefi>:

void PWM_set_freq(TIM_TypeDef *timx, int hz) {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
	int arr = SYS_CORE_CLOCK_HZ/((timx->PSC+1)*hz);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001836:	3301      	adds	r3, #1
 8001838:	683a      	ldr	r2, [r7, #0]
 800183a:	fb02 f303 	mul.w	r3, r2, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f7fe fe80 	bl	8000544 <__aeabi_ui2d>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	a10b      	add	r1, pc, #44	; (adr r1, 8001878 <_Z12PWM_set_freqP11TIM_TypeDefi+0x50>)
 800184a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800184e:	f7ff f81d 	bl	800088c <__aeabi_ddiv>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff f987 	bl	8000b6c <__aeabi_d2iz>
 800185e:	4603      	mov	r3, r0
 8001860:	60fb      	str	r3, [r7, #12]
	timx->CNT = 0;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2200      	movs	r2, #0
 8001866:	625a      	str	r2, [r3, #36]	; 0x24
	timx->ARR = arr;
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	00000000 	.word	0x00000000
 800187c:	41a443fd 	.word	0x41a443fd

08001880 <_ZN7StepperC1Ev>:

Stepper::Stepper() {}
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	4a04      	ldr	r2, [pc, #16]	; (800189c <_ZN7StepperC1Ev+0x1c>)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	080099dc 	.word	0x080099dc

080018a0 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>:

Stepper::Stepper(TIM_HandleTypeDef tim_handle_step, uint32_t tim_channel_step, GPIO_TypeDef *GPIOx_dir, uint16_t GPIO_Pin_dir) {
 80018a0:	b084      	sub	sp, #16
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	f107 0014 	add.w	r0, r7, #20
 80018ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80018b2:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft+0x80>)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->tim_handle = tim_handle_step;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3304      	adds	r3, #4
 80018bc:	f107 0114 	add.w	r1, r7, #20
 80018c0:	224c      	movs	r2, #76	; 0x4c
 80018c2:	4618      	mov	r0, r3
 80018c4:	f007 faf1 	bl	8008eaa <memcpy>
	this->GPIOx_dir = GPIOx_dir;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018cc:	651a      	str	r2, [r3, #80]	; 0x50
	this->GPIO_Pin_dir = GPIO_Pin_dir;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80018d4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	this->tim_channel = tim_channel_step;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80018dc:	659a      	str	r2, [r3, #88]	; 0x58
	HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80018e8:	2201      	movs	r2, #1
 80018ea:	4619      	mov	r1, r3
 80018ec:	f004 faa8 	bl	8005e40 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&this->tim_handle, this->tim_channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	1d1a      	adds	r2, r3, #4
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018f8:	4619      	mov	r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f005 fb6c 	bl	8006fd8 <HAL_TIM_PWM_Start>

	this->current_dir = 0;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	661a      	str	r2, [r3, #96]	; 0x60
	this->stopped = true;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800191a:	b004      	add	sp, #16
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	080099dc 	.word	0x080099dc

08001924 <_ZN7Stepper19set_speed_step_freqEii>:

void Stepper::set_speed_step_freq(int hz, int dir) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
	if(hz < 15){// todo calculer freq min automatiquement
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	2b0e      	cmp	r3, #14
 8001934:	dc12      	bgt.n	800195c <_ZN7Stepper19set_speed_step_freqEii+0x38>
		if(!stopped) {
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800193c:	f083 0301 	eor.w	r3, r3, #1
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d036      	beq.n	80019b4 <_ZN7Stepper19set_speed_step_freqEii+0x90>
			PWM_set_high_duration(this->tim_handle.Instance, 0);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2100      	movs	r1, #0
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff3b 	bl	80017c8 <_Z21PWM_set_high_durationP11TIM_TypeDefi>
			stopped = true;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2201      	movs	r2, #1
 8001956:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		return;
 800195a:	e02b      	b.n	80019b4 <_ZN7Stepper19set_speed_step_freqEii+0x90>
	}
	if(stopped) {
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001962:	2b00      	cmp	r3, #0
 8001964:	d009      	beq.n	800197a <_ZN7Stepper19set_speed_step_freqEii+0x56>
		// stepper stopped, start pwm
		PWM_set_high_duration(this->tim_handle.Instance, 10);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	210a      	movs	r1, #10
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff ff2b 	bl	80017c8 <_Z21PWM_set_high_durationP11TIM_TypeDefi>
		stopped = false;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
	PWM_set_freq(this->tim_handle.Instance, hz);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	68b9      	ldr	r1, [r7, #8]
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff51 	bl	8001828 <_Z12PWM_set_freqP11TIM_TypeDefi>

	if(dir==1) {
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d109      	bne.n	80019a0 <_ZN7Stepper19set_speed_step_freqEii+0x7c>
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001996:	2201      	movs	r2, #1
 8001998:	4619      	mov	r1, r3
 800199a:	f004 fa51 	bl	8005e40 <HAL_GPIO_WritePin>
 800199e:	e00a      	b.n	80019b6 <_ZN7Stepper19set_speed_step_freqEii+0x92>
	}else {
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_RESET);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80019aa:	2200      	movs	r2, #0
 80019ac:	4619      	mov	r1, r3
 80019ae:	f004 fa47 	bl	8005e40 <HAL_GPIO_WritePin>
 80019b2:	e000      	b.n	80019b6 <_ZN7Stepper19set_speed_step_freqEii+0x92>
		return;
 80019b4:	bf00      	nop
	}
}
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_ZN7Stepper13set_speed_rpsEf>:

void Stepper::set_speed_rps(float rps) {
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	ed87 0a00 	vstr	s0, [r7]
	// 3200 steps per revolution
	int hz = rps * 3200.0;
 80019c8:	6838      	ldr	r0, [r7, #0]
 80019ca:	f7fe fddd 	bl	8000588 <__aeabi_f2d>
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	4b0f      	ldr	r3, [pc, #60]	; (8001a10 <_ZN7Stepper13set_speed_rpsEf+0x54>)
 80019d4:	f7fe fe30 	bl	8000638 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f7ff f8c4 	bl	8000b6c <__aeabi_d2iz>
 80019e4:	4603      	mov	r3, r0
 80019e6:	60fb      	str	r3, [r7, #12]
	if(hz>=0) {
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db05      	blt.n	80019fa <_ZN7Stepper13set_speed_rpsEf+0x3e>
		this->set_speed_step_freq(hz, 1);
 80019ee:	2201      	movs	r2, #1
 80019f0:	68f9      	ldr	r1, [r7, #12]
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff ff96 	bl	8001924 <_ZN7Stepper19set_speed_step_freqEii>
	}
	else {
		this->set_speed_step_freq(-hz, 0);
	}
}
 80019f8:	e006      	b.n	8001a08 <_ZN7Stepper13set_speed_rpsEf+0x4c>
		this->set_speed_step_freq(-hz, 0);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	425b      	negs	r3, r3
 80019fe:	2200      	movs	r2, #0
 8001a00:	4619      	mov	r1, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f7ff ff8e 	bl	8001924 <_ZN7Stepper19set_speed_step_freqEii>
}
 8001a08:	bf00      	nop
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	40a90000 	.word	0x40a90000

08001a14 <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	4a04      	ldr	r2, [pc, #16]	; (8001a30 <_ZN7StepperD1Ev+0x1c>)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	080099dc 	.word	0x080099dc

08001a34 <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
}
 8001a3c:	6878      	ldr	r0, [r7, #4]
 8001a3e:	f7ff ffe9 	bl	8001a14 <_ZN7StepperD1Ev>
 8001a42:	2164      	movs	r1, #100	; 0x64
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f006 fcf5 	bl	8008434 <_ZdlPvj>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6) {
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d101      	bne.n	8001a6a <HAL_TIM_PeriodElapsedCallback+0x16>
    	loop();
 8001a66:	f000 f8e9 	bl	8001c3c <_Z4loopv>
    }

}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40001000 	.word	0x40001000

08001a78 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b09a      	sub	sp, #104	; 0x68
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d042      	beq.n	8001b12 <HAL_FDCAN_RxFifo0Callback+0x9a>
	{
		/* Retrieve Rx messages from RX FIFO0 */
		FDCAN_RxHeaderTypeDef RxHeader;
		uint8_t RxData[8];

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001a8c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a90:	f107 0208 	add.w	r2, r7, #8
 8001a94:	2140      	movs	r1, #64	; 0x40
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f003 fc7e 	bl	8005398 <HAL_FDCAN_GetRxMessage>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf14      	ite	ne
 8001aa2:	2301      	movne	r3, #1
 8001aa4:	2300      	moveq	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d004      	beq.n	8001ab6 <HAL_FDCAN_RxFifo0Callback+0x3e>
			printf("error rx\n");
 8001aac:	481b      	ldr	r0, [pc, #108]	; (8001b1c <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8001aae:	f007 f84d 	bl	8008b4c <puts>
			Error_Handler();
 8001ab2:	f000 fded 	bl	8002690 <Error_Handler>
		}
		// Handle Interesting messages
		if (RxHeader.Identifier == 0x10) {
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2b10      	cmp	r3, #16
 8001aba:	d12a      	bne.n	8001b12 <HAL_FDCAN_RxFifo0Callback+0x9a>
			msg_recomposer_cmd_vel.add_frame(RxData, RxHeader.DataLength);
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4816      	ldr	r0, [pc, #88]	; (8001b20 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001ac8:	f7ff fd0e 	bl	80014e8 <_ZN17MessageRecomposer9add_frameEPhh>

			if(msg_recomposer_cmd_vel.check_if_new_full_msg()) {
 8001acc:	4814      	ldr	r0, [pc, #80]	; (8001b20 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001ace:	f7ff fdd7 	bl	8001680 <_ZN17MessageRecomposer21check_if_new_full_msgEv>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01c      	beq.n	8001b12 <HAL_FDCAN_RxFifo0Callback+0x9a>
				std::string proto_msg = msg_recomposer_cmd_vel.get_full_msg();
 8001ad8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001adc:	4910      	ldr	r1, [pc, #64]	; (8001b20 <HAL_FDCAN_RxFifo0Callback+0xa8>)
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7ff fdda 	bl	8001698 <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>
				on_receive_cmd_vel(proto_msg);
 8001ae4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001ae8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f006 fddc 	bl	80086ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8001af4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001af8:	4618      	mov	r0, r3
 8001afa:	f000 f813 	bl	8001b24 <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8001afe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b02:	4618      	mov	r0, r3
 8001b04:	f006 fd47 	bl	8008596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

			}
 8001b08:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f006 fd42 	bl	8008596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8001b12:	bf00      	nop
 8001b14:	3768      	adds	r7, #104	; 0x68
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	080097bc 	.word	0x080097bc
 8001b20:	20000494 	.word	0x20000494

08001b24 <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void on_receive_cmd_vel(std::string proto_msg) {
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b091      	sub	sp, #68	; 0x44
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

	// Allocate space for the decoded message.
	msgs_can_BaseVel ret_cmd_vel = msgs_can_BaseVel_init_zero;
 8001b2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
 8001b3c:	615a      	str	r2, [r3, #20]
	  // Create a stream that reads from the buffer.
	pb_istream_t stream_ret = pb_istream_from_buffer((const unsigned char*)proto_msg.c_str(), proto_msg.size());
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f006 fd8e 	bl	8008660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001b44:	4604      	mov	r4, r0
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f006 fd5c 	bl	8008604 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	f107 0318 	add.w	r3, r7, #24
 8001b52:	4621      	mov	r1, r4
 8001b54:	4618      	mov	r0, r3
 8001b56:	f001 f973 	bl	8002e40 <pb_istream_from_buffer>
	  // Now we are ready to decode the message.
	 if (!pb_decode(&stream_ret, msgs_can_BaseVel_fields, &ret_cmd_vel)) {
 8001b5a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b5e:	f107 0318 	add.w	r3, r7, #24
 8001b62:	4917      	ldr	r1, [pc, #92]	; (8001bc0 <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f002 faa5 	bl	80040b4 <pb_decode>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f083 0301 	eor.w	r3, r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d00b      	beq.n	8001b8e <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6a>
		 printf("Decoding failed: %s\n", PB_GET_ERROR(&stream_ret));
 8001b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
 8001b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7e:	e000      	b.n	8001b82 <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5e>
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>)
 8001b82:	4619      	mov	r1, r3
 8001b84:	4810      	ldr	r0, [pc, #64]	; (8001bc8 <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>)
 8001b86:	f006 ff7b 	bl	8008a80 <iprintf>
		 Error_Handler();
 8001b8a:	f000 fd81 	bl	8002690 <Error_Handler>
	 }

	// Use message
	Vel cmd_vel = {ret_cmd_vel.x, ret_cmd_vel.y, ret_cmd_vel.theta};
 8001b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b94:	613b      	str	r3, [r7, #16]
 8001b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b98:	617b      	str	r3, [r7, #20]
	holo_drive.set_cmd_vel(cmd_vel);
 8001b9a:	edd7 6a03 	vldr	s13, [r7, #12]
 8001b9e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001ba2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ba6:	eeb0 0a66 	vmov.f32	s0, s13
 8001baa:	eef0 0a47 	vmov.f32	s1, s14
 8001bae:	eeb0 1a67 	vmov.f32	s2, s15
 8001bb2:	4806      	ldr	r0, [pc, #24]	; (8001bcc <_Z18on_receive_cmd_velNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 8001bb4:	f7ff fa36 	bl	8001024 <_ZN15HolonomicDrive311set_cmd_velE3Vel>
}
 8001bb8:	bf00      	nop
 8001bba:	3744      	adds	r7, #68	; 0x44
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd90      	pop	{r4, r7, pc}
 8001bc0:	080099f8 	.word	0x080099f8
 8001bc4:	080097c8 	.word	0x080097c8
 8001bc8:	080097d0 	.word	0x080097d0
 8001bcc:	20000344 	.word	0x20000344

08001bd0 <_Z13set_loop_freqi>:

void set_loop_freq(int hz) {
 8001bd0:	b5b0      	push	{r4, r5, r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	htim6.Instance->ARR = SYS_CORE_CLOCK_HZ / (htim6.Instance->PSC+1) / hz;
 8001bd8:	4b17      	ldr	r3, [pc, #92]	; (8001c38 <_Z13set_loop_freqi+0x68>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bde:	3301      	adds	r3, #1
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fcaf 	bl	8000544 <__aeabi_ui2d>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	a111      	add	r1, pc, #68	; (adr r1, 8001c30 <_Z13set_loop_freqi+0x60>)
 8001bec:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001bf0:	f7fe fe4c 	bl	800088c <__aeabi_ddiv>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	4614      	mov	r4, r2
 8001bfa:	461d      	mov	r5, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7fe fcb1 	bl	8000564 <__aeabi_i2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4620      	mov	r0, r4
 8001c08:	4629      	mov	r1, r5
 8001c0a:	f7fe fe3f 	bl	800088c <__aeabi_ddiv>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	460b      	mov	r3, r1
 8001c12:	4909      	ldr	r1, [pc, #36]	; (8001c38 <_Z13set_loop_freqi+0x68>)
 8001c14:	680c      	ldr	r4, [r1, #0]
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f7fe ffcf 	bl	8000bbc <__aeabi_d2uiz>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	f3af 8000 	nop.w
 8001c30:	00000000 	.word	0x00000000
 8001c34:	41a443fd 	.word	0x41a443fd
 8001c38:	20000134 	.word	0x20000134

08001c3c <_Z4loopv>:

void loop() {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0



	holo_drive.spin_once_motors_control();
 8001c40:	4802      	ldr	r0, [pc, #8]	; (8001c4c <_Z4loopv+0x10>)
 8001c42:	f7ff fb21 	bl	8001288 <_ZN15HolonomicDrive324spin_once_motors_controlEv>

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000344 	.word	0x20000344

08001c50 <_ZN7StepperC1ERKS_>:
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	4a14      	ldr	r2, [pc, #80]	; (8001cac <_ZN7StepperC1ERKS_+0x5c>)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	1d10      	adds	r0, r2, #4
 8001c66:	3304      	adds	r3, #4
 8001c68:	224c      	movs	r2, #76	; 0x4c
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f007 f91d 	bl	8008eaa <memcpy>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	651a      	str	r2, [r3, #80]	; 0x50
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	661a      	str	r2, [r3, #96]	; 0x60
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	080099dc 	.word	0x080099dc

08001cb0 <_ZN15HolonomicDrive3aSERKS_>:
	float x = 0;
	float y = 0;
	float theta = 0;
};

class HolonomicDrive3 {
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	1d1a      	adds	r2, r3, #4
 8001cbe:	2502      	movs	r5, #2
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	1d1c      	adds	r4, r3, #4
 8001cc4:	4616      	mov	r6, r2
 8001cc6:	e006      	b.n	8001cd6 <_ZN15HolonomicDrive3aSERKS_+0x26>
 8001cc8:	4621      	mov	r1, r4
 8001cca:	4630      	mov	r0, r6
 8001ccc:	f7ff f914 	bl	8000ef8 <_ZN7StepperaSERKS_>
 8001cd0:	3664      	adds	r6, #100	; 0x64
 8001cd2:	3464      	adds	r4, #100	; 0x64
 8001cd4:	3d01      	subs	r5, #1
 8001cd6:	2d00      	cmp	r5, #0
 8001cd8:	daf6      	bge.n	8001cc8 <_ZN15HolonomicDrive3aSERKS_+0x18>
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001cfa:	f502 729c 	add.w	r2, r2, #312	; 0x138
 8001cfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001d00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f503 71a2 	add.w	r1, r3, #324	; 0x144
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8001d12:	e004      	b.n	8001d1e <_ZN15HolonomicDrive3aSERKS_+0x6e>
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	6008      	str	r0, [r1, #0]
 8001d18:	3104      	adds	r1, #4
 8001d1a:	3304      	adds	r3, #4
 8001d1c:	3a01      	subs	r2, #1
 8001d1e:	2a00      	cmp	r2, #0
 8001d20:	daf8      	bge.n	8001d14 <_ZN15HolonomicDrive3aSERKS_+0x64>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d2c <_ZN17MessageRecomposeraSERKS_>:
 */
#define MAX_LENGTH_MSG 20

#include "string"

class MessageRecomposer {
 8001d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685a      	ldr	r2, [r3, #4]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	605a      	str	r2, [r3, #4]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689a      	ldr	r2, [r3, #8]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	7b1a      	ldrb	r2, [r3, #12]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	731a      	strb	r2, [r3, #12]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f103 010d 	add.w	r1, r3, #13
 8001d54:	2213      	movs	r2, #19
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	330d      	adds	r3, #13
 8001d5a:	e004      	b.n	8001d66 <_ZN17MessageRecomposeraSERKS_+0x3a>
 8001d5c:	7818      	ldrb	r0, [r3, #0]
 8001d5e:	7008      	strb	r0, [r1, #0]
 8001d60:	3101      	adds	r1, #1
 8001d62:	3301      	adds	r3, #1
 8001d64:	3a01      	subs	r2, #1
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	daf8      	bge.n	8001d5c <_ZN17MessageRecomposeraSERKS_+0x30>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8001d70:	2513      	movs	r5, #19
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8001d78:	4616      	mov	r6, r2
 8001d7a:	e006      	b.n	8001d8a <_ZN17MessageRecomposeraSERKS_+0x5e>
 8001d7c:	4621      	mov	r1, r4
 8001d7e:	4630      	mov	r0, r6
 8001d80:	f006 fc0f 	bl	80085a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8001d84:	3618      	adds	r6, #24
 8001d86:	3418      	adds	r4, #24
 8001d88:	3d01      	subs	r5, #1
 8001d8a:	2d00      	cmp	r5, #0
 8001d8c:	daf6      	bge.n	8001d7c <_ZN17MessageRecomposeraSERKS_+0x50>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	f006 fc00 	bl	80085a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4618      	mov	r0, r3
 8001da6:	370c      	adds	r7, #12
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001dac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dae:	f2ad 6d44 	subw	sp, sp, #1604	; 0x644
 8001db2:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001db4:	f002 ffed 	bl	8004d92 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001db8:	f000 f8fe 	bl	8001fb8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001dbc:	f000 fc1a 	bl	80025f4 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 8001dc0:	f000 f99c 	bl	80020fc <_ZL12MX_TIM1_Initv>
  MX_TIM8_Init();
 8001dc4:	f000 faaa 	bl	800231c <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 8001dc8:	f000 fa68 	bl	800229c <_ZL12MX_TIM6_Initv>
  MX_FDCAN1_Init();
 8001dcc:	f000 f94a 	bl	8002064 <_ZL14MX_FDCAN1_Initv>
  MX_TIM15_Init();
 8001dd0:	f000 fb74 	bl	80024bc <_ZL13MX_TIM15_Initv>
  /* USER CODE BEGIN 2 */

  stepper0 = Stepper(htim8, TIM_CHANNEL_1, GPIOA, GPIO_PIN_4);
 8001dd4:	4e6c      	ldr	r6, [pc, #432]	; (8001f88 <main+0x1dc>)
 8001dd6:	f107 0c2c 	add.w	ip, r7, #44	; 0x2c
 8001dda:	2310      	movs	r3, #16
 8001ddc:	9312      	str	r3, [sp, #72]	; 0x48
 8001dde:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001de2:	9311      	str	r3, [sp, #68]	; 0x44
 8001de4:	2300      	movs	r3, #0
 8001de6:	9310      	str	r3, [sp, #64]	; 0x40
 8001de8:	466d      	mov	r5, sp
 8001dea:	f106 040c 	add.w	r4, r6, #12
 8001dee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001df6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001df8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001dfa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001dfe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e02:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001e06:	4660      	mov	r0, ip
 8001e08:	f7ff fd4a 	bl	80018a0 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 8001e0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e10:	4619      	mov	r1, r3
 8001e12:	485e      	ldr	r0, [pc, #376]	; (8001f8c <main+0x1e0>)
 8001e14:	f7ff f870 	bl	8000ef8 <_ZN7StepperaSERKS_>
 8001e18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff fdf9 	bl	8001a14 <_ZN7StepperD1Ev>
  stepper1 = Stepper(htim1, TIM_CHANNEL_1, GPIOA, GPIO_PIN_0);
 8001e22:	4e5b      	ldr	r6, [pc, #364]	; (8001f90 <main+0x1e4>)
 8001e24:	f107 0c90 	add.w	ip, r7, #144	; 0x90
 8001e28:	2301      	movs	r3, #1
 8001e2a:	9312      	str	r3, [sp, #72]	; 0x48
 8001e2c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e30:	9311      	str	r3, [sp, #68]	; 0x44
 8001e32:	2300      	movs	r3, #0
 8001e34:	9310      	str	r3, [sp, #64]	; 0x40
 8001e36:	466d      	mov	r5, sp
 8001e38:	f106 040c 	add.w	r4, r6, #12
 8001e3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e48:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e4c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e50:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001e54:	4660      	mov	r0, ip
 8001e56:	f7ff fd23 	bl	80018a0 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 8001e5a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e5e:	4619      	mov	r1, r3
 8001e60:	484c      	ldr	r0, [pc, #304]	; (8001f94 <main+0x1e8>)
 8001e62:	f7ff f849 	bl	8000ef8 <_ZN7StepperaSERKS_>
 8001e66:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fdd2 	bl	8001a14 <_ZN7StepperD1Ev>
  stepper2 = Stepper(htim15, TIM_CHANNEL_1, GPIOA, GPIO_PIN_1);
 8001e70:	4e49      	ldr	r6, [pc, #292]	; (8001f98 <main+0x1ec>)
 8001e72:	f107 0cf4 	add.w	ip, r7, #244	; 0xf4
 8001e76:	2302      	movs	r3, #2
 8001e78:	9312      	str	r3, [sp, #72]	; 0x48
 8001e7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001e7e:	9311      	str	r3, [sp, #68]	; 0x44
 8001e80:	2300      	movs	r3, #0
 8001e82:	9310      	str	r3, [sp, #64]	; 0x40
 8001e84:	466d      	mov	r5, sp
 8001e86:	f106 040c 	add.w	r4, r6, #12
 8001e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e96:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e9a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001e9e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8001ea2:	4660      	mov	r0, ip
 8001ea4:	f7ff fcfc 	bl	80018a0 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 8001ea8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001eac:	4619      	mov	r1, r3
 8001eae:	483b      	ldr	r0, [pc, #236]	; (8001f9c <main+0x1f0>)
 8001eb0:	f7ff f822 	bl	8000ef8 <_ZN7StepperaSERKS_>
 8001eb4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fdab 	bl	8001a14 <_ZN7StepperD1Ev>

  holo_drive = HolonomicDrive3(stepper0, stepper1, stepper2, 0.029, 0.175);
 8001ebe:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001ec2:	4932      	ldr	r1, [pc, #200]	; (8001f8c <main+0x1e0>)
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff fec3 	bl	8001c50 <_ZN7StepperC1ERKS_>
 8001eca:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001ece:	4931      	ldr	r1, [pc, #196]	; (8001f94 <main+0x1e8>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff febd 	bl	8001c50 <_ZN7StepperC1ERKS_>
 8001ed6:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001eda:	4930      	ldr	r1, [pc, #192]	; (8001f9c <main+0x1f0>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff feb7 	bl	8001c50 <_ZN7StepperC1ERKS_>
 8001ee2:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001ee6:	f507 7243 	add.w	r2, r7, #780	; 0x30c
 8001eea:	f507 712a 	add.w	r1, r7, #680	; 0x2a8
 8001eee:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8001ef2:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8001fa0 <main+0x1f4>
 8001ef6:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8001fa4 <main+0x1f8>
 8001efa:	f7ff f829 	bl	8000f50 <_ZN15HolonomicDrive3C1E7StepperS0_S0_ff>
 8001efe:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001f02:	4619      	mov	r1, r3
 8001f04:	4828      	ldr	r0, [pc, #160]	; (8001fa8 <main+0x1fc>)
 8001f06:	f7ff fed3 	bl	8001cb0 <_ZN15HolonomicDrive3aSERKS_>
 8001f0a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fa96 	bl	8001440 <_ZN15HolonomicDrive3D1Ev>
 8001f14:	f507 735c 	add.w	r3, r7, #880	; 0x370
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fd7b 	bl	8001a14 <_ZN7StepperD1Ev>
 8001f1e:	f507 7343 	add.w	r3, r7, #780	; 0x30c
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fd76 	bl	8001a14 <_ZN7StepperD1Ev>
 8001f28:	f507 732a 	add.w	r3, r7, #680	; 0x2a8
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7ff fd71 	bl	8001a14 <_ZN7StepperD1Ev>

  ChampiCan champi_can = ChampiCan(&hfdcan1);
 8001f32:	463b      	mov	r3, r7
 8001f34:	491d      	ldr	r1, [pc, #116]	; (8001fac <main+0x200>)
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe feb0 	bl	8000c9c <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>
  msg_recomposer_cmd_vel = MessageRecomposer();
 8001f3c:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff fab1 	bl	80014a8 <_ZN17MessageRecomposerC1Ev>
 8001f46:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4818      	ldr	r0, [pc, #96]	; (8001fb0 <main+0x204>)
 8001f4e:	f7ff feed 	bl	8001d2c <_ZN17MessageRecomposeraSERKS_>
 8001f52:	f507 7375 	add.w	r3, r7, #980	; 0x3d4
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff fbb2 	bl	80016c0 <_ZN17MessageRecomposerD1Ev>


  if(champi_can.start() != 0) {
 8001f5c:	463b      	mov	r3, r7
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7fe fec6 	bl	8000cf0 <_ZN9ChampiCan5startEv>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	bf14      	ite	ne
 8001f6a:	2301      	movne	r3, #1
 8001f6c:	2300      	moveq	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <main+0x1cc>
	  Error_Handler();
 8001f74:	f000 fb8c 	bl	8002690 <Error_Handler>
  }

  set_loop_freq(100);
 8001f78:	2064      	movs	r0, #100	; 0x64
 8001f7a:	f7ff fe29 	bl	8001bd0 <_Z13set_loop_freqi>
  HAL_TIM_Base_Start_IT(&htim6);
 8001f7e:	480d      	ldr	r0, [pc, #52]	; (8001fb4 <main+0x208>)
 8001f80:	f004 ff68 	bl	8006e54 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8001f84:	e7fe      	b.n	8001f84 <main+0x1d8>
 8001f86:	bf00      	nop
 8001f88:	20000180 	.word	0x20000180
 8001f8c:	20000218 	.word	0x20000218
 8001f90:	200000e8 	.word	0x200000e8
 8001f94:	2000027c 	.word	0x2000027c
 8001f98:	200001cc 	.word	0x200001cc
 8001f9c:	200002e0 	.word	0x200002e0
 8001fa0:	3e333333 	.word	0x3e333333
 8001fa4:	3ced9168 	.word	0x3ced9168
 8001fa8:	20000344 	.word	0x20000344
 8001fac:	20000084 	.word	0x20000084
 8001fb0:	20000494 	.word	0x20000494
 8001fb4:	20000134 	.word	0x20000134

08001fb8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b094      	sub	sp, #80	; 0x50
 8001fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fbe:	f107 0318 	add.w	r3, r7, #24
 8001fc2:	2238      	movs	r2, #56	; 0x38
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f006 fea0 	bl	8008d0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fcc:	1d3b      	adds	r3, r7, #4
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
 8001fd4:	609a      	str	r2, [r3, #8]
 8001fd6:	60da      	str	r2, [r3, #12]
 8001fd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001fda:	2000      	movs	r0, #0
 8001fdc:	f003 ff48 	bl	8005e70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fea:	2340      	movs	r3, #64	; 0x40
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ff6:	2304      	movs	r3, #4
 8001ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ffa:	2355      	movs	r3, #85	; 0x55
 8001ffc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ffe:	2302      	movs	r3, #2
 8002000:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002002:	2302      	movs	r3, #2
 8002004:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002006:	2302      	movs	r3, #2
 8002008:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800200a:	f107 0318 	add.w	r3, r7, #24
 800200e:	4618      	mov	r0, r3
 8002010:	f003 ffe2 	bl	8005fd8 <HAL_RCC_OscConfig>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf14      	ite	ne
 800201a:	2301      	movne	r3, #1
 800201c:	2300      	moveq	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 8002024:	f000 fb34 	bl	8002690 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002028:	230f      	movs	r3, #15
 800202a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800202c:	2303      	movs	r3, #3
 800202e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800203c:	1d3b      	adds	r3, r7, #4
 800203e:	2104      	movs	r1, #4
 8002040:	4618      	mov	r0, r3
 8002042:	f004 fadb 	bl	80065fc <HAL_RCC_ClockConfig>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	bf14      	ite	ne
 800204c:	2301      	movne	r3, #1
 800204e:	2300      	moveq	r3, #0
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8002056:	f000 fb1b 	bl	8002690 <Error_Handler>
  }
}
 800205a:	bf00      	nop
 800205c:	3750      	adds	r7, #80	; 0x50
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8002068:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 800206a:	4a23      	ldr	r2, [pc, #140]	; (80020f8 <_ZL14MX_FDCAN1_Initv+0x94>)
 800206c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800206e:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002070:	2200      	movs	r2, #0
 8002072:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800207a:	4b1e      	ldr	r3, [pc, #120]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 800207c:	2200      	movs	r2, #0
 800207e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8002080:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002082:	2201      	movs	r2, #1
 8002084:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002086:	4b1b      	ldr	r3, [pc, #108]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002088:	2200      	movs	r2, #0
 800208a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 800208e:	2200      	movs	r2, #0
 8002090:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8002092:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002094:	220a      	movs	r2, #10
 8002096:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002098:	4b16      	ldr	r3, [pc, #88]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 800209a:	2201      	movs	r2, #1
 800209c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 80020a0:	220e      	movs	r2, #14
 80020a2:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 80020a6:	2202      	movs	r2, #2
 80020a8:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 80020ac:	220a      	movs	r2, #10
 80020ae:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 80020b6:	4b0f      	ldr	r3, [pc, #60]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 80020b8:	220e      	movs	r2, #14
 80020ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 80020be:	2202      	movs	r2, #2
 80020c0:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80020c8:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80020d4:	4807      	ldr	r0, [pc, #28]	; (80020f4 <_ZL14MX_FDCAN1_Initv+0x90>)
 80020d6:	f002 ffdd 	bl	8005094 <HAL_FDCAN_Init>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	bf14      	ite	ne
 80020e0:	2301      	movne	r3, #1
 80020e2:	2300      	moveq	r3, #0
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 80020ea:	f000 fad1 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000084 	.word	0x20000084
 80020f8:	40006400 	.word	0x40006400

080020fc <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b09c      	sub	sp, #112	; 0x70
 8002100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002102:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002110:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	605a      	str	r2, [r3, #4]
 800211a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800211c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
 800212c:	615a      	str	r2, [r3, #20]
 800212e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	2234      	movs	r2, #52	; 0x34
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f006 fde8 	bl	8008d0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800213c:	4b55      	ldr	r3, [pc, #340]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 800213e:	4a56      	ldr	r2, [pc, #344]	; (8002298 <_ZL12MX_TIM1_Initv+0x19c>)
 8002140:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 260;
 8002142:	4b54      	ldr	r3, [pc, #336]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 8002144:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002148:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800214a:	4b52      	ldr	r3, [pc, #328]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 800214c:	2200      	movs	r2, #0
 800214e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002150:	4b50      	ldr	r3, [pc, #320]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 8002152:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002156:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002158:	4b4e      	ldr	r3, [pc, #312]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 800215a:	2200      	movs	r2, #0
 800215c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800215e:	4b4d      	ldr	r3, [pc, #308]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 8002160:	2200      	movs	r2, #0
 8002162:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002164:	4b4b      	ldr	r3, [pc, #300]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 8002166:	2200      	movs	r2, #0
 8002168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800216a:	484a      	ldr	r0, [pc, #296]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 800216c:	f004 fe1a 	bl	8006da4 <HAL_TIM_Base_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	bf14      	ite	ne
 8002176:	2301      	movne	r3, #1
 8002178:	2300      	moveq	r3, #0
 800217a:	b2db      	uxtb	r3, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8002180:	f000 fa86 	bl	8002690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002188:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800218a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800218e:	4619      	mov	r1, r3
 8002190:	4840      	ldr	r0, [pc, #256]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 8002192:	f005 fa85 	bl	80076a0 <HAL_TIM_ConfigClockSource>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	bf14      	ite	ne
 800219c:	2301      	movne	r3, #1
 800219e:	2300      	moveq	r3, #0
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d001      	beq.n	80021aa <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 80021a6:	f000 fa73 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021aa:	483a      	ldr	r0, [pc, #232]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 80021ac:	f004 febc 	bl	8006f28 <HAL_TIM_PWM_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	bf14      	ite	ne
 80021b6:	2301      	movne	r3, #1
 80021b8:	2300      	moveq	r3, #0
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d001      	beq.n	80021c4 <_ZL12MX_TIM1_Initv+0xc8>
  {
    Error_Handler();
 80021c0:	f000 fa66 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80021c8:	2300      	movs	r3, #0
 80021ca:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021cc:	2300      	movs	r3, #0
 80021ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80021d4:	4619      	mov	r1, r3
 80021d6:	482f      	ldr	r0, [pc, #188]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 80021d8:	f005 ffd8 	bl	800818c <HAL_TIMEx_MasterConfigSynchronization>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <_ZL12MX_TIM1_Initv+0xf4>
  {
    Error_Handler();
 80021ec:	f000 fa50 	bl	8002690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021f0:	2360      	movs	r3, #96	; 0x60
 80021f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f8:	2300      	movs	r3, #0
 80021fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021fc:	2300      	movs	r3, #0
 80021fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002204:	2300      	movs	r3, #0
 8002206:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800220c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002210:	2200      	movs	r2, #0
 8002212:	4619      	mov	r1, r3
 8002214:	481f      	ldr	r0, [pc, #124]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 8002216:	f005 f92f 	bl	8007478 <HAL_TIM_PWM_ConfigChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 800222a:	f000 fa31 	bl	8002690 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800223a:	2300      	movs	r3, #0
 800223c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002246:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800224c:	2300      	movs	r3, #0
 800224e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002254:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002258:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800225a:	2300      	movs	r3, #0
 800225c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800225e:	2300      	movs	r3, #0
 8002260:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002262:	2300      	movs	r3, #0
 8002264:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002266:	1d3b      	adds	r3, r7, #4
 8002268:	4619      	mov	r1, r3
 800226a:	480a      	ldr	r0, [pc, #40]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 800226c:	f006 f810 	bl	8008290 <HAL_TIMEx_ConfigBreakDeadTime>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	bf14      	ite	ne
 8002276:	2301      	movne	r3, #1
 8002278:	2300      	moveq	r3, #0
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <_ZL12MX_TIM1_Initv+0x188>
  {
    Error_Handler();
 8002280:	f000 fa06 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002284:	4803      	ldr	r0, [pc, #12]	; (8002294 <_ZL12MX_TIM1_Initv+0x198>)
 8002286:	f002 fbc3 	bl	8004a10 <HAL_TIM_MspPostInit>

}
 800228a:	bf00      	nop
 800228c:	3770      	adds	r7, #112	; 0x70
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	200000e8 	.word	0x200000e8
 8002298:	40012c00 	.word	0x40012c00

0800229c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a2:	1d3b      	adds	r3, r7, #4
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80022ac:	4b19      	ldr	r3, [pc, #100]	; (8002314 <_ZL12MX_TIM6_Initv+0x78>)
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <_ZL12MX_TIM6_Initv+0x7c>)
 80022b0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 80022b2:	4b18      	ldr	r3, [pc, #96]	; (8002314 <_ZL12MX_TIM6_Initv+0x78>)
 80022b4:	2264      	movs	r2, #100	; 0x64
 80022b6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022b8:	4b16      	ldr	r3, [pc, #88]	; (8002314 <_ZL12MX_TIM6_Initv+0x78>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <_ZL12MX_TIM6_Initv+0x78>)
 80022c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c6:	4b13      	ldr	r3, [pc, #76]	; (8002314 <_ZL12MX_TIM6_Initv+0x78>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80022cc:	4811      	ldr	r0, [pc, #68]	; (8002314 <_ZL12MX_TIM6_Initv+0x78>)
 80022ce:	f004 fd69 	bl	8006da4 <HAL_TIM_Base_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 80022e2:	f000 f9d5 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022e6:	2300      	movs	r3, #0
 80022e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80022ee:	1d3b      	adds	r3, r7, #4
 80022f0:	4619      	mov	r1, r3
 80022f2:	4808      	ldr	r0, [pc, #32]	; (8002314 <_ZL12MX_TIM6_Initv+0x78>)
 80022f4:	f005 ff4a 	bl	800818c <HAL_TIMEx_MasterConfigSynchronization>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf14      	ite	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	2300      	moveq	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8002308:	f000 f9c2 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	20000134 	.word	0x20000134
 8002318:	40001000 	.word	0x40001000

0800231c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b09c      	sub	sp, #112	; 0x70
 8002320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002322:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002326:	2200      	movs	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
 800232a:	605a      	str	r2, [r3, #4]
 800232c:	609a      	str	r2, [r3, #8]
 800232e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002330:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	605a      	str	r2, [r3, #4]
 800233a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800233c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
 800234c:	615a      	str	r2, [r3, #20]
 800234e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002350:	1d3b      	adds	r3, r7, #4
 8002352:	2234      	movs	r2, #52	; 0x34
 8002354:	2100      	movs	r1, #0
 8002356:	4618      	mov	r0, r3
 8002358:	f006 fcd8 	bl	8008d0c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800235c:	4b55      	ldr	r3, [pc, #340]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 800235e:	4a56      	ldr	r2, [pc, #344]	; (80024b8 <_ZL12MX_TIM8_Initv+0x19c>)
 8002360:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 260;
 8002362:	4b54      	ldr	r3, [pc, #336]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 8002364:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002368:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236a:	4b52      	ldr	r3, [pc, #328]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 800236c:	2200      	movs	r2, #0
 800236e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002370:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 8002372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002376:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002378:	4b4e      	ldr	r3, [pc, #312]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800237e:	4b4d      	ldr	r3, [pc, #308]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 8002380:	2200      	movs	r2, #0
 8002382:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002384:	4b4b      	ldr	r3, [pc, #300]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 8002386:	2200      	movs	r2, #0
 8002388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800238a:	484a      	ldr	r0, [pc, #296]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 800238c:	f004 fd0a 	bl	8006da4 <HAL_TIM_Base_Init>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	bf14      	ite	ne
 8002396:	2301      	movne	r3, #1
 8002398:	2300      	moveq	r3, #0
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	d001      	beq.n	80023a4 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 80023a0:	f000 f976 	bl	8002690 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80023aa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80023ae:	4619      	mov	r1, r3
 80023b0:	4840      	ldr	r0, [pc, #256]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 80023b2:	f005 f975 	bl	80076a0 <HAL_TIM_ConfigClockSource>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	bf14      	ite	ne
 80023bc:	2301      	movne	r3, #1
 80023be:	2300      	moveq	r3, #0
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d001      	beq.n	80023ca <_ZL12MX_TIM8_Initv+0xae>
  {
    Error_Handler();
 80023c6:	f000 f963 	bl	8002690 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80023ca:	483a      	ldr	r0, [pc, #232]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 80023cc:	f004 fdac 	bl	8006f28 <HAL_TIM_PWM_Init>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	bf14      	ite	ne
 80023d6:	2301      	movne	r3, #1
 80023d8:	2300      	moveq	r3, #0
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <_ZL12MX_TIM8_Initv+0xc8>
  {
    Error_Handler();
 80023e0:	f000 f956 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e4:	2300      	movs	r3, #0
 80023e6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80023e8:	2300      	movs	r3, #0
 80023ea:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ec:	2300      	movs	r3, #0
 80023ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80023f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80023f4:	4619      	mov	r1, r3
 80023f6:	482f      	ldr	r0, [pc, #188]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 80023f8:	f005 fec8 	bl	800818c <HAL_TIMEx_MasterConfigSynchronization>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf14      	ite	ne
 8002402:	2301      	movne	r3, #1
 8002404:	2300      	moveq	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <_ZL12MX_TIM8_Initv+0xf4>
  {
    Error_Handler();
 800240c:	f000 f940 	bl	8002690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002410:	2360      	movs	r3, #96	; 0x60
 8002412:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002418:	2300      	movs	r3, #0
 800241a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800241c:	2300      	movs	r3, #0
 800241e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002424:	2300      	movs	r3, #0
 8002426:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002428:	2300      	movs	r3, #0
 800242a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800242c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002430:	2200      	movs	r2, #0
 8002432:	4619      	mov	r1, r3
 8002434:	481f      	ldr	r0, [pc, #124]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 8002436:	f005 f81f 	bl	8007478 <HAL_TIM_PWM_ConfigChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	bf14      	ite	ne
 8002440:	2301      	movne	r3, #1
 8002442:	2300      	moveq	r3, #0
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <_ZL12MX_TIM8_Initv+0x132>
  {
    Error_Handler();
 800244a:	f000 f921 	bl	8002690 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800244e:	2300      	movs	r3, #0
 8002450:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002456:	2300      	movs	r3, #0
 8002458:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800245a:	2300      	movs	r3, #0
 800245c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002462:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002466:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800246c:	2300      	movs	r3, #0
 800246e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002470:	2300      	movs	r3, #0
 8002472:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002474:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002478:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800247a:	2300      	movs	r3, #0
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800247e:	2300      	movs	r3, #0
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	4619      	mov	r1, r3
 800248a:	480a      	ldr	r0, [pc, #40]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 800248c:	f005 ff00 	bl	8008290 <HAL_TIMEx_ConfigBreakDeadTime>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	bf14      	ite	ne
 8002496:	2301      	movne	r3, #1
 8002498:	2300      	moveq	r3, #0
 800249a:	b2db      	uxtb	r3, r3
 800249c:	2b00      	cmp	r3, #0
 800249e:	d001      	beq.n	80024a4 <_ZL12MX_TIM8_Initv+0x188>
  {
    Error_Handler();
 80024a0:	f000 f8f6 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80024a4:	4803      	ldr	r0, [pc, #12]	; (80024b4 <_ZL12MX_TIM8_Initv+0x198>)
 80024a6:	f002 fab3 	bl	8004a10 <HAL_TIM_MspPostInit>

}
 80024aa:	bf00      	nop
 80024ac:	3770      	adds	r7, #112	; 0x70
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000180 	.word	0x20000180
 80024b8:	40013400 	.word	0x40013400

080024bc <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b098      	sub	sp, #96	; 0x60
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80024c6:	2200      	movs	r2, #0
 80024c8:	601a      	str	r2, [r3, #0]
 80024ca:	605a      	str	r2, [r3, #4]
 80024cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
 80024d8:	609a      	str	r2, [r3, #8]
 80024da:	60da      	str	r2, [r3, #12]
 80024dc:	611a      	str	r2, [r3, #16]
 80024de:	615a      	str	r2, [r3, #20]
 80024e0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80024e2:	1d3b      	adds	r3, r7, #4
 80024e4:	2234      	movs	r2, #52	; 0x34
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f006 fc0f 	bl	8008d0c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80024ee:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <_ZL13MX_TIM15_Initv+0x130>)
 80024f0:	4a3f      	ldr	r2, [pc, #252]	; (80025f0 <_ZL13MX_TIM15_Initv+0x134>)
 80024f2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 260;
 80024f4:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <_ZL13MX_TIM15_Initv+0x130>)
 80024f6:	f44f 7282 	mov.w	r2, #260	; 0x104
 80024fa:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fc:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <_ZL13MX_TIM15_Initv+0x130>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002502:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <_ZL13MX_TIM15_Initv+0x130>)
 8002504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002508:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800250a:	4b38      	ldr	r3, [pc, #224]	; (80025ec <_ZL13MX_TIM15_Initv+0x130>)
 800250c:	2200      	movs	r2, #0
 800250e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002510:	4b36      	ldr	r3, [pc, #216]	; (80025ec <_ZL13MX_TIM15_Initv+0x130>)
 8002512:	2200      	movs	r2, #0
 8002514:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002516:	4b35      	ldr	r3, [pc, #212]	; (80025ec <_ZL13MX_TIM15_Initv+0x130>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800251c:	4833      	ldr	r0, [pc, #204]	; (80025ec <_ZL13MX_TIM15_Initv+0x130>)
 800251e:	f004 fd03 	bl	8006f28 <HAL_TIM_PWM_Init>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	bf14      	ite	ne
 8002528:	2301      	movne	r3, #1
 800252a:	2300      	moveq	r3, #0
 800252c:	b2db      	uxtb	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <_ZL13MX_TIM15_Initv+0x7a>
  {
    Error_Handler();
 8002532:	f000 f8ad 	bl	8002690 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002536:	2300      	movs	r3, #0
 8002538:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253a:	2300      	movs	r3, #0
 800253c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800253e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002542:	4619      	mov	r1, r3
 8002544:	4829      	ldr	r0, [pc, #164]	; (80025ec <_ZL13MX_TIM15_Initv+0x130>)
 8002546:	f005 fe21 	bl	800818c <HAL_TIMEx_MasterConfigSynchronization>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf14      	ite	ne
 8002550:	2301      	movne	r3, #1
 8002552:	2300      	moveq	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <_ZL13MX_TIM15_Initv+0xa2>
  {
    Error_Handler();
 800255a:	f000 f899 	bl	8002690 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800255e:	2360      	movs	r3, #96	; 0x60
 8002560:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002562:	2300      	movs	r3, #0
 8002564:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002566:	2300      	movs	r3, #0
 8002568:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800256a:	2300      	movs	r3, #0
 800256c:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800256e:	2300      	movs	r3, #0
 8002570:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002572:	2300      	movs	r3, #0
 8002574:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800257a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800257e:	2200      	movs	r2, #0
 8002580:	4619      	mov	r1, r3
 8002582:	481a      	ldr	r0, [pc, #104]	; (80025ec <_ZL13MX_TIM15_Initv+0x130>)
 8002584:	f004 ff78 	bl	8007478 <HAL_TIM_PWM_ConfigChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	bf14      	ite	ne
 800258e:	2301      	movne	r3, #1
 8002590:	2300      	moveq	r3, #0
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <_ZL13MX_TIM15_Initv+0xe0>
  {
    Error_Handler();
 8002598:	f000 f87a 	bl	8002690 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800259c:	2300      	movs	r3, #0
 800259e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80025a0:	2300      	movs	r3, #0
 80025a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80025b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80025ba:	2300      	movs	r3, #0
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80025be:	1d3b      	adds	r3, r7, #4
 80025c0:	4619      	mov	r1, r3
 80025c2:	480a      	ldr	r0, [pc, #40]	; (80025ec <_ZL13MX_TIM15_Initv+0x130>)
 80025c4:	f005 fe64 	bl	8008290 <HAL_TIMEx_ConfigBreakDeadTime>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	bf14      	ite	ne
 80025ce:	2301      	movne	r3, #1
 80025d0:	2300      	moveq	r3, #0
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d001      	beq.n	80025dc <_ZL13MX_TIM15_Initv+0x120>
  {
    Error_Handler();
 80025d8:	f000 f85a 	bl	8002690 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80025dc:	4803      	ldr	r0, [pc, #12]	; (80025ec <_ZL13MX_TIM15_Initv+0x130>)
 80025de:	f002 fa17 	bl	8004a10 <HAL_TIM_MspPostInit>

}
 80025e2:	bf00      	nop
 80025e4:	3760      	adds	r7, #96	; 0x60
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	200001cc 	.word	0x200001cc
 80025f0:	40014000 	.word	0x40014000

080025f4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	2200      	movs	r2, #0
 8002600:	601a      	str	r2, [r3, #0]
 8002602:	605a      	str	r2, [r3, #4]
 8002604:	609a      	str	r2, [r3, #8]
 8002606:	60da      	str	r2, [r3, #12]
 8002608:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	4b20      	ldr	r3, [pc, #128]	; (800268c <_ZL12MX_GPIO_Initv+0x98>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <_ZL12MX_GPIO_Initv+0x98>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002616:	4b1d      	ldr	r3, [pc, #116]	; (800268c <_ZL12MX_GPIO_Initv+0x98>)
 8002618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	60bb      	str	r3, [r7, #8]
 8002620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002622:	4b1a      	ldr	r3, [pc, #104]	; (800268c <_ZL12MX_GPIO_Initv+0x98>)
 8002624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002626:	4a19      	ldr	r2, [pc, #100]	; (800268c <_ZL12MX_GPIO_Initv+0x98>)
 8002628:	f043 0302 	orr.w	r3, r3, #2
 800262c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800262e:	4b17      	ldr	r3, [pc, #92]	; (800268c <_ZL12MX_GPIO_Initv+0x98>)
 8002630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	607b      	str	r3, [r7, #4]
 8002638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 800263a:	2200      	movs	r2, #0
 800263c:	2193      	movs	r1, #147	; 0x93
 800263e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002642:	f003 fbfd 	bl	8005e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002646:	2313      	movs	r3, #19
 8002648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800264a:	2301      	movs	r3, #1
 800264c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002652:	2300      	movs	r3, #0
 8002654:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002656:	f107 030c 	add.w	r3, r7, #12
 800265a:	4619      	mov	r1, r3
 800265c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002660:	f003 fa6c 	bl	8005b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002668:	2311      	movs	r3, #17
 800266a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f107 030c 	add.w	r3, r7, #12
 8002678:	4619      	mov	r1, r3
 800267a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800267e:	f003 fa5d 	bl	8005b3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002682:	bf00      	nop
 8002684:	3720      	adds	r7, #32
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	40021000 	.word	0x40021000

08002690 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
}
 8002696:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002698:	e7fe      	b.n	8002698 <Error_Handler+0x8>
	...

0800269c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d113      	bne.n	80026d4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d10e      	bne.n	80026d4 <_Z41__static_initialization_and_destruction_0ii+0x38>
Stepper stepper0;
 80026b6:	4815      	ldr	r0, [pc, #84]	; (800270c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80026b8:	f7ff f8e2 	bl	8001880 <_ZN7StepperC1Ev>
Stepper stepper1;
 80026bc:	4814      	ldr	r0, [pc, #80]	; (8002710 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80026be:	f7ff f8df 	bl	8001880 <_ZN7StepperC1Ev>
Stepper stepper2;
 80026c2:	4814      	ldr	r0, [pc, #80]	; (8002714 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80026c4:	f7ff f8dc 	bl	8001880 <_ZN7StepperC1Ev>
HolonomicDrive3 holo_drive;
 80026c8:	4813      	ldr	r0, [pc, #76]	; (8002718 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80026ca:	f7fe fe99 	bl	8001400 <_ZN15HolonomicDrive3C1Ev>
MessageRecomposer msg_recomposer_cmd_vel;
 80026ce:	4813      	ldr	r0, [pc, #76]	; (800271c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80026d0:	f7fe feea 	bl	80014a8 <_ZN17MessageRecomposerC1Ev>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d113      	bne.n	8002702 <_Z41__static_initialization_and_destruction_0ii+0x66>
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d10e      	bne.n	8002702 <_Z41__static_initialization_and_destruction_0ii+0x66>
 80026e4:	480d      	ldr	r0, [pc, #52]	; (800271c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80026e6:	f7fe ffeb 	bl	80016c0 <_ZN17MessageRecomposerD1Ev>
HolonomicDrive3 holo_drive;
 80026ea:	480b      	ldr	r0, [pc, #44]	; (8002718 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80026ec:	f7fe fea8 	bl	8001440 <_ZN15HolonomicDrive3D1Ev>
Stepper stepper2;
 80026f0:	4808      	ldr	r0, [pc, #32]	; (8002714 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80026f2:	f7ff f98f 	bl	8001a14 <_ZN7StepperD1Ev>
Stepper stepper1;
 80026f6:	4806      	ldr	r0, [pc, #24]	; (8002710 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80026f8:	f7ff f98c 	bl	8001a14 <_ZN7StepperD1Ev>
Stepper stepper0;
 80026fc:	4803      	ldr	r0, [pc, #12]	; (800270c <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80026fe:	f7ff f989 	bl	8001a14 <_ZN7StepperD1Ev>
}
 8002702:	bf00      	nop
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	20000218 	.word	0x20000218
 8002710:	2000027c 	.word	0x2000027c
 8002714:	200002e0 	.word	0x200002e0
 8002718:	20000344 	.word	0x20000344
 800271c:	20000494 	.word	0x20000494

08002720 <_GLOBAL__sub_I_hfdcan1>:
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
 8002724:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002728:	2001      	movs	r0, #1
 800272a:	f7ff ffb7 	bl	800269c <_Z41__static_initialization_and_destruction_0ii>
 800272e:	bd80      	pop	{r7, pc}

08002730 <_GLOBAL__sub_D_hfdcan1>:
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
 8002734:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002738:	2000      	movs	r0, #0
 800273a:	f7ff ffaf 	bl	800269c <_Z41__static_initialization_and_destruction_0ii>
 800273e:	bd80      	pop	{r7, pc}

08002740 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8002740:	b480      	push	{r7}
 8002742:	b08f      	sub	sp, #60	; 0x3c
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	891a      	ldrh	r2, [r3, #8]
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	8a1b      	ldrh	r3, [r3, #16]
 8002752:	429a      	cmp	r2, r3
 8002754:	d301      	bcc.n	800275a <load_descriptor_values+0x1a>
        return false;
 8002756:	2300      	movs	r3, #0
 8002758:	e156      	b.n	8002a08 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	895b      	ldrh	r3, [r3, #10]
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	4413      	add	r3, r2
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 800276c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	b2da      	uxtb	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8002776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002778:	f003 0303 	and.w	r3, r3, #3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d05a      	beq.n	8002836 <load_descriptor_values+0xf6>
 8002780:	2b02      	cmp	r3, #2
 8002782:	f200 8094 	bhi.w	80028ae <load_descriptor_values+0x16e>
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <load_descriptor_values+0x50>
 800278a:	2b01      	cmp	r3, #1
 800278c:	d01f      	beq.n	80027ce <load_descriptor_values+0x8e>
 800278e:	e08e      	b.n	80028ae <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	089b      	lsrs	r3, r3, #2
 800279a:	b29b      	uxth	r3, r3
 800279c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 80027a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a8:	0e1b      	lsrs	r3, r3, #24
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	0c1b      	lsrs	r3, r3, #16
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	0f1b      	lsrs	r3, r3, #28
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	825a      	strh	r2, [r3, #18]
            break;
 80027cc:	e0b4      	b.n	8002938 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	895b      	ldrh	r3, [r3, #10]
 80027d8:	3301      	adds	r3, #1
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	0c1b      	lsrs	r3, r3, #16
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ec:	b29a      	uxth	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 80027f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027f4:	089b      	lsrs	r3, r3, #2
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	0f1b      	lsrs	r3, r3, #28
 8002802:	b29b      	uxth	r3, r3
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	b29b      	uxth	r3, r3
 8002808:	4313      	orrs	r3, r2
 800280a:	b29a      	uxth	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	0f1b      	lsrs	r3, r3, #28
 8002814:	b25b      	sxtb	r3, r3
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	b29b      	uxth	r3, r3
 8002822:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	0c1b      	lsrs	r3, r3, #16
 8002828:	b29b      	uxth	r3, r3
 800282a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800282e:	b29a      	uxth	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	825a      	strh	r2, [r3, #18]
            break;
 8002834:	e080      	b.n	8002938 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	895b      	ldrh	r3, [r3, #10]
 8002840:	3301      	adds	r3, #1
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	4413      	add	r3, r2
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	895b      	ldrh	r3, [r3, #10]
 8002854:	3302      	adds	r3, #2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	895b      	ldrh	r3, [r3, #10]
 8002868:	3303      	adds	r3, #3
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	0c1b      	lsrs	r3, r3, #16
 8002876:	b29a      	uxth	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	089b      	lsrs	r3, r3, #2
 8002880:	b29b      	uxth	r3, r3
 8002882:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002886:	b29a      	uxth	r2, r3
 8002888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288a:	0a1b      	lsrs	r3, r3, #8
 800288c:	b29b      	uxth	r3, r3
 800288e:	019b      	lsls	r3, r3, #6
 8002890:	b29b      	uxth	r3, r3
 8002892:	4313      	orrs	r3, r2
 8002894:	b29a      	uxth	r2, r3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800289a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 80028a4:	6a3b      	ldr	r3, [r7, #32]
 80028a6:	b29a      	uxth	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	825a      	strh	r2, [r3, #18]
            break;
 80028ac:	e044      	b.n	8002938 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	895b      	ldrh	r3, [r3, #10]
 80028b8:	3301      	adds	r3, #1
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	895b      	ldrh	r3, [r3, #10]
 80028cc:	3302      	adds	r3, #2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	895b      	ldrh	r3, [r3, #10]
 80028e0:	3303      	adds	r3, #3
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	895b      	ldrh	r3, [r3, #10]
 80028f4:	3304      	adds	r3, #4
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	b29a      	uxth	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8002906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002908:	089b      	lsrs	r3, r3, #2
 800290a:	b29b      	uxth	r3, r3
 800290c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002910:	b29a      	uxth	r2, r3
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	0a1b      	lsrs	r3, r3, #8
 8002916:	b29b      	uxth	r3, r3
 8002918:	019b      	lsls	r3, r3, #6
 800291a:	b29b      	uxth	r3, r3
 800291c:	4313      	orrs	r3, r2
 800291e:	b29a      	uxth	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8002924:	69bb      	ldr	r3, [r7, #24]
 8002926:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	b29a      	uxth	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	825a      	strh	r2, [r3, #18]
            break;
 8002936:	bf00      	nop
        }
    }

    if (!iter->message)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d106      	bne.n	800294e <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	621a      	str	r2, [r3, #32]
 800294c:	e041      	b.n	80029d2 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002954:	441a      	add	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	619a      	str	r2, [r3, #24]

        if (size_offset)
 800295a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800295e:	2b00      	cmp	r3, #0
 8002960:	d008      	beq.n	8002974 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699a      	ldr	r2, [r3, #24]
 8002966:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800296a:	425b      	negs	r3, r3
 800296c:	441a      	add	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	621a      	str	r2, [r3, #32]
 8002972:	e01a      	b.n	80029aa <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7d9b      	ldrb	r3, [r3, #22]
 8002978:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800297c:	2b20      	cmp	r3, #32
 800297e:	d111      	bne.n	80029a4 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	7d9b      	ldrb	r3, [r3, #22]
 8002984:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8002988:	2b00      	cmp	r3, #0
 800298a:	d005      	beq.n	8002998 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	7d9b      	ldrb	r3, [r3, #22]
 8002990:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8002994:	2b80      	cmp	r3, #128	; 0x80
 8002996:	d105      	bne.n	80029a4 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f103 0214 	add.w	r2, r3, #20
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	621a      	str	r2, [r3, #32]
 80029a2:	e002      	b.n	80029aa <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	7d9b      	ldrb	r3, [r3, #22]
 80029ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80029b2:	2b80      	cmp	r3, #128	; 0x80
 80029b4:	d109      	bne.n	80029ca <load_descriptor_values+0x28a>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d005      	beq.n	80029ca <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	61da      	str	r2, [r3, #28]
 80029c8:	e003      	b.n	80029d2 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699a      	ldr	r2, [r3, #24]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	7d9b      	ldrb	r3, [r3, #22]
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	2b08      	cmp	r3, #8
 80029dc:	d005      	beq.n	80029ea <load_descriptor_values+0x2aa>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	7d9b      	ldrb	r3, [r3, #22]
 80029e2:	f003 030f 	and.w	r3, r3, #15
 80029e6:	2b09      	cmp	r3, #9
 80029e8:	d10a      	bne.n	8002a00 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	89db      	ldrh	r3, [r3, #14]
 80029f4:	009b      	lsls	r3, r3, #2
 80029f6:	4413      	add	r3, r2
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	625a      	str	r2, [r3, #36]	; 0x24
 80029fe:	e002      	b.n	8002a06 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 8002a06:	2301      	movs	r3, #1
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	373c      	adds	r7, #60	; 0x3c
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
    iter->index++;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	891b      	ldrh	r3, [r3, #8]
 8002a20:	3301      	adds	r3, #1
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	891a      	ldrh	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	8a1b      	ldrh	r3, [r3, #16]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d30c      	bcc.n	8002a50 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8002a4e:	e03c      	b.n	8002aca <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	895b      	ldrh	r3, [r3, #10]
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2201      	movs	r2, #1
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	895a      	ldrh	r2, [r3, #10]
 8002a7a:	893b      	ldrh	r3, [r7, #8]
 8002a7c:	4413      	add	r3, r2
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	899a      	ldrh	r2, [r3, #12]
 8002a88:	7afb      	ldrb	r3, [r7, #11]
 8002a8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	bf0c      	ite	eq
 8002a92:	2301      	moveq	r3, #1
 8002a94:	2300      	movne	r3, #0
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	89da      	ldrh	r2, [r3, #14]
 8002aa6:	7afb      	ldrb	r3, [r7, #11]
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	2b08      	cmp	r3, #8
 8002aae:	d004      	beq.n	8002aba <advance_iterator+0xa6>
 8002ab0:	7afb      	ldrb	r3, [r7, #11]
 8002ab2:	f003 030f 	and.w	r3, r3, #15
 8002ab6:	2b09      	cmp	r3, #9
 8002ab8:	d101      	bne.n	8002abe <advance_iterator+0xaa>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <advance_iterator+0xac>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	81da      	strh	r2, [r3, #14]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8002ae2:	2228      	movs	r2, #40	; 0x28
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f006 f910 	bl	8008d0c <memset>

    iter->descriptor = desc;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	68ba      	ldr	r2, [r7, #8]
 8002af0:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f7ff fe21 	bl	8002740 <load_descriptor_values>
 8002afe:	4603      	mov	r3, r0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	0a1b      	lsrs	r3, r3, #8
 8002b26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b2a:	2b80      	cmp	r3, #128	; 0x80
 8002b2c:	d109      	bne.n	8002b42 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	3304      	adds	r3, #4
 8002b32:	461a      	mov	r2, r3
 8002b34:	6939      	ldr	r1, [r7, #16]
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff ffcd 	bl	8002ad6 <pb_field_iter_begin>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	75fb      	strb	r3, [r7, #23]
 8002b40:	e008      	b.n	8002b54 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	461a      	mov	r2, r3
 8002b48:	6939      	ldr	r1, [r7, #16]
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff ffc3 	bl	8002ad6 <pb_field_iter_begin>
 8002b50:	4603      	mov	r3, r0
 8002b52:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f103 020c 	add.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	621a      	str	r2, [r3, #32]
    return status;
 8002b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f7ff ff4f 	bl	8002a14 <advance_iterator>
    (void)load_descriptor_values(iter);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7ff fde2 	bl	8002740 <load_descriptor_values>
    return iter->index != 0;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	891b      	ldrh	r3, [r3, #8]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf14      	ite	ne
 8002b84:	2301      	movne	r3, #1
 8002b86:	2300      	moveq	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
 8002b9a:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	8a1b      	ldrh	r3, [r3, #16]
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d101      	bne.n	8002bac <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e044      	b.n	8002c36 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	8a9b      	ldrh	r3, [r3, #20]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <pb_field_iter_find+0x2c>
    {
        return false;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e03b      	b.n	8002c36 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	891b      	ldrh	r3, [r3, #8]
 8002bc2:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	8a1b      	ldrh	r3, [r3, #16]
 8002bc8:	461a      	mov	r2, r3
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d204      	bcs.n	8002bda <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	8a1a      	ldrh	r2, [r3, #16]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7ff ff1a 	bl	8002a14 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	895b      	ldrh	r3, [r3, #10]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	089a      	lsrs	r2, r3, #2
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	4053      	eors	r3, r2
 8002bfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d110      	bne.n	8002c24 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7ff fd9c 	bl	8002740 <load_descriptor_values>

                if (iter->tag == tag &&
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	8a1b      	ldrh	r3, [r3, #16]
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d107      	bne.n	8002c24 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7d9b      	ldrb	r3, [r3, #22]
 8002c18:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8002c1c:	2b0a      	cmp	r3, #10
 8002c1e:	d001      	beq.n	8002c24 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e008      	b.n	8002c36 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	891b      	ldrh	r3, [r3, #8]
 8002c28:	89fa      	ldrh	r2, [r7, #14]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d1d5      	bne.n	8002bda <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff fd86 	bl	8002740 <load_descriptor_values>
        return false;
 8002c34:	2300      	movs	r3, #0
    }
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	7d9b      	ldrb	r3, [r3, #22]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	2b0a      	cmp	r3, #10
 8002c50:	d101      	bne.n	8002c56 <pb_field_iter_find_extension+0x18>
    {
        return true;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e022      	b.n	8002c9c <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	891b      	ldrh	r3, [r3, #8]
 8002c5a:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7ff fed9 	bl	8002a14 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	895b      	ldrh	r3, [r3, #10]
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	f003 030f 	and.w	r3, r3, #15
 8002c7c:	2b0a      	cmp	r3, #10
 8002c7e:	d104      	bne.n	8002c8a <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff fd5d 	bl	8002740 <load_descriptor_values>
 8002c86:	4603      	mov	r3, r0
 8002c88:	e008      	b.n	8002c9c <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	891b      	ldrh	r3, [r3, #8]
 8002c8e:	89fa      	ldrh	r2, [r7, #14]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1e3      	bne.n	8002c5c <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff fd53 	bl	8002740 <load_descriptor_values>
        return false;
 8002c9a:	2300      	movs	r3, #0
    }
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3710      	adds	r7, #16
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	441a      	add	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6979      	ldr	r1, [r7, #20]
 8002ccc:	68b8      	ldr	r0, [r7, #8]
 8002cce:	f006 f8ec 	bl	8008eaa <memcpy>
    }
    
    return true;
 8002cd2:	2301      	movs	r3, #1
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <pb_read+0x16>
        return true;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e05f      	b.n	8002db2 <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d123      	bne.n	8002d40 <pb_read+0x64>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a2f      	ldr	r2, [pc, #188]	; (8002dbc <pb_read+0xe0>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d01e      	beq.n	8002d40 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 8002d02:	e011      	b.n	8002d28 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	2210      	movs	r2, #16
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	68f8      	ldr	r0, [r7, #12]
 8002d0e:	f7ff ffe5 	bl	8002cdc <pb_read>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f083 0301 	eor.w	r3, r3, #1
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <pb_read+0x46>
				return false;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	e047      	b.n	8002db2 <pb_read+0xd6>
			
			count -= 16;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	3b10      	subs	r3, #16
 8002d26:	607b      	str	r3, [r7, #4]
		while (count > 16)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b10      	cmp	r3, #16
 8002d2c:	d8ea      	bhi.n	8002d04 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 8002d2e:	f107 0310 	add.w	r3, r7, #16
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	4619      	mov	r1, r3
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f7ff ffd0 	bl	8002cdc <pb_read>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	e038      	b.n	8002db2 <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d90b      	bls.n	8002d62 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <pb_read+0x7c>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	e000      	b.n	8002d5a <pb_read+0x7e>
 8002d58:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <pb_read+0xe4>)
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	60d3      	str	r3, [r2, #12]
 8002d5e:	2300      	movs	r3, #0
 8002d60:	e027      	b.n	8002db2 <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	4798      	blx	r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	f083 0301 	eor.w	r3, r3, #1
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <pb_read+0xac>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	e000      	b.n	8002d8a <pb_read+0xae>
 8002d88:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <pb_read+0xe8>)
 8002d8a:	68fa      	ldr	r2, [r7, #12]
 8002d8c:	60d3      	str	r3, [r2, #12]
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e00f      	b.n	8002db2 <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d903      	bls.n	8002da4 <pb_read+0xc8>
        stream->bytes_left = 0;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	e005      	b.n	8002db0 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	1ad2      	subs	r2, r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	609a      	str	r2, [r3, #8]

    return true;
 8002db0:	2301      	movs	r3, #1
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3720      	adds	r7, #32
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	08002ca5 	.word	0x08002ca5
 8002dc0:	080097e8 	.word	0x080097e8
 8002dc4:	080097f8 	.word	0x080097f8

08002dc8 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10b      	bne.n	8002df2 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <pb_readbyte+0x20>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	e000      	b.n	8002dea <pb_readbyte+0x22>
 8002de8:	4b13      	ldr	r3, [pc, #76]	; (8002e38 <pb_readbyte+0x70>)
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	60d3      	str	r3, [r2, #12]
 8002dee:	2300      	movs	r3, #0
 8002df0:	e01d      	b.n	8002e2e <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2201      	movs	r2, #1
 8002df8:	6839      	ldr	r1, [r7, #0]
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	4798      	blx	r3
 8002dfe:	4603      	mov	r3, r0
 8002e00:	f083 0301 	eor.w	r3, r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <pb_readbyte+0x50>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	e000      	b.n	8002e1a <pb_readbyte+0x52>
 8002e18:	4b08      	ldr	r3, [pc, #32]	; (8002e3c <pb_readbyte+0x74>)
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	60d3      	str	r3, [r2, #12]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e005      	b.n	8002e2e <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	1e5a      	subs	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
    
    return true;    
 8002e2c:	2301      	movs	r3, #1
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	080097e8 	.word	0x080097e8
 8002e3c:	080097f8 	.word	0x080097f8

08002e40 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 8002e40:	b490      	push	{r4, r7}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <pb_istream_from_buffer+0x38>)
 8002e4e:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	461c      	mov	r4, r3
 8002e64:	f107 0318 	add.w	r3, r7, #24
 8002e68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e6a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	3728      	adds	r7, #40	; 0x28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc90      	pop	{r4, r7}
 8002e76:	4770      	bx	lr
 8002e78:	08002ca5 	.word	0x08002ca5

08002e7c <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b088      	sub	sp, #32
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8002e88:	f107 0315 	add.w	r3, r7, #21
 8002e8c:	4619      	mov	r1, r3
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f7ff ff9a 	bl	8002dc8 <pb_readbyte>
 8002e94:	4603      	mov	r3, r0
 8002e96:	f083 0301 	eor.w	r3, r3, #1
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00b      	beq.n	8002eb8 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d105      	bne.n	8002eb4 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d002      	beq.n	8002eb4 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e084      	b.n	8002fc2 <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8002eb8:	7d7b      	ldrb	r3, [r7, #21]
 8002eba:	b25b      	sxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	db02      	blt.n	8002ec6 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8002ec0:	7d7b      	ldrb	r3, [r7, #21]
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	e079      	b.n	8002fba <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8002ec6:	2307      	movs	r3, #7
 8002ec8:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8002eca:	7d7b      	ldrb	r3, [r7, #21]
 8002ecc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ed0:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8002ed2:	f107 0315 	add.w	r3, r7, #21
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff ff75 	bl	8002dc8 <pb_readbyte>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	f083 0301 	eor.w	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d001      	beq.n	8002eee <pb_decode_varint32_eof+0x72>
                return false;
 8002eea:	2300      	movs	r3, #0
 8002eec:	e069      	b.n	8002fc2 <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	2b1f      	cmp	r3, #31
 8002ef2:	d92f      	bls.n	8002f54 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b3e      	cmp	r3, #62	; 0x3e
 8002ef8:	d801      	bhi.n	8002efe <pb_decode_varint32_eof+0x82>
 8002efa:	23ff      	movs	r3, #255	; 0xff
 8002efc:	e000      	b.n	8002f00 <pb_decode_varint32_eof+0x84>
 8002efe:	2301      	movs	r3, #1
 8002f00:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8002f02:	7d7b      	ldrb	r3, [r7, #21]
 8002f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d006      	beq.n	8002f1a <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8002f0c:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da05      	bge.n	8002f1e <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8002f12:	7d7b      	ldrb	r3, [r7, #21]
 8002f14:	7dfa      	ldrb	r2, [r7, #23]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d101      	bne.n	8002f1e <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <pb_decode_varint32_eof+0xa4>
 8002f1e:	2300      	movs	r3, #0
 8002f20:	75bb      	strb	r3, [r7, #22]
 8002f22:	7dbb      	ldrb	r3, [r7, #22]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	2b3f      	cmp	r3, #63	; 0x3f
 8002f2e:	d805      	bhi.n	8002f3c <pb_decode_varint32_eof+0xc0>
 8002f30:	7dbb      	ldrb	r3, [r7, #22]
 8002f32:	f083 0301 	eor.w	r3, r3, #1
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d037      	beq.n	8002fac <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <pb_decode_varint32_eof+0xce>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	e000      	b.n	8002f4c <pb_decode_varint32_eof+0xd0>
 8002f4a:	4b20      	ldr	r3, [pc, #128]	; (8002fcc <pb_decode_varint32_eof+0x150>)
 8002f4c:	68fa      	ldr	r2, [r7, #12]
 8002f4e:	60d3      	str	r3, [r2, #12]
 8002f50:	2300      	movs	r3, #0
 8002f52:	e036      	b.n	8002fc2 <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	2b1c      	cmp	r3, #28
 8002f58:	d11f      	bne.n	8002f9a <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8002f5a:	7d7b      	ldrb	r3, [r7, #21]
 8002f5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <pb_decode_varint32_eof+0x10a>
 8002f64:	7d7b      	ldrb	r3, [r7, #21]
 8002f66:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8002f6a:	2b78      	cmp	r3, #120	; 0x78
 8002f6c:	d00b      	beq.n	8002f86 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <pb_decode_varint32_eof+0x100>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	e000      	b.n	8002f7e <pb_decode_varint32_eof+0x102>
 8002f7c:	4b13      	ldr	r3, [pc, #76]	; (8002fcc <pb_decode_varint32_eof+0x150>)
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	60d3      	str	r3, [r2, #12]
 8002f82:	2300      	movs	r3, #0
 8002f84:	e01d      	b.n	8002fc2 <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8002f86:	7d7b      	ldrb	r3, [r7, #21]
 8002f88:	f003 020f 	and.w	r2, r3, #15
 8002f8c:	69bb      	ldr	r3, [r7, #24]
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61fb      	str	r3, [r7, #28]
 8002f98:	e008      	b.n	8002fac <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8002f9a:	7d7b      	ldrb	r3, [r7, #21]
 8002f9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	69fa      	ldr	r2, [r7, #28]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	3307      	adds	r3, #7
 8002fb0:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8002fb2:	7d7b      	ldrb	r3, [r7, #21]
 8002fb4:	b25b      	sxtb	r3, r3
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	db8b      	blt.n	8002ed2 <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	69fa      	ldr	r2, [r7, #28]
 8002fbe:	601a      	str	r2, [r3, #0]
   return true;
 8002fc0:	2301      	movs	r3, #1
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	08009804 	.word	0x08009804

08002fd0 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8002fda:	2200      	movs	r2, #0
 8002fdc:	6839      	ldr	r1, [r7, #0]
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff ff4c 	bl	8002e7c <pb_decode_varint32_eof>
 8002fe4:	4603      	mov	r3, r0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
	...

08002ff0 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8002ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff4:	b08a      	sub	sp, #40	; 0x28
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	60f8      	str	r0, [r7, #12]
 8002ffa:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	f04f 0300 	mov.w	r3, #0
 8003008:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 800300c:	f107 0317 	add.w	r3, r7, #23
 8003010:	4619      	mov	r1, r3
 8003012:	68f8      	ldr	r0, [r7, #12]
 8003014:	f7ff fed8 	bl	8002dc8 <pb_readbyte>
 8003018:	4603      	mov	r3, r0
 800301a:	f083 0301 	eor.w	r3, r3, #1
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <pb_decode_varint+0x38>
            return false;
 8003024:	2300      	movs	r3, #0
 8003026:	e041      	b.n	80030ac <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8003028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302a:	2b3e      	cmp	r3, #62	; 0x3e
 800302c:	d910      	bls.n	8003050 <pb_decode_varint+0x60>
 800302e:	7dfb      	ldrb	r3, [r7, #23]
 8003030:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00b      	beq.n	8003050 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <pb_decode_varint+0x56>
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	e000      	b.n	8003048 <pb_decode_varint+0x58>
 8003046:	4b1c      	ldr	r3, [pc, #112]	; (80030b8 <pb_decode_varint+0xc8>)
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	60d3      	str	r3, [r2, #12]
 800304c:	2300      	movs	r3, #0
 800304e:	e02d      	b.n	80030ac <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2200      	movs	r2, #0
 8003056:	603b      	str	r3, [r7, #0]
 8003058:	607a      	str	r2, [r7, #4]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 8003060:	f04f 0900 	mov.w	r9, #0
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	f1a3 0120 	sub.w	r1, r3, #32
 800306a:	f1c3 0220 	rsb	r2, r3, #32
 800306e:	fa09 f503 	lsl.w	r5, r9, r3
 8003072:	fa08 f101 	lsl.w	r1, r8, r1
 8003076:	430d      	orrs	r5, r1
 8003078:	fa28 f202 	lsr.w	r2, r8, r2
 800307c:	4315      	orrs	r5, r2
 800307e:	fa08 f403 	lsl.w	r4, r8, r3
 8003082:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003086:	ea42 0a04 	orr.w	sl, r2, r4
 800308a:	ea43 0b05 	orr.w	fp, r3, r5
 800308e:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	3307      	adds	r3, #7
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 8003098:	7dfb      	ldrb	r3, [r7, #23]
 800309a:	b25b      	sxtb	r3, r3
 800309c:	2b00      	cmp	r3, #0
 800309e:	dbb5      	blt.n	800300c <pb_decode_varint+0x1c>
    
    *dest = result;
 80030a0:	68b9      	ldr	r1, [r7, #8]
 80030a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030a6:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 80030aa:	2301      	movs	r3, #1
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3728      	adds	r7, #40	; 0x28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030b6:	bf00      	nop
 80030b8:	08009804 	.word	0x08009804

080030bc <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 80030c4:	f107 030f 	add.w	r3, r7, #15
 80030c8:	2201      	movs	r2, #1
 80030ca:	4619      	mov	r1, r3
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff fe05 	bl	8002cdc <pb_read>
 80030d2:	4603      	mov	r3, r0
 80030d4:	f083 0301 	eor.w	r3, r3, #1
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <pb_skip_varint+0x26>
            return false;
 80030de:	2300      	movs	r3, #0
 80030e0:	e004      	b.n	80030ec <pb_skip_varint+0x30>
    } while (byte & 0x80);
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
 80030e4:	b25b      	sxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	dbec      	blt.n	80030c4 <pb_skip_varint+0x8>
    return true;
 80030ea:	2301      	movs	r3, #1
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 80030fc:	f107 030c 	add.w	r3, r7, #12
 8003100:	4619      	mov	r1, r3
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff ff64 	bl	8002fd0 <pb_decode_varint32>
 8003108:	4603      	mov	r3, r0
 800310a:	f083 0301 	eor.w	r3, r3, #1
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <pb_skip_string+0x24>
        return false;
 8003114:	2300      	movs	r3, #0
 8003116:	e006      	b.n	8003126 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	461a      	mov	r2, r3
 800311c:	2100      	movs	r1, #0
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7ff fddc 	bl	8002cdc <pb_read>
 8003124:	4603      	mov	r3, r0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3710      	adds	r7, #16
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b086      	sub	sp, #24
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	607a      	str	r2, [r7, #4]
 800313a:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2200      	movs	r2, #0
 8003146:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 800314e:	f107 0314 	add.w	r3, r7, #20
 8003152:	683a      	ldr	r2, [r7, #0]
 8003154:	4619      	mov	r1, r3
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f7ff fe90 	bl	8002e7c <pb_decode_varint32_eof>
 800315c:	4603      	mov	r3, r0
 800315e:	f083 0301 	eor.w	r3, r3, #1
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <pb_decode_tag+0x3e>
    {
        return false;
 8003168:	2300      	movs	r3, #0
 800316a:	e00b      	b.n	8003184 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	08da      	lsrs	r2, r3, #3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	b2da      	uxtb	r2, r3
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	701a      	strb	r2, [r3, #0]
    return true;
 8003182:	2301      	movs	r3, #1
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b082      	sub	sp, #8
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	460b      	mov	r3, r1
 8003196:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	2b05      	cmp	r3, #5
 800319c:	d826      	bhi.n	80031ec <pb_skip_field+0x60>
 800319e:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <pb_skip_field+0x18>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	080031bd 	.word	0x080031bd
 80031a8:	080031c7 	.word	0x080031c7
 80031ac:	080031d5 	.word	0x080031d5
 80031b0:	080031ed 	.word	0x080031ed
 80031b4:	080031ed 	.word	0x080031ed
 80031b8:	080031df 	.word	0x080031df
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f7ff ff7d 	bl	80030bc <pb_skip_varint>
 80031c2:	4603      	mov	r3, r0
 80031c4:	e01d      	b.n	8003202 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 80031c6:	2208      	movs	r2, #8
 80031c8:	2100      	movs	r1, #0
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff fd86 	bl	8002cdc <pb_read>
 80031d0:	4603      	mov	r3, r0
 80031d2:	e016      	b.n	8003202 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f7ff ff8d 	bl	80030f4 <pb_skip_string>
 80031da:	4603      	mov	r3, r0
 80031dc:	e011      	b.n	8003202 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 80031de:	2204      	movs	r2, #4
 80031e0:	2100      	movs	r1, #0
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f7ff fd7a 	bl	8002cdc <pb_read>
 80031e8:	4603      	mov	r3, r0
 80031ea:	e00a      	b.n	8003202 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <pb_skip_field+0x6e>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	e000      	b.n	80031fc <pb_skip_field+0x70>
 80031fa:	4b04      	ldr	r3, [pc, #16]	; (800320c <pb_skip_field+0x80>)
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	60d3      	str	r3, [r2, #12]
 8003200:	2300      	movs	r3, #0
    }
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	08009814 	.word	0x08009814

08003210 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	607a      	str	r2, [r7, #4]
 800321a:	603b      	str	r3, [r7, #0]
 800321c:	460b      	mov	r3, r1
 800321e:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8003226:	7afb      	ldrb	r3, [r7, #11]
 8003228:	2b05      	cmp	r3, #5
 800322a:	d03f      	beq.n	80032ac <read_raw_value+0x9c>
 800322c:	2b05      	cmp	r3, #5
 800322e:	dc47      	bgt.n	80032c0 <read_raw_value+0xb0>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d002      	beq.n	800323a <read_raw_value+0x2a>
 8003234:	2b01      	cmp	r3, #1
 8003236:	d02f      	beq.n	8003298 <read_raw_value+0x88>
 8003238:	e042      	b.n	80032c0 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	1c5a      	adds	r2, r3, #1
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	429a      	cmp	r2, r3
 8003252:	d20b      	bcs.n	800326c <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <read_raw_value+0x52>
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	e000      	b.n	8003264 <read_raw_value+0x54>
 8003262:	4b1f      	ldr	r3, [pc, #124]	; (80032e0 <read_raw_value+0xd0>)
 8003264:	68fa      	ldr	r2, [r7, #12]
 8003266:	60d3      	str	r3, [r2, #12]
 8003268:	2300      	movs	r3, #0
 800326a:	e034      	b.n	80032d6 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 800326c:	2201      	movs	r2, #1
 800326e:	6879      	ldr	r1, [r7, #4]
 8003270:	68f8      	ldr	r0, [r7, #12]
 8003272:	f7ff fd33 	bl	8002cdc <pb_read>
 8003276:	4603      	mov	r3, r0
 8003278:	f083 0301 	eor.w	r3, r3, #1
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <read_raw_value+0x76>
                    return false;
 8003282:	2300      	movs	r3, #0
 8003284:	e027      	b.n	80032d6 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	1c5a      	adds	r2, r3, #1
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	b25b      	sxtb	r3, r3
 8003290:	2b00      	cmp	r3, #0
 8003292:	dbd5      	blt.n	8003240 <read_raw_value+0x30>
            return true;
 8003294:	2301      	movs	r3, #1
 8003296:	e01e      	b.n	80032d6 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2208      	movs	r2, #8
 800329c:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 800329e:	2208      	movs	r2, #8
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f7ff fd1a 	bl	8002cdc <pb_read>
 80032a8:	4603      	mov	r3, r0
 80032aa:	e014      	b.n	80032d6 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	2204      	movs	r2, #4
 80032b0:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 80032b2:	2204      	movs	r2, #4
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	68f8      	ldr	r0, [r7, #12]
 80032b8:	f7ff fd10 	bl	8002cdc <pb_read>
 80032bc:	4603      	mov	r3, r0
 80032be:	e00a      	b.n	80032d6 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <read_raw_value+0xbe>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	e000      	b.n	80032d0 <read_raw_value+0xc0>
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <read_raw_value+0xd4>)
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	60d3      	str	r3, [r2, #12]
 80032d4:	2300      	movs	r3, #0
    }
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	08009804 	.word	0x08009804
 80032e4:	08009814 	.word	0x08009814

080032e8 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80032e8:	b590      	push	{r4, r7, lr}
 80032ea:	b085      	sub	sp, #20
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 80032f2:	f107 030c 	add.w	r3, r7, #12
 80032f6:	4619      	mov	r1, r3
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7ff fe69 	bl	8002fd0 <pb_decode_varint32>
 80032fe:	4603      	mov	r3, r0
 8003300:	f083 0301 	eor.w	r3, r3, #1
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <pb_make_string_substream+0x26>
        return false;
 800330a:	2300      	movs	r3, #0
 800330c:	e020      	b.n	8003350 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4614      	mov	r4, r2
 8003314:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003316:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	429a      	cmp	r2, r3
 8003322:	d20b      	bcs.n	800333c <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d002      	beq.n	8003332 <pb_make_string_substream+0x4a>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	e000      	b.n	8003334 <pb_make_string_substream+0x4c>
 8003332:	4b09      	ldr	r3, [pc, #36]	; (8003358 <pb_make_string_substream+0x70>)
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	60d3      	str	r3, [r2, #12]
 8003338:	2300      	movs	r3, #0
 800333a:	e009      	b.n	8003350 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	689a      	ldr	r2, [r3, #8]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	1ad2      	subs	r2, r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	609a      	str	r2, [r3, #8]
    return true;
 800334e:	2301      	movs	r3, #1
}
 8003350:	4618      	mov	r0, r3
 8003352:	3714      	adds	r7, #20
 8003354:	46bd      	mov	sp, r7
 8003356:	bd90      	pop	{r4, r7, pc}
 8003358:	08009828 	.word	0x08009828

0800335c <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00e      	beq.n	800338c <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	461a      	mov	r2, r3
 8003374:	2100      	movs	r1, #0
 8003376:	6838      	ldr	r0, [r7, #0]
 8003378:	f7ff fcb0 	bl	8002cdc <pb_read>
 800337c:	4603      	mov	r3, r0
 800337e:	f083 0301 	eor.w	r3, r3, #1
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	d001      	beq.n	800338c <pb_close_string_substream+0x30>
            return false;
 8003388:	2300      	movs	r3, #0
 800338a:	e008      	b.n	800339e <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	60da      	str	r2, [r3, #12]
#endif
    return true;
 800339c:	2301      	movs	r3, #1
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
	...

080033a8 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	460b      	mov	r3, r1
 80033b2:	607a      	str	r2, [r7, #4]
 80033b4:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	7d9b      	ldrb	r3, [r3, #22]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	2b0b      	cmp	r3, #11
 80033c0:	f200 80d4 	bhi.w	800356c <decode_basic_field+0x1c4>
 80033c4:	a201      	add	r2, pc, #4	; (adr r2, 80033cc <decode_basic_field+0x24>)
 80033c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ca:	bf00      	nop
 80033cc:	080033fd 	.word	0x080033fd
 80033d0:	0800342d 	.word	0x0800342d
 80033d4:	0800342d 	.word	0x0800342d
 80033d8:	0800342d 	.word	0x0800342d
 80033dc:	0800345d 	.word	0x0800345d
 80033e0:	08003491 	.word	0x08003491
 80033e4:	080034c5 	.word	0x080034c5
 80033e8:	080034ef 	.word	0x080034ef
 80033ec:	08003519 	.word	0x08003519
 80033f0:	08003519 	.word	0x08003519
 80033f4:	0800356d 	.word	0x0800356d
 80033f8:	08003543 	.word	0x08003543
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80033fc:	7afb      	ldrb	r3, [r7, #11]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d00e      	beq.n	8003420 <decode_basic_field+0x78>
 8003402:	7afb      	ldrb	r3, [r7, #11]
 8003404:	2bff      	cmp	r3, #255	; 0xff
 8003406:	d00b      	beq.n	8003420 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d002      	beq.n	8003416 <decode_basic_field+0x6e>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	e000      	b.n	8003418 <decode_basic_field+0x70>
 8003416:	4b5d      	ldr	r3, [pc, #372]	; (800358c <decode_basic_field+0x1e4>)
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	60d3      	str	r3, [r2, #12]
 800341c:	2300      	movs	r3, #0
 800341e:	e0b0      	b.n	8003582 <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8003420:	6879      	ldr	r1, [r7, #4]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fef6 	bl	8004214 <pb_dec_bool>
 8003428:	4603      	mov	r3, r0
 800342a:	e0aa      	b.n	8003582 <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 800342c:	7afb      	ldrb	r3, [r7, #11]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00e      	beq.n	8003450 <decode_basic_field+0xa8>
 8003432:	7afb      	ldrb	r3, [r7, #11]
 8003434:	2bff      	cmp	r3, #255	; 0xff
 8003436:	d00b      	beq.n	8003450 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	68db      	ldr	r3, [r3, #12]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <decode_basic_field+0x9e>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	e000      	b.n	8003448 <decode_basic_field+0xa0>
 8003446:	4b51      	ldr	r3, [pc, #324]	; (800358c <decode_basic_field+0x1e4>)
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	60d3      	str	r3, [r2, #12]
 800344c:	2300      	movs	r3, #0
 800344e:	e098      	b.n	8003582 <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	68f8      	ldr	r0, [r7, #12]
 8003454:	f000 feee 	bl	8004234 <pb_dec_varint>
 8003458:	4603      	mov	r3, r0
 800345a:	e092      	b.n	8003582 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 800345c:	7afb      	ldrb	r3, [r7, #11]
 800345e:	2b05      	cmp	r3, #5
 8003460:	d00e      	beq.n	8003480 <decode_basic_field+0xd8>
 8003462:	7afb      	ldrb	r3, [r7, #11]
 8003464:	2bff      	cmp	r3, #255	; 0xff
 8003466:	d00b      	beq.n	8003480 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <decode_basic_field+0xce>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	e000      	b.n	8003478 <decode_basic_field+0xd0>
 8003476:	4b45      	ldr	r3, [pc, #276]	; (800358c <decode_basic_field+0x1e4>)
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	60d3      	str	r3, [r2, #12]
 800347c:	2300      	movs	r3, #0
 800347e:	e080      	b.n	8003582 <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	4619      	mov	r1, r3
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fe8a 	bl	80041a0 <pb_decode_fixed32>
 800348c:	4603      	mov	r3, r0
 800348e:	e078      	b.n	8003582 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8003490:	7afb      	ldrb	r3, [r7, #11]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d00e      	beq.n	80034b4 <decode_basic_field+0x10c>
 8003496:	7afb      	ldrb	r3, [r7, #11]
 8003498:	2bff      	cmp	r3, #255	; 0xff
 800349a:	d00b      	beq.n	80034b4 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <decode_basic_field+0x102>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	e000      	b.n	80034ac <decode_basic_field+0x104>
 80034aa:	4b38      	ldr	r3, [pc, #224]	; (800358c <decode_basic_field+0x1e4>)
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	60d3      	str	r3, [r2, #12]
 80034b0:	2300      	movs	r3, #0
 80034b2:	e066      	b.n	8003582 <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	4619      	mov	r1, r3
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fe8c 	bl	80041d8 <pb_decode_fixed64>
 80034c0:	4603      	mov	r3, r0
 80034c2:	e05e      	b.n	8003582 <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 80034c4:	7afb      	ldrb	r3, [r7, #11]
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d00b      	beq.n	80034e2 <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d002      	beq.n	80034d8 <decode_basic_field+0x130>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	e000      	b.n	80034da <decode_basic_field+0x132>
 80034d8:	4b2c      	ldr	r3, [pc, #176]	; (800358c <decode_basic_field+0x1e4>)
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	60d3      	str	r3, [r2, #12]
 80034de:	2300      	movs	r3, #0
 80034e0:	e04f      	b.n	8003582 <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 ffd1 	bl	800448c <pb_dec_bytes>
 80034ea:	4603      	mov	r3, r0
 80034ec:	e049      	b.n	8003582 <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 80034ee:	7afb      	ldrb	r3, [r7, #11]
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d00b      	beq.n	800350c <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <decode_basic_field+0x15a>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	e000      	b.n	8003504 <decode_basic_field+0x15c>
 8003502:	4b22      	ldr	r3, [pc, #136]	; (800358c <decode_basic_field+0x1e4>)
 8003504:	68fa      	ldr	r2, [r7, #12]
 8003506:	60d3      	str	r3, [r2, #12]
 8003508:	2300      	movs	r3, #0
 800350a:	e03a      	b.n	8003582 <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f001 f830 	bl	8004574 <pb_dec_string>
 8003514:	4603      	mov	r3, r0
 8003516:	e034      	b.n	8003582 <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8003518:	7afb      	ldrb	r3, [r7, #11]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d00b      	beq.n	8003536 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <decode_basic_field+0x184>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	e000      	b.n	800352e <decode_basic_field+0x186>
 800352c:	4b17      	ldr	r3, [pc, #92]	; (800358c <decode_basic_field+0x1e4>)
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	60d3      	str	r3, [r2, #12]
 8003532:	2300      	movs	r3, #0
 8003534:	e025      	b.n	8003582 <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f001 f897 	bl	800466c <pb_dec_submessage>
 800353e:	4603      	mov	r3, r0
 8003540:	e01f      	b.n	8003582 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8003542:	7afb      	ldrb	r3, [r7, #11]
 8003544:	2b02      	cmp	r3, #2
 8003546:	d00b      	beq.n	8003560 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <decode_basic_field+0x1ae>
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	e000      	b.n	8003558 <decode_basic_field+0x1b0>
 8003556:	4b0d      	ldr	r3, [pc, #52]	; (800358c <decode_basic_field+0x1e4>)
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	60d3      	str	r3, [r2, #12]
 800355c:	2300      	movs	r3, #0
 800355e:	e010      	b.n	8003582 <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f001 f90c 	bl	8004780 <pb_dec_fixed_length_bytes>
 8003568:	4603      	mov	r3, r0
 800356a:	e00a      	b.n	8003582 <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <decode_basic_field+0x1d2>
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	e000      	b.n	800357c <decode_basic_field+0x1d4>
 800357a:	4b05      	ldr	r3, [pc, #20]	; (8003590 <decode_basic_field+0x1e8>)
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	60d3      	str	r3, [r2, #12]
 8003580:	2300      	movs	r3, #0
    }
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	08009840 	.word	0x08009840
 8003590:	08009850 	.word	0x08009850

08003594 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b096      	sub	sp, #88	; 0x58
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	460b      	mov	r3, r1
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	7d9b      	ldrb	r3, [r3, #22]
 80035a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035aa:	2b30      	cmp	r3, #48	; 0x30
 80035ac:	f000 80c2 	beq.w	8003734 <decode_static_field+0x1a0>
 80035b0:	2b30      	cmp	r3, #48	; 0x30
 80035b2:	f200 811a 	bhi.w	80037ea <decode_static_field+0x256>
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d01f      	beq.n	80035fa <decode_static_field+0x66>
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	f200 8115 	bhi.w	80037ea <decode_static_field+0x256>
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <decode_static_field+0x36>
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d008      	beq.n	80035da <decode_static_field+0x46>
 80035c8:	e10f      	b.n	80037ea <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 80035ca:	7afb      	ldrb	r3, [r7, #11]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4619      	mov	r1, r3
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff fee9 	bl	80033a8 <decode_basic_field>
 80035d6:	4603      	mov	r3, r0
 80035d8:	e112      	b.n	8003800 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	2201      	movs	r2, #1
 80035e8:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 80035ea:	7afb      	ldrb	r3, [r7, #11]
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	4619      	mov	r1, r3
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7ff fed9 	bl	80033a8 <decode_basic_field>
 80035f6:	4603      	mov	r3, r0
 80035f8:	e102      	b.n	8003800 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 80035fa:	7afb      	ldrb	r3, [r7, #11]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d16c      	bne.n	80036da <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	7d9b      	ldrb	r3, [r3, #22]
 8003604:	f003 030f 	and.w	r3, r3, #15
 8003608:	2b05      	cmp	r3, #5
 800360a:	d866      	bhi.n	80036da <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 800360c:	2301      	movs	r3, #1
 800360e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a1b      	ldr	r3, [r3, #32]
 8003616:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	687a      	ldr	r2, [r7, #4]
 800361e:	8a52      	ldrh	r2, [r2, #18]
 8003620:	4611      	mov	r1, r2
 8003622:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003624:	8812      	ldrh	r2, [r2, #0]
 8003626:	fb01 f202 	mul.w	r2, r1, r2
 800362a:	441a      	add	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8003630:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003634:	4619      	mov	r1, r3
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f7ff fe56 	bl	80032e8 <pb_make_string_substream>
 800363c:	4603      	mov	r3, r0
 800363e:	f083 0301 	eor.w	r3, r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d01f      	beq.n	8003688 <decode_static_field+0xf4>
                    return false;
 8003648:	2300      	movs	r3, #0
 800364a:	e0d9      	b.n	8003800 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 800364c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	21ff      	movs	r1, #255	; 0xff
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff fea7 	bl	80033a8 <decode_basic_field>
 800365a:	4603      	mov	r3, r0
 800365c:	f083 0301 	eor.w	r3, r3, #1
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d003      	beq.n	800366e <decode_static_field+0xda>
                    {
                        status = false;
 8003666:	2300      	movs	r3, #0
 8003668:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 800366c:	e015      	b.n	800369a <decode_static_field+0x106>
                    }
                    (*size)++;
 800366e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	3301      	adds	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003678:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69db      	ldr	r3, [r3, #28]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	8a52      	ldrh	r2, [r2, #18]
 8003682:	441a      	add	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8003688:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <decode_static_field+0x106>
 800368e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003690:	881a      	ldrh	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	8a9b      	ldrh	r3, [r3, #20]
 8003696:	429a      	cmp	r2, r3
 8003698:	d3d8      	bcc.n	800364c <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 800369a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00b      	beq.n	80036b8 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d002      	beq.n	80036ae <decode_static_field+0x11a>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	e000      	b.n	80036b0 <decode_static_field+0x11c>
 80036ae:	4b56      	ldr	r3, [pc, #344]	; (8003808 <decode_static_field+0x274>)
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	60d3      	str	r3, [r2, #12]
 80036b4:	2300      	movs	r3, #0
 80036b6:	e0a3      	b.n	8003800 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 80036b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80036bc:	4619      	mov	r1, r3
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f7ff fe4c 	bl	800335c <pb_close_string_substream>
 80036c4:	4603      	mov	r3, r0
 80036c6:	f083 0301 	eor.w	r3, r3, #1
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <decode_static_field+0x140>
                    return false;
 80036d0:	2300      	movs	r3, #0
 80036d2:	e095      	b.n	8003800 <decode_static_field+0x26c>

                return status;
 80036d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80036d8:	e092      	b.n	8003800 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
 80036de:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	8a52      	ldrh	r2, [r2, #18]
 80036e8:	4611      	mov	r1, r2
 80036ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80036ec:	8812      	ldrh	r2, [r2, #0]
 80036ee:	fb01 f202 	mul.w	r2, r1, r2
 80036f2:	441a      	add	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 80036f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	1c5a      	adds	r2, r3, #1
 80036fe:	b291      	uxth	r1, r2
 8003700:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003702:	8011      	strh	r1, [r2, #0]
 8003704:	687a      	ldr	r2, [r7, #4]
 8003706:	8a92      	ldrh	r2, [r2, #20]
 8003708:	4293      	cmp	r3, r2
 800370a:	d30b      	bcc.n	8003724 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <decode_static_field+0x186>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	e000      	b.n	800371c <decode_static_field+0x188>
 800371a:	4b3b      	ldr	r3, [pc, #236]	; (8003808 <decode_static_field+0x274>)
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	60d3      	str	r3, [r2, #12]
 8003720:	2300      	movs	r3, #0
 8003722:	e06d      	b.n	8003800 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8003724:	7afb      	ldrb	r3, [r7, #11]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	4619      	mov	r1, r3
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f7ff fe3c 	bl	80033a8 <decode_basic_field>
 8003730:	4603      	mov	r3, r0
 8003732:	e065      	b.n	8003800 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	7d9b      	ldrb	r3, [r3, #22]
 8003738:	f003 030f 	and.w	r3, r3, #15
 800373c:	2b08      	cmp	r3, #8
 800373e:	d005      	beq.n	800374c <decode_static_field+0x1b8>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	7d9b      	ldrb	r3, [r3, #22]
 8003744:	f003 030f 	and.w	r3, r3, #15
 8003748:	2b09      	cmp	r3, #9
 800374a:	d141      	bne.n	80037d0 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a1b      	ldr	r3, [r3, #32]
 8003750:	881a      	ldrh	r2, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003756:	429a      	cmp	r2, r3
 8003758:	d03a      	beq.n	80037d0 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69d8      	ldr	r0, [r3, #28]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	8a5b      	ldrh	r3, [r3, #18]
 8003762:	461a      	mov	r2, r3
 8003764:	2100      	movs	r1, #0
 8003766:	f005 fad1 	bl	8008d0c <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d10a      	bne.n	800378a <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003778:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 800377a:	2b00      	cmp	r3, #0
 800377c:	d105      	bne.n	800378a <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8003786:	2b00      	cmp	r3, #0
 8003788:	d022      	beq.n	80037d0 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	f107 0314 	add.w	r3, r7, #20
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff f99d 	bl	8002ad6 <pb_field_iter_begin>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d016      	beq.n	80037d0 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 80037a2:	f107 0314 	add.w	r3, r7, #20
 80037a6:	4618      	mov	r0, r3
 80037a8:	f000 fa4d 	bl	8003c46 <pb_message_set_to_defaults>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f083 0301 	eor.w	r3, r3, #1
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00b      	beq.n	80037d0 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <decode_static_field+0x232>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	e000      	b.n	80037c8 <decode_static_field+0x234>
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <decode_static_field+0x278>)
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	60d3      	str	r3, [r2, #12]
 80037cc:	2300      	movs	r3, #0
 80037ce:	e017      	b.n	8003800 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a1b      	ldr	r3, [r3, #32]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	8a12      	ldrh	r2, [r2, #16]
 80037d8:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 80037da:	7afb      	ldrb	r3, [r7, #11]
 80037dc:	687a      	ldr	r2, [r7, #4]
 80037de:	4619      	mov	r1, r3
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f7ff fde1 	bl	80033a8 <decode_basic_field>
 80037e6:	4603      	mov	r3, r0
 80037e8:	e00a      	b.n	8003800 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <decode_static_field+0x264>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	e000      	b.n	80037fa <decode_static_field+0x266>
 80037f8:	4b05      	ldr	r3, [pc, #20]	; (8003810 <decode_static_field+0x27c>)
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	60d3      	str	r3, [r2, #12]
 80037fe:	2300      	movs	r3, #0
    }
}
 8003800:	4618      	mov	r0, r3
 8003802:	3758      	adds	r7, #88	; 0x58
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	08009864 	.word	0x08009864
 800380c:	08009874 	.word	0x08009874
 8003810:	08009850 	.word	0x08009850

08003814 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	460b      	mov	r3, r1
 800381e:	607a      	str	r2, [r7, #4]
 8003820:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <decode_pointer_field+0x1c>
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	e000      	b.n	8003832 <decode_pointer_field+0x1e>
 8003830:	4b04      	ldr	r3, [pc, #16]	; (8003844 <decode_pointer_field+0x30>)
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	60d3      	str	r3, [r2, #12]
 8003836:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr
 8003844:	0800988c 	.word	0x0800988c

08003848 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003848:	b590      	push	{r4, r7, lr}
 800384a:	b097      	sub	sp, #92	; 0x5c
 800384c:	af00      	add	r7, sp, #0
 800384e:	61f8      	str	r0, [r7, #28]
 8003850:	460b      	mov	r3, r1
 8003852:	617a      	str	r2, [r7, #20]
 8003854:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d106      	bne.n	800386e <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8003860:	7efb      	ldrb	r3, [r7, #27]
 8003862:	4619      	mov	r1, r3
 8003864:	69f8      	ldr	r0, [r7, #28]
 8003866:	f7ff fc91 	bl	800318c <pb_skip_field>
 800386a:	4603      	mov	r3, r0
 800386c:	e070      	b.n	8003950 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 800386e:	7efb      	ldrb	r3, [r7, #27]
 8003870:	2b02      	cmp	r3, #2
 8003872:	d145      	bne.n	8003900 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8003874:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003878:	4619      	mov	r1, r3
 800387a:	69f8      	ldr	r0, [r7, #28]
 800387c:	f7ff fd34 	bl	80032e8 <pb_make_string_substream>
 8003880:	4603      	mov	r3, r0
 8003882:	f083 0301 	eor.w	r3, r3, #1
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <decode_callback_field+0x48>
            return false;
 800388c:	2300      	movs	r3, #0
 800388e:	e05f      	b.n	8003950 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8003890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003892:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	2100      	movs	r1, #0
 80038a2:	4798      	blx	r3
 80038a4:	4603      	mov	r3, r0
 80038a6:	f083 0301 	eor.w	r3, r3, #1
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d010      	beq.n	80038d2 <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <decode_callback_field+0x76>
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	e005      	b.n	80038ca <decode_callback_field+0x82>
 80038be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <decode_callback_field+0x80>
 80038c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038c6:	e000      	b.n	80038ca <decode_callback_field+0x82>
 80038c8:	4b23      	ldr	r3, [pc, #140]	; (8003958 <decode_callback_field+0x110>)
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	60d3      	str	r3, [r2, #12]
                return false;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e03e      	b.n	8003950 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 80038d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <decode_callback_field+0x98>
 80038d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038da:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038dc:	429a      	cmp	r2, r3
 80038de:	d8d7      	bhi.n	8003890 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 80038e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80038e4:	4619      	mov	r1, r3
 80038e6:	69f8      	ldr	r0, [r7, #28]
 80038e8:	f7ff fd38 	bl	800335c <pb_close_string_substream>
 80038ec:	4603      	mov	r3, r0
 80038ee:	f083 0301 	eor.w	r3, r3, #1
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d001      	beq.n	80038fc <decode_callback_field+0xb4>
            return false;
 80038f8:	2300      	movs	r3, #0
 80038fa:	e029      	b.n	8003950 <decode_callback_field+0x108>

        return true;
 80038fc:	2301      	movs	r3, #1
 80038fe:	e027      	b.n	8003950 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8003900:	230a      	movs	r3, #10
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8003904:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003908:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800390c:	7ef9      	ldrb	r1, [r7, #27]
 800390e:	69f8      	ldr	r0, [r7, #28]
 8003910:	f7ff fc7e 	bl	8003210 <read_raw_value>
 8003914:	4603      	mov	r3, r0
 8003916:	f083 0301 	eor.w	r3, r3, #1
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <decode_callback_field+0xdc>
            return false;
 8003920:	2300      	movs	r3, #0
 8003922:	e015      	b.n	8003950 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8003924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003926:	463b      	mov	r3, r7
 8003928:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fa87 	bl	8002e40 <pb_istream_from_buffer>
 8003932:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8003936:	463b      	mov	r3, r7
 8003938:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800393a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	2100      	movs	r1, #0
 800394c:	4798      	blx	r3
 800394e:	4603      	mov	r3, r0
    }
}
 8003950:	4618      	mov	r0, r3
 8003952:	375c      	adds	r7, #92	; 0x5c
 8003954:	46bd      	mov	sp, r7
 8003956:	bd90      	pop	{r4, r7, pc}
 8003958:	080098a0 	.word	0x080098a0

0800395c <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	460b      	mov	r3, r1
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	7d9b      	ldrb	r3, [r3, #22]
 800396e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003972:	2b80      	cmp	r3, #128	; 0x80
 8003974:	d00e      	beq.n	8003994 <decode_field+0x38>
 8003976:	2b80      	cmp	r3, #128	; 0x80
 8003978:	d81c      	bhi.n	80039b4 <decode_field+0x58>
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <decode_field+0x28>
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	d010      	beq.n	80039a4 <decode_field+0x48>
 8003982:	e017      	b.n	80039b4 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8003984:	7afb      	ldrb	r3, [r7, #11]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	4619      	mov	r1, r3
 800398a:	68f8      	ldr	r0, [r7, #12]
 800398c:	f7ff fe02 	bl	8003594 <decode_static_field>
 8003990:	4603      	mov	r3, r0
 8003992:	e01a      	b.n	80039ca <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8003994:	7afb      	ldrb	r3, [r7, #11]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	4619      	mov	r1, r3
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f7ff ff3a 	bl	8003814 <decode_pointer_field>
 80039a0:	4603      	mov	r3, r0
 80039a2:	e012      	b.n	80039ca <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 80039a4:	7afb      	ldrb	r3, [r7, #11]
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	4619      	mov	r1, r3
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f7ff ff4c 	bl	8003848 <decode_callback_field>
 80039b0:	4603      	mov	r3, r0
 80039b2:	e00a      	b.n	80039ca <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <decode_field+0x66>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	e000      	b.n	80039c4 <decode_field+0x68>
 80039c2:	4b04      	ldr	r3, [pc, #16]	; (80039d4 <decode_field+0x78>)
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	60d3      	str	r3, [r2, #12]
 80039c8:	2300      	movs	r3, #0
    }
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	08009850 	.word	0x08009850

080039d8 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08e      	sub	sp, #56	; 0x38
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 80039e6:	f107 0310 	add.w	r3, r7, #16
 80039ea:	68b9      	ldr	r1, [r7, #8]
 80039ec:	4618      	mov	r0, r3
 80039ee:	f7ff f88b 	bl	8002b08 <pb_field_iter_begin_extension>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f083 0301 	eor.w	r3, r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00b      	beq.n	8003a16 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <default_extension_decoder+0x34>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	e000      	b.n	8003a0e <default_extension_decoder+0x36>
 8003a0c:	4b0e      	ldr	r3, [pc, #56]	; (8003a48 <default_extension_decoder+0x70>)
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	60d3      	str	r3, [r2, #12]
 8003a12:	2300      	movs	r3, #0
 8003a14:	e014      	b.n	8003a40 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8003a16:	8c3b      	ldrh	r3, [r7, #32]
 8003a18:	461a      	mov	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d102      	bne.n	8003a26 <default_extension_decoder+0x4e>
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <default_extension_decoder+0x52>
        return true;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00a      	b.n	8003a40 <default_extension_decoder+0x68>

    extension->found = true;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8003a30:	f107 0210 	add.w	r2, r7, #16
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	4619      	mov	r1, r3
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f7ff ff8f 	bl	800395c <decode_field>
 8003a3e:	4603      	mov	r3, r0
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3738      	adds	r7, #56	; 0x38
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	080098b0 	.word	0x080098b0

08003a4c <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8003a4c:	b590      	push	{r4, r7, lr}
 8003a4e:	b087      	sub	sp, #28
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	603b      	str	r3, [r7, #0]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8003a62:	e022      	b.n	8003aaa <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d00a      	beq.n	8003a84 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681c      	ldr	r4, [r3, #0]
 8003a74:	79fb      	ldrb	r3, [r7, #7]
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	6839      	ldr	r1, [r7, #0]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	47a0      	blx	r4
 8003a7e:	4603      	mov	r3, r0
 8003a80:	75fb      	strb	r3, [r7, #23]
 8003a82:	e007      	b.n	8003a94 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8003a84:	79fb      	ldrb	r3, [r7, #7]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	6839      	ldr	r1, [r7, #0]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7ff ffa4 	bl	80039d8 <default_extension_decoder>
 8003a90:	4603      	mov	r3, r0
 8003a92:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8003a94:	7dfb      	ldrb	r3, [r7, #23]
 8003a96:	f083 0301 	eor.w	r3, r3, #1
 8003a9a:	b2db      	uxtb	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <decode_extension+0x58>
            return false;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	e00b      	b.n	8003abc <decode_extension+0x70>
        
        extension = extension->next;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d004      	beq.n	8003aba <decode_extension+0x6e>
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d0d4      	beq.n	8003a64 <decode_extension+0x18>
    }
    
    return true;
 8003aba:	2301      	movs	r3, #1
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd90      	pop	{r4, r7, pc}

08003ac4 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b08e      	sub	sp, #56	; 0x38
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	7d9b      	ldrb	r3, [r3, #22]
 8003ad0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8003ad4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	2b0a      	cmp	r3, #10
 8003ade:	d124      	bne.n	8003b2a <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	69db      	ldr	r3, [r3, #28]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 8003ae8:	e01b      	b.n	8003b22 <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 8003aea:	f107 0308 	add.w	r3, r7, #8
 8003aee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7ff f809 	bl	8002b08 <pb_field_iter_begin_extension>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00f      	beq.n	8003b1c <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 8003afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afe:	2200      	movs	r2, #0
 8003b00:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 8003b02:	f107 0308 	add.w	r3, r7, #8
 8003b06:	4618      	mov	r0, r3
 8003b08:	f000 f89d 	bl	8003c46 <pb_message_set_to_defaults>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	f083 0301 	eor.w	r3, r3, #1
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <pb_field_set_to_default+0x58>
                    return false;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	e090      	b.n	8003c3e <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 8003b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 8003b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1e0      	bne.n	8003aea <pb_field_set_to_default+0x26>
 8003b28:	e088      	b.n	8003c3c <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8003b2a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003b2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d166      	bne.n	8003c04 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 8003b36:	2301      	movs	r3, #1
 8003b38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8003b3c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003b40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b44:	2b10      	cmp	r3, #16
 8003b46:	d108      	bne.n	8003b5a <pb_field_set_to_default+0x96>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d004      	beq.n	8003b5a <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
 8003b58:	e012      	b.n	8003b80 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8003b5a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003b5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d005      	beq.n	8003b72 <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8003b66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003b6a:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8003b6e:	2b30      	cmp	r3, #48	; 0x30
 8003b70:	d106      	bne.n	8003b80 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a1b      	ldr	r3, [r3, #32]
 8003b76:	2200      	movs	r2, #0
 8003b78:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 8003b80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d059      	beq.n	8003c3c <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	7d9b      	ldrb	r3, [r3, #22]
 8003b8c:	f003 030f 	and.w	r3, r3, #15
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	d005      	beq.n	8003ba0 <pb_field_set_to_default+0xdc>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7d9b      	ldrb	r3, [r3, #22]
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	2b09      	cmp	r3, #9
 8003b9e:	d128      	bne.n	8003bf2 <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d10a      	bne.n	8003bc0 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d105      	bne.n	8003bc0 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d018      	beq.n	8003bf2 <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	f107 0308 	add.w	r3, r7, #8
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fe ff82 	bl	8002ad6 <pb_field_iter_begin>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d030      	beq.n	8003c3a <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8003bd8:	f107 0308 	add.w	r3, r7, #8
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 f832 	bl	8003c46 <pb_message_set_to_defaults>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f083 0301 	eor.w	r3, r3, #1
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d025      	beq.n	8003c3a <pb_field_set_to_default+0x176>
                        return false;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	e025      	b.n	8003c3e <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69d8      	ldr	r0, [r3, #28]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	8a5b      	ldrh	r3, [r3, #18]
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	f005 f885 	bl	8008d0c <memset>
 8003c02:	e01b      	b.n	8003c3c <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8003c04:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003c08:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c0c:	2b80      	cmp	r3, #128	; 0x80
 8003c0e:	d115      	bne.n	8003c3c <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8003c18:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003c1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d005      	beq.n	8003c30 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8003c24:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003c28:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8003c2c:	2b30      	cmp	r3, #48	; 0x30
 8003c2e:	d105      	bne.n	8003c3c <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	2200      	movs	r2, #0
 8003c36:	801a      	strh	r2, [r3, #0]
 8003c38:	e000      	b.n	8003c3c <pb_field_set_to_default+0x178>
            {
 8003c3a:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 8003c3c:	2301      	movs	r3, #1
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3738      	adds	r7, #56	; 0x38
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 8003c46:	b590      	push	{r4, r7, lr}
 8003c48:	b08d      	sub	sp, #52	; 0x34
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 8003c4e:	f107 0320 	add.w	r3, r7, #32
 8003c52:	2200      	movs	r2, #0
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	605a      	str	r2, [r3, #4]
 8003c58:	609a      	str	r2, [r3, #8]
 8003c5a:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8003c60:	2300      	movs	r3, #0
 8003c62:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d020      	beq.n	8003cb0 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6899      	ldr	r1, [r3, #8]
 8003c74:	463b      	mov	r3, r7
 8003c76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7ff f8e0 	bl	8002e40 <pb_istream_from_buffer>
 8003c80:	f107 0420 	add.w	r4, r7, #32
 8003c84:	463b      	mov	r3, r7
 8003c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003c88:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8003c8c:	f107 031a 	add.w	r3, r7, #26
 8003c90:	f107 021c 	add.w	r2, r7, #28
 8003c94:	f107 011b 	add.w	r1, r7, #27
 8003c98:	f107 0020 	add.w	r0, r7, #32
 8003c9c:	f7ff fa47 	bl	800312e <pb_decode_tag>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	f083 0301 	eor.w	r3, r3, #1
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <pb_message_set_to_defaults+0x6a>
            return false;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e043      	b.n	8003d38 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8003cb0:	6978      	ldr	r0, [r7, #20]
 8003cb2:	f7ff ff07 	bl	8003ac4 <pb_field_set_to_default>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f083 0301 	eor.w	r3, r3, #1
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <pb_message_set_to_defaults+0x80>
            return false;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e038      	b.n	8003d38 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d02e      	beq.n	8003d2a <pb_message_set_to_defaults+0xe4>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	8a1b      	ldrh	r3, [r3, #16]
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d128      	bne.n	8003d2a <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8003cd8:	7ef9      	ldrb	r1, [r7, #27]
 8003cda:	f107 0320 	add.w	r3, r7, #32
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fe3b 	bl	800395c <decode_field>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f083 0301 	eor.w	r3, r3, #1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d001      	beq.n	8003cf6 <pb_message_set_to_defaults+0xb0>
                return false;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	e020      	b.n	8003d38 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8003cf6:	f107 031a 	add.w	r3, r7, #26
 8003cfa:	f107 021c 	add.w	r2, r7, #28
 8003cfe:	f107 011b 	add.w	r1, r7, #27
 8003d02:	f107 0020 	add.w	r0, r7, #32
 8003d06:	f7ff fa12 	bl	800312e <pb_decode_tag>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f083 0301 	eor.w	r3, r3, #1
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <pb_message_set_to_defaults+0xd4>
                return false;
 8003d16:	2300      	movs	r3, #0
 8003d18:	e00e      	b.n	8003d38 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d003      	beq.n	8003d2a <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7fe ff1c 	bl	8002b68 <pb_field_iter_next>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d1bc      	bne.n	8003cb0 <pb_message_set_to_defaults+0x6a>

    return true;
 8003d36:	2301      	movs	r3, #1
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3734      	adds	r7, #52	; 0x34
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd90      	pop	{r4, r7, pc}

08003d40 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b09a      	sub	sp, #104	; 0x68
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 8003d52:	2300      	movs	r3, #0
 8003d54:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8003d56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d5a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d6e:	2300      	movs	r3, #0
 8003d70:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8003d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d76:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8003d78:	f107 0318 	add.w	r3, r7, #24
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	68b9      	ldr	r1, [r7, #8]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7fe fea8 	bl	8002ad6 <pb_field_iter_begin>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8102 	beq.w	8003f92 <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	f003 0301 	and.w	r3, r3, #1
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f040 80fc 	bne.w	8003f92 <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8003d9a:	f107 0318 	add.w	r3, r7, #24
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7ff ff51 	bl	8003c46 <pb_message_set_to_defaults>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f083 0301 	eor.w	r3, r3, #1
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80f0 	beq.w	8003f92 <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d002      	beq.n	8003dc0 <pb_decode_inner+0x80>
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	e000      	b.n	8003dc2 <pb_decode_inner+0x82>
 8003dc0:	4b99      	ldr	r3, [pc, #612]	; (8004028 <pb_decode_inner+0x2e8>)
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	60d3      	str	r3, [r2, #12]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	e16d      	b.n	80040a6 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8003dca:	f107 0312 	add.w	r3, r7, #18
 8003dce:	f107 0214 	add.w	r2, r7, #20
 8003dd2:	f107 0113 	add.w	r1, r7, #19
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f7ff f9a9 	bl	800312e <pb_decode_tag>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	f083 0301 	eor.w	r3, r3, #1
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d005      	beq.n	8003df4 <pb_decode_inner+0xb4>
        {
            if (eof)
 8003de8:	7cbb      	ldrb	r3, [r7, #18]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f040 80d7 	bne.w	8003f9e <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8003df0:	2300      	movs	r3, #0
 8003df2:	e158      	b.n	80040a6 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8003df4:	697b      	ldr	r3, [r7, #20]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d111      	bne.n	8003e1e <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	f003 0304 	and.w	r3, r3, #4
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	f040 80ce 	bne.w	8003fa2 <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <pb_decode_inner+0xd4>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	e000      	b.n	8003e16 <pb_decode_inner+0xd6>
 8003e14:	4b85      	ldr	r3, [pc, #532]	; (800402c <pb_decode_inner+0x2ec>)
 8003e16:	68fa      	ldr	r2, [r7, #12]
 8003e18:	60d3      	str	r3, [r2, #12]
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	e143      	b.n	80040a6 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	f107 0318 	add.w	r3, r7, #24
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe feb3 	bl	8002b92 <pb_field_iter_find>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	f083 0301 	eor.w	r3, r3, #1
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d105      	bne.n	8003e44 <pb_decode_inner+0x104>
 8003e38:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	2b0a      	cmp	r3, #10
 8003e42:	d13c      	bne.n	8003ebe <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8003e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d112      	bne.n	8003e70 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8003e4a:	f107 0318 	add.w	r3, r7, #24
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f7fe fef5 	bl	8002c3e <pb_field_iter_find_extension>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d004      	beq.n	8003e64 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8003e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 8003e60:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003e62:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 8003e64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d102      	bne.n	8003e70 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8003e6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e6e:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d815      	bhi.n	8003ea4 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8003e7e:	6979      	ldr	r1, [r7, #20]
 8003e80:	7cfa      	ldrb	r2, [r7, #19]
 8003e82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f7ff fde1 	bl	8003a4c <decode_extension>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f083 0301 	eor.w	r3, r3, #1
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <pb_decode_inner+0x15a>
                    return false;
 8003e96:	2300      	movs	r3, #0
 8003e98:	e105      	b.n	80040a6 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d173      	bne.n	8003f8c <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	68f8      	ldr	r0, [r7, #12]
 8003eaa:	f7ff f96f 	bl	800318c <pb_skip_field>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f083 0301 	eor.w	r3, r3, #1
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d06a      	beq.n	8003f90 <pb_decode_inner+0x250>
                return false;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	e0f3      	b.n	80040a6 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8003ebe:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003ec2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003ec6:	2b20      	cmp	r3, #32
 8003ec8:	d12e      	bne.n	8003f28 <pb_decode_inner+0x1e8>
 8003eca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ecc:	f107 0318 	add.w	r3, r7, #24
 8003ed0:	3314      	adds	r3, #20
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d128      	bne.n	8003f28 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8003ed6:	8c3b      	ldrh	r3, [r7, #32]
 8003ed8:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d020      	beq.n	8003f22 <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8003ee0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d011      	beq.n	8003f10 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8003eec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8003ef0:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d00b      	beq.n	8003f10 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	68db      	ldr	r3, [r3, #12]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d002      	beq.n	8003f06 <pb_decode_inner+0x1c6>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	e000      	b.n	8003f08 <pb_decode_inner+0x1c8>
 8003f06:	4b4a      	ldr	r3, [pc, #296]	; (8004030 <pb_decode_inner+0x2f0>)
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	60d3      	str	r3, [r2, #12]
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e0ca      	b.n	80040a6 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8003f10:	8c3b      	ldrh	r3, [r7, #32]
 8003f12:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 8003f1c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003f1e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 8003f22:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8003f26:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8003f28:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003f2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d11c      	bne.n	8003f6e <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8003f34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f36:	2b3f      	cmp	r3, #63	; 0x3f
 8003f38:	d819      	bhi.n	8003f6e <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8003f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2201      	movs	r2, #1
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8003f48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f4a:	095b      	lsrs	r3, r3, #5
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	3368      	adds	r3, #104	; 0x68
 8003f52:	443b      	add	r3, r7
 8003f54:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8003f58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f5a:	095b      	lsrs	r3, r3, #5
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	4619      	mov	r1, r3
 8003f60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f62:	431a      	orrs	r2, r3
 8003f64:	008b      	lsls	r3, r1, #2
 8003f66:	3368      	adds	r3, #104	; 0x68
 8003f68:	443b      	add	r3, r7
 8003f6a:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8003f6e:	7cfb      	ldrb	r3, [r7, #19]
 8003f70:	f107 0218 	add.w	r2, r7, #24
 8003f74:	4619      	mov	r1, r3
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f7ff fcf0 	bl	800395c <decode_field>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f083 0301 	eor.w	r3, r3, #1
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d004      	beq.n	8003f92 <pb_decode_inner+0x252>
            return false;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	e08c      	b.n	80040a6 <pb_decode_inner+0x366>
                    continue;
 8003f8c:	bf00      	nop
 8003f8e:	e000      	b.n	8003f92 <pb_decode_inner+0x252>
            continue;
 8003f90:	bf00      	nop
    while (stream->bytes_left)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f47f af17 	bne.w	8003dca <pb_decode_inner+0x8a>
 8003f9c:	e002      	b.n	8003fa4 <pb_decode_inner+0x264>
                break;
 8003f9e:	bf00      	nop
 8003fa0:	e000      	b.n	8003fa4 <pb_decode_inner+0x264>
            break;
 8003fa2:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8003fa4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003fa8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d011      	beq.n	8003fd4 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8003fb0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8003fb4:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d00b      	beq.n	8003fd4 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	68db      	ldr	r3, [r3, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d002      	beq.n	8003fca <pb_decode_inner+0x28a>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	e000      	b.n	8003fcc <pb_decode_inner+0x28c>
 8003fca:	4b19      	ldr	r3, [pc, #100]	; (8004030 <pb_decode_inner+0x2f0>)
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	60d3      	str	r3, [r2, #12]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	e068      	b.n	80040a6 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	8a5b      	ldrh	r3, [r3, #18]
 8003fd8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 8003fdc:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d05f      	beq.n	80040a4 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8003fe4:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d902      	bls.n	8003ff2 <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8003fec:	2340      	movs	r3, #64	; 0x40
 8003fee:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8003ff8:	e023      	b.n	8004042 <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8003ffa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	3368      	adds	r3, #104	; 0x68
 8004002:	443b      	add	r3, r7
 8004004:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004008:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800400a:	429a      	cmp	r2, r3
 800400c:	d014      	beq.n	8004038 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d002      	beq.n	800401c <pb_decode_inner+0x2dc>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	e000      	b.n	800401e <pb_decode_inner+0x2de>
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <pb_decode_inner+0x2f4>)
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	60d3      	str	r3, [r2, #12]
 8004022:	2300      	movs	r3, #0
 8004024:	e03f      	b.n	80040a6 <pb_decode_inner+0x366>
 8004026:	bf00      	nop
 8004028:	08009874 	.word	0x08009874
 800402c:	080098c4 	.word	0x080098c4
 8004030:	080098d0 	.word	0x080098d0
 8004034:	080098f4 	.word	0x080098f4
            for (i = 0; i < (req_field_count >> 5); i++)
 8004038:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800403c:	3301      	adds	r3, #1
 800403e:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8004042:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	b29b      	uxth	r3, r3
 800404a:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 800404e:	429a      	cmp	r2, r3
 8004050:	d3d3      	bcc.n	8003ffa <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8004052:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004056:	f003 031f 	and.w	r3, r3, #31
 800405a:	2b00      	cmp	r3, #0
 800405c:	d022      	beq.n	80040a4 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 800405e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	b29b      	uxth	r3, r3
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	3368      	adds	r3, #104	; 0x68
 800406a:	443b      	add	r3, r7
 800406c:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8004070:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f1c3 0320 	rsb	r3, r3, #32
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4619      	mov	r1, r3
 8004084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004086:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8004088:	429a      	cmp	r2, r3
 800408a:	d00b      	beq.n	80040a4 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <pb_decode_inner+0x35a>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	e000      	b.n	800409c <pb_decode_inner+0x35c>
 800409a:	4b05      	ldr	r3, [pc, #20]	; (80040b0 <pb_decode_inner+0x370>)
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	60d3      	str	r3, [r2, #12]
 80040a0:	2300      	movs	r3, #0
 80040a2:	e000      	b.n	80040a6 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 80040a4:	2301      	movs	r3, #1
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3768      	adds	r7, #104	; 0x68
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	bf00      	nop
 80040b0:	080098f4 	.word	0x080098f4

080040b4 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 80040c0:	2300      	movs	r3, #0
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68b9      	ldr	r1, [r7, #8]
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f7ff fe3a 	bl	8003d40 <pb_decode_inner>
 80040cc:	4603      	mov	r3, r0
 80040ce:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 80040d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b084      	sub	sp, #16
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
 80040e2:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 80040e4:	f107 030c 	add.w	r3, r7, #12
 80040e8:	4619      	mov	r1, r3
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f7fe ff70 	bl	8002fd0 <pb_decode_varint32>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f083 0301 	eor.w	r3, r3, #1
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <pb_decode_bool+0x26>
        return false;
 80040fc:	2300      	movs	r3, #0
 80040fe:	e008      	b.n	8004112 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf14      	ite	ne
 8004106:	2301      	movne	r3, #1
 8004108:	2300      	moveq	r3, #0
 800410a:	b2da      	uxtb	r2, r3
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	701a      	strb	r2, [r3, #0]
    return true;
 8004110:	2301      	movs	r3, #1
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 800411a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8004126:	f107 0308 	add.w	r3, r7, #8
 800412a:	4619      	mov	r1, r3
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f7fe ff5f 	bl	8002ff0 <pb_decode_varint>
 8004132:	4603      	mov	r3, r0
 8004134:	f083 0301 	eor.w	r3, r3, #1
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d001      	beq.n	8004142 <pb_decode_svarint+0x28>
        return false;
 800413e:	2300      	movs	r3, #0
 8004140:	e029      	b.n	8004196 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8004142:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004146:	f002 0401 	and.w	r4, r2, #1
 800414a:	2500      	movs	r5, #0
 800414c:	ea54 0305 	orrs.w	r3, r4, r5
 8004150:	d013      	beq.n	800417a <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8004152:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	0842      	lsrs	r2, r0, #1
 8004160:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004164:	084b      	lsrs	r3, r1, #1
 8004166:	ea6f 0802 	mvn.w	r8, r2
 800416a:	ea6f 0903 	mvn.w	r9, r3
 800416e:	4642      	mov	r2, r8
 8004170:	464b      	mov	r3, r9
 8004172:	6839      	ldr	r1, [r7, #0]
 8004174:	e9c1 2300 	strd	r2, r3, [r1]
 8004178:	e00c      	b.n	8004194 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800417a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	0842      	lsrs	r2, r0, #1
 8004188:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800418c:	084b      	lsrs	r3, r1, #1
 800418e:	6839      	ldr	r1, [r7, #0]
 8004190:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8004194:	2301      	movs	r3, #1
}
 8004196:	4618      	mov	r0, r3
 8004198:	3710      	adds	r7, #16
 800419a:	46bd      	mov	sp, r7
 800419c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080041a0 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 80041aa:	f107 030c 	add.w	r3, r7, #12
 80041ae:	2204      	movs	r2, #4
 80041b0:	4619      	mov	r1, r3
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f7fe fd92 	bl	8002cdc <pb_read>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f083 0301 	eor.w	r3, r3, #1
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d001      	beq.n	80041c8 <pb_decode_fixed32+0x28>
        return false;
 80041c4:	2300      	movs	r3, #0
 80041c6:	e003      	b.n	80041d0 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 80041ce:	2301      	movs	r3, #1
}
 80041d0:	4618      	mov	r0, r3
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 80041e2:	f107 0308 	add.w	r3, r7, #8
 80041e6:	2208      	movs	r2, #8
 80041e8:	4619      	mov	r1, r3
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f7fe fd76 	bl	8002cdc <pb_read>
 80041f0:	4603      	mov	r3, r0
 80041f2:	f083 0301 	eor.w	r3, r3, #1
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <pb_decode_fixed64+0x28>
        return false;
 80041fc:	2300      	movs	r3, #0
 80041fe:	e005      	b.n	800420c <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8004200:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004204:	6839      	ldr	r1, [r7, #0]
 8004206:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 800420a:	2301      	movs	r3, #1
}
 800420c:	4618      	mov	r0, r3
 800420e:	3710      	adds	r7, #16
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}

08004214 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	4619      	mov	r1, r3
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f7ff ff58 	bl	80040da <pb_decode_bool>
 800422a:	4603      	mov	r3, r0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3708      	adds	r7, #8
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004238:	b094      	sub	sp, #80	; 0x50
 800423a:	af00      	add	r7, sp, #0
 800423c:	6278      	str	r0, [r7, #36]	; 0x24
 800423e:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	7d9b      	ldrb	r3, [r3, #22]
 8004244:	f003 030f 	and.w	r3, r3, #15
 8004248:	2b02      	cmp	r3, #2
 800424a:	d179      	bne.n	8004340 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 800424c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004250:	4619      	mov	r1, r3
 8004252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004254:	f7fe fecc 	bl	8002ff0 <pb_decode_varint>
 8004258:	4603      	mov	r3, r0
 800425a:	f083 0301 	eor.w	r3, r3, #1
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <pb_dec_varint+0x34>
            return false;
 8004264:	2300      	movs	r3, #0
 8004266:	e107      	b.n	8004478 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	8a5b      	ldrh	r3, [r3, #18]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d10a      	bne.n	8004286 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8004270:	6a3b      	ldr	r3, [r7, #32]
 8004272:	69d9      	ldr	r1, [r3, #28]
 8004274:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004278:	e9c1 2300 	strd	r2, r3, [r1]
 800427c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004280:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004284:	e046      	b.n	8004314 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	8a5b      	ldrh	r3, [r3, #18]
 800428a:	2b04      	cmp	r3, #4
 800428c:	d10e      	bne.n	80042ac <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 800428e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	4602      	mov	r2, r0
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2200      	movs	r2, #0
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	617a      	str	r2, [r7, #20]
 80042a2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80042a6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80042aa:	e033      	b.n	8004314 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	8a5b      	ldrh	r3, [r3, #18]
 80042b0:	2b02      	cmp	r3, #2
 80042b2:	d10f      	bne.n	80042d4 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 80042b4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	b282      	uxth	r2, r0
 80042be:	801a      	strh	r2, [r3, #0]
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	2200      	movs	r2, #0
 80042c6:	60bb      	str	r3, [r7, #8]
 80042c8:	60fa      	str	r2, [r7, #12]
 80042ca:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80042ce:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80042d2:	e01f      	b.n	8004314 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	8a5b      	ldrh	r3, [r3, #18]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d10f      	bne.n	80042fc <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 80042dc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	b2c2      	uxtb	r2, r0
 80042e6:	701a      	strb	r2, [r3, #0]
 80042e8:	781b      	ldrb	r3, [r3, #0]
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2200      	movs	r2, #0
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80042f6:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 80042fa:	e00b      	b.n	8004314 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <pb_dec_varint+0xd6>
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	e000      	b.n	800430c <pb_dec_varint+0xd8>
 800430a:	4b5e      	ldr	r3, [pc, #376]	; (8004484 <pb_dec_varint+0x250>)
 800430c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430e:	60d3      	str	r3, [r2, #12]
 8004310:	2300      	movs	r3, #0
 8004312:	e0b1      	b.n	8004478 <pb_dec_varint+0x244>

        if (clamped != value)
 8004314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004318:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800431c:	4299      	cmp	r1, r3
 800431e:	bf08      	it	eq
 8004320:	4290      	cmpeq	r0, r2
 8004322:	d00b      	beq.n	800433c <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 8004324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d002      	beq.n	8004332 <pb_dec_varint+0xfe>
 800432c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	e000      	b.n	8004334 <pb_dec_varint+0x100>
 8004332:	4b55      	ldr	r3, [pc, #340]	; (8004488 <pb_dec_varint+0x254>)
 8004334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004336:	60d3      	str	r3, [r2, #12]
 8004338:	2300      	movs	r3, #0
 800433a:	e09d      	b.n	8004478 <pb_dec_varint+0x244>

        return true;
 800433c:	2301      	movs	r3, #1
 800433e:	e09b      	b.n	8004478 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8004340:	6a3b      	ldr	r3, [r7, #32]
 8004342:	7d9b      	ldrb	r3, [r3, #22]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	2b03      	cmp	r3, #3
 800434a:	d10d      	bne.n	8004368 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 800434c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004350:	4619      	mov	r1, r3
 8004352:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004354:	f7ff fee1 	bl	800411a <pb_decode_svarint>
 8004358:	4603      	mov	r3, r0
 800435a:	f083 0301 	eor.w	r3, r3, #1
 800435e:	b2db      	uxtb	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d022      	beq.n	80043aa <pb_dec_varint+0x176>
                return false;
 8004364:	2300      	movs	r3, #0
 8004366:	e087      	b.n	8004478 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8004368:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800436c:	4619      	mov	r1, r3
 800436e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004370:	f7fe fe3e 	bl	8002ff0 <pb_decode_varint>
 8004374:	4603      	mov	r3, r0
 8004376:	f083 0301 	eor.w	r3, r3, #1
 800437a:	b2db      	uxtb	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d001      	beq.n	8004384 <pb_dec_varint+0x150>
                return false;
 8004380:	2300      	movs	r3, #0
 8004382:	e079      	b.n	8004478 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8004384:	6a3b      	ldr	r3, [r7, #32]
 8004386:	8a5b      	ldrh	r3, [r3, #18]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d104      	bne.n	8004396 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 800438c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004390:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004394:	e009      	b.n	80043aa <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 8004396:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800439a:	4613      	mov	r3, r2
 800439c:	17da      	asrs	r2, r3, #31
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	61fa      	str	r2, [r7, #28]
 80043a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a6:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	8a5b      	ldrh	r3, [r3, #18]
 80043ae:	2b08      	cmp	r3, #8
 80043b0:	d10a      	bne.n	80043c8 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	69d9      	ldr	r1, [r3, #28]
 80043b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ba:	e9c1 2300 	strd	r2, r3, [r1]
 80043be:	e9d1 2300 	ldrd	r2, r3, [r1]
 80043c2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 80043c6:	e042      	b.n	800444e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	8a5b      	ldrh	r3, [r3, #18]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d10c      	bne.n	80043ea <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 80043d0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	4602      	mov	r2, r0
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	17da      	asrs	r2, r3, #31
 80043e0:	469a      	mov	sl, r3
 80043e2:	4693      	mov	fp, r2
 80043e4:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 80043e8:	e031      	b.n	800444e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 80043ea:	6a3b      	ldr	r3, [r7, #32]
 80043ec:	8a5b      	ldrh	r3, [r3, #18]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d10e      	bne.n	8004410 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 80043f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	b202      	sxth	r2, r0
 80043fc:	801a      	strh	r2, [r3, #0]
 80043fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004402:	b21b      	sxth	r3, r3
 8004404:	17da      	asrs	r2, r3, #31
 8004406:	4698      	mov	r8, r3
 8004408:	4691      	mov	r9, r2
 800440a:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 800440e:	e01e      	b.n	800444e <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	8a5b      	ldrh	r3, [r3, #18]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d10e      	bne.n	8004436 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8004418:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800441c:	6a3b      	ldr	r3, [r7, #32]
 800441e:	69db      	ldr	r3, [r3, #28]
 8004420:	b242      	sxtb	r2, r0
 8004422:	701a      	strb	r2, [r3, #0]
 8004424:	f993 3000 	ldrsb.w	r3, [r3]
 8004428:	b25b      	sxtb	r3, r3
 800442a:	17da      	asrs	r2, r3, #31
 800442c:	461c      	mov	r4, r3
 800442e:	4615      	mov	r5, r2
 8004430:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 8004434:	e00b      	b.n	800444e <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d002      	beq.n	8004444 <pb_dec_varint+0x210>
 800443e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	e000      	b.n	8004446 <pb_dec_varint+0x212>
 8004444:	4b0f      	ldr	r3, [pc, #60]	; (8004484 <pb_dec_varint+0x250>)
 8004446:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004448:	60d3      	str	r3, [r2, #12]
 800444a:	2300      	movs	r3, #0
 800444c:	e014      	b.n	8004478 <pb_dec_varint+0x244>

        if (clamped != svalue)
 800444e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004452:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004456:	4299      	cmp	r1, r3
 8004458:	bf08      	it	eq
 800445a:	4290      	cmpeq	r0, r2
 800445c:	d00b      	beq.n	8004476 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <pb_dec_varint+0x238>
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	e000      	b.n	800446e <pb_dec_varint+0x23a>
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <pb_dec_varint+0x254>)
 800446e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004470:	60d3      	str	r3, [r2, #12]
 8004472:	2300      	movs	r3, #0
 8004474:	e000      	b.n	8004478 <pb_dec_varint+0x244>

        return true;
 8004476:	2301      	movs	r3, #1
    }
}
 8004478:	4618      	mov	r0, r3
 800447a:	3750      	adds	r7, #80	; 0x50
 800447c:	46bd      	mov	sp, r7
 800447e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004482:	bf00      	nop
 8004484:	0800990c 	.word	0x0800990c
 8004488:	08009920 	.word	0x08009920

0800448c <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b086      	sub	sp, #24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 8004496:	f107 030c 	add.w	r3, r7, #12
 800449a:	4619      	mov	r1, r3
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f7fe fd97 	bl	8002fd0 <pb_decode_varint32>
 80044a2:	4603      	mov	r3, r0
 80044a4:	f083 0301 	eor.w	r3, r3, #1
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <pb_dec_bytes+0x26>
        return false;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e055      	b.n	800455e <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b8:	d30b      	bcc.n	80044d2 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68db      	ldr	r3, [r3, #12]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d002      	beq.n	80044c8 <pb_dec_bytes+0x3c>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	e000      	b.n	80044ca <pb_dec_bytes+0x3e>
 80044c8:	4b27      	ldr	r3, [pc, #156]	; (8004568 <pb_dec_bytes+0xdc>)
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	60d3      	str	r3, [r2, #12]
 80044ce:	2300      	movs	r3, #0
 80044d0:	e045      	b.n	800455e <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	3302      	adds	r3, #2
 80044d6:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d20b      	bcs.n	80044f8 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d002      	beq.n	80044ee <pb_dec_bytes+0x62>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	e000      	b.n	80044f0 <pb_dec_bytes+0x64>
 80044ee:	4b1f      	ldr	r3, [pc, #124]	; (800456c <pb_dec_bytes+0xe0>)
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	60d3      	str	r3, [r2, #12]
 80044f4:	2300      	movs	r3, #0
 80044f6:	e032      	b.n	800455e <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	7d9b      	ldrb	r3, [r3, #22]
 80044fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004500:	2b80      	cmp	r3, #128	; 0x80
 8004502:	d10b      	bne.n	800451c <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d002      	beq.n	8004512 <pb_dec_bytes+0x86>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	e000      	b.n	8004514 <pb_dec_bytes+0x88>
 8004512:	4b17      	ldr	r3, [pc, #92]	; (8004570 <pb_dec_bytes+0xe4>)
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	60d3      	str	r3, [r2, #12]
 8004518:	2300      	movs	r3, #0
 800451a:	e020      	b.n	800455e <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	8a5b      	ldrh	r3, [r3, #18]
 8004520:	461a      	mov	r2, r3
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	4293      	cmp	r3, r2
 8004526:	d90b      	bls.n	8004540 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d002      	beq.n	8004536 <pb_dec_bytes+0xaa>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	e000      	b.n	8004538 <pb_dec_bytes+0xac>
 8004536:	4b0c      	ldr	r3, [pc, #48]	; (8004568 <pb_dec_bytes+0xdc>)
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	60d3      	str	r3, [r2, #12]
 800453c:	2300      	movs	r3, #0
 800453e:	e00e      	b.n	800455e <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	b29a      	uxth	r2, r3
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	3302      	adds	r3, #2
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4619      	mov	r1, r3
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fe fbc0 	bl	8002cdc <pb_read>
 800455c:	4603      	mov	r3, r0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	08009934 	.word	0x08009934
 800456c:	08009944 	.word	0x08009944
 8004570:	0800988c 	.word	0x0800988c

08004574 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	69db      	ldr	r3, [r3, #28]
 8004582:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8004584:	f107 030c 	add.w	r3, r7, #12
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fe fd20 	bl	8002fd0 <pb_decode_varint32>
 8004590:	4603      	mov	r3, r0
 8004592:	f083 0301 	eor.w	r3, r3, #1
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d001      	beq.n	80045a0 <pb_dec_string+0x2c>
        return false;
 800459c:	2300      	movs	r3, #0
 800459e:	e05a      	b.n	8004656 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a6:	d10b      	bne.n	80045c0 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d002      	beq.n	80045b6 <pb_dec_string+0x42>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	e000      	b.n	80045b8 <pb_dec_string+0x44>
 80045b6:	4b2a      	ldr	r3, [pc, #168]	; (8004660 <pb_dec_string+0xec>)
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	60d3      	str	r3, [r2, #12]
 80045bc:	2300      	movs	r3, #0
 80045be:	e04a      	b.n	8004656 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	3301      	adds	r3, #1
 80045c4:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d20b      	bcs.n	80045e6 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <pb_dec_string+0x68>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	e000      	b.n	80045de <pb_dec_string+0x6a>
 80045dc:	4b20      	ldr	r3, [pc, #128]	; (8004660 <pb_dec_string+0xec>)
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	60d3      	str	r3, [r2, #12]
 80045e2:	2300      	movs	r3, #0
 80045e4:	e037      	b.n	8004656 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	7d9b      	ldrb	r3, [r3, #22]
 80045ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80045ee:	2b80      	cmp	r3, #128	; 0x80
 80045f0:	d10b      	bne.n	800460a <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	68db      	ldr	r3, [r3, #12]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <pb_dec_string+0x8c>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	e000      	b.n	8004602 <pb_dec_string+0x8e>
 8004600:	4b18      	ldr	r3, [pc, #96]	; (8004664 <pb_dec_string+0xf0>)
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	60d3      	str	r3, [r2, #12]
 8004606:	2300      	movs	r3, #0
 8004608:	e025      	b.n	8004656 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	8a5b      	ldrh	r3, [r3, #18]
 800460e:	461a      	mov	r2, r3
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4293      	cmp	r3, r2
 8004614:	d90b      	bls.n	800462e <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <pb_dec_string+0xb0>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	e000      	b.n	8004626 <pb_dec_string+0xb2>
 8004624:	4b10      	ldr	r3, [pc, #64]	; (8004668 <pb_dec_string+0xf4>)
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	60d3      	str	r3, [r2, #12]
 800462a:	2300      	movs	r3, #0
 800462c:	e013      	b.n	8004656 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4413      	add	r3, r2
 8004634:	2200      	movs	r2, #0
 8004636:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	461a      	mov	r2, r3
 800463c:	6979      	ldr	r1, [r7, #20]
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fe fb4c 	bl	8002cdc <pb_read>
 8004644:	4603      	mov	r3, r0
 8004646:	f083 0301 	eor.w	r3, r3, #1
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d001      	beq.n	8004654 <pb_dec_string+0xe0>
        return false;
 8004650:	2300      	movs	r3, #0
 8004652:	e000      	b.n	8004656 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8004654:	2301      	movs	r3, #1
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	08009944 	.word	0x08009944
 8004664:	0800988c 	.word	0x0800988c
 8004668:	08009954 	.word	0x08009954

0800466c <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
    bool status = true;
 8004676:	2301      	movs	r3, #1
 8004678:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 800467c:	2300      	movs	r3, #0
 800467e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8004682:	f107 030c 	add.w	r3, r7, #12
 8004686:	4619      	mov	r1, r3
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7fe fe2d 	bl	80032e8 <pb_make_string_substream>
 800468e:	4603      	mov	r3, r0
 8004690:	f083 0301 	eor.w	r3, r3, #1
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <pb_dec_submessage+0x32>
        return false;
 800469a:	2300      	movs	r3, #0
 800469c:	e069      	b.n	8004772 <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d002      	beq.n	80046b4 <pb_dec_submessage+0x48>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68db      	ldr	r3, [r3, #12]
 80046b2:	e000      	b.n	80046b6 <pb_dec_submessage+0x4a>
 80046b4:	4b31      	ldr	r3, [pc, #196]	; (800477c <pb_dec_submessage+0x110>)
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	60d3      	str	r3, [r2, #12]
 80046ba:	2300      	movs	r3, #0
 80046bc:	e059      	b.n	8004772 <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	7d9b      	ldrb	r3, [r3, #22]
 80046c2:	f003 030f 	and.w	r3, r3, #15
 80046c6:	2b09      	cmp	r3, #9
 80046c8:	d11c      	bne.n	8004704 <pb_dec_submessage+0x98>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	6a1b      	ldr	r3, [r3, #32]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d018      	beq.n	8004704 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	6a1b      	ldr	r3, [r3, #32]
 80046d6:	3b08      	subs	r3, #8
 80046d8:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d010      	beq.n	8004704 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	3204      	adds	r2, #4
 80046ea:	f107 000c 	add.w	r0, r7, #12
 80046ee:	6839      	ldr	r1, [r7, #0]
 80046f0:	4798      	blx	r3
 80046f2:	4603      	mov	r3, r0
 80046f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d102      	bne.n	8004704 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8004704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004708:	2b00      	cmp	r3, #0
 800470a:	d022      	beq.n	8004752 <pb_dec_submessage+0xe6>
 800470c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004710:	f083 0301 	eor.w	r3, r3, #1
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d01b      	beq.n	8004752 <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 800471a:	2300      	movs	r3, #0
 800471c:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	7d9b      	ldrb	r3, [r3, #22]
 8004722:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d107      	bne.n	800473a <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	7d9b      	ldrb	r3, [r3, #22]
 800472e:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8004732:	2b20      	cmp	r3, #32
 8004734:	d001      	beq.n	800473a <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8004736:	2301      	movs	r3, #1
 8004738:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	f107 000c 	add.w	r0, r7, #12
 8004746:	6a3b      	ldr	r3, [r7, #32]
 8004748:	f7ff fafa 	bl	8003d40 <pb_decode_inner>
 800474c:	4603      	mov	r3, r0
 800474e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8004752:	f107 030c 	add.w	r3, r7, #12
 8004756:	4619      	mov	r1, r3
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f7fe fdff 	bl	800335c <pb_close_string_substream>
 800475e:	4603      	mov	r3, r0
 8004760:	f083 0301 	eor.w	r3, r3, #1
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <pb_dec_submessage+0x102>
        return false;
 800476a:	2300      	movs	r3, #0
 800476c:	e001      	b.n	8004772 <pb_dec_submessage+0x106>

    return status;
 800476e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004772:	4618      	mov	r0, r3
 8004774:	3728      	adds	r7, #40	; 0x28
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	08009964 	.word	0x08009964

08004780 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 800478a:	f107 030c 	add.w	r3, r7, #12
 800478e:	4619      	mov	r1, r3
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7fe fc1d 	bl	8002fd0 <pb_decode_varint32>
 8004796:	4603      	mov	r3, r0
 8004798:	f083 0301 	eor.w	r3, r3, #1
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d001      	beq.n	80047a6 <pb_dec_fixed_length_bytes+0x26>
        return false;
 80047a2:	2300      	movs	r3, #0
 80047a4:	e037      	b.n	8004816 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047ac:	d30b      	bcc.n	80047c6 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <pb_dec_fixed_length_bytes+0x3c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	e000      	b.n	80047be <pb_dec_fixed_length_bytes+0x3e>
 80047bc:	4b18      	ldr	r3, [pc, #96]	; (8004820 <pb_dec_fixed_length_bytes+0xa0>)
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	60d3      	str	r3, [r2, #12]
 80047c2:	2300      	movs	r3, #0
 80047c4:	e027      	b.n	8004816 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	69d8      	ldr	r0, [r3, #28]
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	8a5b      	ldrh	r3, [r3, #18]
 80047d4:	461a      	mov	r2, r3
 80047d6:	2100      	movs	r1, #0
 80047d8:	f004 fa98 	bl	8008d0c <memset>
        return true;
 80047dc:	2301      	movs	r3, #1
 80047de:	e01a      	b.n	8004816 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	8a5b      	ldrh	r3, [r3, #18]
 80047e4:	461a      	mov	r2, r3
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d00b      	beq.n	8004804 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <pb_dec_fixed_length_bytes+0x7a>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	e000      	b.n	80047fc <pb_dec_fixed_length_bytes+0x7c>
 80047fa:	4b0a      	ldr	r3, [pc, #40]	; (8004824 <pb_dec_fixed_length_bytes+0xa4>)
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	60d3      	str	r3, [r2, #12]
 8004800:	2300      	movs	r3, #0
 8004802:	e008      	b.n	8004816 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	69d9      	ldr	r1, [r3, #28]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	8a5b      	ldrh	r3, [r3, #18]
 800480c:	461a      	mov	r2, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7fe fa64 	bl	8002cdc <pb_read>
 8004814:	4603      	mov	r3, r0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	08009934 	.word	0x08009934
 8004824:	08009980 	.word	0x08009980

08004828 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800482e:	4b0f      	ldr	r3, [pc, #60]	; (800486c <HAL_MspInit+0x44>)
 8004830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004832:	4a0e      	ldr	r2, [pc, #56]	; (800486c <HAL_MspInit+0x44>)
 8004834:	f043 0301 	orr.w	r3, r3, #1
 8004838:	6613      	str	r3, [r2, #96]	; 0x60
 800483a:	4b0c      	ldr	r3, [pc, #48]	; (800486c <HAL_MspInit+0x44>)
 800483c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	607b      	str	r3, [r7, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <HAL_MspInit+0x44>)
 8004848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484a:	4a08      	ldr	r2, [pc, #32]	; (800486c <HAL_MspInit+0x44>)
 800484c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004850:	6593      	str	r3, [r2, #88]	; 0x58
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_MspInit+0x44>)
 8004854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800485e:	f001 fbab 	bl	8005fb8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004862:	bf00      	nop
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40021000 	.word	0x40021000

08004870 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b09a      	sub	sp, #104	; 0x68
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004878:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004888:	f107 0310 	add.w	r3, r7, #16
 800488c:	2244      	movs	r2, #68	; 0x44
 800488e:	2100      	movs	r1, #0
 8004890:	4618      	mov	r0, r3
 8004892:	f004 fa3b 	bl	8008d0c <memset>
  if(hfdcan->Instance==FDCAN1)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a24      	ldr	r2, [pc, #144]	; (800492c <HAL_FDCAN_MspInit+0xbc>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d141      	bne.n	8004924 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80048a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80048a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80048aa:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80048ac:	f107 0310 	add.w	r3, r7, #16
 80048b0:	4618      	mov	r0, r3
 80048b2:	f002 f887 	bl	80069c4 <HAL_RCCEx_PeriphCLKConfig>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80048bc:	f7fd fee8 	bl	8002690 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80048c0:	4b1b      	ldr	r3, [pc, #108]	; (8004930 <HAL_FDCAN_MspInit+0xc0>)
 80048c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c4:	4a1a      	ldr	r2, [pc, #104]	; (8004930 <HAL_FDCAN_MspInit+0xc0>)
 80048c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048ca:	6593      	str	r3, [r2, #88]	; 0x58
 80048cc:	4b18      	ldr	r3, [pc, #96]	; (8004930 <HAL_FDCAN_MspInit+0xc0>)
 80048ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048d8:	4b15      	ldr	r3, [pc, #84]	; (8004930 <HAL_FDCAN_MspInit+0xc0>)
 80048da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048dc:	4a14      	ldr	r2, [pc, #80]	; (8004930 <HAL_FDCAN_MspInit+0xc0>)
 80048de:	f043 0301 	orr.w	r3, r3, #1
 80048e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048e4:	4b12      	ldr	r3, [pc, #72]	; (8004930 <HAL_FDCAN_MspInit+0xc0>)
 80048e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	60bb      	str	r3, [r7, #8]
 80048ee:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80048f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80048f4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048f6:	2302      	movs	r3, #2
 80048f8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048fa:	2300      	movs	r3, #0
 80048fc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048fe:	2300      	movs	r3, #0
 8004900:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004902:	2309      	movs	r3, #9
 8004904:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004906:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800490a:	4619      	mov	r1, r3
 800490c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004910:	f001 f914 	bl	8005b3c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004914:	2200      	movs	r2, #0
 8004916:	2100      	movs	r1, #0
 8004918:	2015      	movs	r0, #21
 800491a:	f000 fb86 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800491e:	2015      	movs	r0, #21
 8004920:	f000 fb9d 	bl	800505e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8004924:	bf00      	nop
 8004926:	3768      	adds	r7, #104	; 0x68
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40006400 	.word	0x40006400
 8004930:	40021000 	.word	0x40021000

08004934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b086      	sub	sp, #24
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a1f      	ldr	r2, [pc, #124]	; (80049c0 <HAL_TIM_Base_MspInit+0x8c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d10c      	bne.n	8004960 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004946:	4b1f      	ldr	r3, [pc, #124]	; (80049c4 <HAL_TIM_Base_MspInit+0x90>)
 8004948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494a:	4a1e      	ldr	r2, [pc, #120]	; (80049c4 <HAL_TIM_Base_MspInit+0x90>)
 800494c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004950:	6613      	str	r3, [r2, #96]	; 0x60
 8004952:	4b1c      	ldr	r3, [pc, #112]	; (80049c4 <HAL_TIM_Base_MspInit+0x90>)
 8004954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800495a:	617b      	str	r3, [r7, #20]
 800495c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800495e:	e02a      	b.n	80049b6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a18      	ldr	r2, [pc, #96]	; (80049c8 <HAL_TIM_Base_MspInit+0x94>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d114      	bne.n	8004994 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800496a:	4b16      	ldr	r3, [pc, #88]	; (80049c4 <HAL_TIM_Base_MspInit+0x90>)
 800496c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496e:	4a15      	ldr	r2, [pc, #84]	; (80049c4 <HAL_TIM_Base_MspInit+0x90>)
 8004970:	f043 0310 	orr.w	r3, r3, #16
 8004974:	6593      	str	r3, [r2, #88]	; 0x58
 8004976:	4b13      	ldr	r3, [pc, #76]	; (80049c4 <HAL_TIM_Base_MspInit+0x90>)
 8004978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800497a:	f003 0310 	and.w	r3, r3, #16
 800497e:	613b      	str	r3, [r7, #16]
 8004980:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004982:	2200      	movs	r2, #0
 8004984:	2100      	movs	r1, #0
 8004986:	2036      	movs	r0, #54	; 0x36
 8004988:	f000 fb4f 	bl	800502a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800498c:	2036      	movs	r0, #54	; 0x36
 800498e:	f000 fb66 	bl	800505e <HAL_NVIC_EnableIRQ>
}
 8004992:	e010      	b.n	80049b6 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0c      	ldr	r2, [pc, #48]	; (80049cc <HAL_TIM_Base_MspInit+0x98>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d10b      	bne.n	80049b6 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800499e:	4b09      	ldr	r3, [pc, #36]	; (80049c4 <HAL_TIM_Base_MspInit+0x90>)
 80049a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049a2:	4a08      	ldr	r2, [pc, #32]	; (80049c4 <HAL_TIM_Base_MspInit+0x90>)
 80049a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80049a8:	6613      	str	r3, [r2, #96]	; 0x60
 80049aa:	4b06      	ldr	r3, [pc, #24]	; (80049c4 <HAL_TIM_Base_MspInit+0x90>)
 80049ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
}
 80049b6:	bf00      	nop
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	40012c00 	.word	0x40012c00
 80049c4:	40021000 	.word	0x40021000
 80049c8:	40001000 	.word	0x40001000
 80049cc:	40013400 	.word	0x40013400

080049d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b085      	sub	sp, #20
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0a      	ldr	r2, [pc, #40]	; (8004a08 <HAL_TIM_PWM_MspInit+0x38>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d10b      	bne.n	80049fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80049e2:	4b0a      	ldr	r3, [pc, #40]	; (8004a0c <HAL_TIM_PWM_MspInit+0x3c>)
 80049e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e6:	4a09      	ldr	r2, [pc, #36]	; (8004a0c <HAL_TIM_PWM_MspInit+0x3c>)
 80049e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ec:	6613      	str	r3, [r2, #96]	; 0x60
 80049ee:	4b07      	ldr	r3, [pc, #28]	; (8004a0c <HAL_TIM_PWM_MspInit+0x3c>)
 80049f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 80049fa:	bf00      	nop
 80049fc:	3714      	adds	r7, #20
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	40014000 	.word	0x40014000
 8004a0c:	40021000 	.word	0x40021000

08004a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08a      	sub	sp, #40	; 0x28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	f107 0314 	add.w	r3, r7, #20
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a35      	ldr	r2, [pc, #212]	; (8004b04 <HAL_TIM_MspPostInit+0xf4>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d11e      	bne.n	8004a70 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a32:	4b35      	ldr	r3, [pc, #212]	; (8004b08 <HAL_TIM_MspPostInit+0xf8>)
 8004a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a36:	4a34      	ldr	r2, [pc, #208]	; (8004b08 <HAL_TIM_MspPostInit+0xf8>)
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a3e:	4b32      	ldr	r3, [pc, #200]	; (8004b08 <HAL_TIM_MspPostInit+0xf8>)
 8004a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	613b      	str	r3, [r7, #16]
 8004a48:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a50:	2302      	movs	r3, #2
 8004a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a54:	2302      	movs	r3, #2
 8004a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004a5c:	2306      	movs	r3, #6
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a60:	f107 0314 	add.w	r3, r7, #20
 8004a64:	4619      	mov	r1, r3
 8004a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a6a:	f001 f867 	bl	8005b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8004a6e:	e045      	b.n	8004afc <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM8)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a25      	ldr	r2, [pc, #148]	; (8004b0c <HAL_TIM_MspPostInit+0xfc>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d11e      	bne.n	8004ab8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a7a:	4b23      	ldr	r3, [pc, #140]	; (8004b08 <HAL_TIM_MspPostInit+0xf8>)
 8004a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7e:	4a22      	ldr	r2, [pc, #136]	; (8004b08 <HAL_TIM_MspPostInit+0xf8>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a86:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <HAL_TIM_MspPostInit+0xf8>)
 8004a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aa8:	f107 0314 	add.w	r3, r7, #20
 8004aac:	4619      	mov	r1, r3
 8004aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ab2:	f001 f843 	bl	8005b3c <HAL_GPIO_Init>
}
 8004ab6:	e021      	b.n	8004afc <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM15)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a14      	ldr	r2, [pc, #80]	; (8004b10 <HAL_TIM_MspPostInit+0x100>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d11c      	bne.n	8004afc <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac2:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <HAL_TIM_MspPostInit+0xf8>)
 8004ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ac6:	4a10      	ldr	r2, [pc, #64]	; (8004b08 <HAL_TIM_MspPostInit+0xf8>)
 8004ac8:	f043 0301 	orr.w	r3, r3, #1
 8004acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ace:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <HAL_TIM_MspPostInit+0xf8>)
 8004ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ada:	2304      	movs	r3, #4
 8004adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ade:	2302      	movs	r3, #2
 8004ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8004aea:	2309      	movs	r3, #9
 8004aec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aee:	f107 0314 	add.w	r3, r7, #20
 8004af2:	4619      	mov	r1, r3
 8004af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004af8:	f001 f820 	bl	8005b3c <HAL_GPIO_Init>
}
 8004afc:	bf00      	nop
 8004afe:	3728      	adds	r7, #40	; 0x28
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	40012c00 	.word	0x40012c00
 8004b08:	40021000 	.word	0x40021000
 8004b0c:	40013400 	.word	0x40013400
 8004b10:	40014000 	.word	0x40014000

08004b14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b14:	b480      	push	{r7}
 8004b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004b18:	e7fe      	b.n	8004b18 <NMI_Handler+0x4>

08004b1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b1e:	e7fe      	b.n	8004b1e <HardFault_Handler+0x4>

08004b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b24:	e7fe      	b.n	8004b24 <MemManage_Handler+0x4>

08004b26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b26:	b480      	push	{r7}
 8004b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b2a:	e7fe      	b.n	8004b2a <BusFault_Handler+0x4>

08004b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b30:	e7fe      	b.n	8004b30 <UsageFault_Handler+0x4>

08004b32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b32:	b480      	push	{r7}
 8004b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b36:	bf00      	nop
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b44:	bf00      	nop
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr

08004b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b4e:	b480      	push	{r7}
 8004b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b52:	bf00      	nop
 8004b54:	46bd      	mov	sp, r7
 8004b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5a:	4770      	bx	lr

08004b5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b60:	f000 f96a 	bl	8004e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b64:	bf00      	nop
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004b6c:	4802      	ldr	r0, [pc, #8]	; (8004b78 <FDCAN1_IT0_IRQHandler+0x10>)
 8004b6e:	f000 fe01 	bl	8005774 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004b72:	bf00      	nop
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20000084 	.word	0x20000084

08004b7c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004b80:	4802      	ldr	r0, [pc, #8]	; (8004b8c <TIM6_DAC_IRQHandler+0x10>)
 8004b82:	f002 fb29 	bl	80071d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004b86:	bf00      	nop
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000134 	.word	0x20000134

08004b90 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  return 1;
 8004b94:	2301      	movs	r3, #1
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <_kill>:

int _kill(int pid, int sig)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004baa:	f004 f951 	bl	8008e50 <__errno>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2216      	movs	r2, #22
 8004bb2:	601a      	str	r2, [r3, #0]
  return -1;
 8004bb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3708      	adds	r7, #8
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <_exit>:

void _exit (int status)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004bc8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7ff ffe7 	bl	8004ba0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004bd2:	e7fe      	b.n	8004bd2 <_exit+0x12>

08004bd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004be0:	2300      	movs	r3, #0
 8004be2:	617b      	str	r3, [r7, #20]
 8004be4:	e00a      	b.n	8004bfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004be6:	f3af 8000 	nop.w
 8004bea:	4601      	mov	r1, r0
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	1c5a      	adds	r2, r3, #1
 8004bf0:	60ba      	str	r2, [r7, #8]
 8004bf2:	b2ca      	uxtb	r2, r1
 8004bf4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	697a      	ldr	r2, [r7, #20]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	dbf0      	blt.n	8004be6 <_read+0x12>
  }

  return len;
 8004c04:	687b      	ldr	r3, [r7, #4]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3718      	adds	r7, #24
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b086      	sub	sp, #24
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	60f8      	str	r0, [r7, #12]
 8004c16:	60b9      	str	r1, [r7, #8]
 8004c18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
 8004c1e:	e009      	b.n	8004c34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	60ba      	str	r2, [r7, #8]
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	3301      	adds	r3, #1
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	dbf1      	blt.n	8004c20 <_write+0x12>
  }
  return len;
 8004c3c:	687b      	ldr	r3, [r7, #4]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3718      	adds	r7, #24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <_close>:

int _close(int file)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
 8004c66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c6e:	605a      	str	r2, [r3, #4]
  return 0;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <_isatty>:

int _isatty(int file)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004c86:	2301      	movs	r3, #1
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr

08004c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
	...

08004cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004cb8:	4a14      	ldr	r2, [pc, #80]	; (8004d0c <_sbrk+0x5c>)
 8004cba:	4b15      	ldr	r3, [pc, #84]	; (8004d10 <_sbrk+0x60>)
 8004cbc:	1ad3      	subs	r3, r2, r3
 8004cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004cc4:	4b13      	ldr	r3, [pc, #76]	; (8004d14 <_sbrk+0x64>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d102      	bne.n	8004cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ccc:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <_sbrk+0x64>)
 8004cce:	4a12      	ldr	r2, [pc, #72]	; (8004d18 <_sbrk+0x68>)
 8004cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004cd2:	4b10      	ldr	r3, [pc, #64]	; (8004d14 <_sbrk+0x64>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4413      	add	r3, r2
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d207      	bcs.n	8004cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004ce0:	f004 f8b6 	bl	8008e50 <__errno>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	220c      	movs	r2, #12
 8004ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cee:	e009      	b.n	8004d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004cf0:	4b08      	ldr	r3, [pc, #32]	; (8004d14 <_sbrk+0x64>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004cf6:	4b07      	ldr	r3, [pc, #28]	; (8004d14 <_sbrk+0x64>)
 8004cf8:	681a      	ldr	r2, [r3, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4413      	add	r3, r2
 8004cfe:	4a05      	ldr	r2, [pc, #20]	; (8004d14 <_sbrk+0x64>)
 8004d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d02:	68fb      	ldr	r3, [r7, #12]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	3718      	adds	r7, #24
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	20008000 	.word	0x20008000
 8004d10:	00000400 	.word	0x00000400
 8004d14:	200006b0 	.word	0x200006b0
 8004d18:	20000808 	.word	0x20000808

08004d1c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004d20:	4b06      	ldr	r3, [pc, #24]	; (8004d3c <SystemInit+0x20>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	4a05      	ldr	r2, [pc, #20]	; (8004d3c <SystemInit+0x20>)
 8004d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004d30:	bf00      	nop
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	e000ed00 	.word	0xe000ed00

08004d40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004d40:	480d      	ldr	r0, [pc, #52]	; (8004d78 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004d42:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004d44:	f7ff ffea 	bl	8004d1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004d48:	480c      	ldr	r0, [pc, #48]	; (8004d7c <LoopForever+0x6>)
  ldr r1, =_edata
 8004d4a:	490d      	ldr	r1, [pc, #52]	; (8004d80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004d4c:	4a0d      	ldr	r2, [pc, #52]	; (8004d84 <LoopForever+0xe>)
  movs r3, #0
 8004d4e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8004d50:	e002      	b.n	8004d58 <LoopCopyDataInit>

08004d52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004d52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004d54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004d56:	3304      	adds	r3, #4

08004d58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004d58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004d5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004d5c:	d3f9      	bcc.n	8004d52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004d5e:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004d60:	4c0a      	ldr	r4, [pc, #40]	; (8004d8c <LoopForever+0x16>)
  movs r3, #0
 8004d62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004d64:	e001      	b.n	8004d6a <LoopFillZerobss>

08004d66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004d66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004d68:	3204      	adds	r2, #4

08004d6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004d6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004d6c:	d3fb      	bcc.n	8004d66 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8004d6e:	f004 f875 	bl	8008e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004d72:	f7fd f81b 	bl	8001dac <main>

08004d76 <LoopForever>:

LoopForever:
    b LoopForever
 8004d76:	e7fe      	b.n	8004d76 <LoopForever>
  ldr   r0, =_estack
 8004d78:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8004d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004d80:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8004d84:	08009ab8 	.word	0x08009ab8
  ldr r2, =_sbss
 8004d88:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8004d8c:	20000808 	.word	0x20000808

08004d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004d90:	e7fe      	b.n	8004d90 <ADC1_2_IRQHandler>

08004d92 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004d9c:	2003      	movs	r0, #3
 8004d9e:	f000 f939 	bl	8005014 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004da2:	200f      	movs	r0, #15
 8004da4:	f000 f80e 	bl	8004dc4 <HAL_InitTick>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	71fb      	strb	r3, [r7, #7]
 8004db2:	e001      	b.n	8004db8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004db4:	f7ff fd38 	bl	8004828 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004db8:	79fb      	ldrb	r3, [r7, #7]

}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004dd0:	4b16      	ldr	r3, [pc, #88]	; (8004e2c <HAL_InitTick+0x68>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d022      	beq.n	8004e1e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004dd8:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <HAL_InitTick+0x6c>)
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b13      	ldr	r3, [pc, #76]	; (8004e2c <HAL_InitTick+0x68>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004de4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 f944 	bl	800507a <HAL_SYSTICK_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10f      	bne.n	8004e18 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b0f      	cmp	r3, #15
 8004dfc:	d809      	bhi.n	8004e12 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e06:	f000 f910 	bl	800502a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004e0a:	4a0a      	ldr	r2, [pc, #40]	; (8004e34 <HAL_InitTick+0x70>)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	e007      	b.n	8004e22 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
 8004e16:	e004      	b.n	8004e22 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
 8004e1c:	e001      	b.n	8004e22 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3710      	adds	r7, #16
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	20000008 	.word	0x20000008
 8004e30:	20000000 	.word	0x20000000
 8004e34:	20000004 	.word	0x20000004

08004e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <HAL_IncTick+0x1c>)
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_IncTick+0x20>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4413      	add	r3, r2
 8004e46:	4a03      	ldr	r2, [pc, #12]	; (8004e54 <HAL_IncTick+0x1c>)
 8004e48:	6013      	str	r3, [r2, #0]
}
 8004e4a:	bf00      	nop
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e52:	4770      	bx	lr
 8004e54:	200006b4 	.word	0x200006b4
 8004e58:	20000008 	.word	0x20000008

08004e5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004e60:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <HAL_GetTick+0x14>)
 8004e62:	681b      	ldr	r3, [r3, #0]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	200006b4 	.word	0x200006b4

08004e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e74:	b480      	push	{r7}
 8004e76:	b085      	sub	sp, #20
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e84:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e90:	4013      	ands	r3, r2
 8004e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004ea6:	4a04      	ldr	r2, [pc, #16]	; (8004eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	60d3      	str	r3, [r2, #12]
}
 8004eac:	bf00      	nop
 8004eae:	3714      	adds	r7, #20
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	e000ed00 	.word	0xe000ed00

08004ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ec0:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	0a1b      	lsrs	r3, r3, #8
 8004ec6:	f003 0307 	and.w	r3, r3, #7
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	e000ed00 	.word	0xe000ed00

08004ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b083      	sub	sp, #12
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	db0b      	blt.n	8004f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004eea:	79fb      	ldrb	r3, [r7, #7]
 8004eec:	f003 021f 	and.w	r2, r3, #31
 8004ef0:	4907      	ldr	r1, [pc, #28]	; (8004f10 <__NVIC_EnableIRQ+0x38>)
 8004ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef6:	095b      	lsrs	r3, r3, #5
 8004ef8:	2001      	movs	r0, #1
 8004efa:	fa00 f202 	lsl.w	r2, r0, r2
 8004efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004f02:	bf00      	nop
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr
 8004f0e:	bf00      	nop
 8004f10:	e000e100 	.word	0xe000e100

08004f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	6039      	str	r1, [r7, #0]
 8004f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	db0a      	blt.n	8004f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	490c      	ldr	r1, [pc, #48]	; (8004f60 <__NVIC_SetPriority+0x4c>)
 8004f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f32:	0112      	lsls	r2, r2, #4
 8004f34:	b2d2      	uxtb	r2, r2
 8004f36:	440b      	add	r3, r1
 8004f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004f3c:	e00a      	b.n	8004f54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	4908      	ldr	r1, [pc, #32]	; (8004f64 <__NVIC_SetPriority+0x50>)
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	3b04      	subs	r3, #4
 8004f4c:	0112      	lsls	r2, r2, #4
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	440b      	add	r3, r1
 8004f52:	761a      	strb	r2, [r3, #24]
}
 8004f54:	bf00      	nop
 8004f56:	370c      	adds	r7, #12
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	e000e100 	.word	0xe000e100
 8004f64:	e000ed00 	.word	0xe000ed00

08004f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b089      	sub	sp, #36	; 0x24
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	f1c3 0307 	rsb	r3, r3, #7
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	bf28      	it	cs
 8004f86:	2304      	movcs	r3, #4
 8004f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3304      	adds	r3, #4
 8004f8e:	2b06      	cmp	r3, #6
 8004f90:	d902      	bls.n	8004f98 <NVIC_EncodePriority+0x30>
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	3b03      	subs	r3, #3
 8004f96:	e000      	b.n	8004f9a <NVIC_EncodePriority+0x32>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa6:	43da      	mvns	r2, r3
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	401a      	ands	r2, r3
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fb0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	43d9      	mvns	r1, r3
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fc0:	4313      	orrs	r3, r2
         );
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3724      	adds	r7, #36	; 0x24
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fe0:	d301      	bcc.n	8004fe6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e00f      	b.n	8005006 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fe6:	4a0a      	ldr	r2, [pc, #40]	; (8005010 <SysTick_Config+0x40>)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	3b01      	subs	r3, #1
 8004fec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fee:	210f      	movs	r1, #15
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ff4:	f7ff ff8e 	bl	8004f14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <SysTick_Config+0x40>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ffe:	4b04      	ldr	r3, [pc, #16]	; (8005010 <SysTick_Config+0x40>)
 8005000:	2207      	movs	r2, #7
 8005002:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	e000e010 	.word	0xe000e010

08005014 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7ff ff29 	bl	8004e74 <__NVIC_SetPriorityGrouping>
}
 8005022:	bf00      	nop
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b086      	sub	sp, #24
 800502e:	af00      	add	r7, sp, #0
 8005030:	4603      	mov	r3, r0
 8005032:	60b9      	str	r1, [r7, #8]
 8005034:	607a      	str	r2, [r7, #4]
 8005036:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005038:	f7ff ff40 	bl	8004ebc <__NVIC_GetPriorityGrouping>
 800503c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	68b9      	ldr	r1, [r7, #8]
 8005042:	6978      	ldr	r0, [r7, #20]
 8005044:	f7ff ff90 	bl	8004f68 <NVIC_EncodePriority>
 8005048:	4602      	mov	r2, r0
 800504a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800504e:	4611      	mov	r1, r2
 8005050:	4618      	mov	r0, r3
 8005052:	f7ff ff5f 	bl	8004f14 <__NVIC_SetPriority>
}
 8005056:	bf00      	nop
 8005058:	3718      	adds	r7, #24
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}

0800505e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800505e:	b580      	push	{r7, lr}
 8005060:	b082      	sub	sp, #8
 8005062:	af00      	add	r7, sp, #0
 8005064:	4603      	mov	r3, r0
 8005066:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506c:	4618      	mov	r0, r3
 800506e:	f7ff ff33 	bl	8004ed8 <__NVIC_EnableIRQ>
}
 8005072:	bf00      	nop
 8005074:	3708      	adds	r7, #8
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800507a:	b580      	push	{r7, lr}
 800507c:	b082      	sub	sp, #8
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7ff ffa4 	bl	8004fd0 <SysTick_Config>
 8005088:	4603      	mov	r3, r0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3708      	adds	r7, #8
 800508e:	46bd      	mov	sp, r7
 8005090:	bd80      	pop	{r7, pc}
	...

08005094 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b084      	sub	sp, #16
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e147      	b.n	8005336 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d106      	bne.n	80050c0 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff fbd8 	bl	8004870 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0210 	bic.w	r2, r2, #16
 80050ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050d0:	f7ff fec4 	bl	8004e5c <HAL_GetTick>
 80050d4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80050d6:	e012      	b.n	80050fe <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80050d8:	f7ff fec0 	bl	8004e5c <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b0a      	cmp	r3, #10
 80050e4:	d90b      	bls.n	80050fe <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ea:	f043 0201 	orr.w	r2, r3, #1
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2203      	movs	r2, #3
 80050f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e11b      	b.n	8005336 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b08      	cmp	r3, #8
 800510a:	d0e5      	beq.n	80050d8 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699a      	ldr	r2, [r3, #24]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0201 	orr.w	r2, r2, #1
 800511a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800511c:	f7ff fe9e 	bl	8004e5c <HAL_GetTick>
 8005120:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005122:	e012      	b.n	800514a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005124:	f7ff fe9a 	bl	8004e5c <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b0a      	cmp	r3, #10
 8005130:	d90b      	bls.n	800514a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005136:	f043 0201 	orr.w	r2, r3, #1
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2203      	movs	r2, #3
 8005142:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e0f5      	b.n	8005336 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0e5      	beq.n	8005124 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	699a      	ldr	r2, [r3, #24]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0202 	orr.w	r2, r2, #2
 8005166:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a74      	ldr	r2, [pc, #464]	; (8005340 <HAL_FDCAN_Init+0x2ac>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d103      	bne.n	800517a <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8005172:	4a74      	ldr	r2, [pc, #464]	; (8005344 <HAL_FDCAN_Init+0x2b0>)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	7c1b      	ldrb	r3, [r3, #16]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d108      	bne.n	8005194 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005190:	619a      	str	r2, [r3, #24]
 8005192:	e007      	b.n	80051a4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051a2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	7c5b      	ldrb	r3, [r3, #17]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d108      	bne.n	80051be <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	699a      	ldr	r2, [r3, #24]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ba:	619a      	str	r2, [r3, #24]
 80051bc:	e007      	b.n	80051ce <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	699a      	ldr	r2, [r3, #24]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80051cc:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	7c9b      	ldrb	r3, [r3, #18]
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d108      	bne.n	80051e8 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051e4:	619a      	str	r2, [r3, #24]
 80051e6:	e007      	b.n	80051f8 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80051f6:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	430a      	orrs	r2, r1
 800520c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	699a      	ldr	r2, [r3, #24]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800521c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0210 	bic.w	r2, r2, #16
 800522c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d108      	bne.n	8005248 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	699a      	ldr	r2, [r3, #24]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f042 0204 	orr.w	r2, r2, #4
 8005244:	619a      	str	r2, [r3, #24]
 8005246:	e02c      	b.n	80052a2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d028      	beq.n	80052a2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	2b02      	cmp	r3, #2
 8005256:	d01c      	beq.n	8005292 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699a      	ldr	r2, [r3, #24]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005266:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691a      	ldr	r2, [r3, #16]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f042 0210 	orr.w	r2, r2, #16
 8005276:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	2b03      	cmp	r3, #3
 800527e:	d110      	bne.n	80052a2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699a      	ldr	r2, [r3, #24]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0220 	orr.w	r2, r2, #32
 800528e:	619a      	str	r2, [r3, #24]
 8005290:	e007      	b.n	80052a2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	699a      	ldr	r2, [r3, #24]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f042 0220 	orr.w	r2, r2, #32
 80052a0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	3b01      	subs	r3, #1
 80052a8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	69db      	ldr	r3, [r3, #28]
 80052ae:	3b01      	subs	r3, #1
 80052b0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80052b2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80052ba:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80052ca:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80052cc:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052d6:	d115      	bne.n	8005304 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e2:	3b01      	subs	r3, #1
 80052e4:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052e6:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	3b01      	subs	r3, #1
 80052ee:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80052f0:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	3b01      	subs	r3, #1
 80052fa:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005300:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005302:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fbb8 	bl	8005a90 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2200      	movs	r2, #0
 800532a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	40006400 	.word	0x40006400
 8005344:	40006500 	.word	0x40006500

08005348 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b01      	cmp	r3, #1
 800535a:	d110      	bne.n	800537e <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699a      	ldr	r2, [r3, #24]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0201 	bic.w	r2, r2, #1
 8005372:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	e006      	b.n	800538c <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005382:	f043 0204 	orr.w	r2, r3, #4
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
  }
}
 800538c:	4618      	mov	r0, r3
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8005398:	b480      	push	{r7}
 800539a:	b08b      	sub	sp, #44	; 0x2c
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80053b0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80053b2:	7efb      	ldrb	r3, [r7, #27]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	f040 80e8 	bne.w	800558a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2b40      	cmp	r3, #64	; 0x40
 80053be:	d137      	bne.n	8005430 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c8:	f003 030f 	and.w	r3, r3, #15
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d107      	bne.n	80053e0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053d4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e0db      	b.n	8005598 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e8:	0e1b      	lsrs	r3, r3, #24
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d10a      	bne.n	8005408 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fa:	0a5b      	lsrs	r3, r3, #9
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d101      	bne.n	8005408 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005404:	2301      	movs	r3, #1
 8005406:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005410:	0a1b      	lsrs	r3, r3, #8
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	69fa      	ldr	r2, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8005420:	69fa      	ldr	r2, [r7, #28]
 8005422:	4613      	mov	r3, r2
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	4413      	add	r3, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	440b      	add	r3, r1
 800542c:	627b      	str	r3, [r7, #36]	; 0x24
 800542e:	e036      	b.n	800549e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005438:	f003 030f 	and.w	r3, r3, #15
 800543c:	2b00      	cmp	r3, #0
 800543e:	d107      	bne.n	8005450 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005444:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e0a3      	b.n	8005598 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005458:	0e1b      	lsrs	r3, r3, #24
 800545a:	f003 0301 	and.w	r3, r3, #1
 800545e:	2b01      	cmp	r3, #1
 8005460:	d10a      	bne.n	8005478 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800546a:	0a1b      	lsrs	r3, r3, #8
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b01      	cmp	r3, #1
 8005472:	d101      	bne.n	8005478 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8005474:	2301      	movs	r3, #1
 8005476:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005480:	0a1b      	lsrs	r3, r3, #8
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005490:	69fa      	ldr	r2, [r7, #28]
 8005492:	4613      	mov	r3, r2
 8005494:	00db      	lsls	r3, r3, #3
 8005496:	4413      	add	r3, r2
 8005498:	00db      	lsls	r3, r3, #3
 800549a:	440b      	add	r3, r1
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d107      	bne.n	80054c2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80054b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	0c9b      	lsrs	r3, r3, #18
 80054b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	601a      	str	r2, [r3, #0]
 80054c0:	e005      	b.n	80054ce <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80054ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80054e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e8:	3304      	adds	r3, #4
 80054ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80054ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	b29a      	uxth	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	0c1b      	lsrs	r3, r3, #16
 80054fc:	f003 020f 	and.w	r2, r3, #15
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800551c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	0e1b      	lsrs	r3, r3, #24
 8005522:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800552a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	0fda      	lsrs	r2, r3, #31
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	3304      	adds	r3, #4
 8005538:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800553e:	2300      	movs	r3, #0
 8005540:	623b      	str	r3, [r7, #32]
 8005542:	e00a      	b.n	800555a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	441a      	add	r2, r3
 800554a:	6839      	ldr	r1, [r7, #0]
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	440b      	add	r3, r1
 8005550:	7812      	ldrb	r2, [r2, #0]
 8005552:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8005554:	6a3b      	ldr	r3, [r7, #32]
 8005556:	3301      	adds	r3, #1
 8005558:	623b      	str	r3, [r7, #32]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	4a11      	ldr	r2, [pc, #68]	; (80055a4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8005560:	5cd3      	ldrb	r3, [r2, r3]
 8005562:	461a      	mov	r2, r3
 8005564:	6a3b      	ldr	r3, [r7, #32]
 8005566:	4293      	cmp	r3, r2
 8005568:	d3ec      	bcc.n	8005544 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2b40      	cmp	r3, #64	; 0x40
 800556e:	d105      	bne.n	800557c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800557a:	e004      	b.n	8005586 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	69fa      	ldr	r2, [r7, #28]
 8005582:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8005586:	2300      	movs	r3, #0
 8005588:	e006      	b.n	8005598 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800558e:	f043 0208 	orr.w	r2, r3, #8
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
  }
}
 8005598:	4618      	mov	r0, r3
 800559a:	372c      	adds	r7, #44	; 0x2c
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	08009a20 	.word	0x08009a20

080055a8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80055a8:	b480      	push	{r7}
 80055aa:	b087      	sub	sp, #28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80055ba:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80055bc:	7dfb      	ldrb	r3, [r7, #23]
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d003      	beq.n	80055ca <HAL_FDCAN_ActivateNotification+0x22>
 80055c2:	7dfb      	ldrb	r3, [r7, #23]
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	f040 80c8 	bne.w	800575a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d004      	beq.n	80055e6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d03b      	beq.n	800565e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d004      	beq.n	80055fa <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d031      	beq.n	800565e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8005600:	2b00      	cmp	r3, #0
 8005602:	d004      	beq.n	800560e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	f003 0304 	and.w	r3, r3, #4
 800560a:	2b00      	cmp	r3, #0
 800560c:	d027      	beq.n	800565e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8005614:	2b00      	cmp	r3, #0
 8005616:	d004      	beq.n	8005622 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f003 0308 	and.w	r3, r3, #8
 800561e:	2b00      	cmp	r3, #0
 8005620:	d01d      	beq.n	800565e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005628:	2b00      	cmp	r3, #0
 800562a:	d004      	beq.n	8005636 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	f003 0310 	and.w	r3, r3, #16
 8005632:	2b00      	cmp	r3, #0
 8005634:	d013      	beq.n	800565e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800563c:	2b00      	cmp	r3, #0
 800563e:	d004      	beq.n	800564a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f003 0320 	and.w	r3, r3, #32
 8005646:	2b00      	cmp	r3, #0
 8005648:	d009      	beq.n	800565e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00c      	beq.n	800566e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565a:	2b00      	cmp	r3, #0
 800565c:	d107      	bne.n	800566e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f042 0201 	orr.w	r2, r2, #1
 800566c:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	f003 0307 	and.w	r3, r3, #7
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	d13b      	bne.n	80056fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	f003 0302 	and.w	r3, r3, #2
 8005692:	2b00      	cmp	r3, #0
 8005694:	d131      	bne.n	80056fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800569c:	2b00      	cmp	r3, #0
 800569e:	d004      	beq.n	80056aa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d127      	bne.n	80056fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d004      	beq.n	80056be <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f003 0308 	and.w	r3, r3, #8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d11d      	bne.n	80056fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	f003 0310 	and.w	r3, r3, #16
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d113      	bne.n	80056fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d004      	beq.n	80056e6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f003 0320 	and.w	r3, r3, #32
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00c      	beq.n	800570a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d007      	beq.n	800570a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f042 0202 	orr.w	r2, r2, #2
 8005708:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005710:	2b00      	cmp	r3, #0
 8005712:	d009      	beq.n	8005728 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	430a      	orrs	r2, r1
 8005724:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d009      	beq.n	8005746 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	430a      	orrs	r2, r1
 8005742:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68ba      	ldr	r2, [r7, #8]
 8005752:	430a      	orrs	r2, r1
 8005754:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8005756:	2300      	movs	r3, #0
 8005758:	e006      	b.n	8005768 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575e:	f043 0202 	orr.w	r2, r3, #2
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
  }
}
 8005768:	4618      	mov	r0, r3
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b08c      	sub	sp, #48	; 0x30
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005782:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005786:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800578e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005790:	4013      	ands	r3, r2
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057a8:	4013      	ands	r3, r2
 80057aa:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c0:	4013      	ands	r3, r2
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057ca:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80057ce:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d6:	6a3a      	ldr	r2, [r7, #32]
 80057d8:	4013      	ands	r3, r2
 80057da:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057e2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80057e6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057ee:	69fa      	ldr	r2, [r7, #28]
 80057f0:	4013      	ands	r3, r2
 80057f2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fa:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005802:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005814:	2b00      	cmp	r3, #0
 8005816:	d006      	beq.n	8005826 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2240      	movs	r2, #64	; 0x40
 800581e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f916 	bl	8005a52 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d019      	beq.n	8005864 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005836:	2b00      	cmp	r3, #0
 8005838:	d014      	beq.n	8005864 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005842:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800584c:	693a      	ldr	r2, [r7, #16]
 800584e:	4013      	ands	r3, r2
 8005850:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800585a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800585c:	6939      	ldr	r1, [r7, #16]
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f000 f8d8 	bl	8005a14 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005866:	2b00      	cmp	r3, #0
 8005868:	d007      	beq.n	800587a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005870:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005872:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005874:	6878      	ldr	r0, [r7, #4]
 8005876:	f000 f8a2 	bl	80059be <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	2b00      	cmp	r3, #0
 800587e:	d007      	beq.n	8005890 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005886:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fc f8f4 	bl	8001a78 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8005890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005892:	2b00      	cmp	r3, #0
 8005894:	d007      	beq.n	80058a6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800589c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800589e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f897 	bl	80059d4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00c      	beq.n	80058ca <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d007      	beq.n	80058ca <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058c2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f890 	bl	80059ea <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d018      	beq.n	8005906 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d013      	beq.n	8005906 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80058e6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80058f0:	68fa      	ldr	r2, [r7, #12]
 80058f2:	4013      	ands	r3, r2
 80058f4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2280      	movs	r2, #128	; 0x80
 80058fc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80058fe:	68f9      	ldr	r1, [r7, #12]
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 f87c 	bl	80059fe <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00c      	beq.n	800592a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005922:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 f880 	bl	8005a2a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00c      	beq.n	800594e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d007      	beq.n	800594e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005946:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f000 f878 	bl	8005a3e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d00f      	beq.n	8005978 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800596a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005970:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d007      	beq.n	800598e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005986:	69f9      	ldr	r1, [r7, #28]
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f876 	bl	8005a7a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6a3a      	ldr	r2, [r7, #32]
 800599a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d002      	beq.n	80059b6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f858 	bl	8005a66 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80059b6:	bf00      	nop
 80059b8:	3730      	adds	r7, #48	; 0x30
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80059be:	b480      	push	{r7}
 80059c0:	b083      	sub	sp, #12
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
 8005a06:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr

08005a3e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b083      	sub	sp, #12
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8005a46:	bf00      	nop
 8005a48:	370c      	adds	r7, #12
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8005a5a:	bf00      	nop
 8005a5c:	370c      	adds	r7, #12
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr

08005a66 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005a66:	b480      	push	{r7}
 8005a68:	b083      	sub	sp, #12
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8005a98:	4b27      	ldr	r3, [pc, #156]	; (8005b38 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8005a9a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aaa:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab2:	041a      	lsls	r2, r3, #16
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ad0:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	061a      	lsls	r2, r3, #24
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	e005      	b.n	8005b1e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	3304      	adds	r3, #4
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d3f3      	bcc.n	8005b12 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8005b2a:	bf00      	nop
 8005b2c:	bf00      	nop
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr
 8005b38:	4000a400 	.word	0x4000a400

08005b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005b4a:	e15a      	b.n	8005e02 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	2101      	movs	r1, #1
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	fa01 f303 	lsl.w	r3, r1, r3
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f000 814c 	beq.w	8005dfc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f003 0303 	and.w	r3, r3, #3
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d005      	beq.n	8005b7c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005b78:	2b02      	cmp	r3, #2
 8005b7a:	d130      	bne.n	8005bde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	2203      	movs	r2, #3
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4013      	ands	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	005b      	lsls	r3, r3, #1
 8005b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43db      	mvns	r3, r3
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	091b      	lsrs	r3, r3, #4
 8005bc8:	f003 0201 	and.w	r2, r3, #1
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d017      	beq.n	8005c1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	2203      	movs	r2, #3
 8005bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bfa:	43db      	mvns	r3, r3
 8005bfc:	693a      	ldr	r2, [r7, #16]
 8005bfe:	4013      	ands	r3, r2
 8005c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	689a      	ldr	r2, [r3, #8]
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	693a      	ldr	r2, [r7, #16]
 8005c18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d123      	bne.n	8005c6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	08da      	lsrs	r2, r3, #3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	3208      	adds	r2, #8
 8005c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f003 0307 	and.w	r3, r3, #7
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	220f      	movs	r2, #15
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	43db      	mvns	r3, r3
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4013      	ands	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f003 0307 	and.w	r3, r3, #7
 8005c54:	009b      	lsls	r3, r3, #2
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	08da      	lsrs	r2, r3, #3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3208      	adds	r2, #8
 8005c68:	6939      	ldr	r1, [r7, #16]
 8005c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	2203      	movs	r2, #3
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	43db      	mvns	r3, r3
 8005c80:	693a      	ldr	r2, [r7, #16]
 8005c82:	4013      	ands	r3, r2
 8005c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	f003 0203 	and.w	r2, r3, #3
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	005b      	lsls	r3, r3, #1
 8005c92:	fa02 f303 	lsl.w	r3, r2, r3
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80a6 	beq.w	8005dfc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cb0:	4b5b      	ldr	r3, [pc, #364]	; (8005e20 <HAL_GPIO_Init+0x2e4>)
 8005cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb4:	4a5a      	ldr	r2, [pc, #360]	; (8005e20 <HAL_GPIO_Init+0x2e4>)
 8005cb6:	f043 0301 	orr.w	r3, r3, #1
 8005cba:	6613      	str	r3, [r2, #96]	; 0x60
 8005cbc:	4b58      	ldr	r3, [pc, #352]	; (8005e20 <HAL_GPIO_Init+0x2e4>)
 8005cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	60bb      	str	r3, [r7, #8]
 8005cc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005cc8:	4a56      	ldr	r2, [pc, #344]	; (8005e24 <HAL_GPIO_Init+0x2e8>)
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	089b      	lsrs	r3, r3, #2
 8005cce:	3302      	adds	r3, #2
 8005cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f003 0303 	and.w	r3, r3, #3
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	220f      	movs	r2, #15
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	43db      	mvns	r3, r3
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005cf2:	d01f      	beq.n	8005d34 <HAL_GPIO_Init+0x1f8>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a4c      	ldr	r2, [pc, #304]	; (8005e28 <HAL_GPIO_Init+0x2ec>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d019      	beq.n	8005d30 <HAL_GPIO_Init+0x1f4>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a4b      	ldr	r2, [pc, #300]	; (8005e2c <HAL_GPIO_Init+0x2f0>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d013      	beq.n	8005d2c <HAL_GPIO_Init+0x1f0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a4a      	ldr	r2, [pc, #296]	; (8005e30 <HAL_GPIO_Init+0x2f4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00d      	beq.n	8005d28 <HAL_GPIO_Init+0x1ec>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a49      	ldr	r2, [pc, #292]	; (8005e34 <HAL_GPIO_Init+0x2f8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <HAL_GPIO_Init+0x1e8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a48      	ldr	r2, [pc, #288]	; (8005e38 <HAL_GPIO_Init+0x2fc>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d101      	bne.n	8005d20 <HAL_GPIO_Init+0x1e4>
 8005d1c:	2305      	movs	r3, #5
 8005d1e:	e00a      	b.n	8005d36 <HAL_GPIO_Init+0x1fa>
 8005d20:	2306      	movs	r3, #6
 8005d22:	e008      	b.n	8005d36 <HAL_GPIO_Init+0x1fa>
 8005d24:	2304      	movs	r3, #4
 8005d26:	e006      	b.n	8005d36 <HAL_GPIO_Init+0x1fa>
 8005d28:	2303      	movs	r3, #3
 8005d2a:	e004      	b.n	8005d36 <HAL_GPIO_Init+0x1fa>
 8005d2c:	2302      	movs	r3, #2
 8005d2e:	e002      	b.n	8005d36 <HAL_GPIO_Init+0x1fa>
 8005d30:	2301      	movs	r3, #1
 8005d32:	e000      	b.n	8005d36 <HAL_GPIO_Init+0x1fa>
 8005d34:	2300      	movs	r3, #0
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	f002 0203 	and.w	r2, r2, #3
 8005d3c:	0092      	lsls	r2, r2, #2
 8005d3e:	4093      	lsls	r3, r2
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005d46:	4937      	ldr	r1, [pc, #220]	; (8005e24 <HAL_GPIO_Init+0x2e8>)
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	089b      	lsrs	r3, r3, #2
 8005d4c:	3302      	adds	r3, #2
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d54:	4b39      	ldr	r3, [pc, #228]	; (8005e3c <HAL_GPIO_Init+0x300>)
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	43db      	mvns	r3, r3
 8005d5e:	693a      	ldr	r2, [r7, #16]
 8005d60:	4013      	ands	r3, r2
 8005d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d003      	beq.n	8005d78 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005d78:	4a30      	ldr	r2, [pc, #192]	; (8005e3c <HAL_GPIO_Init+0x300>)
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005d7e:	4b2f      	ldr	r3, [pc, #188]	; (8005e3c <HAL_GPIO_Init+0x300>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	43db      	mvns	r3, r3
 8005d88:	693a      	ldr	r2, [r7, #16]
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d003      	beq.n	8005da2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005da2:	4a26      	ldr	r2, [pc, #152]	; (8005e3c <HAL_GPIO_Init+0x300>)
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005da8:	4b24      	ldr	r3, [pc, #144]	; (8005e3c <HAL_GPIO_Init+0x300>)
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	43db      	mvns	r3, r3
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	4013      	ands	r3, r2
 8005db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005dcc:	4a1b      	ldr	r2, [pc, #108]	; (8005e3c <HAL_GPIO_Init+0x300>)
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005dd2:	4b1a      	ldr	r3, [pc, #104]	; (8005e3c <HAL_GPIO_Init+0x300>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4013      	ands	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d003      	beq.n	8005df6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005df6:	4a11      	ldr	r2, [pc, #68]	; (8005e3c <HAL_GPIO_Init+0x300>)
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	fa22 f303 	lsr.w	r3, r2, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f47f ae9d 	bne.w	8005b4c <HAL_GPIO_Init+0x10>
  }
}
 8005e12:	bf00      	nop
 8005e14:	bf00      	nop
 8005e16:	371c      	adds	r7, #28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	40021000 	.word	0x40021000
 8005e24:	40010000 	.word	0x40010000
 8005e28:	48000400 	.word	0x48000400
 8005e2c:	48000800 	.word	0x48000800
 8005e30:	48000c00 	.word	0x48000c00
 8005e34:	48001000 	.word	0x48001000
 8005e38:	48001400 	.word	0x48001400
 8005e3c:	40010400 	.word	0x40010400

08005e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	807b      	strh	r3, [r7, #2]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005e50:	787b      	ldrb	r3, [r7, #1]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005e56:	887a      	ldrh	r2, [r7, #2]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005e5c:	e002      	b.n	8005e64 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005e5e:	887a      	ldrh	r2, [r7, #2]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005e64:	bf00      	nop
 8005e66:	370c      	adds	r7, #12
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6e:	4770      	bx	lr

08005e70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d141      	bne.n	8005f02 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e7e:	4b4b      	ldr	r3, [pc, #300]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8a:	d131      	bne.n	8005ef0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e8c:	4b47      	ldr	r3, [pc, #284]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e92:	4a46      	ldr	r2, [pc, #280]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e9c:	4b43      	ldr	r3, [pc, #268]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005ea4:	4a41      	ldr	r2, [pc, #260]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eaa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005eac:	4b40      	ldr	r3, [pc, #256]	; (8005fb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2232      	movs	r2, #50	; 0x32
 8005eb2:	fb02 f303 	mul.w	r3, r2, r3
 8005eb6:	4a3f      	ldr	r2, [pc, #252]	; (8005fb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebc:	0c9b      	lsrs	r3, r3, #18
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ec2:	e002      	b.n	8005eca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005eca:	4b38      	ldr	r3, [pc, #224]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed6:	d102      	bne.n	8005ede <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1f2      	bne.n	8005ec4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ede:	4b33      	ldr	r3, [pc, #204]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eea:	d158      	bne.n	8005f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e057      	b.n	8005fa0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ef0:	4b2e      	ldr	r3, [pc, #184]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef6:	4a2d      	ldr	r2, [pc, #180]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005efc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005f00:	e04d      	b.n	8005f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f08:	d141      	bne.n	8005f8e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005f0a:	4b28      	ldr	r3, [pc, #160]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f16:	d131      	bne.n	8005f7c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f18:	4b24      	ldr	r3, [pc, #144]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f1e:	4a23      	ldr	r2, [pc, #140]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005f28:	4b20      	ldr	r3, [pc, #128]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f30:	4a1e      	ldr	r2, [pc, #120]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f32:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f36:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005f38:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2232      	movs	r2, #50	; 0x32
 8005f3e:	fb02 f303 	mul.w	r3, r2, r3
 8005f42:	4a1c      	ldr	r2, [pc, #112]	; (8005fb4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005f44:	fba2 2303 	umull	r2, r3, r2, r3
 8005f48:	0c9b      	lsrs	r3, r3, #18
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f4e:	e002      	b.n	8005f56 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3b01      	subs	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005f56:	4b15      	ldr	r3, [pc, #84]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f62:	d102      	bne.n	8005f6a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d1f2      	bne.n	8005f50 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005f6a:	4b10      	ldr	r3, [pc, #64]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f76:	d112      	bne.n	8005f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e011      	b.n	8005fa0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005f7c:	4b0b      	ldr	r3, [pc, #44]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f82:	4a0a      	ldr	r2, [pc, #40]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005f8c:	e007      	b.n	8005f9e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005f8e:	4b07      	ldr	r3, [pc, #28]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005f96:	4a05      	ldr	r2, [pc, #20]	; (8005fac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005f98:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005f9c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005f9e:	2300      	movs	r3, #0
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	40007000 	.word	0x40007000
 8005fb0:	20000000 	.word	0x20000000
 8005fb4:	431bde83 	.word	0x431bde83

08005fb8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005fbc:	4b05      	ldr	r3, [pc, #20]	; (8005fd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	4a04      	ldr	r2, [pc, #16]	; (8005fd4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005fc6:	6093      	str	r3, [r2, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr
 8005fd2:	bf00      	nop
 8005fd4:	40007000 	.word	0x40007000

08005fd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e2fe      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f003 0301 	and.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d075      	beq.n	80060e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ff6:	4b97      	ldr	r3, [pc, #604]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 030c 	and.w	r3, r3, #12
 8005ffe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006000:	4b94      	ldr	r3, [pc, #592]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	f003 0303 	and.w	r3, r3, #3
 8006008:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	2b0c      	cmp	r3, #12
 800600e:	d102      	bne.n	8006016 <HAL_RCC_OscConfig+0x3e>
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	2b03      	cmp	r3, #3
 8006014:	d002      	beq.n	800601c <HAL_RCC_OscConfig+0x44>
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	2b08      	cmp	r3, #8
 800601a:	d10b      	bne.n	8006034 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800601c:	4b8d      	ldr	r3, [pc, #564]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d05b      	beq.n	80060e0 <HAL_RCC_OscConfig+0x108>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d157      	bne.n	80060e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006030:	2301      	movs	r3, #1
 8006032:	e2d9      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800603c:	d106      	bne.n	800604c <HAL_RCC_OscConfig+0x74>
 800603e:	4b85      	ldr	r3, [pc, #532]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a84      	ldr	r2, [pc, #528]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	e01d      	b.n	8006088 <HAL_RCC_OscConfig+0xb0>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006054:	d10c      	bne.n	8006070 <HAL_RCC_OscConfig+0x98>
 8006056:	4b7f      	ldr	r3, [pc, #508]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a7e      	ldr	r2, [pc, #504]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 800605c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006060:	6013      	str	r3, [r2, #0]
 8006062:	4b7c      	ldr	r3, [pc, #496]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a7b      	ldr	r2, [pc, #492]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800606c:	6013      	str	r3, [r2, #0]
 800606e:	e00b      	b.n	8006088 <HAL_RCC_OscConfig+0xb0>
 8006070:	4b78      	ldr	r3, [pc, #480]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a77      	ldr	r2, [pc, #476]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800607a:	6013      	str	r3, [r2, #0]
 800607c:	4b75      	ldr	r3, [pc, #468]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	4a74      	ldr	r2, [pc, #464]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d013      	beq.n	80060b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006090:	f7fe fee4 	bl	8004e5c <HAL_GetTick>
 8006094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006096:	e008      	b.n	80060aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006098:	f7fe fee0 	bl	8004e5c <HAL_GetTick>
 800609c:	4602      	mov	r2, r0
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	1ad3      	subs	r3, r2, r3
 80060a2:	2b64      	cmp	r3, #100	; 0x64
 80060a4:	d901      	bls.n	80060aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e29e      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060aa:	4b6a      	ldr	r3, [pc, #424]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d0f0      	beq.n	8006098 <HAL_RCC_OscConfig+0xc0>
 80060b6:	e014      	b.n	80060e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b8:	f7fe fed0 	bl	8004e5c <HAL_GetTick>
 80060bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80060c0:	f7fe fecc 	bl	8004e5c <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b64      	cmp	r3, #100	; 0x64
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e28a      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80060d2:	4b60      	ldr	r3, [pc, #384]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0xe8>
 80060de:	e000      	b.n	80060e2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d075      	beq.n	80061da <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80060ee:	4b59      	ldr	r3, [pc, #356]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 030c 	and.w	r3, r3, #12
 80060f6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80060f8:	4b56      	ldr	r3, [pc, #344]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 80060fa:	68db      	ldr	r3, [r3, #12]
 80060fc:	f003 0303 	and.w	r3, r3, #3
 8006100:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	2b0c      	cmp	r3, #12
 8006106:	d102      	bne.n	800610e <HAL_RCC_OscConfig+0x136>
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	2b02      	cmp	r3, #2
 800610c:	d002      	beq.n	8006114 <HAL_RCC_OscConfig+0x13c>
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b04      	cmp	r3, #4
 8006112:	d11f      	bne.n	8006154 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006114:	4b4f      	ldr	r3, [pc, #316]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <HAL_RCC_OscConfig+0x154>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d101      	bne.n	800612c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e25d      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800612c:	4b49      	ldr	r3, [pc, #292]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	061b      	lsls	r3, r3, #24
 800613a:	4946      	ldr	r1, [pc, #280]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 800613c:	4313      	orrs	r3, r2
 800613e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006140:	4b45      	ldr	r3, [pc, #276]	; (8006258 <HAL_RCC_OscConfig+0x280>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	4618      	mov	r0, r3
 8006146:	f7fe fe3d 	bl	8004dc4 <HAL_InitTick>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d043      	beq.n	80061d8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	e249      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d023      	beq.n	80061a4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800615c:	4b3d      	ldr	r3, [pc, #244]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a3c      	ldr	r2, [pc, #240]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006166:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006168:	f7fe fe78 	bl	8004e5c <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006170:	f7fe fe74 	bl	8004e5c <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b02      	cmp	r3, #2
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e232      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006182:	4b34      	ldr	r3, [pc, #208]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800618a:	2b00      	cmp	r3, #0
 800618c:	d0f0      	beq.n	8006170 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800618e:	4b31      	ldr	r3, [pc, #196]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	061b      	lsls	r3, r3, #24
 800619c:	492d      	ldr	r1, [pc, #180]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 800619e:	4313      	orrs	r3, r2
 80061a0:	604b      	str	r3, [r1, #4]
 80061a2:	e01a      	b.n	80061da <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061a4:	4b2b      	ldr	r3, [pc, #172]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a2a      	ldr	r2, [pc, #168]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 80061aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061b0:	f7fe fe54 	bl	8004e5c <HAL_GetTick>
 80061b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061b6:	e008      	b.n	80061ca <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80061b8:	f7fe fe50 	bl	8004e5c <HAL_GetTick>
 80061bc:	4602      	mov	r2, r0
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	1ad3      	subs	r3, r2, r3
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d901      	bls.n	80061ca <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e20e      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80061ca:	4b22      	ldr	r3, [pc, #136]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1f0      	bne.n	80061b8 <HAL_RCC_OscConfig+0x1e0>
 80061d6:	e000      	b.n	80061da <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80061d8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f003 0308 	and.w	r3, r3, #8
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d041      	beq.n	800626a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	695b      	ldr	r3, [r3, #20]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d01c      	beq.n	8006228 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061ee:	4b19      	ldr	r3, [pc, #100]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 80061f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061f4:	4a17      	ldr	r2, [pc, #92]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 80061f6:	f043 0301 	orr.w	r3, r3, #1
 80061fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061fe:	f7fe fe2d 	bl	8004e5c <HAL_GetTick>
 8006202:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006204:	e008      	b.n	8006218 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006206:	f7fe fe29 	bl	8004e5c <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e1e7      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006218:	4b0e      	ldr	r3, [pc, #56]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 800621a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b00      	cmp	r3, #0
 8006224:	d0ef      	beq.n	8006206 <HAL_RCC_OscConfig+0x22e>
 8006226:	e020      	b.n	800626a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006228:	4b0a      	ldr	r3, [pc, #40]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 800622a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800622e:	4a09      	ldr	r2, [pc, #36]	; (8006254 <HAL_RCC_OscConfig+0x27c>)
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006238:	f7fe fe10 	bl	8004e5c <HAL_GetTick>
 800623c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800623e:	e00d      	b.n	800625c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006240:	f7fe fe0c 	bl	8004e5c <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	2b02      	cmp	r3, #2
 800624c:	d906      	bls.n	800625c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800624e:	2303      	movs	r3, #3
 8006250:	e1ca      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
 8006252:	bf00      	nop
 8006254:	40021000 	.word	0x40021000
 8006258:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800625c:	4b8c      	ldr	r3, [pc, #560]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 800625e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1ea      	bne.n	8006240 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f003 0304 	and.w	r3, r3, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	f000 80a6 	beq.w	80063c4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006278:	2300      	movs	r3, #0
 800627a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800627c:	4b84      	ldr	r3, [pc, #528]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 800627e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006280:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <HAL_RCC_OscConfig+0x2b4>
 8006288:	2301      	movs	r3, #1
 800628a:	e000      	b.n	800628e <HAL_RCC_OscConfig+0x2b6>
 800628c:	2300      	movs	r3, #0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00d      	beq.n	80062ae <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006292:	4b7f      	ldr	r3, [pc, #508]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006296:	4a7e      	ldr	r2, [pc, #504]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800629c:	6593      	str	r3, [r2, #88]	; 0x58
 800629e:	4b7c      	ldr	r3, [pc, #496]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 80062a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80062aa:	2301      	movs	r3, #1
 80062ac:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062ae:	4b79      	ldr	r3, [pc, #484]	; (8006494 <HAL_RCC_OscConfig+0x4bc>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d118      	bne.n	80062ec <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80062ba:	4b76      	ldr	r3, [pc, #472]	; (8006494 <HAL_RCC_OscConfig+0x4bc>)
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a75      	ldr	r2, [pc, #468]	; (8006494 <HAL_RCC_OscConfig+0x4bc>)
 80062c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062c6:	f7fe fdc9 	bl	8004e5c <HAL_GetTick>
 80062ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062cc:	e008      	b.n	80062e0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062ce:	f7fe fdc5 	bl	8004e5c <HAL_GetTick>
 80062d2:	4602      	mov	r2, r0
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	2b02      	cmp	r3, #2
 80062da:	d901      	bls.n	80062e0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e183      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80062e0:	4b6c      	ldr	r3, [pc, #432]	; (8006494 <HAL_RCC_OscConfig+0x4bc>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d0f0      	beq.n	80062ce <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d108      	bne.n	8006306 <HAL_RCC_OscConfig+0x32e>
 80062f4:	4b66      	ldr	r3, [pc, #408]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 80062f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fa:	4a65      	ldr	r2, [pc, #404]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 80062fc:	f043 0301 	orr.w	r3, r3, #1
 8006300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006304:	e024      	b.n	8006350 <HAL_RCC_OscConfig+0x378>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b05      	cmp	r3, #5
 800630c:	d110      	bne.n	8006330 <HAL_RCC_OscConfig+0x358>
 800630e:	4b60      	ldr	r3, [pc, #384]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006310:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006314:	4a5e      	ldr	r2, [pc, #376]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006316:	f043 0304 	orr.w	r3, r3, #4
 800631a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800631e:	4b5c      	ldr	r3, [pc, #368]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006324:	4a5a      	ldr	r2, [pc, #360]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006326:	f043 0301 	orr.w	r3, r3, #1
 800632a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800632e:	e00f      	b.n	8006350 <HAL_RCC_OscConfig+0x378>
 8006330:	4b57      	ldr	r3, [pc, #348]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006336:	4a56      	ldr	r2, [pc, #344]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006338:	f023 0301 	bic.w	r3, r3, #1
 800633c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006340:	4b53      	ldr	r3, [pc, #332]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006346:	4a52      	ldr	r2, [pc, #328]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006348:	f023 0304 	bic.w	r3, r3, #4
 800634c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d016      	beq.n	8006386 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006358:	f7fe fd80 	bl	8004e5c <HAL_GetTick>
 800635c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800635e:	e00a      	b.n	8006376 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006360:	f7fe fd7c 	bl	8004e5c <HAL_GetTick>
 8006364:	4602      	mov	r2, r0
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	1ad3      	subs	r3, r2, r3
 800636a:	f241 3288 	movw	r2, #5000	; 0x1388
 800636e:	4293      	cmp	r3, r2
 8006370:	d901      	bls.n	8006376 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006372:	2303      	movs	r3, #3
 8006374:	e138      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006376:	4b46      	ldr	r3, [pc, #280]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800637c:	f003 0302 	and.w	r3, r3, #2
 8006380:	2b00      	cmp	r3, #0
 8006382:	d0ed      	beq.n	8006360 <HAL_RCC_OscConfig+0x388>
 8006384:	e015      	b.n	80063b2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006386:	f7fe fd69 	bl	8004e5c <HAL_GetTick>
 800638a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800638c:	e00a      	b.n	80063a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800638e:	f7fe fd65 	bl	8004e5c <HAL_GetTick>
 8006392:	4602      	mov	r2, r0
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	f241 3288 	movw	r2, #5000	; 0x1388
 800639c:	4293      	cmp	r3, r2
 800639e:	d901      	bls.n	80063a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80063a0:	2303      	movs	r3, #3
 80063a2:	e121      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80063a4:	4b3a      	ldr	r3, [pc, #232]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063aa:	f003 0302 	and.w	r3, r3, #2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d1ed      	bne.n	800638e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80063b2:	7ffb      	ldrb	r3, [r7, #31]
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d105      	bne.n	80063c4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80063b8:	4b35      	ldr	r3, [pc, #212]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 80063ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063bc:	4a34      	ldr	r2, [pc, #208]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 80063be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80063c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d03c      	beq.n	800644a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d01c      	beq.n	8006412 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80063d8:	4b2d      	ldr	r3, [pc, #180]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 80063da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80063de:	4a2c      	ldr	r2, [pc, #176]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 80063e0:	f043 0301 	orr.w	r3, r3, #1
 80063e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063e8:	f7fe fd38 	bl	8004e5c <HAL_GetTick>
 80063ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80063ee:	e008      	b.n	8006402 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063f0:	f7fe fd34 	bl	8004e5c <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d901      	bls.n	8006402 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e0f2      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006402:	4b23      	ldr	r3, [pc, #140]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006404:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0ef      	beq.n	80063f0 <HAL_RCC_OscConfig+0x418>
 8006410:	e01b      	b.n	800644a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006412:	4b1f      	ldr	r3, [pc, #124]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006414:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006418:	4a1d      	ldr	r2, [pc, #116]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 800641a:	f023 0301 	bic.w	r3, r3, #1
 800641e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006422:	f7fe fd1b 	bl	8004e5c <HAL_GetTick>
 8006426:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006428:	e008      	b.n	800643c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800642a:	f7fe fd17 	bl	8004e5c <HAL_GetTick>
 800642e:	4602      	mov	r2, r0
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	1ad3      	subs	r3, r2, r3
 8006434:	2b02      	cmp	r3, #2
 8006436:	d901      	bls.n	800643c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006438:	2303      	movs	r3, #3
 800643a:	e0d5      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800643c:	4b14      	ldr	r3, [pc, #80]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 800643e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1ef      	bne.n	800642a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69db      	ldr	r3, [r3, #28]
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 80c9 	beq.w	80065e6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006454:	4b0e      	ldr	r3, [pc, #56]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	f003 030c 	and.w	r3, r3, #12
 800645c:	2b0c      	cmp	r3, #12
 800645e:	f000 8083 	beq.w	8006568 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	69db      	ldr	r3, [r3, #28]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d15e      	bne.n	8006528 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800646a:	4b09      	ldr	r3, [pc, #36]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a08      	ldr	r2, [pc, #32]	; (8006490 <HAL_RCC_OscConfig+0x4b8>)
 8006470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006476:	f7fe fcf1 	bl	8004e5c <HAL_GetTick>
 800647a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800647c:	e00c      	b.n	8006498 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800647e:	f7fe fced 	bl	8004e5c <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	693b      	ldr	r3, [r7, #16]
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	2b02      	cmp	r3, #2
 800648a:	d905      	bls.n	8006498 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e0ab      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
 8006490:	40021000 	.word	0x40021000
 8006494:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006498:	4b55      	ldr	r3, [pc, #340]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1ec      	bne.n	800647e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064a4:	4b52      	ldr	r3, [pc, #328]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	4b52      	ldr	r3, [pc, #328]	; (80065f4 <HAL_RCC_OscConfig+0x61c>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	6a11      	ldr	r1, [r2, #32]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064b4:	3a01      	subs	r2, #1
 80064b6:	0112      	lsls	r2, r2, #4
 80064b8:	4311      	orrs	r1, r2
 80064ba:	687a      	ldr	r2, [r7, #4]
 80064bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80064be:	0212      	lsls	r2, r2, #8
 80064c0:	4311      	orrs	r1, r2
 80064c2:	687a      	ldr	r2, [r7, #4]
 80064c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80064c6:	0852      	lsrs	r2, r2, #1
 80064c8:	3a01      	subs	r2, #1
 80064ca:	0552      	lsls	r2, r2, #21
 80064cc:	4311      	orrs	r1, r2
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80064d2:	0852      	lsrs	r2, r2, #1
 80064d4:	3a01      	subs	r2, #1
 80064d6:	0652      	lsls	r2, r2, #25
 80064d8:	4311      	orrs	r1, r2
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80064de:	06d2      	lsls	r2, r2, #27
 80064e0:	430a      	orrs	r2, r1
 80064e2:	4943      	ldr	r1, [pc, #268]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 80064e4:	4313      	orrs	r3, r2
 80064e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064e8:	4b41      	ldr	r3, [pc, #260]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a40      	ldr	r2, [pc, #256]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 80064ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80064f4:	4b3e      	ldr	r3, [pc, #248]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	4a3d      	ldr	r2, [pc, #244]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 80064fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006500:	f7fe fcac 	bl	8004e5c <HAL_GetTick>
 8006504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006506:	e008      	b.n	800651a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006508:	f7fe fca8 	bl	8004e5c <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	2b02      	cmp	r3, #2
 8006514:	d901      	bls.n	800651a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e066      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800651a:	4b35      	ldr	r3, [pc, #212]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d0f0      	beq.n	8006508 <HAL_RCC_OscConfig+0x530>
 8006526:	e05e      	b.n	80065e6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006528:	4b31      	ldr	r3, [pc, #196]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4a30      	ldr	r2, [pc, #192]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 800652e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006534:	f7fe fc92 	bl	8004e5c <HAL_GetTick>
 8006538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800653a:	e008      	b.n	800654e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800653c:	f7fe fc8e 	bl	8004e5c <HAL_GetTick>
 8006540:	4602      	mov	r2, r0
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	1ad3      	subs	r3, r2, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d901      	bls.n	800654e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e04c      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800654e:	4b28      	ldr	r3, [pc, #160]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d1f0      	bne.n	800653c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800655a:	4b25      	ldr	r3, [pc, #148]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	4924      	ldr	r1, [pc, #144]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 8006560:	4b25      	ldr	r3, [pc, #148]	; (80065f8 <HAL_RCC_OscConfig+0x620>)
 8006562:	4013      	ands	r3, r2
 8006564:	60cb      	str	r3, [r1, #12]
 8006566:	e03e      	b.n	80065e6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d101      	bne.n	8006574 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	e039      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006574:	4b1e      	ldr	r3, [pc, #120]	; (80065f0 <HAL_RCC_OscConfig+0x618>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	f003 0203 	and.w	r2, r3, #3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6a1b      	ldr	r3, [r3, #32]
 8006584:	429a      	cmp	r2, r3
 8006586:	d12c      	bne.n	80065e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006592:	3b01      	subs	r3, #1
 8006594:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006596:	429a      	cmp	r2, r3
 8006598:	d123      	bne.n	80065e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d11b      	bne.n	80065e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80065b6:	429a      	cmp	r2, r3
 80065b8:	d113      	bne.n	80065e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065c4:	085b      	lsrs	r3, r3, #1
 80065c6:	3b01      	subs	r3, #1
 80065c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d109      	bne.n	80065e2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d8:	085b      	lsrs	r3, r3, #1
 80065da:	3b01      	subs	r3, #1
 80065dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80065de:	429a      	cmp	r2, r3
 80065e0:	d001      	beq.n	80065e6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	e000      	b.n	80065e8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}
 80065f0:	40021000 	.word	0x40021000
 80065f4:	019f800c 	.word	0x019f800c
 80065f8:	feeefffc 	.word	0xfeeefffc

080065fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006606:	2300      	movs	r3, #0
 8006608:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d101      	bne.n	8006614 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e11e      	b.n	8006852 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006614:	4b91      	ldr	r3, [pc, #580]	; (800685c <HAL_RCC_ClockConfig+0x260>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 030f 	and.w	r3, r3, #15
 800661c:	683a      	ldr	r2, [r7, #0]
 800661e:	429a      	cmp	r2, r3
 8006620:	d910      	bls.n	8006644 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006622:	4b8e      	ldr	r3, [pc, #568]	; (800685c <HAL_RCC_ClockConfig+0x260>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f023 020f 	bic.w	r2, r3, #15
 800662a:	498c      	ldr	r1, [pc, #560]	; (800685c <HAL_RCC_ClockConfig+0x260>)
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	4313      	orrs	r3, r2
 8006630:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006632:	4b8a      	ldr	r3, [pc, #552]	; (800685c <HAL_RCC_ClockConfig+0x260>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	429a      	cmp	r2, r3
 800663e:	d001      	beq.n	8006644 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006640:	2301      	movs	r3, #1
 8006642:	e106      	b.n	8006852 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d073      	beq.n	8006738 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d129      	bne.n	80066ac <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006658:	4b81      	ldr	r3, [pc, #516]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006660:	2b00      	cmp	r3, #0
 8006662:	d101      	bne.n	8006668 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e0f4      	b.n	8006852 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006668:	f000 f966 	bl	8006938 <RCC_GetSysClockFreqFromPLLSource>
 800666c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	4a7c      	ldr	r2, [pc, #496]	; (8006864 <HAL_RCC_ClockConfig+0x268>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d93f      	bls.n	80066f6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006676:	4b7a      	ldr	r3, [pc, #488]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d009      	beq.n	8006696 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800668a:	2b00      	cmp	r3, #0
 800668c:	d033      	beq.n	80066f6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006692:	2b00      	cmp	r3, #0
 8006694:	d12f      	bne.n	80066f6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006696:	4b72      	ldr	r3, [pc, #456]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800669e:	4a70      	ldr	r2, [pc, #448]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 80066a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80066a6:	2380      	movs	r3, #128	; 0x80
 80066a8:	617b      	str	r3, [r7, #20]
 80066aa:	e024      	b.n	80066f6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	2b02      	cmp	r3, #2
 80066b2:	d107      	bne.n	80066c4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80066b4:	4b6a      	ldr	r3, [pc, #424]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d109      	bne.n	80066d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e0c6      	b.n	8006852 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80066c4:	4b66      	ldr	r3, [pc, #408]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d101      	bne.n	80066d4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e0be      	b.n	8006852 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80066d4:	f000 f8ce 	bl	8006874 <HAL_RCC_GetSysClockFreq>
 80066d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	4a61      	ldr	r2, [pc, #388]	; (8006864 <HAL_RCC_ClockConfig+0x268>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d909      	bls.n	80066f6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80066e2:	4b5f      	ldr	r3, [pc, #380]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80066ea:	4a5d      	ldr	r2, [pc, #372]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 80066ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80066f0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80066f2:	2380      	movs	r3, #128	; 0x80
 80066f4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80066f6:	4b5a      	ldr	r3, [pc, #360]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f023 0203 	bic.w	r2, r3, #3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	4957      	ldr	r1, [pc, #348]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 8006704:	4313      	orrs	r3, r2
 8006706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006708:	f7fe fba8 	bl	8004e5c <HAL_GetTick>
 800670c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800670e:	e00a      	b.n	8006726 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006710:	f7fe fba4 	bl	8004e5c <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	f241 3288 	movw	r2, #5000	; 0x1388
 800671e:	4293      	cmp	r3, r2
 8006720:	d901      	bls.n	8006726 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e095      	b.n	8006852 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006726:	4b4e      	ldr	r3, [pc, #312]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 020c 	and.w	r2, r3, #12
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	429a      	cmp	r2, r3
 8006736:	d1eb      	bne.n	8006710 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0302 	and.w	r3, r3, #2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d023      	beq.n	800678c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f003 0304 	and.w	r3, r3, #4
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006750:	4b43      	ldr	r3, [pc, #268]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	4a42      	ldr	r2, [pc, #264]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 8006756:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800675a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d007      	beq.n	8006778 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006768:	4b3d      	ldr	r3, [pc, #244]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006770:	4a3b      	ldr	r2, [pc, #236]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 8006772:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006776:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006778:	4b39      	ldr	r3, [pc, #228]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	4936      	ldr	r1, [pc, #216]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 8006786:	4313      	orrs	r3, r2
 8006788:	608b      	str	r3, [r1, #8]
 800678a:	e008      	b.n	800679e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	2b80      	cmp	r3, #128	; 0x80
 8006790:	d105      	bne.n	800679e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006792:	4b33      	ldr	r3, [pc, #204]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 8006794:	689b      	ldr	r3, [r3, #8]
 8006796:	4a32      	ldr	r2, [pc, #200]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 8006798:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800679c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800679e:	4b2f      	ldr	r3, [pc, #188]	; (800685c <HAL_RCC_ClockConfig+0x260>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	683a      	ldr	r2, [r7, #0]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d21d      	bcs.n	80067e8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ac:	4b2b      	ldr	r3, [pc, #172]	; (800685c <HAL_RCC_ClockConfig+0x260>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f023 020f 	bic.w	r2, r3, #15
 80067b4:	4929      	ldr	r1, [pc, #164]	; (800685c <HAL_RCC_ClockConfig+0x260>)
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	4313      	orrs	r3, r2
 80067ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80067bc:	f7fe fb4e 	bl	8004e5c <HAL_GetTick>
 80067c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067c2:	e00a      	b.n	80067da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067c4:	f7fe fb4a 	bl	8004e5c <HAL_GetTick>
 80067c8:	4602      	mov	r2, r0
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e03b      	b.n	8006852 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067da:	4b20      	ldr	r3, [pc, #128]	; (800685c <HAL_RCC_ClockConfig+0x260>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d1ed      	bne.n	80067c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0304 	and.w	r3, r3, #4
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d008      	beq.n	8006806 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80067f4:	4b1a      	ldr	r3, [pc, #104]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	4917      	ldr	r1, [pc, #92]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 8006802:	4313      	orrs	r3, r2
 8006804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d009      	beq.n	8006826 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006812:	4b13      	ldr	r3, [pc, #76]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	490f      	ldr	r1, [pc, #60]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 8006822:	4313      	orrs	r3, r2
 8006824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006826:	f000 f825 	bl	8006874 <HAL_RCC_GetSysClockFreq>
 800682a:	4602      	mov	r2, r0
 800682c:	4b0c      	ldr	r3, [pc, #48]	; (8006860 <HAL_RCC_ClockConfig+0x264>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	091b      	lsrs	r3, r3, #4
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	490c      	ldr	r1, [pc, #48]	; (8006868 <HAL_RCC_ClockConfig+0x26c>)
 8006838:	5ccb      	ldrb	r3, [r1, r3]
 800683a:	f003 031f 	and.w	r3, r3, #31
 800683e:	fa22 f303 	lsr.w	r3, r2, r3
 8006842:	4a0a      	ldr	r2, [pc, #40]	; (800686c <HAL_RCC_ClockConfig+0x270>)
 8006844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006846:	4b0a      	ldr	r3, [pc, #40]	; (8006870 <HAL_RCC_ClockConfig+0x274>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f7fe faba 	bl	8004dc4 <HAL_InitTick>
 8006850:	4603      	mov	r3, r0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3718      	adds	r7, #24
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	40022000 	.word	0x40022000
 8006860:	40021000 	.word	0x40021000
 8006864:	04c4b400 	.word	0x04c4b400
 8006868:	08009a10 	.word	0x08009a10
 800686c:	20000000 	.word	0x20000000
 8006870:	20000004 	.word	0x20000004

08006874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006874:	b480      	push	{r7}
 8006876:	b087      	sub	sp, #28
 8006878:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800687a:	4b2c      	ldr	r3, [pc, #176]	; (800692c <HAL_RCC_GetSysClockFreq+0xb8>)
 800687c:	689b      	ldr	r3, [r3, #8]
 800687e:	f003 030c 	and.w	r3, r3, #12
 8006882:	2b04      	cmp	r3, #4
 8006884:	d102      	bne.n	800688c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006886:	4b2a      	ldr	r3, [pc, #168]	; (8006930 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006888:	613b      	str	r3, [r7, #16]
 800688a:	e047      	b.n	800691c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800688c:	4b27      	ldr	r3, [pc, #156]	; (800692c <HAL_RCC_GetSysClockFreq+0xb8>)
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f003 030c 	and.w	r3, r3, #12
 8006894:	2b08      	cmp	r3, #8
 8006896:	d102      	bne.n	800689e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006898:	4b26      	ldr	r3, [pc, #152]	; (8006934 <HAL_RCC_GetSysClockFreq+0xc0>)
 800689a:	613b      	str	r3, [r7, #16]
 800689c:	e03e      	b.n	800691c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800689e:	4b23      	ldr	r3, [pc, #140]	; (800692c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	f003 030c 	and.w	r3, r3, #12
 80068a6:	2b0c      	cmp	r3, #12
 80068a8:	d136      	bne.n	8006918 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068aa:	4b20      	ldr	r3, [pc, #128]	; (800692c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	f003 0303 	and.w	r3, r3, #3
 80068b2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068b4:	4b1d      	ldr	r3, [pc, #116]	; (800692c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	3301      	adds	r3, #1
 80068c0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b03      	cmp	r3, #3
 80068c6:	d10c      	bne.n	80068e2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068c8:	4a1a      	ldr	r2, [pc, #104]	; (8006934 <HAL_RCC_GetSysClockFreq+0xc0>)
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80068d0:	4a16      	ldr	r2, [pc, #88]	; (800692c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068d2:	68d2      	ldr	r2, [r2, #12]
 80068d4:	0a12      	lsrs	r2, r2, #8
 80068d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068da:	fb02 f303 	mul.w	r3, r2, r3
 80068de:	617b      	str	r3, [r7, #20]
      break;
 80068e0:	e00c      	b.n	80068fc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068e2:	4a13      	ldr	r2, [pc, #76]	; (8006930 <HAL_RCC_GetSysClockFreq+0xbc>)
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068ea:	4a10      	ldr	r2, [pc, #64]	; (800692c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068ec:	68d2      	ldr	r2, [r2, #12]
 80068ee:	0a12      	lsrs	r2, r2, #8
 80068f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068f4:	fb02 f303 	mul.w	r3, r2, r3
 80068f8:	617b      	str	r3, [r7, #20]
      break;
 80068fa:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068fc:	4b0b      	ldr	r3, [pc, #44]	; (800692c <HAL_RCC_GetSysClockFreq+0xb8>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	0e5b      	lsrs	r3, r3, #25
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	3301      	adds	r3, #1
 8006908:	005b      	lsls	r3, r3, #1
 800690a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800690c:	697a      	ldr	r2, [r7, #20]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	fbb2 f3f3 	udiv	r3, r2, r3
 8006914:	613b      	str	r3, [r7, #16]
 8006916:	e001      	b.n	800691c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006918:	2300      	movs	r3, #0
 800691a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800691c:	693b      	ldr	r3, [r7, #16]
}
 800691e:	4618      	mov	r0, r3
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40021000 	.word	0x40021000
 8006930:	00f42400 	.word	0x00f42400
 8006934:	007a1200 	.word	0x007a1200

08006938 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8006938:	b480      	push	{r7}
 800693a:	b087      	sub	sp, #28
 800693c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800693e:	4b1e      	ldr	r3, [pc, #120]	; (80069b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006948:	4b1b      	ldr	r3, [pc, #108]	; (80069b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	091b      	lsrs	r3, r3, #4
 800694e:	f003 030f 	and.w	r3, r3, #15
 8006952:	3301      	adds	r3, #1
 8006954:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	2b03      	cmp	r3, #3
 800695a:	d10c      	bne.n	8006976 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800695c:	4a17      	ldr	r2, [pc, #92]	; (80069bc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	fbb2 f3f3 	udiv	r3, r2, r3
 8006964:	4a14      	ldr	r2, [pc, #80]	; (80069b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006966:	68d2      	ldr	r2, [r2, #12]
 8006968:	0a12      	lsrs	r2, r2, #8
 800696a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800696e:	fb02 f303 	mul.w	r3, r2, r3
 8006972:	617b      	str	r3, [r7, #20]
    break;
 8006974:	e00c      	b.n	8006990 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006976:	4a12      	ldr	r2, [pc, #72]	; (80069c0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	fbb2 f3f3 	udiv	r3, r2, r3
 800697e:	4a0e      	ldr	r2, [pc, #56]	; (80069b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006980:	68d2      	ldr	r2, [r2, #12]
 8006982:	0a12      	lsrs	r2, r2, #8
 8006984:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006988:	fb02 f303 	mul.w	r3, r2, r3
 800698c:	617b      	str	r3, [r7, #20]
    break;
 800698e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006990:	4b09      	ldr	r3, [pc, #36]	; (80069b8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	0e5b      	lsrs	r3, r3, #25
 8006996:	f003 0303 	and.w	r3, r3, #3
 800699a:	3301      	adds	r3, #1
 800699c:	005b      	lsls	r3, r3, #1
 800699e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80069aa:	687b      	ldr	r3, [r7, #4]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	40021000 	.word	0x40021000
 80069bc:	007a1200 	.word	0x007a1200
 80069c0:	00f42400 	.word	0x00f42400

080069c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80069cc:	2300      	movs	r3, #0
 80069ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80069d0:	2300      	movs	r3, #0
 80069d2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	f000 8098 	beq.w	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069e2:	2300      	movs	r3, #0
 80069e4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069e6:	4b43      	ldr	r3, [pc, #268]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10d      	bne.n	8006a0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069f2:	4b40      	ldr	r3, [pc, #256]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069f6:	4a3f      	ldr	r2, [pc, #252]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069fc:	6593      	str	r3, [r2, #88]	; 0x58
 80069fe:	4b3d      	ldr	r3, [pc, #244]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a06:	60bb      	str	r3, [r7, #8]
 8006a08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a0e:	4b3a      	ldr	r3, [pc, #232]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a39      	ldr	r2, [pc, #228]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006a1a:	f7fe fa1f 	bl	8004e5c <HAL_GetTick>
 8006a1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a20:	e009      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a22:	f7fe fa1b 	bl	8004e5c <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	d902      	bls.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	74fb      	strb	r3, [r7, #19]
        break;
 8006a34:	e005      	b.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006a36:	4b30      	ldr	r3, [pc, #192]	; (8006af8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0ef      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006a42:	7cfb      	ldrb	r3, [r7, #19]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d159      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006a48:	4b2a      	ldr	r3, [pc, #168]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d01e      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a5e:	697a      	ldr	r2, [r7, #20]
 8006a60:	429a      	cmp	r2, r3
 8006a62:	d019      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a64:	4b23      	ldr	r3, [pc, #140]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a70:	4b20      	ldr	r3, [pc, #128]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a76:	4a1f      	ldr	r2, [pc, #124]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a80:	4b1c      	ldr	r3, [pc, #112]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a86:	4a1b      	ldr	r2, [pc, #108]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a90:	4a18      	ldr	r2, [pc, #96]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a92:	697b      	ldr	r3, [r7, #20]
 8006a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d016      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aa2:	f7fe f9db 	bl	8004e5c <HAL_GetTick>
 8006aa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aa8:	e00b      	b.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aaa:	f7fe f9d7 	bl	8004e5c <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d902      	bls.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006abc:	2303      	movs	r3, #3
 8006abe:	74fb      	strb	r3, [r7, #19]
            break;
 8006ac0:	e006      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006ac2:	4b0c      	ldr	r3, [pc, #48]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0ec      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006ad0:	7cfb      	ldrb	r3, [r7, #19]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d10b      	bne.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ad6:	4b07      	ldr	r3, [pc, #28]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006adc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae4:	4903      	ldr	r1, [pc, #12]	; (8006af4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006aec:	e008      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006aee:	7cfb      	ldrb	r3, [r7, #19]
 8006af0:	74bb      	strb	r3, [r7, #18]
 8006af2:	e005      	b.n	8006b00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006af4:	40021000 	.word	0x40021000
 8006af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006afc:	7cfb      	ldrb	r3, [r7, #19]
 8006afe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b00:	7c7b      	ldrb	r3, [r7, #17]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d105      	bne.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b06:	4ba6      	ldr	r3, [pc, #664]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0a:	4aa5      	ldr	r2, [pc, #660]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006b1e:	4ba0      	ldr	r3, [pc, #640]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b24:	f023 0203 	bic.w	r2, r3, #3
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	499c      	ldr	r1, [pc, #624]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0302 	and.w	r3, r3, #2
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00a      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006b40:	4b97      	ldr	r3, [pc, #604]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b46:	f023 020c 	bic.w	r2, r3, #12
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	4994      	ldr	r1, [pc, #592]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f003 0304 	and.w	r3, r3, #4
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006b62:	4b8f      	ldr	r3, [pc, #572]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68db      	ldr	r3, [r3, #12]
 8006b70:	498b      	ldr	r1, [pc, #556]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0308 	and.w	r3, r3, #8
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b84:	4b86      	ldr	r3, [pc, #536]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	4983      	ldr	r1, [pc, #524]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006b94:	4313      	orrs	r3, r2
 8006b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ba6:	4b7e      	ldr	r3, [pc, #504]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	497a      	ldr	r1, [pc, #488]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00a      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006bc8:	4b75      	ldr	r3, [pc, #468]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	4972      	ldr	r1, [pc, #456]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d00a      	beq.n	8006c00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006bea:	4b6d      	ldr	r3, [pc, #436]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	4969      	ldr	r1, [pc, #420]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d00a      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c0c:	4b64      	ldr	r3, [pc, #400]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	4961      	ldr	r1, [pc, #388]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d00a      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c2e:	4b5c      	ldr	r3, [pc, #368]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3c:	4958      	ldr	r1, [pc, #352]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d015      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c50:	4b53      	ldr	r3, [pc, #332]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c5e:	4950      	ldr	r1, [pc, #320]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c60:	4313      	orrs	r3, r2
 8006c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c6e:	d105      	bne.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c70:	4b4b      	ldr	r3, [pc, #300]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c72:	68db      	ldr	r3, [r3, #12]
 8006c74:	4a4a      	ldr	r2, [pc, #296]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d015      	beq.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c88:	4b45      	ldr	r3, [pc, #276]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c8e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	4942      	ldr	r1, [pc, #264]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ca6:	d105      	bne.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ca8:	4b3d      	ldr	r3, [pc, #244]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	4a3c      	ldr	r2, [pc, #240]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cb2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d015      	beq.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006cc0:	4b37      	ldr	r3, [pc, #220]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cce:	4934      	ldr	r1, [pc, #208]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cda:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cde:	d105      	bne.n	8006cec <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006ce0:	4b2f      	ldr	r3, [pc, #188]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	4a2e      	ldr	r2, [pc, #184]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006ce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d015      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cf8:	4b29      	ldr	r3, [pc, #164]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cfe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d06:	4926      	ldr	r1, [pc, #152]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d16:	d105      	bne.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d18:	4b21      	ldr	r3, [pc, #132]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	4a20      	ldr	r2, [pc, #128]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d015      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006d30:	4b1b      	ldr	r3, [pc, #108]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d3e:	4918      	ldr	r1, [pc, #96]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d40:	4313      	orrs	r3, r2
 8006d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d4e:	d105      	bne.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006d50:	4b13      	ldr	r3, [pc, #76]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	4a12      	ldr	r2, [pc, #72]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d5a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d015      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006d68:	4b0d      	ldr	r3, [pc, #52]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d76:	490a      	ldr	r1, [pc, #40]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d86:	d105      	bne.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d88:	4b05      	ldr	r3, [pc, #20]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	4a04      	ldr	r2, [pc, #16]	; (8006da0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006d94:	7cbb      	ldrb	r3, [r7, #18]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	40021000 	.word	0x40021000

08006da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b082      	sub	sp, #8
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	e049      	b.n	8006e4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbc:	b2db      	uxtb	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d106      	bne.n	8006dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f7fd fdb2 	bl	8004934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681a      	ldr	r2, [r3, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3304      	adds	r3, #4
 8006de0:	4619      	mov	r1, r3
 8006de2:	4610      	mov	r0, r2
 8006de4:	f000 fd7e 	bl	80078e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2201      	movs	r2, #1
 8006e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2201      	movs	r2, #1
 8006e34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b085      	sub	sp, #20
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e62:	b2db      	uxtb	r3, r3
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d001      	beq.n	8006e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e04a      	b.n	8006f02 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2202      	movs	r2, #2
 8006e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68da      	ldr	r2, [r3, #12]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f042 0201 	orr.w	r2, r2, #1
 8006e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4a21      	ldr	r2, [pc, #132]	; (8006f10 <HAL_TIM_Base_Start_IT+0xbc>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d018      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e96:	d013      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4a1d      	ldr	r2, [pc, #116]	; (8006f14 <HAL_TIM_Base_Start_IT+0xc0>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d00e      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4a1c      	ldr	r2, [pc, #112]	; (8006f18 <HAL_TIM_Base_Start_IT+0xc4>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d009      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a1a      	ldr	r2, [pc, #104]	; (8006f1c <HAL_TIM_Base_Start_IT+0xc8>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d004      	beq.n	8006ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a19      	ldr	r2, [pc, #100]	; (8006f20 <HAL_TIM_Base_Start_IT+0xcc>)
 8006ebc:	4293      	cmp	r3, r2
 8006ebe:	d115      	bne.n	8006eec <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689a      	ldr	r2, [r3, #8]
 8006ec6:	4b17      	ldr	r3, [pc, #92]	; (8006f24 <HAL_TIM_Base_Start_IT+0xd0>)
 8006ec8:	4013      	ands	r3, r2
 8006eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2b06      	cmp	r3, #6
 8006ed0:	d015      	beq.n	8006efe <HAL_TIM_Base_Start_IT+0xaa>
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ed8:	d011      	beq.n	8006efe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	f042 0201 	orr.w	r2, r2, #1
 8006ee8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eea:	e008      	b.n	8006efe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0201 	orr.w	r2, r2, #1
 8006efa:	601a      	str	r2, [r3, #0]
 8006efc:	e000      	b.n	8006f00 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006efe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3714      	adds	r7, #20
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	40012c00 	.word	0x40012c00
 8006f14:	40000400 	.word	0x40000400
 8006f18:	40000800 	.word	0x40000800
 8006f1c:	40013400 	.word	0x40013400
 8006f20:	40014000 	.word	0x40014000
 8006f24:	00010007 	.word	0x00010007

08006f28 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e049      	b.n	8006fce <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d106      	bne.n	8006f54 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f7fd fd3e 	bl	80049d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	3304      	adds	r3, #4
 8006f64:	4619      	mov	r1, r3
 8006f66:	4610      	mov	r0, r2
 8006f68:	f000 fcbc 	bl	80078e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2201      	movs	r2, #1
 8006f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3708      	adds	r7, #8
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
	...

08006fd8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d109      	bne.n	8006ffc <HAL_TIM_PWM_Start+0x24>
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	bf14      	ite	ne
 8006ff4:	2301      	movne	r3, #1
 8006ff6:	2300      	moveq	r3, #0
 8006ff8:	b2db      	uxtb	r3, r3
 8006ffa:	e03c      	b.n	8007076 <HAL_TIM_PWM_Start+0x9e>
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	2b04      	cmp	r3, #4
 8007000:	d109      	bne.n	8007016 <HAL_TIM_PWM_Start+0x3e>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b01      	cmp	r3, #1
 800700c:	bf14      	ite	ne
 800700e:	2301      	movne	r3, #1
 8007010:	2300      	moveq	r3, #0
 8007012:	b2db      	uxtb	r3, r3
 8007014:	e02f      	b.n	8007076 <HAL_TIM_PWM_Start+0x9e>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b08      	cmp	r3, #8
 800701a:	d109      	bne.n	8007030 <HAL_TIM_PWM_Start+0x58>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007022:	b2db      	uxtb	r3, r3
 8007024:	2b01      	cmp	r3, #1
 8007026:	bf14      	ite	ne
 8007028:	2301      	movne	r3, #1
 800702a:	2300      	moveq	r3, #0
 800702c:	b2db      	uxtb	r3, r3
 800702e:	e022      	b.n	8007076 <HAL_TIM_PWM_Start+0x9e>
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	2b0c      	cmp	r3, #12
 8007034:	d109      	bne.n	800704a <HAL_TIM_PWM_Start+0x72>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800703c:	b2db      	uxtb	r3, r3
 800703e:	2b01      	cmp	r3, #1
 8007040:	bf14      	ite	ne
 8007042:	2301      	movne	r3, #1
 8007044:	2300      	moveq	r3, #0
 8007046:	b2db      	uxtb	r3, r3
 8007048:	e015      	b.n	8007076 <HAL_TIM_PWM_Start+0x9e>
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	2b10      	cmp	r3, #16
 800704e:	d109      	bne.n	8007064 <HAL_TIM_PWM_Start+0x8c>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b01      	cmp	r3, #1
 800705a:	bf14      	ite	ne
 800705c:	2301      	movne	r3, #1
 800705e:	2300      	moveq	r3, #0
 8007060:	b2db      	uxtb	r3, r3
 8007062:	e008      	b.n	8007076 <HAL_TIM_PWM_Start+0x9e>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b01      	cmp	r3, #1
 800706e:	bf14      	ite	ne
 8007070:	2301      	movne	r3, #1
 8007072:	2300      	moveq	r3, #0
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d001      	beq.n	800707e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e097      	b.n	80071ae <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <HAL_TIM_PWM_Start+0xb6>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2202      	movs	r2, #2
 8007088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800708c:	e023      	b.n	80070d6 <HAL_TIM_PWM_Start+0xfe>
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	2b04      	cmp	r3, #4
 8007092:	d104      	bne.n	800709e <HAL_TIM_PWM_Start+0xc6>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2202      	movs	r2, #2
 8007098:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800709c:	e01b      	b.n	80070d6 <HAL_TIM_PWM_Start+0xfe>
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	2b08      	cmp	r3, #8
 80070a2:	d104      	bne.n	80070ae <HAL_TIM_PWM_Start+0xd6>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070ac:	e013      	b.n	80070d6 <HAL_TIM_PWM_Start+0xfe>
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b0c      	cmp	r3, #12
 80070b2:	d104      	bne.n	80070be <HAL_TIM_PWM_Start+0xe6>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070bc:	e00b      	b.n	80070d6 <HAL_TIM_PWM_Start+0xfe>
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d104      	bne.n	80070ce <HAL_TIM_PWM_Start+0xf6>
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070cc:	e003      	b.n	80070d6 <HAL_TIM_PWM_Start+0xfe>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2202      	movs	r2, #2
 80070d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2201      	movs	r2, #1
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	4618      	mov	r0, r3
 80070e0:	f001 f82e 	bl	8008140 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a33      	ldr	r2, [pc, #204]	; (80071b8 <HAL_TIM_PWM_Start+0x1e0>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d013      	beq.n	8007116 <HAL_TIM_PWM_Start+0x13e>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a32      	ldr	r2, [pc, #200]	; (80071bc <HAL_TIM_PWM_Start+0x1e4>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00e      	beq.n	8007116 <HAL_TIM_PWM_Start+0x13e>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4a30      	ldr	r2, [pc, #192]	; (80071c0 <HAL_TIM_PWM_Start+0x1e8>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d009      	beq.n	8007116 <HAL_TIM_PWM_Start+0x13e>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a2f      	ldr	r2, [pc, #188]	; (80071c4 <HAL_TIM_PWM_Start+0x1ec>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d004      	beq.n	8007116 <HAL_TIM_PWM_Start+0x13e>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a2d      	ldr	r2, [pc, #180]	; (80071c8 <HAL_TIM_PWM_Start+0x1f0>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d101      	bne.n	800711a <HAL_TIM_PWM_Start+0x142>
 8007116:	2301      	movs	r3, #1
 8007118:	e000      	b.n	800711c <HAL_TIM_PWM_Start+0x144>
 800711a:	2300      	movs	r3, #0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d007      	beq.n	8007130 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800712e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a20      	ldr	r2, [pc, #128]	; (80071b8 <HAL_TIM_PWM_Start+0x1e0>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d018      	beq.n	800716c <HAL_TIM_PWM_Start+0x194>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007142:	d013      	beq.n	800716c <HAL_TIM_PWM_Start+0x194>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a20      	ldr	r2, [pc, #128]	; (80071cc <HAL_TIM_PWM_Start+0x1f4>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00e      	beq.n	800716c <HAL_TIM_PWM_Start+0x194>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a1f      	ldr	r2, [pc, #124]	; (80071d0 <HAL_TIM_PWM_Start+0x1f8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d009      	beq.n	800716c <HAL_TIM_PWM_Start+0x194>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a17      	ldr	r2, [pc, #92]	; (80071bc <HAL_TIM_PWM_Start+0x1e4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d004      	beq.n	800716c <HAL_TIM_PWM_Start+0x194>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a16      	ldr	r2, [pc, #88]	; (80071c0 <HAL_TIM_PWM_Start+0x1e8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d115      	bne.n	8007198 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	4b18      	ldr	r3, [pc, #96]	; (80071d4 <HAL_TIM_PWM_Start+0x1fc>)
 8007174:	4013      	ands	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b06      	cmp	r3, #6
 800717c:	d015      	beq.n	80071aa <HAL_TIM_PWM_Start+0x1d2>
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007184:	d011      	beq.n	80071aa <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f042 0201 	orr.w	r2, r2, #1
 8007194:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007196:	e008      	b.n	80071aa <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0201 	orr.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	e000      	b.n	80071ac <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80071ac:	2300      	movs	r3, #0
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	40012c00 	.word	0x40012c00
 80071bc:	40013400 	.word	0x40013400
 80071c0:	40014000 	.word	0x40014000
 80071c4:	40014400 	.word	0x40014400
 80071c8:	40014800 	.word	0x40014800
 80071cc:	40000400 	.word	0x40000400
 80071d0:	40000800 	.word	0x40000800
 80071d4:	00010007 	.word	0x00010007

080071d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68db      	ldr	r3, [r3, #12]
 80071e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d020      	beq.n	800723c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d01b      	beq.n	800723c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f06f 0202 	mvn.w	r2, #2
 800720c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	f003 0303 	and.w	r3, r3, #3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d003      	beq.n	800722a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 fb40 	bl	80078a8 <HAL_TIM_IC_CaptureCallback>
 8007228:	e005      	b.n	8007236 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fb32 	bl	8007894 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fb43 	bl	80078bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2200      	movs	r2, #0
 800723a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	f003 0304 	and.w	r3, r3, #4
 8007242:	2b00      	cmp	r3, #0
 8007244:	d020      	beq.n	8007288 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f003 0304 	and.w	r3, r3, #4
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01b      	beq.n	8007288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f06f 0204 	mvn.w	r2, #4
 8007258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	2202      	movs	r2, #2
 800725e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	699b      	ldr	r3, [r3, #24]
 8007266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fb1a 	bl	80078a8 <HAL_TIM_IC_CaptureCallback>
 8007274:	e005      	b.n	8007282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 fb0c 	bl	8007894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fb1d 	bl	80078bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f003 0308 	and.w	r3, r3, #8
 800728e:	2b00      	cmp	r3, #0
 8007290:	d020      	beq.n	80072d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f003 0308 	and.w	r3, r3, #8
 8007298:	2b00      	cmp	r3, #0
 800729a:	d01b      	beq.n	80072d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f06f 0208 	mvn.w	r2, #8
 80072a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2204      	movs	r2, #4
 80072aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	69db      	ldr	r3, [r3, #28]
 80072b2:	f003 0303 	and.w	r3, r3, #3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 faf4 	bl	80078a8 <HAL_TIM_IC_CaptureCallback>
 80072c0:	e005      	b.n	80072ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fae6 	bl	8007894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 faf7 	bl	80078bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f003 0310 	and.w	r3, r3, #16
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d020      	beq.n	8007320 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f003 0310 	and.w	r3, r3, #16
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01b      	beq.n	8007320 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f06f 0210 	mvn.w	r2, #16
 80072f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2208      	movs	r2, #8
 80072f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	69db      	ldr	r3, [r3, #28]
 80072fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007302:	2b00      	cmp	r3, #0
 8007304:	d003      	beq.n	800730e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 face 	bl	80078a8 <HAL_TIM_IC_CaptureCallback>
 800730c:	e005      	b.n	800731a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fac0 	bl	8007894 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fad1 	bl	80078bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2200      	movs	r2, #0
 800731e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	f003 0301 	and.w	r3, r3, #1
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00c      	beq.n	8007344 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	f003 0301 	and.w	r3, r3, #1
 8007330:	2b00      	cmp	r3, #0
 8007332:	d007      	beq.n	8007344 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f06f 0201 	mvn.w	r2, #1
 800733c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fa fb88 	bl	8001a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800734a:	2b00      	cmp	r3, #0
 800734c:	d104      	bne.n	8007358 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00c      	beq.n	8007372 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800735e:	2b00      	cmp	r3, #0
 8007360:	d007      	beq.n	8007372 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800736a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 f825 	bl	80083bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00c      	beq.n	8007396 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007382:	2b00      	cmp	r3, #0
 8007384:	d007      	beq.n	8007396 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800738e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f001 f81d 	bl	80083d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00c      	beq.n	80073ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d007      	beq.n	80073ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fa8b 	bl	80078d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f003 0320 	and.w	r3, r3, #32
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00c      	beq.n	80073de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	f003 0320 	and.w	r3, r3, #32
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d007      	beq.n	80073de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f06f 0220 	mvn.w	r2, #32
 80073d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 ffe5 	bl	80083a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00c      	beq.n	8007402 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d007      	beq.n	8007402 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80073fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fff1 	bl	80083e4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d00c      	beq.n	8007426 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d007      	beq.n	8007426 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800741e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 ffe9 	bl	80083f8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00c      	beq.n	800744a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007442:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 ffe1 	bl	800840c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00c      	beq.n	800746e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007466:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 ffd9 	bl	8008420 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800746e:	bf00      	nop
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
	...

08007478 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007484:	2300      	movs	r3, #0
 8007486:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800748e:	2b01      	cmp	r3, #1
 8007490:	d101      	bne.n	8007496 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007492:	2302      	movs	r3, #2
 8007494:	e0ff      	b.n	8007696 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2b14      	cmp	r3, #20
 80074a2:	f200 80f0 	bhi.w	8007686 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80074a6:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	08007501 	.word	0x08007501
 80074b0:	08007687 	.word	0x08007687
 80074b4:	08007687 	.word	0x08007687
 80074b8:	08007687 	.word	0x08007687
 80074bc:	08007541 	.word	0x08007541
 80074c0:	08007687 	.word	0x08007687
 80074c4:	08007687 	.word	0x08007687
 80074c8:	08007687 	.word	0x08007687
 80074cc:	08007583 	.word	0x08007583
 80074d0:	08007687 	.word	0x08007687
 80074d4:	08007687 	.word	0x08007687
 80074d8:	08007687 	.word	0x08007687
 80074dc:	080075c3 	.word	0x080075c3
 80074e0:	08007687 	.word	0x08007687
 80074e4:	08007687 	.word	0x08007687
 80074e8:	08007687 	.word	0x08007687
 80074ec:	08007605 	.word	0x08007605
 80074f0:	08007687 	.word	0x08007687
 80074f4:	08007687 	.word	0x08007687
 80074f8:	08007687 	.word	0x08007687
 80074fc:	08007645 	.word	0x08007645
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68b9      	ldr	r1, [r7, #8]
 8007506:	4618      	mov	r0, r3
 8007508:	f000 fa88 	bl	8007a1c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f042 0208 	orr.w	r2, r2, #8
 800751a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	699a      	ldr	r2, [r3, #24]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f022 0204 	bic.w	r2, r2, #4
 800752a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6999      	ldr	r1, [r3, #24]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	691a      	ldr	r2, [r3, #16]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	430a      	orrs	r2, r1
 800753c:	619a      	str	r2, [r3, #24]
      break;
 800753e:	e0a5      	b.n	800768c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68b9      	ldr	r1, [r7, #8]
 8007546:	4618      	mov	r0, r3
 8007548:	f000 faf8 	bl	8007b3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	699a      	ldr	r2, [r3, #24]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800755a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	699a      	ldr	r2, [r3, #24]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800756a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	6999      	ldr	r1, [r3, #24]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	021a      	lsls	r2, r3, #8
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	619a      	str	r2, [r3, #24]
      break;
 8007580:	e084      	b.n	800768c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	68b9      	ldr	r1, [r7, #8]
 8007588:	4618      	mov	r0, r3
 800758a:	f000 fb61 	bl	8007c50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	69da      	ldr	r2, [r3, #28]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f042 0208 	orr.w	r2, r2, #8
 800759c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	69da      	ldr	r2, [r3, #28]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 0204 	bic.w	r2, r2, #4
 80075ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	69d9      	ldr	r1, [r3, #28]
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	691a      	ldr	r2, [r3, #16]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	430a      	orrs	r2, r1
 80075be:	61da      	str	r2, [r3, #28]
      break;
 80075c0:	e064      	b.n	800768c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68b9      	ldr	r1, [r7, #8]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fbc9 	bl	8007d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69da      	ldr	r2, [r3, #28]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80075dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	69da      	ldr	r2, [r3, #28]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	69d9      	ldr	r1, [r3, #28]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	691b      	ldr	r3, [r3, #16]
 80075f8:	021a      	lsls	r2, r3, #8
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	430a      	orrs	r2, r1
 8007600:	61da      	str	r2, [r3, #28]
      break;
 8007602:	e043      	b.n	800768c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	68b9      	ldr	r1, [r7, #8]
 800760a:	4618      	mov	r0, r3
 800760c:	f000 fc32 	bl	8007e74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f042 0208 	orr.w	r2, r2, #8
 800761e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f022 0204 	bic.w	r2, r2, #4
 800762e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	691a      	ldr	r2, [r3, #16]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	430a      	orrs	r2, r1
 8007640:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007642:	e023      	b.n	800768c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68b9      	ldr	r1, [r7, #8]
 800764a:	4618      	mov	r0, r3
 800764c:	f000 fc76 	bl	8007f3c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800765e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800766e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	021a      	lsls	r2, r3, #8
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	430a      	orrs	r2, r1
 8007682:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007684:	e002      	b.n	800768c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	75fb      	strb	r3, [r7, #23]
      break;
 800768a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007694:	7dfb      	ldrb	r3, [r7, #23]
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop

080076a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b084      	sub	sp, #16
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
 80076a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076aa:	2300      	movs	r3, #0
 80076ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	d101      	bne.n	80076bc <HAL_TIM_ConfigClockSource+0x1c>
 80076b8:	2302      	movs	r3, #2
 80076ba:	e0de      	b.n	800787a <HAL_TIM_ConfigClockSource+0x1da>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2202      	movs	r2, #2
 80076c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80076da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80076de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	4a63      	ldr	r2, [pc, #396]	; (8007884 <HAL_TIM_ConfigClockSource+0x1e4>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	f000 80a9 	beq.w	800784e <HAL_TIM_ConfigClockSource+0x1ae>
 80076fc:	4a61      	ldr	r2, [pc, #388]	; (8007884 <HAL_TIM_ConfigClockSource+0x1e4>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	f200 80ae 	bhi.w	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
 8007704:	4a60      	ldr	r2, [pc, #384]	; (8007888 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007706:	4293      	cmp	r3, r2
 8007708:	f000 80a1 	beq.w	800784e <HAL_TIM_ConfigClockSource+0x1ae>
 800770c:	4a5e      	ldr	r2, [pc, #376]	; (8007888 <HAL_TIM_ConfigClockSource+0x1e8>)
 800770e:	4293      	cmp	r3, r2
 8007710:	f200 80a6 	bhi.w	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
 8007714:	4a5d      	ldr	r2, [pc, #372]	; (800788c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007716:	4293      	cmp	r3, r2
 8007718:	f000 8099 	beq.w	800784e <HAL_TIM_ConfigClockSource+0x1ae>
 800771c:	4a5b      	ldr	r2, [pc, #364]	; (800788c <HAL_TIM_ConfigClockSource+0x1ec>)
 800771e:	4293      	cmp	r3, r2
 8007720:	f200 809e 	bhi.w	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
 8007724:	4a5a      	ldr	r2, [pc, #360]	; (8007890 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007726:	4293      	cmp	r3, r2
 8007728:	f000 8091 	beq.w	800784e <HAL_TIM_ConfigClockSource+0x1ae>
 800772c:	4a58      	ldr	r2, [pc, #352]	; (8007890 <HAL_TIM_ConfigClockSource+0x1f0>)
 800772e:	4293      	cmp	r3, r2
 8007730:	f200 8096 	bhi.w	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
 8007734:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007738:	f000 8089 	beq.w	800784e <HAL_TIM_ConfigClockSource+0x1ae>
 800773c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007740:	f200 808e 	bhi.w	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
 8007744:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007748:	d03e      	beq.n	80077c8 <HAL_TIM_ConfigClockSource+0x128>
 800774a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800774e:	f200 8087 	bhi.w	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
 8007752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007756:	f000 8086 	beq.w	8007866 <HAL_TIM_ConfigClockSource+0x1c6>
 800775a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800775e:	d87f      	bhi.n	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
 8007760:	2b70      	cmp	r3, #112	; 0x70
 8007762:	d01a      	beq.n	800779a <HAL_TIM_ConfigClockSource+0xfa>
 8007764:	2b70      	cmp	r3, #112	; 0x70
 8007766:	d87b      	bhi.n	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
 8007768:	2b60      	cmp	r3, #96	; 0x60
 800776a:	d050      	beq.n	800780e <HAL_TIM_ConfigClockSource+0x16e>
 800776c:	2b60      	cmp	r3, #96	; 0x60
 800776e:	d877      	bhi.n	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
 8007770:	2b50      	cmp	r3, #80	; 0x50
 8007772:	d03c      	beq.n	80077ee <HAL_TIM_ConfigClockSource+0x14e>
 8007774:	2b50      	cmp	r3, #80	; 0x50
 8007776:	d873      	bhi.n	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
 8007778:	2b40      	cmp	r3, #64	; 0x40
 800777a:	d058      	beq.n	800782e <HAL_TIM_ConfigClockSource+0x18e>
 800777c:	2b40      	cmp	r3, #64	; 0x40
 800777e:	d86f      	bhi.n	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
 8007780:	2b30      	cmp	r3, #48	; 0x30
 8007782:	d064      	beq.n	800784e <HAL_TIM_ConfigClockSource+0x1ae>
 8007784:	2b30      	cmp	r3, #48	; 0x30
 8007786:	d86b      	bhi.n	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
 8007788:	2b20      	cmp	r3, #32
 800778a:	d060      	beq.n	800784e <HAL_TIM_ConfigClockSource+0x1ae>
 800778c:	2b20      	cmp	r3, #32
 800778e:	d867      	bhi.n	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
 8007790:	2b00      	cmp	r3, #0
 8007792:	d05c      	beq.n	800784e <HAL_TIM_ConfigClockSource+0x1ae>
 8007794:	2b10      	cmp	r3, #16
 8007796:	d05a      	beq.n	800784e <HAL_TIM_ConfigClockSource+0x1ae>
 8007798:	e062      	b.n	8007860 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077aa:	f000 fca9 	bl	8008100 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80077bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	609a      	str	r2, [r3, #8]
      break;
 80077c6:	e04f      	b.n	8007868 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80077d8:	f000 fc92 	bl	8008100 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689a      	ldr	r2, [r3, #8]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80077ea:	609a      	str	r2, [r3, #8]
      break;
 80077ec:	e03c      	b.n	8007868 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80077fa:	461a      	mov	r2, r3
 80077fc:	f000 fc04 	bl	8008008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	2150      	movs	r1, #80	; 0x50
 8007806:	4618      	mov	r0, r3
 8007808:	f000 fc5d 	bl	80080c6 <TIM_ITRx_SetConfig>
      break;
 800780c:	e02c      	b.n	8007868 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800781a:	461a      	mov	r2, r3
 800781c:	f000 fc23 	bl	8008066 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	2160      	movs	r1, #96	; 0x60
 8007826:	4618      	mov	r0, r3
 8007828:	f000 fc4d 	bl	80080c6 <TIM_ITRx_SetConfig>
      break;
 800782c:	e01c      	b.n	8007868 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800783a:	461a      	mov	r2, r3
 800783c:	f000 fbe4 	bl	8008008 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2140      	movs	r1, #64	; 0x40
 8007846:	4618      	mov	r0, r3
 8007848:	f000 fc3d 	bl	80080c6 <TIM_ITRx_SetConfig>
      break;
 800784c:	e00c      	b.n	8007868 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4619      	mov	r1, r3
 8007858:	4610      	mov	r0, r2
 800785a:	f000 fc34 	bl	80080c6 <TIM_ITRx_SetConfig>
      break;
 800785e:	e003      	b.n	8007868 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	73fb      	strb	r3, [r7, #15]
      break;
 8007864:	e000      	b.n	8007868 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007878:	7bfb      	ldrb	r3, [r7, #15]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
 8007882:	bf00      	nop
 8007884:	00100070 	.word	0x00100070
 8007888:	00100040 	.word	0x00100040
 800788c:	00100030 	.word	0x00100030
 8007890:	00100020 	.word	0x00100020

08007894 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	4a42      	ldr	r2, [pc, #264]	; (8007a00 <TIM_Base_SetConfig+0x11c>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d00f      	beq.n	800791c <TIM_Base_SetConfig+0x38>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007902:	d00b      	beq.n	800791c <TIM_Base_SetConfig+0x38>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a3f      	ldr	r2, [pc, #252]	; (8007a04 <TIM_Base_SetConfig+0x120>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d007      	beq.n	800791c <TIM_Base_SetConfig+0x38>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a3e      	ldr	r2, [pc, #248]	; (8007a08 <TIM_Base_SetConfig+0x124>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d003      	beq.n	800791c <TIM_Base_SetConfig+0x38>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a3d      	ldr	r2, [pc, #244]	; (8007a0c <TIM_Base_SetConfig+0x128>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d108      	bne.n	800792e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007922:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4313      	orrs	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	4a33      	ldr	r2, [pc, #204]	; (8007a00 <TIM_Base_SetConfig+0x11c>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d01b      	beq.n	800796e <TIM_Base_SetConfig+0x8a>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800793c:	d017      	beq.n	800796e <TIM_Base_SetConfig+0x8a>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4a30      	ldr	r2, [pc, #192]	; (8007a04 <TIM_Base_SetConfig+0x120>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d013      	beq.n	800796e <TIM_Base_SetConfig+0x8a>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	4a2f      	ldr	r2, [pc, #188]	; (8007a08 <TIM_Base_SetConfig+0x124>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d00f      	beq.n	800796e <TIM_Base_SetConfig+0x8a>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	4a2e      	ldr	r2, [pc, #184]	; (8007a0c <TIM_Base_SetConfig+0x128>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d00b      	beq.n	800796e <TIM_Base_SetConfig+0x8a>
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	4a2d      	ldr	r2, [pc, #180]	; (8007a10 <TIM_Base_SetConfig+0x12c>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d007      	beq.n	800796e <TIM_Base_SetConfig+0x8a>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	4a2c      	ldr	r2, [pc, #176]	; (8007a14 <TIM_Base_SetConfig+0x130>)
 8007962:	4293      	cmp	r3, r2
 8007964:	d003      	beq.n	800796e <TIM_Base_SetConfig+0x8a>
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	4a2b      	ldr	r2, [pc, #172]	; (8007a18 <TIM_Base_SetConfig+0x134>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d108      	bne.n	8007980 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	68db      	ldr	r3, [r3, #12]
 800797a:	68fa      	ldr	r2, [r7, #12]
 800797c:	4313      	orrs	r3, r2
 800797e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	4313      	orrs	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	689a      	ldr	r2, [r3, #8]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	4a16      	ldr	r2, [pc, #88]	; (8007a00 <TIM_Base_SetConfig+0x11c>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d00f      	beq.n	80079cc <TIM_Base_SetConfig+0xe8>
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	4a17      	ldr	r2, [pc, #92]	; (8007a0c <TIM_Base_SetConfig+0x128>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d00b      	beq.n	80079cc <TIM_Base_SetConfig+0xe8>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a16      	ldr	r2, [pc, #88]	; (8007a10 <TIM_Base_SetConfig+0x12c>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d007      	beq.n	80079cc <TIM_Base_SetConfig+0xe8>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a15      	ldr	r2, [pc, #84]	; (8007a14 <TIM_Base_SetConfig+0x130>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d003      	beq.n	80079cc <TIM_Base_SetConfig+0xe8>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4a14      	ldr	r2, [pc, #80]	; (8007a18 <TIM_Base_SetConfig+0x134>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d103      	bne.n	80079d4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	691a      	ldr	r2, [r3, #16]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	691b      	ldr	r3, [r3, #16]
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d105      	bne.n	80079f2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f023 0201 	bic.w	r2, r3, #1
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	611a      	str	r2, [r3, #16]
  }
}
 80079f2:	bf00      	nop
 80079f4:	3714      	adds	r7, #20
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
 80079fe:	bf00      	nop
 8007a00:	40012c00 	.word	0x40012c00
 8007a04:	40000400 	.word	0x40000400
 8007a08:	40000800 	.word	0x40000800
 8007a0c:	40013400 	.word	0x40013400
 8007a10:	40014000 	.word	0x40014000
 8007a14:	40014400 	.word	0x40014400
 8007a18:	40014800 	.word	0x40014800

08007a1c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a1b      	ldr	r3, [r3, #32]
 8007a2a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6a1b      	ldr	r3, [r3, #32]
 8007a30:	f023 0201 	bic.w	r2, r3, #1
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f023 0303 	bic.w	r3, r3, #3
 8007a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f023 0302 	bic.w	r3, r3, #2
 8007a68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	4a2c      	ldr	r2, [pc, #176]	; (8007b28 <TIM_OC1_SetConfig+0x10c>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00f      	beq.n	8007a9c <TIM_OC1_SetConfig+0x80>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	4a2b      	ldr	r2, [pc, #172]	; (8007b2c <TIM_OC1_SetConfig+0x110>)
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d00b      	beq.n	8007a9c <TIM_OC1_SetConfig+0x80>
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a2a      	ldr	r2, [pc, #168]	; (8007b30 <TIM_OC1_SetConfig+0x114>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d007      	beq.n	8007a9c <TIM_OC1_SetConfig+0x80>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4a29      	ldr	r2, [pc, #164]	; (8007b34 <TIM_OC1_SetConfig+0x118>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d003      	beq.n	8007a9c <TIM_OC1_SetConfig+0x80>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	4a28      	ldr	r2, [pc, #160]	; (8007b38 <TIM_OC1_SetConfig+0x11c>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d10c      	bne.n	8007ab6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f023 0308 	bic.w	r3, r3, #8
 8007aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	697a      	ldr	r2, [r7, #20]
 8007aaa:	4313      	orrs	r3, r2
 8007aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f023 0304 	bic.w	r3, r3, #4
 8007ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	4a1b      	ldr	r2, [pc, #108]	; (8007b28 <TIM_OC1_SetConfig+0x10c>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d00f      	beq.n	8007ade <TIM_OC1_SetConfig+0xc2>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	4a1a      	ldr	r2, [pc, #104]	; (8007b2c <TIM_OC1_SetConfig+0x110>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d00b      	beq.n	8007ade <TIM_OC1_SetConfig+0xc2>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	4a19      	ldr	r2, [pc, #100]	; (8007b30 <TIM_OC1_SetConfig+0x114>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d007      	beq.n	8007ade <TIM_OC1_SetConfig+0xc2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	4a18      	ldr	r2, [pc, #96]	; (8007b34 <TIM_OC1_SetConfig+0x118>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d003      	beq.n	8007ade <TIM_OC1_SetConfig+0xc2>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	4a17      	ldr	r2, [pc, #92]	; (8007b38 <TIM_OC1_SetConfig+0x11c>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d111      	bne.n	8007b02 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ae4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007aec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	695b      	ldr	r3, [r3, #20]
 8007af2:	693a      	ldr	r2, [r7, #16]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	699b      	ldr	r3, [r3, #24]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	685a      	ldr	r2, [r3, #4]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	621a      	str	r2, [r3, #32]
}
 8007b1c:	bf00      	nop
 8007b1e:	371c      	adds	r7, #28
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr
 8007b28:	40012c00 	.word	0x40012c00
 8007b2c:	40013400 	.word	0x40013400
 8007b30:	40014000 	.word	0x40014000
 8007b34:	40014400 	.word	0x40014400
 8007b38:	40014800 	.word	0x40014800

08007b3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b087      	sub	sp, #28
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a1b      	ldr	r3, [r3, #32]
 8007b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6a1b      	ldr	r3, [r3, #32]
 8007b50:	f023 0210 	bic.w	r2, r3, #16
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	685b      	ldr	r3, [r3, #4]
 8007b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	021b      	lsls	r3, r3, #8
 8007b7e:	68fa      	ldr	r2, [r7, #12]
 8007b80:	4313      	orrs	r3, r2
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	f023 0320 	bic.w	r3, r3, #32
 8007b8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	011b      	lsls	r3, r3, #4
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a28      	ldr	r2, [pc, #160]	; (8007c3c <TIM_OC2_SetConfig+0x100>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d003      	beq.n	8007ba8 <TIM_OC2_SetConfig+0x6c>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a27      	ldr	r2, [pc, #156]	; (8007c40 <TIM_OC2_SetConfig+0x104>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d10d      	bne.n	8007bc4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	697a      	ldr	r2, [r7, #20]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bc2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a1d      	ldr	r2, [pc, #116]	; (8007c3c <TIM_OC2_SetConfig+0x100>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d00f      	beq.n	8007bec <TIM_OC2_SetConfig+0xb0>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a1c      	ldr	r2, [pc, #112]	; (8007c40 <TIM_OC2_SetConfig+0x104>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d00b      	beq.n	8007bec <TIM_OC2_SetConfig+0xb0>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	4a1b      	ldr	r2, [pc, #108]	; (8007c44 <TIM_OC2_SetConfig+0x108>)
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d007      	beq.n	8007bec <TIM_OC2_SetConfig+0xb0>
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	4a1a      	ldr	r2, [pc, #104]	; (8007c48 <TIM_OC2_SetConfig+0x10c>)
 8007be0:	4293      	cmp	r3, r2
 8007be2:	d003      	beq.n	8007bec <TIM_OC2_SetConfig+0xb0>
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	4a19      	ldr	r2, [pc, #100]	; (8007c4c <TIM_OC2_SetConfig+0x110>)
 8007be8:	4293      	cmp	r3, r2
 8007bea:	d113      	bne.n	8007c14 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bf2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	695b      	ldr	r3, [r3, #20]
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	693a      	ldr	r2, [r7, #16]
 8007c04:	4313      	orrs	r3, r2
 8007c06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	693a      	ldr	r2, [r7, #16]
 8007c10:	4313      	orrs	r3, r2
 8007c12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	693a      	ldr	r2, [r7, #16]
 8007c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	685a      	ldr	r2, [r3, #4]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	697a      	ldr	r2, [r7, #20]
 8007c2c:	621a      	str	r2, [r3, #32]
}
 8007c2e:	bf00      	nop
 8007c30:	371c      	adds	r7, #28
 8007c32:	46bd      	mov	sp, r7
 8007c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	40012c00 	.word	0x40012c00
 8007c40:	40013400 	.word	0x40013400
 8007c44:	40014000 	.word	0x40014000
 8007c48:	40014400 	.word	0x40014400
 8007c4c:	40014800 	.word	0x40014800

08007c50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b087      	sub	sp, #28
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
 8007c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a1b      	ldr	r3, [r3, #32]
 8007c5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6a1b      	ldr	r3, [r3, #32]
 8007c64:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	69db      	ldr	r3, [r3, #28]
 8007c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0303 	bic.w	r3, r3, #3
 8007c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	68fa      	ldr	r2, [r7, #12]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	021b      	lsls	r3, r3, #8
 8007ca4:	697a      	ldr	r2, [r7, #20]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4a27      	ldr	r2, [pc, #156]	; (8007d4c <TIM_OC3_SetConfig+0xfc>)
 8007cae:	4293      	cmp	r3, r2
 8007cb0:	d003      	beq.n	8007cba <TIM_OC3_SetConfig+0x6a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	4a26      	ldr	r2, [pc, #152]	; (8007d50 <TIM_OC3_SetConfig+0x100>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d10d      	bne.n	8007cd6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cc0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	021b      	lsls	r3, r3, #8
 8007cc8:	697a      	ldr	r2, [r7, #20]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a1c      	ldr	r2, [pc, #112]	; (8007d4c <TIM_OC3_SetConfig+0xfc>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00f      	beq.n	8007cfe <TIM_OC3_SetConfig+0xae>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a1b      	ldr	r2, [pc, #108]	; (8007d50 <TIM_OC3_SetConfig+0x100>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d00b      	beq.n	8007cfe <TIM_OC3_SetConfig+0xae>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a1a      	ldr	r2, [pc, #104]	; (8007d54 <TIM_OC3_SetConfig+0x104>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d007      	beq.n	8007cfe <TIM_OC3_SetConfig+0xae>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a19      	ldr	r2, [pc, #100]	; (8007d58 <TIM_OC3_SetConfig+0x108>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d003      	beq.n	8007cfe <TIM_OC3_SetConfig+0xae>
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	4a18      	ldr	r2, [pc, #96]	; (8007d5c <TIM_OC3_SetConfig+0x10c>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d113      	bne.n	8007d26 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	011b      	lsls	r3, r3, #4
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	4313      	orrs	r3, r2
 8007d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	699b      	ldr	r3, [r3, #24]
 8007d1e:	011b      	lsls	r3, r3, #4
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	685a      	ldr	r2, [r3, #4]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	621a      	str	r2, [r3, #32]
}
 8007d40:	bf00      	nop
 8007d42:	371c      	adds	r7, #28
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	40012c00 	.word	0x40012c00
 8007d50:	40013400 	.word	0x40013400
 8007d54:	40014000 	.word	0x40014000
 8007d58:	40014400 	.word	0x40014400
 8007d5c:	40014800 	.word	0x40014800

08007d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b087      	sub	sp, #28
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	021b      	lsls	r3, r3, #8
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	4313      	orrs	r3, r2
 8007da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007dae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	031b      	lsls	r3, r3, #12
 8007db6:	697a      	ldr	r2, [r7, #20]
 8007db8:	4313      	orrs	r3, r2
 8007dba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a28      	ldr	r2, [pc, #160]	; (8007e60 <TIM_OC4_SetConfig+0x100>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d003      	beq.n	8007dcc <TIM_OC4_SetConfig+0x6c>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	4a27      	ldr	r2, [pc, #156]	; (8007e64 <TIM_OC4_SetConfig+0x104>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d10d      	bne.n	8007de8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007dd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	031b      	lsls	r3, r3, #12
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007de6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a1d      	ldr	r2, [pc, #116]	; (8007e60 <TIM_OC4_SetConfig+0x100>)
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d00f      	beq.n	8007e10 <TIM_OC4_SetConfig+0xb0>
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a1c      	ldr	r2, [pc, #112]	; (8007e64 <TIM_OC4_SetConfig+0x104>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d00b      	beq.n	8007e10 <TIM_OC4_SetConfig+0xb0>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a1b      	ldr	r2, [pc, #108]	; (8007e68 <TIM_OC4_SetConfig+0x108>)
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	d007      	beq.n	8007e10 <TIM_OC4_SetConfig+0xb0>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a1a      	ldr	r2, [pc, #104]	; (8007e6c <TIM_OC4_SetConfig+0x10c>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d003      	beq.n	8007e10 <TIM_OC4_SetConfig+0xb0>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	4a19      	ldr	r2, [pc, #100]	; (8007e70 <TIM_OC4_SetConfig+0x110>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d113      	bne.n	8007e38 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e16:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007e18:	693b      	ldr	r3, [r7, #16]
 8007e1a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007e1e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	695b      	ldr	r3, [r3, #20]
 8007e24:	019b      	lsls	r3, r3, #6
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007e2c:	683b      	ldr	r3, [r7, #0]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	019b      	lsls	r3, r3, #6
 8007e32:	693a      	ldr	r2, [r7, #16]
 8007e34:	4313      	orrs	r3, r2
 8007e36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	693a      	ldr	r2, [r7, #16]
 8007e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	68fa      	ldr	r2, [r7, #12]
 8007e42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	697a      	ldr	r2, [r7, #20]
 8007e50:	621a      	str	r2, [r3, #32]
}
 8007e52:	bf00      	nop
 8007e54:	371c      	adds	r7, #28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5c:	4770      	bx	lr
 8007e5e:	bf00      	nop
 8007e60:	40012c00 	.word	0x40012c00
 8007e64:	40013400 	.word	0x40013400
 8007e68:	40014000 	.word	0x40014000
 8007e6c:	40014400 	.word	0x40014400
 8007e70:	40014800 	.word	0x40014800

08007e74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b087      	sub	sp, #28
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6a1b      	ldr	r3, [r3, #32]
 8007e88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ea6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ea8:	683b      	ldr	r3, [r7, #0]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007eb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	041b      	lsls	r3, r3, #16
 8007ec0:	693a      	ldr	r2, [r7, #16]
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	4a17      	ldr	r2, [pc, #92]	; (8007f28 <TIM_OC5_SetConfig+0xb4>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d00f      	beq.n	8007eee <TIM_OC5_SetConfig+0x7a>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	4a16      	ldr	r2, [pc, #88]	; (8007f2c <TIM_OC5_SetConfig+0xb8>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d00b      	beq.n	8007eee <TIM_OC5_SetConfig+0x7a>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	4a15      	ldr	r2, [pc, #84]	; (8007f30 <TIM_OC5_SetConfig+0xbc>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d007      	beq.n	8007eee <TIM_OC5_SetConfig+0x7a>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	4a14      	ldr	r2, [pc, #80]	; (8007f34 <TIM_OC5_SetConfig+0xc0>)
 8007ee2:	4293      	cmp	r3, r2
 8007ee4:	d003      	beq.n	8007eee <TIM_OC5_SetConfig+0x7a>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	4a13      	ldr	r2, [pc, #76]	; (8007f38 <TIM_OC5_SetConfig+0xc4>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d109      	bne.n	8007f02 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ef4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	695b      	ldr	r3, [r3, #20]
 8007efa:	021b      	lsls	r3, r3, #8
 8007efc:	697a      	ldr	r2, [r7, #20]
 8007efe:	4313      	orrs	r3, r2
 8007f00:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	697a      	ldr	r2, [r7, #20]
 8007f06:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	693a      	ldr	r2, [r7, #16]
 8007f1a:	621a      	str	r2, [r3, #32]
}
 8007f1c:	bf00      	nop
 8007f1e:	371c      	adds	r7, #28
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	40012c00 	.word	0x40012c00
 8007f2c:	40013400 	.word	0x40013400
 8007f30:	40014000 	.word	0x40014000
 8007f34:	40014400 	.word	0x40014400
 8007f38:	40014800 	.word	0x40014800

08007f3c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b087      	sub	sp, #28
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
 8007f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a1b      	ldr	r3, [r3, #32]
 8007f4a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6a1b      	ldr	r3, [r3, #32]
 8007f50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	685b      	ldr	r3, [r3, #4]
 8007f5c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f70:	683b      	ldr	r3, [r7, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	021b      	lsls	r3, r3, #8
 8007f76:	68fa      	ldr	r2, [r7, #12]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007f7c:	693b      	ldr	r3, [r7, #16]
 8007f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f84:	683b      	ldr	r3, [r7, #0]
 8007f86:	689b      	ldr	r3, [r3, #8]
 8007f88:	051b      	lsls	r3, r3, #20
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a18      	ldr	r2, [pc, #96]	; (8007ff4 <TIM_OC6_SetConfig+0xb8>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d00f      	beq.n	8007fb8 <TIM_OC6_SetConfig+0x7c>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a17      	ldr	r2, [pc, #92]	; (8007ff8 <TIM_OC6_SetConfig+0xbc>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d00b      	beq.n	8007fb8 <TIM_OC6_SetConfig+0x7c>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a16      	ldr	r2, [pc, #88]	; (8007ffc <TIM_OC6_SetConfig+0xc0>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d007      	beq.n	8007fb8 <TIM_OC6_SetConfig+0x7c>
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a15      	ldr	r2, [pc, #84]	; (8008000 <TIM_OC6_SetConfig+0xc4>)
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d003      	beq.n	8007fb8 <TIM_OC6_SetConfig+0x7c>
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a14      	ldr	r2, [pc, #80]	; (8008004 <TIM_OC6_SetConfig+0xc8>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d109      	bne.n	8007fcc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	695b      	ldr	r3, [r3, #20]
 8007fc4:	029b      	lsls	r3, r3, #10
 8007fc6:	697a      	ldr	r2, [r7, #20]
 8007fc8:	4313      	orrs	r3, r2
 8007fca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	697a      	ldr	r2, [r7, #20]
 8007fd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	68fa      	ldr	r2, [r7, #12]
 8007fd6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007fd8:	683b      	ldr	r3, [r7, #0]
 8007fda:	685a      	ldr	r2, [r3, #4]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	693a      	ldr	r2, [r7, #16]
 8007fe4:	621a      	str	r2, [r3, #32]
}
 8007fe6:	bf00      	nop
 8007fe8:	371c      	adds	r7, #28
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	40012c00 	.word	0x40012c00
 8007ff8:	40013400 	.word	0x40013400
 8007ffc:	40014000 	.word	0x40014000
 8008000:	40014400 	.word	0x40014400
 8008004:	40014800 	.word	0x40014800

08008008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008008:	b480      	push	{r7}
 800800a:	b087      	sub	sp, #28
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	6a1b      	ldr	r3, [r3, #32]
 8008018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6a1b      	ldr	r3, [r3, #32]
 800801e:	f023 0201 	bic.w	r2, r3, #1
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	011b      	lsls	r3, r3, #4
 8008038:	693a      	ldr	r2, [r7, #16]
 800803a:	4313      	orrs	r3, r2
 800803c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f023 030a 	bic.w	r3, r3, #10
 8008044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008046:	697a      	ldr	r2, [r7, #20]
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	4313      	orrs	r3, r2
 800804c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	697a      	ldr	r2, [r7, #20]
 8008058:	621a      	str	r2, [r3, #32]
}
 800805a:	bf00      	nop
 800805c:	371c      	adds	r7, #28
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008066:	b480      	push	{r7}
 8008068:	b087      	sub	sp, #28
 800806a:	af00      	add	r7, sp, #0
 800806c:	60f8      	str	r0, [r7, #12]
 800806e:	60b9      	str	r1, [r7, #8]
 8008070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6a1b      	ldr	r3, [r3, #32]
 8008076:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	f023 0210 	bic.w	r2, r3, #16
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800808a:	693b      	ldr	r3, [r7, #16]
 800808c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008090:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	031b      	lsls	r3, r3, #12
 8008096:	693a      	ldr	r2, [r7, #16]
 8008098:	4313      	orrs	r3, r2
 800809a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080a2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	011b      	lsls	r3, r3, #4
 80080a8:	697a      	ldr	r2, [r7, #20]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	697a      	ldr	r2, [r7, #20]
 80080b8:	621a      	str	r2, [r3, #32]
}
 80080ba:	bf00      	nop
 80080bc:	371c      	adds	r7, #28
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b085      	sub	sp, #20
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
 80080ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80080dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80080e2:	683a      	ldr	r2, [r7, #0]
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	4313      	orrs	r3, r2
 80080e8:	f043 0307 	orr.w	r3, r3, #7
 80080ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	68fa      	ldr	r2, [r7, #12]
 80080f2:	609a      	str	r2, [r3, #8]
}
 80080f4:	bf00      	nop
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008100:	b480      	push	{r7}
 8008102:	b087      	sub	sp, #28
 8008104:	af00      	add	r7, sp, #0
 8008106:	60f8      	str	r0, [r7, #12]
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	607a      	str	r2, [r7, #4]
 800810c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008114:	697b      	ldr	r3, [r7, #20]
 8008116:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800811a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	021a      	lsls	r2, r3, #8
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	431a      	orrs	r2, r3
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4313      	orrs	r3, r2
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	4313      	orrs	r3, r2
 800812c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	697a      	ldr	r2, [r7, #20]
 8008132:	609a      	str	r2, [r3, #8]
}
 8008134:	bf00      	nop
 8008136:	371c      	adds	r7, #28
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	f003 031f 	and.w	r3, r3, #31
 8008152:	2201      	movs	r2, #1
 8008154:	fa02 f303 	lsl.w	r3, r2, r3
 8008158:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	6a1a      	ldr	r2, [r3, #32]
 800815e:	697b      	ldr	r3, [r7, #20]
 8008160:	43db      	mvns	r3, r3
 8008162:	401a      	ands	r2, r3
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	6a1a      	ldr	r2, [r3, #32]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f003 031f 	and.w	r3, r3, #31
 8008172:	6879      	ldr	r1, [r7, #4]
 8008174:	fa01 f303 	lsl.w	r3, r1, r3
 8008178:	431a      	orrs	r2, r3
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	621a      	str	r2, [r3, #32]
}
 800817e:	bf00      	nop
 8008180:	371c      	adds	r7, #28
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
	...

0800818c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800818c:	b480      	push	{r7}
 800818e:	b085      	sub	sp, #20
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800819c:	2b01      	cmp	r3, #1
 800819e:	d101      	bne.n	80081a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081a0:	2302      	movs	r3, #2
 80081a2:	e065      	b.n	8008270 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2201      	movs	r2, #1
 80081a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2202      	movs	r2, #2
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a2c      	ldr	r2, [pc, #176]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d004      	beq.n	80081d8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a2b      	ldr	r2, [pc, #172]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d108      	bne.n	80081ea <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80081de:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80081f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	68fa      	ldr	r2, [r7, #12]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a1b      	ldr	r2, [pc, #108]	; (800827c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d018      	beq.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800821a:	d013      	beq.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a18      	ldr	r2, [pc, #96]	; (8008284 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d00e      	beq.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a17      	ldr	r2, [pc, #92]	; (8008288 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d009      	beq.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a12      	ldr	r2, [pc, #72]	; (8008280 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d004      	beq.n	8008244 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a13      	ldr	r2, [pc, #76]	; (800828c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d10c      	bne.n	800825e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800824a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	689b      	ldr	r3, [r3, #8]
 8008250:	68ba      	ldr	r2, [r7, #8]
 8008252:	4313      	orrs	r3, r2
 8008254:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2200      	movs	r2, #0
 800826a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800826e:	2300      	movs	r3, #0
}
 8008270:	4618      	mov	r0, r3
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	40012c00 	.word	0x40012c00
 8008280:	40013400 	.word	0x40013400
 8008284:	40000400 	.word	0x40000400
 8008288:	40000800 	.word	0x40000800
 800828c:	40014000 	.word	0x40014000

08008290 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800829a:	2300      	movs	r3, #0
 800829c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80082a4:	2b01      	cmp	r3, #1
 80082a6:	d101      	bne.n	80082ac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80082a8:	2302      	movs	r3, #2
 80082aa:	e073      	b.n	8008394 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	4313      	orrs	r3, r2
 80082c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	689b      	ldr	r3, [r3, #8]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4313      	orrs	r3, r2
 80082ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	691b      	ldr	r3, [r3, #16]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	695b      	ldr	r3, [r3, #20]
 8008304:	4313      	orrs	r3, r2
 8008306:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008312:	4313      	orrs	r3, r2
 8008314:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	699b      	ldr	r3, [r3, #24]
 8008320:	041b      	lsls	r3, r3, #16
 8008322:	4313      	orrs	r3, r2
 8008324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	4313      	orrs	r3, r2
 8008332:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a19      	ldr	r2, [pc, #100]	; (80083a0 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d004      	beq.n	8008348 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	4a18      	ldr	r2, [pc, #96]	; (80083a4 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8008344:	4293      	cmp	r3, r2
 8008346:	d11c      	bne.n	8008382 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008352:	051b      	lsls	r3, r3, #20
 8008354:	4313      	orrs	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	6a1b      	ldr	r3, [r3, #32]
 8008362:	4313      	orrs	r3, r2
 8008364:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008392:	2300      	movs	r3, #0
}
 8008394:	4618      	mov	r0, r3
 8008396:	3714      	adds	r7, #20
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	40012c00 	.word	0x40012c00
 80083a4:	40013400 	.word	0x40013400

080083a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80083b0:	bf00      	nop
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr

080083bc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80083c4:	bf00      	nop
 80083c6:	370c      	adds	r7, #12
 80083c8:	46bd      	mov	sp, r7
 80083ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ce:	4770      	bx	lr

080083d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80083d0:	b480      	push	{r7}
 80083d2:	b083      	sub	sp, #12
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80083e4:	b480      	push	{r7}
 80083e6:	b083      	sub	sp, #12
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80083ec:	bf00      	nop
 80083ee:	370c      	adds	r7, #12
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr

080083f8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008400:	bf00      	nop
 8008402:	370c      	adds	r7, #12
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr

0800840c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <_ZdlPvj>:
 8008434:	f000 b97a 	b.w	800872c <_ZdlPv>

08008438 <_ZNSaIcEC1Ev>:
 8008438:	4770      	bx	lr

0800843a <_ZNSaIcED1Ev>:
 800843a:	4770      	bx	lr

0800843c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800843c:	b10a      	cbz	r2, 8008442 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800843e:	f000 bd34 	b.w	8008eaa <memcpy>
 8008442:	4770      	bx	lr

08008444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8008444:	b508      	push	{r3, lr}
 8008446:	680b      	ldr	r3, [r1, #0]
 8008448:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800844c:	d302      	bcc.n	8008454 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800844e:	480d      	ldr	r0, [pc, #52]	; (8008484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8008450:	f000 f985 	bl	800875e <_ZSt20__throw_length_errorPKc>
 8008454:	4293      	cmp	r3, r2
 8008456:	d90b      	bls.n	8008470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008458:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800845c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8008460:	d206      	bcs.n	8008470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8008462:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8008466:	bf2a      	itet	cs
 8008468:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800846c:	6008      	strcc	r0, [r1, #0]
 800846e:	600b      	strcs	r3, [r1, #0]
 8008470:	6808      	ldr	r0, [r1, #0]
 8008472:	3001      	adds	r0, #1
 8008474:	d501      	bpl.n	800847a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8008476:	f000 f96c 	bl	8008752 <_ZSt17__throw_bad_allocv>
 800847a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800847e:	f000 b957 	b.w	8008730 <_Znwj>
 8008482:	bf00      	nop
 8008484:	08009a30 	.word	0x08009a30

08008488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8008488:	f850 3b08 	ldr.w	r3, [r0], #8
 800848c:	4283      	cmp	r3, r0
 800848e:	d002      	beq.n	8008496 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8008490:	4618      	mov	r0, r3
 8008492:	f000 b94b 	b.w	800872c <_ZdlPv>
 8008496:	4770      	bx	lr

08008498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8008498:	2a01      	cmp	r2, #1
 800849a:	b410      	push	{r4}
 800849c:	d104      	bne.n	80084a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800849e:	780a      	ldrb	r2, [r1, #0]
 80084a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084a4:	7002      	strb	r2, [r0, #0]
 80084a6:	4770      	bx	lr
 80084a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ac:	f7ff bfc6 	b.w	800843c <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

080084b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80084b0:	b508      	push	{r3, lr}
 80084b2:	1a52      	subs	r2, r2, r1
 80084b4:	f7ff fff0 	bl	8008498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80084b8:	bd08      	pop	{r3, pc}

080084ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80084ba:	b508      	push	{r3, lr}
 80084bc:	1a52      	subs	r2, r2, r1
 80084be:	f7ff ffeb 	bl	8008498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80084c2:	bd08      	pop	{r3, pc}

080084c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 80084c4:	4288      	cmp	r0, r1
 80084c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80084c8:	4604      	mov	r4, r0
 80084ca:	460e      	mov	r6, r1
 80084cc:	d01e      	beq.n	800850c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 80084ce:	4603      	mov	r3, r0
 80084d0:	684d      	ldr	r5, [r1, #4]
 80084d2:	f853 2b08 	ldr.w	r2, [r3], #8
 80084d6:	429a      	cmp	r2, r3
 80084d8:	bf14      	ite	ne
 80084da:	6882      	ldrne	r2, [r0, #8]
 80084dc:	220f      	moveq	r2, #15
 80084de:	42aa      	cmp	r2, r5
 80084e0:	d20a      	bcs.n	80084f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 80084e2:	a901      	add	r1, sp, #4
 80084e4:	9501      	str	r5, [sp, #4]
 80084e6:	f7ff ffad 	bl	8008444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80084ea:	4607      	mov	r7, r0
 80084ec:	4620      	mov	r0, r4
 80084ee:	f7ff ffcb 	bl	8008488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80084f2:	9b01      	ldr	r3, [sp, #4]
 80084f4:	6027      	str	r7, [r4, #0]
 80084f6:	60a3      	str	r3, [r4, #8]
 80084f8:	b125      	cbz	r5, 8008504 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 80084fa:	6831      	ldr	r1, [r6, #0]
 80084fc:	6820      	ldr	r0, [r4, #0]
 80084fe:	462a      	mov	r2, r5
 8008500:	f7ff ffca 	bl	8008498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	6065      	str	r5, [r4, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	555a      	strb	r2, [r3, r5]
 800850c:	b003      	add	sp, #12
 800850e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8008510:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008514:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008516:	461f      	mov	r7, r3
 8008518:	6843      	ldr	r3, [r0, #4]
 800851a:	eb01 0802 	add.w	r8, r1, r2
 800851e:	1ab2      	subs	r2, r6, r2
 8008520:	441a      	add	r2, r3
 8008522:	eba3 0908 	sub.w	r9, r3, r8
 8008526:	4603      	mov	r3, r0
 8008528:	9201      	str	r2, [sp, #4]
 800852a:	f853 2b08 	ldr.w	r2, [r3], #8
 800852e:	429a      	cmp	r2, r3
 8008530:	bf18      	it	ne
 8008532:	6882      	ldrne	r2, [r0, #8]
 8008534:	460d      	mov	r5, r1
 8008536:	bf08      	it	eq
 8008538:	220f      	moveq	r2, #15
 800853a:	a901      	add	r1, sp, #4
 800853c:	4604      	mov	r4, r0
 800853e:	f7ff ff81 	bl	8008444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008542:	4682      	mov	sl, r0
 8008544:	b11d      	cbz	r5, 800854e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8008546:	6821      	ldr	r1, [r4, #0]
 8008548:	462a      	mov	r2, r5
 800854a:	f7ff ffa5 	bl	8008498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800854e:	b137      	cbz	r7, 800855e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8008550:	b12e      	cbz	r6, 800855e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8008552:	4632      	mov	r2, r6
 8008554:	4639      	mov	r1, r7
 8008556:	eb0a 0005 	add.w	r0, sl, r5
 800855a:	f7ff ff9d 	bl	8008498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800855e:	f1b9 0f00 	cmp.w	r9, #0
 8008562:	d007      	beq.n	8008574 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8008564:	6821      	ldr	r1, [r4, #0]
 8008566:	4435      	add	r5, r6
 8008568:	464a      	mov	r2, r9
 800856a:	4441      	add	r1, r8
 800856c:	eb0a 0005 	add.w	r0, sl, r5
 8008570:	f7ff ff92 	bl	8008498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8008574:	4620      	mov	r0, r4
 8008576:	f7ff ff87 	bl	8008488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800857a:	9b01      	ldr	r3, [sp, #4]
 800857c:	f8c4 a000 	str.w	sl, [r4]
 8008580:	60a3      	str	r3, [r4, #8]
 8008582:	b002      	add	sp, #8
 8008584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008588 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8008588:	f100 0208 	add.w	r2, r0, #8
 800858c:	6002      	str	r2, [r0, #0]
 800858e:	2200      	movs	r2, #0
 8008590:	6042      	str	r2, [r0, #4]
 8008592:	7202      	strb	r2, [r0, #8]
 8008594:	4770      	bx	lr

08008596 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8008596:	b510      	push	{r4, lr}
 8008598:	4604      	mov	r4, r0
 800859a:	f7ff ff75 	bl	8008488 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800859e:	4620      	mov	r0, r4
 80085a0:	bd10      	pop	{r4, pc}

080085a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 80085a2:	b510      	push	{r4, lr}
 80085a4:	4604      	mov	r4, r0
 80085a6:	f7ff ff8d 	bl	80084c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 80085aa:	4620      	mov	r0, r4
 80085ac:	bd10      	pop	{r4, pc}

080085ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 80085ae:	b570      	push	{r4, r5, r6, lr}
 80085b0:	460c      	mov	r4, r1
 80085b2:	f851 3b08 	ldr.w	r3, [r1], #8
 80085b6:	4299      	cmp	r1, r3
 80085b8:	4605      	mov	r5, r0
 80085ba:	6800      	ldr	r0, [r0, #0]
 80085bc:	d110      	bne.n	80085e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x32>
 80085be:	42a5      	cmp	r5, r4
 80085c0:	d008      	beq.n	80085d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 80085c2:	6862      	ldr	r2, [r4, #4]
 80085c4:	b10a      	cbz	r2, 80085ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c>
 80085c6:	f7ff ff67 	bl	8008498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80085ca:	6863      	ldr	r3, [r4, #4]
 80085cc:	682a      	ldr	r2, [r5, #0]
 80085ce:	606b      	str	r3, [r5, #4]
 80085d0:	2100      	movs	r1, #0
 80085d2:	54d1      	strb	r1, [r2, r3]
 80085d4:	6822      	ldr	r2, [r4, #0]
 80085d6:	2300      	movs	r3, #0
 80085d8:	6063      	str	r3, [r4, #4]
 80085da:	7013      	strb	r3, [r2, #0]
 80085dc:	4628      	mov	r0, r5
 80085de:	bd70      	pop	{r4, r5, r6, pc}
 80085e0:	602b      	str	r3, [r5, #0]
 80085e2:	f105 0608 	add.w	r6, r5, #8
 80085e6:	6863      	ldr	r3, [r4, #4]
 80085e8:	606b      	str	r3, [r5, #4]
 80085ea:	42b0      	cmp	r0, r6
 80085ec:	68a3      	ldr	r3, [r4, #8]
 80085ee:	bf18      	it	ne
 80085f0:	68aa      	ldrne	r2, [r5, #8]
 80085f2:	60ab      	str	r3, [r5, #8]
 80085f4:	bf08      	it	eq
 80085f6:	2000      	moveq	r0, #0
 80085f8:	b110      	cbz	r0, 8008600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x52>
 80085fa:	6020      	str	r0, [r4, #0]
 80085fc:	60a2      	str	r2, [r4, #8]
 80085fe:	e7e9      	b.n	80085d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 8008600:	6021      	str	r1, [r4, #0]
 8008602:	e7e7      	b.n	80085d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>

08008604 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8008604:	6840      	ldr	r0, [r0, #4]
 8008606:	4770      	bx	lr

08008608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8008608:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800860a:	4604      	mov	r4, r0
 800860c:	4623      	mov	r3, r4
 800860e:	6840      	ldr	r0, [r0, #4]
 8008610:	f853 6b08 	ldr.w	r6, [r3], #8
 8008614:	429e      	cmp	r6, r3
 8008616:	bf18      	it	ne
 8008618:	68a3      	ldrne	r3, [r4, #8]
 800861a:	eb00 0502 	add.w	r5, r0, r2
 800861e:	bf08      	it	eq
 8008620:	230f      	moveq	r3, #15
 8008622:	429d      	cmp	r5, r3
 8008624:	d80a      	bhi.n	800863c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8008626:	b112      	cbz	r2, 800862e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8008628:	4430      	add	r0, r6
 800862a:	f7ff ff35 	bl	8008498 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	6065      	str	r5, [r4, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	4620      	mov	r0, r4
 8008636:	555a      	strb	r2, [r3, r5]
 8008638:	b002      	add	sp, #8
 800863a:	bd70      	pop	{r4, r5, r6, pc}
 800863c:	9200      	str	r2, [sp, #0]
 800863e:	460b      	mov	r3, r1
 8008640:	2200      	movs	r2, #0
 8008642:	4601      	mov	r1, r0
 8008644:	4620      	mov	r0, r4
 8008646:	f7ff ff63 	bl	8008510 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800864a:	e7f0      	b.n	800862e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800864c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800864c:	b508      	push	{r3, lr}
 800864e:	e9d1 1200 	ldrd	r1, r2, [r1]
 8008652:	f7ff ffd9 	bl	8008608 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8008656:	bd08      	pop	{r3, pc}

08008658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8008658:	b508      	push	{r3, lr}
 800865a:	f7ff fff7 	bl	800864c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800865e:	bd08      	pop	{r3, pc}

08008660 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8008660:	6800      	ldr	r0, [r0, #0]
 8008662:	4770      	bx	lr

08008664 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8008664:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008666:	4604      	mov	r4, r0
 8008668:	4616      	mov	r6, r2
 800866a:	460d      	mov	r5, r1
 800866c:	b919      	cbnz	r1, 8008676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800866e:	b112      	cbz	r2, 8008676 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8008670:	480d      	ldr	r0, [pc, #52]	; (80086a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8008672:	f000 f871 	bl	8008758 <_ZSt19__throw_logic_errorPKc>
 8008676:	1b73      	subs	r3, r6, r5
 8008678:	2b0f      	cmp	r3, #15
 800867a:	9301      	str	r3, [sp, #4]
 800867c:	d907      	bls.n	800868e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800867e:	2200      	movs	r2, #0
 8008680:	a901      	add	r1, sp, #4
 8008682:	4620      	mov	r0, r4
 8008684:	f7ff fede 	bl	8008444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8008688:	9b01      	ldr	r3, [sp, #4]
 800868a:	6020      	str	r0, [r4, #0]
 800868c:	60a3      	str	r3, [r4, #8]
 800868e:	4632      	mov	r2, r6
 8008690:	4629      	mov	r1, r5
 8008692:	6820      	ldr	r0, [r4, #0]
 8008694:	f7ff ff0c 	bl	80084b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 8008698:	9b01      	ldr	r3, [sp, #4]
 800869a:	6822      	ldr	r2, [r4, #0]
 800869c:	6063      	str	r3, [r4, #4]
 800869e:	2100      	movs	r1, #0
 80086a0:	54d1      	strb	r1, [r2, r3]
 80086a2:	b002      	add	sp, #8
 80086a4:	bd70      	pop	{r4, r5, r6, pc}
 80086a6:	bf00      	nop
 80086a8:	08009a48 	.word	0x08009a48

080086ac <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	f100 0308 	add.w	r3, r0, #8
 80086b2:	6003      	str	r3, [r0, #0]
 80086b4:	e9d1 5200 	ldrd	r5, r2, [r1]
 80086b8:	4604      	mov	r4, r0
 80086ba:	f04f 0300 	mov.w	r3, #0
 80086be:	442a      	add	r2, r5
 80086c0:	4629      	mov	r1, r5
 80086c2:	f7ff ffcf 	bl	8008664 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80086c6:	4620      	mov	r0, r4
 80086c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080086cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80086cc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086ce:	4604      	mov	r4, r0
 80086d0:	4616      	mov	r6, r2
 80086d2:	460d      	mov	r5, r1
 80086d4:	b919      	cbnz	r1, 80086de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80086d6:	b112      	cbz	r2, 80086de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80086d8:	480d      	ldr	r0, [pc, #52]	; (8008710 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80086da:	f000 f83d 	bl	8008758 <_ZSt19__throw_logic_errorPKc>
 80086de:	1b73      	subs	r3, r6, r5
 80086e0:	2b0f      	cmp	r3, #15
 80086e2:	9301      	str	r3, [sp, #4]
 80086e4:	d907      	bls.n	80086f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80086e6:	2200      	movs	r2, #0
 80086e8:	a901      	add	r1, sp, #4
 80086ea:	4620      	mov	r0, r4
 80086ec:	f7ff feaa 	bl	8008444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80086f0:	9b01      	ldr	r3, [sp, #4]
 80086f2:	6020      	str	r0, [r4, #0]
 80086f4:	60a3      	str	r3, [r4, #8]
 80086f6:	4632      	mov	r2, r6
 80086f8:	4629      	mov	r1, r5
 80086fa:	6820      	ldr	r0, [r4, #0]
 80086fc:	f7ff fedd 	bl	80084ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8008700:	9b01      	ldr	r3, [sp, #4]
 8008702:	6822      	ldr	r2, [r4, #0]
 8008704:	6063      	str	r3, [r4, #4]
 8008706:	2100      	movs	r1, #0
 8008708:	54d1      	strb	r1, [r2, r3]
 800870a:	b002      	add	sp, #8
 800870c:	bd70      	pop	{r4, r5, r6, pc}
 800870e:	bf00      	nop
 8008710:	08009a48 	.word	0x08009a48

08008714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 8008714:	b510      	push	{r4, lr}
 8008716:	f100 0308 	add.w	r3, r0, #8
 800871a:	4604      	mov	r4, r0
 800871c:	6003      	str	r3, [r0, #0]
 800871e:	440a      	add	r2, r1
 8008720:	f04f 0300 	mov.w	r3, #0
 8008724:	f7ff ffd2 	bl	80086cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8008728:	4620      	mov	r0, r4
 800872a:	bd10      	pop	{r4, pc}

0800872c <_ZdlPv>:
 800872c:	f000 b832 	b.w	8008794 <free>

08008730 <_Znwj>:
 8008730:	2801      	cmp	r0, #1
 8008732:	bf38      	it	cc
 8008734:	2001      	movcc	r0, #1
 8008736:	b510      	push	{r4, lr}
 8008738:	4604      	mov	r4, r0
 800873a:	4620      	mov	r0, r4
 800873c:	f000 f822 	bl	8008784 <malloc>
 8008740:	b100      	cbz	r0, 8008744 <_Znwj+0x14>
 8008742:	bd10      	pop	{r4, pc}
 8008744:	f000 f80e 	bl	8008764 <_ZSt15get_new_handlerv>
 8008748:	b908      	cbnz	r0, 800874e <_Znwj+0x1e>
 800874a:	f000 f813 	bl	8008774 <abort>
 800874e:	4780      	blx	r0
 8008750:	e7f3      	b.n	800873a <_Znwj+0xa>

08008752 <_ZSt17__throw_bad_allocv>:
 8008752:	b508      	push	{r3, lr}
 8008754:	f000 f80e 	bl	8008774 <abort>

08008758 <_ZSt19__throw_logic_errorPKc>:
 8008758:	b508      	push	{r3, lr}
 800875a:	f000 f80b 	bl	8008774 <abort>

0800875e <_ZSt20__throw_length_errorPKc>:
 800875e:	b508      	push	{r3, lr}
 8008760:	f000 f808 	bl	8008774 <abort>

08008764 <_ZSt15get_new_handlerv>:
 8008764:	4b02      	ldr	r3, [pc, #8]	; (8008770 <_ZSt15get_new_handlerv+0xc>)
 8008766:	6818      	ldr	r0, [r3, #0]
 8008768:	f3bf 8f5b 	dmb	ish
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	200006b8 	.word	0x200006b8

08008774 <abort>:
 8008774:	b508      	push	{r3, lr}
 8008776:	2006      	movs	r0, #6
 8008778:	f000 faf8 	bl	8008d6c <raise>
 800877c:	2001      	movs	r0, #1
 800877e:	f7fc fa1f 	bl	8004bc0 <_exit>
	...

08008784 <malloc>:
 8008784:	4b02      	ldr	r3, [pc, #8]	; (8008790 <malloc+0xc>)
 8008786:	4601      	mov	r1, r0
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	f000 b82b 	b.w	80087e4 <_malloc_r>
 800878e:	bf00      	nop
 8008790:	20000064 	.word	0x20000064

08008794 <free>:
 8008794:	4b02      	ldr	r3, [pc, #8]	; (80087a0 <free+0xc>)
 8008796:	4601      	mov	r1, r0
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	f000 bb95 	b.w	8008ec8 <_free_r>
 800879e:	bf00      	nop
 80087a0:	20000064 	.word	0x20000064

080087a4 <sbrk_aligned>:
 80087a4:	b570      	push	{r4, r5, r6, lr}
 80087a6:	4e0e      	ldr	r6, [pc, #56]	; (80087e0 <sbrk_aligned+0x3c>)
 80087a8:	460c      	mov	r4, r1
 80087aa:	6831      	ldr	r1, [r6, #0]
 80087ac:	4605      	mov	r5, r0
 80087ae:	b911      	cbnz	r1, 80087b6 <sbrk_aligned+0x12>
 80087b0:	f000 fb2c 	bl	8008e0c <_sbrk_r>
 80087b4:	6030      	str	r0, [r6, #0]
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f000 fb27 	bl	8008e0c <_sbrk_r>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	d00a      	beq.n	80087d8 <sbrk_aligned+0x34>
 80087c2:	1cc4      	adds	r4, r0, #3
 80087c4:	f024 0403 	bic.w	r4, r4, #3
 80087c8:	42a0      	cmp	r0, r4
 80087ca:	d007      	beq.n	80087dc <sbrk_aligned+0x38>
 80087cc:	1a21      	subs	r1, r4, r0
 80087ce:	4628      	mov	r0, r5
 80087d0:	f000 fb1c 	bl	8008e0c <_sbrk_r>
 80087d4:	3001      	adds	r0, #1
 80087d6:	d101      	bne.n	80087dc <sbrk_aligned+0x38>
 80087d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80087dc:	4620      	mov	r0, r4
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	200006c0 	.word	0x200006c0

080087e4 <_malloc_r>:
 80087e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087e8:	1ccd      	adds	r5, r1, #3
 80087ea:	f025 0503 	bic.w	r5, r5, #3
 80087ee:	3508      	adds	r5, #8
 80087f0:	2d0c      	cmp	r5, #12
 80087f2:	bf38      	it	cc
 80087f4:	250c      	movcc	r5, #12
 80087f6:	2d00      	cmp	r5, #0
 80087f8:	4607      	mov	r7, r0
 80087fa:	db01      	blt.n	8008800 <_malloc_r+0x1c>
 80087fc:	42a9      	cmp	r1, r5
 80087fe:	d905      	bls.n	800880c <_malloc_r+0x28>
 8008800:	230c      	movs	r3, #12
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	2600      	movs	r6, #0
 8008806:	4630      	mov	r0, r6
 8008808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800880c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80088e0 <_malloc_r+0xfc>
 8008810:	f000 f868 	bl	80088e4 <__malloc_lock>
 8008814:	f8d8 3000 	ldr.w	r3, [r8]
 8008818:	461c      	mov	r4, r3
 800881a:	bb5c      	cbnz	r4, 8008874 <_malloc_r+0x90>
 800881c:	4629      	mov	r1, r5
 800881e:	4638      	mov	r0, r7
 8008820:	f7ff ffc0 	bl	80087a4 <sbrk_aligned>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	4604      	mov	r4, r0
 8008828:	d155      	bne.n	80088d6 <_malloc_r+0xf2>
 800882a:	f8d8 4000 	ldr.w	r4, [r8]
 800882e:	4626      	mov	r6, r4
 8008830:	2e00      	cmp	r6, #0
 8008832:	d145      	bne.n	80088c0 <_malloc_r+0xdc>
 8008834:	2c00      	cmp	r4, #0
 8008836:	d048      	beq.n	80088ca <_malloc_r+0xe6>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	4631      	mov	r1, r6
 800883c:	4638      	mov	r0, r7
 800883e:	eb04 0903 	add.w	r9, r4, r3
 8008842:	f000 fae3 	bl	8008e0c <_sbrk_r>
 8008846:	4581      	cmp	r9, r0
 8008848:	d13f      	bne.n	80088ca <_malloc_r+0xe6>
 800884a:	6821      	ldr	r1, [r4, #0]
 800884c:	1a6d      	subs	r5, r5, r1
 800884e:	4629      	mov	r1, r5
 8008850:	4638      	mov	r0, r7
 8008852:	f7ff ffa7 	bl	80087a4 <sbrk_aligned>
 8008856:	3001      	adds	r0, #1
 8008858:	d037      	beq.n	80088ca <_malloc_r+0xe6>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	442b      	add	r3, r5
 800885e:	6023      	str	r3, [r4, #0]
 8008860:	f8d8 3000 	ldr.w	r3, [r8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d038      	beq.n	80088da <_malloc_r+0xf6>
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	42a2      	cmp	r2, r4
 800886c:	d12b      	bne.n	80088c6 <_malloc_r+0xe2>
 800886e:	2200      	movs	r2, #0
 8008870:	605a      	str	r2, [r3, #4]
 8008872:	e00f      	b.n	8008894 <_malloc_r+0xb0>
 8008874:	6822      	ldr	r2, [r4, #0]
 8008876:	1b52      	subs	r2, r2, r5
 8008878:	d41f      	bmi.n	80088ba <_malloc_r+0xd6>
 800887a:	2a0b      	cmp	r2, #11
 800887c:	d917      	bls.n	80088ae <_malloc_r+0xca>
 800887e:	1961      	adds	r1, r4, r5
 8008880:	42a3      	cmp	r3, r4
 8008882:	6025      	str	r5, [r4, #0]
 8008884:	bf18      	it	ne
 8008886:	6059      	strne	r1, [r3, #4]
 8008888:	6863      	ldr	r3, [r4, #4]
 800888a:	bf08      	it	eq
 800888c:	f8c8 1000 	streq.w	r1, [r8]
 8008890:	5162      	str	r2, [r4, r5]
 8008892:	604b      	str	r3, [r1, #4]
 8008894:	4638      	mov	r0, r7
 8008896:	f104 060b 	add.w	r6, r4, #11
 800889a:	f000 f829 	bl	80088f0 <__malloc_unlock>
 800889e:	f026 0607 	bic.w	r6, r6, #7
 80088a2:	1d23      	adds	r3, r4, #4
 80088a4:	1af2      	subs	r2, r6, r3
 80088a6:	d0ae      	beq.n	8008806 <_malloc_r+0x22>
 80088a8:	1b9b      	subs	r3, r3, r6
 80088aa:	50a3      	str	r3, [r4, r2]
 80088ac:	e7ab      	b.n	8008806 <_malloc_r+0x22>
 80088ae:	42a3      	cmp	r3, r4
 80088b0:	6862      	ldr	r2, [r4, #4]
 80088b2:	d1dd      	bne.n	8008870 <_malloc_r+0x8c>
 80088b4:	f8c8 2000 	str.w	r2, [r8]
 80088b8:	e7ec      	b.n	8008894 <_malloc_r+0xb0>
 80088ba:	4623      	mov	r3, r4
 80088bc:	6864      	ldr	r4, [r4, #4]
 80088be:	e7ac      	b.n	800881a <_malloc_r+0x36>
 80088c0:	4634      	mov	r4, r6
 80088c2:	6876      	ldr	r6, [r6, #4]
 80088c4:	e7b4      	b.n	8008830 <_malloc_r+0x4c>
 80088c6:	4613      	mov	r3, r2
 80088c8:	e7cc      	b.n	8008864 <_malloc_r+0x80>
 80088ca:	230c      	movs	r3, #12
 80088cc:	603b      	str	r3, [r7, #0]
 80088ce:	4638      	mov	r0, r7
 80088d0:	f000 f80e 	bl	80088f0 <__malloc_unlock>
 80088d4:	e797      	b.n	8008806 <_malloc_r+0x22>
 80088d6:	6025      	str	r5, [r4, #0]
 80088d8:	e7dc      	b.n	8008894 <_malloc_r+0xb0>
 80088da:	605b      	str	r3, [r3, #4]
 80088dc:	deff      	udf	#255	; 0xff
 80088de:	bf00      	nop
 80088e0:	200006bc 	.word	0x200006bc

080088e4 <__malloc_lock>:
 80088e4:	4801      	ldr	r0, [pc, #4]	; (80088ec <__malloc_lock+0x8>)
 80088e6:	f000 bade 	b.w	8008ea6 <__retarget_lock_acquire_recursive>
 80088ea:	bf00      	nop
 80088ec:	20000804 	.word	0x20000804

080088f0 <__malloc_unlock>:
 80088f0:	4801      	ldr	r0, [pc, #4]	; (80088f8 <__malloc_unlock+0x8>)
 80088f2:	f000 bad9 	b.w	8008ea8 <__retarget_lock_release_recursive>
 80088f6:	bf00      	nop
 80088f8:	20000804 	.word	0x20000804

080088fc <std>:
 80088fc:	2300      	movs	r3, #0
 80088fe:	b510      	push	{r4, lr}
 8008900:	4604      	mov	r4, r0
 8008902:	e9c0 3300 	strd	r3, r3, [r0]
 8008906:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800890a:	6083      	str	r3, [r0, #8]
 800890c:	8181      	strh	r1, [r0, #12]
 800890e:	6643      	str	r3, [r0, #100]	; 0x64
 8008910:	81c2      	strh	r2, [r0, #14]
 8008912:	6183      	str	r3, [r0, #24]
 8008914:	4619      	mov	r1, r3
 8008916:	2208      	movs	r2, #8
 8008918:	305c      	adds	r0, #92	; 0x5c
 800891a:	f000 f9f7 	bl	8008d0c <memset>
 800891e:	4b0d      	ldr	r3, [pc, #52]	; (8008954 <std+0x58>)
 8008920:	6263      	str	r3, [r4, #36]	; 0x24
 8008922:	4b0d      	ldr	r3, [pc, #52]	; (8008958 <std+0x5c>)
 8008924:	62a3      	str	r3, [r4, #40]	; 0x28
 8008926:	4b0d      	ldr	r3, [pc, #52]	; (800895c <std+0x60>)
 8008928:	62e3      	str	r3, [r4, #44]	; 0x2c
 800892a:	4b0d      	ldr	r3, [pc, #52]	; (8008960 <std+0x64>)
 800892c:	6323      	str	r3, [r4, #48]	; 0x30
 800892e:	4b0d      	ldr	r3, [pc, #52]	; (8008964 <std+0x68>)
 8008930:	6224      	str	r4, [r4, #32]
 8008932:	429c      	cmp	r4, r3
 8008934:	d006      	beq.n	8008944 <std+0x48>
 8008936:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800893a:	4294      	cmp	r4, r2
 800893c:	d002      	beq.n	8008944 <std+0x48>
 800893e:	33d0      	adds	r3, #208	; 0xd0
 8008940:	429c      	cmp	r4, r3
 8008942:	d105      	bne.n	8008950 <std+0x54>
 8008944:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800894c:	f000 baaa 	b.w	8008ea4 <__retarget_lock_init_recursive>
 8008950:	bd10      	pop	{r4, pc}
 8008952:	bf00      	nop
 8008954:	08008b5d 	.word	0x08008b5d
 8008958:	08008b7f 	.word	0x08008b7f
 800895c:	08008bb7 	.word	0x08008bb7
 8008960:	08008bdb 	.word	0x08008bdb
 8008964:	200006c4 	.word	0x200006c4

08008968 <stdio_exit_handler>:
 8008968:	4a02      	ldr	r2, [pc, #8]	; (8008974 <stdio_exit_handler+0xc>)
 800896a:	4903      	ldr	r1, [pc, #12]	; (8008978 <stdio_exit_handler+0x10>)
 800896c:	4803      	ldr	r0, [pc, #12]	; (800897c <stdio_exit_handler+0x14>)
 800896e:	f000 b869 	b.w	8008a44 <_fwalk_sglue>
 8008972:	bf00      	nop
 8008974:	2000000c 	.word	0x2000000c
 8008978:	08009615 	.word	0x08009615
 800897c:	20000018 	.word	0x20000018

08008980 <cleanup_stdio>:
 8008980:	6841      	ldr	r1, [r0, #4]
 8008982:	4b0c      	ldr	r3, [pc, #48]	; (80089b4 <cleanup_stdio+0x34>)
 8008984:	4299      	cmp	r1, r3
 8008986:	b510      	push	{r4, lr}
 8008988:	4604      	mov	r4, r0
 800898a:	d001      	beq.n	8008990 <cleanup_stdio+0x10>
 800898c:	f000 fe42 	bl	8009614 <_fflush_r>
 8008990:	68a1      	ldr	r1, [r4, #8]
 8008992:	4b09      	ldr	r3, [pc, #36]	; (80089b8 <cleanup_stdio+0x38>)
 8008994:	4299      	cmp	r1, r3
 8008996:	d002      	beq.n	800899e <cleanup_stdio+0x1e>
 8008998:	4620      	mov	r0, r4
 800899a:	f000 fe3b 	bl	8009614 <_fflush_r>
 800899e:	68e1      	ldr	r1, [r4, #12]
 80089a0:	4b06      	ldr	r3, [pc, #24]	; (80089bc <cleanup_stdio+0x3c>)
 80089a2:	4299      	cmp	r1, r3
 80089a4:	d004      	beq.n	80089b0 <cleanup_stdio+0x30>
 80089a6:	4620      	mov	r0, r4
 80089a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ac:	f000 be32 	b.w	8009614 <_fflush_r>
 80089b0:	bd10      	pop	{r4, pc}
 80089b2:	bf00      	nop
 80089b4:	200006c4 	.word	0x200006c4
 80089b8:	2000072c 	.word	0x2000072c
 80089bc:	20000794 	.word	0x20000794

080089c0 <global_stdio_init.part.0>:
 80089c0:	b510      	push	{r4, lr}
 80089c2:	4b0b      	ldr	r3, [pc, #44]	; (80089f0 <global_stdio_init.part.0+0x30>)
 80089c4:	4c0b      	ldr	r4, [pc, #44]	; (80089f4 <global_stdio_init.part.0+0x34>)
 80089c6:	4a0c      	ldr	r2, [pc, #48]	; (80089f8 <global_stdio_init.part.0+0x38>)
 80089c8:	601a      	str	r2, [r3, #0]
 80089ca:	4620      	mov	r0, r4
 80089cc:	2200      	movs	r2, #0
 80089ce:	2104      	movs	r1, #4
 80089d0:	f7ff ff94 	bl	80088fc <std>
 80089d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80089d8:	2201      	movs	r2, #1
 80089da:	2109      	movs	r1, #9
 80089dc:	f7ff ff8e 	bl	80088fc <std>
 80089e0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80089e4:	2202      	movs	r2, #2
 80089e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089ea:	2112      	movs	r1, #18
 80089ec:	f7ff bf86 	b.w	80088fc <std>
 80089f0:	200007fc 	.word	0x200007fc
 80089f4:	200006c4 	.word	0x200006c4
 80089f8:	08008969 	.word	0x08008969

080089fc <__sfp_lock_acquire>:
 80089fc:	4801      	ldr	r0, [pc, #4]	; (8008a04 <__sfp_lock_acquire+0x8>)
 80089fe:	f000 ba52 	b.w	8008ea6 <__retarget_lock_acquire_recursive>
 8008a02:	bf00      	nop
 8008a04:	20000805 	.word	0x20000805

08008a08 <__sfp_lock_release>:
 8008a08:	4801      	ldr	r0, [pc, #4]	; (8008a10 <__sfp_lock_release+0x8>)
 8008a0a:	f000 ba4d 	b.w	8008ea8 <__retarget_lock_release_recursive>
 8008a0e:	bf00      	nop
 8008a10:	20000805 	.word	0x20000805

08008a14 <__sinit>:
 8008a14:	b510      	push	{r4, lr}
 8008a16:	4604      	mov	r4, r0
 8008a18:	f7ff fff0 	bl	80089fc <__sfp_lock_acquire>
 8008a1c:	6a23      	ldr	r3, [r4, #32]
 8008a1e:	b11b      	cbz	r3, 8008a28 <__sinit+0x14>
 8008a20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a24:	f7ff bff0 	b.w	8008a08 <__sfp_lock_release>
 8008a28:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <__sinit+0x28>)
 8008a2a:	6223      	str	r3, [r4, #32]
 8008a2c:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <__sinit+0x2c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1f5      	bne.n	8008a20 <__sinit+0xc>
 8008a34:	f7ff ffc4 	bl	80089c0 <global_stdio_init.part.0>
 8008a38:	e7f2      	b.n	8008a20 <__sinit+0xc>
 8008a3a:	bf00      	nop
 8008a3c:	08008981 	.word	0x08008981
 8008a40:	200007fc 	.word	0x200007fc

08008a44 <_fwalk_sglue>:
 8008a44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a48:	4607      	mov	r7, r0
 8008a4a:	4688      	mov	r8, r1
 8008a4c:	4614      	mov	r4, r2
 8008a4e:	2600      	movs	r6, #0
 8008a50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a54:	f1b9 0901 	subs.w	r9, r9, #1
 8008a58:	d505      	bpl.n	8008a66 <_fwalk_sglue+0x22>
 8008a5a:	6824      	ldr	r4, [r4, #0]
 8008a5c:	2c00      	cmp	r4, #0
 8008a5e:	d1f7      	bne.n	8008a50 <_fwalk_sglue+0xc>
 8008a60:	4630      	mov	r0, r6
 8008a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a66:	89ab      	ldrh	r3, [r5, #12]
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	d907      	bls.n	8008a7c <_fwalk_sglue+0x38>
 8008a6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a70:	3301      	adds	r3, #1
 8008a72:	d003      	beq.n	8008a7c <_fwalk_sglue+0x38>
 8008a74:	4629      	mov	r1, r5
 8008a76:	4638      	mov	r0, r7
 8008a78:	47c0      	blx	r8
 8008a7a:	4306      	orrs	r6, r0
 8008a7c:	3568      	adds	r5, #104	; 0x68
 8008a7e:	e7e9      	b.n	8008a54 <_fwalk_sglue+0x10>

08008a80 <iprintf>:
 8008a80:	b40f      	push	{r0, r1, r2, r3}
 8008a82:	b507      	push	{r0, r1, r2, lr}
 8008a84:	4906      	ldr	r1, [pc, #24]	; (8008aa0 <iprintf+0x20>)
 8008a86:	ab04      	add	r3, sp, #16
 8008a88:	6808      	ldr	r0, [r1, #0]
 8008a8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a8e:	6881      	ldr	r1, [r0, #8]
 8008a90:	9301      	str	r3, [sp, #4]
 8008a92:	f000 fa8f 	bl	8008fb4 <_vfiprintf_r>
 8008a96:	b003      	add	sp, #12
 8008a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a9c:	b004      	add	sp, #16
 8008a9e:	4770      	bx	lr
 8008aa0:	20000064 	.word	0x20000064

08008aa4 <_puts_r>:
 8008aa4:	6a03      	ldr	r3, [r0, #32]
 8008aa6:	b570      	push	{r4, r5, r6, lr}
 8008aa8:	6884      	ldr	r4, [r0, #8]
 8008aaa:	4605      	mov	r5, r0
 8008aac:	460e      	mov	r6, r1
 8008aae:	b90b      	cbnz	r3, 8008ab4 <_puts_r+0x10>
 8008ab0:	f7ff ffb0 	bl	8008a14 <__sinit>
 8008ab4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ab6:	07db      	lsls	r3, r3, #31
 8008ab8:	d405      	bmi.n	8008ac6 <_puts_r+0x22>
 8008aba:	89a3      	ldrh	r3, [r4, #12]
 8008abc:	0598      	lsls	r0, r3, #22
 8008abe:	d402      	bmi.n	8008ac6 <_puts_r+0x22>
 8008ac0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ac2:	f000 f9f0 	bl	8008ea6 <__retarget_lock_acquire_recursive>
 8008ac6:	89a3      	ldrh	r3, [r4, #12]
 8008ac8:	0719      	lsls	r1, r3, #28
 8008aca:	d513      	bpl.n	8008af4 <_puts_r+0x50>
 8008acc:	6923      	ldr	r3, [r4, #16]
 8008ace:	b18b      	cbz	r3, 8008af4 <_puts_r+0x50>
 8008ad0:	3e01      	subs	r6, #1
 8008ad2:	68a3      	ldr	r3, [r4, #8]
 8008ad4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ad8:	3b01      	subs	r3, #1
 8008ada:	60a3      	str	r3, [r4, #8]
 8008adc:	b9e9      	cbnz	r1, 8008b1a <_puts_r+0x76>
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	da2e      	bge.n	8008b40 <_puts_r+0x9c>
 8008ae2:	4622      	mov	r2, r4
 8008ae4:	210a      	movs	r1, #10
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	f000 f87b 	bl	8008be2 <__swbuf_r>
 8008aec:	3001      	adds	r0, #1
 8008aee:	d007      	beq.n	8008b00 <_puts_r+0x5c>
 8008af0:	250a      	movs	r5, #10
 8008af2:	e007      	b.n	8008b04 <_puts_r+0x60>
 8008af4:	4621      	mov	r1, r4
 8008af6:	4628      	mov	r0, r5
 8008af8:	f000 f8b0 	bl	8008c5c <__swsetup_r>
 8008afc:	2800      	cmp	r0, #0
 8008afe:	d0e7      	beq.n	8008ad0 <_puts_r+0x2c>
 8008b00:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008b04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b06:	07da      	lsls	r2, r3, #31
 8008b08:	d405      	bmi.n	8008b16 <_puts_r+0x72>
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	059b      	lsls	r3, r3, #22
 8008b0e:	d402      	bmi.n	8008b16 <_puts_r+0x72>
 8008b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b12:	f000 f9c9 	bl	8008ea8 <__retarget_lock_release_recursive>
 8008b16:	4628      	mov	r0, r5
 8008b18:	bd70      	pop	{r4, r5, r6, pc}
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	da04      	bge.n	8008b28 <_puts_r+0x84>
 8008b1e:	69a2      	ldr	r2, [r4, #24]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	dc06      	bgt.n	8008b32 <_puts_r+0x8e>
 8008b24:	290a      	cmp	r1, #10
 8008b26:	d004      	beq.n	8008b32 <_puts_r+0x8e>
 8008b28:	6823      	ldr	r3, [r4, #0]
 8008b2a:	1c5a      	adds	r2, r3, #1
 8008b2c:	6022      	str	r2, [r4, #0]
 8008b2e:	7019      	strb	r1, [r3, #0]
 8008b30:	e7cf      	b.n	8008ad2 <_puts_r+0x2e>
 8008b32:	4622      	mov	r2, r4
 8008b34:	4628      	mov	r0, r5
 8008b36:	f000 f854 	bl	8008be2 <__swbuf_r>
 8008b3a:	3001      	adds	r0, #1
 8008b3c:	d1c9      	bne.n	8008ad2 <_puts_r+0x2e>
 8008b3e:	e7df      	b.n	8008b00 <_puts_r+0x5c>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	250a      	movs	r5, #10
 8008b44:	1c5a      	adds	r2, r3, #1
 8008b46:	6022      	str	r2, [r4, #0]
 8008b48:	701d      	strb	r5, [r3, #0]
 8008b4a:	e7db      	b.n	8008b04 <_puts_r+0x60>

08008b4c <puts>:
 8008b4c:	4b02      	ldr	r3, [pc, #8]	; (8008b58 <puts+0xc>)
 8008b4e:	4601      	mov	r1, r0
 8008b50:	6818      	ldr	r0, [r3, #0]
 8008b52:	f7ff bfa7 	b.w	8008aa4 <_puts_r>
 8008b56:	bf00      	nop
 8008b58:	20000064 	.word	0x20000064

08008b5c <__sread>:
 8008b5c:	b510      	push	{r4, lr}
 8008b5e:	460c      	mov	r4, r1
 8008b60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b64:	f000 f92c 	bl	8008dc0 <_read_r>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	bfab      	itete	ge
 8008b6c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008b6e:	89a3      	ldrhlt	r3, [r4, #12]
 8008b70:	181b      	addge	r3, r3, r0
 8008b72:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008b76:	bfac      	ite	ge
 8008b78:	6563      	strge	r3, [r4, #84]	; 0x54
 8008b7a:	81a3      	strhlt	r3, [r4, #12]
 8008b7c:	bd10      	pop	{r4, pc}

08008b7e <__swrite>:
 8008b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b82:	461f      	mov	r7, r3
 8008b84:	898b      	ldrh	r3, [r1, #12]
 8008b86:	05db      	lsls	r3, r3, #23
 8008b88:	4605      	mov	r5, r0
 8008b8a:	460c      	mov	r4, r1
 8008b8c:	4616      	mov	r6, r2
 8008b8e:	d505      	bpl.n	8008b9c <__swrite+0x1e>
 8008b90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008b94:	2302      	movs	r3, #2
 8008b96:	2200      	movs	r2, #0
 8008b98:	f000 f900 	bl	8008d9c <_lseek_r>
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ba2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ba6:	81a3      	strh	r3, [r4, #12]
 8008ba8:	4632      	mov	r2, r6
 8008baa:	463b      	mov	r3, r7
 8008bac:	4628      	mov	r0, r5
 8008bae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bb2:	f000 b93b 	b.w	8008e2c <_write_r>

08008bb6 <__sseek>:
 8008bb6:	b510      	push	{r4, lr}
 8008bb8:	460c      	mov	r4, r1
 8008bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bbe:	f000 f8ed 	bl	8008d9c <_lseek_r>
 8008bc2:	1c43      	adds	r3, r0, #1
 8008bc4:	89a3      	ldrh	r3, [r4, #12]
 8008bc6:	bf15      	itete	ne
 8008bc8:	6560      	strne	r0, [r4, #84]	; 0x54
 8008bca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008bce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008bd2:	81a3      	strheq	r3, [r4, #12]
 8008bd4:	bf18      	it	ne
 8008bd6:	81a3      	strhne	r3, [r4, #12]
 8008bd8:	bd10      	pop	{r4, pc}

08008bda <__sclose>:
 8008bda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008bde:	f000 b8cd 	b.w	8008d7c <_close_r>

08008be2 <__swbuf_r>:
 8008be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008be4:	460e      	mov	r6, r1
 8008be6:	4614      	mov	r4, r2
 8008be8:	4605      	mov	r5, r0
 8008bea:	b118      	cbz	r0, 8008bf4 <__swbuf_r+0x12>
 8008bec:	6a03      	ldr	r3, [r0, #32]
 8008bee:	b90b      	cbnz	r3, 8008bf4 <__swbuf_r+0x12>
 8008bf0:	f7ff ff10 	bl	8008a14 <__sinit>
 8008bf4:	69a3      	ldr	r3, [r4, #24]
 8008bf6:	60a3      	str	r3, [r4, #8]
 8008bf8:	89a3      	ldrh	r3, [r4, #12]
 8008bfa:	071a      	lsls	r2, r3, #28
 8008bfc:	d525      	bpl.n	8008c4a <__swbuf_r+0x68>
 8008bfe:	6923      	ldr	r3, [r4, #16]
 8008c00:	b31b      	cbz	r3, 8008c4a <__swbuf_r+0x68>
 8008c02:	6823      	ldr	r3, [r4, #0]
 8008c04:	6922      	ldr	r2, [r4, #16]
 8008c06:	1a98      	subs	r0, r3, r2
 8008c08:	6963      	ldr	r3, [r4, #20]
 8008c0a:	b2f6      	uxtb	r6, r6
 8008c0c:	4283      	cmp	r3, r0
 8008c0e:	4637      	mov	r7, r6
 8008c10:	dc04      	bgt.n	8008c1c <__swbuf_r+0x3a>
 8008c12:	4621      	mov	r1, r4
 8008c14:	4628      	mov	r0, r5
 8008c16:	f000 fcfd 	bl	8009614 <_fflush_r>
 8008c1a:	b9e0      	cbnz	r0, 8008c56 <__swbuf_r+0x74>
 8008c1c:	68a3      	ldr	r3, [r4, #8]
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	60a3      	str	r3, [r4, #8]
 8008c22:	6823      	ldr	r3, [r4, #0]
 8008c24:	1c5a      	adds	r2, r3, #1
 8008c26:	6022      	str	r2, [r4, #0]
 8008c28:	701e      	strb	r6, [r3, #0]
 8008c2a:	6962      	ldr	r2, [r4, #20]
 8008c2c:	1c43      	adds	r3, r0, #1
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d004      	beq.n	8008c3c <__swbuf_r+0x5a>
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	07db      	lsls	r3, r3, #31
 8008c36:	d506      	bpl.n	8008c46 <__swbuf_r+0x64>
 8008c38:	2e0a      	cmp	r6, #10
 8008c3a:	d104      	bne.n	8008c46 <__swbuf_r+0x64>
 8008c3c:	4621      	mov	r1, r4
 8008c3e:	4628      	mov	r0, r5
 8008c40:	f000 fce8 	bl	8009614 <_fflush_r>
 8008c44:	b938      	cbnz	r0, 8008c56 <__swbuf_r+0x74>
 8008c46:	4638      	mov	r0, r7
 8008c48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c4a:	4621      	mov	r1, r4
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	f000 f805 	bl	8008c5c <__swsetup_r>
 8008c52:	2800      	cmp	r0, #0
 8008c54:	d0d5      	beq.n	8008c02 <__swbuf_r+0x20>
 8008c56:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008c5a:	e7f4      	b.n	8008c46 <__swbuf_r+0x64>

08008c5c <__swsetup_r>:
 8008c5c:	b538      	push	{r3, r4, r5, lr}
 8008c5e:	4b2a      	ldr	r3, [pc, #168]	; (8008d08 <__swsetup_r+0xac>)
 8008c60:	4605      	mov	r5, r0
 8008c62:	6818      	ldr	r0, [r3, #0]
 8008c64:	460c      	mov	r4, r1
 8008c66:	b118      	cbz	r0, 8008c70 <__swsetup_r+0x14>
 8008c68:	6a03      	ldr	r3, [r0, #32]
 8008c6a:	b90b      	cbnz	r3, 8008c70 <__swsetup_r+0x14>
 8008c6c:	f7ff fed2 	bl	8008a14 <__sinit>
 8008c70:	89a3      	ldrh	r3, [r4, #12]
 8008c72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c76:	0718      	lsls	r0, r3, #28
 8008c78:	d422      	bmi.n	8008cc0 <__swsetup_r+0x64>
 8008c7a:	06d9      	lsls	r1, r3, #27
 8008c7c:	d407      	bmi.n	8008c8e <__swsetup_r+0x32>
 8008c7e:	2309      	movs	r3, #9
 8008c80:	602b      	str	r3, [r5, #0]
 8008c82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008c86:	81a3      	strh	r3, [r4, #12]
 8008c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c8c:	e034      	b.n	8008cf8 <__swsetup_r+0x9c>
 8008c8e:	0758      	lsls	r0, r3, #29
 8008c90:	d512      	bpl.n	8008cb8 <__swsetup_r+0x5c>
 8008c92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c94:	b141      	cbz	r1, 8008ca8 <__swsetup_r+0x4c>
 8008c96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c9a:	4299      	cmp	r1, r3
 8008c9c:	d002      	beq.n	8008ca4 <__swsetup_r+0x48>
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f000 f912 	bl	8008ec8 <_free_r>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	6363      	str	r3, [r4, #52]	; 0x34
 8008ca8:	89a3      	ldrh	r3, [r4, #12]
 8008caa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008cae:	81a3      	strh	r3, [r4, #12]
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	6063      	str	r3, [r4, #4]
 8008cb4:	6923      	ldr	r3, [r4, #16]
 8008cb6:	6023      	str	r3, [r4, #0]
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	f043 0308 	orr.w	r3, r3, #8
 8008cbe:	81a3      	strh	r3, [r4, #12]
 8008cc0:	6923      	ldr	r3, [r4, #16]
 8008cc2:	b94b      	cbnz	r3, 8008cd8 <__swsetup_r+0x7c>
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008cce:	d003      	beq.n	8008cd8 <__swsetup_r+0x7c>
 8008cd0:	4621      	mov	r1, r4
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	f000 fcec 	bl	80096b0 <__smakebuf_r>
 8008cd8:	89a0      	ldrh	r0, [r4, #12]
 8008cda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008cde:	f010 0301 	ands.w	r3, r0, #1
 8008ce2:	d00a      	beq.n	8008cfa <__swsetup_r+0x9e>
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	60a3      	str	r3, [r4, #8]
 8008ce8:	6963      	ldr	r3, [r4, #20]
 8008cea:	425b      	negs	r3, r3
 8008cec:	61a3      	str	r3, [r4, #24]
 8008cee:	6923      	ldr	r3, [r4, #16]
 8008cf0:	b943      	cbnz	r3, 8008d04 <__swsetup_r+0xa8>
 8008cf2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008cf6:	d1c4      	bne.n	8008c82 <__swsetup_r+0x26>
 8008cf8:	bd38      	pop	{r3, r4, r5, pc}
 8008cfa:	0781      	lsls	r1, r0, #30
 8008cfc:	bf58      	it	pl
 8008cfe:	6963      	ldrpl	r3, [r4, #20]
 8008d00:	60a3      	str	r3, [r4, #8]
 8008d02:	e7f4      	b.n	8008cee <__swsetup_r+0x92>
 8008d04:	2000      	movs	r0, #0
 8008d06:	e7f7      	b.n	8008cf8 <__swsetup_r+0x9c>
 8008d08:	20000064 	.word	0x20000064

08008d0c <memset>:
 8008d0c:	4402      	add	r2, r0
 8008d0e:	4603      	mov	r3, r0
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d100      	bne.n	8008d16 <memset+0xa>
 8008d14:	4770      	bx	lr
 8008d16:	f803 1b01 	strb.w	r1, [r3], #1
 8008d1a:	e7f9      	b.n	8008d10 <memset+0x4>

08008d1c <_raise_r>:
 8008d1c:	291f      	cmp	r1, #31
 8008d1e:	b538      	push	{r3, r4, r5, lr}
 8008d20:	4604      	mov	r4, r0
 8008d22:	460d      	mov	r5, r1
 8008d24:	d904      	bls.n	8008d30 <_raise_r+0x14>
 8008d26:	2316      	movs	r3, #22
 8008d28:	6003      	str	r3, [r0, #0]
 8008d2a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d2e:	bd38      	pop	{r3, r4, r5, pc}
 8008d30:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008d32:	b112      	cbz	r2, 8008d3a <_raise_r+0x1e>
 8008d34:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d38:	b94b      	cbnz	r3, 8008d4e <_raise_r+0x32>
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f000 f864 	bl	8008e08 <_getpid_r>
 8008d40:	462a      	mov	r2, r5
 8008d42:	4601      	mov	r1, r0
 8008d44:	4620      	mov	r0, r4
 8008d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d4a:	f000 b84b 	b.w	8008de4 <_kill_r>
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d00a      	beq.n	8008d68 <_raise_r+0x4c>
 8008d52:	1c59      	adds	r1, r3, #1
 8008d54:	d103      	bne.n	8008d5e <_raise_r+0x42>
 8008d56:	2316      	movs	r3, #22
 8008d58:	6003      	str	r3, [r0, #0]
 8008d5a:	2001      	movs	r0, #1
 8008d5c:	e7e7      	b.n	8008d2e <_raise_r+0x12>
 8008d5e:	2400      	movs	r4, #0
 8008d60:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008d64:	4628      	mov	r0, r5
 8008d66:	4798      	blx	r3
 8008d68:	2000      	movs	r0, #0
 8008d6a:	e7e0      	b.n	8008d2e <_raise_r+0x12>

08008d6c <raise>:
 8008d6c:	4b02      	ldr	r3, [pc, #8]	; (8008d78 <raise+0xc>)
 8008d6e:	4601      	mov	r1, r0
 8008d70:	6818      	ldr	r0, [r3, #0]
 8008d72:	f7ff bfd3 	b.w	8008d1c <_raise_r>
 8008d76:	bf00      	nop
 8008d78:	20000064 	.word	0x20000064

08008d7c <_close_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4d06      	ldr	r5, [pc, #24]	; (8008d98 <_close_r+0x1c>)
 8008d80:	2300      	movs	r3, #0
 8008d82:	4604      	mov	r4, r0
 8008d84:	4608      	mov	r0, r1
 8008d86:	602b      	str	r3, [r5, #0]
 8008d88:	f7fb ff5d 	bl	8004c46 <_close>
 8008d8c:	1c43      	adds	r3, r0, #1
 8008d8e:	d102      	bne.n	8008d96 <_close_r+0x1a>
 8008d90:	682b      	ldr	r3, [r5, #0]
 8008d92:	b103      	cbz	r3, 8008d96 <_close_r+0x1a>
 8008d94:	6023      	str	r3, [r4, #0]
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	20000800 	.word	0x20000800

08008d9c <_lseek_r>:
 8008d9c:	b538      	push	{r3, r4, r5, lr}
 8008d9e:	4d07      	ldr	r5, [pc, #28]	; (8008dbc <_lseek_r+0x20>)
 8008da0:	4604      	mov	r4, r0
 8008da2:	4608      	mov	r0, r1
 8008da4:	4611      	mov	r1, r2
 8008da6:	2200      	movs	r2, #0
 8008da8:	602a      	str	r2, [r5, #0]
 8008daa:	461a      	mov	r2, r3
 8008dac:	f7fb ff72 	bl	8004c94 <_lseek>
 8008db0:	1c43      	adds	r3, r0, #1
 8008db2:	d102      	bne.n	8008dba <_lseek_r+0x1e>
 8008db4:	682b      	ldr	r3, [r5, #0]
 8008db6:	b103      	cbz	r3, 8008dba <_lseek_r+0x1e>
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
 8008dbc:	20000800 	.word	0x20000800

08008dc0 <_read_r>:
 8008dc0:	b538      	push	{r3, r4, r5, lr}
 8008dc2:	4d07      	ldr	r5, [pc, #28]	; (8008de0 <_read_r+0x20>)
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	4608      	mov	r0, r1
 8008dc8:	4611      	mov	r1, r2
 8008dca:	2200      	movs	r2, #0
 8008dcc:	602a      	str	r2, [r5, #0]
 8008dce:	461a      	mov	r2, r3
 8008dd0:	f7fb ff00 	bl	8004bd4 <_read>
 8008dd4:	1c43      	adds	r3, r0, #1
 8008dd6:	d102      	bne.n	8008dde <_read_r+0x1e>
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	b103      	cbz	r3, 8008dde <_read_r+0x1e>
 8008ddc:	6023      	str	r3, [r4, #0]
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	20000800 	.word	0x20000800

08008de4 <_kill_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d07      	ldr	r5, [pc, #28]	; (8008e04 <_kill_r+0x20>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	4611      	mov	r1, r2
 8008df0:	602b      	str	r3, [r5, #0]
 8008df2:	f7fb fed5 	bl	8004ba0 <_kill>
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	d102      	bne.n	8008e00 <_kill_r+0x1c>
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	b103      	cbz	r3, 8008e00 <_kill_r+0x1c>
 8008dfe:	6023      	str	r3, [r4, #0]
 8008e00:	bd38      	pop	{r3, r4, r5, pc}
 8008e02:	bf00      	nop
 8008e04:	20000800 	.word	0x20000800

08008e08 <_getpid_r>:
 8008e08:	f7fb bec2 	b.w	8004b90 <_getpid>

08008e0c <_sbrk_r>:
 8008e0c:	b538      	push	{r3, r4, r5, lr}
 8008e0e:	4d06      	ldr	r5, [pc, #24]	; (8008e28 <_sbrk_r+0x1c>)
 8008e10:	2300      	movs	r3, #0
 8008e12:	4604      	mov	r4, r0
 8008e14:	4608      	mov	r0, r1
 8008e16:	602b      	str	r3, [r5, #0]
 8008e18:	f7fb ff4a 	bl	8004cb0 <_sbrk>
 8008e1c:	1c43      	adds	r3, r0, #1
 8008e1e:	d102      	bne.n	8008e26 <_sbrk_r+0x1a>
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	b103      	cbz	r3, 8008e26 <_sbrk_r+0x1a>
 8008e24:	6023      	str	r3, [r4, #0]
 8008e26:	bd38      	pop	{r3, r4, r5, pc}
 8008e28:	20000800 	.word	0x20000800

08008e2c <_write_r>:
 8008e2c:	b538      	push	{r3, r4, r5, lr}
 8008e2e:	4d07      	ldr	r5, [pc, #28]	; (8008e4c <_write_r+0x20>)
 8008e30:	4604      	mov	r4, r0
 8008e32:	4608      	mov	r0, r1
 8008e34:	4611      	mov	r1, r2
 8008e36:	2200      	movs	r2, #0
 8008e38:	602a      	str	r2, [r5, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f7fb fee7 	bl	8004c0e <_write>
 8008e40:	1c43      	adds	r3, r0, #1
 8008e42:	d102      	bne.n	8008e4a <_write_r+0x1e>
 8008e44:	682b      	ldr	r3, [r5, #0]
 8008e46:	b103      	cbz	r3, 8008e4a <_write_r+0x1e>
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	bd38      	pop	{r3, r4, r5, pc}
 8008e4c:	20000800 	.word	0x20000800

08008e50 <__errno>:
 8008e50:	4b01      	ldr	r3, [pc, #4]	; (8008e58 <__errno+0x8>)
 8008e52:	6818      	ldr	r0, [r3, #0]
 8008e54:	4770      	bx	lr
 8008e56:	bf00      	nop
 8008e58:	20000064 	.word	0x20000064

08008e5c <__libc_init_array>:
 8008e5c:	b570      	push	{r4, r5, r6, lr}
 8008e5e:	4d0d      	ldr	r5, [pc, #52]	; (8008e94 <__libc_init_array+0x38>)
 8008e60:	4c0d      	ldr	r4, [pc, #52]	; (8008e98 <__libc_init_array+0x3c>)
 8008e62:	1b64      	subs	r4, r4, r5
 8008e64:	10a4      	asrs	r4, r4, #2
 8008e66:	2600      	movs	r6, #0
 8008e68:	42a6      	cmp	r6, r4
 8008e6a:	d109      	bne.n	8008e80 <__libc_init_array+0x24>
 8008e6c:	4d0b      	ldr	r5, [pc, #44]	; (8008e9c <__libc_init_array+0x40>)
 8008e6e:	4c0c      	ldr	r4, [pc, #48]	; (8008ea0 <__libc_init_array+0x44>)
 8008e70:	f000 fc7c 	bl	800976c <_init>
 8008e74:	1b64      	subs	r4, r4, r5
 8008e76:	10a4      	asrs	r4, r4, #2
 8008e78:	2600      	movs	r6, #0
 8008e7a:	42a6      	cmp	r6, r4
 8008e7c:	d105      	bne.n	8008e8a <__libc_init_array+0x2e>
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}
 8008e80:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e84:	4798      	blx	r3
 8008e86:	3601      	adds	r6, #1
 8008e88:	e7ee      	b.n	8008e68 <__libc_init_array+0xc>
 8008e8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e8e:	4798      	blx	r3
 8008e90:	3601      	adds	r6, #1
 8008e92:	e7f2      	b.n	8008e7a <__libc_init_array+0x1e>
 8008e94:	08009aa8 	.word	0x08009aa8
 8008e98:	08009aa8 	.word	0x08009aa8
 8008e9c:	08009aa8 	.word	0x08009aa8
 8008ea0:	08009ab0 	.word	0x08009ab0

08008ea4 <__retarget_lock_init_recursive>:
 8008ea4:	4770      	bx	lr

08008ea6 <__retarget_lock_acquire_recursive>:
 8008ea6:	4770      	bx	lr

08008ea8 <__retarget_lock_release_recursive>:
 8008ea8:	4770      	bx	lr

08008eaa <memcpy>:
 8008eaa:	440a      	add	r2, r1
 8008eac:	4291      	cmp	r1, r2
 8008eae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008eb2:	d100      	bne.n	8008eb6 <memcpy+0xc>
 8008eb4:	4770      	bx	lr
 8008eb6:	b510      	push	{r4, lr}
 8008eb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ebc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ec0:	4291      	cmp	r1, r2
 8008ec2:	d1f9      	bne.n	8008eb8 <memcpy+0xe>
 8008ec4:	bd10      	pop	{r4, pc}
	...

08008ec8 <_free_r>:
 8008ec8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008eca:	2900      	cmp	r1, #0
 8008ecc:	d044      	beq.n	8008f58 <_free_r+0x90>
 8008ece:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed2:	9001      	str	r0, [sp, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	f1a1 0404 	sub.w	r4, r1, #4
 8008eda:	bfb8      	it	lt
 8008edc:	18e4      	addlt	r4, r4, r3
 8008ede:	f7ff fd01 	bl	80088e4 <__malloc_lock>
 8008ee2:	4a1e      	ldr	r2, [pc, #120]	; (8008f5c <_free_r+0x94>)
 8008ee4:	9801      	ldr	r0, [sp, #4]
 8008ee6:	6813      	ldr	r3, [r2, #0]
 8008ee8:	b933      	cbnz	r3, 8008ef8 <_free_r+0x30>
 8008eea:	6063      	str	r3, [r4, #4]
 8008eec:	6014      	str	r4, [r2, #0]
 8008eee:	b003      	add	sp, #12
 8008ef0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ef4:	f7ff bcfc 	b.w	80088f0 <__malloc_unlock>
 8008ef8:	42a3      	cmp	r3, r4
 8008efa:	d908      	bls.n	8008f0e <_free_r+0x46>
 8008efc:	6825      	ldr	r5, [r4, #0]
 8008efe:	1961      	adds	r1, r4, r5
 8008f00:	428b      	cmp	r3, r1
 8008f02:	bf01      	itttt	eq
 8008f04:	6819      	ldreq	r1, [r3, #0]
 8008f06:	685b      	ldreq	r3, [r3, #4]
 8008f08:	1949      	addeq	r1, r1, r5
 8008f0a:	6021      	streq	r1, [r4, #0]
 8008f0c:	e7ed      	b.n	8008eea <_free_r+0x22>
 8008f0e:	461a      	mov	r2, r3
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	b10b      	cbz	r3, 8008f18 <_free_r+0x50>
 8008f14:	42a3      	cmp	r3, r4
 8008f16:	d9fa      	bls.n	8008f0e <_free_r+0x46>
 8008f18:	6811      	ldr	r1, [r2, #0]
 8008f1a:	1855      	adds	r5, r2, r1
 8008f1c:	42a5      	cmp	r5, r4
 8008f1e:	d10b      	bne.n	8008f38 <_free_r+0x70>
 8008f20:	6824      	ldr	r4, [r4, #0]
 8008f22:	4421      	add	r1, r4
 8008f24:	1854      	adds	r4, r2, r1
 8008f26:	42a3      	cmp	r3, r4
 8008f28:	6011      	str	r1, [r2, #0]
 8008f2a:	d1e0      	bne.n	8008eee <_free_r+0x26>
 8008f2c:	681c      	ldr	r4, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	6053      	str	r3, [r2, #4]
 8008f32:	440c      	add	r4, r1
 8008f34:	6014      	str	r4, [r2, #0]
 8008f36:	e7da      	b.n	8008eee <_free_r+0x26>
 8008f38:	d902      	bls.n	8008f40 <_free_r+0x78>
 8008f3a:	230c      	movs	r3, #12
 8008f3c:	6003      	str	r3, [r0, #0]
 8008f3e:	e7d6      	b.n	8008eee <_free_r+0x26>
 8008f40:	6825      	ldr	r5, [r4, #0]
 8008f42:	1961      	adds	r1, r4, r5
 8008f44:	428b      	cmp	r3, r1
 8008f46:	bf04      	itt	eq
 8008f48:	6819      	ldreq	r1, [r3, #0]
 8008f4a:	685b      	ldreq	r3, [r3, #4]
 8008f4c:	6063      	str	r3, [r4, #4]
 8008f4e:	bf04      	itt	eq
 8008f50:	1949      	addeq	r1, r1, r5
 8008f52:	6021      	streq	r1, [r4, #0]
 8008f54:	6054      	str	r4, [r2, #4]
 8008f56:	e7ca      	b.n	8008eee <_free_r+0x26>
 8008f58:	b003      	add	sp, #12
 8008f5a:	bd30      	pop	{r4, r5, pc}
 8008f5c:	200006bc 	.word	0x200006bc

08008f60 <__sfputc_r>:
 8008f60:	6893      	ldr	r3, [r2, #8]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	b410      	push	{r4}
 8008f68:	6093      	str	r3, [r2, #8]
 8008f6a:	da08      	bge.n	8008f7e <__sfputc_r+0x1e>
 8008f6c:	6994      	ldr	r4, [r2, #24]
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	db01      	blt.n	8008f76 <__sfputc_r+0x16>
 8008f72:	290a      	cmp	r1, #10
 8008f74:	d103      	bne.n	8008f7e <__sfputc_r+0x1e>
 8008f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f7a:	f7ff be32 	b.w	8008be2 <__swbuf_r>
 8008f7e:	6813      	ldr	r3, [r2, #0]
 8008f80:	1c58      	adds	r0, r3, #1
 8008f82:	6010      	str	r0, [r2, #0]
 8008f84:	7019      	strb	r1, [r3, #0]
 8008f86:	4608      	mov	r0, r1
 8008f88:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f8c:	4770      	bx	lr

08008f8e <__sfputs_r>:
 8008f8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f90:	4606      	mov	r6, r0
 8008f92:	460f      	mov	r7, r1
 8008f94:	4614      	mov	r4, r2
 8008f96:	18d5      	adds	r5, r2, r3
 8008f98:	42ac      	cmp	r4, r5
 8008f9a:	d101      	bne.n	8008fa0 <__sfputs_r+0x12>
 8008f9c:	2000      	movs	r0, #0
 8008f9e:	e007      	b.n	8008fb0 <__sfputs_r+0x22>
 8008fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fa4:	463a      	mov	r2, r7
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f7ff ffda 	bl	8008f60 <__sfputc_r>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d1f3      	bne.n	8008f98 <__sfputs_r+0xa>
 8008fb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008fb4 <_vfiprintf_r>:
 8008fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb8:	460d      	mov	r5, r1
 8008fba:	b09d      	sub	sp, #116	; 0x74
 8008fbc:	4614      	mov	r4, r2
 8008fbe:	4698      	mov	r8, r3
 8008fc0:	4606      	mov	r6, r0
 8008fc2:	b118      	cbz	r0, 8008fcc <_vfiprintf_r+0x18>
 8008fc4:	6a03      	ldr	r3, [r0, #32]
 8008fc6:	b90b      	cbnz	r3, 8008fcc <_vfiprintf_r+0x18>
 8008fc8:	f7ff fd24 	bl	8008a14 <__sinit>
 8008fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fce:	07d9      	lsls	r1, r3, #31
 8008fd0:	d405      	bmi.n	8008fde <_vfiprintf_r+0x2a>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	059a      	lsls	r2, r3, #22
 8008fd6:	d402      	bmi.n	8008fde <_vfiprintf_r+0x2a>
 8008fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fda:	f7ff ff64 	bl	8008ea6 <__retarget_lock_acquire_recursive>
 8008fde:	89ab      	ldrh	r3, [r5, #12]
 8008fe0:	071b      	lsls	r3, r3, #28
 8008fe2:	d501      	bpl.n	8008fe8 <_vfiprintf_r+0x34>
 8008fe4:	692b      	ldr	r3, [r5, #16]
 8008fe6:	b99b      	cbnz	r3, 8009010 <_vfiprintf_r+0x5c>
 8008fe8:	4629      	mov	r1, r5
 8008fea:	4630      	mov	r0, r6
 8008fec:	f7ff fe36 	bl	8008c5c <__swsetup_r>
 8008ff0:	b170      	cbz	r0, 8009010 <_vfiprintf_r+0x5c>
 8008ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ff4:	07dc      	lsls	r4, r3, #31
 8008ff6:	d504      	bpl.n	8009002 <_vfiprintf_r+0x4e>
 8008ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ffc:	b01d      	add	sp, #116	; 0x74
 8008ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009002:	89ab      	ldrh	r3, [r5, #12]
 8009004:	0598      	lsls	r0, r3, #22
 8009006:	d4f7      	bmi.n	8008ff8 <_vfiprintf_r+0x44>
 8009008:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800900a:	f7ff ff4d 	bl	8008ea8 <__retarget_lock_release_recursive>
 800900e:	e7f3      	b.n	8008ff8 <_vfiprintf_r+0x44>
 8009010:	2300      	movs	r3, #0
 8009012:	9309      	str	r3, [sp, #36]	; 0x24
 8009014:	2320      	movs	r3, #32
 8009016:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800901a:	f8cd 800c 	str.w	r8, [sp, #12]
 800901e:	2330      	movs	r3, #48	; 0x30
 8009020:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80091d4 <_vfiprintf_r+0x220>
 8009024:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009028:	f04f 0901 	mov.w	r9, #1
 800902c:	4623      	mov	r3, r4
 800902e:	469a      	mov	sl, r3
 8009030:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009034:	b10a      	cbz	r2, 800903a <_vfiprintf_r+0x86>
 8009036:	2a25      	cmp	r2, #37	; 0x25
 8009038:	d1f9      	bne.n	800902e <_vfiprintf_r+0x7a>
 800903a:	ebba 0b04 	subs.w	fp, sl, r4
 800903e:	d00b      	beq.n	8009058 <_vfiprintf_r+0xa4>
 8009040:	465b      	mov	r3, fp
 8009042:	4622      	mov	r2, r4
 8009044:	4629      	mov	r1, r5
 8009046:	4630      	mov	r0, r6
 8009048:	f7ff ffa1 	bl	8008f8e <__sfputs_r>
 800904c:	3001      	adds	r0, #1
 800904e:	f000 80a9 	beq.w	80091a4 <_vfiprintf_r+0x1f0>
 8009052:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009054:	445a      	add	r2, fp
 8009056:	9209      	str	r2, [sp, #36]	; 0x24
 8009058:	f89a 3000 	ldrb.w	r3, [sl]
 800905c:	2b00      	cmp	r3, #0
 800905e:	f000 80a1 	beq.w	80091a4 <_vfiprintf_r+0x1f0>
 8009062:	2300      	movs	r3, #0
 8009064:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800906c:	f10a 0a01 	add.w	sl, sl, #1
 8009070:	9304      	str	r3, [sp, #16]
 8009072:	9307      	str	r3, [sp, #28]
 8009074:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009078:	931a      	str	r3, [sp, #104]	; 0x68
 800907a:	4654      	mov	r4, sl
 800907c:	2205      	movs	r2, #5
 800907e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009082:	4854      	ldr	r0, [pc, #336]	; (80091d4 <_vfiprintf_r+0x220>)
 8009084:	f7f7 f8cc 	bl	8000220 <memchr>
 8009088:	9a04      	ldr	r2, [sp, #16]
 800908a:	b9d8      	cbnz	r0, 80090c4 <_vfiprintf_r+0x110>
 800908c:	06d1      	lsls	r1, r2, #27
 800908e:	bf44      	itt	mi
 8009090:	2320      	movmi	r3, #32
 8009092:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009096:	0713      	lsls	r3, r2, #28
 8009098:	bf44      	itt	mi
 800909a:	232b      	movmi	r3, #43	; 0x2b
 800909c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090a0:	f89a 3000 	ldrb.w	r3, [sl]
 80090a4:	2b2a      	cmp	r3, #42	; 0x2a
 80090a6:	d015      	beq.n	80090d4 <_vfiprintf_r+0x120>
 80090a8:	9a07      	ldr	r2, [sp, #28]
 80090aa:	4654      	mov	r4, sl
 80090ac:	2000      	movs	r0, #0
 80090ae:	f04f 0c0a 	mov.w	ip, #10
 80090b2:	4621      	mov	r1, r4
 80090b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090b8:	3b30      	subs	r3, #48	; 0x30
 80090ba:	2b09      	cmp	r3, #9
 80090bc:	d94d      	bls.n	800915a <_vfiprintf_r+0x1a6>
 80090be:	b1b0      	cbz	r0, 80090ee <_vfiprintf_r+0x13a>
 80090c0:	9207      	str	r2, [sp, #28]
 80090c2:	e014      	b.n	80090ee <_vfiprintf_r+0x13a>
 80090c4:	eba0 0308 	sub.w	r3, r0, r8
 80090c8:	fa09 f303 	lsl.w	r3, r9, r3
 80090cc:	4313      	orrs	r3, r2
 80090ce:	9304      	str	r3, [sp, #16]
 80090d0:	46a2      	mov	sl, r4
 80090d2:	e7d2      	b.n	800907a <_vfiprintf_r+0xc6>
 80090d4:	9b03      	ldr	r3, [sp, #12]
 80090d6:	1d19      	adds	r1, r3, #4
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	9103      	str	r1, [sp, #12]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	bfbb      	ittet	lt
 80090e0:	425b      	neglt	r3, r3
 80090e2:	f042 0202 	orrlt.w	r2, r2, #2
 80090e6:	9307      	strge	r3, [sp, #28]
 80090e8:	9307      	strlt	r3, [sp, #28]
 80090ea:	bfb8      	it	lt
 80090ec:	9204      	strlt	r2, [sp, #16]
 80090ee:	7823      	ldrb	r3, [r4, #0]
 80090f0:	2b2e      	cmp	r3, #46	; 0x2e
 80090f2:	d10c      	bne.n	800910e <_vfiprintf_r+0x15a>
 80090f4:	7863      	ldrb	r3, [r4, #1]
 80090f6:	2b2a      	cmp	r3, #42	; 0x2a
 80090f8:	d134      	bne.n	8009164 <_vfiprintf_r+0x1b0>
 80090fa:	9b03      	ldr	r3, [sp, #12]
 80090fc:	1d1a      	adds	r2, r3, #4
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	9203      	str	r2, [sp, #12]
 8009102:	2b00      	cmp	r3, #0
 8009104:	bfb8      	it	lt
 8009106:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800910a:	3402      	adds	r4, #2
 800910c:	9305      	str	r3, [sp, #20]
 800910e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80091e4 <_vfiprintf_r+0x230>
 8009112:	7821      	ldrb	r1, [r4, #0]
 8009114:	2203      	movs	r2, #3
 8009116:	4650      	mov	r0, sl
 8009118:	f7f7 f882 	bl	8000220 <memchr>
 800911c:	b138      	cbz	r0, 800912e <_vfiprintf_r+0x17a>
 800911e:	9b04      	ldr	r3, [sp, #16]
 8009120:	eba0 000a 	sub.w	r0, r0, sl
 8009124:	2240      	movs	r2, #64	; 0x40
 8009126:	4082      	lsls	r2, r0
 8009128:	4313      	orrs	r3, r2
 800912a:	3401      	adds	r4, #1
 800912c:	9304      	str	r3, [sp, #16]
 800912e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009132:	4829      	ldr	r0, [pc, #164]	; (80091d8 <_vfiprintf_r+0x224>)
 8009134:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009138:	2206      	movs	r2, #6
 800913a:	f7f7 f871 	bl	8000220 <memchr>
 800913e:	2800      	cmp	r0, #0
 8009140:	d03f      	beq.n	80091c2 <_vfiprintf_r+0x20e>
 8009142:	4b26      	ldr	r3, [pc, #152]	; (80091dc <_vfiprintf_r+0x228>)
 8009144:	bb1b      	cbnz	r3, 800918e <_vfiprintf_r+0x1da>
 8009146:	9b03      	ldr	r3, [sp, #12]
 8009148:	3307      	adds	r3, #7
 800914a:	f023 0307 	bic.w	r3, r3, #7
 800914e:	3308      	adds	r3, #8
 8009150:	9303      	str	r3, [sp, #12]
 8009152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009154:	443b      	add	r3, r7
 8009156:	9309      	str	r3, [sp, #36]	; 0x24
 8009158:	e768      	b.n	800902c <_vfiprintf_r+0x78>
 800915a:	fb0c 3202 	mla	r2, ip, r2, r3
 800915e:	460c      	mov	r4, r1
 8009160:	2001      	movs	r0, #1
 8009162:	e7a6      	b.n	80090b2 <_vfiprintf_r+0xfe>
 8009164:	2300      	movs	r3, #0
 8009166:	3401      	adds	r4, #1
 8009168:	9305      	str	r3, [sp, #20]
 800916a:	4619      	mov	r1, r3
 800916c:	f04f 0c0a 	mov.w	ip, #10
 8009170:	4620      	mov	r0, r4
 8009172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009176:	3a30      	subs	r2, #48	; 0x30
 8009178:	2a09      	cmp	r2, #9
 800917a:	d903      	bls.n	8009184 <_vfiprintf_r+0x1d0>
 800917c:	2b00      	cmp	r3, #0
 800917e:	d0c6      	beq.n	800910e <_vfiprintf_r+0x15a>
 8009180:	9105      	str	r1, [sp, #20]
 8009182:	e7c4      	b.n	800910e <_vfiprintf_r+0x15a>
 8009184:	fb0c 2101 	mla	r1, ip, r1, r2
 8009188:	4604      	mov	r4, r0
 800918a:	2301      	movs	r3, #1
 800918c:	e7f0      	b.n	8009170 <_vfiprintf_r+0x1bc>
 800918e:	ab03      	add	r3, sp, #12
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	462a      	mov	r2, r5
 8009194:	4b12      	ldr	r3, [pc, #72]	; (80091e0 <_vfiprintf_r+0x22c>)
 8009196:	a904      	add	r1, sp, #16
 8009198:	4630      	mov	r0, r6
 800919a:	f3af 8000 	nop.w
 800919e:	4607      	mov	r7, r0
 80091a0:	1c78      	adds	r0, r7, #1
 80091a2:	d1d6      	bne.n	8009152 <_vfiprintf_r+0x19e>
 80091a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091a6:	07d9      	lsls	r1, r3, #31
 80091a8:	d405      	bmi.n	80091b6 <_vfiprintf_r+0x202>
 80091aa:	89ab      	ldrh	r3, [r5, #12]
 80091ac:	059a      	lsls	r2, r3, #22
 80091ae:	d402      	bmi.n	80091b6 <_vfiprintf_r+0x202>
 80091b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091b2:	f7ff fe79 	bl	8008ea8 <__retarget_lock_release_recursive>
 80091b6:	89ab      	ldrh	r3, [r5, #12]
 80091b8:	065b      	lsls	r3, r3, #25
 80091ba:	f53f af1d 	bmi.w	8008ff8 <_vfiprintf_r+0x44>
 80091be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091c0:	e71c      	b.n	8008ffc <_vfiprintf_r+0x48>
 80091c2:	ab03      	add	r3, sp, #12
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	462a      	mov	r2, r5
 80091c8:	4b05      	ldr	r3, [pc, #20]	; (80091e0 <_vfiprintf_r+0x22c>)
 80091ca:	a904      	add	r1, sp, #16
 80091cc:	4630      	mov	r0, r6
 80091ce:	f000 f879 	bl	80092c4 <_printf_i>
 80091d2:	e7e4      	b.n	800919e <_vfiprintf_r+0x1ea>
 80091d4:	08009a72 	.word	0x08009a72
 80091d8:	08009a7c 	.word	0x08009a7c
 80091dc:	00000000 	.word	0x00000000
 80091e0:	08008f8f 	.word	0x08008f8f
 80091e4:	08009a78 	.word	0x08009a78

080091e8 <_printf_common>:
 80091e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091ec:	4616      	mov	r6, r2
 80091ee:	4699      	mov	r9, r3
 80091f0:	688a      	ldr	r2, [r1, #8]
 80091f2:	690b      	ldr	r3, [r1, #16]
 80091f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80091f8:	4293      	cmp	r3, r2
 80091fa:	bfb8      	it	lt
 80091fc:	4613      	movlt	r3, r2
 80091fe:	6033      	str	r3, [r6, #0]
 8009200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009204:	4607      	mov	r7, r0
 8009206:	460c      	mov	r4, r1
 8009208:	b10a      	cbz	r2, 800920e <_printf_common+0x26>
 800920a:	3301      	adds	r3, #1
 800920c:	6033      	str	r3, [r6, #0]
 800920e:	6823      	ldr	r3, [r4, #0]
 8009210:	0699      	lsls	r1, r3, #26
 8009212:	bf42      	ittt	mi
 8009214:	6833      	ldrmi	r3, [r6, #0]
 8009216:	3302      	addmi	r3, #2
 8009218:	6033      	strmi	r3, [r6, #0]
 800921a:	6825      	ldr	r5, [r4, #0]
 800921c:	f015 0506 	ands.w	r5, r5, #6
 8009220:	d106      	bne.n	8009230 <_printf_common+0x48>
 8009222:	f104 0a19 	add.w	sl, r4, #25
 8009226:	68e3      	ldr	r3, [r4, #12]
 8009228:	6832      	ldr	r2, [r6, #0]
 800922a:	1a9b      	subs	r3, r3, r2
 800922c:	42ab      	cmp	r3, r5
 800922e:	dc26      	bgt.n	800927e <_printf_common+0x96>
 8009230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009234:	1e13      	subs	r3, r2, #0
 8009236:	6822      	ldr	r2, [r4, #0]
 8009238:	bf18      	it	ne
 800923a:	2301      	movne	r3, #1
 800923c:	0692      	lsls	r2, r2, #26
 800923e:	d42b      	bmi.n	8009298 <_printf_common+0xb0>
 8009240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009244:	4649      	mov	r1, r9
 8009246:	4638      	mov	r0, r7
 8009248:	47c0      	blx	r8
 800924a:	3001      	adds	r0, #1
 800924c:	d01e      	beq.n	800928c <_printf_common+0xa4>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	6922      	ldr	r2, [r4, #16]
 8009252:	f003 0306 	and.w	r3, r3, #6
 8009256:	2b04      	cmp	r3, #4
 8009258:	bf02      	ittt	eq
 800925a:	68e5      	ldreq	r5, [r4, #12]
 800925c:	6833      	ldreq	r3, [r6, #0]
 800925e:	1aed      	subeq	r5, r5, r3
 8009260:	68a3      	ldr	r3, [r4, #8]
 8009262:	bf0c      	ite	eq
 8009264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009268:	2500      	movne	r5, #0
 800926a:	4293      	cmp	r3, r2
 800926c:	bfc4      	itt	gt
 800926e:	1a9b      	subgt	r3, r3, r2
 8009270:	18ed      	addgt	r5, r5, r3
 8009272:	2600      	movs	r6, #0
 8009274:	341a      	adds	r4, #26
 8009276:	42b5      	cmp	r5, r6
 8009278:	d11a      	bne.n	80092b0 <_printf_common+0xc8>
 800927a:	2000      	movs	r0, #0
 800927c:	e008      	b.n	8009290 <_printf_common+0xa8>
 800927e:	2301      	movs	r3, #1
 8009280:	4652      	mov	r2, sl
 8009282:	4649      	mov	r1, r9
 8009284:	4638      	mov	r0, r7
 8009286:	47c0      	blx	r8
 8009288:	3001      	adds	r0, #1
 800928a:	d103      	bne.n	8009294 <_printf_common+0xac>
 800928c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009294:	3501      	adds	r5, #1
 8009296:	e7c6      	b.n	8009226 <_printf_common+0x3e>
 8009298:	18e1      	adds	r1, r4, r3
 800929a:	1c5a      	adds	r2, r3, #1
 800929c:	2030      	movs	r0, #48	; 0x30
 800929e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092a2:	4422      	add	r2, r4
 80092a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092ac:	3302      	adds	r3, #2
 80092ae:	e7c7      	b.n	8009240 <_printf_common+0x58>
 80092b0:	2301      	movs	r3, #1
 80092b2:	4622      	mov	r2, r4
 80092b4:	4649      	mov	r1, r9
 80092b6:	4638      	mov	r0, r7
 80092b8:	47c0      	blx	r8
 80092ba:	3001      	adds	r0, #1
 80092bc:	d0e6      	beq.n	800928c <_printf_common+0xa4>
 80092be:	3601      	adds	r6, #1
 80092c0:	e7d9      	b.n	8009276 <_printf_common+0x8e>
	...

080092c4 <_printf_i>:
 80092c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092c8:	7e0f      	ldrb	r7, [r1, #24]
 80092ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80092cc:	2f78      	cmp	r7, #120	; 0x78
 80092ce:	4691      	mov	r9, r2
 80092d0:	4680      	mov	r8, r0
 80092d2:	460c      	mov	r4, r1
 80092d4:	469a      	mov	sl, r3
 80092d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80092da:	d807      	bhi.n	80092ec <_printf_i+0x28>
 80092dc:	2f62      	cmp	r7, #98	; 0x62
 80092de:	d80a      	bhi.n	80092f6 <_printf_i+0x32>
 80092e0:	2f00      	cmp	r7, #0
 80092e2:	f000 80d4 	beq.w	800948e <_printf_i+0x1ca>
 80092e6:	2f58      	cmp	r7, #88	; 0x58
 80092e8:	f000 80c0 	beq.w	800946c <_printf_i+0x1a8>
 80092ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80092f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80092f4:	e03a      	b.n	800936c <_printf_i+0xa8>
 80092f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80092fa:	2b15      	cmp	r3, #21
 80092fc:	d8f6      	bhi.n	80092ec <_printf_i+0x28>
 80092fe:	a101      	add	r1, pc, #4	; (adr r1, 8009304 <_printf_i+0x40>)
 8009300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009304:	0800935d 	.word	0x0800935d
 8009308:	08009371 	.word	0x08009371
 800930c:	080092ed 	.word	0x080092ed
 8009310:	080092ed 	.word	0x080092ed
 8009314:	080092ed 	.word	0x080092ed
 8009318:	080092ed 	.word	0x080092ed
 800931c:	08009371 	.word	0x08009371
 8009320:	080092ed 	.word	0x080092ed
 8009324:	080092ed 	.word	0x080092ed
 8009328:	080092ed 	.word	0x080092ed
 800932c:	080092ed 	.word	0x080092ed
 8009330:	08009475 	.word	0x08009475
 8009334:	0800939d 	.word	0x0800939d
 8009338:	0800942f 	.word	0x0800942f
 800933c:	080092ed 	.word	0x080092ed
 8009340:	080092ed 	.word	0x080092ed
 8009344:	08009497 	.word	0x08009497
 8009348:	080092ed 	.word	0x080092ed
 800934c:	0800939d 	.word	0x0800939d
 8009350:	080092ed 	.word	0x080092ed
 8009354:	080092ed 	.word	0x080092ed
 8009358:	08009437 	.word	0x08009437
 800935c:	682b      	ldr	r3, [r5, #0]
 800935e:	1d1a      	adds	r2, r3, #4
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	602a      	str	r2, [r5, #0]
 8009364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800936c:	2301      	movs	r3, #1
 800936e:	e09f      	b.n	80094b0 <_printf_i+0x1ec>
 8009370:	6820      	ldr	r0, [r4, #0]
 8009372:	682b      	ldr	r3, [r5, #0]
 8009374:	0607      	lsls	r7, r0, #24
 8009376:	f103 0104 	add.w	r1, r3, #4
 800937a:	6029      	str	r1, [r5, #0]
 800937c:	d501      	bpl.n	8009382 <_printf_i+0xbe>
 800937e:	681e      	ldr	r6, [r3, #0]
 8009380:	e003      	b.n	800938a <_printf_i+0xc6>
 8009382:	0646      	lsls	r6, r0, #25
 8009384:	d5fb      	bpl.n	800937e <_printf_i+0xba>
 8009386:	f9b3 6000 	ldrsh.w	r6, [r3]
 800938a:	2e00      	cmp	r6, #0
 800938c:	da03      	bge.n	8009396 <_printf_i+0xd2>
 800938e:	232d      	movs	r3, #45	; 0x2d
 8009390:	4276      	negs	r6, r6
 8009392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009396:	485a      	ldr	r0, [pc, #360]	; (8009500 <_printf_i+0x23c>)
 8009398:	230a      	movs	r3, #10
 800939a:	e012      	b.n	80093c2 <_printf_i+0xfe>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	6820      	ldr	r0, [r4, #0]
 80093a0:	1d19      	adds	r1, r3, #4
 80093a2:	6029      	str	r1, [r5, #0]
 80093a4:	0605      	lsls	r5, r0, #24
 80093a6:	d501      	bpl.n	80093ac <_printf_i+0xe8>
 80093a8:	681e      	ldr	r6, [r3, #0]
 80093aa:	e002      	b.n	80093b2 <_printf_i+0xee>
 80093ac:	0641      	lsls	r1, r0, #25
 80093ae:	d5fb      	bpl.n	80093a8 <_printf_i+0xe4>
 80093b0:	881e      	ldrh	r6, [r3, #0]
 80093b2:	4853      	ldr	r0, [pc, #332]	; (8009500 <_printf_i+0x23c>)
 80093b4:	2f6f      	cmp	r7, #111	; 0x6f
 80093b6:	bf0c      	ite	eq
 80093b8:	2308      	moveq	r3, #8
 80093ba:	230a      	movne	r3, #10
 80093bc:	2100      	movs	r1, #0
 80093be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093c2:	6865      	ldr	r5, [r4, #4]
 80093c4:	60a5      	str	r5, [r4, #8]
 80093c6:	2d00      	cmp	r5, #0
 80093c8:	bfa2      	ittt	ge
 80093ca:	6821      	ldrge	r1, [r4, #0]
 80093cc:	f021 0104 	bicge.w	r1, r1, #4
 80093d0:	6021      	strge	r1, [r4, #0]
 80093d2:	b90e      	cbnz	r6, 80093d8 <_printf_i+0x114>
 80093d4:	2d00      	cmp	r5, #0
 80093d6:	d04b      	beq.n	8009470 <_printf_i+0x1ac>
 80093d8:	4615      	mov	r5, r2
 80093da:	fbb6 f1f3 	udiv	r1, r6, r3
 80093de:	fb03 6711 	mls	r7, r3, r1, r6
 80093e2:	5dc7      	ldrb	r7, [r0, r7]
 80093e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80093e8:	4637      	mov	r7, r6
 80093ea:	42bb      	cmp	r3, r7
 80093ec:	460e      	mov	r6, r1
 80093ee:	d9f4      	bls.n	80093da <_printf_i+0x116>
 80093f0:	2b08      	cmp	r3, #8
 80093f2:	d10b      	bne.n	800940c <_printf_i+0x148>
 80093f4:	6823      	ldr	r3, [r4, #0]
 80093f6:	07de      	lsls	r6, r3, #31
 80093f8:	d508      	bpl.n	800940c <_printf_i+0x148>
 80093fa:	6923      	ldr	r3, [r4, #16]
 80093fc:	6861      	ldr	r1, [r4, #4]
 80093fe:	4299      	cmp	r1, r3
 8009400:	bfde      	ittt	le
 8009402:	2330      	movle	r3, #48	; 0x30
 8009404:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009408:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800940c:	1b52      	subs	r2, r2, r5
 800940e:	6122      	str	r2, [r4, #16]
 8009410:	f8cd a000 	str.w	sl, [sp]
 8009414:	464b      	mov	r3, r9
 8009416:	aa03      	add	r2, sp, #12
 8009418:	4621      	mov	r1, r4
 800941a:	4640      	mov	r0, r8
 800941c:	f7ff fee4 	bl	80091e8 <_printf_common>
 8009420:	3001      	adds	r0, #1
 8009422:	d14a      	bne.n	80094ba <_printf_i+0x1f6>
 8009424:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009428:	b004      	add	sp, #16
 800942a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800942e:	6823      	ldr	r3, [r4, #0]
 8009430:	f043 0320 	orr.w	r3, r3, #32
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	4833      	ldr	r0, [pc, #204]	; (8009504 <_printf_i+0x240>)
 8009438:	2778      	movs	r7, #120	; 0x78
 800943a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800943e:	6823      	ldr	r3, [r4, #0]
 8009440:	6829      	ldr	r1, [r5, #0]
 8009442:	061f      	lsls	r7, r3, #24
 8009444:	f851 6b04 	ldr.w	r6, [r1], #4
 8009448:	d402      	bmi.n	8009450 <_printf_i+0x18c>
 800944a:	065f      	lsls	r7, r3, #25
 800944c:	bf48      	it	mi
 800944e:	b2b6      	uxthmi	r6, r6
 8009450:	07df      	lsls	r7, r3, #31
 8009452:	bf48      	it	mi
 8009454:	f043 0320 	orrmi.w	r3, r3, #32
 8009458:	6029      	str	r1, [r5, #0]
 800945a:	bf48      	it	mi
 800945c:	6023      	strmi	r3, [r4, #0]
 800945e:	b91e      	cbnz	r6, 8009468 <_printf_i+0x1a4>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	f023 0320 	bic.w	r3, r3, #32
 8009466:	6023      	str	r3, [r4, #0]
 8009468:	2310      	movs	r3, #16
 800946a:	e7a7      	b.n	80093bc <_printf_i+0xf8>
 800946c:	4824      	ldr	r0, [pc, #144]	; (8009500 <_printf_i+0x23c>)
 800946e:	e7e4      	b.n	800943a <_printf_i+0x176>
 8009470:	4615      	mov	r5, r2
 8009472:	e7bd      	b.n	80093f0 <_printf_i+0x12c>
 8009474:	682b      	ldr	r3, [r5, #0]
 8009476:	6826      	ldr	r6, [r4, #0]
 8009478:	6961      	ldr	r1, [r4, #20]
 800947a:	1d18      	adds	r0, r3, #4
 800947c:	6028      	str	r0, [r5, #0]
 800947e:	0635      	lsls	r5, r6, #24
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	d501      	bpl.n	8009488 <_printf_i+0x1c4>
 8009484:	6019      	str	r1, [r3, #0]
 8009486:	e002      	b.n	800948e <_printf_i+0x1ca>
 8009488:	0670      	lsls	r0, r6, #25
 800948a:	d5fb      	bpl.n	8009484 <_printf_i+0x1c0>
 800948c:	8019      	strh	r1, [r3, #0]
 800948e:	2300      	movs	r3, #0
 8009490:	6123      	str	r3, [r4, #16]
 8009492:	4615      	mov	r5, r2
 8009494:	e7bc      	b.n	8009410 <_printf_i+0x14c>
 8009496:	682b      	ldr	r3, [r5, #0]
 8009498:	1d1a      	adds	r2, r3, #4
 800949a:	602a      	str	r2, [r5, #0]
 800949c:	681d      	ldr	r5, [r3, #0]
 800949e:	6862      	ldr	r2, [r4, #4]
 80094a0:	2100      	movs	r1, #0
 80094a2:	4628      	mov	r0, r5
 80094a4:	f7f6 febc 	bl	8000220 <memchr>
 80094a8:	b108      	cbz	r0, 80094ae <_printf_i+0x1ea>
 80094aa:	1b40      	subs	r0, r0, r5
 80094ac:	6060      	str	r0, [r4, #4]
 80094ae:	6863      	ldr	r3, [r4, #4]
 80094b0:	6123      	str	r3, [r4, #16]
 80094b2:	2300      	movs	r3, #0
 80094b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094b8:	e7aa      	b.n	8009410 <_printf_i+0x14c>
 80094ba:	6923      	ldr	r3, [r4, #16]
 80094bc:	462a      	mov	r2, r5
 80094be:	4649      	mov	r1, r9
 80094c0:	4640      	mov	r0, r8
 80094c2:	47d0      	blx	sl
 80094c4:	3001      	adds	r0, #1
 80094c6:	d0ad      	beq.n	8009424 <_printf_i+0x160>
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	079b      	lsls	r3, r3, #30
 80094cc:	d413      	bmi.n	80094f6 <_printf_i+0x232>
 80094ce:	68e0      	ldr	r0, [r4, #12]
 80094d0:	9b03      	ldr	r3, [sp, #12]
 80094d2:	4298      	cmp	r0, r3
 80094d4:	bfb8      	it	lt
 80094d6:	4618      	movlt	r0, r3
 80094d8:	e7a6      	b.n	8009428 <_printf_i+0x164>
 80094da:	2301      	movs	r3, #1
 80094dc:	4632      	mov	r2, r6
 80094de:	4649      	mov	r1, r9
 80094e0:	4640      	mov	r0, r8
 80094e2:	47d0      	blx	sl
 80094e4:	3001      	adds	r0, #1
 80094e6:	d09d      	beq.n	8009424 <_printf_i+0x160>
 80094e8:	3501      	adds	r5, #1
 80094ea:	68e3      	ldr	r3, [r4, #12]
 80094ec:	9903      	ldr	r1, [sp, #12]
 80094ee:	1a5b      	subs	r3, r3, r1
 80094f0:	42ab      	cmp	r3, r5
 80094f2:	dcf2      	bgt.n	80094da <_printf_i+0x216>
 80094f4:	e7eb      	b.n	80094ce <_printf_i+0x20a>
 80094f6:	2500      	movs	r5, #0
 80094f8:	f104 0619 	add.w	r6, r4, #25
 80094fc:	e7f5      	b.n	80094ea <_printf_i+0x226>
 80094fe:	bf00      	nop
 8009500:	08009a83 	.word	0x08009a83
 8009504:	08009a94 	.word	0x08009a94

08009508 <__sflush_r>:
 8009508:	898a      	ldrh	r2, [r1, #12]
 800950a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800950e:	4605      	mov	r5, r0
 8009510:	0710      	lsls	r0, r2, #28
 8009512:	460c      	mov	r4, r1
 8009514:	d458      	bmi.n	80095c8 <__sflush_r+0xc0>
 8009516:	684b      	ldr	r3, [r1, #4]
 8009518:	2b00      	cmp	r3, #0
 800951a:	dc05      	bgt.n	8009528 <__sflush_r+0x20>
 800951c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800951e:	2b00      	cmp	r3, #0
 8009520:	dc02      	bgt.n	8009528 <__sflush_r+0x20>
 8009522:	2000      	movs	r0, #0
 8009524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009528:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800952a:	2e00      	cmp	r6, #0
 800952c:	d0f9      	beq.n	8009522 <__sflush_r+0x1a>
 800952e:	2300      	movs	r3, #0
 8009530:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009534:	682f      	ldr	r7, [r5, #0]
 8009536:	6a21      	ldr	r1, [r4, #32]
 8009538:	602b      	str	r3, [r5, #0]
 800953a:	d032      	beq.n	80095a2 <__sflush_r+0x9a>
 800953c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800953e:	89a3      	ldrh	r3, [r4, #12]
 8009540:	075a      	lsls	r2, r3, #29
 8009542:	d505      	bpl.n	8009550 <__sflush_r+0x48>
 8009544:	6863      	ldr	r3, [r4, #4]
 8009546:	1ac0      	subs	r0, r0, r3
 8009548:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800954a:	b10b      	cbz	r3, 8009550 <__sflush_r+0x48>
 800954c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800954e:	1ac0      	subs	r0, r0, r3
 8009550:	2300      	movs	r3, #0
 8009552:	4602      	mov	r2, r0
 8009554:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009556:	6a21      	ldr	r1, [r4, #32]
 8009558:	4628      	mov	r0, r5
 800955a:	47b0      	blx	r6
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	d106      	bne.n	8009570 <__sflush_r+0x68>
 8009562:	6829      	ldr	r1, [r5, #0]
 8009564:	291d      	cmp	r1, #29
 8009566:	d82b      	bhi.n	80095c0 <__sflush_r+0xb8>
 8009568:	4a29      	ldr	r2, [pc, #164]	; (8009610 <__sflush_r+0x108>)
 800956a:	410a      	asrs	r2, r1
 800956c:	07d6      	lsls	r6, r2, #31
 800956e:	d427      	bmi.n	80095c0 <__sflush_r+0xb8>
 8009570:	2200      	movs	r2, #0
 8009572:	6062      	str	r2, [r4, #4]
 8009574:	04d9      	lsls	r1, r3, #19
 8009576:	6922      	ldr	r2, [r4, #16]
 8009578:	6022      	str	r2, [r4, #0]
 800957a:	d504      	bpl.n	8009586 <__sflush_r+0x7e>
 800957c:	1c42      	adds	r2, r0, #1
 800957e:	d101      	bne.n	8009584 <__sflush_r+0x7c>
 8009580:	682b      	ldr	r3, [r5, #0]
 8009582:	b903      	cbnz	r3, 8009586 <__sflush_r+0x7e>
 8009584:	6560      	str	r0, [r4, #84]	; 0x54
 8009586:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009588:	602f      	str	r7, [r5, #0]
 800958a:	2900      	cmp	r1, #0
 800958c:	d0c9      	beq.n	8009522 <__sflush_r+0x1a>
 800958e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009592:	4299      	cmp	r1, r3
 8009594:	d002      	beq.n	800959c <__sflush_r+0x94>
 8009596:	4628      	mov	r0, r5
 8009598:	f7ff fc96 	bl	8008ec8 <_free_r>
 800959c:	2000      	movs	r0, #0
 800959e:	6360      	str	r0, [r4, #52]	; 0x34
 80095a0:	e7c0      	b.n	8009524 <__sflush_r+0x1c>
 80095a2:	2301      	movs	r3, #1
 80095a4:	4628      	mov	r0, r5
 80095a6:	47b0      	blx	r6
 80095a8:	1c41      	adds	r1, r0, #1
 80095aa:	d1c8      	bne.n	800953e <__sflush_r+0x36>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d0c5      	beq.n	800953e <__sflush_r+0x36>
 80095b2:	2b1d      	cmp	r3, #29
 80095b4:	d001      	beq.n	80095ba <__sflush_r+0xb2>
 80095b6:	2b16      	cmp	r3, #22
 80095b8:	d101      	bne.n	80095be <__sflush_r+0xb6>
 80095ba:	602f      	str	r7, [r5, #0]
 80095bc:	e7b1      	b.n	8009522 <__sflush_r+0x1a>
 80095be:	89a3      	ldrh	r3, [r4, #12]
 80095c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095c4:	81a3      	strh	r3, [r4, #12]
 80095c6:	e7ad      	b.n	8009524 <__sflush_r+0x1c>
 80095c8:	690f      	ldr	r7, [r1, #16]
 80095ca:	2f00      	cmp	r7, #0
 80095cc:	d0a9      	beq.n	8009522 <__sflush_r+0x1a>
 80095ce:	0793      	lsls	r3, r2, #30
 80095d0:	680e      	ldr	r6, [r1, #0]
 80095d2:	bf08      	it	eq
 80095d4:	694b      	ldreq	r3, [r1, #20]
 80095d6:	600f      	str	r7, [r1, #0]
 80095d8:	bf18      	it	ne
 80095da:	2300      	movne	r3, #0
 80095dc:	eba6 0807 	sub.w	r8, r6, r7
 80095e0:	608b      	str	r3, [r1, #8]
 80095e2:	f1b8 0f00 	cmp.w	r8, #0
 80095e6:	dd9c      	ble.n	8009522 <__sflush_r+0x1a>
 80095e8:	6a21      	ldr	r1, [r4, #32]
 80095ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80095ec:	4643      	mov	r3, r8
 80095ee:	463a      	mov	r2, r7
 80095f0:	4628      	mov	r0, r5
 80095f2:	47b0      	blx	r6
 80095f4:	2800      	cmp	r0, #0
 80095f6:	dc06      	bgt.n	8009606 <__sflush_r+0xfe>
 80095f8:	89a3      	ldrh	r3, [r4, #12]
 80095fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80095fe:	81a3      	strh	r3, [r4, #12]
 8009600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009604:	e78e      	b.n	8009524 <__sflush_r+0x1c>
 8009606:	4407      	add	r7, r0
 8009608:	eba8 0800 	sub.w	r8, r8, r0
 800960c:	e7e9      	b.n	80095e2 <__sflush_r+0xda>
 800960e:	bf00      	nop
 8009610:	dfbffffe 	.word	0xdfbffffe

08009614 <_fflush_r>:
 8009614:	b538      	push	{r3, r4, r5, lr}
 8009616:	690b      	ldr	r3, [r1, #16]
 8009618:	4605      	mov	r5, r0
 800961a:	460c      	mov	r4, r1
 800961c:	b913      	cbnz	r3, 8009624 <_fflush_r+0x10>
 800961e:	2500      	movs	r5, #0
 8009620:	4628      	mov	r0, r5
 8009622:	bd38      	pop	{r3, r4, r5, pc}
 8009624:	b118      	cbz	r0, 800962e <_fflush_r+0x1a>
 8009626:	6a03      	ldr	r3, [r0, #32]
 8009628:	b90b      	cbnz	r3, 800962e <_fflush_r+0x1a>
 800962a:	f7ff f9f3 	bl	8008a14 <__sinit>
 800962e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d0f3      	beq.n	800961e <_fflush_r+0xa>
 8009636:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009638:	07d0      	lsls	r0, r2, #31
 800963a:	d404      	bmi.n	8009646 <_fflush_r+0x32>
 800963c:	0599      	lsls	r1, r3, #22
 800963e:	d402      	bmi.n	8009646 <_fflush_r+0x32>
 8009640:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009642:	f7ff fc30 	bl	8008ea6 <__retarget_lock_acquire_recursive>
 8009646:	4628      	mov	r0, r5
 8009648:	4621      	mov	r1, r4
 800964a:	f7ff ff5d 	bl	8009508 <__sflush_r>
 800964e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009650:	07da      	lsls	r2, r3, #31
 8009652:	4605      	mov	r5, r0
 8009654:	d4e4      	bmi.n	8009620 <_fflush_r+0xc>
 8009656:	89a3      	ldrh	r3, [r4, #12]
 8009658:	059b      	lsls	r3, r3, #22
 800965a:	d4e1      	bmi.n	8009620 <_fflush_r+0xc>
 800965c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800965e:	f7ff fc23 	bl	8008ea8 <__retarget_lock_release_recursive>
 8009662:	e7dd      	b.n	8009620 <_fflush_r+0xc>

08009664 <__swhatbuf_r>:
 8009664:	b570      	push	{r4, r5, r6, lr}
 8009666:	460c      	mov	r4, r1
 8009668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800966c:	2900      	cmp	r1, #0
 800966e:	b096      	sub	sp, #88	; 0x58
 8009670:	4615      	mov	r5, r2
 8009672:	461e      	mov	r6, r3
 8009674:	da0d      	bge.n	8009692 <__swhatbuf_r+0x2e>
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	f013 0f80 	tst.w	r3, #128	; 0x80
 800967c:	f04f 0100 	mov.w	r1, #0
 8009680:	bf0c      	ite	eq
 8009682:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009686:	2340      	movne	r3, #64	; 0x40
 8009688:	2000      	movs	r0, #0
 800968a:	6031      	str	r1, [r6, #0]
 800968c:	602b      	str	r3, [r5, #0]
 800968e:	b016      	add	sp, #88	; 0x58
 8009690:	bd70      	pop	{r4, r5, r6, pc}
 8009692:	466a      	mov	r2, sp
 8009694:	f000 f848 	bl	8009728 <_fstat_r>
 8009698:	2800      	cmp	r0, #0
 800969a:	dbec      	blt.n	8009676 <__swhatbuf_r+0x12>
 800969c:	9901      	ldr	r1, [sp, #4]
 800969e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80096a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80096a6:	4259      	negs	r1, r3
 80096a8:	4159      	adcs	r1, r3
 80096aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096ae:	e7eb      	b.n	8009688 <__swhatbuf_r+0x24>

080096b0 <__smakebuf_r>:
 80096b0:	898b      	ldrh	r3, [r1, #12]
 80096b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80096b4:	079d      	lsls	r5, r3, #30
 80096b6:	4606      	mov	r6, r0
 80096b8:	460c      	mov	r4, r1
 80096ba:	d507      	bpl.n	80096cc <__smakebuf_r+0x1c>
 80096bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	6123      	str	r3, [r4, #16]
 80096c4:	2301      	movs	r3, #1
 80096c6:	6163      	str	r3, [r4, #20]
 80096c8:	b002      	add	sp, #8
 80096ca:	bd70      	pop	{r4, r5, r6, pc}
 80096cc:	ab01      	add	r3, sp, #4
 80096ce:	466a      	mov	r2, sp
 80096d0:	f7ff ffc8 	bl	8009664 <__swhatbuf_r>
 80096d4:	9900      	ldr	r1, [sp, #0]
 80096d6:	4605      	mov	r5, r0
 80096d8:	4630      	mov	r0, r6
 80096da:	f7ff f883 	bl	80087e4 <_malloc_r>
 80096de:	b948      	cbnz	r0, 80096f4 <__smakebuf_r+0x44>
 80096e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096e4:	059a      	lsls	r2, r3, #22
 80096e6:	d4ef      	bmi.n	80096c8 <__smakebuf_r+0x18>
 80096e8:	f023 0303 	bic.w	r3, r3, #3
 80096ec:	f043 0302 	orr.w	r3, r3, #2
 80096f0:	81a3      	strh	r3, [r4, #12]
 80096f2:	e7e3      	b.n	80096bc <__smakebuf_r+0xc>
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	6020      	str	r0, [r4, #0]
 80096f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80096fc:	81a3      	strh	r3, [r4, #12]
 80096fe:	9b00      	ldr	r3, [sp, #0]
 8009700:	6163      	str	r3, [r4, #20]
 8009702:	9b01      	ldr	r3, [sp, #4]
 8009704:	6120      	str	r0, [r4, #16]
 8009706:	b15b      	cbz	r3, 8009720 <__smakebuf_r+0x70>
 8009708:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800970c:	4630      	mov	r0, r6
 800970e:	f000 f81d 	bl	800974c <_isatty_r>
 8009712:	b128      	cbz	r0, 8009720 <__smakebuf_r+0x70>
 8009714:	89a3      	ldrh	r3, [r4, #12]
 8009716:	f023 0303 	bic.w	r3, r3, #3
 800971a:	f043 0301 	orr.w	r3, r3, #1
 800971e:	81a3      	strh	r3, [r4, #12]
 8009720:	89a3      	ldrh	r3, [r4, #12]
 8009722:	431d      	orrs	r5, r3
 8009724:	81a5      	strh	r5, [r4, #12]
 8009726:	e7cf      	b.n	80096c8 <__smakebuf_r+0x18>

08009728 <_fstat_r>:
 8009728:	b538      	push	{r3, r4, r5, lr}
 800972a:	4d07      	ldr	r5, [pc, #28]	; (8009748 <_fstat_r+0x20>)
 800972c:	2300      	movs	r3, #0
 800972e:	4604      	mov	r4, r0
 8009730:	4608      	mov	r0, r1
 8009732:	4611      	mov	r1, r2
 8009734:	602b      	str	r3, [r5, #0]
 8009736:	f7fb fa92 	bl	8004c5e <_fstat>
 800973a:	1c43      	adds	r3, r0, #1
 800973c:	d102      	bne.n	8009744 <_fstat_r+0x1c>
 800973e:	682b      	ldr	r3, [r5, #0]
 8009740:	b103      	cbz	r3, 8009744 <_fstat_r+0x1c>
 8009742:	6023      	str	r3, [r4, #0]
 8009744:	bd38      	pop	{r3, r4, r5, pc}
 8009746:	bf00      	nop
 8009748:	20000800 	.word	0x20000800

0800974c <_isatty_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4d06      	ldr	r5, [pc, #24]	; (8009768 <_isatty_r+0x1c>)
 8009750:	2300      	movs	r3, #0
 8009752:	4604      	mov	r4, r0
 8009754:	4608      	mov	r0, r1
 8009756:	602b      	str	r3, [r5, #0]
 8009758:	f7fb fa91 	bl	8004c7e <_isatty>
 800975c:	1c43      	adds	r3, r0, #1
 800975e:	d102      	bne.n	8009766 <_isatty_r+0x1a>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	b103      	cbz	r3, 8009766 <_isatty_r+0x1a>
 8009764:	6023      	str	r3, [r4, #0]
 8009766:	bd38      	pop	{r3, r4, r5, pc}
 8009768:	20000800 	.word	0x20000800

0800976c <_init>:
 800976c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800976e:	bf00      	nop
 8009770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009772:	bc08      	pop	{r3}
 8009774:	469e      	mov	lr, r3
 8009776:	4770      	bx	lr

08009778 <_fini>:
 8009778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800977a:	bf00      	nop
 800977c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800977e:	bc08      	pop	{r3}
 8009780:	469e      	mov	lr, r3
 8009782:	4770      	bx	lr

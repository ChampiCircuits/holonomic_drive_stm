
holonomic_drive2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b564  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  0800b744  0800b744  0001b744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bbb4  0800bbb4  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800bbb4  0800bbb4  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bbb4  0800bbb4  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bbb4  0800bbb4  0001bbb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800bbbc  0800bbbc  0001bbbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800bbc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af0  20000068  0800bc2c  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000b58  0800bc2c  00020b58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021ec7  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000462e  00000000  00000000  00041fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001518  00000000  00000000  000465d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000104b  00000000  00000000  00047ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ac6  00000000  00000000  00048b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016ecc  00000000  00000000  0006d5f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc7b3  00000000  00000000  000844c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007874  00000000  00000000  00160c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001684ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b72c 	.word	0x0800b72c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800b72c 	.word	0x0800b72c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>:

#include <string.h>
#include <ChampiCan.h>


ChampiCan::ChampiCan(FDCAN_HandleTypeDef *handle_fdcan) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef+0x60>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3308      	adds	r3, #8
 8000cb6:	2224      	movs	r2, #36	; 0x24
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f00a f806 	bl	800accc <memset>

	handle_fdcan_ = handle_fdcan;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	605a      	str	r2, [r3, #4]

	tx_header_.IdType = FDCAN_STANDARD_ID;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
	tx_header_.TxFrameType = FDCAN_DATA_FRAME;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
	tx_header_.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
	tx_header_.BitRateSwitch = FDCAN_BRS_OFF;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
	tx_header_.FDFormat = FDCAN_CLASSIC_CAN;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
	tx_header_.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
	tx_header_.MessageMarker = 0;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28

}
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	0800ba78 	.word	0x0800ba78

08000d00 <_ZN9ChampiCanC1Ev>:

ChampiCan::ChampiCan() = default;
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <_ZN9ChampiCanC1Ev+0x2c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3308      	adds	r3, #8
 8000d18:	2224      	movs	r2, #36	; 0x24
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f009 ffd5 	bl	800accc <memset>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	0800ba78 	.word	0x0800ba78

08000d30 <_ZN9ChampiCan5startEv>:

int ChampiCan::start() {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(handle_fdcan_) != HAL_OK)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f006 f9df 	bl	8007100 <HAL_FDCAN_Start>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bf14      	ite	ne
 8000d48:	2301      	movne	r3, #1
 8000d4a:	2300      	moveq	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <_ZN9ChampiCan5startEv+0x26>
	{
		return 1;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e011      	b.n	8000d7a <_ZN9ChampiCan5startEv+0x4a>
	}
	if (HAL_FDCAN_ActivateNotification(handle_fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f006 fb54 	bl	800740c <HAL_FDCAN_ActivateNotification>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	bf14      	ite	ne
 8000d6a:	2301      	movne	r3, #1
 8000d6c:	2300      	moveq	r3, #0
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <_ZN9ChampiCan5startEv+0x48>
	{
		return 1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <_ZN9ChampiCan5startEv+0x4a>
	}
	return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <_ZN9ChampiCan10send_frameEmPhm>:
    {
        ret = 1;
    }
    return ret;
}
int ChampiCan::send_frame(uint32_t id, uint8_t *frame_data, uint32_t size) {
 8000d82:	b590      	push	{r4, r7, lr}
 8000d84:	b087      	sub	sp, #28
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	603b      	str	r3, [r7, #0]
	tx_header_.Identifier = id;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	609a      	str	r2, [r3, #8]
	tx_header_.DataLength = size;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	615a      	str	r2, [r3, #20]

    // D'abord, on attend que la FIFO ne soit plus pleine. J'ai eu des problèmes en essayant d'envoyer 5 frames d'un coup.
    // En regardant la doc, j'ai vu que la fifo est de 4 en effet. TODO à approfondir.
    // Je mets un timeout de 50ms. C'est petit exprès pour voir si on a encore des problèmes après.
    uint32_t ret = HAL_FDCAN_GetTxFifoFreeLevel(handle_fdcan_);
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	4618      	mov	r0, r3
 8000da2:	f006 fb21 	bl	80073e8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000da6:	6178      	str	r0, [r7, #20]
    uint32_t start_waiting = HAL_GetTick();
 8000da8:	f005 ff12 	bl	8006bd0 <HAL_GetTick>
 8000dac:	6138      	str	r0, [r7, #16]
    while (start_waiting + 50 > HAL_GetTick() && ret == 0) {
 8000dae:	e005      	b.n	8000dbc <_ZN9ChampiCan10send_frameEmPhm+0x3a>
        ret = HAL_FDCAN_GetTxFifoFreeLevel(handle_fdcan_);
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f006 fb17 	bl	80073e8 <HAL_FDCAN_GetTxFifoFreeLevel>
 8000dba:	6178      	str	r0, [r7, #20]
    while (start_waiting + 50 > HAL_GetTick() && ret == 0) {
 8000dbc:	693b      	ldr	r3, [r7, #16]
 8000dbe:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8000dc2:	f005 ff05 	bl	8006bd0 <HAL_GetTick>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d904      	bls.n	8000dd6 <_ZN9ChampiCan10send_frameEmPhm+0x54>
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d101      	bne.n	8000dd6 <_ZN9ChampiCan10send_frameEmPhm+0x54>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <_ZN9ChampiCan10send_frameEmPhm+0x56>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d1e9      	bne.n	8000db0 <_ZN9ChampiCan10send_frameEmPhm+0x2e>
    }

    return HAL_FDCAN_AddMessageToTxFifoQ(handle_fdcan_, &tx_header_, frame_data);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	6858      	ldr	r0, [r3, #4]
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	3308      	adds	r3, #8
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	4619      	mov	r1, r3
 8000de8:	f006 f9b2 	bl	8007150 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	371c      	adds	r7, #28
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd90      	pop	{r4, r7, pc}
	...

08000df8 <_ZN9ChampiCan8send_msgEmPhm>:

int ChampiCan::send_msg(uint32_t id, uint8_t *msg, uint32_t msg_size) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
 8000e04:	603b      	str	r3, [r7, #0]

	static uint16_t msg_number = 0;

	if (msg_size > 512) {
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e0c:	d901      	bls.n	8000e12 <_ZN9ChampiCan8send_msgEmPhm+0x1a>
		return 1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e084      	b.n	8000f1c <_ZN9ChampiCan8send_msgEmPhm+0x124>
	}

	uint8_t frame_data[8] = {0};
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	2300      	movs	r3, #0
 8000e18:	61bb      	str	r3, [r7, #24]
	uint16_t nb_frames = (uint16_t) msg_size / 6 + (msg_size % 6 > 0 ? 1 : 0);
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	4a41      	ldr	r2, [pc, #260]	; (8000f24 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000e20:	fba2 2303 	umull	r2, r3, r2, r3
 8000e24:	089b      	lsrs	r3, r3, #2
 8000e26:	b298      	uxth	r0, r3
 8000e28:	6839      	ldr	r1, [r7, #0]
 8000e2a:	4b3e      	ldr	r3, [pc, #248]	; (8000f24 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000e2c:	fba3 2301 	umull	r2, r3, r3, r1
 8000e30:	089a      	lsrs	r2, r3, #2
 8000e32:	4613      	mov	r3, r2
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	1aca      	subs	r2, r1, r3
 8000e3c:	2a00      	cmp	r2, #0
 8000e3e:	d001      	beq.n	8000e44 <_ZN9ChampiCan8send_msgEmPhm+0x4c>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e000      	b.n	8000e46 <_ZN9ChampiCan8send_msgEmPhm+0x4e>
 8000e44:	2300      	movs	r3, #0
 8000e46:	4403      	add	r3, r0
 8000e48:	83fb      	strh	r3, [r7, #30]

	for(uint16_t i=0; i<nb_frames; i++) {
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e4e:	e053      	b.n	8000ef8 <_ZN9ChampiCan8send_msgEmPhm+0x100>

		// Frame descriptor
		uint16_t frame_descriptor = msg_number << 12 | (nb_frames << 6) | i;
 8000e50:	4b35      	ldr	r3, [pc, #212]	; (8000f28 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000e52:	881b      	ldrh	r3, [r3, #0]
 8000e54:	031b      	lsls	r3, r3, #12
 8000e56:	b21a      	sxth	r2, r3
 8000e58:	8bfb      	ldrh	r3, [r7, #30]
 8000e5a:	019b      	lsls	r3, r3, #6
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b21a      	sxth	r2, r3
 8000e62:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000e66:	4313      	orrs	r3, r2
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	827b      	strh	r3, [r7, #18]
 8000e6e:	8a7b      	ldrh	r3, [r7, #18]
		memcpy(frame_data, (char*)&frame_descriptor, 2);
 8000e70:	82bb      	strh	r3, [r7, #20]

		// Data size
		int num_bytes_frame = 6;
 8000e72:	2306      	movs	r3, #6
 8000e74:	623b      	str	r3, [r7, #32]
		if(i==nb_frames-1) {
 8000e76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e78:	8bfb      	ldrh	r3, [r7, #30]
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d10a      	bne.n	8000e96 <_ZN9ChampiCan8send_msgEmPhm+0x9e>
			num_bytes_frame = msg_size % 6;
 8000e80:	6839      	ldr	r1, [r7, #0]
 8000e82:	4b28      	ldr	r3, [pc, #160]	; (8000f24 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000e84:	fba3 2301 	umull	r2, r3, r3, r1
 8000e88:	089a      	lsrs	r2, r3, #2
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	4413      	add	r3, r2
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	1aca      	subs	r2, r1, r3
 8000e94:	623a      	str	r2, [r7, #32]
		}

		// Data
		memcpy(frame_data+2, msg + i*6, num_bytes_frame);
 8000e96:	f107 0014 	add.w	r0, r7, #20
 8000e9a:	3002      	adds	r0, #2
 8000e9c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4413      	add	r3, r2
 8000eac:	6a3a      	ldr	r2, [r7, #32]
 8000eae:	4619      	mov	r1, r3
 8000eb0:	f009 ffdb 	bl	800ae6a <memcpy>

		// Send
		if(send_frame(id, frame_data, num_bytes_frame+2) != 0) {
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
 8000eb6:	3302      	adds	r3, #2
 8000eb8:	f107 0214 	add.w	r2, r7, #20
 8000ebc:	68b9      	ldr	r1, [r7, #8]
 8000ebe:	68f8      	ldr	r0, [r7, #12]
 8000ec0:	f7ff ff5f 	bl	8000d82 <_ZN9ChampiCan10send_frameEmPhm>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bf14      	ite	ne
 8000eca:	2301      	movne	r3, #1
 8000ecc:	2300      	moveq	r3, #0
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d00e      	beq.n	8000ef2 <_ZN9ChampiCan8send_msgEmPhm+0xfa>
			msg_number = (msg_number + 1) % 4;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	425a      	negs	r2, r3
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	f002 0203 	and.w	r2, r2, #3
 8000ee4:	bf58      	it	pl
 8000ee6:	4253      	negpl	r3, r2
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000eec:	801a      	strh	r2, [r3, #0]
			return 1;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e014      	b.n	8000f1c <_ZN9ChampiCan8send_msgEmPhm+0x124>
	for(uint16_t i=0; i<nb_frames; i++) {
 8000ef2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000ef8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000efa:	8bfb      	ldrh	r3, [r7, #30]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d3a7      	bcc.n	8000e50 <_ZN9ChampiCan8send_msgEmPhm+0x58>
		}
	}
    msg_number = (msg_number + 1) % 4;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	425a      	negs	r2, r3
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	f002 0203 	and.w	r2, r2, #3
 8000f10:	bf58      	it	pl
 8000f12:	4253      	negpl	r3, r2
 8000f14:	b29a      	uxth	r2, r3
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000f18:	801a      	strh	r2, [r3, #0]
    return 0;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	aaaaaaab 	.word	0xaaaaaaab
 8000f28:	20000084 	.word	0x20000084

08000f2c <_ZN9ChampiCanD1Ev>:


ChampiCan::~ChampiCan() = default;
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	4a04      	ldr	r2, [pc, #16]	; (8000f48 <_ZN9ChampiCanD1Ev+0x1c>)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	0800ba78 	.word	0x0800ba78

08000f4c <_ZN9ChampiCanD0Ev>:
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f7ff ffe9 	bl	8000f2c <_ZN9ChampiCanD1Ev>
 8000f5a:	212c      	movs	r1, #44	; 0x2c
 8000f5c:	6878      	ldr	r0, [r7, #4]
 8000f5e:	f009 fa49 	bl	800a3f4 <_ZdlPvj>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4618      	mov	r0, r3
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_ZN11ChampiStateC1Ev>:
 *      Author: arusso
 */

#include <ChampiState.h>

ChampiState::ChampiState() = default;
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	4a07      	ldr	r2, [pc, #28]	; (8000f94 <_ZN11ChampiStateC1Ev+0x28>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	601a      	str	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3324      	adds	r3, #36	; 0x24
 8000f7e:	2278      	movs	r2, #120	; 0x78
 8000f80:	2100      	movs	r1, #0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f009 fea2 	bl	800accc <memset>
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3708      	adds	r7, #8
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	0800ba88 	.word	0x0800ba88

08000f98 <_ZN11ChampiStateC1EP9ChampiCanm>:

ChampiState::ChampiState(ChampiCan *champi_can_interface, uint32_t tx_period_ms) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
 8000fa4:	4a0f      	ldr	r2, [pc, #60]	; (8000fe4 <_ZN11ChampiStateC1EP9ChampiCanm+0x4c>)
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	601a      	str	r2, [r3, #0]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	3324      	adds	r3, #36	; 0x24
 8000fae:	2278      	movs	r2, #120	; 0x78
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f009 fe8a 	bl	800accc <memset>
    status_msg_ = msgs_can_Status_init_zero;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
    champi_can_interface_ = champi_can_interface;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	619a      	str	r2, [r3, #24]
    tx_period_ms_ = tx_period_ms;
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	687a      	ldr	r2, [r7, #4]
 8000fd2:	61da      	str	r2, [r3, #28]
    last_tx_time_ms_ = 0;
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	621a      	str	r2, [r3, #32]
}
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	0800ba88 	.word	0x0800ba88

08000fe8 <_ZN11ChampiStateD1Ev>:

ChampiState::~ChampiState() {
 8000fe8:	b480      	push	{r7}
 8000fea:	b083      	sub	sp, #12
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <_ZN11ChampiStateD1Ev+0x1c>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	0800ba88 	.word	0x0800ba88

08001008 <_ZN11ChampiStateD0Ev>:
ChampiState::~ChampiState() {
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
}
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff ffe9 	bl	8000fe8 <_ZN11ChampiStateD1Ev>
 8001016:	219c      	movs	r1, #156	; 0x9c
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f009 f9eb 	bl	800a3f4 <_ZdlPvj>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <_ZN11ChampiState13report_statusE27_msgs_can_Status_StatusType26_msgs_can_Status_ErrorType>:


void ChampiState::report_status(msgs_can_Status_StatusType status, msgs_can_Status_ErrorType error) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
 8001034:	4613      	mov	r3, r2
 8001036:	70bb      	strb	r3, [r7, #2]

    // If it's different from the current status, we sent to the CAN right away (for not loosing time to report error)
    if(status_msg_.status != status || status_msg_.error != error) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	7b5b      	ldrb	r3, [r3, #13]
 800103c:	78fa      	ldrb	r2, [r7, #3]
 800103e:	429a      	cmp	r2, r3
 8001040:	d104      	bne.n	800104c <_ZN11ChampiState13report_statusE27_msgs_can_Status_StatusType26_msgs_can_Status_ErrorType+0x24>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7bdb      	ldrb	r3, [r3, #15]
 8001046:	78ba      	ldrb	r2, [r7, #2]
 8001048:	429a      	cmp	r2, r3
 800104a:	d008      	beq.n	800105e <_ZN11ChampiState13report_statusE27_msgs_can_Status_StatusType26_msgs_can_Status_ErrorType+0x36>
        status_msg_.status = status;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	78fa      	ldrb	r2, [r7, #3]
 8001050:	735a      	strb	r2, [r3, #13]
        status_msg_.error = error;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	78ba      	ldrb	r2, [r7, #2]
 8001056:	73da      	strb	r2, [r3, #15]

        send_status();
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f000 f805 	bl	8001068 <_ZN11ChampiState11send_statusEv>

        // TODO on pourra ajouter le logging ici plus tard !
    }
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <_ZN11ChampiState11send_statusEv>:

void ChampiState::send_status() {
 8001068:	b580      	push	{r7, lr}
 800106a:	b08a      	sub	sp, #40	; 0x28
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]

// Init stream TODO can we do that only once ?
pb_ostream_t stream = pb_ostream_from_buffer(tx_buffer_, sizeof(tx_buffer_));
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001076:	f107 030c 	add.w	r3, r7, #12
 800107a:	2278      	movs	r2, #120	; 0x78
 800107c:	4618      	mov	r0, r3
 800107e:	f004 f9c9 	bl	8005414 <pb_ostream_from_buffer>

// Encode message
bool status = pb_encode(&stream, msgs_can_BaseConfig_fields, &status_msg_);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	1d1a      	adds	r2, r3, #4
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	490b      	ldr	r1, [pc, #44]	; (80010b8 <_ZN11ChampiState11send_statusEv+0x50>)
 800108c:	4618      	mov	r0, r3
 800108e:	f004 fe2e 	bl	8005cee <pb_encode>
 8001092:	4603      	mov	r3, r0
 8001094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
size_t message_length = stream.bytes_written;
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	623b      	str	r3, [r7, #32]

// Send message
champi_can_interface_->send_msg(CAN_ID_BASE_STATUS, tx_buffer_, message_length);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6998      	ldr	r0, [r3, #24]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	2112      	movs	r1, #18
 80010aa:	f7ff fea5 	bl	8000df8 <_ZN9ChampiCan8send_msgEmPhm>

// TODO je sais pas comment faire si il y a une erreur d'encodage ou d'envoi ici x)
}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	0800bb04 	.word	0x0800bb04

080010bc <_ZN11ChampiState9spin_onceEv>:

void ChampiState::spin_once() {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

    // 1st time: Init and return
    if(last_tx_time_ms_ == 0) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a1b      	ldr	r3, [r3, #32]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d105      	bne.n	80010d8 <_ZN11ChampiState9spin_onceEv+0x1c>
        last_tx_time_ms_ = HAL_GetTick();
 80010cc:	f005 fd80 	bl	8006bd0 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	621a      	str	r2, [r3, #32]
        return;
 80010d6:	e010      	b.n	80010fa <_ZN11ChampiState9spin_onceEv+0x3e>
    }

    // Send status if needed
    uint32_t current_time_ms = HAL_GetTick();
 80010d8:	f005 fd7a 	bl	8006bd0 <HAL_GetTick>
 80010dc:	60f8      	str	r0, [r7, #12]
    if(current_time_ms - last_tx_time_ms_ > tx_period_ms_) {
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a1b      	ldr	r3, [r3, #32]
 80010e2:	68fa      	ldr	r2, [r7, #12]
 80010e4:	1ad2      	subs	r2, r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69db      	ldr	r3, [r3, #28]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d905      	bls.n	80010fa <_ZN11ChampiState9spin_onceEv+0x3e>
        send_status();
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff ffba 	bl	8001068 <_ZN11ChampiState11send_statusEv>
        last_tx_time_ms_ = current_time_ms;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	621a      	str	r2, [r3, #32]
    }
}
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <_Z3subPKdS0_Pd>:

Vel sub(Vel vel1, Vel vel2) {
	return {vel1.x - vel2.x, vel1.y - vel2.y, vel1.theta - vel2.theta};
}

void sub(const double* arr1, const double* arr2, double* ret) {
 8001100:	b5b0      	push	{r4, r5, r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	60f8      	str	r0, [r7, #12]
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
	for(int i=0; i<3; i++) {
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	e018      	b.n	8001144 <_Z3subPKdS0_Pd+0x44>
		ret[i] = arr1[i] - arr2[i];
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	68fa      	ldr	r2, [r7, #12]
 8001118:	4413      	add	r3, r2
 800111a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	4413      	add	r3, r2
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	697c      	ldr	r4, [r7, #20]
 800112c:	00e4      	lsls	r4, r4, #3
 800112e:	687d      	ldr	r5, [r7, #4]
 8001130:	442c      	add	r4, r5
 8001132:	f7ff f8c9 	bl	80002c8 <__aeabi_dsub>
 8001136:	4602      	mov	r2, r0
 8001138:	460b      	mov	r3, r1
 800113a:	e9c4 2300 	strd	r2, r3, [r4]
	for(int i=0; i<3; i++) {
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	3301      	adds	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	2b02      	cmp	r3, #2
 8001148:	dde3      	ble.n	8001112 <_Z3subPKdS0_Pd+0x12>
	}
}
 800114a:	bf00      	nop
 800114c:	bf00      	nop
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bdb0      	pop	{r4, r5, r7, pc}

08001154 <_Z3absPKdPd>:

void abs(const double* arr, double* ret) {
 8001154:	b5b0      	push	{r4, r5, r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	e02d      	b.n	80011c0 <_Z3absPKdPd+0x6c>
		if(arr[i]>=0) {
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001170:	f04f 0200 	mov.w	r2, #0
 8001174:	f04f 0300 	mov.w	r3, #0
 8001178:	f7ff fce4 	bl	8000b44 <__aeabi_dcmpge>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00c      	beq.n	800119c <_Z3absPKdPd+0x48>
			ret[i] = arr[i];
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	00db      	lsls	r3, r3, #3
 8001186:	687a      	ldr	r2, [r7, #4]
 8001188:	4413      	add	r3, r2
 800118a:	68fa      	ldr	r2, [r7, #12]
 800118c:	00d2      	lsls	r2, r2, #3
 800118e:	6839      	ldr	r1, [r7, #0]
 8001190:	4411      	add	r1, r2
 8001192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001196:	e9c1 2300 	strd	r2, r3, [r1]
 800119a:	e00e      	b.n	80011ba <_Z3absPKdPd+0x66>
		}
		else {
			ret[i] = -arr[i];
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	68f9      	ldr	r1, [r7, #12]
 80011aa:	00c9      	lsls	r1, r1, #3
 80011ac:	6838      	ldr	r0, [r7, #0]
 80011ae:	4401      	add	r1, r0
 80011b0:	4614      	mov	r4, r2
 80011b2:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80011b6:	e9c1 4500 	strd	r4, r5, [r1]
	for(int i=0; i<3; i++) {
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3301      	adds	r3, #1
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	ddce      	ble.n	8001164 <_Z3absPKdPd+0x10>
		}
	}
}
 80011c6:	bf00      	nop
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bdb0      	pop	{r4, r5, r7, pc}

080011d0 <_Z13get_index_maxPKd>:

int get_index_max(const double* arr) {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
	if(arr[0] >= arr[1] && arr[0] >= arr[2]) {
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	3308      	adds	r3, #8
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff fcad 	bl	8000b44 <__aeabi_dcmpge>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00d      	beq.n	800120c <_Z13get_index_maxPKd+0x3c>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3310      	adds	r3, #16
 80011fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fe:	f7ff fca1 	bl	8000b44 <__aeabi_dcmpge>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <_Z13get_index_maxPKd+0x3c>
		return 0;
 8001208:	2300      	movs	r3, #0
 800120a:	e01b      	b.n	8001244 <_Z13get_index_maxPKd+0x74>
	}
	else if(arr[1] >= arr[0] && arr[1] >= arr[2]) {
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3308      	adds	r3, #8
 8001210:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800121a:	f7ff fc93 	bl	8000b44 <__aeabi_dcmpge>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00e      	beq.n	8001242 <_Z13get_index_maxPKd+0x72>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3308      	adds	r3, #8
 8001228:	e9d3 0100 	ldrd	r0, r1, [r3]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	3310      	adds	r3, #16
 8001230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001234:	f7ff fc86 	bl	8000b44 <__aeabi_dcmpge>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <_Z13get_index_maxPKd+0x72>
		return 1;
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <_Z13get_index_maxPKd+0x74>
	}
	else {
		return 2;
 8001242:	2302      	movs	r3, #2
	}
}
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZN3VelC1Ev>:
#define HOLONOMICDRIVE3_H_


#include "Stepper.h"

struct Vel {
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6879      	ldr	r1, [r7, #4]
 8001256:	f04f 0200 	mov.w	r2, #0
 800125a:	f04f 0300 	mov.w	r3, #0
 800125e:	e9c1 2300 	strd	r2, r3, [r1]
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001270:	6879      	ldr	r1, [r7, #4]
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	f04f 0300 	mov.w	r3, #0
 800127a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4618      	mov	r0, r3
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <_ZN7StepperaSERKS_>:
#ifndef SRC_STEPPER_H_
#define SRC_STEPPER_H_

#include "stm32g4xx_hal.h"

class Stepper {
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	1d10      	adds	r0, r2, #4
 800129c:	3304      	adds	r3, #4
 800129e:	224c      	movs	r2, #76	; 0x4c
 80012a0:	4619      	mov	r1, r3
 80012a2:	f009 fde2 	bl	800ae6a <memcpy>
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	651a      	str	r2, [r3, #80]	; 0x50
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	659a      	str	r2, [r3, #88]	; 0x58
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	661a      	str	r2, [r3, #96]	; 0x60
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <_ZN15HolonomicDrive3C1ERK7StepperS2_S2_>:

HolonomicDrive3::HolonomicDrive3(const Stepper& stepper0, const Stepper& stepper1, const Stepper& stepper2) {
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
 80012ee:	4a37      	ldr	r2, [pc, #220]	; (80013cc <_ZN15HolonomicDrive3C1ERK7StepperS2_S2_+0xec>)
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3304      	adds	r3, #4
 80012f8:	2402      	movs	r4, #2
 80012fa:	461d      	mov	r5, r3
 80012fc:	e004      	b.n	8001308 <_ZN15HolonomicDrive3C1ERK7StepperS2_S2_+0x28>
 80012fe:	4628      	mov	r0, r5
 8001300:	f000 fdce 	bl	8001ea0 <_ZN7StepperC1Ev>
 8001304:	3564      	adds	r5, #100	; 0x64
 8001306:	3c01      	subs	r4, #1
 8001308:	2c00      	cmp	r4, #0
 800130a:	daf8      	bge.n	80012fe <_ZN15HolonomicDrive3C1ERK7StepperS2_S2_+0x1e>
 800130c:	68f9      	ldr	r1, [r7, #12]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
 800131a:	68f9      	ldr	r1, [r7, #12]
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff ff8c 	bl	800124c <_ZN3VelC1Ev>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
 8001344:	611a      	str	r2, [r3, #16]
 8001346:	615a      	str	r2, [r3, #20]
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff7c 	bl	800124c <_ZN3VelC1Ev>
 8001354:	68f9      	ldr	r1, [r7, #12]
 8001356:	f04f 0200 	mov.w	r2, #0
 800135a:	f04f 0300 	mov.w	r3, #0
 800135e:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	this->steppers[0] = stepper0;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	3304      	adds	r3, #4
 800136e:	68b9      	ldr	r1, [r7, #8]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff8b 	bl	800128c <_ZN7StepperaSERKS_>
	this->steppers[1] = stepper1;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3368      	adds	r3, #104	; 0x68
 800137a:	6879      	ldr	r1, [r7, #4]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff85 	bl	800128c <_ZN7StepperaSERKS_>
	this->steppers[2] = stepper2;
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	33cc      	adds	r3, #204	; 0xcc
 8001386:	6839      	ldr	r1, [r7, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff ff7f 	bl	800128c <_ZN7StepperaSERKS_>
	this->current_wheels_speeds_rps[0] = 0;
 800138e:	68f9      	ldr	r1, [r7, #12]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c1 2356 	strd	r2, r3, [r1, #344]	; 0x158
	this->current_wheels_speeds_rps[1] = 0;
 800139c:	68f9      	ldr	r1, [r7, #12]
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	f04f 0300 	mov.w	r3, #0
 80013a6:	e9c1 2358 	strd	r2, r3, [r1, #352]	; 0x160
	this->current_wheels_speeds_rps[2] = 0;
 80013aa:	68f9      	ldr	r1, [r7, #12]
 80013ac:	f04f 0200 	mov.w	r2, #0
 80013b0:	f04f 0300 	mov.w	r3, #0
 80013b4:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168

    this->has_config = false;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190

}
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bdb0      	pop	{r4, r5, r7, pc}
 80013ca:	bf00      	nop
 80013cc:	0800ba98 	.word	0x0800ba98

080013d0 <_ZN15HolonomicDrive3C1Ev>:

HolonomicDrive3::HolonomicDrive3() = default;
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	4a21      	ldr	r2, [pc, #132]	; (8001460 <_ZN15HolonomicDrive3C1Ev+0x90>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2402      	movs	r4, #2
 80013e4:	461d      	mov	r5, r3
 80013e6:	e004      	b.n	80013f2 <_ZN15HolonomicDrive3C1Ev+0x22>
 80013e8:	4628      	mov	r0, r5
 80013ea:	f000 fd59 	bl	8001ea0 <_ZN7StepperC1Ev>
 80013ee:	3564      	adds	r5, #100	; 0x64
 80013f0:	3c01      	subs	r4, #1
 80013f2:	2c00      	cmp	r4, #0
 80013f4:	daf8      	bge.n	80013e8 <_ZN15HolonomicDrive3C1Ev+0x18>
 80013f6:	6879      	ldr	r1, [r7, #4]
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	f04f 0300 	mov.w	r3, #0
 800140e:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff17 	bl	800124c <_ZN3VelC1Ev>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
 8001430:	615a      	str	r2, [r3, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ff07 	bl	800124c <_ZN3VelC1Ev>
 800143e:	6879      	ldr	r1, [r7, #4]
 8001440:	f04f 0200 	mov.w	r2, #0
 8001444:	f04f 0300 	mov.w	r3, #0
 8001448:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bdb0      	pop	{r4, r5, r7, pc}
 800145e:	bf00      	nop
 8001460:	0800ba98 	.word	0x0800ba98

08001464 <_ZN15HolonomicDrive311set_cmd_velE3Vel>:

void HolonomicDrive3::set_cmd_vel(Vel cmd) {
 8001464:	b4b0      	push	{r4, r5, r7}
 8001466:	b089      	sub	sp, #36	; 0x24
 8001468:	af00      	add	r7, sp, #0
 800146a:	61f8      	str	r0, [r7, #28]
 800146c:	eeb0 5a40 	vmov.f32	s10, s0
 8001470:	eef0 5a60 	vmov.f32	s11, s1
 8001474:	eeb0 6a41 	vmov.f32	s12, s2
 8001478:	eef0 6a61 	vmov.f32	s13, s3
 800147c:	eeb0 7a42 	vmov.f32	s14, s4
 8001480:	eef0 7a62 	vmov.f32	s15, s5
 8001484:	ed87 5b00 	vstr	d5, [r7]
 8001488:	ed87 6b02 	vstr	d6, [r7, #8]
 800148c:	ed87 7b04 	vstr	d7, [r7, #16]
	this->cmd_vel = cmd;
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	f503 74a0 	add.w	r4, r3, #320	; 0x140
 8001496:	463d      	mov	r5, r7
 8001498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800149a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800149c:	e895 0003 	ldmia.w	r5, {r0, r1}
 80014a0:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80014a4:	bf00      	nop
 80014a6:	3724      	adds	r7, #36	; 0x24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bcb0      	pop	{r4, r5, r7}
 80014ac:	4770      	bx	lr
	...

080014b0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPd>:

void HolonomicDrive3::compute_wheels_speeds(Vel cmd, double *ret_speeds_rps) {
 80014b0:	b5b0      	push	{r4, r5, r7, lr}
 80014b2:	b08e      	sub	sp, #56	; 0x38
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	61f8      	str	r0, [r7, #28]
 80014b8:	eeb0 5a40 	vmov.f32	s10, s0
 80014bc:	eef0 5a60 	vmov.f32	s11, s1
 80014c0:	eeb0 6a41 	vmov.f32	s12, s2
 80014c4:	eef0 6a61 	vmov.f32	s13, s3
 80014c8:	eeb0 7a42 	vmov.f32	s14, s4
 80014cc:	eef0 7a62 	vmov.f32	s15, s5
 80014d0:	61b9      	str	r1, [r7, #24]
 80014d2:	ed87 5b00 	vstr	d5, [r7]
 80014d6:	ed87 6b02 	vstr	d6, [r7, #8]
 80014da:	ed87 7b04 	vstr	d7, [r7, #16]
    double wheel0_mps = 0.5 * this->cmd_vel.y + SQRT_3_OVER_2 * this->cmd_vel.x + this->wheel_distance * this->cmd_vel.theta;
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	; 0x148
 80014e4:	f04f 0200 	mov.w	r2, #0
 80014e8:	4b4f      	ldr	r3, [pc, #316]	; (8001628 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPd+0x178>)
 80014ea:	f7ff f8a5 	bl	8000638 <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4614      	mov	r4, r2
 80014f4:	461d      	mov	r5, r3
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 80014fc:	a348      	add	r3, pc, #288	; (adr r3, 8001620 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPd+0x170>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff f899 	bl	8000638 <__aeabi_dmul>
 8001506:	4602      	mov	r2, r0
 8001508:	460b      	mov	r3, r1
 800150a:	4620      	mov	r0, r4
 800150c:	4629      	mov	r1, r5
 800150e:	f7fe fedd 	bl	80002cc <__adddf3>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4614      	mov	r4, r2
 8001518:	461d      	mov	r5, r3
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8001526:	f7ff f887 	bl	8000638 <__aeabi_dmul>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4620      	mov	r0, r4
 8001530:	4629      	mov	r1, r5
 8001532:	f7fe fecb 	bl	80002cc <__adddf3>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double wheel1_mps = 0.5 * this->cmd_vel.y - SQRT_3_OVER_2 * this->cmd_vel.x + this->wheel_distance * this->cmd_vel.theta;
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	e9d3 0152 	ldrd	r0, r1, [r3, #328]	; 0x148
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	4b37      	ldr	r3, [pc, #220]	; (8001628 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPd+0x178>)
 800154a:	f7ff f875 	bl	8000638 <__aeabi_dmul>
 800154e:	4602      	mov	r2, r0
 8001550:	460b      	mov	r3, r1
 8001552:	4614      	mov	r4, r2
 8001554:	461d      	mov	r5, r3
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	e9d3 0150 	ldrd	r0, r1, [r3, #320]	; 0x140
 800155c:	a330      	add	r3, pc, #192	; (adr r3, 8001620 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPd+0x170>)
 800155e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001562:	f7ff f869 	bl	8000638 <__aeabi_dmul>
 8001566:	4602      	mov	r2, r0
 8001568:	460b      	mov	r3, r1
 800156a:	4620      	mov	r0, r4
 800156c:	4629      	mov	r1, r5
 800156e:	f7fe feab 	bl	80002c8 <__aeabi_dsub>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4614      	mov	r4, r2
 8001578:	461d      	mov	r5, r3
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 8001586:	f7ff f857 	bl	8000638 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4620      	mov	r0, r4
 8001590:	4629      	mov	r1, r5
 8001592:	f7fe fe9b 	bl	80002cc <__adddf3>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    double wheel2_mps = - this->cmd_vel.y + this->wheel_distance * this->cmd_vel.theta;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	e9d3 2354 	ldrd	r2, r3, [r3, #336]	; 0x150
 80015aa:	f7ff f845 	bl	8000638 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	e9d3 2352 	ldrd	r2, r3, [r3, #328]	; 0x148
 80015bc:	f7fe fe84 	bl	80002c8 <__aeabi_dsub>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // wheel mps -> wheel rps
    ret_speeds_rps[0] = wheel0_mps / this->wheel_circumference;
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80015ce:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80015d2:	f7ff f95b 	bl	800088c <__aeabi_ddiv>
 80015d6:	4602      	mov	r2, r0
 80015d8:	460b      	mov	r3, r1
 80015da:	69b9      	ldr	r1, [r7, #24]
 80015dc:	e9c1 2300 	strd	r2, r3, [r1]
    ret_speeds_rps[1] = wheel1_mps / this->wheel_circumference;
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80015e6:	69b9      	ldr	r1, [r7, #24]
 80015e8:	f101 0408 	add.w	r4, r1, #8
 80015ec:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80015f0:	f7ff f94c 	bl	800088c <__aeabi_ddiv>
 80015f4:	4602      	mov	r2, r0
 80015f6:	460b      	mov	r3, r1
 80015f8:	e9c4 2300 	strd	r2, r3, [r4]
    ret_speeds_rps[2] = wheel2_mps / this->wheel_circumference;
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 8001602:	69b9      	ldr	r1, [r7, #24]
 8001604:	f101 0410 	add.w	r4, r1, #16
 8001608:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800160c:	f7ff f93e 	bl	800088c <__aeabi_ddiv>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	e9c4 2300 	strd	r2, r3, [r4]
}
 8001618:	bf00      	nop
 800161a:	3738      	adds	r7, #56	; 0x38
 800161c:	46bd      	mov	sp, r7
 800161e:	bdb0      	pop	{r4, r5, r7, pc}
 8001620:	e857b07f 	.word	0xe857b07f
 8001624:	3febb67a 	.word	0x3febb67a
 8001628:	3fe00000 	.word	0x3fe00000

0800162c <_ZN15HolonomicDrive319write_wheels_speedsEPd>:

void HolonomicDrive3::write_wheels_speeds(double *speeds_rps) {
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	e026      	b.n	800168a <_ZN15HolonomicDrive319write_wheels_speedsEPd+0x5e>
		this->steppers[i].set_speed_rps(speeds_rps[i]);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	2264      	movs	r2, #100	; 0x64
 8001640:	fb02 f303 	mul.w	r3, r2, r3
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4413      	add	r3, r2
 8001648:	1d1c      	adds	r4, r3, #4
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	00db      	lsls	r3, r3, #3
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	4413      	add	r3, r2
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	4610      	mov	r0, r2
 8001658:	4619      	mov	r1, r3
 800165a:	f7ff facf 	bl	8000bfc <__aeabi_d2f>
 800165e:	4603      	mov	r3, r0
 8001660:	ee00 3a10 	vmov	s0, r3
 8001664:	4620      	mov	r0, r4
 8001666:	f000 fcb9 	bl	8001fdc <_ZN7Stepper13set_speed_rpsEf>
		this->current_wheels_speeds_rps[i] = speeds_rps[i];
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	00db      	lsls	r3, r3, #3
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	4413      	add	r3, r2
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	68f9      	ldr	r1, [r7, #12]
 800167a:	312b      	adds	r1, #43	; 0x2b
 800167c:	00c9      	lsls	r1, r1, #3
 800167e:	4401      	add	r1, r0
 8001680:	e9c1 2300 	strd	r2, r3, [r1]
	for(int i=0; i<3; i++) {
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	3301      	adds	r3, #1
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2b02      	cmp	r3, #2
 800168e:	ddd5      	ble.n	800163c <_ZN15HolonomicDrive319write_wheels_speedsEPd+0x10>
	}
}
 8001690:	bf00      	nop
 8001692:	bf00      	nop
 8001694:	3714      	adds	r7, #20
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}
	...

0800169c <_ZN15HolonomicDrive324spin_once_motors_controlEv>:

void HolonomicDrive3::spin_once_motors_control() {
 800169c:	b5b0      	push	{r4, r5, r7, lr}
 800169e:	b0a2      	sub	sp, #136	; 0x88
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]

    // Convenience variables
    double max_accel = this->max_accel_per_cycle;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 80016aa:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78

	// compare current_vel and cmd_vel wheels speeds to check the required acceleration to transition directly from current to command
	double cmd_wheels_speeds[3]; // rotations per second
	this->compute_wheels_speeds(cmd_vel, cmd_wheels_speeds);
 80016ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 80016b8:	ed93 6b52 	vldr	d6, [r3, #328]	; 0x148
 80016bc:	ed93 7b54 	vldr	d7, [r3, #336]	; 0x150
 80016c0:	4611      	mov	r1, r2
 80016c2:	eeb0 0a45 	vmov.f32	s0, s10
 80016c6:	eef0 0a65 	vmov.f32	s1, s11
 80016ca:	eeb0 1a46 	vmov.f32	s2, s12
 80016ce:	eef0 1a66 	vmov.f32	s3, s13
 80016d2:	eeb0 2a47 	vmov.f32	s4, s14
 80016d6:	eef0 2a67 	vmov.f32	s5, s15
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff fee8 	bl	80014b0 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPd>

	if(this->current_wheels_speeds_rps[2] != this->current_wheels_speeds_rps[2]) {
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	e9d3 235a 	ldrd	r2, r3, [r3, #360]	; 0x168
 80016ec:	f7ff fa0c 	bl	8000b08 <__aeabi_dcmpeq>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10c      	bne.n	8001710 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x74>
		this->current_wheels_speeds_rps[2]--;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	e9d3 015a 	ldrd	r0, r1, [r3, #360]	; 0x168
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b49      	ldr	r3, [pc, #292]	; (8001828 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x18c>)
 8001702:	f7fe fde1 	bl	80002c8 <__aeabi_dsub>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	6879      	ldr	r1, [r7, #4]
 800170c:	e9c1 235a 	strd	r2, r3, [r1, #360]	; 0x168
	}

	double desired_accels_wheels[3];
	sub(cmd_wheels_speeds, this->current_wheels_speeds_rps, desired_accels_wheels);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 8001716:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800171a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800171e:	4618      	mov	r0, r3
 8001720:	f7ff fcee 	bl	8001100 <_Z3subPKdS0_Pd>

	double abs_desired_accels_wheels[3];
	abs(desired_accels_wheels, abs_desired_accels_wheels);
 8001724:	f107 0220 	add.w	r2, r7, #32
 8001728:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fd10 	bl	8001154 <_Z3absPKdPd>
	if(abs_desired_accels_wheels[0] < max_accel && abs_desired_accels_wheels[1] < max_accel && abs_desired_accels_wheels[2] < max_accel) {
 8001734:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001738:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800173c:	f7ff fa0c 	bl	8000b58 <__aeabi_dcmpgt>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d018      	beq.n	8001778 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xdc>
 8001746:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800174a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800174e:	f7ff fa03 	bl	8000b58 <__aeabi_dcmpgt>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00f      	beq.n	8001778 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xdc>
 8001758:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800175c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001760:	f7ff f9fa 	bl	8000b58 <__aeabi_dcmpgt>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xdc>
		// acceleration requested is ok, no need to accelerate gradually.

		this->write_wheels_speeds(cmd_wheels_speeds);
 800176a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800176e:	4619      	mov	r1, r3
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f7ff ff5b 	bl	800162c <_ZN15HolonomicDrive319write_wheels_speedsEPd>
 8001776:	e04b      	b.n	8001810 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x174>
	}
	else {
		// Trouver la roue qui pose le + problème. On va alors pouvoir réduire les accélérations des 3 roues de façon
		// de façon proportionelle, de façon que la roue qui pose le + problème ait une accélération égale à MAX_ACCEL_PER_CYCLE
		int i_max = get_index_max(abs_desired_accels_wheels);
 8001778:	f107 0320 	add.w	r3, r7, #32
 800177c:	4618      	mov	r0, r3
 800177e:	f7ff fd27 	bl	80011d0 <_Z13get_index_maxPKd>
 8001782:	6778      	str	r0, [r7, #116]	; 0x74

		double speed_ratio = max_accel / abs_desired_accels_wheels[i_max]; // speed ratio of each original speed to add
 8001784:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	3388      	adds	r3, #136	; 0x88
 800178a:	443b      	add	r3, r7
 800178c:	3b68      	subs	r3, #104	; 0x68
 800178e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001792:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8001796:	f7ff f879 	bl	800088c <__aeabi_ddiv>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68

		double new_speeds_cmds[3];
		for(int i=0; i<3; i++) {
 80017a2:	2300      	movs	r3, #0
 80017a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017a8:	e028      	b.n	80017fc <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x160>
			new_speeds_cmds[i] = current_wheels_speeds_rps[i] + speed_ratio * desired_accels_wheels[i];
 80017aa:	687a      	ldr	r2, [r7, #4]
 80017ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017b0:	332b      	adds	r3, #43	; 0x2b
 80017b2:	00db      	lsls	r3, r3, #3
 80017b4:	4413      	add	r3, r2
 80017b6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80017ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	3388      	adds	r3, #136	; 0x88
 80017c2:	443b      	add	r3, r7
 80017c4:	3b50      	subs	r3, #80	; 0x50
 80017c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ca:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80017ce:	f7fe ff33 	bl	8000638 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe fd77 	bl	80002cc <__adddf3>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80017e6:	00c9      	lsls	r1, r1, #3
 80017e8:	3188      	adds	r1, #136	; 0x88
 80017ea:	4439      	add	r1, r7
 80017ec:	3980      	subs	r1, #128	; 0x80
 80017ee:	e9c1 2300 	strd	r2, r3, [r1]
		for(int i=0; i<3; i++) {
 80017f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80017f6:	3301      	adds	r3, #1
 80017f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80017fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001800:	2b02      	cmp	r3, #2
 8001802:	ddd2      	ble.n	80017aa <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x10e>
		}

		// set speed
		this->write_wheels_speeds(new_speeds_cmds);
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	4619      	mov	r1, r3
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ff0e 	bl	800162c <_ZN15HolonomicDrive319write_wheels_speedsEPd>
	}

	// Compute / update current vel (linear / angular)
	update_current_vel(this->current_wheels_speeds_rps);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8001816:	4619      	mov	r1, r3
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f835 	bl	8001888 <_ZN15HolonomicDrive318update_current_velEPKd>


}
 800181e:	bf00      	nop
 8001820:	3788      	adds	r7, #136	; 0x88
 8001822:	46bd      	mov	sp, r7
 8001824:	bdb0      	pop	{r4, r5, r7, pc}
 8001826:	bf00      	nop
 8001828:	3ff00000 	.word	0x3ff00000

0800182c <_ZN15HolonomicDrive315get_current_velEv>:

Vel HolonomicDrive3::get_current_vel() {
 800182c:	b4b0      	push	{r4, r5, r7}
 800182e:	b08f      	sub	sp, #60	; 0x3c
 8001830:	af00      	add	r7, sp, #0
 8001832:	61f8      	str	r0, [r7, #28]
	return this->current_vel;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f107 0420 	add.w	r4, r7, #32
 800183a:	f503 75b8 	add.w	r5, r3, #368	; 0x170
 800183e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001842:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001846:	e884 0003 	stmia.w	r4, {r0, r1}
 800184a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800184e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001852:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001856:	ec45 4b15 	vmov	d5, r4, r5
 800185a:	ec41 0b16 	vmov	d6, r0, r1
 800185e:	ec43 2b17 	vmov	d7, r2, r3
}
 8001862:	eeb0 0a45 	vmov.f32	s0, s10
 8001866:	eef0 0a65 	vmov.f32	s1, s11
 800186a:	eeb0 1a46 	vmov.f32	s2, s12
 800186e:	eef0 1a66 	vmov.f32	s3, s13
 8001872:	eeb0 2a47 	vmov.f32	s4, s14
 8001876:	eef0 2a67 	vmov.f32	s5, s15
 800187a:	373c      	adds	r7, #60	; 0x3c
 800187c:	46bd      	mov	sp, r7
 800187e:	bcb0      	pop	{r4, r5, r7}
 8001880:	4770      	bx	lr
 8001882:	0000      	movs	r0, r0
 8001884:	0000      	movs	r0, r0
	...

08001888 <_ZN15HolonomicDrive318update_current_velEPKd>:

void HolonomicDrive3::update_current_vel(const double *speeds_rps) {
 8001888:	b5b0      	push	{r4, r5, r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
	double wheel0_mps = speeds_rps[0] * this->wheel_circumference;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 800189e:	f7fe fecb 	bl	8000638 <__aeabi_dmul>
 80018a2:	4602      	mov	r2, r0
 80018a4:	460b      	mov	r3, r1
 80018a6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    double wheel1_mps = speeds_rps[1] * this->wheel_circumference;
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	3308      	adds	r3, #8
 80018ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80018b8:	f7fe febe 	bl	8000638 <__aeabi_dmul>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double wheel2_mps = speeds_rps[2] * this->wheel_circumference;
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	3310      	adds	r3, #16
 80018c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80018d2:	f7fe feb1 	bl	8000638 <__aeabi_dmul>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	e9c7 2302 	strd	r2, r3, [r7, #8]

	this->current_vel.x = SQRT_3_OVER_3 * (wheel0_mps - wheel1_mps);
 80018de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80018e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80018e6:	f7fe fcef 	bl	80002c8 <__aeabi_dsub>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4610      	mov	r0, r2
 80018f0:	4619      	mov	r1, r3
 80018f2:	a331      	add	r3, pc, #196	; (adr r3, 80019b8 <_ZN15HolonomicDrive318update_current_velEPKd+0x130>)
 80018f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f8:	f7fe fe9e 	bl	8000638 <__aeabi_dmul>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	e9c1 235c 	strd	r2, r3, [r1, #368]	; 0x170
	this->current_vel.y = (1./3.) * (wheel0_mps + wheel1_mps) - (2./3.) * wheel2_mps;
 8001906:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800190a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800190e:	f7fe fcdd 	bl	80002cc <__adddf3>
 8001912:	4602      	mov	r2, r0
 8001914:	460b      	mov	r3, r1
 8001916:	4610      	mov	r0, r2
 8001918:	4619      	mov	r1, r3
 800191a:	a329      	add	r3, pc, #164	; (adr r3, 80019c0 <_ZN15HolonomicDrive318update_current_velEPKd+0x138>)
 800191c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001920:	f7fe fe8a 	bl	8000638 <__aeabi_dmul>
 8001924:	4602      	mov	r2, r0
 8001926:	460b      	mov	r3, r1
 8001928:	4614      	mov	r4, r2
 800192a:	461d      	mov	r5, r3
 800192c:	a326      	add	r3, pc, #152	; (adr r3, 80019c8 <_ZN15HolonomicDrive318update_current_velEPKd+0x140>)
 800192e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001932:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001936:	f7fe fe7f 	bl	8000638 <__aeabi_dmul>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4620      	mov	r0, r4
 8001940:	4629      	mov	r1, r5
 8001942:	f7fe fcc1 	bl	80002c8 <__aeabi_dsub>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	e9c1 235e 	strd	r2, r3, [r1, #376]	; 0x178
	this->current_vel.theta = (1./(3.*wheel_distance)) * (wheel0_mps + wheel1_mps + wheel2_mps);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	e9d3 014e 	ldrd	r0, r1, [r3, #312]	; 0x138
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	4b15      	ldr	r3, [pc, #84]	; (80019b0 <_ZN15HolonomicDrive318update_current_velEPKd+0x128>)
 800195c:	f7fe fe6c 	bl	8000638 <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	f04f 0000 	mov.w	r0, #0
 8001968:	4912      	ldr	r1, [pc, #72]	; (80019b4 <_ZN15HolonomicDrive318update_current_velEPKd+0x12c>)
 800196a:	f7fe ff8f 	bl	800088c <__aeabi_ddiv>
 800196e:	4602      	mov	r2, r0
 8001970:	460b      	mov	r3, r1
 8001972:	4614      	mov	r4, r2
 8001974:	461d      	mov	r5, r3
 8001976:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800197a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800197e:	f7fe fca5 	bl	80002cc <__adddf3>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800198e:	f7fe fc9d 	bl	80002cc <__adddf3>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	4620      	mov	r0, r4
 8001998:	4629      	mov	r1, r5
 800199a:	f7fe fe4d 	bl	8000638 <__aeabi_dmul>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	6879      	ldr	r1, [r7, #4]
 80019a4:	e9c1 2360 	strd	r2, r3, [r1, #384]	; 0x180
}
 80019a8:	bf00      	nop
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bdb0      	pop	{r4, r5, r7, pc}
 80019b0:	40080000 	.word	0x40080000
 80019b4:	3ff00000 	.word	0x3ff00000
 80019b8:	4591a01f 	.word	0x4591a01f
 80019bc:	3fe279a7 	.word	0x3fe279a7
 80019c0:	55555555 	.word	0x55555555
 80019c4:	3fd55555 	.word	0x3fd55555
 80019c8:	55555555 	.word	0x55555555
 80019cc:	3fe55555 	.word	0x3fe55555

080019d0 <_ZN15HolonomicDrive310set_configEddd>:
 *
 * @param max_accel en rotation.s^-2
 * @param wheel_radius en mètres
 * @param base_radius en mètres
 */
void HolonomicDrive3::set_config(double max_accel, double wheel_radius, double base_radius) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b088      	sub	sp, #32
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	61f8      	str	r0, [r7, #28]
 80019d8:	ed87 0b04 	vstr	d0, [r7, #16]
 80019dc:	ed87 1b02 	vstr	d1, [r7, #8]
 80019e0:	ed87 2b00 	vstr	d2, [r7]
    this->max_accel_per_cycle = max_accel / CONTROL_LOOP_FREQ_HZ;
 80019e4:	f04f 0200 	mov.w	r2, #0
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <_ZN15HolonomicDrive310set_configEddd+0x78>)
 80019ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019ee:	f7fe ff4d 	bl	800088c <__aeabi_ddiv>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	69f9      	ldr	r1, [r7, #28]
 80019f8:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
    this->wheel_circumference = wheel_radius * 2.0 * PI;
 80019fc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a00:	4602      	mov	r2, r0
 8001a02:	460b      	mov	r3, r1
 8001a04:	f7fe fc62 	bl	80002cc <__adddf3>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	a30b      	add	r3, pc, #44	; (adr r3, 8001a40 <_ZN15HolonomicDrive310set_configEddd+0x70>)
 8001a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a16:	f7fe fe0f 	bl	8000638 <__aeabi_dmul>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	69f9      	ldr	r1, [r7, #28]
 8001a20:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
    this->wheel_distance = base_radius;
 8001a24:	69f9      	ldr	r1, [r7, #28]
 8001a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a2a:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138

    this->has_config = true;
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
}
 8001a36:	bf00      	nop
 8001a38:	3720      	adds	r7, #32
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	54442eea 	.word	0x54442eea
 8001a44:	400921fb 	.word	0x400921fb
 8001a48:	40590000 	.word	0x40590000

08001a4c <_ZN15HolonomicDrive313is_configuredEv>:

bool HolonomicDrive3::new_config_received() {
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
    return this->has_config;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <_ZN15HolonomicDrive3D1Ev>:

HolonomicDrive3::~HolonomicDrive3() = default;
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <_ZN15HolonomicDrive3D1Ev+0x3c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d00d      	beq.n	8001a9a <_ZN15HolonomicDrive3D1Ev+0x32>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	3304      	adds	r3, #4
 8001a82:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	3304      	adds	r3, #4
 8001a8a:	429c      	cmp	r4, r3
 8001a8c:	d005      	beq.n	8001a9a <_ZN15HolonomicDrive3D1Ev+0x32>
 8001a8e:	3c64      	subs	r4, #100	; 0x64
 8001a90:	6823      	ldr	r3, [r4, #0]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4620      	mov	r0, r4
 8001a96:	4798      	blx	r3
 8001a98:	e7f5      	b.n	8001a86 <_ZN15HolonomicDrive3D1Ev+0x1e>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd90      	pop	{r4, r7, pc}
 8001aa4:	0800ba98 	.word	0x0800ba98

08001aa8 <_ZN15HolonomicDrive3D0Ev>:
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7ff ffd9 	bl	8001a68 <_ZN15HolonomicDrive3D1Ev>
 8001ab6:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f008 fc9a 	bl	800a3f4 <_ZdlPvj>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <_ZN17MessageRecomposerC1Ev>:
#include "MessageRecomposer.h"

#include "stdio.h"


MessageRecomposer::MessageRecomposer() {
 8001acc:	b5b0      	push	{r4, r5, r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
 8001ad4:	4a0c      	ldr	r2, [pc, #48]	; (8001b08 <_ZN17MessageRecomposerC1Ev+0x3c>)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	3324      	adds	r3, #36	; 0x24
 8001ade:	2413      	movs	r4, #19
 8001ae0:	461d      	mov	r5, r3
 8001ae2:	e004      	b.n	8001aee <_ZN17MessageRecomposerC1Ev+0x22>
 8001ae4:	4628      	mov	r0, r5
 8001ae6:	f008 fd2f 	bl	800a548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001aea:	3518      	adds	r5, #24
 8001aec:	3c01      	subs	r4, #1
 8001aee:	2c00      	cmp	r4, #0
 8001af0:	daf8      	bge.n	8001ae4 <_ZN17MessageRecomposerC1Ev+0x18>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001af8:	4618      	mov	r0, r3
 8001afa:	f008 fd25 	bl	800a548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

}
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4618      	mov	r0, r3
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bdb0      	pop	{r4, r5, r7, pc}
 8001b08:	0800baa8 	.word	0x0800baa8

08001b0c <_ZN17MessageRecomposer9add_frameEPhh>:

void MessageRecomposer::add_frame(uint8_t *frame_data, uint8_t length) {
 8001b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b0e:	b09b      	sub	sp, #108	; 0x6c
 8001b10:	af02      	add	r7, sp, #8
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	4613      	mov	r3, r2
 8001b18:	71fb      	strb	r3, [r7, #7]

	int msg_number;
    int msg_size;
    int frame_index;

    decode_descriptor(frame_data, msg_number, msg_size, frame_index);
 8001b1a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001b1e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001b22:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	68b9      	ldr	r1, [r7, #8]
 8001b2c:	68f8      	ldr	r0, [r7, #12]
 8001b2e:	f000 f910 	bl	8001d52 <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>

    // TODO check if the number follows the expected order (0 -> 1 -> 2 -> 3 -> 0 -> ...)
    // But it's not that easy bc what if we miss an entire message ? we would loose the 3 messages that follow it
    if(msg_number_ != msg_number) {
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d019      	beq.n	8001b70 <_ZN17MessageRecomposer9add_frameEPhh+0x64>
        // new message
        printf("New message\n");
 8001b3c:	4856      	ldr	r0, [pc, #344]	; (8001c98 <_ZN17MessageRecomposer9add_frameEPhh+0x18c>)
 8001b3e:	f008 ffe5 	bl	800ab0c <puts>
        msg_number_ = msg_number;
 8001b42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	605a      	str	r2, [r3, #4]
        n_frames_ = msg_size;
 8001b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	609a      	str	r2, [r3, #8]
        for(int i=0; i<n_frames_; i++) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b52:	e008      	b.n	8001b66 <_ZN17MessageRecomposer9add_frameEPhh+0x5a>
            frames_received_[i] = false;
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b58:	4413      	add	r3, r2
 8001b5a:	330d      	adds	r3, #13
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 8001b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001b62:	3301      	adds	r3, #1
 8001b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbf1      	blt.n	8001b54 <_ZN17MessageRecomposer9add_frameEPhh+0x48>
        }
    }

    frames_received_[frame_index] = true;
 8001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	4413      	add	r3, r2
 8001b76:	2201      	movs	r2, #1
 8001b78:	735a      	strb	r2, [r3, #13]
    msg_parts[frame_index] = std::string((char*)frame_data+2, length-2);
 8001b7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	3320      	adds	r3, #32
 8001b86:	68fa      	ldr	r2, [r7, #12]
 8001b88:	4413      	add	r3, r2
 8001b8a:	1d1c      	adds	r4, r3, #4
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	1c9d      	adds	r5, r3, #2
 8001b90:	79fb      	ldrb	r3, [r7, #7]
 8001b92:	3b02      	subs	r3, #2
 8001b94:	461e      	mov	r6, r3
 8001b96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f008 fc2c 	bl	800a3f8 <_ZNSaIcEC1Ev>
 8001ba0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ba4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001ba8:	4632      	mov	r2, r6
 8001baa:	4629      	mov	r1, r5
 8001bac:	f008 fd92 	bl	800a6d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 8001bb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f008 fcd9 	bl	800a56e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001bbc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f008 fcc8 	bl	800a556 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001bc6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f008 fc15 	bl	800a3fa <_ZNSaIcED1Ev>

    for(int i=0; i<n_frames_; i++) {
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bd4:	e00c      	b.n	8001bf0 <_ZN17MessageRecomposer9add_frameEPhh+0xe4>
    	printf("Frame %d received : %d\n", i, frames_received_[i]);
 8001bd6:	68fa      	ldr	r2, [r7, #12]
 8001bd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bda:	4413      	add	r3, r2
 8001bdc:	330d      	adds	r3, #13
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	461a      	mov	r2, r3
 8001be2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001be4:	482d      	ldr	r0, [pc, #180]	; (8001c9c <_ZN17MessageRecomposer9add_frameEPhh+0x190>)
 8001be6:	f008 ff2b 	bl	800aa40 <iprintf>
    for(int i=0; i<n_frames_; i++) {
 8001bea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bec:	3301      	adds	r3, #1
 8001bee:	65bb      	str	r3, [r7, #88]	; 0x58
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	dbed      	blt.n	8001bd6 <_ZN17MessageRecomposer9add_frameEPhh+0xca>
    }

    if(all_frames_received()) {
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	f000 f8d3 	bl	8001da6 <_ZN17MessageRecomposer19all_frames_receivedEv>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d043      	beq.n	8001c8e <_ZN17MessageRecomposer9add_frameEPhh+0x182>
        printf("All frames received\n");
 8001c06:	4826      	ldr	r0, [pc, #152]	; (8001ca0 <_ZN17MessageRecomposer9add_frameEPhh+0x194>)
 8001c08:	f008 ff80 	bl	800ab0c <puts>
        std::string full_msg;
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	4618      	mov	r0, r3
 8001c12:	f008 fc99 	bl	800a548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
        for(int i=0; i<n_frames_; i++) {
 8001c16:	2300      	movs	r3, #0
 8001c18:	657b      	str	r3, [r7, #84]	; 0x54
 8001c1a:	e011      	b.n	8001c40 <_ZN17MessageRecomposer9add_frameEPhh+0x134>
            full_msg += msg_parts[i];
 8001c1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	3320      	adds	r3, #32
 8001c28:	68fa      	ldr	r2, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	1d1a      	adds	r2, r3, #4
 8001c2e:	f107 0310 	add.w	r3, r7, #16
 8001c32:	4611      	mov	r1, r2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f008 fcef 	bl	800a618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
        for(int i=0; i<n_frames_; i++) {
 8001c3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001c46:	429a      	cmp	r2, r3
 8001c48:	dbe8      	blt.n	8001c1c <_ZN17MessageRecomposer9add_frameEPhh+0x110>
        }
        full_msg_ = full_msg;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001c50:	f107 0210 	add.w	r2, r7, #16
 8001c54:	4611      	mov	r1, r2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f008 fc83 	bl	800a562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
        full_msg_received_ = true;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	731a      	strb	r2, [r3, #12]
        for(int i=0; i<n_frames_; i++) {
 8001c62:	2300      	movs	r3, #0
 8001c64:	653b      	str	r3, [r7, #80]	; 0x50
 8001c66:	e008      	b.n	8001c7a <_ZN17MessageRecomposer9add_frameEPhh+0x16e>
            frames_received_[i] = false;
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c6c:	4413      	add	r3, r2
 8001c6e:	330d      	adds	r3, #13
 8001c70:	2200      	movs	r2, #0
 8001c72:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 8001c74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c76:	3301      	adds	r3, #1
 8001c78:	653b      	str	r3, [r7, #80]	; 0x50
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dbf1      	blt.n	8001c68 <_ZN17MessageRecomposer9add_frameEPhh+0x15c>
        }
    }
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f008 fc64 	bl	800a556 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001c8e:	bf00      	nop
 8001c90:	3764      	adds	r7, #100	; 0x64
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c96:	bf00      	nop
 8001c98:	0800b744 	.word	0x0800b744
 8001c9c:	0800b750 	.word	0x0800b750
 8001ca0:	0800b768 	.word	0x0800b768

08001ca4 <_ZN17MessageRecomposer21check_if_new_full_msgEv>:

bool MessageRecomposer::check_if_new_full_msg() {
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
    return full_msg_received_;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	7b1b      	ldrb	r3, [r3, #12]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>:

std::string MessageRecomposer::get_full_msg() {
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
    full_msg_received_ = false;
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	731a      	strb	r2, [r3, #12]
    return full_msg_;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f008 fcc9 	bl	800a66c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <_ZN17MessageRecomposerD1Ev>:

MessageRecomposer::~MessageRecomposer() {
 8001ce4:	b590      	push	{r4, r7, lr}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <_ZN17MessageRecomposerD1Ev+0x48>)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	601a      	str	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f008 fc2c 	bl	800a556 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3324      	adds	r3, #36	; 0x24
	// TODO Auto-generated destructor stub
}
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00c      	beq.n	8001d20 <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3324      	adds	r3, #36	; 0x24
 8001d0a:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3324      	adds	r3, #36	; 0x24
}
 8001d12:	429c      	cmp	r4, r3
 8001d14:	d004      	beq.n	8001d20 <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 8001d16:	3c18      	subs	r4, #24
 8001d18:	4620      	mov	r0, r4
 8001d1a:	f008 fc1c 	bl	800a556 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001d1e:	e7f6      	b.n	8001d0e <_ZN17MessageRecomposerD1Ev+0x2a>
MessageRecomposer::~MessageRecomposer() {
 8001d20:	bf00      	nop
}
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4618      	mov	r0, r3
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd90      	pop	{r4, r7, pc}
 8001d2c:	0800baa8 	.word	0x0800baa8

08001d30 <_ZN17MessageRecomposerD0Ev>:
MessageRecomposer::~MessageRecomposer() {
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
}
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f7ff ffd3 	bl	8001ce4 <_ZN17MessageRecomposerD1Ev>
 8001d3e:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f008 fb56 	bl	800a3f4 <_ZdlPvj>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>:

void MessageRecomposer::decode_descriptor(uint8_t *frame_data, int &msg_number,
		int &msg_size, int &frame_index) {
 8001d52:	b480      	push	{r7}
 8001d54:	b087      	sub	sp, #28
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
 8001d5e:	603b      	str	r3, [r7, #0]

    uint16_t msg_descriptor = frame_data[1] << 8 | frame_data[0];
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	3301      	adds	r3, #1
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	021b      	lsls	r3, r3, #8
 8001d68:	b21a      	sxth	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	b21b      	sxth	r3, r3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	b21b      	sxth	r3, r3
 8001d74:	82fb      	strh	r3, [r7, #22]

    // todo mask the unused bits for safety (eg if error of transmission)

    msg_number = (msg_descriptor >> 12);
 8001d76:	8afb      	ldrh	r3, [r7, #22]
 8001d78:	0b1b      	lsrs	r3, r3, #12
 8001d7a:	b29b      	uxth	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	601a      	str	r2, [r3, #0]
    msg_size = (msg_descriptor >> 6) & 0x3F;
 8001d82:	8afb      	ldrh	r3, [r7, #22]
 8001d84:	099b      	lsrs	r3, r3, #6
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	601a      	str	r2, [r3, #0]
    frame_index = msg_descriptor & 0x3F;
 8001d90:	8afb      	ldrh	r3, [r7, #22]
 8001d92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d96:	6a3b      	ldr	r3, [r7, #32]
 8001d98:	601a      	str	r2, [r3, #0]
}
 8001d9a:	bf00      	nop
 8001d9c:	371c      	adds	r7, #28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <_ZN17MessageRecomposer19all_frames_receivedEv>:

bool MessageRecomposer::all_frames_received() {
 8001da6:	b480      	push	{r7}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
    for(int i=0; i<n_frames_; i++) {
 8001dae:	2300      	movs	r3, #0
 8001db0:	60fb      	str	r3, [r7, #12]
 8001db2:	e00e      	b.n	8001dd2 <_ZN17MessageRecomposer19all_frames_receivedEv+0x2c>
        if(!frames_received_[i]) {
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4413      	add	r3, r2
 8001dba:	330d      	adds	r3, #13
 8001dbc:	781b      	ldrb	r3, [r3, #0]
 8001dbe:	f083 0301 	eor.w	r3, r3, #1
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <_ZN17MessageRecomposer19all_frames_receivedEv+0x26>
            return false;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e008      	b.n	8001dde <_ZN17MessageRecomposer19all_frames_receivedEv+0x38>
    for(int i=0; i<n_frames_; i++) {
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3301      	adds	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	68fa      	ldr	r2, [r7, #12]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	dbeb      	blt.n	8001db4 <_ZN17MessageRecomposer19all_frames_receivedEv+0xe>
        }
    }
    return true;
 8001ddc:	2301      	movs	r3, #1
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3714      	adds	r7, #20
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
	...

08001dec <_Z21PWM_set_high_durationP11TIM_TypeDefi>:

#define SYS_CORE_CLOCK_HZ 170000000.
#define SYS_CORE_CLOCK_MHZ 170.


void PWM_set_high_duration(TIM_TypeDef *timx, int us) {
 8001dec:	b5b0      	push	{r4, r5, r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
	timx->CCR1 = SYS_CORE_CLOCK_MHZ/(timx->PSC+1) * us;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe fba1 	bl	8000544 <__aeabi_ui2d>
 8001e02:	4602      	mov	r2, r0
 8001e04:	460b      	mov	r3, r1
 8001e06:	f04f 0000 	mov.w	r0, #0
 8001e0a:	490e      	ldr	r1, [pc, #56]	; (8001e44 <_Z21PWM_set_high_durationP11TIM_TypeDefi+0x58>)
 8001e0c:	f7fe fd3e 	bl	800088c <__aeabi_ddiv>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4614      	mov	r4, r2
 8001e16:	461d      	mov	r5, r3
 8001e18:	6838      	ldr	r0, [r7, #0]
 8001e1a:	f7fe fba3 	bl	8000564 <__aeabi_i2d>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	4620      	mov	r0, r4
 8001e24:	4629      	mov	r1, r5
 8001e26:	f7fe fc07 	bl	8000638 <__aeabi_dmul>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4619      	mov	r1, r3
 8001e32:	f7fe fec3 	bl	8000bbc <__aeabi_d2uiz>
 8001e36:	4602      	mov	r2, r0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001e3c:	bf00      	nop
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bdb0      	pop	{r4, r5, r7, pc}
 8001e44:	40654000 	.word	0x40654000

08001e48 <_Z12PWM_set_freqP11TIM_TypeDefi>:

void PWM_set_freq(TIM_TypeDef *timx, int hz) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
	int arr = SYS_CORE_CLOCK_HZ/((timx->PSC+1)*hz);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	3301      	adds	r3, #1
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	fb02 f303 	mul.w	r3, r2, r3
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fb70 	bl	8000544 <__aeabi_ui2d>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	a10b      	add	r1, pc, #44	; (adr r1, 8001e98 <_Z12PWM_set_freqP11TIM_TypeDefi+0x50>)
 8001e6a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e6e:	f7fe fd0d 	bl	800088c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe fe77 	bl	8000b6c <__aeabi_d2iz>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	60fb      	str	r3, [r7, #12]
	timx->CNT = 0;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	625a      	str	r2, [r3, #36]	; 0x24
	timx->ARR = arr;
 8001e88:	68fa      	ldr	r2, [r7, #12]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001e8e:	bf00      	nop
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	00000000 	.word	0x00000000
 8001e9c:	41a443fd 	.word	0x41a443fd

08001ea0 <_ZN7StepperC1Ev>:

Stepper::Stepper() {}
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	4a04      	ldr	r2, [pc, #16]	; (8001ebc <_ZN7StepperC1Ev+0x1c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	601a      	str	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	0800bab8 	.word	0x0800bab8

08001ec0 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>:

Stepper::Stepper(TIM_HandleTypeDef tim_handle_step, uint32_t tim_channel_step, GPIO_TypeDef *GPIOx_dir, uint16_t GPIO_Pin_dir) {
 8001ec0:	b084      	sub	sp, #16
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	f107 0014 	add.w	r0, r7, #20
 8001ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001ed2:	4a1b      	ldr	r2, [pc, #108]	; (8001f40 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft+0x80>)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->tim_handle = tim_handle_step;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3304      	adds	r3, #4
 8001edc:	f107 0114 	add.w	r1, r7, #20
 8001ee0:	224c      	movs	r2, #76	; 0x4c
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f008 ffc1 	bl	800ae6a <memcpy>
	this->GPIOx_dir = GPIOx_dir;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001eec:	651a      	str	r2, [r3, #80]	; 0x50
	this->GPIO_Pin_dir = GPIO_Pin_dir;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8001ef4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	this->tim_channel = tim_channel_step;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001efc:	659a      	str	r2, [r3, #88]	; 0x58
	HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f08:	2201      	movs	r2, #1
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	f005 ff5e 	bl	8007dcc <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&this->tim_handle, this->tim_channel);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	1d1a      	adds	r2, r3, #4
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	f007 f83c 	bl	8008f98 <HAL_TIM_PWM_Start>

	this->current_dir = 0;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	661a      	str	r2, [r3, #96]	; 0x60
	this->stopped = true;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f3a:	b004      	add	sp, #16
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	0800bab8 	.word	0x0800bab8

08001f44 <_ZN7Stepper19set_speed_step_freqEii>:

void Stepper::set_speed_step_freq(int hz, int dir) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
	if(hz < 15){// todo calculer freq min automatiquement
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	2b0e      	cmp	r3, #14
 8001f54:	dc12      	bgt.n	8001f7c <_ZN7Stepper19set_speed_step_freqEii+0x38>
		if(!stopped) {
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f5c:	f083 0301 	eor.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d036      	beq.n	8001fd4 <_ZN7Stepper19set_speed_step_freqEii+0x90>
			PWM_set_high_duration(this->tim_handle.Instance, 0);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2100      	movs	r1, #0
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff ff3d 	bl	8001dec <_Z21PWM_set_high_durationP11TIM_TypeDefi>
			stopped = true;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2201      	movs	r2, #1
 8001f76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		return;
 8001f7a:	e02b      	b.n	8001fd4 <_ZN7Stepper19set_speed_step_freqEii+0x90>
	}
	if(stopped) {
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d009      	beq.n	8001f9a <_ZN7Stepper19set_speed_step_freqEii+0x56>
		// stepper stopped, start pwm
		PWM_set_high_duration(this->tim_handle.Instance, 10);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	210a      	movs	r1, #10
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff2d 	bl	8001dec <_Z21PWM_set_high_durationP11TIM_TypeDefi>
		stopped = false;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
	PWM_set_freq(this->tim_handle.Instance, hz);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	68b9      	ldr	r1, [r7, #8]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff ff51 	bl	8001e48 <_Z12PWM_set_freqP11TIM_TypeDefi>

	if(dir==1) {
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d109      	bne.n	8001fc0 <_ZN7Stepper19set_speed_step_freqEii+0x7c>
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f005 ff07 	bl	8007dcc <HAL_GPIO_WritePin>
 8001fbe:	e00a      	b.n	8001fd6 <_ZN7Stepper19set_speed_step_freqEii+0x92>
	}else {
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_RESET);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f005 fefd 	bl	8007dcc <HAL_GPIO_WritePin>
 8001fd2:	e000      	b.n	8001fd6 <_ZN7Stepper19set_speed_step_freqEii+0x92>
		return;
 8001fd4:	bf00      	nop
	}
}
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_ZN7Stepper13set_speed_rpsEf>:

void Stepper::set_speed_rps(float rps) {
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	ed87 0a00 	vstr	s0, [r7]
	// 3200 steps per revolution
	int hz = rps * 3200.0;
 8001fe8:	6838      	ldr	r0, [r7, #0]
 8001fea:	f7fe facd 	bl	8000588 <__aeabi_f2d>
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <_ZN7Stepper13set_speed_rpsEf+0x54>)
 8001ff4:	f7fe fb20 	bl	8000638 <__aeabi_dmul>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4610      	mov	r0, r2
 8001ffe:	4619      	mov	r1, r3
 8002000:	f7fe fdb4 	bl	8000b6c <__aeabi_d2iz>
 8002004:	4603      	mov	r3, r0
 8002006:	60fb      	str	r3, [r7, #12]
	if(hz>=0) {
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db05      	blt.n	800201a <_ZN7Stepper13set_speed_rpsEf+0x3e>
		this->set_speed_step_freq(hz, 1);
 800200e:	2201      	movs	r2, #1
 8002010:	68f9      	ldr	r1, [r7, #12]
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ff96 	bl	8001f44 <_ZN7Stepper19set_speed_step_freqEii>
	}
	else {
		this->set_speed_step_freq(-hz, 0);
	}
}
 8002018:	e006      	b.n	8002028 <_ZN7Stepper13set_speed_rpsEf+0x4c>
		this->set_speed_step_freq(-hz, 0);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	425b      	negs	r3, r3
 800201e:	2200      	movs	r2, #0
 8002020:	4619      	mov	r1, r3
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f7ff ff8e 	bl	8001f44 <_ZN7Stepper19set_speed_step_freqEii>
}
 8002028:	bf00      	nop
 800202a:	3710      	adds	r7, #16
 800202c:	46bd      	mov	sp, r7
 800202e:	bd80      	pop	{r7, pc}
 8002030:	40a90000 	.word	0x40a90000

08002034 <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	4a04      	ldr	r2, [pc, #16]	; (8002050 <_ZN7StepperD1Ev+0x1c>)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4618      	mov	r0, r3
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr
 8002050:	0800bab8 	.word	0x0800bab8

08002054 <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
}
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ffe9 	bl	8002034 <_ZN7StepperD1Ev>
 8002062:	2164      	movs	r1, #100	; 0x64
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f008 f9c5 	bl	800a3f4 <_ZdlPvj>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	0000      	movs	r0, r0
	...

08002078 <_Z13set_loop_freqi>:

/**
 * @brief Little helper function to set the frequency of the loop
 * @param hz : the frequency of the loop
 */
void set_loop_freq(int hz) {
 8002078:	b5b0      	push	{r4, r5, r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    htim6.Instance->ARR = SYS_CORE_CLOCK_HZ / (htim6.Instance->PSC + 1) / hz;
 8002080:	4b17      	ldr	r3, [pc, #92]	; (80020e0 <_Z13set_loop_freqi+0x68>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002086:	3301      	adds	r3, #1
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fa5b 	bl	8000544 <__aeabi_ui2d>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	a111      	add	r1, pc, #68	; (adr r1, 80020d8 <_Z13set_loop_freqi+0x60>)
 8002094:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002098:	f7fe fbf8 	bl	800088c <__aeabi_ddiv>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4614      	mov	r4, r2
 80020a2:	461d      	mov	r5, r3
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f7fe fa5d 	bl	8000564 <__aeabi_i2d>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4620      	mov	r0, r4
 80020b0:	4629      	mov	r1, r5
 80020b2:	f7fe fbeb 	bl	800088c <__aeabi_ddiv>
 80020b6:	4602      	mov	r2, r0
 80020b8:	460b      	mov	r3, r1
 80020ba:	4909      	ldr	r1, [pc, #36]	; (80020e0 <_Z13set_loop_freqi+0x68>)
 80020bc:	680c      	ldr	r4, [r1, #0]
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	f7fe fd7b 	bl	8000bbc <__aeabi_d2uiz>
 80020c6:	4603      	mov	r3, r0
 80020c8:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bdb0      	pop	{r4, r5, r7, pc}
 80020d2:	bf00      	nop
 80020d4:	f3af 8000 	nop.w
 80020d8:	00000000 	.word	0x00000000
 80020dc:	41a443fd 	.word	0x41a443fd
 80020e0:	20000138 	.word	0x20000138

080020e4 <HAL_TIM_PeriodElapsedCallback>:
/**
  * @brief  Timer callback for main routine.
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM6) {
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a04      	ldr	r2, [pc, #16]	; (8002104 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d101      	bne.n	80020fa <HAL_TIM_PeriodElapsedCallback+0x16>
        loop();
 80020f6:	f000 fc4f 	bl	8002998 <_Z4loopv>
    }
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40001000 	.word	0x40001000

08002108 <HAL_FDCAN_RxFifo0Callback>:
  *         the configuration information for the specified FDCAN.
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b09a      	sub	sp, #104	; 0x68
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]

    // Attention !! Quand on met un breakpoint dans cette fonction, on ne reçoit plus que 2 messages au lieu du
    // bon nombre.

    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d057      	beq.n	80021cc <HAL_FDCAN_RxFifo0Callback+0xc4>
        /* Retrieve Rx messages from RX FIFO0 */
        FDCAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8];

        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 800211c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002120:	f107 0208 	add.w	r2, r7, #8
 8002124:	2140      	movs	r1, #64	; 0x40
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f005 f856 	bl	80071d8 <HAL_FDCAN_GetRxMessage>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	bf14      	ite	ne
 8002132:	2301      	movne	r3, #1
 8002134:	2300      	moveq	r3, #0
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d004      	beq.n	8002146 <HAL_FDCAN_RxFifo0Callback+0x3e>
            printf("error rx\n");
 800213c:	4825      	ldr	r0, [pc, #148]	; (80021d4 <HAL_FDCAN_RxFifo0Callback+0xcc>)
 800213e:	f008 fce5 	bl	800ab0c <puts>
            Error_Handler();
 8002142:	f000 fff9 	bl	8003138 <Error_Handler>
         * Pour le moment, on n'utilise pas de mutex ou de choses comme ça, donc il faut faire attention
         * à ne pas modifier trop de variables partagées, et de priviligier la modifcation de variables
         * de 32 bits ou moins (pour que leur modification soit une opération atomique)
         * */

        if (RxHeader.Identifier == CAN_ID_BASE_CMD_VEL) {
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	2b10      	cmp	r3, #16
 800214a:	d11e      	bne.n	800218a <HAL_FDCAN_RxFifo0Callback+0x82>
            msg_recomposer_cmd_vel.add_frame(RxData, RxHeader.DataLength);
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	b2da      	uxtb	r2, r3
 8002150:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002154:	4619      	mov	r1, r3
 8002156:	4820      	ldr	r0, [pc, #128]	; (80021d8 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 8002158:	f7ff fcd8 	bl	8001b0c <_ZN17MessageRecomposer9add_frameEPhh>

            if (msg_recomposer_cmd_vel.check_if_new_full_msg()) {
 800215c:	481e      	ldr	r0, [pc, #120]	; (80021d8 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 800215e:	f7ff fda1 	bl	8001ca4 <_ZN17MessageRecomposer21check_if_new_full_msgEv>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d031      	beq.n	80021cc <HAL_FDCAN_RxFifo0Callback+0xc4>
                std::string proto_msg = msg_recomposer_cmd_vel.get_full_msg();
 8002168:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800216c:	491a      	ldr	r1, [pc, #104]	; (80021d8 <HAL_FDCAN_RxFifo0Callback+0xd0>)
 800216e:	4618      	mov	r0, r3
 8002170:	f7ff fda4 	bl	8001cbc <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>
                on_receive_cmd_vel(proto_msg);
 8002174:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002178:	4618      	mov	r0, r3
 800217a:	f000 f831 	bl	80021e0 <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

            }
 800217e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002182:	4618      	mov	r0, r3
 8002184:	f008 f9e7 	bl	800a556 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                std::string proto_msg = msg_recomposer_config.get_full_msg();
                on_receive_config(proto_msg);
            }
        }
    }
}
 8002188:	e020      	b.n	80021cc <HAL_FDCAN_RxFifo0Callback+0xc4>
        else if (RxHeader.Identifier == CAN_ID_BASE_SET_CONFIG) {
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	2b13      	cmp	r3, #19
 800218e:	d11d      	bne.n	80021cc <HAL_FDCAN_RxFifo0Callback+0xc4>
            msg_recomposer_config.add_frame(RxData, RxHeader.DataLength);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002198:	4619      	mov	r1, r3
 800219a:	4810      	ldr	r0, [pc, #64]	; (80021dc <HAL_FDCAN_RxFifo0Callback+0xd4>)
 800219c:	f7ff fcb6 	bl	8001b0c <_ZN17MessageRecomposer9add_frameEPhh>
            if (msg_recomposer_config.check_if_new_full_msg()) {
 80021a0:	480e      	ldr	r0, [pc, #56]	; (80021dc <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80021a2:	f7ff fd7f 	bl	8001ca4 <_ZN17MessageRecomposer21check_if_new_full_msgEv>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00f      	beq.n	80021cc <HAL_FDCAN_RxFifo0Callback+0xc4>
                std::string proto_msg = msg_recomposer_config.get_full_msg();
 80021ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021b0:	490a      	ldr	r1, [pc, #40]	; (80021dc <HAL_FDCAN_RxFifo0Callback+0xd4>)
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fd82 	bl	8001cbc <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>
                on_receive_config(proto_msg);
 80021b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021bc:	4618      	mov	r0, r3
 80021be:	f000 f8f3 	bl	80023a8 <_Z17on_receive_configRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
            }
 80021c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021c6:	4618      	mov	r0, r3
 80021c8:	f008 f9c5 	bl	800a556 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 80021cc:	bf00      	nop
 80021ce:	3768      	adds	r7, #104	; 0x68
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	0800b77c 	.word	0x0800b77c
 80021d8:	2000050c 	.word	0x2000050c
 80021dc:	20000728 	.word	0x20000728

080021e0 <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:
/**
 * @brief Function to handle the received message from the CAN bus: it decodes the message and updates the
 * velocity command.
 * @param proto_msg : the received message (protobuf encoded)
 */
void on_receive_cmd_vel(const std::string &proto_msg) {
 80021e0:	b590      	push	{r4, r7, lr}
 80021e2:	b093      	sub	sp, #76	; 0x4c
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]

    // Allocate space for the decoded message.
    msgs_can_BaseVel ret_cmd_vel = msgs_can_BaseVel_init_zero;
 80021e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
 80021f8:	615a      	str	r2, [r3, #20]
    // Create a stream that reads from the buffer.
    pb_istream_t stream_ret = pb_istream_from_buffer((const unsigned char *) proto_msg.c_str(), proto_msg.size());
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f008 fa10 	bl	800a620 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002200:	4604      	mov	r4, r0
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f008 f9de 	bl	800a5c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8002208:	4602      	mov	r2, r0
 800220a:	f107 0320 	add.w	r3, r7, #32
 800220e:	4621      	mov	r1, r4
 8002210:	4618      	mov	r0, r3
 8002212:	f001 fbf3 	bl	80039fc <pb_istream_from_buffer>
    // Now we are ready to decode the message.
    if (!pb_decode(&stream_ret, msgs_can_BaseVel_fields, &ret_cmd_vel)) {
 8002216:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800221a:	f107 0320 	add.w	r3, r7, #32
 800221e:	4923      	ldr	r1, [pc, #140]	; (80022ac <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcc>)
 8002220:	4618      	mov	r0, r3
 8002222:	f002 fd25 	bl	8004c70 <pb_decode>
 8002226:	4603      	mov	r3, r0
 8002228:	f083 0301 	eor.w	r3, r3, #1
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6a>
        printf("Decoding failed: %s\n", PB_GET_ERROR(&stream_ret));
 8002232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
 8002238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223a:	e000      	b.n	800223e <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5e>
 800223c:	4b1c      	ldr	r3, [pc, #112]	; (80022b0 <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd0>)
 800223e:	4619      	mov	r1, r3
 8002240:	481c      	ldr	r0, [pc, #112]	; (80022b4 <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd4>)
 8002242:	f008 fbfd 	bl	800aa40 <iprintf>
        Error_Handler();
 8002246:	f000 ff77 	bl	8003138 <Error_Handler>
    }

    // Use message
    Vel cmd_vel = {ret_cmd_vel.x, ret_cmd_vel.y, ret_cmd_vel.theta};
 800224a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f99b 	bl	8000588 <__aeabi_f2d>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800225a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f993 	bl	8000588 <__aeabi_f2d>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800226a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe f98b 	bl	8000588 <__aeabi_f2d>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	e9c7 2306 	strd	r2, r3, [r7, #24]
    holo_drive.set_cmd_vel(cmd_vel);
 800227a:	ed97 5b02 	vldr	d5, [r7, #8]
 800227e:	ed97 6b04 	vldr	d6, [r7, #16]
 8002282:	ed97 7b06 	vldr	d7, [r7, #24]
 8002286:	eeb0 0a45 	vmov.f32	s0, s10
 800228a:	eef0 0a65 	vmov.f32	s1, s11
 800228e:	eeb0 1a46 	vmov.f32	s2, s12
 8002292:	eef0 1a66 	vmov.f32	s3, s13
 8002296:	eeb0 2a47 	vmov.f32	s4, s14
 800229a:	eef0 2a67 	vmov.f32	s5, s15
 800229e:	4806      	ldr	r0, [pc, #24]	; (80022b8 <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xd8>)
 80022a0:	f7ff f8e0 	bl	8001464 <_ZN15HolonomicDrive311set_cmd_velE3Vel>
}
 80022a4:	bf00      	nop
 80022a6:	374c      	adds	r7, #76	; 0x4c
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd90      	pop	{r4, r7, pc}
 80022ac:	0800bad4 	.word	0x0800bad4
 80022b0:	0800b788 	.word	0x0800b788
 80022b4:	0800b790 	.word	0x0800b790
 80022b8:	20000348 	.word	0x20000348

080022bc <_Z12transmit_vel3Vel>:

/**
 * @brief Function to send the current velocity of the robot on the CAN bus.
 * @param vel : the current velocity of the robot
 */
void transmit_vel(Vel vel) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b094      	sub	sp, #80	; 0x50
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	eeb0 5a40 	vmov.f32	s10, s0
 80022c6:	eef0 5a60 	vmov.f32	s11, s1
 80022ca:	eeb0 6a41 	vmov.f32	s12, s2
 80022ce:	eef0 6a61 	vmov.f32	s13, s3
 80022d2:	eeb0 7a42 	vmov.f32	s14, s4
 80022d6:	eef0 7a62 	vmov.f32	s15, s5
 80022da:	ed87 5b00 	vstr	d5, [r7]
 80022de:	ed87 6b02 	vstr	d6, [r7, #8]
 80022e2:	ed87 7b04 	vstr	d7, [r7, #16]

    // Init message
    msgs_can_BaseVel vel_proto = msgs_can_BaseVel_init_zero;
 80022e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]
 80022f4:	611a      	str	r2, [r3, #16]
 80022f6:	615a      	str	r2, [r3, #20]
    pb_ostream_t stream = pb_ostream_from_buffer(buffer_encode_tx_vel, sizeof(buffer_encode_tx_vel));
 80022f8:	f107 031c 	add.w	r3, r7, #28
 80022fc:	221e      	movs	r2, #30
 80022fe:	4927      	ldr	r1, [pc, #156]	; (800239c <_Z12transmit_vel3Vel+0xe0>)
 8002300:	4618      	mov	r0, r3
 8002302:	f003 f887 	bl	8005414 <pb_ostream_from_buffer>

    // Fill message
    vel_proto.x = vel.x;
 8002306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800230a:	4610      	mov	r0, r2
 800230c:	4619      	mov	r1, r3
 800230e:	f7fe fc75 	bl	8000bfc <__aeabi_d2f>
 8002312:	4603      	mov	r3, r0
 8002314:	637b      	str	r3, [r7, #52]	; 0x34
    vel_proto.y = vel.y;
 8002316:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	f7fe fc6d 	bl	8000bfc <__aeabi_d2f>
 8002322:	4603      	mov	r3, r0
 8002324:	63fb      	str	r3, [r7, #60]	; 0x3c
    vel_proto.theta = vel.theta;
 8002326:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe fc65 	bl	8000bfc <__aeabi_d2f>
 8002332:	4603      	mov	r3, r0
 8002334:	647b      	str	r3, [r7, #68]	; 0x44
    vel_proto.has_x = true;
 8002336:	2301      	movs	r3, #1
 8002338:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
    vel_proto.has_y = true;
 800233c:	2301      	movs	r3, #1
 800233e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
    vel_proto.has_theta = true;
 8002342:	2301      	movs	r3, #1
 8002344:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40

    // Encode message
    bool status = pb_encode(&stream, msgs_can_BaseVel_fields, &vel_proto);
 8002348:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800234c:	f107 031c 	add.w	r3, r7, #28
 8002350:	4913      	ldr	r1, [pc, #76]	; (80023a0 <_Z12transmit_vel3Vel+0xe4>)
 8002352:	4618      	mov	r0, r3
 8002354:	f003 fccb 	bl	8005cee <pb_encode>
 8002358:	4603      	mov	r3, r0
 800235a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t message_length = stream.bytes_written;
 800235e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002360:	64bb      	str	r3, [r7, #72]	; 0x48

    // Check for errors
    if (!status) {
 8002362:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002366:	f083 0301 	eor.w	r3, r3, #1
 800236a:	b2db      	uxtb	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <_Z12transmit_vel3Vel+0xb8>
        // TODO on peut récupérer un message d'erreur avec PB_GET_ERROR(&stream))
        Error_Handler();
 8002370:	f000 fee2 	bl	8003138 <Error_Handler>
    }

    // Send
    if (champi_can.send_msg(CAN_ID_BASE_CURRENT_VEL, (uint8_t *) buffer_encode_tx_vel, message_length) != 0) {
 8002374:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002376:	4a09      	ldr	r2, [pc, #36]	; (800239c <_Z12transmit_vel3Vel+0xe0>)
 8002378:	2111      	movs	r1, #17
 800237a:	480a      	ldr	r0, [pc, #40]	; (80023a4 <_Z12transmit_vel3Vel+0xe8>)
 800237c:	f7fe fd3c 	bl	8000df8 <_ZN9ChampiCan8send_msgEmPhm>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	bf14      	ite	ne
 8002386:	2301      	movne	r3, #1
 8002388:	2300      	moveq	r3, #0
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b00      	cmp	r3, #0
 800238e:	d001      	beq.n	8002394 <_Z12transmit_vel3Vel+0xd8>
        /* Transmission request Error */
        Error_Handler(); // TODO replace by wait_tx_ok, but for now it's better to know if an error occurs
 8002390:	f000 fed2 	bl	8003138 <Error_Handler>
    }
}
 8002394:	bf00      	nop
 8002396:	3750      	adds	r7, #80	; 0x50
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	200009e0 	.word	0x200009e0
 80023a0:	0800bad4 	.word	0x0800bad4
 80023a4:	200004e0 	.word	0x200004e0

080023a8 <_Z17on_receive_configRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void on_receive_config(const std::string &proto_msg) {
 80023a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80023ac:	b092      	sub	sp, #72	; 0x48
 80023ae:	af04      	add	r7, sp, #16
 80023b0:	6078      	str	r0, [r7, #4]

    // Allocate space for the decoded message.
    msgs_can_BaseConfig ret_config = msgs_can_BaseConfig_init_zero;
 80023b2:	f107 0318 	add.w	r3, r7, #24
 80023b6:	2220      	movs	r2, #32
 80023b8:	2100      	movs	r1, #0
 80023ba:	4618      	mov	r0, r3
 80023bc:	f008 fc86 	bl	800accc <memset>
    // Create a stream that reads from the buffer.
    pb_istream_t stream_ret = pb_istream_from_buffer((const unsigned char *) proto_msg.c_str(), proto_msg.size());
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f008 f92d 	bl	800a620 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80023c6:	4604      	mov	r4, r0
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f008 f8fb 	bl	800a5c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 80023ce:	4602      	mov	r2, r0
 80023d0:	f107 0308 	add.w	r3, r7, #8
 80023d4:	4621      	mov	r1, r4
 80023d6:	4618      	mov	r0, r3
 80023d8:	f001 fb10 	bl	80039fc <pb_istream_from_buffer>
    // Now we are ready to decode the message.
    if (!pb_decode(&stream_ret, msgs_can_BaseConfig_fields, &ret_config)) {
 80023dc:	f107 0218 	add.w	r2, r7, #24
 80023e0:	f107 0308 	add.w	r3, r7, #8
 80023e4:	4922      	ldr	r1, [pc, #136]	; (8002470 <_Z17on_receive_configRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xc8>)
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 fc42 	bl	8004c70 <pb_decode>
 80023ec:	4603      	mov	r3, r0
 80023ee:	f083 0301 	eor.w	r3, r3, #1
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <_Z17on_receive_configRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>
        Error_Handler();
 80023f8:	f000 fe9e 	bl	8003138 <Error_Handler>
    }

    // Check if the message is valid
    if (ret_config.has_base_radius && ret_config.has_wheel_radius && ret_config.has_max_accel && ret_config.has_cmd_vel_timeout) {
 80023fc:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002400:	2b00      	cmp	r3, #0
 8002402:	d030      	beq.n	8002466 <_Z17on_receive_configRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbe>
 8002404:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002408:	2b00      	cmp	r3, #0
 800240a:	d02c      	beq.n	8002466 <_Z17on_receive_configRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbe>
 800240c:	7e3b      	ldrb	r3, [r7, #24]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d029      	beq.n	8002466 <_Z17on_receive_configRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbe>
 8002412:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d025      	beq.n	8002466 <_Z17on_receive_configRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xbe>
        // Set the configuration
        holo_drive.set_config(ret_config.max_accel, ret_config.wheel_radius, ret_config.base_radius);
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f8b3 	bl	8000588 <__aeabi_f2d>
 8002422:	4604      	mov	r4, r0
 8002424:	460d      	mov	r5, r1
 8002426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f8ad 	bl	8000588 <__aeabi_f2d>
 800242e:	4680      	mov	r8, r0
 8002430:	4689      	mov	r9, r1
 8002432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f8a7 	bl	8000588 <__aeabi_f2d>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	ec43 2b12 	vmov	d2, r2, r3
 8002442:	ec49 8b11 	vmov	d1, r8, r9
 8002446:	ec45 4b10 	vmov	d0, r4, r5
 800244a:	480a      	ldr	r0, [pc, #40]	; (8002474 <_Z17on_receive_configRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xcc>)
 800244c:	f7ff fac0 	bl	80019d0 <_ZN15HolonomicDrive310set_configEddd>
        // Transmit it back to acknowledge the reception
        transmit_ret_config(ret_config);
 8002450:	466c      	mov	r4, sp
 8002452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002456:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002458:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800245c:	f107 0318 	add.w	r3, r7, #24
 8002460:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002462:	f000 f809 	bl	8002478 <_Z19transmit_ret_config20_msgs_can_BaseConfig>
    }
}
 8002466:	bf00      	nop
 8002468:	3738      	adds	r7, #56	; 0x38
 800246a:	46bd      	mov	sp, r7
 800246c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002470:	0800bb04 	.word	0x0800bb04
 8002474:	20000348 	.word	0x20000348

08002478 <_Z19transmit_ret_config20_msgs_can_BaseConfig>:

void transmit_ret_config(msgs_can_BaseConfig ret_config) {
 8002478:	b084      	sub	sp, #16
 800247a:	b580      	push	{r7, lr}
 800247c:	b090      	sub	sp, #64	; 0x40
 800247e:	af00      	add	r7, sp, #0
 8002480:	f107 0c48 	add.w	ip, r7, #72	; 0x48
 8002484:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // Init stream
    uint8_t buff[30]; // todo 30, c'est large, on peut peut-être réduire.
    pb_ostream_t stream = pb_ostream_from_buffer(buff, sizeof(buff));
 8002488:	1d3b      	adds	r3, r7, #4
 800248a:	f107 0118 	add.w	r1, r7, #24
 800248e:	221e      	movs	r2, #30
 8002490:	4618      	mov	r0, r3
 8002492:	f002 ffbf 	bl	8005414 <pb_ostream_from_buffer>

    // Encode message
    bool status = pb_encode(&stream, msgs_can_BaseConfig_fields, &ret_config);
 8002496:	1d3b      	adds	r3, r7, #4
 8002498:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800249c:	4914      	ldr	r1, [pc, #80]	; (80024f0 <_Z19transmit_ret_config20_msgs_can_BaseConfig+0x78>)
 800249e:	4618      	mov	r0, r3
 80024a0:	f003 fc25 	bl	8005cee <pb_encode>
 80024a4:	4603      	mov	r3, r0
 80024a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    size_t message_length = stream.bytes_written;
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	63bb      	str	r3, [r7, #56]	; 0x38

    // Check for errors
    if (!status) {
 80024ae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024b2:	f083 0301 	eor.w	r3, r3, #1
 80024b6:	b2db      	uxtb	r3, r3
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d001      	beq.n	80024c0 <_Z19transmit_ret_config20_msgs_can_BaseConfig+0x48>
        // TODO on peut récupérer un message d'erreur avec PB_GET_ERROR(&stream))
        Error_Handler();
 80024bc:	f000 fe3c 	bl	8003138 <Error_Handler>
    }

    // Send
    if (champi_can.send_msg(CAN_ID_BASE_RET_CONFIG, (uint8_t *) buff, message_length) != 0) {
 80024c0:	f107 0218 	add.w	r2, r7, #24
 80024c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024c6:	2114      	movs	r1, #20
 80024c8:	480a      	ldr	r0, [pc, #40]	; (80024f4 <_Z19transmit_ret_config20_msgs_can_BaseConfig+0x7c>)
 80024ca:	f7fe fc95 	bl	8000df8 <_ZN9ChampiCan8send_msgEmPhm>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf14      	ite	ne
 80024d4:	2301      	movne	r3, #1
 80024d6:	2300      	moveq	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <_Z19transmit_ret_config20_msgs_can_BaseConfig+0x6a>
        /* Transmission request Error */
        Error_Handler();
 80024de:	f000 fe2b 	bl	8003138 <Error_Handler>
    }
}
 80024e2:	bf00      	nop
 80024e4:	3740      	adds	r7, #64	; 0x40
 80024e6:	46bd      	mov	sp, r7
 80024e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80024ec:	b004      	add	sp, #16
 80024ee:	4770      	bx	lr
 80024f0:	0800bb04 	.word	0x0800bb04
 80024f4:	200004e0 	.word	0x200004e0

080024f8 <_Z10wait_tx_okv>:
 * @brief Fonction qui attend que le l'envoi de données sur le CAN fonctionne. Ca envoie un message de test
 * à répétition jusqu'à ce que ça fonctionne.
 * Also blinks the built-in LED at 2Hz.
 * TODO replace BASE_TEST by status message ?
 */
void wait_tx_ok() {
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b086      	sub	sp, #24
 80024fc:	af00      	add	r7, sp, #0
    uint8_t buff[3] = {0x01, 0x02, 0x03};
 80024fe:	4a23      	ldr	r2, [pc, #140]	; (800258c <_Z10wait_tx_okv+0x94>)
 8002500:	1d3b      	adds	r3, r7, #4
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	4611      	mov	r1, r2
 8002506:	8019      	strh	r1, [r3, #0]
 8002508:	3302      	adds	r3, #2
 800250a:	0c12      	lsrs	r2, r2, #16
 800250c:	701a      	strb	r2, [r3, #0]

    uint32_t ret = champi_can.send_msg(CAN_ID_BASE_TEST, (uint8_t *) buff, 3);
 800250e:	1d3a      	adds	r2, r7, #4
 8002510:	2303      	movs	r3, #3
 8002512:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002516:	481e      	ldr	r0, [pc, #120]	; (8002590 <_Z10wait_tx_okv+0x98>)
 8002518:	f7fe fc6e 	bl	8000df8 <_ZN9ChampiCan8send_msgEmPhm>
 800251c:	4603      	mov	r3, r0
 800251e:	617b      	str	r3, [r7, #20]

    /* We got an error, try again until it works. Also blink the LED at 2Hz */
    // Get led value to restore it after the loop
    GPIO_PinState led_state = HAL_GPIO_ReadPin(Built_in_LED_GREEN_GPIO_Port, Built_in_LED_GREEN_Pin);
 8002520:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002524:	481b      	ldr	r0, [pc, #108]	; (8002594 <_Z10wait_tx_okv+0x9c>)
 8002526:	f005 fc39 	bl	8007d9c <HAL_GPIO_ReadPin>
 800252a:	4603      	mov	r3, r0
 800252c:	73fb      	strb	r3, [r7, #15]

    unsigned long last_time = HAL_GetTick();
 800252e:	f004 fb4f 	bl	8006bd0 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]
    while(ret != 0) {
 8002534:	e01b      	b.n	800256e <_Z10wait_tx_okv+0x76>
        ret = champi_can.send_msg(CAN_ID_BASE_TEST, (uint8_t *) buff, 3);
 8002536:	1d3a      	adds	r2, r7, #4
 8002538:	2303      	movs	r3, #3
 800253a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800253e:	4814      	ldr	r0, [pc, #80]	; (8002590 <_Z10wait_tx_okv+0x98>)
 8002540:	f7fe fc5a 	bl	8000df8 <_ZN9ChampiCan8send_msgEmPhm>
 8002544:	4603      	mov	r3, r0
 8002546:	617b      	str	r3, [r7, #20]
        HAL_Delay(1);
 8002548:	2001      	movs	r0, #1
 800254a:	f004 fb4d 	bl	8006be8 <HAL_Delay>
        unsigned long now = HAL_GetTick();
 800254e:	f004 fb3f 	bl	8006bd0 <HAL_GetTick>
 8002552:	60b8      	str	r0, [r7, #8]
        if(now - last_time > 500) {
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800255e:	d906      	bls.n	800256e <_Z10wait_tx_okv+0x76>
            last_time = now;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	613b      	str	r3, [r7, #16]
            HAL_GPIO_TogglePin(Built_in_LED_GREEN_GPIO_Port, Built_in_LED_GREEN_Pin); // The built-in LED
 8002564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002568:	480a      	ldr	r0, [pc, #40]	; (8002594 <_Z10wait_tx_okv+0x9c>)
 800256a:	f005 fc47 	bl	8007dfc <HAL_GPIO_TogglePin>
    while(ret != 0) {
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1e0      	bne.n	8002536 <_Z10wait_tx_okv+0x3e>
        }
    }
    // Restore the LED state
    HAL_GPIO_WritePin(Built_in_LED_GREEN_GPIO_Port, Built_in_LED_GREEN_Pin, led_state);
 8002574:	7bfb      	ldrb	r3, [r7, #15]
 8002576:	461a      	mov	r2, r3
 8002578:	f44f 7180 	mov.w	r1, #256	; 0x100
 800257c:	4805      	ldr	r0, [pc, #20]	; (8002594 <_Z10wait_tx_okv+0x9c>)
 800257e:	f005 fc25 	bl	8007dcc <HAL_GPIO_WritePin>
}
 8002582:	bf00      	nop
 8002584:	3718      	adds	r7, #24
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	0800b7a8 	.word	0x0800b7a8
 8002590:	200004e0 	.word	0x200004e0
 8002594:	48000400 	.word	0x48000400

08002598 <_ZN15HolonomicDrive3aSERKS_>:
	double x = 0;
    double y = 0;
    double theta = 0;
};

class HolonomicDrive3 {
 8002598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	1d1a      	adds	r2, r3, #4
 80025a6:	2502      	movs	r5, #2
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	1d1c      	adds	r4, r3, #4
 80025ac:	4616      	mov	r6, r2
 80025ae:	e006      	b.n	80025be <_ZN15HolonomicDrive3aSERKS_+0x26>
 80025b0:	4621      	mov	r1, r4
 80025b2:	4630      	mov	r0, r6
 80025b4:	f7fe fe6a 	bl	800128c <_ZN7StepperaSERKS_>
 80025b8:	3664      	adds	r6, #100	; 0x64
 80025ba:	3464      	adds	r4, #100	; 0x64
 80025bc:	3d01      	subs	r5, #1
 80025be:	2d00      	cmp	r5, #0
 80025c0:	daf6      	bge.n	80025b0 <_ZN15HolonomicDrive3aSERKS_+0x18>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	e9c1 234c 	strd	r2, r3, [r1, #304]	; 0x130
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	e9d3 234e 	ldrd	r2, r3, [r3, #312]	; 0x138
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	e9c1 234e 	strd	r2, r3, [r1, #312]	; 0x138
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f502 74a0 	add.w	r4, r2, #320	; 0x140
 80025e2:	f503 75a0 	add.w	r5, r3, #320	; 0x140
 80025e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80025e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80025ee:	e884 0003 	stmia.w	r4, {r0, r1}
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f503 71ac 	add.w	r1, r3, #344	; 0x158
 80025f8:	2202      	movs	r2, #2
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8002600:	e006      	b.n	8002610 <_ZN15HolonomicDrive3aSERKS_+0x78>
 8002602:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002606:	e9c1 4500 	strd	r4, r5, [r1]
 800260a:	3108      	adds	r1, #8
 800260c:	3308      	adds	r3, #8
 800260e:	3a01      	subs	r2, #1
 8002610:	2a00      	cmp	r2, #0
 8002612:	daf6      	bge.n	8002602 <_ZN15HolonomicDrive3aSERKS_+0x6a>
 8002614:	687a      	ldr	r2, [r7, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	f502 74b8 	add.w	r4, r2, #368	; 0x170
 800261c:	f503 75b8 	add.w	r5, r3, #368	; 0x170
 8002620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002624:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002628:	e884 0003 	stmia.w	r4, {r0, r1}
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	e9d3 2362 	ldrd	r2, r3, [r3, #392]	; 0x188
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	e9c1 2362 	strd	r2, r3, [r1, #392]	; 0x188
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	f893 2190 	ldrb.w	r2, [r3, #400]	; 0x190
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800264e <_ZN9ChampiCanaSERKS_>:
#ifndef INC_CHAMPICAN_H_
#define INC_CHAMPICAN_H_

#include "stm32g4xx_hal.h"

class ChampiCan {
 800264e:	b4b0      	push	{r4, r5, r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	6039      	str	r1, [r7, #0]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	f102 0408 	add.w	r4, r2, #8
 8002668:	f103 0508 	add.w	r5, r3, #8
 800266c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800266e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002674:	682b      	ldr	r3, [r5, #0]
 8002676:	6023      	str	r3, [r4, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4618      	mov	r0, r3
 800267c:	370c      	adds	r7, #12
 800267e:	46bd      	mov	sp, r7
 8002680:	bcb0      	pop	{r4, r5, r7}
 8002682:	4770      	bx	lr

08002684 <_ZN17MessageRecomposeraSERKS_>:
 */
#define MAX_LENGTH_MSG 20

#include "string"

class MessageRecomposer {
 8002684:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	609a      	str	r2, [r3, #8]
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	7b1a      	ldrb	r2, [r3, #12]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	731a      	strb	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f103 010d 	add.w	r1, r3, #13
 80026ac:	2213      	movs	r2, #19
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	330d      	adds	r3, #13
 80026b2:	e004      	b.n	80026be <_ZN17MessageRecomposeraSERKS_+0x3a>
 80026b4:	7818      	ldrb	r0, [r3, #0]
 80026b6:	7008      	strb	r0, [r1, #0]
 80026b8:	3101      	adds	r1, #1
 80026ba:	3301      	adds	r3, #1
 80026bc:	3a01      	subs	r2, #1
 80026be:	2a00      	cmp	r2, #0
 80026c0:	daf8      	bge.n	80026b4 <_ZN17MessageRecomposeraSERKS_+0x30>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f103 0224 	add.w	r2, r3, #36	; 0x24
 80026c8:	2513      	movs	r5, #19
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	f103 0424 	add.w	r4, r3, #36	; 0x24
 80026d0:	4616      	mov	r6, r2
 80026d2:	e006      	b.n	80026e2 <_ZN17MessageRecomposeraSERKS_+0x5e>
 80026d4:	4621      	mov	r1, r4
 80026d6:	4630      	mov	r0, r6
 80026d8:	f007 ff43 	bl	800a562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80026dc:	3618      	adds	r6, #24
 80026de:	3418      	adds	r4, #24
 80026e0:	3d01      	subs	r5, #1
 80026e2:	2d00      	cmp	r5, #0
 80026e4:	daf6      	bge.n	80026d4 <_ZN17MessageRecomposeraSERKS_+0x50>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f503 7201 	add.w	r2, r3, #516	; 0x204
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80026f2:	4619      	mov	r1, r3
 80026f4:	4610      	mov	r0, r2
 80026f6:	f007 ff34 	bl	800a562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002704 <_ZN11ChampiStateaSERKS_>:
#include "can_ids.hpp"

#define LIMIT_LENGTH_MSG 20 // max nb of frames per message. TODO uniformize and document ChampiCAN protocol


class ChampiState {
 8002704:	b4b0      	push	{r4, r5, r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
 800270e:	687a      	ldr	r2, [r7, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	1d14      	adds	r4, r2, #4
 8002714:	1d1d      	adds	r5, r3, #4
 8002716:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002718:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271a:	682b      	ldr	r3, [r5, #0]
 800271c:	6023      	str	r3, [r4, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	699a      	ldr	r2, [r3, #24]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	619a      	str	r2, [r3, #24]
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	61da      	str	r2, [r3, #28]
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6a1a      	ldr	r2, [r3, #32]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	621a      	str	r2, [r3, #32]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800273c:	2277      	movs	r2, #119	; 0x77
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	3324      	adds	r3, #36	; 0x24
 8002742:	e004      	b.n	800274e <_ZN11ChampiStateaSERKS_+0x4a>
 8002744:	7818      	ldrb	r0, [r3, #0]
 8002746:	7008      	strb	r0, [r1, #0]
 8002748:	3101      	adds	r1, #1
 800274a:	3301      	adds	r3, #1
 800274c:	3a01      	subs	r2, #1
 800274e:	2a00      	cmp	r2, #0
 8002750:	daf8      	bge.n	8002744 <_ZN11ChampiStateaSERKS_+0x40>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bcb0      	pop	{r4, r5, r7}
 800275c:	4770      	bx	lr
	...

08002760 <_Z5setupv>:
// ===================================== SETUP AND LOOP ============================================

/**
 * @brief Setup function.
 */
void setup() {
 8002760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002762:	f6ad 0d1c 	subw	sp, sp, #2076	; 0x81c
 8002766:	af14      	add	r7, sp, #80	; 0x50

    stepper0 = Stepper(htim8, TIM_CHANNEL_1, GPIOA, GPIO_PIN_4);
 8002768:	4e7e      	ldr	r6, [pc, #504]	; (8002964 <_Z5setupv+0x204>)
 800276a:	f107 0c04 	add.w	ip, r7, #4
 800276e:	2310      	movs	r3, #16
 8002770:	9312      	str	r3, [sp, #72]	; 0x48
 8002772:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002776:	9311      	str	r3, [sp, #68]	; 0x44
 8002778:	2300      	movs	r3, #0
 800277a:	9310      	str	r3, [sp, #64]	; 0x40
 800277c:	466d      	mov	r5, sp
 800277e:	f106 040c 	add.w	r4, r6, #12
 8002782:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002784:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800278a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800278c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800278e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002792:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002796:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800279a:	4660      	mov	r0, ip
 800279c:	f7ff fb90 	bl	8001ec0 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 80027a0:	1d3b      	adds	r3, r7, #4
 80027a2:	4619      	mov	r1, r3
 80027a4:	4870      	ldr	r0, [pc, #448]	; (8002968 <_Z5setupv+0x208>)
 80027a6:	f7fe fd71 	bl	800128c <_ZN7StepperaSERKS_>
 80027aa:	1d3b      	adds	r3, r7, #4
 80027ac:	4618      	mov	r0, r3
 80027ae:	f7ff fc41 	bl	8002034 <_ZN7StepperD1Ev>
    stepper1 = Stepper(htim1, TIM_CHANNEL_1, GPIOA, GPIO_PIN_0);
 80027b2:	4e6e      	ldr	r6, [pc, #440]	; (800296c <_Z5setupv+0x20c>)
 80027b4:	f107 0c68 	add.w	ip, r7, #104	; 0x68
 80027b8:	2301      	movs	r3, #1
 80027ba:	9312      	str	r3, [sp, #72]	; 0x48
 80027bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80027c0:	9311      	str	r3, [sp, #68]	; 0x44
 80027c2:	2300      	movs	r3, #0
 80027c4:	9310      	str	r3, [sp, #64]	; 0x40
 80027c6:	466d      	mov	r5, sp
 80027c8:	f106 040c 	add.w	r4, r6, #12
 80027cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80027d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80027d8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80027dc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80027e0:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80027e4:	4660      	mov	r0, ip
 80027e6:	f7ff fb6b 	bl	8001ec0 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 80027ea:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027ee:	4619      	mov	r1, r3
 80027f0:	485f      	ldr	r0, [pc, #380]	; (8002970 <_Z5setupv+0x210>)
 80027f2:	f7fe fd4b 	bl	800128c <_ZN7StepperaSERKS_>
 80027f6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7ff fc1a 	bl	8002034 <_ZN7StepperD1Ev>
    stepper2 = Stepper(htim15, TIM_CHANNEL_1, GPIOA, GPIO_PIN_1);
 8002800:	4e5c      	ldr	r6, [pc, #368]	; (8002974 <_Z5setupv+0x214>)
 8002802:	f107 0ccc 	add.w	ip, r7, #204	; 0xcc
 8002806:	2302      	movs	r3, #2
 8002808:	9312      	str	r3, [sp, #72]	; 0x48
 800280a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800280e:	9311      	str	r3, [sp, #68]	; 0x44
 8002810:	2300      	movs	r3, #0
 8002812:	9310      	str	r3, [sp, #64]	; 0x40
 8002814:	466d      	mov	r5, sp
 8002816:	f106 040c 	add.w	r4, r6, #12
 800281a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800281c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800281e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002820:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002826:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800282a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800282e:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002832:	4660      	mov	r0, ip
 8002834:	f7ff fb44 	bl	8001ec0 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 8002838:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800283c:	4619      	mov	r1, r3
 800283e:	484e      	ldr	r0, [pc, #312]	; (8002978 <_Z5setupv+0x218>)
 8002840:	f7fe fd24 	bl	800128c <_ZN7StepperaSERKS_>
 8002844:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fbf3 	bl	8002034 <_ZN7StepperD1Ev>

    holo_drive = HolonomicDrive3(stepper0, stepper1, stepper2);
 800284e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8002852:	4b49      	ldr	r3, [pc, #292]	; (8002978 <_Z5setupv+0x218>)
 8002854:	4a46      	ldr	r2, [pc, #280]	; (8002970 <_Z5setupv+0x210>)
 8002856:	4944      	ldr	r1, [pc, #272]	; (8002968 <_Z5setupv+0x208>)
 8002858:	f7fe fd42 	bl	80012e0 <_ZN15HolonomicDrive3C1ERK7StepperS2_S2_>
 800285c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002860:	4619      	mov	r1, r3
 8002862:	4846      	ldr	r0, [pc, #280]	; (800297c <_Z5setupv+0x21c>)
 8002864:	f7ff fe98 	bl	8002598 <_ZN15HolonomicDrive3aSERKS_>
 8002868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff f8fb 	bl	8001a68 <_ZN15HolonomicDrive3D1Ev>

    champi_can = ChampiCan(&hfdcan1);
 8002872:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002876:	4942      	ldr	r1, [pc, #264]	; (8002980 <_Z5setupv+0x220>)
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fa0f 	bl	8000c9c <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>
 800287e:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 8002882:	4619      	mov	r1, r3
 8002884:	483f      	ldr	r0, [pc, #252]	; (8002984 <_Z5setupv+0x224>)
 8002886:	f7ff fee2 	bl	800264e <_ZN9ChampiCanaSERKS_>
 800288a:	f507 7332 	add.w	r3, r7, #712	; 0x2c8
 800288e:	4618      	mov	r0, r3
 8002890:	f7fe fb4c 	bl	8000f2c <_ZN9ChampiCanD1Ev>
    msg_recomposer_cmd_vel = MessageRecomposer();
 8002894:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff f917 	bl	8001acc <_ZN17MessageRecomposerC1Ev>
 800289e:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 80028a2:	4619      	mov	r1, r3
 80028a4:	4838      	ldr	r0, [pc, #224]	; (8002988 <_Z5setupv+0x228>)
 80028a6:	f7ff feed 	bl	8002684 <_ZN17MessageRecomposeraSERKS_>
 80028aa:	f507 733d 	add.w	r3, r7, #756	; 0x2f4
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7ff fa18 	bl	8001ce4 <_ZN17MessageRecomposerD1Ev>
    msg_recomposer_config = MessageRecomposer();
 80028b4:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff f907 	bl	8001acc <_ZN17MessageRecomposerC1Ev>
 80028be:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80028c2:	4619      	mov	r1, r3
 80028c4:	4831      	ldr	r0, [pc, #196]	; (800298c <_Z5setupv+0x22c>)
 80028c6:	f7ff fedd 	bl	8002684 <_ZN17MessageRecomposeraSERKS_>
 80028ca:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fa08 	bl	8001ce4 <_ZN17MessageRecomposerD1Ev>

    if (champi_can.start() != 0) {
 80028d4:	482b      	ldr	r0, [pc, #172]	; (8002984 <_Z5setupv+0x224>)
 80028d6:	f7fe fa2b 	bl	8000d30 <_ZN9ChampiCan5startEv>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bf14      	ite	ne
 80028e0:	2301      	movne	r3, #1
 80028e2:	2300      	moveq	r3, #0
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <_Z5setupv+0x18e>
        // TODO: On a jamais rencontré cette erreur.
        Error_Handler();
 80028ea:	f000 fc25 	bl	8003138 <Error_Handler>
    }

    champi_state = ChampiState(&champi_can, 500);
 80028ee:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 80028f2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80028f6:	4923      	ldr	r1, [pc, #140]	; (8002984 <_Z5setupv+0x224>)
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fe fb4d 	bl	8000f98 <_ZN11ChampiStateC1EP9ChampiCanm>
 80028fe:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 8002902:	4619      	mov	r1, r3
 8002904:	4822      	ldr	r0, [pc, #136]	; (8002990 <_Z5setupv+0x230>)
 8002906:	f7ff fefd 	bl	8002704 <_ZN11ChampiStateaSERKS_>
 800290a:	f207 732c 	addw	r3, r7, #1836	; 0x72c
 800290e:	4618      	mov	r0, r3
 8002910:	f7fe fb6a 	bl	8000fe8 <_ZN11ChampiStateD1Ev>

    // This is required: when the Raspberry Pi starts up, transmit CAN frames returns error.
    // TODO vérifier que ça fonctionne.
    wait_tx_ok();
 8002914:	f7ff fdf0 	bl	80024f8 <_Z10wait_tx_okv>

    champi_state.report_status(msgs_can_Status_StatusType_INIT, msgs_can_Status_ErrorType_NONE);
 8002918:	2200      	movs	r2, #0
 800291a:	2101      	movs	r1, #1
 800291c:	481c      	ldr	r0, [pc, #112]	; (8002990 <_Z5setupv+0x230>)
 800291e:	f7fe fb83 	bl	8001028 <_ZN11ChampiState13report_statusE27_msgs_can_Status_StatusType26_msgs_can_Status_ErrorType>

    // Wait for the configuration message
    while (!holo_drive.new_config_received()) {
 8002922:	e005      	b.n	8002930 <_Z5setupv+0x1d0>
        HAL_Delay(100);
 8002924:	2064      	movs	r0, #100	; 0x64
 8002926:	f004 f95f 	bl	8006be8 <HAL_Delay>
        // Send status to the CAN bus regularly
        champi_state.spin_once();
 800292a:	4819      	ldr	r0, [pc, #100]	; (8002990 <_Z5setupv+0x230>)
 800292c:	f7fe fbc6 	bl	80010bc <_ZN11ChampiState9spin_onceEv>
    while (!holo_drive.new_config_received()) {
 8002930:	4812      	ldr	r0, [pc, #72]	; (800297c <_Z5setupv+0x21c>)
 8002932:	f7ff f88b 	bl	8001a4c <_ZN15HolonomicDrive313is_configuredEv>
 8002936:	4603      	mov	r3, r0
 8002938:	f083 0301 	eor.w	r3, r3, #1
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d1f0      	bne.n	8002924 <_Z5setupv+0x1c4>
    }

    champi_state.report_status(msgs_can_Status_StatusType_OK, msgs_can_Status_ErrorType_NONE);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	4812      	ldr	r0, [pc, #72]	; (8002990 <_Z5setupv+0x230>)
 8002948:	f7fe fb6e 	bl	8001028 <_ZN11ChampiState13report_statusE27_msgs_can_Status_StatusType26_msgs_can_Status_ErrorType>

    // Ge got everything, start the main loop
    set_loop_freq(100);
 800294c:	2064      	movs	r0, #100	; 0x64
 800294e:	f7ff fb93 	bl	8002078 <_Z13set_loop_freqi>
    HAL_TIM_Base_Start_IT(&htim6);
 8002952:	4810      	ldr	r0, [pc, #64]	; (8002994 <_Z5setupv+0x234>)
 8002954:	f006 fa5e 	bl	8008e14 <HAL_TIM_Base_Start_IT>
}
 8002958:	bf00      	nop
 800295a:	f207 77cc 	addw	r7, r7, #1996	; 0x7cc
 800295e:	46bd      	mov	sp, r7
 8002960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002962:	bf00      	nop
 8002964:	20000184 	.word	0x20000184
 8002968:	2000021c 	.word	0x2000021c
 800296c:	200000ec 	.word	0x200000ec
 8002970:	20000280 	.word	0x20000280
 8002974:	200001d0 	.word	0x200001d0
 8002978:	200002e4 	.word	0x200002e4
 800297c:	20000348 	.word	0x20000348
 8002980:	20000088 	.word	0x20000088
 8002984:	200004e0 	.word	0x200004e0
 8002988:	2000050c 	.word	0x2000050c
 800298c:	20000728 	.word	0x20000728
 8002990:	20000944 	.word	0x20000944
 8002994:	20000138 	.word	0x20000138

08002998 <_Z4loopv>:

/**
 * @brief Main loop.
 */
void loop() {
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0

    holo_drive.spin_once_motors_control();
 800299e:	4819      	ldr	r0, [pc, #100]	; (8002a04 <_Z4loopv+0x6c>)
 80029a0:	f7fe fe7c 	bl	800169c <_ZN15HolonomicDrive324spin_once_motors_controlEv>

    transmit_vel(holo_drive.get_current_vel());
 80029a4:	4817      	ldr	r0, [pc, #92]	; (8002a04 <_Z4loopv+0x6c>)
 80029a6:	f7fe ff41 	bl	800182c <_ZN15HolonomicDrive315get_current_velEv>
 80029aa:	eeb0 5a40 	vmov.f32	s10, s0
 80029ae:	eef0 5a60 	vmov.f32	s11, s1
 80029b2:	eeb0 6a41 	vmov.f32	s12, s2
 80029b6:	eef0 6a61 	vmov.f32	s13, s3
 80029ba:	eeb0 7a42 	vmov.f32	s14, s4
 80029be:	eef0 7a62 	vmov.f32	s15, s5
 80029c2:	ed87 5b00 	vstr	d5, [r7]
 80029c6:	ed87 6b02 	vstr	d6, [r7, #8]
 80029ca:	ed87 7b04 	vstr	d7, [r7, #16]
 80029ce:	ed97 5b00 	vldr	d5, [r7]
 80029d2:	ed97 6b02 	vldr	d6, [r7, #8]
 80029d6:	ed97 7b04 	vldr	d7, [r7, #16]
 80029da:	eeb0 0a45 	vmov.f32	s0, s10
 80029de:	eef0 0a65 	vmov.f32	s1, s11
 80029e2:	eeb0 1a46 	vmov.f32	s2, s12
 80029e6:	eef0 1a66 	vmov.f32	s3, s13
 80029ea:	eeb0 2a47 	vmov.f32	s4, s14
 80029ee:	eef0 2a67 	vmov.f32	s5, s15
 80029f2:	f7ff fc63 	bl	80022bc <_Z12transmit_vel3Vel>

    champi_state.spin_once();
 80029f6:	4804      	ldr	r0, [pc, #16]	; (8002a08 <_Z4loopv+0x70>)
 80029f8:	f7fe fb60 	bl	80010bc <_ZN11ChampiState9spin_onceEv>
}
 80029fc:	bf00      	nop
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	20000348 	.word	0x20000348
 8002a08:	20000944 	.word	0x20000944

08002a0c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8002a10:	f004 f879 	bl	8006b06 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8002a14:	f000 f80f 	bl	8002a36 <_Z18SystemClock_Configv>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8002a18:	f000 fb2a 	bl	8003070 <_ZL12MX_GPIO_Initv>
    MX_TIM1_Init();
 8002a1c:	f000 f8ac 	bl	8002b78 <_ZL12MX_TIM1_Initv>
    MX_TIM8_Init();
 8002a20:	f000 f9ba 	bl	8002d98 <_ZL12MX_TIM8_Initv>
    MX_TIM6_Init();
 8002a24:	f000 f978 	bl	8002d18 <_ZL12MX_TIM6_Initv>
    MX_FDCAN1_Init();
 8002a28:	f000 f85a 	bl	8002ae0 <_ZL14MX_FDCAN1_Initv>
    MX_TIM15_Init();
 8002a2c:	f000 fa84 	bl	8002f38 <_ZL13MX_TIM15_Initv>
    /* USER CODE BEGIN 2 */

    setup();
 8002a30:	f7ff fe96 	bl	8002760 <_Z5setupv>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */

    while (true) {
 8002a34:	e7fe      	b.n	8002a34 <main+0x28>

08002a36 <_Z18SystemClock_Configv>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b094      	sub	sp, #80	; 0x50
 8002a3a:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a3c:	f107 0318 	add.w	r3, r7, #24
 8002a40:	2238      	movs	r2, #56	; 0x38
 8002a42:	2100      	movs	r1, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	f008 f941 	bl	800accc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a4a:	1d3b      	adds	r3, r7, #4
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	605a      	str	r2, [r3, #4]
 8002a52:	609a      	str	r2, [r3, #8]
 8002a54:	60da      	str	r2, [r3, #12]
 8002a56:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8002a58:	2000      	movs	r0, #0
 8002a5a:	f005 f9e9 	bl	8007e30 <HAL_PWREx_ControlVoltageScaling>

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	61bb      	str	r3, [r7, #24]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a68:	2340      	movs	r3, #64	; 0x40
 8002a6a:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	637b      	str	r3, [r7, #52]	; 0x34
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a70:	2302      	movs	r3, #2
 8002a72:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002a74:	2304      	movs	r3, #4
 8002a76:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLN = 85;
 8002a78:	2355      	movs	r3, #85	; 0x55
 8002a7a:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002a80:	2302      	movs	r3, #2
 8002a82:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002a84:	2302      	movs	r3, #2
 8002a86:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002a88:	f107 0318 	add.w	r3, r7, #24
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f005 fa83 	bl	8007f98 <HAL_RCC_OscConfig>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <_Z18SystemClock_Configv+0x70>
        Error_Handler();
 8002aa2:	f000 fb49 	bl	8003138 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002aa6:	230f      	movs	r3, #15
 8002aa8:	607b      	str	r3, [r7, #4]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	617b      	str	r3, [r7, #20]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002aba:	1d3b      	adds	r3, r7, #4
 8002abc:	2104      	movs	r1, #4
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f005 fd7c 	bl	80085bc <HAL_RCC_ClockConfig>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	bf14      	ite	ne
 8002aca:	2301      	movne	r3, #1
 8002acc:	2300      	moveq	r3, #0
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d001      	beq.n	8002ad8 <_Z18SystemClock_Configv+0xa2>
        Error_Handler();
 8002ad4:	f000 fb30 	bl	8003138 <Error_Handler>
    }
}
 8002ad8:	bf00      	nop
 8002ada:	3750      	adds	r7, #80	; 0x50
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <_ZL14MX_FDCAN1_Initv>:
/**
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void) {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
    /* USER CODE END FDCAN1_Init 0 */

    /* USER CODE BEGIN FDCAN1_Init 1 */

    /* USER CODE END FDCAN1_Init 1 */
    hfdcan1.Instance = FDCAN1;
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002ae6:	4a23      	ldr	r2, [pc, #140]	; (8002b74 <_ZL14MX_FDCAN1_Initv+0x94>)
 8002ae8:	601a      	str	r2, [r3, #0]
    hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002aea:	4b21      	ldr	r3, [pc, #132]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	605a      	str	r2, [r3, #4]
    hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002af0:	4b1f      	ldr	r3, [pc, #124]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
    hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	60da      	str	r2, [r3, #12]
    hfdcan1.Init.AutoRetransmission = ENABLE;
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002afe:	2201      	movs	r2, #1
 8002b00:	741a      	strb	r2, [r3, #16]
    hfdcan1.Init.TransmitPause = DISABLE;
 8002b02:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	745a      	strb	r2, [r3, #17]
    hfdcan1.Init.ProtocolException = DISABLE;
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	749a      	strb	r2, [r3, #18]
    hfdcan1.Init.NominalPrescaler = 10;
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b10:	220a      	movs	r2, #10
 8002b12:	615a      	str	r2, [r3, #20]
    hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002b14:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b16:	2201      	movs	r2, #1
 8002b18:	619a      	str	r2, [r3, #24]
    hfdcan1.Init.NominalTimeSeg1 = 14;
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b1c:	220e      	movs	r2, #14
 8002b1e:	61da      	str	r2, [r3, #28]
    hfdcan1.Init.NominalTimeSeg2 = 2;
 8002b20:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b22:	2202      	movs	r2, #2
 8002b24:	621a      	str	r2, [r3, #32]
    hfdcan1.Init.DataPrescaler = 10;
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b28:	220a      	movs	r2, #10
 8002b2a:	625a      	str	r2, [r3, #36]	; 0x24
    hfdcan1.Init.DataSyncJumpWidth = 1;
 8002b2c:	4b10      	ldr	r3, [pc, #64]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	629a      	str	r2, [r3, #40]	; 0x28
    hfdcan1.Init.DataTimeSeg1 = 14;
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b34:	220e      	movs	r2, #14
 8002b36:	62da      	str	r2, [r3, #44]	; 0x2c
    hfdcan1.Init.DataTimeSeg2 = 2;
 8002b38:	4b0d      	ldr	r3, [pc, #52]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30
    hfdcan1.Init.StdFiltersNbr = 0;
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	635a      	str	r2, [r3, #52]	; 0x34
    hfdcan1.Init.ExtFiltersNbr = 0;
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	639a      	str	r2, [r3, #56]	; 0x38
    hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002b4a:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 8002b50:	4807      	ldr	r0, [pc, #28]	; (8002b70 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002b52:	f004 f97b 	bl	8006e4c <HAL_FDCAN_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf14      	ite	ne
 8002b5c:	2301      	movne	r3, #1
 8002b5e:	2300      	moveq	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <_ZL14MX_FDCAN1_Initv+0x8a>
        Error_Handler();
 8002b66:	f000 fae7 	bl	8003138 <Error_Handler>
    }
    /* USER CODE BEGIN FDCAN1_Init 2 */

    /* USER CODE END FDCAN1_Init 2 */

}
 8002b6a:	bf00      	nop
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000088 	.word	0x20000088
 8002b74:	40006400 	.word	0x40006400

08002b78 <_ZL12MX_TIM1_Initv>:
/**
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void) {
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b09c      	sub	sp, #112	; 0x70
 8002b7c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b7e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	605a      	str	r2, [r3, #4]
 8002b88:	609a      	str	r2, [r3, #8]
 8002b8a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b90:	2200      	movs	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
 8002b94:	605a      	str	r2, [r3, #4]
 8002b96:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002b98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	605a      	str	r2, [r3, #4]
 8002ba2:	609a      	str	r2, [r3, #8]
 8002ba4:	60da      	str	r2, [r3, #12]
 8002ba6:	611a      	str	r2, [r3, #16]
 8002ba8:	615a      	str	r2, [r3, #20]
 8002baa:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002bac:	1d3b      	adds	r3, r7, #4
 8002bae:	2234      	movs	r2, #52	; 0x34
 8002bb0:	2100      	movs	r1, #0
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f008 f88a 	bl	800accc <memset>

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8002bb8:	4b55      	ldr	r3, [pc, #340]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002bba:	4a56      	ldr	r2, [pc, #344]	; (8002d14 <_ZL12MX_TIM1_Initv+0x19c>)
 8002bbc:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 260;
 8002bbe:	4b54      	ldr	r3, [pc, #336]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002bc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002bc4:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bc6:	4b52      	ldr	r3, [pc, #328]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 65535;
 8002bcc:	4b50      	ldr	r3, [pc, #320]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bd2:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd4:	4b4e      	ldr	r3, [pc, #312]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8002bda:	4b4d      	ldr	r3, [pc, #308]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002be0:	4b4b      	ldr	r3, [pc, #300]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8002be6:	484a      	ldr	r0, [pc, #296]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002be8:	f006 f8bc 	bl	8008d64 <HAL_TIM_Base_Init>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	bf14      	ite	ne
 8002bf2:	2301      	movne	r3, #1
 8002bf4:	2300      	moveq	r3, #0
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <_ZL12MX_TIM1_Initv+0x88>
        Error_Handler();
 8002bfc:	f000 fa9c 	bl	8003138 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c04:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8002c06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4840      	ldr	r0, [pc, #256]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002c0e:	f006 fd27 	bl	8009660 <HAL_TIM_ConfigClockSource>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	bf14      	ite	ne
 8002c18:	2301      	movne	r3, #1
 8002c1a:	2300      	moveq	r3, #0
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d001      	beq.n	8002c26 <_ZL12MX_TIM1_Initv+0xae>
        Error_Handler();
 8002c22:	f000 fa89 	bl	8003138 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8002c26:	483a      	ldr	r0, [pc, #232]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002c28:	f006 f95e 	bl	8008ee8 <HAL_TIM_PWM_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	bf14      	ite	ne
 8002c32:	2301      	movne	r3, #1
 8002c34:	2300      	moveq	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <_ZL12MX_TIM1_Initv+0xc8>
        Error_Handler();
 8002c3c:	f000 fa7c 	bl	8003138 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c40:	2300      	movs	r3, #0
 8002c42:	657b      	str	r3, [r7, #84]	; 0x54
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002c44:	2300      	movs	r3, #0
 8002c46:	65bb      	str	r3, [r7, #88]	; 0x58
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8002c4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002c50:	4619      	mov	r1, r3
 8002c52:	482f      	ldr	r0, [pc, #188]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002c54:	f007 fa7a 	bl	800a14c <HAL_TIMEx_MasterConfigSynchronization>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	bf14      	ite	ne
 8002c5e:	2301      	movne	r3, #1
 8002c60:	2300      	moveq	r3, #0
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <_ZL12MX_TIM1_Initv+0xf4>
        Error_Handler();
 8002c68:	f000 fa66 	bl	8003138 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002c6c:	2360      	movs	r3, #96	; 0x60
 8002c6e:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.Pulse = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002c74:	2300      	movs	r3, #0
 8002c76:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	647b      	str	r3, [r7, #68]	; 0x44
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	64bb      	str	r3, [r7, #72]	; 0x48
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c80:	2300      	movs	r3, #0
 8002c82:	64fb      	str	r3, [r7, #76]	; 0x4c
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c84:	2300      	movs	r3, #0
 8002c86:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002c88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	4619      	mov	r1, r3
 8002c90:	481f      	ldr	r0, [pc, #124]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002c92:	f006 fbd1 	bl	8009438 <HAL_TIM_PWM_ConfigChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	bf14      	ite	ne
 8002c9c:	2301      	movne	r3, #1
 8002c9e:	2300      	moveq	r3, #0
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <_ZL12MX_TIM1_Initv+0x132>
        Error_Handler();
 8002ca6:	f000 fa47 	bl	8003138 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002caa:	2300      	movs	r3, #0
 8002cac:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002cbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cc2:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.BreakFilter = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002cd0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cd4:	62bb      	str	r3, [r7, #40]	; 0x28
    sBreakDeadTimeConfig.Break2Filter = 0;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK) {
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	480a      	ldr	r0, [pc, #40]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002ce8:	f007 fab2 	bl	800a250 <HAL_TIMEx_ConfigBreakDeadTime>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	bf14      	ite	ne
 8002cf2:	2301      	movne	r3, #1
 8002cf4:	2300      	moveq	r3, #0
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d001      	beq.n	8002d00 <_ZL12MX_TIM1_Initv+0x188>
        Error_Handler();
 8002cfc:	f000 fa1c 	bl	8003138 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
    HAL_TIM_MspPostInit(&htim1);
 8002d00:	4803      	ldr	r0, [pc, #12]	; (8002d10 <_ZL12MX_TIM1_Initv+0x198>)
 8002d02:	f003 fd3f 	bl	8006784 <HAL_TIM_MspPostInit>

}
 8002d06:	bf00      	nop
 8002d08:	3770      	adds	r7, #112	; 0x70
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	200000ec 	.word	0x200000ec
 8002d14:	40012c00 	.word	0x40012c00

08002d18 <_ZL12MX_TIM6_Initv>:
/**
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM6_Init 0 */

    /* USER CODE END TIM6_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d1e:	1d3b      	adds	r3, r7, #4
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]

    /* USER CODE BEGIN TIM6_Init 1 */

    /* USER CODE END TIM6_Init 1 */
    htim6.Instance = TIM6;
 8002d28:	4b19      	ldr	r3, [pc, #100]	; (8002d90 <_ZL12MX_TIM6_Initv+0x78>)
 8002d2a:	4a1a      	ldr	r2, [pc, #104]	; (8002d94 <_ZL12MX_TIM6_Initv+0x7c>)
 8002d2c:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 100;
 8002d2e:	4b18      	ldr	r3, [pc, #96]	; (8002d90 <_ZL12MX_TIM6_Initv+0x78>)
 8002d30:	2264      	movs	r2, #100	; 0x64
 8002d32:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d34:	4b16      	ldr	r3, [pc, #88]	; (8002d90 <_ZL12MX_TIM6_Initv+0x78>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = 65535;
 8002d3a:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <_ZL12MX_TIM6_Initv+0x78>)
 8002d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d40:	60da      	str	r2, [r3, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <_ZL12MX_TIM6_Initv+0x78>)
 8002d44:	2200      	movs	r2, #0
 8002d46:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8002d48:	4811      	ldr	r0, [pc, #68]	; (8002d90 <_ZL12MX_TIM6_Initv+0x78>)
 8002d4a:	f006 f80b 	bl	8008d64 <HAL_TIM_Base_Init>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	bf14      	ite	ne
 8002d54:	2301      	movne	r3, #1
 8002d56:	2300      	moveq	r3, #0
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <_ZL12MX_TIM6_Initv+0x4a>
        Error_Handler();
 8002d5e:	f000 f9eb 	bl	8003138 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d62:	2300      	movs	r3, #0
 8002d64:	607b      	str	r3, [r7, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4808      	ldr	r0, [pc, #32]	; (8002d90 <_ZL12MX_TIM6_Initv+0x78>)
 8002d70:	f007 f9ec 	bl	800a14c <HAL_TIMEx_MasterConfigSynchronization>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	bf14      	ite	ne
 8002d7a:	2301      	movne	r3, #1
 8002d7c:	2300      	moveq	r3, #0
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d001      	beq.n	8002d88 <_ZL12MX_TIM6_Initv+0x70>
        Error_Handler();
 8002d84:	f000 f9d8 	bl	8003138 <Error_Handler>
    }
    /* USER CODE BEGIN TIM6_Init 2 */

    /* USER CODE END TIM6_Init 2 */

}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000138 	.word	0x20000138
 8002d94:	40001000 	.word	0x40001000

08002d98 <_ZL12MX_TIM8_Initv>:
/**
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void) {
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b09c      	sub	sp, #112	; 0x70
 8002d9c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM8_Init 0 */

    /* USER CODE END TIM8_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d9e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002da2:	2200      	movs	r2, #0
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	605a      	str	r2, [r3, #4]
 8002da8:	609a      	str	r2, [r3, #8]
 8002daa:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	605a      	str	r2, [r3, #4]
 8002db6:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002db8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
 8002dc8:	615a      	str	r2, [r3, #20]
 8002dca:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dcc:	1d3b      	adds	r3, r7, #4
 8002dce:	2234      	movs	r2, #52	; 0x34
 8002dd0:	2100      	movs	r1, #0
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f007 ff7a 	bl	800accc <memset>

    /* USER CODE BEGIN TIM8_Init 1 */

    /* USER CODE END TIM8_Init 1 */
    htim8.Instance = TIM8;
 8002dd8:	4b55      	ldr	r3, [pc, #340]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002dda:	4a56      	ldr	r2, [pc, #344]	; (8002f34 <_ZL12MX_TIM8_Initv+0x19c>)
 8002ddc:	601a      	str	r2, [r3, #0]
    htim8.Init.Prescaler = 260;
 8002dde:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002de0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002de4:	605a      	str	r2, [r3, #4]
    htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de6:	4b52      	ldr	r3, [pc, #328]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	609a      	str	r2, [r3, #8]
    htim8.Init.Period = 65535;
 8002dec:	4b50      	ldr	r3, [pc, #320]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002df2:	60da      	str	r2, [r3, #12]
    htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df4:	4b4e      	ldr	r3, [pc, #312]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	611a      	str	r2, [r3, #16]
    htim8.Init.RepetitionCounter = 0;
 8002dfa:	4b4d      	ldr	r3, [pc, #308]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	615a      	str	r2, [r3, #20]
    htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e00:	4b4b      	ldr	r3, [pc, #300]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002e02:	2200      	movs	r2, #0
 8002e04:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8002e06:	484a      	ldr	r0, [pc, #296]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002e08:	f005 ffac 	bl	8008d64 <HAL_TIM_Base_Init>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf14      	ite	ne
 8002e12:	2301      	movne	r3, #1
 8002e14:	2300      	moveq	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d001      	beq.n	8002e20 <_ZL12MX_TIM8_Initv+0x88>
        Error_Handler();
 8002e1c:	f000 f98c 	bl	8003138 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e24:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8002e26:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4840      	ldr	r0, [pc, #256]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002e2e:	f006 fc17 	bl	8009660 <HAL_TIM_ConfigClockSource>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <_ZL12MX_TIM8_Initv+0xae>
        Error_Handler();
 8002e42:	f000 f979 	bl	8003138 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8002e46:	483a      	ldr	r0, [pc, #232]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002e48:	f006 f84e 	bl	8008ee8 <HAL_TIM_PWM_Init>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	bf14      	ite	ne
 8002e52:	2301      	movne	r3, #1
 8002e54:	2300      	moveq	r3, #0
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <_ZL12MX_TIM8_Initv+0xc8>
        Error_Handler();
 8002e5c:	f000 f96c 	bl	8003138 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e60:	2300      	movs	r3, #0
 8002e62:	657b      	str	r3, [r7, #84]	; 0x54
    sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	65bb      	str	r3, [r7, #88]	; 0x58
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK) {
 8002e6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002e70:	4619      	mov	r1, r3
 8002e72:	482f      	ldr	r0, [pc, #188]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002e74:	f007 f96a 	bl	800a14c <HAL_TIMEx_MasterConfigSynchronization>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf14      	ite	ne
 8002e7e:	2301      	movne	r3, #1
 8002e80:	2300      	moveq	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d001      	beq.n	8002e8c <_ZL12MX_TIM8_Initv+0xf4>
        Error_Handler();
 8002e88:	f000 f956 	bl	8003138 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e8c:	2360      	movs	r3, #96	; 0x60
 8002e8e:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.Pulse = 0;
 8002e90:	2300      	movs	r3, #0
 8002e92:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e94:	2300      	movs	r3, #0
 8002e96:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	647b      	str	r3, [r7, #68]	; 0x44
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	64bb      	str	r3, [r7, #72]	; 0x48
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002ea8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002eac:	2200      	movs	r2, #0
 8002eae:	4619      	mov	r1, r3
 8002eb0:	481f      	ldr	r0, [pc, #124]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002eb2:	f006 fac1 	bl	8009438 <HAL_TIM_PWM_ConfigChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf14      	ite	ne
 8002ebc:	2301      	movne	r3, #1
 8002ebe:	2300      	moveq	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <_ZL12MX_TIM8_Initv+0x132>
        Error_Handler();
 8002ec6:	f000 f937 	bl	8003138 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime = 0;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ede:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ee2:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.BreakFilter = 0;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	623b      	str	r3, [r7, #32]
    sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
    sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ef0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ef4:	62bb      	str	r3, [r7, #40]	; 0x28
    sBreakDeadTimeConfig.Break2Filter = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002efa:	2300      	movs	r3, #0
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002efe:	2300      	movs	r3, #0
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK) {
 8002f02:	1d3b      	adds	r3, r7, #4
 8002f04:	4619      	mov	r1, r3
 8002f06:	480a      	ldr	r0, [pc, #40]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002f08:	f007 f9a2 	bl	800a250 <HAL_TIMEx_ConfigBreakDeadTime>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	bf14      	ite	ne
 8002f12:	2301      	movne	r3, #1
 8002f14:	2300      	moveq	r3, #0
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <_ZL12MX_TIM8_Initv+0x188>
        Error_Handler();
 8002f1c:	f000 f90c 	bl	8003138 <Error_Handler>
    }
    /* USER CODE BEGIN TIM8_Init 2 */

    /* USER CODE END TIM8_Init 2 */
    HAL_TIM_MspPostInit(&htim8);
 8002f20:	4803      	ldr	r0, [pc, #12]	; (8002f30 <_ZL12MX_TIM8_Initv+0x198>)
 8002f22:	f003 fc2f 	bl	8006784 <HAL_TIM_MspPostInit>

}
 8002f26:	bf00      	nop
 8002f28:	3770      	adds	r7, #112	; 0x70
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	20000184 	.word	0x20000184
 8002f34:	40013400 	.word	0x40013400

08002f38 <_ZL13MX_TIM15_Initv>:
/**
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void) {
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b098      	sub	sp, #96	; 0x60
 8002f3c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM15_Init 0 */

    /* USER CODE END TIM15_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	609a      	str	r2, [r3, #8]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8002f4a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002f4e:	2200      	movs	r2, #0
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	605a      	str	r2, [r3, #4]
 8002f54:	609a      	str	r2, [r3, #8]
 8002f56:	60da      	str	r2, [r3, #12]
 8002f58:	611a      	str	r2, [r3, #16]
 8002f5a:	615a      	str	r2, [r3, #20]
 8002f5c:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002f5e:	1d3b      	adds	r3, r7, #4
 8002f60:	2234      	movs	r2, #52	; 0x34
 8002f62:	2100      	movs	r1, #0
 8002f64:	4618      	mov	r0, r3
 8002f66:	f007 feb1 	bl	800accc <memset>

    /* USER CODE BEGIN TIM15_Init 1 */

    /* USER CODE END TIM15_Init 1 */
    htim15.Instance = TIM15;
 8002f6a:	4b3f      	ldr	r3, [pc, #252]	; (8003068 <_ZL13MX_TIM15_Initv+0x130>)
 8002f6c:	4a3f      	ldr	r2, [pc, #252]	; (800306c <_ZL13MX_TIM15_Initv+0x134>)
 8002f6e:	601a      	str	r2, [r3, #0]
    htim15.Init.Prescaler = 260;
 8002f70:	4b3d      	ldr	r3, [pc, #244]	; (8003068 <_ZL13MX_TIM15_Initv+0x130>)
 8002f72:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002f76:	605a      	str	r2, [r3, #4]
    htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f78:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <_ZL13MX_TIM15_Initv+0x130>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	609a      	str	r2, [r3, #8]
    htim15.Init.Period = 65535;
 8002f7e:	4b3a      	ldr	r3, [pc, #232]	; (8003068 <_ZL13MX_TIM15_Initv+0x130>)
 8002f80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f84:	60da      	str	r2, [r3, #12]
    htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f86:	4b38      	ldr	r3, [pc, #224]	; (8003068 <_ZL13MX_TIM15_Initv+0x130>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	611a      	str	r2, [r3, #16]
    htim15.Init.RepetitionCounter = 0;
 8002f8c:	4b36      	ldr	r3, [pc, #216]	; (8003068 <_ZL13MX_TIM15_Initv+0x130>)
 8002f8e:	2200      	movs	r2, #0
 8002f90:	615a      	str	r2, [r3, #20]
    htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f92:	4b35      	ldr	r3, [pc, #212]	; (8003068 <_ZL13MX_TIM15_Initv+0x130>)
 8002f94:	2200      	movs	r2, #0
 8002f96:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim15) != HAL_OK) {
 8002f98:	4833      	ldr	r0, [pc, #204]	; (8003068 <_ZL13MX_TIM15_Initv+0x130>)
 8002f9a:	f005 ffa5 	bl	8008ee8 <HAL_TIM_PWM_Init>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	bf14      	ite	ne
 8002fa4:	2301      	movne	r3, #1
 8002fa6:	2300      	moveq	r3, #0
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d001      	beq.n	8002fb2 <_ZL13MX_TIM15_Initv+0x7a>
        Error_Handler();
 8002fae:	f000 f8c3 	bl	8003138 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	657b      	str	r3, [r7, #84]	; 0x54
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK) {
 8002fba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4829      	ldr	r0, [pc, #164]	; (8003068 <_ZL13MX_TIM15_Initv+0x130>)
 8002fc2:	f007 f8c3 	bl	800a14c <HAL_TIMEx_MasterConfigSynchronization>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <_ZL13MX_TIM15_Initv+0xa2>
        Error_Handler();
 8002fd6:	f000 f8af 	bl	8003138 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fda:	2360      	movs	r3, #96	; 0x60
 8002fdc:	63bb      	str	r3, [r7, #56]	; 0x38
    sConfigOC.Pulse = 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	63fb      	str	r3, [r7, #60]	; 0x3c
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	643b      	str	r3, [r7, #64]	; 0x40
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	647b      	str	r3, [r7, #68]	; 0x44
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	64bb      	str	r3, [r7, #72]	; 0x48
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8002ff6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	481a      	ldr	r0, [pc, #104]	; (8003068 <_ZL13MX_TIM15_Initv+0x130>)
 8003000:	f006 fa1a 	bl	8009438 <HAL_TIM_PWM_ConfigChannel>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf14      	ite	ne
 800300a:	2301      	movne	r3, #1
 800300c:	2300      	moveq	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <_ZL13MX_TIM15_Initv+0xe0>
        Error_Handler();
 8003014:	f000 f890 	bl	8003138 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003018:	2300      	movs	r3, #0
 800301a:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime = 0;
 8003024:	2300      	movs	r3, #0
 8003026:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800302c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003030:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.BreakFilter = 0;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003036:	2300      	movs	r3, #0
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK) {
 800303a:	1d3b      	adds	r3, r7, #4
 800303c:	4619      	mov	r1, r3
 800303e:	480a      	ldr	r0, [pc, #40]	; (8003068 <_ZL13MX_TIM15_Initv+0x130>)
 8003040:	f007 f906 	bl	800a250 <HAL_TIMEx_ConfigBreakDeadTime>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	bf14      	ite	ne
 800304a:	2301      	movne	r3, #1
 800304c:	2300      	moveq	r3, #0
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <_ZL13MX_TIM15_Initv+0x120>
        Error_Handler();
 8003054:	f000 f870 	bl	8003138 <Error_Handler>
    }
    /* USER CODE BEGIN TIM15_Init 2 */

    /* USER CODE END TIM15_Init 2 */
    HAL_TIM_MspPostInit(&htim15);
 8003058:	4803      	ldr	r0, [pc, #12]	; (8003068 <_ZL13MX_TIM15_Initv+0x130>)
 800305a:	f003 fb93 	bl	8006784 <HAL_TIM_MspPostInit>

}
 800305e:	bf00      	nop
 8003060:	3760      	adds	r7, #96	; 0x60
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	200001d0 	.word	0x200001d0
 800306c:	40014000 	.word	0x40014000

08003070 <_ZL12MX_GPIO_Initv>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003076:	f107 030c 	add.w	r3, r7, #12
 800307a:	2200      	movs	r2, #0
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	605a      	str	r2, [r3, #4]
 8003080:	609a      	str	r2, [r3, #8]
 8003082:	60da      	str	r2, [r3, #12]
 8003084:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003086:	4b2a      	ldr	r3, [pc, #168]	; (8003130 <_ZL12MX_GPIO_Initv+0xc0>)
 8003088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308a:	4a29      	ldr	r2, [pc, #164]	; (8003130 <_ZL12MX_GPIO_Initv+0xc0>)
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003092:	4b27      	ldr	r3, [pc, #156]	; (8003130 <_ZL12MX_GPIO_Initv+0xc0>)
 8003094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800309e:	4b24      	ldr	r3, [pc, #144]	; (8003130 <_ZL12MX_GPIO_Initv+0xc0>)
 80030a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a2:	4a23      	ldr	r2, [pc, #140]	; (8003130 <_ZL12MX_GPIO_Initv+0xc0>)
 80030a4:	f043 0302 	orr.w	r3, r3, #2
 80030a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030aa:	4b21      	ldr	r3, [pc, #132]	; (8003130 <_ZL12MX_GPIO_Initv+0xc0>)
 80030ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	607b      	str	r3, [r7, #4]
 80030b4:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_7, GPIO_PIN_RESET);
 80030b6:	2200      	movs	r2, #0
 80030b8:	2193      	movs	r1, #147	; 0x93
 80030ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030be:	f004 fe85 	bl	8007dcc <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(Built_in_LED_GREEN_GPIO_Port, Built_in_LED_GREEN_Pin, GPIO_PIN_RESET);
 80030c2:	2200      	movs	r2, #0
 80030c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030c8:	481a      	ldr	r0, [pc, #104]	; (8003134 <_ZL12MX_GPIO_Initv+0xc4>)
 80030ca:	f004 fe7f 	bl	8007dcc <HAL_GPIO_WritePin>

    /*Configure GPIO pins : PA0 PA1 PA4 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4;
 80030ce:	2313      	movs	r3, #19
 80030d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030d2:	2301      	movs	r3, #1
 80030d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d6:	2300      	movs	r3, #0
 80030d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030de:	f107 030c 	add.w	r3, r7, #12
 80030e2:	4619      	mov	r1, r3
 80030e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030e8:	f004 fcd6 	bl	8007a98 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA7 */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80030ec:	2380      	movs	r3, #128	; 0x80
 80030ee:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80030f0:	2311      	movs	r3, #17
 80030f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f8:	2300      	movs	r3, #0
 80030fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030fc:	f107 030c 	add.w	r3, r7, #12
 8003100:	4619      	mov	r1, r3
 8003102:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003106:	f004 fcc7 	bl	8007a98 <HAL_GPIO_Init>

    /*Configure GPIO pin : Built_in_LED_GREEN_Pin */
    GPIO_InitStruct.Pin = Built_in_LED_GREEN_Pin;
 800310a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800310e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003110:	2301      	movs	r3, #1
 8003112:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(Built_in_LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800311c:	f107 030c 	add.w	r3, r7, #12
 8003120:	4619      	mov	r1, r3
 8003122:	4804      	ldr	r0, [pc, #16]	; (8003134 <_ZL12MX_GPIO_Initv+0xc4>)
 8003124:	f004 fcb8 	bl	8007a98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003128:	bf00      	nop
 800312a:	3720      	adds	r7, #32
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	40021000 	.word	0x40021000
 8003134:	48000400 	.word	0x48000400

08003138 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8003138:	b580      	push	{r7, lr}
 800313a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800313c:	b672      	cpsid	i
}
 800313e:	bf00      	nop
     * pour résoudre les problèmes, mais je pense que le mieux pour l'instant, c'est de tout bloquer pour
     * être sûr de voir le problème.
     */
    while (true) {
        // Blink 1Hz
        HAL_GPIO_TogglePin(Built_in_LED_GREEN_GPIO_Port, Built_in_LED_GREEN_Pin);
 8003140:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003144:	4803      	ldr	r0, [pc, #12]	; (8003154 <Error_Handler+0x1c>)
 8003146:	f004 fe59 	bl	8007dfc <HAL_GPIO_TogglePin>
        HAL_Delay(1000);
 800314a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800314e:	f003 fd4b 	bl	8006be8 <HAL_Delay>
        HAL_GPIO_TogglePin(Built_in_LED_GREEN_GPIO_Port, Built_in_LED_GREEN_Pin);
 8003152:	e7f5      	b.n	8003140 <Error_Handler+0x8>
 8003154:	48000400 	.word	0x48000400

08003158 <_Z41__static_initialization_and_destruction_0ii>:
    }
    /* USER CODE END Error_Handler_Debug */
}
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d11c      	bne.n	80031a2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800316e:	4293      	cmp	r3, r2
 8003170:	d117      	bne.n	80031a2 <_Z41__static_initialization_and_destruction_0ii+0x4a>
Stepper stepper0;
 8003172:	481e      	ldr	r0, [pc, #120]	; (80031ec <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8003174:	f7fe fe94 	bl	8001ea0 <_ZN7StepperC1Ev>
Stepper stepper1;
 8003178:	481d      	ldr	r0, [pc, #116]	; (80031f0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 800317a:	f7fe fe91 	bl	8001ea0 <_ZN7StepperC1Ev>
Stepper stepper2;
 800317e:	481d      	ldr	r0, [pc, #116]	; (80031f4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8003180:	f7fe fe8e 	bl	8001ea0 <_ZN7StepperC1Ev>
HolonomicDrive3 holo_drive;
 8003184:	481c      	ldr	r0, [pc, #112]	; (80031f8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8003186:	f7fe f923 	bl	80013d0 <_ZN15HolonomicDrive3C1Ev>
ChampiCan champi_can;
 800318a:	481c      	ldr	r0, [pc, #112]	; (80031fc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 800318c:	f7fd fdb8 	bl	8000d00 <_ZN9ChampiCanC1Ev>
MessageRecomposer msg_recomposer_cmd_vel;
 8003190:	481b      	ldr	r0, [pc, #108]	; (8003200 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8003192:	f7fe fc9b 	bl	8001acc <_ZN17MessageRecomposerC1Ev>
MessageRecomposer msg_recomposer_config;
 8003196:	481b      	ldr	r0, [pc, #108]	; (8003204 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8003198:	f7fe fc98 	bl	8001acc <_ZN17MessageRecomposerC1Ev>
ChampiState champi_state;
 800319c:	481a      	ldr	r0, [pc, #104]	; (8003208 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 800319e:	f7fd fee5 	bl	8000f6c <_ZN11ChampiStateC1Ev>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d11c      	bne.n	80031e2 <_Z41__static_initialization_and_destruction_0ii+0x8a>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d117      	bne.n	80031e2 <_Z41__static_initialization_and_destruction_0ii+0x8a>
 80031b2:	4815      	ldr	r0, [pc, #84]	; (8003208 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80031b4:	f7fd ff18 	bl	8000fe8 <_ZN11ChampiStateD1Ev>
MessageRecomposer msg_recomposer_config;
 80031b8:	4812      	ldr	r0, [pc, #72]	; (8003204 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80031ba:	f7fe fd93 	bl	8001ce4 <_ZN17MessageRecomposerD1Ev>
MessageRecomposer msg_recomposer_cmd_vel;
 80031be:	4810      	ldr	r0, [pc, #64]	; (8003200 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80031c0:	f7fe fd90 	bl	8001ce4 <_ZN17MessageRecomposerD1Ev>
ChampiCan champi_can;
 80031c4:	480d      	ldr	r0, [pc, #52]	; (80031fc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80031c6:	f7fd feb1 	bl	8000f2c <_ZN9ChampiCanD1Ev>
HolonomicDrive3 holo_drive;
 80031ca:	480b      	ldr	r0, [pc, #44]	; (80031f8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80031cc:	f7fe fc4c 	bl	8001a68 <_ZN15HolonomicDrive3D1Ev>
Stepper stepper2;
 80031d0:	4808      	ldr	r0, [pc, #32]	; (80031f4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80031d2:	f7fe ff2f 	bl	8002034 <_ZN7StepperD1Ev>
Stepper stepper1;
 80031d6:	4806      	ldr	r0, [pc, #24]	; (80031f0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80031d8:	f7fe ff2c 	bl	8002034 <_ZN7StepperD1Ev>
Stepper stepper0;
 80031dc:	4803      	ldr	r0, [pc, #12]	; (80031ec <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80031de:	f7fe ff29 	bl	8002034 <_ZN7StepperD1Ev>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	2000021c 	.word	0x2000021c
 80031f0:	20000280 	.word	0x20000280
 80031f4:	200002e4 	.word	0x200002e4
 80031f8:	20000348 	.word	0x20000348
 80031fc:	200004e0 	.word	0x200004e0
 8003200:	2000050c 	.word	0x2000050c
 8003204:	20000728 	.word	0x20000728
 8003208:	20000944 	.word	0x20000944

0800320c <_GLOBAL__sub_I_hfdcan1>:
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
 8003210:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003214:	2001      	movs	r0, #1
 8003216:	f7ff ff9f 	bl	8003158 <_Z41__static_initialization_and_destruction_0ii>
 800321a:	bd80      	pop	{r7, pc}

0800321c <_GLOBAL__sub_D_hfdcan1>:
 800321c:	b580      	push	{r7, lr}
 800321e:	af00      	add	r7, sp, #0
 8003220:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003224:	2000      	movs	r0, #0
 8003226:	f7ff ff97 	bl	8003158 <_Z41__static_initialization_and_destruction_0ii>
 800322a:	bd80      	pop	{r7, pc}

0800322c <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 800322c:	b480      	push	{r7}
 800322e:	b08f      	sub	sp, #60	; 0x3c
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	891a      	ldrh	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	8a1b      	ldrh	r3, [r3, #16]
 800323e:	429a      	cmp	r2, r3
 8003240:	d301      	bcc.n	8003246 <load_descriptor_values+0x1a>
        return false;
 8003242:	2300      	movs	r3, #0
 8003244:	e156      	b.n	80034f4 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	895b      	ldrh	r3, [r3, #10]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	4413      	add	r3, r2
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8003258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	b2da      	uxtb	r2, r3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8003262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b02      	cmp	r3, #2
 800326a:	d05a      	beq.n	8003322 <load_descriptor_values+0xf6>
 800326c:	2b02      	cmp	r3, #2
 800326e:	f200 8094 	bhi.w	800339a <load_descriptor_values+0x16e>
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <load_descriptor_values+0x50>
 8003276:	2b01      	cmp	r3, #1
 8003278:	d01f      	beq.n	80032ba <load_descriptor_values+0x8e>
 800327a:	e08e      	b.n	800339a <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	b29b      	uxth	r3, r3
 8003288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800328c:	b29a      	uxth	r2, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8003292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003294:	0e1b      	lsrs	r3, r3, #24
 8003296:	b25b      	sxtb	r3, r3
 8003298:	f003 030f 	and.w	r3, r3, #15
 800329c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 80032a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a2:	0c1b      	lsrs	r3, r3, #16
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 80032a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032aa:	0f1b      	lsrs	r3, r3, #28
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	825a      	strh	r2, [r3, #18]
            break;
 80032b8:	e0b4      	b.n	8003424 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	895b      	ldrh	r3, [r3, #10]
 80032c4:	3301      	adds	r3, #1
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 80032ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d0:	0c1b      	lsrs	r3, r3, #16
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032d8:	b29a      	uxth	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 80032de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e0:	089b      	lsrs	r3, r3, #2
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e8:	b29a      	uxth	r2, r3
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	0f1b      	lsrs	r3, r3, #28
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	019b      	lsls	r3, r3, #6
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	4313      	orrs	r3, r2
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 80032fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fe:	0f1b      	lsrs	r3, r3, #28
 8003300:	b25b      	sxtb	r3, r3
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	b29b      	uxth	r3, r3
 800330e:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	0c1b      	lsrs	r3, r3, #16
 8003314:	b29b      	uxth	r3, r3
 8003316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800331a:	b29a      	uxth	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	825a      	strh	r2, [r3, #18]
            break;
 8003320:	e080      	b.n	8003424 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	895b      	ldrh	r3, [r3, #10]
 800332c:	3301      	adds	r3, #1
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	895b      	ldrh	r3, [r3, #10]
 8003340:	3302      	adds	r3, #2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4413      	add	r3, r2
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	895b      	ldrh	r3, [r3, #10]
 8003354:	3303      	adds	r3, #3
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 800335e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003360:	0c1b      	lsrs	r3, r3, #16
 8003362:	b29a      	uxth	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	089b      	lsrs	r3, r3, #2
 800336c:	b29b      	uxth	r3, r3
 800336e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003372:	b29a      	uxth	r2, r3
 8003374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	b29b      	uxth	r3, r3
 800337a:	019b      	lsls	r3, r3, #6
 800337c:	b29b      	uxth	r3, r3
 800337e:	4313      	orrs	r3, r2
 8003380:	b29a      	uxth	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	b29a      	uxth	r2, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	825a      	strh	r2, [r3, #18]
            break;
 8003398:	e044      	b.n	8003424 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	895b      	ldrh	r3, [r3, #10]
 80033a4:	3301      	adds	r3, #1
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	895b      	ldrh	r3, [r3, #10]
 80033b8:	3302      	adds	r3, #2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	895b      	ldrh	r3, [r3, #10]
 80033cc:	3303      	adds	r3, #3
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	895b      	ldrh	r3, [r3, #10]
 80033e0:	3304      	adds	r3, #4
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 80033f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f4:	089b      	lsrs	r3, r3, #2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	0a1b      	lsrs	r3, r3, #8
 8003402:	b29b      	uxth	r3, r3
 8003404:	019b      	lsls	r3, r3, #6
 8003406:	b29b      	uxth	r3, r3
 8003408:	4313      	orrs	r3, r2
 800340a:	b29a      	uxth	r2, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	b29a      	uxth	r2, r3
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	825a      	strh	r2, [r3, #18]
            break;
 8003422:	bf00      	nop
        }
    }

    if (!iter->message)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	621a      	str	r2, [r3, #32]
 8003438:	e041      	b.n	80034be <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003440:	441a      	add	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8003446:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800344a:	2b00      	cmp	r3, #0
 800344c:	d008      	beq.n	8003460 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	699a      	ldr	r2, [r3, #24]
 8003452:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003456:	425b      	negs	r3, r3
 8003458:	441a      	add	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	621a      	str	r2, [r3, #32]
 800345e:	e01a      	b.n	8003496 <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	7d9b      	ldrb	r3, [r3, #22]
 8003464:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003468:	2b20      	cmp	r3, #32
 800346a:	d111      	bne.n	8003490 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	7d9b      	ldrb	r3, [r3, #22]
 8003470:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7d9b      	ldrb	r3, [r3, #22]
 800347c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8003480:	2b80      	cmp	r3, #128	; 0x80
 8003482:	d105      	bne.n	8003490 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f103 0214 	add.w	r2, r3, #20
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	621a      	str	r2, [r3, #32]
 800348e:	e002      	b.n	8003496 <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	7d9b      	ldrb	r3, [r3, #22]
 800349a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800349e:	2b80      	cmp	r3, #128	; 0x80
 80034a0:	d109      	bne.n	80034b6 <load_descriptor_values+0x28a>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	699b      	ldr	r3, [r3, #24]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	61da      	str	r2, [r3, #28]
 80034b4:	e003      	b.n	80034be <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699a      	ldr	r2, [r3, #24]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7d9b      	ldrb	r3, [r3, #22]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d005      	beq.n	80034d6 <load_descriptor_values+0x2aa>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	7d9b      	ldrb	r3, [r3, #22]
 80034ce:	f003 030f 	and.w	r3, r3, #15
 80034d2:	2b09      	cmp	r3, #9
 80034d4:	d10a      	bne.n	80034ec <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	89db      	ldrh	r3, [r3, #14]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	4413      	add	r3, r2
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24
 80034ea:	e002      	b.n	80034f2 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 80034f2:	2301      	movs	r3, #1
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	373c      	adds	r7, #60	; 0x3c
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
    iter->index++;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	891b      	ldrh	r3, [r3, #8]
 800350c:	3301      	adds	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	891a      	ldrh	r2, [r3, #8]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	8a1b      	ldrh	r3, [r3, #16]
 800351e:	429a      	cmp	r2, r3
 8003520:	d30c      	bcc.n	800353c <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 800353a:	e03c      	b.n	80035b6 <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	895b      	ldrh	r3, [r3, #10]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f003 0303 	and.w	r3, r3, #3
 800355a:	2201      	movs	r2, #1
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	895a      	ldrh	r2, [r3, #10]
 8003566:	893b      	ldrh	r3, [r7, #8]
 8003568:	4413      	add	r3, r2
 800356a:	b29a      	uxth	r2, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	899a      	ldrh	r2, [r3, #12]
 8003574:	7afb      	ldrb	r3, [r7, #11]
 8003576:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800357a:	2b00      	cmp	r3, #0
 800357c:	bf0c      	ite	eq
 800357e:	2301      	moveq	r3, #1
 8003580:	2300      	movne	r3, #0
 8003582:	b2db      	uxtb	r3, r3
 8003584:	b29b      	uxth	r3, r3
 8003586:	4413      	add	r3, r2
 8003588:	b29a      	uxth	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	89da      	ldrh	r2, [r3, #14]
 8003592:	7afb      	ldrb	r3, [r7, #11]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	2b08      	cmp	r3, #8
 800359a:	d004      	beq.n	80035a6 <advance_iterator+0xa6>
 800359c:	7afb      	ldrb	r3, [r7, #11]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	2b09      	cmp	r3, #9
 80035a4:	d101      	bne.n	80035aa <advance_iterator+0xaa>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <advance_iterator+0xac>
 80035aa:	2300      	movs	r3, #0
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	81da      	strh	r2, [r3, #14]
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	60f8      	str	r0, [r7, #12]
 80035ca:	60b9      	str	r1, [r7, #8]
 80035cc:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 80035ce:	2228      	movs	r2, #40	; 0x28
 80035d0:	2100      	movs	r1, #0
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f007 fb7a 	bl	800accc <memset>

    iter->descriptor = desc;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	601a      	str	r2, [r3, #0]
    iter->message = message;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff fe21 	bl	800322c <load_descriptor_values>
 80035ea:	4603      	mov	r3, r0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	0a1b      	lsrs	r3, r3, #8
 8003612:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d109      	bne.n	800362e <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	3304      	adds	r3, #4
 800361e:	461a      	mov	r2, r3
 8003620:	6939      	ldr	r1, [r7, #16]
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f7ff ffcd 	bl	80035c2 <pb_field_iter_begin>
 8003628:	4603      	mov	r3, r0
 800362a:	75fb      	strb	r3, [r7, #23]
 800362c:	e008      	b.n	8003640 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	461a      	mov	r2, r3
 8003634:	6939      	ldr	r1, [r7, #16]
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ffc3 	bl	80035c2 <pb_field_iter_begin>
 800363c:	4603      	mov	r3, r0
 800363e:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	f103 020c 	add.w	r2, r3, #12
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	621a      	str	r2, [r3, #32]
    return status;
 800364a:	7dfb      	ldrb	r3, [r7, #23]
}
 800364c:	4618      	mov	r0, r3
 800364e:	3718      	adds	r7, #24
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f7ff ff4f 	bl	8003500 <advance_iterator>
    (void)load_descriptor_values(iter);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fde2 	bl	800322c <load_descriptor_values>
    return iter->index != 0;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	891b      	ldrh	r3, [r3, #8]
 800366c:	2b00      	cmp	r3, #0
 800366e:	bf14      	ite	ne
 8003670:	2301      	movne	r3, #1
 8003672:	2300      	moveq	r3, #0
 8003674:	b2db      	uxtb	r3, r3
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b084      	sub	sp, #16
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	8a1b      	ldrh	r3, [r3, #16]
 800368c:	461a      	mov	r2, r3
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	4293      	cmp	r3, r2
 8003692:	d101      	bne.n	8003698 <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8003694:	2301      	movs	r3, #1
 8003696:	e044      	b.n	8003722 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	8a9b      	ldrh	r3, [r3, #20]
 800369e:	461a      	mov	r2, r3
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d901      	bls.n	80036aa <pb_field_iter_find+0x2c>
    {
        return false;
 80036a6:	2300      	movs	r3, #0
 80036a8:	e03b      	b.n	8003722 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	891b      	ldrh	r3, [r3, #8]
 80036ae:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	8a1b      	ldrh	r3, [r3, #16]
 80036b4:	461a      	mov	r2, r3
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d204      	bcs.n	80036c6 <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	8a1a      	ldrh	r2, [r3, #16]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f7ff ff1a 	bl	8003500 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	895b      	ldrh	r3, [r3, #10]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	089a      	lsrs	r2, r3, #2
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	4053      	eors	r3, r2
 80036e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d110      	bne.n	8003710 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff fd9c 	bl	800322c <load_descriptor_values>

                if (iter->tag == tag &&
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	8a1b      	ldrh	r3, [r3, #16]
 80036f8:	461a      	mov	r2, r3
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d107      	bne.n	8003710 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	7d9b      	ldrb	r3, [r3, #22]
 8003704:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 8003708:	2b0a      	cmp	r3, #10
 800370a:	d001      	beq.n	8003710 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 800370c:	2301      	movs	r3, #1
 800370e:	e008      	b.n	8003722 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	891b      	ldrh	r3, [r3, #8]
 8003714:	89fa      	ldrh	r2, [r7, #14]
 8003716:	429a      	cmp	r2, r3
 8003718:	d1d5      	bne.n	80036c6 <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff fd86 	bl	800322c <load_descriptor_values>
        return false;
 8003720:	2300      	movs	r3, #0
    }
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	7d9b      	ldrb	r3, [r3, #22]
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	2b0a      	cmp	r3, #10
 800373c:	d101      	bne.n	8003742 <pb_field_iter_find_extension+0x18>
    {
        return true;
 800373e:	2301      	movs	r3, #1
 8003740:	e022      	b.n	8003788 <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	891b      	ldrh	r3, [r3, #8]
 8003746:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f7ff fed9 	bl	8003500 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681a      	ldr	r2, [r3, #0]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	895b      	ldrh	r3, [r3, #10]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	f003 030f 	and.w	r3, r3, #15
 8003768:	2b0a      	cmp	r3, #10
 800376a:	d104      	bne.n	8003776 <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 800376c:	6878      	ldr	r0, [r7, #4]
 800376e:	f7ff fd5d 	bl	800322c <load_descriptor_values>
 8003772:	4603      	mov	r3, r0
 8003774:	e008      	b.n	8003788 <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	891b      	ldrh	r3, [r3, #8]
 800377a:	89fa      	ldrh	r2, [r7, #14]
 800377c:	429a      	cmp	r2, r3
 800377e:	d1e3      	bne.n	8003748 <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f7ff fd53 	bl	800322c <load_descriptor_values>
        return false;
 8003786:	2300      	movs	r3, #0
    }
}
 8003788:	4618      	mov	r0, r3
 800378a:	3710      	adds	r7, #16
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}

08003790 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800379c:	68fb      	ldr	r3, [r7, #12]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr

080037aa <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b084      	sub	sp, #16
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff ffea 	bl	8003790 <pb_const_cast>
 80037bc:	4603      	mov	r3, r0
 80037be:	461a      	mov	r2, r3
 80037c0:	68b9      	ldr	r1, [r7, #8]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f7ff fefd 	bl	80035c2 <pb_field_iter_begin>
 80037c8:	4603      	mov	r3, r0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 80037d2:	b580      	push	{r7, lr}
 80037d4:	b082      	sub	sp, #8
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 80037dc:	6838      	ldr	r0, [r7, #0]
 80037de:	f7ff ffd7 	bl	8003790 <pb_const_cast>
 80037e2:	4603      	mov	r3, r0
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff ff04 	bl	80035f4 <pb_field_iter_begin_extension>
 80037ec:	4603      	mov	r3, r0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	8a5b      	ldrh	r3, [r3, #18]
 8003806:	2b08      	cmp	r3, #8
 8003808:	d125      	bne.n	8003856 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01f      	beq.n	8003856 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00c      	beq.n	8003836 <pb_default_field_callback+0x40>
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d008      	beq.n	8003836 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	3204      	adds	r2, #4
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	4798      	blx	r3
 8003832:	4603      	mov	r3, r0
 8003834:	e010      	b.n	8003858 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d00c      	beq.n	8003856 <pb_default_field_callback+0x60>
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d008      	beq.n	8003856 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	3204      	adds	r2, #4
 800384c:	6879      	ldr	r1, [r7, #4]
 800384e:	68b8      	ldr	r0, [r7, #8]
 8003850:	4798      	blx	r3
 8003852:	4603      	mov	r3, r0
 8003854:	e000      	b.n	8003858 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 8003856:	2301      	movs	r3, #1

}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	441a      	add	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d004      	beq.n	800388e <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	6979      	ldr	r1, [r7, #20]
 8003888:	68b8      	ldr	r0, [r7, #8]
 800388a:	f007 faee 	bl	800ae6a <memcpy>
    }
    
    return true;
 800388e:	2301      	movs	r3, #1
}
 8003890:	4618      	mov	r0, r3
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b088      	sub	sp, #32
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
    if (count == 0)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <pb_read+0x16>
        return true;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e05f      	b.n	800396e <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d123      	bne.n	80038fc <pb_read+0x64>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a2f      	ldr	r2, [pc, #188]	; (8003978 <pb_read+0xe0>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d01e      	beq.n	80038fc <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 80038be:	e011      	b.n	80038e4 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 80038c0:	f107 0310 	add.w	r3, r7, #16
 80038c4:	2210      	movs	r2, #16
 80038c6:	4619      	mov	r1, r3
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f7ff ffe5 	bl	8003898 <pb_read>
 80038ce:	4603      	mov	r3, r0
 80038d0:	f083 0301 	eor.w	r3, r3, #1
 80038d4:	b2db      	uxtb	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <pb_read+0x46>
				return false;
 80038da:	2300      	movs	r3, #0
 80038dc:	e047      	b.n	800396e <pb_read+0xd6>
			
			count -= 16;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3b10      	subs	r3, #16
 80038e2:	607b      	str	r3, [r7, #4]
		while (count > 16)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d8ea      	bhi.n	80038c0 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 80038ea:	f107 0310 	add.w	r3, r7, #16
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4619      	mov	r1, r3
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f7ff ffd0 	bl	8003898 <pb_read>
 80038f8:	4603      	mov	r3, r0
 80038fa:	e038      	b.n	800396e <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	429a      	cmp	r2, r3
 8003904:	d90b      	bls.n	800391e <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <pb_read+0x7c>
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	e000      	b.n	8003916 <pb_read+0x7e>
 8003914:	4b19      	ldr	r3, [pc, #100]	; (800397c <pb_read+0xe4>)
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	60d3      	str	r3, [r2, #12]
 800391a:	2300      	movs	r3, #0
 800391c:	e027      	b.n	800396e <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	68b9      	ldr	r1, [r7, #8]
 8003926:	68f8      	ldr	r0, [r7, #12]
 8003928:	4798      	blx	r3
 800392a:	4603      	mov	r3, r0
 800392c:	f083 0301 	eor.w	r3, r3, #1
 8003930:	b2db      	uxtb	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00b      	beq.n	800394e <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	68db      	ldr	r3, [r3, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d002      	beq.n	8003944 <pb_read+0xac>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	e000      	b.n	8003946 <pb_read+0xae>
 8003944:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <pb_read+0xe8>)
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	60d3      	str	r3, [r2, #12]
 800394a:	2300      	movs	r3, #0
 800394c:	e00f      	b.n	800396e <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	d903      	bls.n	8003960 <pb_read+0xc8>
        stream->bytes_left = 0;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	e005      	b.n	800396c <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	1ad2      	subs	r2, r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	609a      	str	r2, [r3, #8]

    return true;
 800396c:	2301      	movs	r3, #1
}
 800396e:	4618      	mov	r0, r3
 8003970:	3720      	adds	r7, #32
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	08003861 	.word	0x08003861
 800397c:	0800b7ac 	.word	0x0800b7ac
 8003980:	0800b7bc 	.word	0x0800b7bc

08003984 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10b      	bne.n	80039ae <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d002      	beq.n	80039a4 <pb_readbyte+0x20>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	e000      	b.n	80039a6 <pb_readbyte+0x22>
 80039a4:	4b13      	ldr	r3, [pc, #76]	; (80039f4 <pb_readbyte+0x70>)
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	60d3      	str	r3, [r2, #12]
 80039aa:	2300      	movs	r3, #0
 80039ac:	e01d      	b.n	80039ea <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2201      	movs	r2, #1
 80039b4:	6839      	ldr	r1, [r7, #0]
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	f083 0301 	eor.w	r3, r3, #1
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00b      	beq.n	80039de <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d002      	beq.n	80039d4 <pb_readbyte+0x50>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	e000      	b.n	80039d6 <pb_readbyte+0x52>
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <pb_readbyte+0x74>)
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	60d3      	str	r3, [r2, #12]
 80039da:	2300      	movs	r3, #0
 80039dc:	e005      	b.n	80039ea <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	1e5a      	subs	r2, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	609a      	str	r2, [r3, #8]
    
    return true;    
 80039e8:	2301      	movs	r3, #1
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3708      	adds	r7, #8
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	0800b7ac 	.word	0x0800b7ac
 80039f8:	0800b7bc 	.word	0x0800b7bc

080039fc <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 80039fc:	b490      	push	{r4, r7}
 80039fe:	b08a      	sub	sp, #40	; 0x28
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 8003a08:	4b0a      	ldr	r3, [pc, #40]	; (8003a34 <pb_istream_from_buffer+0x38>)
 8003a0a:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	461c      	mov	r4, r3
 8003a20:	f107 0318 	add.w	r3, r7, #24
 8003a24:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a26:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	3728      	adds	r7, #40	; 0x28
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bc90      	pop	{r4, r7}
 8003a32:	4770      	bx	lr
 8003a34:	08003861 	.word	0x08003861

08003a38 <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8003a44:	f107 0315 	add.w	r3, r7, #21
 8003a48:	4619      	mov	r1, r3
 8003a4a:	68f8      	ldr	r0, [r7, #12]
 8003a4c:	f7ff ff9a 	bl	8003984 <pb_readbyte>
 8003a50:	4603      	mov	r3, r0
 8003a52:	f083 0301 	eor.w	r3, r3, #1
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00b      	beq.n	8003a74 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d105      	bne.n	8003a70 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8003a70:	2300      	movs	r3, #0
 8003a72:	e084      	b.n	8003b7e <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8003a74:	7d7b      	ldrb	r3, [r7, #21]
 8003a76:	b25b      	sxtb	r3, r3
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	db02      	blt.n	8003a82 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8003a7c:	7d7b      	ldrb	r3, [r7, #21]
 8003a7e:	61fb      	str	r3, [r7, #28]
 8003a80:	e079      	b.n	8003b76 <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8003a82:	2307      	movs	r3, #7
 8003a84:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 8003a86:	7d7b      	ldrb	r3, [r7, #21]
 8003a88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a8c:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8003a8e:	f107 0315 	add.w	r3, r7, #21
 8003a92:	4619      	mov	r1, r3
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f7ff ff75 	bl	8003984 <pb_readbyte>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	f083 0301 	eor.w	r3, r3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <pb_decode_varint32_eof+0x72>
                return false;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	e069      	b.n	8003b7e <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b1f      	cmp	r3, #31
 8003aae:	d92f      	bls.n	8003b10 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	2b3e      	cmp	r3, #62	; 0x3e
 8003ab4:	d801      	bhi.n	8003aba <pb_decode_varint32_eof+0x82>
 8003ab6:	23ff      	movs	r3, #255	; 0xff
 8003ab8:	e000      	b.n	8003abc <pb_decode_varint32_eof+0x84>
 8003aba:	2301      	movs	r3, #1
 8003abc:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8003abe:	7d7b      	ldrb	r3, [r7, #21]
 8003ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d006      	beq.n	8003ad6 <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 8003ac8:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	da05      	bge.n	8003ada <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 8003ace:	7d7b      	ldrb	r3, [r7, #21]
 8003ad0:	7dfa      	ldrb	r2, [r7, #23]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d101      	bne.n	8003ada <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e000      	b.n	8003adc <pb_decode_varint32_eof+0xa4>
 8003ada:	2300      	movs	r3, #0
 8003adc:	75bb      	strb	r3, [r7, #22]
 8003ade:	7dbb      	ldrb	r3, [r7, #22]
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b3f      	cmp	r3, #63	; 0x3f
 8003aea:	d805      	bhi.n	8003af8 <pb_decode_varint32_eof+0xc0>
 8003aec:	7dbb      	ldrb	r3, [r7, #22]
 8003aee:	f083 0301 	eor.w	r3, r3, #1
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d037      	beq.n	8003b68 <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <pb_decode_varint32_eof+0xce>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	e000      	b.n	8003b08 <pb_decode_varint32_eof+0xd0>
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <pb_decode_varint32_eof+0x150>)
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	60d3      	str	r3, [r2, #12]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e036      	b.n	8003b7e <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2b1c      	cmp	r3, #28
 8003b14:	d11f      	bne.n	8003b56 <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 8003b16:	7d7b      	ldrb	r3, [r7, #21]
 8003b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d010      	beq.n	8003b42 <pb_decode_varint32_eof+0x10a>
 8003b20:	7d7b      	ldrb	r3, [r7, #21]
 8003b22:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8003b26:	2b78      	cmp	r3, #120	; 0x78
 8003b28:	d00b      	beq.n	8003b42 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <pb_decode_varint32_eof+0x100>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	e000      	b.n	8003b3a <pb_decode_varint32_eof+0x102>
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <pb_decode_varint32_eof+0x150>)
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	60d3      	str	r3, [r2, #12]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	e01d      	b.n	8003b7e <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8003b42:	7d7b      	ldrb	r3, [r7, #21]
 8003b44:	f003 020f 	and.w	r2, r3, #15
 8003b48:	69bb      	ldr	r3, [r7, #24]
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	69fa      	ldr	r2, [r7, #28]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	61fb      	str	r3, [r7, #28]
 8003b54:	e008      	b.n	8003b68 <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8003b56:	7d7b      	ldrb	r3, [r7, #21]
 8003b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	3307      	adds	r3, #7
 8003b6c:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8003b6e:	7d7b      	ldrb	r3, [r7, #21]
 8003b70:	b25b      	sxtb	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	db8b      	blt.n	8003a8e <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	601a      	str	r2, [r3, #0]
   return true;
 8003b7c:	2301      	movs	r3, #1
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3720      	adds	r7, #32
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	0800b7c8 	.word	0x0800b7c8

08003b8c <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 8003b96:	2200      	movs	r2, #0
 8003b98:	6839      	ldr	r1, [r7, #0]
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7ff ff4c 	bl	8003a38 <pb_decode_varint32_eof>
 8003ba0:	4603      	mov	r3, r0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3708      	adds	r7, #8
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}
	...

08003bac <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b08a      	sub	sp, #40	; 0x28
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 8003bc8:	f107 0317 	add.w	r3, r7, #23
 8003bcc:	4619      	mov	r1, r3
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f7ff fed8 	bl	8003984 <pb_readbyte>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	f083 0301 	eor.w	r3, r3, #1
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d001      	beq.n	8003be4 <pb_decode_varint+0x38>
            return false;
 8003be0:	2300      	movs	r3, #0
 8003be2:	e041      	b.n	8003c68 <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	2b3e      	cmp	r3, #62	; 0x3e
 8003be8:	d910      	bls.n	8003c0c <pb_decode_varint+0x60>
 8003bea:	7dfb      	ldrb	r3, [r7, #23]
 8003bec:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <pb_decode_varint+0x56>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	e000      	b.n	8003c04 <pb_decode_varint+0x58>
 8003c02:	4b1c      	ldr	r3, [pc, #112]	; (8003c74 <pb_decode_varint+0xc8>)
 8003c04:	68fa      	ldr	r2, [r7, #12]
 8003c06:	60d3      	str	r3, [r2, #12]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	e02d      	b.n	8003c68 <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8003c0c:	7dfb      	ldrb	r3, [r7, #23]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	2200      	movs	r2, #0
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 8003c1c:	f04f 0900 	mov.w	r9, #0
 8003c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c22:	f1a3 0120 	sub.w	r1, r3, #32
 8003c26:	f1c3 0220 	rsb	r2, r3, #32
 8003c2a:	fa09 f503 	lsl.w	r5, r9, r3
 8003c2e:	fa08 f101 	lsl.w	r1, r8, r1
 8003c32:	430d      	orrs	r5, r1
 8003c34:	fa28 f202 	lsr.w	r2, r8, r2
 8003c38:	4315      	orrs	r5, r2
 8003c3a:	fa08 f403 	lsl.w	r4, r8, r3
 8003c3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c42:	ea42 0a04 	orr.w	sl, r2, r4
 8003c46:	ea43 0b05 	orr.w	fp, r3, r5
 8003c4a:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8003c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c50:	3307      	adds	r3, #7
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 8003c54:	7dfb      	ldrb	r3, [r7, #23]
 8003c56:	b25b      	sxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	dbb5      	blt.n	8003bc8 <pb_decode_varint+0x1c>
    
    *dest = result;
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c62:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 8003c66:	2301      	movs	r3, #1
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3728      	adds	r7, #40	; 0x28
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c72:	bf00      	nop
 8003c74:	0800b7c8 	.word	0x0800b7c8

08003c78 <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8003c80:	f107 030f 	add.w	r3, r7, #15
 8003c84:	2201      	movs	r2, #1
 8003c86:	4619      	mov	r1, r3
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f7ff fe05 	bl	8003898 <pb_read>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f083 0301 	eor.w	r3, r3, #1
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <pb_skip_varint+0x26>
            return false;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e004      	b.n	8003ca8 <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	b25b      	sxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	dbec      	blt.n	8003c80 <pb_skip_varint+0x8>
    return true;
 8003ca6:	2301      	movs	r3, #1
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	3710      	adds	r7, #16
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff ff64 	bl	8003b8c <pb_decode_varint32>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	f083 0301 	eor.w	r3, r3, #1
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d001      	beq.n	8003cd4 <pb_skip_string+0x24>
        return false;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e006      	b.n	8003ce2 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	2100      	movs	r1, #0
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7ff fddc 	bl	8003898 <pb_read>
 8003ce0:	4603      	mov	r3, r0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b086      	sub	sp, #24
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2200      	movs	r2, #0
 8003d02:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2200      	movs	r2, #0
 8003d08:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8003d0a:	f107 0314 	add.w	r3, r7, #20
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	4619      	mov	r1, r3
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f7ff fe90 	bl	8003a38 <pb_decode_varint32_eof>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f083 0301 	eor.w	r3, r3, #1
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <pb_decode_tag+0x3e>
    {
        return false;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e00b      	b.n	8003d40 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	08da      	lsrs	r2, r3, #3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	b2db      	uxtb	r3, r3
 8003d34:	f003 0307 	and.w	r3, r3, #7
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	701a      	strb	r2, [r3, #0]
    return true;
 8003d3e:	2301      	movs	r3, #1
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}

08003d48 <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8003d54:	78fb      	ldrb	r3, [r7, #3]
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d826      	bhi.n	8003da8 <pb_skip_field+0x60>
 8003d5a:	a201      	add	r2, pc, #4	; (adr r2, 8003d60 <pb_skip_field+0x18>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003d79 	.word	0x08003d79
 8003d64:	08003d83 	.word	0x08003d83
 8003d68:	08003d91 	.word	0x08003d91
 8003d6c:	08003da9 	.word	0x08003da9
 8003d70:	08003da9 	.word	0x08003da9
 8003d74:	08003d9b 	.word	0x08003d9b
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f7ff ff7d 	bl	8003c78 <pb_skip_varint>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	e01d      	b.n	8003dbe <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8003d82:	2208      	movs	r2, #8
 8003d84:	2100      	movs	r1, #0
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff fd86 	bl	8003898 <pb_read>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	e016      	b.n	8003dbe <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff ff8d 	bl	8003cb0 <pb_skip_string>
 8003d96:	4603      	mov	r3, r0
 8003d98:	e011      	b.n	8003dbe <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8003d9a:	2204      	movs	r2, #4
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	6878      	ldr	r0, [r7, #4]
 8003da0:	f7ff fd7a 	bl	8003898 <pb_read>
 8003da4:	4603      	mov	r3, r0
 8003da6:	e00a      	b.n	8003dbe <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d002      	beq.n	8003db6 <pb_skip_field+0x6e>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	e000      	b.n	8003db8 <pb_skip_field+0x70>
 8003db6:	4b04      	ldr	r3, [pc, #16]	; (8003dc8 <pb_skip_field+0x80>)
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	60d3      	str	r3, [r2, #12]
 8003dbc:	2300      	movs	r3, #0
    }
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	0800b7d8 	.word	0x0800b7d8

08003dcc <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	607a      	str	r2, [r7, #4]
 8003dd6:	603b      	str	r3, [r7, #0]
 8003dd8:	460b      	mov	r3, r1
 8003dda:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 8003de2:	7afb      	ldrb	r3, [r7, #11]
 8003de4:	2b05      	cmp	r3, #5
 8003de6:	d03f      	beq.n	8003e68 <read_raw_value+0x9c>
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	dc47      	bgt.n	8003e7c <read_raw_value+0xb0>
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d002      	beq.n	8003df6 <read_raw_value+0x2a>
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d02f      	beq.n	8003e54 <read_raw_value+0x88>
 8003df4:	e042      	b.n	8003e7c <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	697a      	ldr	r2, [r7, #20]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d20b      	bcs.n	8003e28 <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <read_raw_value+0x52>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	e000      	b.n	8003e20 <read_raw_value+0x54>
 8003e1e:	4b1f      	ldr	r3, [pc, #124]	; (8003e9c <read_raw_value+0xd0>)
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	60d3      	str	r3, [r2, #12]
 8003e24:	2300      	movs	r3, #0
 8003e26:	e034      	b.n	8003e92 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 8003e28:	2201      	movs	r2, #1
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f7ff fd33 	bl	8003898 <pb_read>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f083 0301 	eor.w	r3, r3, #1
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <read_raw_value+0x76>
                    return false;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	e027      	b.n	8003e92 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	b25b      	sxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	dbd5      	blt.n	8003dfc <read_raw_value+0x30>
            return true;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e01e      	b.n	8003e92 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	2208      	movs	r2, #8
 8003e58:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	68f8      	ldr	r0, [r7, #12]
 8003e60:	f7ff fd1a 	bl	8003898 <pb_read>
 8003e64:	4603      	mov	r3, r0
 8003e66:	e014      	b.n	8003e92 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	2204      	movs	r2, #4
 8003e6c:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8003e6e:	2204      	movs	r2, #4
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	68f8      	ldr	r0, [r7, #12]
 8003e74:	f7ff fd10 	bl	8003898 <pb_read>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	e00a      	b.n	8003e92 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d002      	beq.n	8003e8a <read_raw_value+0xbe>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	e000      	b.n	8003e8c <read_raw_value+0xc0>
 8003e8a:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <read_raw_value+0xd4>)
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	60d3      	str	r3, [r2, #12]
 8003e90:	2300      	movs	r3, #0
    }
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	0800b7c8 	.word	0x0800b7c8
 8003ea0:	0800b7d8 	.word	0x0800b7d8

08003ea4 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 8003eae:	f107 030c 	add.w	r3, r7, #12
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f7ff fe69 	bl	8003b8c <pb_decode_varint32>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	f083 0301 	eor.w	r3, r3, #1
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <pb_make_string_substream+0x26>
        return false;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e020      	b.n	8003f0c <pb_make_string_substream+0x68>
    
    *substream = *stream;
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4614      	mov	r4, r2
 8003ed0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003ed2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d20b      	bcs.n	8003ef8 <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <pb_make_string_substream+0x4a>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	e000      	b.n	8003ef0 <pb_make_string_substream+0x4c>
 8003eee:	4b09      	ldr	r3, [pc, #36]	; (8003f14 <pb_make_string_substream+0x70>)
 8003ef0:	687a      	ldr	r2, [r7, #4]
 8003ef2:	60d3      	str	r3, [r2, #12]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e009      	b.n	8003f0c <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1ad2      	subs	r2, r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	609a      	str	r2, [r3, #8]
    return true;
 8003f0a:	2301      	movs	r3, #1
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3714      	adds	r7, #20
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd90      	pop	{r4, r7, pc}
 8003f14:	0800b7ec 	.word	0x0800b7ec

08003f18 <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00e      	beq.n	8003f48 <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	2100      	movs	r1, #0
 8003f32:	6838      	ldr	r0, [r7, #0]
 8003f34:	f7ff fcb0 	bl	8003898 <pb_read>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f083 0301 	eor.w	r3, r3, #1
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <pb_close_string_substream+0x30>
            return false;
 8003f44:	2300      	movs	r3, #0
 8003f46:	e008      	b.n	8003f5a <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68da      	ldr	r2, [r3, #12]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	60da      	str	r2, [r3, #12]
#endif
    return true;
 8003f58:	2301      	movs	r3, #1
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3708      	adds	r7, #8
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	7d9b      	ldrb	r3, [r3, #22]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	2b0b      	cmp	r3, #11
 8003f7c:	f200 80d4 	bhi.w	8004128 <decode_basic_field+0x1c4>
 8003f80:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <decode_basic_field+0x24>)
 8003f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f86:	bf00      	nop
 8003f88:	08003fb9 	.word	0x08003fb9
 8003f8c:	08003fe9 	.word	0x08003fe9
 8003f90:	08003fe9 	.word	0x08003fe9
 8003f94:	08003fe9 	.word	0x08003fe9
 8003f98:	08004019 	.word	0x08004019
 8003f9c:	0800404d 	.word	0x0800404d
 8003fa0:	08004081 	.word	0x08004081
 8003fa4:	080040ab 	.word	0x080040ab
 8003fa8:	080040d5 	.word	0x080040d5
 8003fac:	080040d5 	.word	0x080040d5
 8003fb0:	08004129 	.word	0x08004129
 8003fb4:	080040ff 	.word	0x080040ff
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8003fb8:	7afb      	ldrb	r3, [r7, #11]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00e      	beq.n	8003fdc <decode_basic_field+0x78>
 8003fbe:	7afb      	ldrb	r3, [r7, #11]
 8003fc0:	2bff      	cmp	r3, #255	; 0xff
 8003fc2:	d00b      	beq.n	8003fdc <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <decode_basic_field+0x6e>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	e000      	b.n	8003fd4 <decode_basic_field+0x70>
 8003fd2:	4b5d      	ldr	r3, [pc, #372]	; (8004148 <decode_basic_field+0x1e4>)
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	60d3      	str	r3, [r2, #12]
 8003fd8:	2300      	movs	r3, #0
 8003fda:	e0b0      	b.n	800413e <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 fef6 	bl	8004dd0 <pb_dec_bool>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	e0aa      	b.n	800413e <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 8003fe8:	7afb      	ldrb	r3, [r7, #11]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00e      	beq.n	800400c <decode_basic_field+0xa8>
 8003fee:	7afb      	ldrb	r3, [r7, #11]
 8003ff0:	2bff      	cmp	r3, #255	; 0xff
 8003ff2:	d00b      	beq.n	800400c <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d002      	beq.n	8004002 <decode_basic_field+0x9e>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	e000      	b.n	8004004 <decode_basic_field+0xa0>
 8004002:	4b51      	ldr	r3, [pc, #324]	; (8004148 <decode_basic_field+0x1e4>)
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	60d3      	str	r3, [r2, #12]
 8004008:	2300      	movs	r3, #0
 800400a:	e098      	b.n	800413e <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 feee 	bl	8004df0 <pb_dec_varint>
 8004014:	4603      	mov	r3, r0
 8004016:	e092      	b.n	800413e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 8004018:	7afb      	ldrb	r3, [r7, #11]
 800401a:	2b05      	cmp	r3, #5
 800401c:	d00e      	beq.n	800403c <decode_basic_field+0xd8>
 800401e:	7afb      	ldrb	r3, [r7, #11]
 8004020:	2bff      	cmp	r3, #255	; 0xff
 8004022:	d00b      	beq.n	800403c <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	68db      	ldr	r3, [r3, #12]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d002      	beq.n	8004032 <decode_basic_field+0xce>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	e000      	b.n	8004034 <decode_basic_field+0xd0>
 8004032:	4b45      	ldr	r3, [pc, #276]	; (8004148 <decode_basic_field+0x1e4>)
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	60d3      	str	r3, [r2, #12]
 8004038:	2300      	movs	r3, #0
 800403a:	e080      	b.n	800413e <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	69db      	ldr	r3, [r3, #28]
 8004040:	4619      	mov	r1, r3
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f000 fe8a 	bl	8004d5c <pb_decode_fixed32>
 8004048:	4603      	mov	r3, r0
 800404a:	e078      	b.n	800413e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 800404c:	7afb      	ldrb	r3, [r7, #11]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d00e      	beq.n	8004070 <decode_basic_field+0x10c>
 8004052:	7afb      	ldrb	r3, [r7, #11]
 8004054:	2bff      	cmp	r3, #255	; 0xff
 8004056:	d00b      	beq.n	8004070 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <decode_basic_field+0x102>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	e000      	b.n	8004068 <decode_basic_field+0x104>
 8004066:	4b38      	ldr	r3, [pc, #224]	; (8004148 <decode_basic_field+0x1e4>)
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	60d3      	str	r3, [r2, #12]
 800406c:	2300      	movs	r3, #0
 800406e:	e066      	b.n	800413e <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	69db      	ldr	r3, [r3, #28]
 8004074:	4619      	mov	r1, r3
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f000 fe8c 	bl	8004d94 <pb_decode_fixed64>
 800407c:	4603      	mov	r3, r0
 800407e:	e05e      	b.n	800413e <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8004080:	7afb      	ldrb	r3, [r7, #11]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d00b      	beq.n	800409e <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d002      	beq.n	8004094 <decode_basic_field+0x130>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	e000      	b.n	8004096 <decode_basic_field+0x132>
 8004094:	4b2c      	ldr	r3, [pc, #176]	; (8004148 <decode_basic_field+0x1e4>)
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	60d3      	str	r3, [r2, #12]
 800409a:	2300      	movs	r3, #0
 800409c:	e04f      	b.n	800413e <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 ffd1 	bl	8005048 <pb_dec_bytes>
 80040a6:	4603      	mov	r3, r0
 80040a8:	e049      	b.n	800413e <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 80040aa:	7afb      	ldrb	r3, [r7, #11]
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d00b      	beq.n	80040c8 <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d002      	beq.n	80040be <decode_basic_field+0x15a>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	e000      	b.n	80040c0 <decode_basic_field+0x15c>
 80040be:	4b22      	ldr	r3, [pc, #136]	; (8004148 <decode_basic_field+0x1e4>)
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	60d3      	str	r3, [r2, #12]
 80040c4:	2300      	movs	r3, #0
 80040c6:	e03a      	b.n	800413e <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	68f8      	ldr	r0, [r7, #12]
 80040cc:	f001 f830 	bl	8005130 <pb_dec_string>
 80040d0:	4603      	mov	r3, r0
 80040d2:	e034      	b.n	800413e <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 80040d4:	7afb      	ldrb	r3, [r7, #11]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d00b      	beq.n	80040f2 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <decode_basic_field+0x184>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	68db      	ldr	r3, [r3, #12]
 80040e6:	e000      	b.n	80040ea <decode_basic_field+0x186>
 80040e8:	4b17      	ldr	r3, [pc, #92]	; (8004148 <decode_basic_field+0x1e4>)
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	60d3      	str	r3, [r2, #12]
 80040ee:	2300      	movs	r3, #0
 80040f0:	e025      	b.n	800413e <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	f001 f897 	bl	8005228 <pb_dec_submessage>
 80040fa:	4603      	mov	r3, r0
 80040fc:	e01f      	b.n	800413e <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 80040fe:	7afb      	ldrb	r3, [r7, #11]
 8004100:	2b02      	cmp	r3, #2
 8004102:	d00b      	beq.n	800411c <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <decode_basic_field+0x1ae>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	e000      	b.n	8004114 <decode_basic_field+0x1b0>
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <decode_basic_field+0x1e4>)
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	60d3      	str	r3, [r2, #12]
 8004118:	2300      	movs	r3, #0
 800411a:	e010      	b.n	800413e <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f001 f90c 	bl	800533c <pb_dec_fixed_length_bytes>
 8004124:	4603      	mov	r3, r0
 8004126:	e00a      	b.n	800413e <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <decode_basic_field+0x1d2>
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	e000      	b.n	8004138 <decode_basic_field+0x1d4>
 8004136:	4b05      	ldr	r3, [pc, #20]	; (800414c <decode_basic_field+0x1e8>)
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	60d3      	str	r3, [r2, #12]
 800413c:	2300      	movs	r3, #0
    }
}
 800413e:	4618      	mov	r0, r3
 8004140:	3710      	adds	r7, #16
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	0800b804 	.word	0x0800b804
 800414c:	0800b814 	.word	0x0800b814

08004150 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b096      	sub	sp, #88	; 0x58
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	460b      	mov	r3, r1
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	7d9b      	ldrb	r3, [r3, #22]
 8004162:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004166:	2b30      	cmp	r3, #48	; 0x30
 8004168:	f000 80c2 	beq.w	80042f0 <decode_static_field+0x1a0>
 800416c:	2b30      	cmp	r3, #48	; 0x30
 800416e:	f200 811a 	bhi.w	80043a6 <decode_static_field+0x256>
 8004172:	2b20      	cmp	r3, #32
 8004174:	d01f      	beq.n	80041b6 <decode_static_field+0x66>
 8004176:	2b20      	cmp	r3, #32
 8004178:	f200 8115 	bhi.w	80043a6 <decode_static_field+0x256>
 800417c:	2b00      	cmp	r3, #0
 800417e:	d002      	beq.n	8004186 <decode_static_field+0x36>
 8004180:	2b10      	cmp	r3, #16
 8004182:	d008      	beq.n	8004196 <decode_static_field+0x46>
 8004184:	e10f      	b.n	80043a6 <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8004186:	7afb      	ldrb	r3, [r7, #11]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4619      	mov	r1, r3
 800418c:	68f8      	ldr	r0, [r7, #12]
 800418e:	f7ff fee9 	bl	8003f64 <decode_basic_field>
 8004192:	4603      	mov	r3, r0
 8004194:	e112      	b.n	80043bc <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	2201      	movs	r2, #1
 80041a4:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 80041a6:	7afb      	ldrb	r3, [r7, #11]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	4619      	mov	r1, r3
 80041ac:	68f8      	ldr	r0, [r7, #12]
 80041ae:	f7ff fed9 	bl	8003f64 <decode_basic_field>
 80041b2:	4603      	mov	r3, r0
 80041b4:	e102      	b.n	80043bc <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 80041b6:	7afb      	ldrb	r3, [r7, #11]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d16c      	bne.n	8004296 <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	7d9b      	ldrb	r3, [r3, #22]
 80041c0:	f003 030f 	and.w	r3, r3, #15
 80041c4:	2b05      	cmp	r3, #5
 80041c6:	d866      	bhi.n	8004296 <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 80041c8:	2301      	movs	r3, #1
 80041ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	8a52      	ldrh	r2, [r2, #18]
 80041dc:	4611      	mov	r1, r2
 80041de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80041e0:	8812      	ldrh	r2, [r2, #0]
 80041e2:	fb01 f202 	mul.w	r2, r1, r2
 80041e6:	441a      	add	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 80041ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80041f0:	4619      	mov	r1, r3
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7ff fe56 	bl	8003ea4 <pb_make_string_substream>
 80041f8:	4603      	mov	r3, r0
 80041fa:	f083 0301 	eor.w	r3, r3, #1
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d01f      	beq.n	8004244 <decode_static_field+0xf4>
                    return false;
 8004204:	2300      	movs	r3, #0
 8004206:	e0d9      	b.n	80043bc <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8004208:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	21ff      	movs	r1, #255	; 0xff
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fea7 	bl	8003f64 <decode_basic_field>
 8004216:	4603      	mov	r3, r0
 8004218:	f083 0301 	eor.w	r3, r3, #1
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d003      	beq.n	800422a <decode_static_field+0xda>
                    {
                        status = false;
 8004222:	2300      	movs	r3, #0
 8004224:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8004228:	e015      	b.n	8004256 <decode_static_field+0x106>
                    }
                    (*size)++;
 800422a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	3301      	adds	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004234:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	8a52      	ldrh	r2, [r2, #18]
 800423e:	441a      	add	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8004244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <decode_static_field+0x106>
 800424a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800424c:	881a      	ldrh	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	8a9b      	ldrh	r3, [r3, #20]
 8004252:	429a      	cmp	r2, r3
 8004254:	d3d8      	bcc.n	8004208 <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8004256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00b      	beq.n	8004274 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <decode_static_field+0x11a>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	e000      	b.n	800426c <decode_static_field+0x11c>
 800426a:	4b56      	ldr	r3, [pc, #344]	; (80043c4 <decode_static_field+0x274>)
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	60d3      	str	r3, [r2, #12]
 8004270:	2300      	movs	r3, #0
 8004272:	e0a3      	b.n	80043bc <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8004274:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004278:	4619      	mov	r1, r3
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff fe4c 	bl	8003f18 <pb_close_string_substream>
 8004280:	4603      	mov	r3, r0
 8004282:	f083 0301 	eor.w	r3, r3, #1
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <decode_static_field+0x140>
                    return false;
 800428c:	2300      	movs	r3, #0
 800428e:	e095      	b.n	80043bc <decode_static_field+0x26c>

                return status;
 8004290:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004294:	e092      	b.n	80043bc <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	8a52      	ldrh	r2, [r2, #18]
 80042a4:	4611      	mov	r1, r2
 80042a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042a8:	8812      	ldrh	r2, [r2, #0]
 80042aa:	fb01 f202 	mul.w	r2, r1, r2
 80042ae:	441a      	add	r2, r3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 80042b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042b6:	881b      	ldrh	r3, [r3, #0]
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	b291      	uxth	r1, r2
 80042bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042be:	8011      	strh	r1, [r2, #0]
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	8a92      	ldrh	r2, [r2, #20]
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d30b      	bcc.n	80042e0 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d002      	beq.n	80042d6 <decode_static_field+0x186>
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	e000      	b.n	80042d8 <decode_static_field+0x188>
 80042d6:	4b3b      	ldr	r3, [pc, #236]	; (80043c4 <decode_static_field+0x274>)
 80042d8:	68fa      	ldr	r2, [r7, #12]
 80042da:	60d3      	str	r3, [r2, #12]
 80042dc:	2300      	movs	r3, #0
 80042de:	e06d      	b.n	80043bc <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 80042e0:	7afb      	ldrb	r3, [r7, #11]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	4619      	mov	r1, r3
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff fe3c 	bl	8003f64 <decode_basic_field>
 80042ec:	4603      	mov	r3, r0
 80042ee:	e065      	b.n	80043bc <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	7d9b      	ldrb	r3, [r3, #22]
 80042f4:	f003 030f 	and.w	r3, r3, #15
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d005      	beq.n	8004308 <decode_static_field+0x1b8>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	7d9b      	ldrb	r3, [r3, #22]
 8004300:	f003 030f 	and.w	r3, r3, #15
 8004304:	2b09      	cmp	r3, #9
 8004306:	d141      	bne.n	800438c <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	881a      	ldrh	r2, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8004312:	429a      	cmp	r2, r3
 8004314:	d03a      	beq.n	800438c <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	69d8      	ldr	r0, [r3, #28]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	8a5b      	ldrh	r3, [r3, #18]
 800431e:	461a      	mov	r2, r3
 8004320:	2100      	movs	r1, #0
 8004322:	f006 fcd3 	bl	800accc <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10a      	bne.n	8004346 <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8004336:	2b00      	cmp	r3, #0
 8004338:	d105      	bne.n	8004346 <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8004342:	2b00      	cmp	r3, #0
 8004344:	d022      	beq.n	800438c <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69da      	ldr	r2, [r3, #28]
 800434e:	f107 0314 	add.w	r3, r7, #20
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff f935 	bl	80035c2 <pb_field_iter_begin>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d016      	beq.n	800438c <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 800435e:	f107 0314 	add.w	r3, r7, #20
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fa4d 	bl	8004802 <pb_message_set_to_defaults>
 8004368:	4603      	mov	r3, r0
 800436a:	f083 0301 	eor.w	r3, r3, #1
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00b      	beq.n	800438c <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <decode_static_field+0x232>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	e000      	b.n	8004384 <decode_static_field+0x234>
 8004382:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <decode_static_field+0x278>)
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	60d3      	str	r3, [r2, #12]
 8004388:	2300      	movs	r3, #0
 800438a:	e017      	b.n	80043bc <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a1b      	ldr	r3, [r3, #32]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	8a12      	ldrh	r2, [r2, #16]
 8004394:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8004396:	7afb      	ldrb	r3, [r7, #11]
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	4619      	mov	r1, r3
 800439c:	68f8      	ldr	r0, [r7, #12]
 800439e:	f7ff fde1 	bl	8003f64 <decode_basic_field>
 80043a2:	4603      	mov	r3, r0
 80043a4:	e00a      	b.n	80043bc <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <decode_static_field+0x264>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	e000      	b.n	80043b6 <decode_static_field+0x266>
 80043b4:	4b05      	ldr	r3, [pc, #20]	; (80043cc <decode_static_field+0x27c>)
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	60d3      	str	r3, [r2, #12]
 80043ba:	2300      	movs	r3, #0
    }
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3758      	adds	r7, #88	; 0x58
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	0800b828 	.word	0x0800b828
 80043c8:	0800b838 	.word	0x0800b838
 80043cc:	0800b814 	.word	0x0800b814

080043d0 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	460b      	mov	r3, r1
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <decode_pointer_field+0x1c>
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	e000      	b.n	80043ee <decode_pointer_field+0x1e>
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <decode_pointer_field+0x30>)
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	60d3      	str	r3, [r2, #12]
 80043f2:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	0800b850 	.word	0x0800b850

08004404 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8004404:	b590      	push	{r4, r7, lr}
 8004406:	b097      	sub	sp, #92	; 0x5c
 8004408:	af00      	add	r7, sp, #0
 800440a:	61f8      	str	r0, [r7, #28]
 800440c:	460b      	mov	r3, r1
 800440e:	617a      	str	r2, [r7, #20]
 8004410:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d106      	bne.n	800442a <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 800441c:	7efb      	ldrb	r3, [r7, #27]
 800441e:	4619      	mov	r1, r3
 8004420:	69f8      	ldr	r0, [r7, #28]
 8004422:	f7ff fc91 	bl	8003d48 <pb_skip_field>
 8004426:	4603      	mov	r3, r0
 8004428:	e070      	b.n	800450c <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 800442a:	7efb      	ldrb	r3, [r7, #27]
 800442c:	2b02      	cmp	r3, #2
 800442e:	d145      	bne.n	80044bc <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8004430:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004434:	4619      	mov	r1, r3
 8004436:	69f8      	ldr	r0, [r7, #28]
 8004438:	f7ff fd34 	bl	8003ea4 <pb_make_string_substream>
 800443c:	4603      	mov	r3, r0
 800443e:	f083 0301 	eor.w	r3, r3, #1
 8004442:	b2db      	uxtb	r3, r3
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <decode_callback_field+0x48>
            return false;
 8004448:	2300      	movs	r3, #0
 800444a:	e05f      	b.n	800450c <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 800444c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800444e:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f107 0044 	add.w	r0, r7, #68	; 0x44
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	2100      	movs	r1, #0
 800445e:	4798      	blx	r3
 8004460:	4603      	mov	r3, r0
 8004462:	f083 0301 	eor.w	r3, r3, #1
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	d010      	beq.n	800448e <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 800446c:	69fb      	ldr	r3, [r7, #28]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <decode_callback_field+0x76>
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	e005      	b.n	8004486 <decode_callback_field+0x82>
 800447a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <decode_callback_field+0x80>
 8004480:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004482:	e000      	b.n	8004486 <decode_callback_field+0x82>
 8004484:	4b23      	ldr	r3, [pc, #140]	; (8004514 <decode_callback_field+0x110>)
 8004486:	69fa      	ldr	r2, [r7, #28]
 8004488:	60d3      	str	r3, [r2, #12]
                return false;
 800448a:	2300      	movs	r3, #0
 800448c:	e03e      	b.n	800450c <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 800448e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <decode_callback_field+0x98>
 8004494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004496:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004498:	429a      	cmp	r2, r3
 800449a:	d8d7      	bhi.n	800444c <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 800449c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044a0:	4619      	mov	r1, r3
 80044a2:	69f8      	ldr	r0, [r7, #28]
 80044a4:	f7ff fd38 	bl	8003f18 <pb_close_string_substream>
 80044a8:	4603      	mov	r3, r0
 80044aa:	f083 0301 	eor.w	r3, r3, #1
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <decode_callback_field+0xb4>
            return false;
 80044b4:	2300      	movs	r3, #0
 80044b6:	e029      	b.n	800450c <decode_callback_field+0x108>

        return true;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e027      	b.n	800450c <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 80044bc:	230a      	movs	r3, #10
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 80044c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044c4:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80044c8:	7ef9      	ldrb	r1, [r7, #27]
 80044ca:	69f8      	ldr	r0, [r7, #28]
 80044cc:	f7ff fc7e 	bl	8003dcc <read_raw_value>
 80044d0:	4603      	mov	r3, r0
 80044d2:	f083 0301 	eor.w	r3, r3, #1
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d001      	beq.n	80044e0 <decode_callback_field+0xdc>
            return false;
 80044dc:	2300      	movs	r3, #0
 80044de:	e015      	b.n	800450c <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 80044e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e2:	463b      	mov	r3, r7
 80044e4:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80044e8:	4618      	mov	r0, r3
 80044ea:	f7ff fa87 	bl	80039fc <pb_istream_from_buffer>
 80044ee:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80044f2:	463b      	mov	r3, r7
 80044f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	2100      	movs	r1, #0
 8004508:	4798      	blx	r3
 800450a:	4603      	mov	r3, r0
    }
}
 800450c:	4618      	mov	r0, r3
 800450e:	375c      	adds	r7, #92	; 0x5c
 8004510:	46bd      	mov	sp, r7
 8004512:	bd90      	pop	{r4, r7, pc}
 8004514:	0800b864 	.word	0x0800b864

08004518 <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	460b      	mov	r3, r1
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	7d9b      	ldrb	r3, [r3, #22]
 800452a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800452e:	2b80      	cmp	r3, #128	; 0x80
 8004530:	d00e      	beq.n	8004550 <decode_field+0x38>
 8004532:	2b80      	cmp	r3, #128	; 0x80
 8004534:	d81c      	bhi.n	8004570 <decode_field+0x58>
 8004536:	2b00      	cmp	r3, #0
 8004538:	d002      	beq.n	8004540 <decode_field+0x28>
 800453a:	2b40      	cmp	r3, #64	; 0x40
 800453c:	d010      	beq.n	8004560 <decode_field+0x48>
 800453e:	e017      	b.n	8004570 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8004540:	7afb      	ldrb	r3, [r7, #11]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4619      	mov	r1, r3
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f7ff fe02 	bl	8004150 <decode_static_field>
 800454c:	4603      	mov	r3, r0
 800454e:	e01a      	b.n	8004586 <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8004550:	7afb      	ldrb	r3, [r7, #11]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	4619      	mov	r1, r3
 8004556:	68f8      	ldr	r0, [r7, #12]
 8004558:	f7ff ff3a 	bl	80043d0 <decode_pointer_field>
 800455c:	4603      	mov	r3, r0
 800455e:	e012      	b.n	8004586 <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8004560:	7afb      	ldrb	r3, [r7, #11]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	4619      	mov	r1, r3
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f7ff ff4c 	bl	8004404 <decode_callback_field>
 800456c:	4603      	mov	r3, r0
 800456e:	e00a      	b.n	8004586 <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <decode_field+0x66>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	e000      	b.n	8004580 <decode_field+0x68>
 800457e:	4b04      	ldr	r3, [pc, #16]	; (8004590 <decode_field+0x78>)
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	60d3      	str	r3, [r2, #12]
 8004584:	2300      	movs	r3, #0
    }
}
 8004586:	4618      	mov	r0, r3
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	0800b814 	.word	0x0800b814

08004594 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08e      	sub	sp, #56	; 0x38
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
 80045a0:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 80045a2:	f107 0310 	add.w	r3, r7, #16
 80045a6:	68b9      	ldr	r1, [r7, #8]
 80045a8:	4618      	mov	r0, r3
 80045aa:	f7ff f823 	bl	80035f4 <pb_field_iter_begin_extension>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f083 0301 	eor.w	r3, r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00b      	beq.n	80045d2 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d002      	beq.n	80045c8 <default_extension_decoder+0x34>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	e000      	b.n	80045ca <default_extension_decoder+0x36>
 80045c8:	4b0e      	ldr	r3, [pc, #56]	; (8004604 <default_extension_decoder+0x70>)
 80045ca:	68fa      	ldr	r2, [r7, #12]
 80045cc:	60d3      	str	r3, [r2, #12]
 80045ce:	2300      	movs	r3, #0
 80045d0:	e014      	b.n	80045fc <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 80045d2:	8c3b      	ldrh	r3, [r7, #32]
 80045d4:	461a      	mov	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4293      	cmp	r3, r2
 80045da:	d102      	bne.n	80045e2 <default_extension_decoder+0x4e>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d101      	bne.n	80045e6 <default_extension_decoder+0x52>
        return true;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e00a      	b.n	80045fc <default_extension_decoder+0x68>

    extension->found = true;
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	2201      	movs	r2, #1
 80045ea:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 80045ec:	f107 0210 	add.w	r2, r7, #16
 80045f0:	78fb      	ldrb	r3, [r7, #3]
 80045f2:	4619      	mov	r1, r3
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7ff ff8f 	bl	8004518 <decode_field>
 80045fa:	4603      	mov	r3, r0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3738      	adds	r7, #56	; 0x38
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	0800b874 	.word	0x0800b874

08004608 <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	603b      	str	r3, [r7, #0]
 8004614:	4613      	mov	r3, r2
 8004616:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 800461e:	e022      	b.n	8004666 <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681c      	ldr	r4, [r3, #0]
 8004630:	79fb      	ldrb	r3, [r7, #7]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	6839      	ldr	r1, [r7, #0]
 8004636:	68f8      	ldr	r0, [r7, #12]
 8004638:	47a0      	blx	r4
 800463a:	4603      	mov	r3, r0
 800463c:	75fb      	strb	r3, [r7, #23]
 800463e:	e007      	b.n	8004650 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8004640:	79fb      	ldrb	r3, [r7, #7]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	6839      	ldr	r1, [r7, #0]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f7ff ffa4 	bl	8004594 <default_extension_decoder>
 800464c:	4603      	mov	r3, r0
 800464e:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8004650:	7dfb      	ldrb	r3, [r7, #23]
 8004652:	f083 0301 	eor.w	r3, r3, #1
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <decode_extension+0x58>
            return false;
 800465c:	2300      	movs	r3, #0
 800465e:	e00b      	b.n	8004678 <decode_extension+0x70>
        
        extension = extension->next;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d004      	beq.n	8004676 <decode_extension+0x6e>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	693a      	ldr	r2, [r7, #16]
 8004672:	429a      	cmp	r2, r3
 8004674:	d0d4      	beq.n	8004620 <decode_extension+0x18>
    }
    
    return true;
 8004676:	2301      	movs	r3, #1
}
 8004678:	4618      	mov	r0, r3
 800467a:	371c      	adds	r7, #28
 800467c:	46bd      	mov	sp, r7
 800467e:	bd90      	pop	{r4, r7, pc}

08004680 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b08e      	sub	sp, #56	; 0x38
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	7d9b      	ldrb	r3, [r3, #22]
 800468c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8004690:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	2b0a      	cmp	r3, #10
 800469a:	d124      	bne.n	80046e6 <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 80046a4:	e01b      	b.n	80046de <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 80046a6:	f107 0308 	add.w	r3, r7, #8
 80046aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fe ffa1 	bl	80035f4 <pb_field_iter_begin_extension>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d00f      	beq.n	80046d8 <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 80046b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046ba:	2200      	movs	r2, #0
 80046bc:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 80046be:	f107 0308 	add.w	r3, r7, #8
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 f89d 	bl	8004802 <pb_message_set_to_defaults>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f083 0301 	eor.w	r3, r3, #1
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d001      	beq.n	80046d8 <pb_field_set_to_default+0x58>
                    return false;
 80046d4:	2300      	movs	r3, #0
 80046d6:	e090      	b.n	80047fa <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 80046d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 80046de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e0      	bne.n	80046a6 <pb_field_set_to_default+0x26>
 80046e4:	e088      	b.n	80047f8 <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80046e6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80046ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d166      	bne.n	80047c0 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 80046f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80046fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004700:	2b10      	cmp	r3, #16
 8004702:	d108      	bne.n	8004716 <pb_field_set_to_default+0x96>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d004      	beq.n	8004716 <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a1b      	ldr	r3, [r3, #32]
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
 8004714:	e012      	b.n	800473c <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004716:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800471a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800471e:	2b20      	cmp	r3, #32
 8004720:	d005      	beq.n	800472e <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8004722:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004726:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800472a:	2b30      	cmp	r3, #48	; 0x30
 800472c:	d106      	bne.n	800473c <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	2200      	movs	r2, #0
 8004734:	801a      	strh	r2, [r3, #0]
            init_data = false;
 8004736:	2300      	movs	r3, #0
 8004738:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 800473c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004740:	2b00      	cmp	r3, #0
 8004742:	d059      	beq.n	80047f8 <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	7d9b      	ldrb	r3, [r3, #22]
 8004748:	f003 030f 	and.w	r3, r3, #15
 800474c:	2b08      	cmp	r3, #8
 800474e:	d005      	beq.n	800475c <pb_field_set_to_default+0xdc>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	7d9b      	ldrb	r3, [r3, #22]
 8004754:	f003 030f 	and.w	r3, r3, #15
 8004758:	2b09      	cmp	r3, #9
 800475a:	d128      	bne.n	80047ae <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004760:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10a      	bne.n	800477c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476a:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 800476c:	2b00      	cmp	r3, #0
 800476e:	d105      	bne.n	800477c <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 8004778:	2b00      	cmp	r3, #0
 800477a:	d018      	beq.n	80047ae <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69da      	ldr	r2, [r3, #28]
 8004784:	f107 0308 	add.w	r3, r7, #8
 8004788:	4618      	mov	r0, r3
 800478a:	f7fe ff1a 	bl	80035c2 <pb_field_iter_begin>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d030      	beq.n	80047f6 <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8004794:	f107 0308 	add.w	r3, r7, #8
 8004798:	4618      	mov	r0, r3
 800479a:	f000 f832 	bl	8004802 <pb_message_set_to_defaults>
 800479e:	4603      	mov	r3, r0
 80047a0:	f083 0301 	eor.w	r3, r3, #1
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d025      	beq.n	80047f6 <pb_field_set_to_default+0x176>
                        return false;
 80047aa:	2300      	movs	r3, #0
 80047ac:	e025      	b.n	80047fa <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69d8      	ldr	r0, [r3, #28]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8a5b      	ldrh	r3, [r3, #18]
 80047b6:	461a      	mov	r2, r3
 80047b8:	2100      	movs	r1, #0
 80047ba:	f006 fa87 	bl	800accc <memset>
 80047be:	e01b      	b.n	80047f8 <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80047c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80047c4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80047c8:	2b80      	cmp	r3, #128	; 0x80
 80047ca:	d115      	bne.n	80047f8 <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	2200      	movs	r2, #0
 80047d2:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80047d4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80047d8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047dc:	2b20      	cmp	r3, #32
 80047de:	d005      	beq.n	80047ec <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80047e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80047e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80047e8:	2b30      	cmp	r3, #48	; 0x30
 80047ea:	d105      	bne.n	80047f8 <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a1b      	ldr	r3, [r3, #32]
 80047f0:	2200      	movs	r2, #0
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	e000      	b.n	80047f8 <pb_field_set_to_default+0x178>
            {
 80047f6:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 80047f8:	2301      	movs	r3, #1
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3738      	adds	r7, #56	; 0x38
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 8004802:	b590      	push	{r4, r7, lr}
 8004804:	b08d      	sub	sp, #52	; 0x34
 8004806:	af00      	add	r7, sp, #0
 8004808:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 800480a:	f107 0320 	add.w	r3, r7, #32
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	605a      	str	r2, [r3, #4]
 8004814:	609a      	str	r2, [r3, #8]
 8004816:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 8004818:	2300      	movs	r3, #0
 800481a:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 800481c:	2300      	movs	r3, #0
 800481e:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d020      	beq.n	800486c <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6899      	ldr	r1, [r3, #8]
 8004830:	463b      	mov	r3, r7
 8004832:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004836:	4618      	mov	r0, r3
 8004838:	f7ff f8e0 	bl	80039fc <pb_istream_from_buffer>
 800483c:	f107 0420 	add.w	r4, r7, #32
 8004840:	463b      	mov	r3, r7
 8004842:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004844:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8004848:	f107 031a 	add.w	r3, r7, #26
 800484c:	f107 021c 	add.w	r2, r7, #28
 8004850:	f107 011b 	add.w	r1, r7, #27
 8004854:	f107 0020 	add.w	r0, r7, #32
 8004858:	f7ff fa47 	bl	8003cea <pb_decode_tag>
 800485c:	4603      	mov	r3, r0
 800485e:	f083 0301 	eor.w	r3, r3, #1
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <pb_message_set_to_defaults+0x6a>
            return false;
 8004868:	2300      	movs	r3, #0
 800486a:	e043      	b.n	80048f4 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 800486c:	6978      	ldr	r0, [r7, #20]
 800486e:	f7ff ff07 	bl	8004680 <pb_field_set_to_default>
 8004872:	4603      	mov	r3, r0
 8004874:	f083 0301 	eor.w	r3, r3, #1
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2b00      	cmp	r3, #0
 800487c:	d001      	beq.n	8004882 <pb_message_set_to_defaults+0x80>
            return false;
 800487e:	2300      	movs	r3, #0
 8004880:	e038      	b.n	80048f4 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d02e      	beq.n	80048e6 <pb_message_set_to_defaults+0xe4>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	8a1b      	ldrh	r3, [r3, #16]
 800488c:	461a      	mov	r2, r3
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	429a      	cmp	r2, r3
 8004892:	d128      	bne.n	80048e6 <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8004894:	7ef9      	ldrb	r1, [r7, #27]
 8004896:	f107 0320 	add.w	r3, r7, #32
 800489a:	697a      	ldr	r2, [r7, #20]
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff fe3b 	bl	8004518 <decode_field>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f083 0301 	eor.w	r3, r3, #1
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <pb_message_set_to_defaults+0xb0>
                return false;
 80048ae:	2300      	movs	r3, #0
 80048b0:	e020      	b.n	80048f4 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 80048b2:	f107 031a 	add.w	r3, r7, #26
 80048b6:	f107 021c 	add.w	r2, r7, #28
 80048ba:	f107 011b 	add.w	r1, r7, #27
 80048be:	f107 0020 	add.w	r0, r7, #32
 80048c2:	f7ff fa12 	bl	8003cea <pb_decode_tag>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f083 0301 	eor.w	r3, r3, #1
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <pb_message_set_to_defaults+0xd4>
                return false;
 80048d2:	2300      	movs	r3, #0
 80048d4:	e00e      	b.n	80048f4 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	6a1b      	ldr	r3, [r3, #32]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	2200      	movs	r2, #0
 80048e4:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 80048e6:	6978      	ldr	r0, [r7, #20]
 80048e8:	f7fe feb4 	bl	8003654 <pb_field_iter_next>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d1bc      	bne.n	800486c <pb_message_set_to_defaults+0x6a>

    return true;
 80048f2:	2301      	movs	r3, #1
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3734      	adds	r7, #52	; 0x34
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd90      	pop	{r4, r7, pc}

080048fc <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b09a      	sub	sp, #104	; 0x68
 8004900:	af00      	add	r7, sp, #0
 8004902:	60f8      	str	r0, [r7, #12]
 8004904:	60b9      	str	r1, [r7, #8]
 8004906:	607a      	str	r2, [r7, #4]
 8004908:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 800490a:	2300      	movs	r3, #0
 800490c:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 800490e:	2300      	movs	r3, #0
 8004910:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 8004912:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004916:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 800491a:	2300      	movs	r3, #0
 800491c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 8004926:	2300      	movs	r3, #0
 8004928:	643b      	str	r3, [r7, #64]	; 0x40
 800492a:	2300      	movs	r3, #0
 800492c:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 800492e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004932:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8004934:	f107 0318 	add.w	r3, r7, #24
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	68b9      	ldr	r1, [r7, #8]
 800493c:	4618      	mov	r0, r3
 800493e:	f7fe fe40 	bl	80035c2 <pb_field_iter_begin>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 8102 	beq.w	8004b4e <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	2b00      	cmp	r3, #0
 8004952:	f040 80fc 	bne.w	8004b4e <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 8004956:	f107 0318 	add.w	r3, r7, #24
 800495a:	4618      	mov	r0, r3
 800495c:	f7ff ff51 	bl	8004802 <pb_message_set_to_defaults>
 8004960:	4603      	mov	r3, r0
 8004962:	f083 0301 	eor.w	r3, r3, #1
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 80f0 	beq.w	8004b4e <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <pb_decode_inner+0x80>
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	e000      	b.n	800497e <pb_decode_inner+0x82>
 800497c:	4b99      	ldr	r3, [pc, #612]	; (8004be4 <pb_decode_inner+0x2e8>)
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	60d3      	str	r3, [r2, #12]
 8004982:	2300      	movs	r3, #0
 8004984:	e16d      	b.n	8004c62 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 8004986:	f107 0312 	add.w	r3, r7, #18
 800498a:	f107 0214 	add.w	r2, r7, #20
 800498e:	f107 0113 	add.w	r1, r7, #19
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f7ff f9a9 	bl	8003cea <pb_decode_tag>
 8004998:	4603      	mov	r3, r0
 800499a:	f083 0301 	eor.w	r3, r3, #1
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d005      	beq.n	80049b0 <pb_decode_inner+0xb4>
        {
            if (eof)
 80049a4:	7cbb      	ldrb	r3, [r7, #18]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f040 80d7 	bne.w	8004b5a <pb_decode_inner+0x25e>
                break;
            else
                return false;
 80049ac:	2300      	movs	r3, #0
 80049ae:	e158      	b.n	8004c62 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d111      	bne.n	80049da <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f040 80ce 	bne.w	8004b5e <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <pb_decode_inner+0xd4>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	e000      	b.n	80049d2 <pb_decode_inner+0xd6>
 80049d0:	4b85      	ldr	r3, [pc, #532]	; (8004be8 <pb_decode_inner+0x2ec>)
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	60d3      	str	r3, [r2, #12]
 80049d6:	2300      	movs	r3, #0
 80049d8:	e143      	b.n	8004c62 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 80049da:	697a      	ldr	r2, [r7, #20]
 80049dc:	f107 0318 	add.w	r3, r7, #24
 80049e0:	4611      	mov	r1, r2
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fe4b 	bl	800367e <pb_field_iter_find>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f083 0301 	eor.w	r3, r3, #1
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d105      	bne.n	8004a00 <pb_decode_inner+0x104>
 80049f4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	2b0a      	cmp	r3, #10
 80049fe:	d13c      	bne.n	8004a7a <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 8004a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d112      	bne.n	8004a2c <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 8004a06:	f107 0318 	add.w	r3, r7, #24
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe fe8d 	bl	800372a <pb_field_iter_find_extension>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d004      	beq.n	8004a20 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 8004a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 8004a1c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004a1e:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 8004a20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d102      	bne.n	8004a2c <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 8004a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004a2a:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d815      	bhi.n	8004a60 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 8004a3a:	6979      	ldr	r1, [r7, #20]
 8004a3c:	7cfa      	ldrb	r2, [r7, #19]
 8004a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f7ff fde1 	bl	8004608 <decode_extension>
 8004a46:	4603      	mov	r3, r0
 8004a48:	f083 0301 	eor.w	r3, r3, #1
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <pb_decode_inner+0x15a>
                    return false;
 8004a52:	2300      	movs	r3, #0
 8004a54:	e105      	b.n	8004c62 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d173      	bne.n	8004b48 <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8004a60:	7cfb      	ldrb	r3, [r7, #19]
 8004a62:	4619      	mov	r1, r3
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f7ff f96f 	bl	8003d48 <pb_skip_field>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	f083 0301 	eor.w	r3, r3, #1
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d06a      	beq.n	8004b4c <pb_decode_inner+0x250>
                return false;
 8004a76:	2300      	movs	r3, #0
 8004a78:	e0f3      	b.n	8004c62 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 8004a7a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004a7e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d12e      	bne.n	8004ae4 <pb_decode_inner+0x1e8>
 8004a86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004a88:	f107 0318 	add.w	r3, r7, #24
 8004a8c:	3314      	adds	r3, #20
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d128      	bne.n	8004ae4 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8004a92:	8c3b      	ldrh	r3, [r7, #32]
 8004a94:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d020      	beq.n	8004ade <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8004a9c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d011      	beq.n	8004acc <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 8004aa8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8004aac:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d00b      	beq.n	8004acc <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <pb_decode_inner+0x1c6>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	e000      	b.n	8004ac4 <pb_decode_inner+0x1c8>
 8004ac2:	4b4a      	ldr	r3, [pc, #296]	; (8004bec <pb_decode_inner+0x2f0>)
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	60d3      	str	r3, [r2, #12]
 8004ac8:	2300      	movs	r3, #0
 8004aca:	e0ca      	b.n	8004c62 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 8004acc:	8c3b      	ldrh	r3, [r7, #32]
 8004ace:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 8004ad8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004ada:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 8004ade:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 8004ae2:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 8004ae4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004ae8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d11c      	bne.n	8004b2a <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 8004af0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004af2:	2b3f      	cmp	r3, #63	; 0x3f
 8004af4:	d819      	bhi.n	8004b2a <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8004af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004af8:	f003 031f 	and.w	r3, r3, #31
 8004afc:	2201      	movs	r2, #1
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 8004b04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	3368      	adds	r3, #104	; 0x68
 8004b0e:	443b      	add	r3, r7
 8004b10:	f853 2c28 	ldr.w	r2, [r3, #-40]
 8004b14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	4619      	mov	r1, r3
 8004b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b1e:	431a      	orrs	r2, r3
 8004b20:	008b      	lsls	r3, r1, #2
 8004b22:	3368      	adds	r3, #104	; 0x68
 8004b24:	443b      	add	r3, r7
 8004b26:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 8004b2a:	7cfb      	ldrb	r3, [r7, #19]
 8004b2c:	f107 0218 	add.w	r2, r7, #24
 8004b30:	4619      	mov	r1, r3
 8004b32:	68f8      	ldr	r0, [r7, #12]
 8004b34:	f7ff fcf0 	bl	8004518 <decode_field>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	f083 0301 	eor.w	r3, r3, #1
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d004      	beq.n	8004b4e <pb_decode_inner+0x252>
            return false;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e08c      	b.n	8004c62 <pb_decode_inner+0x366>
                    continue;
 8004b48:	bf00      	nop
 8004b4a:	e000      	b.n	8004b4e <pb_decode_inner+0x252>
            continue;
 8004b4c:	bf00      	nop
    while (stream->bytes_left)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	f47f af17 	bne.w	8004986 <pb_decode_inner+0x8a>
 8004b58:	e002      	b.n	8004b60 <pb_decode_inner+0x264>
                break;
 8004b5a:	bf00      	nop
 8004b5c:	e000      	b.n	8004b60 <pb_decode_inner+0x264>
            break;
 8004b5e:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8004b60:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d011      	beq.n	8004b90 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8004b6c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8004b70:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d00b      	beq.n	8004b90 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d002      	beq.n	8004b86 <pb_decode_inner+0x28a>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	e000      	b.n	8004b88 <pb_decode_inner+0x28c>
 8004b86:	4b19      	ldr	r3, [pc, #100]	; (8004bec <pb_decode_inner+0x2f0>)
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	60d3      	str	r3, [r2, #12]
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e068      	b.n	8004c62 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	8a5b      	ldrh	r3, [r3, #18]
 8004b94:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 8004b98:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d05f      	beq.n	8004c60 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8004ba0:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d902      	bls.n	8004bae <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 8004ba8:	2340      	movs	r3, #64	; 0x40
 8004baa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8004bae:	2300      	movs	r3, #0
 8004bb0:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8004bb4:	e023      	b.n	8004bfe <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 8004bb6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	3368      	adds	r3, #104	; 0x68
 8004bbe:	443b      	add	r3, r7
 8004bc0:	f853 3c28 	ldr.w	r3, [r3, #-40]
 8004bc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d014      	beq.n	8004bf4 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <pb_decode_inner+0x2dc>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	e000      	b.n	8004bda <pb_decode_inner+0x2de>
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <pb_decode_inner+0x2f4>)
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	60d3      	str	r3, [r2, #12]
 8004bde:	2300      	movs	r3, #0
 8004be0:	e03f      	b.n	8004c62 <pb_decode_inner+0x366>
 8004be2:	bf00      	nop
 8004be4:	0800b838 	.word	0x0800b838
 8004be8:	0800b888 	.word	0x0800b888
 8004bec:	0800b894 	.word	0x0800b894
 8004bf0:	0800b8b8 	.word	0x0800b8b8
            for (i = 0; i < (req_field_count >> 5); i++)
 8004bf4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8004bfe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d3d3      	bcc.n	8004bb6 <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 8004c0e:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004c12:	f003 031f 	and.w	r3, r3, #31
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d022      	beq.n	8004c60 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8004c1a:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004c1e:	095b      	lsrs	r3, r3, #5
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	3368      	adds	r3, #104	; 0x68
 8004c26:	443b      	add	r3, r7
 8004c28:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8004c2c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	f003 031f 	and.w	r3, r3, #31
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	f1c3 0320 	rsb	r3, r3, #32
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c42:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d00b      	beq.n	8004c60 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <pb_decode_inner+0x35a>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	e000      	b.n	8004c58 <pb_decode_inner+0x35c>
 8004c56:	4b05      	ldr	r3, [pc, #20]	; (8004c6c <pb_decode_inner+0x370>)
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	60d3      	str	r3, [r2, #12]
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e000      	b.n	8004c62 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8004c60:	2301      	movs	r3, #1
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3768      	adds	r7, #104	; 0x68
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	0800b8b8 	.word	0x0800b8b8

08004c70 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	687a      	ldr	r2, [r7, #4]
 8004c80:	68b9      	ldr	r1, [r7, #8]
 8004c82:	68f8      	ldr	r0, [r7, #12]
 8004c84:	f7ff fe3a 	bl	80048fc <pb_decode_inner>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
 8004c9e:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8004ca0:	f107 030c 	add.w	r3, r7, #12
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fe ff70 	bl	8003b8c <pb_decode_varint32>
 8004cac:	4603      	mov	r3, r0
 8004cae:	f083 0301 	eor.w	r3, r3, #1
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <pb_decode_bool+0x26>
        return false;
 8004cb8:	2300      	movs	r3, #0
 8004cba:	e008      	b.n	8004cce <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	bf14      	ite	ne
 8004cc2:	2301      	movne	r3, #1
 8004cc4:	2300      	moveq	r3, #0
 8004cc6:	b2da      	uxtb	r2, r3
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	701a      	strb	r2, [r3, #0]
    return true;
 8004ccc:	2301      	movs	r3, #1
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 8004cd6:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 8004ce2:	f107 0308 	add.w	r3, r7, #8
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7fe ff5f 	bl	8003bac <pb_decode_varint>
 8004cee:	4603      	mov	r3, r0
 8004cf0:	f083 0301 	eor.w	r3, r3, #1
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d001      	beq.n	8004cfe <pb_decode_svarint+0x28>
        return false;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	e029      	b.n	8004d52 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 8004cfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d02:	f002 0401 	and.w	r4, r2, #1
 8004d06:	2500      	movs	r5, #0
 8004d08:	ea54 0305 	orrs.w	r3, r4, r5
 8004d0c:	d013      	beq.n	8004d36 <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 8004d0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d12:	f04f 0200 	mov.w	r2, #0
 8004d16:	f04f 0300 	mov.w	r3, #0
 8004d1a:	0842      	lsrs	r2, r0, #1
 8004d1c:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004d20:	084b      	lsrs	r3, r1, #1
 8004d22:	ea6f 0802 	mvn.w	r8, r2
 8004d26:	ea6f 0903 	mvn.w	r9, r3
 8004d2a:	4642      	mov	r2, r8
 8004d2c:	464b      	mov	r3, r9
 8004d2e:	6839      	ldr	r1, [r7, #0]
 8004d30:	e9c1 2300 	strd	r2, r3, [r1]
 8004d34:	e00c      	b.n	8004d50 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 8004d36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004d3a:	f04f 0200 	mov.w	r2, #0
 8004d3e:	f04f 0300 	mov.w	r3, #0
 8004d42:	0842      	lsrs	r2, r0, #1
 8004d44:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004d48:	084b      	lsrs	r3, r1, #1
 8004d4a:	6839      	ldr	r1, [r7, #0]
 8004d4c:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8004d50:	2301      	movs	r3, #1
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3710      	adds	r7, #16
 8004d56:	46bd      	mov	sp, r7
 8004d58:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004d5c <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 8004d66:	f107 030c 	add.w	r3, r7, #12
 8004d6a:	2204      	movs	r2, #4
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fe fd92 	bl	8003898 <pb_read>
 8004d74:	4603      	mov	r3, r0
 8004d76:	f083 0301 	eor.w	r3, r3, #1
 8004d7a:	b2db      	uxtb	r3, r3
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <pb_decode_fixed32+0x28>
        return false;
 8004d80:	2300      	movs	r3, #0
 8004d82:	e003      	b.n	8004d8c <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 8004d8a:	2301      	movs	r3, #1
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3710      	adds	r7, #16
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8004d9e:	f107 0308 	add.w	r3, r7, #8
 8004da2:	2208      	movs	r2, #8
 8004da4:	4619      	mov	r1, r3
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fe fd76 	bl	8003898 <pb_read>
 8004dac:	4603      	mov	r3, r0
 8004dae:	f083 0301 	eor.w	r3, r3, #1
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d001      	beq.n	8004dbc <pb_decode_fixed64+0x28>
        return false;
 8004db8:	2300      	movs	r3, #0
 8004dba:	e005      	b.n	8004dc8 <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 8004dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004dc0:	6839      	ldr	r1, [r7, #0]
 8004dc2:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 8004dc6:	2301      	movs	r3, #1
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	3710      	adds	r7, #16
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	4619      	mov	r1, r3
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff ff58 	bl	8004c96 <pb_decode_bool>
 8004de6:	4603      	mov	r3, r0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3708      	adds	r7, #8
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}

08004df0 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004df4:	b094      	sub	sp, #80	; 0x50
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	6278      	str	r0, [r7, #36]	; 0x24
 8004dfa:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8004dfc:	6a3b      	ldr	r3, [r7, #32]
 8004dfe:	7d9b      	ldrb	r3, [r3, #22]
 8004e00:	f003 030f 	and.w	r3, r3, #15
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d179      	bne.n	8004efc <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 8004e08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e10:	f7fe fecc 	bl	8003bac <pb_decode_varint>
 8004e14:	4603      	mov	r3, r0
 8004e16:	f083 0301 	eor.w	r3, r3, #1
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d001      	beq.n	8004e24 <pb_dec_varint+0x34>
            return false;
 8004e20:	2300      	movs	r3, #0
 8004e22:	e107      	b.n	8005034 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8004e24:	6a3b      	ldr	r3, [r7, #32]
 8004e26:	8a5b      	ldrh	r3, [r3, #18]
 8004e28:	2b08      	cmp	r3, #8
 8004e2a:	d10a      	bne.n	8004e42 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8004e2c:	6a3b      	ldr	r3, [r7, #32]
 8004e2e:	69d9      	ldr	r1, [r3, #28]
 8004e30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004e34:	e9c1 2300 	strd	r2, r3, [r1]
 8004e38:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004e3c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004e40:	e046      	b.n	8004ed0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 8004e42:	6a3b      	ldr	r3, [r7, #32]
 8004e44:	8a5b      	ldrh	r3, [r3, #18]
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	d10e      	bne.n	8004e68 <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 8004e4a:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	69db      	ldr	r3, [r3, #28]
 8004e52:	4602      	mov	r2, r0
 8004e54:	601a      	str	r2, [r3, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	613b      	str	r3, [r7, #16]
 8004e5c:	617a      	str	r2, [r7, #20]
 8004e5e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004e62:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8004e66:	e033      	b.n	8004ed0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	8a5b      	ldrh	r3, [r3, #18]
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d10f      	bne.n	8004e90 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8004e70:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004e74:	6a3b      	ldr	r3, [r7, #32]
 8004e76:	69db      	ldr	r3, [r3, #28]
 8004e78:	b282      	uxth	r2, r0
 8004e7a:	801a      	strh	r2, [r3, #0]
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	2200      	movs	r2, #0
 8004e82:	60bb      	str	r3, [r7, #8]
 8004e84:	60fa      	str	r2, [r7, #12]
 8004e86:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004e8a:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8004e8e:	e01f      	b.n	8004ed0 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	8a5b      	ldrh	r3, [r3, #18]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d10f      	bne.n	8004eb8 <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 8004e98:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	b2c2      	uxtb	r2, r0
 8004ea2:	701a      	strb	r2, [r3, #0]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	603b      	str	r3, [r7, #0]
 8004eac:	607a      	str	r2, [r7, #4]
 8004eae:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004eb2:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8004eb6:	e00b      	b.n	8004ed0 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d002      	beq.n	8004ec6 <pb_dec_varint+0xd6>
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	e000      	b.n	8004ec8 <pb_dec_varint+0xd8>
 8004ec6:	4b5e      	ldr	r3, [pc, #376]	; (8005040 <pb_dec_varint+0x250>)
 8004ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eca:	60d3      	str	r3, [r2, #12]
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e0b1      	b.n	8005034 <pb_dec_varint+0x244>

        if (clamped != value)
 8004ed0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ed4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ed8:	4299      	cmp	r1, r3
 8004eda:	bf08      	it	eq
 8004edc:	4290      	cmpeq	r0, r2
 8004ede:	d00b      	beq.n	8004ef8 <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d002      	beq.n	8004eee <pb_dec_varint+0xfe>
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	e000      	b.n	8004ef0 <pb_dec_varint+0x100>
 8004eee:	4b55      	ldr	r3, [pc, #340]	; (8005044 <pb_dec_varint+0x254>)
 8004ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ef2:	60d3      	str	r3, [r2, #12]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	e09d      	b.n	8005034 <pb_dec_varint+0x244>

        return true;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e09b      	b.n	8005034 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	7d9b      	ldrb	r3, [r3, #22]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d10d      	bne.n	8004f24 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 8004f08:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f10:	f7ff fee1 	bl	8004cd6 <pb_decode_svarint>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f083 0301 	eor.w	r3, r3, #1
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d022      	beq.n	8004f66 <pb_dec_varint+0x176>
                return false;
 8004f20:	2300      	movs	r3, #0
 8004f22:	e087      	b.n	8005034 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8004f24:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004f28:	4619      	mov	r1, r3
 8004f2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f2c:	f7fe fe3e 	bl	8003bac <pb_decode_varint>
 8004f30:	4603      	mov	r3, r0
 8004f32:	f083 0301 	eor.w	r3, r3, #1
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d001      	beq.n	8004f40 <pb_dec_varint+0x150>
                return false;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	e079      	b.n	8005034 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8004f40:	6a3b      	ldr	r3, [r7, #32]
 8004f42:	8a5b      	ldrh	r3, [r3, #18]
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d104      	bne.n	8004f52 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 8004f48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004f4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004f50:	e009      	b.n	8004f66 <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 8004f52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004f56:	4613      	mov	r3, r2
 8004f58:	17da      	asrs	r2, r3, #31
 8004f5a:	61bb      	str	r3, [r7, #24]
 8004f5c:	61fa      	str	r2, [r7, #28]
 8004f5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f62:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	8a5b      	ldrh	r3, [r3, #18]
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d10a      	bne.n	8004f84 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 8004f6e:	6a3b      	ldr	r3, [r7, #32]
 8004f70:	69d9      	ldr	r1, [r3, #28]
 8004f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f76:	e9c1 2300 	strd	r2, r3, [r1]
 8004f7a:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004f7e:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004f82:	e042      	b.n	800500a <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	8a5b      	ldrh	r3, [r3, #18]
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d10c      	bne.n	8004fa6 <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 8004f8c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f90:	6a3b      	ldr	r3, [r7, #32]
 8004f92:	69db      	ldr	r3, [r3, #28]
 8004f94:	4602      	mov	r2, r0
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	17da      	asrs	r2, r3, #31
 8004f9c:	469a      	mov	sl, r3
 8004f9e:	4693      	mov	fp, r2
 8004fa0:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 8004fa4:	e031      	b.n	800500a <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	8a5b      	ldrh	r3, [r3, #18]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d10e      	bne.n	8004fcc <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 8004fae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fb2:	6a3b      	ldr	r3, [r7, #32]
 8004fb4:	69db      	ldr	r3, [r3, #28]
 8004fb6:	b202      	sxth	r2, r0
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004fbe:	b21b      	sxth	r3, r3
 8004fc0:	17da      	asrs	r2, r3, #31
 8004fc2:	4698      	mov	r8, r3
 8004fc4:	4691      	mov	r9, r2
 8004fc6:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 8004fca:	e01e      	b.n	800500a <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 8004fcc:	6a3b      	ldr	r3, [r7, #32]
 8004fce:	8a5b      	ldrh	r3, [r3, #18]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d10e      	bne.n	8004ff2 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 8004fd4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fd8:	6a3b      	ldr	r3, [r7, #32]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	b242      	sxtb	r2, r0
 8004fde:	701a      	strb	r2, [r3, #0]
 8004fe0:	f993 3000 	ldrsb.w	r3, [r3]
 8004fe4:	b25b      	sxtb	r3, r3
 8004fe6:	17da      	asrs	r2, r3, #31
 8004fe8:	461c      	mov	r4, r3
 8004fea:	4615      	mov	r5, r2
 8004fec:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 8004ff0:	e00b      	b.n	800500a <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d002      	beq.n	8005000 <pb_dec_varint+0x210>
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	e000      	b.n	8005002 <pb_dec_varint+0x212>
 8005000:	4b0f      	ldr	r3, [pc, #60]	; (8005040 <pb_dec_varint+0x250>)
 8005002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005004:	60d3      	str	r3, [r2, #12]
 8005006:	2300      	movs	r3, #0
 8005008:	e014      	b.n	8005034 <pb_dec_varint+0x244>

        if (clamped != svalue)
 800500a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800500e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005012:	4299      	cmp	r1, r3
 8005014:	bf08      	it	eq
 8005016:	4290      	cmpeq	r0, r2
 8005018:	d00b      	beq.n	8005032 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 800501a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <pb_dec_varint+0x238>
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	e000      	b.n	800502a <pb_dec_varint+0x23a>
 8005028:	4b06      	ldr	r3, [pc, #24]	; (8005044 <pb_dec_varint+0x254>)
 800502a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502c:	60d3      	str	r3, [r2, #12]
 800502e:	2300      	movs	r3, #0
 8005030:	e000      	b.n	8005034 <pb_dec_varint+0x244>

        return true;
 8005032:	2301      	movs	r3, #1
    }
}
 8005034:	4618      	mov	r0, r3
 8005036:	3750      	adds	r7, #80	; 0x50
 8005038:	46bd      	mov	sp, r7
 800503a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800503e:	bf00      	nop
 8005040:	0800b8d0 	.word	0x0800b8d0
 8005044:	0800b8e4 	.word	0x0800b8e4

08005048 <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 8005052:	f107 030c 	add.w	r3, r7, #12
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f7fe fd97 	bl	8003b8c <pb_decode_varint32>
 800505e:	4603      	mov	r3, r0
 8005060:	f083 0301 	eor.w	r3, r3, #1
 8005064:	b2db      	uxtb	r3, r3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <pb_dec_bytes+0x26>
        return false;
 800506a:	2300      	movs	r3, #0
 800506c:	e055      	b.n	800511a <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005074:	d30b      	bcc.n	800508e <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <pb_dec_bytes+0x3c>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	e000      	b.n	8005086 <pb_dec_bytes+0x3e>
 8005084:	4b27      	ldr	r3, [pc, #156]	; (8005124 <pb_dec_bytes+0xdc>)
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	60d3      	str	r3, [r2, #12]
 800508a:	2300      	movs	r3, #0
 800508c:	e045      	b.n	800511a <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	3302      	adds	r3, #2
 8005092:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	429a      	cmp	r2, r3
 800509a:	d20b      	bcs.n	80050b4 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <pb_dec_bytes+0x62>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	e000      	b.n	80050ac <pb_dec_bytes+0x64>
 80050aa:	4b1f      	ldr	r3, [pc, #124]	; (8005128 <pb_dec_bytes+0xe0>)
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	60d3      	str	r3, [r2, #12]
 80050b0:	2300      	movs	r3, #0
 80050b2:	e032      	b.n	800511a <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	7d9b      	ldrb	r3, [r3, #22]
 80050b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050bc:	2b80      	cmp	r3, #128	; 0x80
 80050be:	d10b      	bne.n	80050d8 <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <pb_dec_bytes+0x86>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	e000      	b.n	80050d0 <pb_dec_bytes+0x88>
 80050ce:	4b17      	ldr	r3, [pc, #92]	; (800512c <pb_dec_bytes+0xe4>)
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	60d3      	str	r3, [r2, #12]
 80050d4:	2300      	movs	r3, #0
 80050d6:	e020      	b.n	800511a <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	8a5b      	ldrh	r3, [r3, #18]
 80050dc:	461a      	mov	r2, r3
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d90b      	bls.n	80050fc <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <pb_dec_bytes+0xaa>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	68db      	ldr	r3, [r3, #12]
 80050f0:	e000      	b.n	80050f4 <pb_dec_bytes+0xac>
 80050f2:	4b0c      	ldr	r3, [pc, #48]	; (8005124 <pb_dec_bytes+0xdc>)
 80050f4:	687a      	ldr	r2, [r7, #4]
 80050f6:	60d3      	str	r3, [r2, #12]
 80050f8:	2300      	movs	r3, #0
 80050fa:	e00e      	b.n	800511a <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	b29a      	uxth	r2, r3
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	3302      	adds	r3, #2
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7fe fbc0 	bl	8003898 <pb_read>
 8005118:	4603      	mov	r3, r0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop
 8005124:	0800b8f8 	.word	0x0800b8f8
 8005128:	0800b908 	.word	0x0800b908
 800512c:	0800b850 	.word	0x0800b850

08005130 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8005140:	f107 030c 	add.w	r3, r7, #12
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fe fd20 	bl	8003b8c <pb_decode_varint32>
 800514c:	4603      	mov	r3, r0
 800514e:	f083 0301 	eor.w	r3, r3, #1
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b00      	cmp	r3, #0
 8005156:	d001      	beq.n	800515c <pb_dec_string+0x2c>
        return false;
 8005158:	2300      	movs	r3, #0
 800515a:	e05a      	b.n	8005212 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005162:	d10b      	bne.n	800517c <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d002      	beq.n	8005172 <pb_dec_string+0x42>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	e000      	b.n	8005174 <pb_dec_string+0x44>
 8005172:	4b2a      	ldr	r3, [pc, #168]	; (800521c <pb_dec_string+0xec>)
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	60d3      	str	r3, [r2, #12]
 8005178:	2300      	movs	r3, #0
 800517a:	e04a      	b.n	8005212 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	3301      	adds	r3, #1
 8005180:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	429a      	cmp	r2, r3
 8005188:	d20b      	bcs.n	80051a2 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68db      	ldr	r3, [r3, #12]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <pb_dec_string+0x68>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	e000      	b.n	800519a <pb_dec_string+0x6a>
 8005198:	4b20      	ldr	r3, [pc, #128]	; (800521c <pb_dec_string+0xec>)
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	60d3      	str	r3, [r2, #12]
 800519e:	2300      	movs	r3, #0
 80051a0:	e037      	b.n	8005212 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	7d9b      	ldrb	r3, [r3, #22]
 80051a6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051aa:	2b80      	cmp	r3, #128	; 0x80
 80051ac:	d10b      	bne.n	80051c6 <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <pb_dec_string+0x8c>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	e000      	b.n	80051be <pb_dec_string+0x8e>
 80051bc:	4b18      	ldr	r3, [pc, #96]	; (8005220 <pb_dec_string+0xf0>)
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	60d3      	str	r3, [r2, #12]
 80051c2:	2300      	movs	r3, #0
 80051c4:	e025      	b.n	8005212 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	8a5b      	ldrh	r3, [r3, #18]
 80051ca:	461a      	mov	r2, r3
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d90b      	bls.n	80051ea <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <pb_dec_string+0xb0>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	e000      	b.n	80051e2 <pb_dec_string+0xb2>
 80051e0:	4b10      	ldr	r3, [pc, #64]	; (8005224 <pb_dec_string+0xf4>)
 80051e2:	687a      	ldr	r2, [r7, #4]
 80051e4:	60d3      	str	r3, [r2, #12]
 80051e6:	2300      	movs	r3, #0
 80051e8:	e013      	b.n	8005212 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	697a      	ldr	r2, [r7, #20]
 80051ee:	4413      	add	r3, r2
 80051f0:	2200      	movs	r2, #0
 80051f2:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	461a      	mov	r2, r3
 80051f8:	6979      	ldr	r1, [r7, #20]
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fe fb4c 	bl	8003898 <pb_read>
 8005200:	4603      	mov	r3, r0
 8005202:	f083 0301 	eor.w	r3, r3, #1
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <pb_dec_string+0xe0>
        return false;
 800520c:	2300      	movs	r3, #0
 800520e:	e000      	b.n	8005212 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8005210:	2301      	movs	r3, #1
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	bf00      	nop
 800521c:	0800b908 	.word	0x0800b908
 8005220:	0800b850 	.word	0x0800b850
 8005224:	0800b918 	.word	0x0800b918

08005228 <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08a      	sub	sp, #40	; 0x28
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
    bool status = true;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 8005238:	2300      	movs	r3, #0
 800523a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 800523e:	f107 030c 	add.w	r3, r7, #12
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7fe fe2d 	bl	8003ea4 <pb_make_string_substream>
 800524a:	4603      	mov	r3, r0
 800524c:	f083 0301 	eor.w	r3, r3, #1
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <pb_dec_submessage+0x32>
        return false;
 8005256:	2300      	movs	r3, #0
 8005258:	e069      	b.n	800532e <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	2b00      	cmp	r3, #0
 8005260:	d10b      	bne.n	800527a <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	68db      	ldr	r3, [r3, #12]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <pb_dec_submessage+0x48>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	e000      	b.n	8005272 <pb_dec_submessage+0x4a>
 8005270:	4b31      	ldr	r3, [pc, #196]	; (8005338 <pb_dec_submessage+0x110>)
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	60d3      	str	r3, [r2, #12]
 8005276:	2300      	movs	r3, #0
 8005278:	e059      	b.n	800532e <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	7d9b      	ldrb	r3, [r3, #22]
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	2b09      	cmp	r3, #9
 8005284:	d11c      	bne.n	80052c0 <pb_dec_submessage+0x98>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d018      	beq.n	80052c0 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	3b08      	subs	r3, #8
 8005294:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d010      	beq.n	80052c0 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	69fa      	ldr	r2, [r7, #28]
 80052a4:	3204      	adds	r2, #4
 80052a6:	f107 000c 	add.w	r0, r7, #12
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	4798      	blx	r3
 80052ae:	4603      	mov	r3, r0
 80052b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d102      	bne.n	80052c0 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 80052ba:	2301      	movs	r3, #1
 80052bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 80052c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d022      	beq.n	800530e <pb_dec_submessage+0xe6>
 80052c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80052cc:	f083 0301 	eor.w	r3, r3, #1
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d01b      	beq.n	800530e <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 80052d6:	2300      	movs	r3, #0
 80052d8:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	7d9b      	ldrb	r3, [r3, #22]
 80052de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d107      	bne.n	80052f6 <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	7d9b      	ldrb	r3, [r3, #22]
 80052ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d001      	beq.n	80052f6 <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 80052f2:	2301      	movs	r3, #1
 80052f4:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	69da      	ldr	r2, [r3, #28]
 80052fe:	f107 000c 	add.w	r0, r7, #12
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	f7ff fafa 	bl	80048fc <pb_decode_inner>
 8005308:	4603      	mov	r3, r0
 800530a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 800530e:	f107 030c 	add.w	r3, r7, #12
 8005312:	4619      	mov	r1, r3
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7fe fdff 	bl	8003f18 <pb_close_string_substream>
 800531a:	4603      	mov	r3, r0
 800531c:	f083 0301 	eor.w	r3, r3, #1
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <pb_dec_submessage+0x102>
        return false;
 8005326:	2300      	movs	r3, #0
 8005328:	e001      	b.n	800532e <pb_dec_submessage+0x106>

    return status;
 800532a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800532e:	4618      	mov	r0, r3
 8005330:	3728      	adds	r7, #40	; 0x28
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	0800b928 	.word	0x0800b928

0800533c <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8005346:	f107 030c 	add.w	r3, r7, #12
 800534a:	4619      	mov	r1, r3
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7fe fc1d 	bl	8003b8c <pb_decode_varint32>
 8005352:	4603      	mov	r3, r0
 8005354:	f083 0301 	eor.w	r3, r3, #1
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <pb_dec_fixed_length_bytes+0x26>
        return false;
 800535e:	2300      	movs	r3, #0
 8005360:	e037      	b.n	80053d2 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005368:	d30b      	bcc.n	8005382 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d002      	beq.n	8005378 <pb_dec_fixed_length_bytes+0x3c>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	e000      	b.n	800537a <pb_dec_fixed_length_bytes+0x3e>
 8005378:	4b18      	ldr	r3, [pc, #96]	; (80053dc <pb_dec_fixed_length_bytes+0xa0>)
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	60d3      	str	r3, [r2, #12]
 800537e:	2300      	movs	r3, #0
 8005380:	e027      	b.n	80053d2 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d109      	bne.n	800539c <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	69d8      	ldr	r0, [r3, #28]
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	8a5b      	ldrh	r3, [r3, #18]
 8005390:	461a      	mov	r2, r3
 8005392:	2100      	movs	r1, #0
 8005394:	f005 fc9a 	bl	800accc <memset>
        return true;
 8005398:	2301      	movs	r3, #1
 800539a:	e01a      	b.n	80053d2 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	8a5b      	ldrh	r3, [r3, #18]
 80053a0:	461a      	mov	r2, r3
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d00b      	beq.n	80053c0 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	68db      	ldr	r3, [r3, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d002      	beq.n	80053b6 <pb_dec_fixed_length_bytes+0x7a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	e000      	b.n	80053b8 <pb_dec_fixed_length_bytes+0x7c>
 80053b6:	4b0a      	ldr	r3, [pc, #40]	; (80053e0 <pb_dec_fixed_length_bytes+0xa4>)
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	60d3      	str	r3, [r2, #12]
 80053bc:	2300      	movs	r3, #0
 80053be:	e008      	b.n	80053d2 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	69d9      	ldr	r1, [r3, #28]
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	8a5b      	ldrh	r3, [r3, #18]
 80053c8:	461a      	mov	r2, r3
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fe fa64 	bl	8003898 <pb_read>
 80053d0:	4603      	mov	r3, r0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	0800b8f8 	.word	0x0800b8f8
 80053e0:	0800b944 	.word	0x0800b944

080053e4 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	441a      	add	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	6978      	ldr	r0, [r7, #20]
 8005406:	f005 fd30 	bl	800ae6a <memcpy>
    
    return true;
 800540a:	2301      	movs	r3, #1
}
 800540c:	4618      	mov	r0, r3
 800540e:	3718      	adds	r7, #24
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 8005414:	b4b0      	push	{r4, r5, r7}
 8005416:	b08b      	sub	sp, #44	; 0x2c
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 8005420:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <pb_ostream_from_buffer+0x3c>)
 8005422:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 800542c:	2300      	movs	r3, #0
 800542e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8005430:	2300      	movs	r3, #0
 8005432:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	461d      	mov	r5, r3
 8005438:	f107 0414 	add.w	r4, r7, #20
 800543c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800543e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005440:	6823      	ldr	r3, [r4, #0]
 8005442:	602b      	str	r3, [r5, #0]
}
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	372c      	adds	r7, #44	; 0x2c
 8005448:	46bd      	mov	sp, r7
 800544a:	bcb0      	pop	{r4, r5, r7}
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	080053e5 	.word	0x080053e5

08005454 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d037      	beq.n	80054d6 <pb_write+0x82>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d033      	beq.n	80054d6 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	441a      	add	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	429a      	cmp	r2, r3
 800547c:	d307      	bcc.n	800548e <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	441a      	add	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 800548a:	429a      	cmp	r2, r3
 800548c:	d90b      	bls.n	80054a6 <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <pb_write+0x48>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	e000      	b.n	800549e <pb_write+0x4a>
 800549c:	4b13      	ldr	r3, [pc, #76]	; (80054ec <pb_write+0x98>)
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	6113      	str	r3, [r2, #16]
 80054a2:	2300      	movs	r3, #0
 80054a4:	e01e      	b.n	80054e4 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	4798      	blx	r3
 80054b2:	4603      	mov	r3, r0
 80054b4:	f083 0301 	eor.w	r3, r3, #1
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d002      	beq.n	80054cc <pb_write+0x78>
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	e000      	b.n	80054ce <pb_write+0x7a>
 80054cc:	4b08      	ldr	r3, [pc, #32]	; (80054f0 <pb_write+0x9c>)
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	6113      	str	r3, [r2, #16]
 80054d2:	2300      	movs	r3, #0
 80054d4:	e006      	b.n	80054e4 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	68da      	ldr	r2, [r3, #12]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	441a      	add	r2, r3
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	60da      	str	r2, [r3, #12]
    return true;
 80054e2:	2301      	movs	r3, #1
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	0800b968 	.word	0x0800b968
 80054f0:	0800b974 	.word	0x0800b974

080054f4 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 8005500:	2300      	movs	r3, #0
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	e00a      	b.n	800551c <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d001      	beq.n	8005516 <safe_read_bool+0x22>
            return true;
 8005512:	2301      	movs	r3, #1
 8005514:	e006      	b.n	8005524 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3301      	adds	r3, #1
 800551a:	60fb      	str	r3, [r7, #12]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d0f1      	beq.n	8005506 <safe_read_bool+0x12>
    }
    return false;
 8005522:	2300      	movs	r3, #0
}
 8005524:	4618      	mov	r0, r3
 8005526:	3714      	adds	r7, #20
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr

08005530 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8005530:	b5b0      	push	{r4, r5, r7, lr}
 8005532:	b08c      	sub	sp, #48	; 0x30
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (count == 0)
 8005542:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005544:	2b00      	cmp	r3, #0
 8005546:	d101      	bne.n	800554c <encode_array+0x1c>
        return true;
 8005548:	2301      	movs	r3, #1
 800554a:	e13d      	b.n	80057c8 <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	7d9b      	ldrb	r3, [r3, #22]
 8005550:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005554:	2b80      	cmp	r3, #128	; 0x80
 8005556:	d010      	beq.n	800557a <encode_array+0x4a>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	8a9b      	ldrh	r3, [r3, #20]
 800555c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800555e:	429a      	cmp	r2, r3
 8005560:	d90b      	bls.n	800557a <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <encode_array+0x40>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	e000      	b.n	8005572 <encode_array+0x42>
 8005570:	4b97      	ldr	r3, [pc, #604]	; (80057d0 <encode_array+0x2a0>)
 8005572:	687a      	ldr	r2, [r7, #4]
 8005574:	6113      	str	r3, [r2, #16]
 8005576:	2300      	movs	r3, #0
 8005578:	e126      	b.n	80057c8 <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	7d9b      	ldrb	r3, [r3, #22]
 800557e:	f003 030f 	and.w	r3, r3, #15
 8005582:	2b05      	cmp	r3, #5
 8005584:	f200 80b3 	bhi.w	80056ee <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	8a1b      	ldrh	r3, [r3, #16]
 800558c:	461a      	mov	r2, r3
 800558e:	2102      	movs	r1, #2
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fcdd 	bl	8005f50 <pb_encode_tag>
 8005596:	4603      	mov	r3, r0
 8005598:	f083 0301 	eor.w	r3, r3, #1
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <encode_array+0x76>
            return false;
 80055a2:	2300      	movs	r3, #0
 80055a4:	e110      	b.n	80057c8 <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	7d9b      	ldrb	r3, [r3, #22]
 80055aa:	f003 030f 	and.w	r3, r3, #15
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	d103      	bne.n	80055ba <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 80055b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80055b8:	e047      	b.n	800564a <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	7d9b      	ldrb	r3, [r3, #22]
 80055be:	f003 030f 	and.w	r3, r3, #15
 80055c2:	2b05      	cmp	r3, #5
 80055c4:	d103      	bne.n	80055ce <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 80055c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80055cc:	e03d      	b.n	800564a <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 80055ce:	f107 0308 	add.w	r3, r7, #8
 80055d2:	2200      	movs	r2, #0
 80055d4:	601a      	str	r2, [r3, #0]
 80055d6:	605a      	str	r2, [r3, #4]
 80055d8:	609a      	str	r2, [r3, #8]
 80055da:	60da      	str	r2, [r3, #12]
 80055dc:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 80055e4:	2300      	movs	r3, #0
 80055e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80055e8:	e026      	b.n	8005638 <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 80055ea:	f107 0308 	add.w	r3, r7, #8
 80055ee:	6839      	ldr	r1, [r7, #0]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 fdef 	bl	80061d4 <pb_enc_varint>
 80055f6:	4603      	mov	r3, r0
 80055f8:	f083 0301 	eor.w	r3, r3, #1
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d010      	beq.n	8005624 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <encode_array+0xe0>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	e005      	b.n	800561c <encode_array+0xec>
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d001      	beq.n	800561a <encode_array+0xea>
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	e000      	b.n	800561c <encode_array+0xec>
 800561a:	4b6e      	ldr	r3, [pc, #440]	; (80057d4 <encode_array+0x2a4>)
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	6113      	str	r3, [r2, #16]
 8005620:	2300      	movs	r3, #0
 8005622:	e0d1      	b.n	80057c8 <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	69db      	ldr	r3, [r3, #28]
 8005628:	683a      	ldr	r2, [r7, #0]
 800562a:	8a52      	ldrh	r2, [r2, #18]
 800562c:	441a      	add	r2, r3
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 8005632:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005634:	3301      	adds	r3, #1
 8005636:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005638:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800563a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800563c:	429a      	cmp	r2, r3
 800563e:	d3d4      	bcc.n	80055ea <encode_array+0xba>
            }
            field->pData = pData_orig;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800564a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564c:	2200      	movs	r2, #0
 800564e:	461c      	mov	r4, r3
 8005650:	4615      	mov	r5, r2
 8005652:	4622      	mov	r2, r4
 8005654:	462b      	mov	r3, r5
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fbf7 	bl	8005e4a <pb_encode_varint>
 800565c:	4603      	mov	r3, r0
 800565e:	f083 0301 	eor.w	r3, r3, #1
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <encode_array+0x13c>
            return false;
 8005668:	2300      	movs	r3, #0
 800566a:	e0ad      	b.n	80057c8 <encode_array+0x298>
        
        if (stream->callback == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d106      	bne.n	8005682 <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005674:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005676:	2100      	movs	r1, #0
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f7ff feeb 	bl	8005454 <pb_write>
 800567e:	4603      	mov	r3, r0
 8005680:	e0a2      	b.n	80057c8 <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 8005682:	2300      	movs	r3, #0
 8005684:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8005686:	e02d      	b.n	80056e4 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	7d9b      	ldrb	r3, [r3, #22]
 800568c:	f003 030f 	and.w	r3, r3, #15
 8005690:	2b04      	cmp	r3, #4
 8005692:	d005      	beq.n	80056a0 <encode_array+0x170>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	7d9b      	ldrb	r3, [r3, #22]
 8005698:	f003 030f 	and.w	r3, r3, #15
 800569c:	2b05      	cmp	r3, #5
 800569e:	d10b      	bne.n	80056b8 <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fe58 	bl	8006358 <pb_enc_fixed>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f083 0301 	eor.w	r3, r3, #1
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00d      	beq.n	80056d0 <encode_array+0x1a0>
                    return false;
 80056b4:	2300      	movs	r3, #0
 80056b6:	e087      	b.n	80057c8 <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 80056b8:	6839      	ldr	r1, [r7, #0]
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fd8a 	bl	80061d4 <pb_enc_varint>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f083 0301 	eor.w	r3, r3, #1
 80056c6:	b2db      	uxtb	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <encode_array+0x1a0>
                    return false;
 80056cc:	2300      	movs	r3, #0
 80056ce:	e07b      	b.n	80057c8 <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	8a52      	ldrh	r2, [r2, #18]
 80056d8:	441a      	add	r2, r3
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80056de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80056e0:	3301      	adds	r3, #1
 80056e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80056e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80056e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d3cd      	bcc.n	8005688 <encode_array+0x158>
 80056ec:	e06b      	b.n	80057c6 <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 80056ee:	2300      	movs	r3, #0
 80056f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80056f2:	e064      	b.n	80057be <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	7d9b      	ldrb	r3, [r3, #22]
 80056f8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80056fc:	2b80      	cmp	r3, #128	; 0x80
 80056fe:	d147      	bne.n	8005790 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	7d9b      	ldrb	r3, [r3, #22]
 8005704:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 8005708:	2b07      	cmp	r3, #7
 800570a:	d005      	beq.n	8005718 <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	7d9b      	ldrb	r3, [r3, #22]
 8005710:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8005714:	2b06      	cmp	r3, #6
 8005716:	d13b      	bne.n	8005790 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	681a      	ldr	r2, [r3, #0]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	69db      	ldr	r3, [r3, #28]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d11c      	bne.n	800576a <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fc36 	bl	8005fa4 <pb_encode_tag_for_field>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00b      	beq.n	8005756 <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f000 fb7f 	bl	8005e4a <pb_encode_varint>
 800574c:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 800574e:	2b00      	cmp	r3, #0
 8005750:	d001      	beq.n	8005756 <encode_array+0x226>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <encode_array+0x228>
 8005756:	2300      	movs	r3, #0
 8005758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800575c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005768:	e006      	b.n	8005778 <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 800576a:	6839      	ldr	r1, [r7, #0]
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f951 	bl	8005a14 <encode_basic_field>
 8005772:	4603      	mov	r3, r0
 8005774:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                field->pData = pData_orig;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	6a3a      	ldr	r2, [r7, #32]
 800577c:	61da      	str	r2, [r3, #28]

                if (!status)
 800577e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005782:	f083 0301 	eor.w	r3, r3, #1
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00d      	beq.n	80057a8 <encode_array+0x278>
                    return false;
 800578c:	2300      	movs	r3, #0
 800578e:	e01b      	b.n	80057c8 <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f000 f93e 	bl	8005a14 <encode_basic_field>
 8005798:	4603      	mov	r3, r0
 800579a:	f083 0301 	eor.w	r3, r3, #1
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d002      	beq.n	80057aa <encode_array+0x27a>
                    return false;
 80057a4:	2300      	movs	r3, #0
 80057a6:	e00f      	b.n	80057c8 <encode_array+0x298>
            {
 80057a8:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	8a52      	ldrh	r2, [r2, #18]
 80057b2:	441a      	add	r2, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80057b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80057ba:	3301      	adds	r3, #1
 80057bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80057be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80057c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d396      	bcc.n	80056f4 <encode_array+0x1c4>
        }
    }
    
    return true;
 80057c6:	2301      	movs	r3, #1
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	3730      	adds	r7, #48	; 0x30
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bdb0      	pop	{r4, r5, r7, pc}
 80057d0:	0800b980 	.word	0x0800b980
 80057d4:	0800b998 	.word	0x0800b998

080057d8 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b092      	sub	sp, #72	; 0x48
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	7d9b      	ldrb	r3, [r3, #22]
 80057e4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80057e8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80057ec:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	f040 80c9 	bne.w	8005988 <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80057f6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80057fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d101      	bne.n	8005806 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 8005802:	2300      	movs	r3, #0
 8005804:	e100      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8005806:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800580a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800580e:	2b20      	cmp	r3, #32
 8005810:	d108      	bne.n	8005824 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	881b      	ldrh	r3, [r3, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	bf0c      	ite	eq
 800581c:	2301      	moveq	r3, #1
 800581e:	2300      	movne	r3, #0
 8005820:	b2db      	uxtb	r3, r3
 8005822:	e0f1      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8005824:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005828:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800582c:	2b30      	cmp	r3, #48	; 0x30
 800582e:	d108      	bne.n	8005842 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	881b      	ldrh	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	bf0c      	ite	eq
 800583a:	2301      	moveq	r3, #1
 800583c:	2300      	movne	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	e0e2      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8005842:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005846:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800584a:	2b10      	cmp	r3, #16
 800584c:	d115      	bne.n	800587a <pb_check_proto3_default_value+0xa2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d011      	beq.n	800587a <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	4618      	mov	r0, r3
 800585c:	f7ff fe4a 	bl	80054f4 <safe_read_bool>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	bf14      	ite	ne
 8005866:	2301      	movne	r3, #1
 8005868:	2300      	moveq	r3, #0
 800586a:	b2db      	uxtb	r3, r3
 800586c:	f083 0301 	eor.w	r3, r3, #1
 8005870:	b2db      	uxtb	r3, r3
 8005872:	f003 0301 	and.w	r3, r3, #1
 8005876:	b2db      	uxtb	r3, r3
 8005878:	e0c6      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d001      	beq.n	8005888 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8005884:	2300      	movs	r3, #0
 8005886:	e0bf      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8005888:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	2b05      	cmp	r3, #5
 8005892:	d81c      	bhi.n	80058ce <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	637b      	str	r3, [r7, #52]	; 0x34
            for (i = 0; i < field->data_size; i++)
 800589a:	2300      	movs	r3, #0
 800589c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80058a0:	e00d      	b.n	80058be <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 80058a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80058a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a8:	4413      	add	r3, r2
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 80058b0:	2300      	movs	r3, #0
 80058b2:	e0a9      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 80058b4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80058b8:	3301      	adds	r3, #1
 80058ba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	8a5b      	ldrh	r3, [r3, #18]
 80058c2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d3eb      	bcc.n	80058a2 <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e09c      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 80058ce:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80058d2:	f003 030f 	and.w	r3, r3, #15
 80058d6:	2b06      	cmp	r3, #6
 80058d8:	d10a      	bne.n	80058f0 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	63bb      	str	r3, [r7, #56]	; 0x38
            return bytes->size == 0;
 80058e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e2:	881b      	ldrh	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	bf0c      	ite	eq
 80058e8:	2301      	moveq	r3, #1
 80058ea:	2300      	movne	r3, #0
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	e08b      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 80058f0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	2b07      	cmp	r3, #7
 80058fa:	d108      	bne.n	800590e <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	69db      	ldr	r3, [r3, #28]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	bf0c      	ite	eq
 8005906:	2301      	moveq	r3, #1
 8005908:	2300      	movne	r3, #0
 800590a:	b2db      	uxtb	r3, r3
 800590c:	e07c      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800590e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	2b0b      	cmp	r3, #11
 8005918:	d107      	bne.n	800592a <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	8a5b      	ldrh	r3, [r3, #18]
 800591e:	2b00      	cmp	r3, #0
 8005920:	bf0c      	ite	eq
 8005922:	2301      	moveq	r3, #1
 8005924:	2300      	movne	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	e06e      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 800592a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800592e:	f003 030f 	and.w	r3, r3, #15
 8005932:	2b08      	cmp	r3, #8
 8005934:	d005      	beq.n	8005942 <pb_check_proto3_default_value+0x16a>
 8005936:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800593a:	f003 030f 	and.w	r3, r3, #15
 800593e:	2b09      	cmp	r3, #9
 8005940:	d161      	bne.n	8005a06 <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	69da      	ldr	r2, [r3, #28]
 800594a:	f107 030c 	add.w	r3, r7, #12
 800594e:	4618      	mov	r0, r3
 8005950:	f7fd fe37 	bl	80035c2 <pb_field_iter_begin>
 8005954:	4603      	mov	r3, r0
 8005956:	2b00      	cmp	r3, #0
 8005958:	d014      	beq.n	8005984 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 800595a:	f107 030c 	add.w	r3, r7, #12
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff ff3a 	bl	80057d8 <pb_check_proto3_default_value>
 8005964:	4603      	mov	r3, r0
 8005966:	f083 0301 	eor.w	r3, r3, #1
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d001      	beq.n	8005974 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8005970:	2300      	movs	r3, #0
 8005972:	e049      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8005974:	f107 030c 	add.w	r3, r7, #12
 8005978:	4618      	mov	r0, r3
 800597a:	f7fd fe6b 	bl	8003654 <pb_field_iter_next>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1ea      	bne.n	800595a <pb_check_proto3_default_value+0x182>
            }
            return true;
 8005984:	2301      	movs	r3, #1
 8005986:	e03f      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8005988:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800598c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005990:	2b80      	cmp	r3, #128	; 0x80
 8005992:	d107      	bne.n	80059a4 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	2b00      	cmp	r3, #0
 800599a:	bf0c      	ite	eq
 800599c:	2301      	moveq	r3, #1
 800599e:	2300      	movne	r3, #0
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	e031      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 80059a4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80059a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059ac:	2b40      	cmp	r3, #64	; 0x40
 80059ae:	d12a      	bne.n	8005a06 <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80059b0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	2b0a      	cmp	r3, #10
 80059ba:	d10a      	bne.n	80059d2 <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	69db      	ldr	r3, [r3, #28]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	63fb      	str	r3, [r7, #60]	; 0x3c
            return extension == NULL;
 80059c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bf0c      	ite	eq
 80059ca:	2301      	moveq	r3, #1
 80059cc:	2300      	movne	r3, #0
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	e01a      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4a0d      	ldr	r2, [pc, #52]	; (8005a10 <pb_check_proto3_default_value+0x238>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d10a      	bne.n	80059f4 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	643b      	str	r3, [r7, #64]	; 0x40
            return pCallback->funcs.encode == NULL;
 80059e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	bf0c      	ite	eq
 80059ec:	2301      	moveq	r3, #1
 80059ee:	2300      	movne	r3, #0
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	e009      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	bf0c      	ite	eq
 80059fe:	2301      	moveq	r3, #1
 8005a00:	2300      	movne	r3, #0
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	e000      	b.n	8005a08 <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3748      	adds	r7, #72	; 0x48
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	080037f7 	.word	0x080037f7

08005a14 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d101      	bne.n	8005a2a <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e061      	b.n	8005aee <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 8005a2a:	6839      	ldr	r1, [r7, #0]
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fab9 	bl	8005fa4 <pb_encode_tag_for_field>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f083 0301 	eor.w	r3, r3, #1
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <encode_basic_field+0x2e>
        return false;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e055      	b.n	8005aee <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	7d9b      	ldrb	r3, [r3, #22]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	2b0b      	cmp	r3, #11
 8005a4c:	d844      	bhi.n	8005ad8 <encode_basic_field+0xc4>
 8005a4e:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <encode_basic_field+0x40>)
 8005a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a54:	08005a85 	.word	0x08005a85
 8005a58:	08005a91 	.word	0x08005a91
 8005a5c:	08005a91 	.word	0x08005a91
 8005a60:	08005a91 	.word	0x08005a91
 8005a64:	08005a9d 	.word	0x08005a9d
 8005a68:	08005a9d 	.word	0x08005a9d
 8005a6c:	08005aa9 	.word	0x08005aa9
 8005a70:	08005ab5 	.word	0x08005ab5
 8005a74:	08005ac1 	.word	0x08005ac1
 8005a78:	08005ac1 	.word	0x08005ac1
 8005a7c:	08005ad9 	.word	0x08005ad9
 8005a80:	08005acd 	.word	0x08005acd
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 8005a84:	6839      	ldr	r1, [r7, #0]
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fb8a 	bl	80061a0 <pb_enc_bool>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	e02e      	b.n	8005aee <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fb9e 	bl	80061d4 <pb_enc_varint>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	e028      	b.n	8005aee <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fc5a 	bl	8006358 <pb_enc_fixed>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	e022      	b.n	8005aee <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 8005aa8:	6839      	ldr	r1, [r7, #0]
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fc82 	bl	80063b4 <pb_enc_bytes>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	e01c      	b.n	8005aee <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 8005ab4:	6839      	ldr	r1, [r7, #0]
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 fcba 	bl	8006430 <pb_enc_string>
 8005abc:	4603      	mov	r3, r0
 8005abe:	e016      	b.n	8005aee <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 8005ac0:	6839      	ldr	r1, [r7, #0]
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 fd12 	bl	80064ec <pb_enc_submessage>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	e010      	b.n	8005aee <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fd52 	bl	8006578 <pb_enc_fixed_length_bytes>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	e00a      	b.n	8005aee <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <encode_basic_field+0xd2>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	e000      	b.n	8005ae8 <encode_basic_field+0xd4>
 8005ae6:	4b04      	ldr	r3, [pc, #16]	; (8005af8 <encode_basic_field+0xe4>)
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	6113      	str	r3, [r2, #16]
 8005aec:	2300      	movs	r3, #0
    }
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	0800b9a0 	.word	0x0800b9a0

08005afc <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b082      	sub	sp, #8
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d018      	beq.n	8005b42 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	4798      	blx	r3
 8005b1e:	4603      	mov	r3, r0
 8005b20:	f083 0301 	eor.w	r3, r3, #1
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00b      	beq.n	8005b42 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <encode_callback_field+0x3c>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	e000      	b.n	8005b3a <encode_callback_field+0x3e>
 8005b38:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <encode_callback_field+0x50>)
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	6113      	str	r3, [r2, #16]
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e000      	b.n	8005b44 <encode_callback_field+0x48>
    }
    return true;
 8005b42:	2301      	movs	r3, #1
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	0800b9b4 	.word	0x0800b9b4

08005b50 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	7d9b      	ldrb	r3, [r3, #22]
 8005b5e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b62:	2b30      	cmp	r3, #48	; 0x30
 8005b64:	d108      	bne.n	8005b78 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	6a1b      	ldr	r3, [r3, #32]
 8005b6a:	881a      	ldrh	r2, [r3, #0]
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	8a1b      	ldrh	r3, [r3, #16]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d026      	beq.n	8005bc2 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 8005b74:	2301      	movs	r3, #1
 8005b76:	e059      	b.n	8005c2c <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	7d9b      	ldrb	r3, [r3, #22]
 8005b7c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005b80:	2b10      	cmp	r3, #16
 8005b82:	d11e      	bne.n	8005bc2 <encode_field+0x72>
    {
        if (field->pSize)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	6a1b      	ldr	r3, [r3, #32]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d00c      	beq.n	8005ba6 <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	6a1b      	ldr	r3, [r3, #32]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff fcaf 	bl	80054f4 <safe_read_bool>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f083 0301 	eor.w	r3, r3, #1
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00f      	beq.n	8005bc2 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e042      	b.n	8005c2c <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	7d9b      	ldrb	r3, [r3, #22]
 8005baa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d107      	bne.n	8005bc2 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 8005bb2:	6838      	ldr	r0, [r7, #0]
 8005bb4:	f7ff fe10 	bl	80057d8 <pb_check_proto3_default_value>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <encode_field+0x72>
                return true;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e034      	b.n	8005c2c <encode_field+0xdc>
        }
    }

    if (!field->pData)
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d113      	bne.n	8005bf2 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	7d9b      	ldrb	r3, [r3, #22]
 8005bce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10b      	bne.n	8005bee <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <encode_field+0x94>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	e000      	b.n	8005be6 <encode_field+0x96>
 8005be4:	4b13      	ldr	r3, [pc, #76]	; (8005c34 <encode_field+0xe4>)
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	6113      	str	r3, [r2, #16]
 8005bea:	2300      	movs	r3, #0
 8005bec:	e01e      	b.n	8005c2c <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e01c      	b.n	8005c2c <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	7d9b      	ldrb	r3, [r3, #22]
 8005bf6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005bfa:	2b40      	cmp	r3, #64	; 0x40
 8005bfc:	d105      	bne.n	8005c0a <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff ff7b 	bl	8005afc <encode_callback_field>
 8005c06:	4603      	mov	r3, r0
 8005c08:	e010      	b.n	8005c2c <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	7d9b      	ldrb	r3, [r3, #22]
 8005c0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d105      	bne.n	8005c22 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7ff fc89 	bl	8005530 <encode_array>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	e004      	b.n	8005c2c <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f7ff fef5 	bl	8005a14 <encode_basic_field>
 8005c2a:	4603      	mov	r3, r0
    }
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	0800b9c4 	.word	0x0800b9c4

08005c38 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08c      	sub	sp, #48	; 0x30
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 8005c42:	f107 0308 	add.w	r3, r7, #8
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7fd fdc2 	bl	80037d2 <pb_field_iter_begin_extension_const>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	f083 0301 	eor.w	r3, r3, #1
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <default_extension_encoder+0x30>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	e000      	b.n	8005c6a <default_extension_encoder+0x32>
 8005c68:	4b07      	ldr	r3, [pc, #28]	; (8005c88 <default_extension_encoder+0x50>)
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	6113      	str	r3, [r2, #16]
 8005c6e:	2300      	movs	r3, #0
 8005c70:	e006      	b.n	8005c80 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 8005c72:	f107 0308 	add.w	r3, r7, #8
 8005c76:	4619      	mov	r1, r3
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f7ff ff69 	bl	8005b50 <encode_field>
 8005c7e:	4603      	mov	r3, r0
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3730      	adds	r7, #48	; 0x30
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	0800b9dc 	.word	0x0800b9dc

08005c8c <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	69db      	ldr	r3, [r3, #28]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60fb      	str	r3, [r7, #12]

    while (extension)
 8005c9e:	e01e      	b.n	8005cde <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d008      	beq.n	8005cbc <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	68f9      	ldr	r1, [r7, #12]
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	72fb      	strb	r3, [r7, #11]
 8005cba:	e005      	b.n	8005cc8 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 8005cbc:	68f9      	ldr	r1, [r7, #12]
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f7ff ffba 	bl	8005c38 <default_extension_encoder>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	72fb      	strb	r3, [r7, #11]

        if (!status)
 8005cc8:	7afb      	ldrb	r3, [r7, #11]
 8005cca:	f083 0301 	eor.w	r3, r3, #1
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d001      	beq.n	8005cd8 <encode_extension_field+0x4c>
            return false;
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e006      	b.n	8005ce6 <encode_extension_field+0x5a>
        
        extension = extension->next;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	60fb      	str	r3, [r7, #12]
    while (extension)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1dd      	bne.n	8005ca0 <encode_extension_field+0x14>
    }
    
    return true;
 8005ce4:	2301      	movs	r3, #1
}
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b08e      	sub	sp, #56	; 0x38
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	60f8      	str	r0, [r7, #12]
 8005cf6:	60b9      	str	r1, [r7, #8]
 8005cf8:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 8005cfa:	f107 0310 	add.w	r3, r7, #16
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fd fd51 	bl	80037aa <pb_field_iter_begin_const>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f083 0301 	eor.w	r3, r3, #1
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <pb_encode+0x2a>
        return true; /* Empty message type */
 8005d14:	2301      	movs	r3, #1
 8005d16:	e02a      	b.n	8005d6e <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 8005d18:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d1c:	f003 030f 	and.w	r3, r3, #15
 8005d20:	2b0a      	cmp	r3, #10
 8005d22:	d10d      	bne.n	8005d40 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 8005d24:	f107 0310 	add.w	r3, r7, #16
 8005d28:	4619      	mov	r1, r3
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7ff ffae 	bl	8005c8c <encode_extension_field>
 8005d30:	4603      	mov	r3, r0
 8005d32:	f083 0301 	eor.w	r3, r3, #1
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d00f      	beq.n	8005d5c <pb_encode+0x6e>
                return false;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e016      	b.n	8005d6e <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 8005d40:	f107 0310 	add.w	r3, r7, #16
 8005d44:	4619      	mov	r1, r3
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f7ff ff02 	bl	8005b50 <encode_field>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f083 0301 	eor.w	r3, r3, #1
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <pb_encode+0x6e>
                return false;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	e008      	b.n	8005d6e <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 8005d5c:	f107 0310 	add.w	r3, r7, #16
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fd fc77 	bl	8003654 <pb_field_iter_next>
 8005d66:	4603      	mov	r3, r0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d1d5      	bne.n	8005d18 <pb_encode+0x2a>
    
    return true;
 8005d6c:	2301      	movs	r3, #1
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3738      	adds	r7, #56	; 0x38
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b088      	sub	sp, #32
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8005d82:	2300      	movs	r3, #0
 8005d84:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d8e:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	09db      	lsrs	r3, r3, #7
 8005d94:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 8005d96:	e013      	b.n	8005dc0 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 8005d98:	7efb      	ldrb	r3, [r7, #27]
 8005d9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d9e:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	61fa      	str	r2, [r7, #28]
 8005da6:	3320      	adds	r3, #32
 8005da8:	443b      	add	r3, r7
 8005daa:	7efa      	ldrb	r2, [r7, #27]
 8005dac:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005db8:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	09db      	lsrs	r3, r3, #7
 8005dbe:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d805      	bhi.n	8005dd2 <pb_encode_varint_32+0x5c>
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e5      	bne.n	8005d98 <pb_encode_varint_32+0x22>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e2      	bne.n	8005d98 <pb_encode_varint_32+0x22>
    }

    if (high)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d024      	beq.n	8005e22 <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	7efb      	ldrb	r3, [r7, #27]
 8005de8:	4313      	orrs	r3, r2
 8005dea:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	08db      	lsrs	r3, r3, #3
 8005df0:	607b      	str	r3, [r7, #4]

        while (high)
 8005df2:	e013      	b.n	8005e1c <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 8005df4:	7efb      	ldrb	r3, [r7, #27]
 8005df6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005dfa:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	61fa      	str	r2, [r7, #28]
 8005e02:	3320      	adds	r3, #32
 8005e04:	443b      	add	r3, r7
 8005e06:	7efa      	ldrb	r2, [r7, #27]
 8005e08:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e14:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	09db      	lsrs	r3, r3, #7
 8005e1a:	607b      	str	r3, [r7, #4]
        while (high)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d1e8      	bne.n	8005df4 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	1c5a      	adds	r2, r3, #1
 8005e26:	61fa      	str	r2, [r7, #28]
 8005e28:	3320      	adds	r3, #32
 8005e2a:	443b      	add	r3, r7
 8005e2c:	7efa      	ldrb	r2, [r7, #27]
 8005e2e:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 8005e32:	f107 0310 	add.w	r3, r7, #16
 8005e36:	69fa      	ldr	r2, [r7, #28]
 8005e38:	4619      	mov	r1, r3
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff fb0a 	bl	8005454 <pb_write>
 8005e40:	4603      	mov	r3, r0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3720      	adds	r7, #32
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 8005e4a:	b590      	push	{r4, r7, lr}
 8005e4c:	b087      	sub	sp, #28
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 8005e56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e5a:	2a80      	cmp	r2, #128	; 0x80
 8005e5c:	f173 0300 	sbcs.w	r3, r3, #0
 8005e60:	d20a      	bcs.n	8005e78 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 8005e62:	783b      	ldrb	r3, [r7, #0]
 8005e64:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 8005e66:	f107 0317 	add.w	r3, r7, #23
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	68f8      	ldr	r0, [r7, #12]
 8005e70:	f7ff faf0 	bl	8005454 <pb_write>
 8005e74:	4603      	mov	r3, r0
 8005e76:	e00f      	b.n	8005e98 <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 8005e78:	683c      	ldr	r4, [r7, #0]
 8005e7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	000a      	movs	r2, r1
 8005e88:	2300      	movs	r3, #0
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	4621      	mov	r1, r4
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f7ff ff70 	bl	8005d76 <pb_encode_varint_32>
 8005e96:	4603      	mov	r3, r0
#endif
    }
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	371c      	adds	r7, #28
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd90      	pop	{r4, r7, pc}

08005ea0 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8005ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ea4:	b08a      	sub	sp, #40	; 0x28
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6178      	str	r0, [r7, #20]
 8005eaa:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 8005eae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005eb2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8005eb6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 8005eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	da15      	bge.n	8005eee <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 8005ec2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005ec6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005eca:	ea00 0402 	and.w	r4, r0, r2
 8005ece:	ea01 0503 	and.w	r5, r1, r3
 8005ed2:	1923      	adds	r3, r4, r4
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	eb45 0305 	adc.w	r3, r5, r5
 8005eda:	607b      	str	r3, [r7, #4]
 8005edc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee0:	ea6f 0a02 	mvn.w	sl, r2
 8005ee4:	ea6f 0b03 	mvn.w	fp, r3
 8005ee8:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8005eec:	e007      	b.n	8005efe <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 8005eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ef2:	eb12 0802 	adds.w	r8, r2, r2
 8005ef6:	eb43 0903 	adc.w	r9, r3, r3
 8005efa:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 8005efe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f02:	6978      	ldr	r0, [r7, #20]
 8005f04:	f7ff ffa1 	bl	8005e4a <pb_encode_varint>
 8005f08:	4603      	mov	r3, r0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3728      	adds	r7, #40	; 0x28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005f14 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b082      	sub	sp, #8
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 8005f1e:	2204      	movs	r2, #4
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff fa96 	bl	8005454 <pb_write>
 8005f28:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3708      	adds	r7, #8
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	6839      	ldr	r1, [r7, #0]
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f7ff fa87 	bl	8005454 <pb_write>
 8005f46:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 8005f50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f54:	b088      	sub	sp, #32
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6178      	str	r0, [r7, #20]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	60fa      	str	r2, [r7, #12]
 8005f5e:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	469a      	mov	sl, r3
 8005f66:	4693      	mov	fp, r2
 8005f68:	ea4f 755a 	mov.w	r5, sl, lsr #29
 8005f6c:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8005f70:	7cfb      	ldrb	r3, [r7, #19]
 8005f72:	2200      	movs	r2, #0
 8005f74:	4698      	mov	r8, r3
 8005f76:	4691      	mov	r9, r2
 8005f78:	ea44 0308 	orr.w	r3, r4, r8
 8005f7c:	603b      	str	r3, [r7, #0]
 8005f7e:	ea45 0309 	orr.w	r3, r5, r9
 8005f82:	607b      	str	r3, [r7, #4]
 8005f84:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005f88:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 8005f8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f90:	6978      	ldr	r0, [r7, #20]
 8005f92:	f7ff ff5a 	bl	8005e4a <pb_encode_varint>
 8005f96:	4603      	mov	r3, r0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3720      	adds	r7, #32
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005fa4 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	7d9b      	ldrb	r3, [r3, #22]
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	2b0b      	cmp	r3, #11
 8005fb8:	d826      	bhi.n	8006008 <pb_encode_tag_for_field+0x64>
 8005fba:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <pb_encode_tag_for_field+0x1c>)
 8005fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc0:	08005ff1 	.word	0x08005ff1
 8005fc4:	08005ff1 	.word	0x08005ff1
 8005fc8:	08005ff1 	.word	0x08005ff1
 8005fcc:	08005ff1 	.word	0x08005ff1
 8005fd0:	08005ff7 	.word	0x08005ff7
 8005fd4:	08005ffd 	.word	0x08005ffd
 8005fd8:	08006003 	.word	0x08006003
 8005fdc:	08006003 	.word	0x08006003
 8005fe0:	08006003 	.word	0x08006003
 8005fe4:	08006003 	.word	0x08006003
 8005fe8:	08006009 	.word	0x08006009
 8005fec:	08006003 	.word	0x08006003
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	73fb      	strb	r3, [r7, #15]
            break;
 8005ff4:	e014      	b.n	8006020 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 8005ff6:	2305      	movs	r3, #5
 8005ff8:	73fb      	strb	r3, [r7, #15]
            break;
 8005ffa:	e011      	b.n	8006020 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	73fb      	strb	r3, [r7, #15]
            break;
 8006000:	e00e      	b.n	8006020 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 8006002:	2302      	movs	r3, #2
 8006004:	73fb      	strb	r3, [r7, #15]
            break;
 8006006:	e00b      	b.n	8006020 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d002      	beq.n	8006016 <pb_encode_tag_for_field+0x72>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	e000      	b.n	8006018 <pb_encode_tag_for_field+0x74>
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <pb_encode_tag_for_field+0x98>)
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6113      	str	r3, [r2, #16]
 800601c:	2300      	movs	r3, #0
 800601e:	e008      	b.n	8006032 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	8a1b      	ldrh	r3, [r3, #16]
 8006024:	461a      	mov	r2, r3
 8006026:	7bfb      	ldrb	r3, [r7, #15]
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f7ff ff90 	bl	8005f50 <pb_encode_tag>
 8006030:	4603      	mov	r3, r0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3710      	adds	r7, #16
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	0800b9a0 	.word	0x0800b9a0

08006040 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 8006040:	b5b0      	push	{r4, r5, r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	461c      	mov	r4, r3
 8006052:	4615      	mov	r5, r2
 8006054:	4622      	mov	r2, r4
 8006056:	462b      	mov	r3, r5
 8006058:	68f8      	ldr	r0, [r7, #12]
 800605a:	f7ff fef6 	bl	8005e4a <pb_encode_varint>
 800605e:	4603      	mov	r3, r0
 8006060:	f083 0301 	eor.w	r3, r3, #1
 8006064:	b2db      	uxtb	r3, r3
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <pb_encode_string+0x2e>
        return false;
 800606a:	2300      	movs	r3, #0
 800606c:	e005      	b.n	800607a <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	68b9      	ldr	r1, [r7, #8]
 8006072:	68f8      	ldr	r0, [r7, #12]
 8006074:	f7ff f9ee 	bl	8005454 <pb_write>
 8006078:	4603      	mov	r3, r0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3710      	adds	r7, #16
 800607e:	46bd      	mov	sp, r7
 8006080:	bdb0      	pop	{r4, r5, r7, pc}
	...

08006084 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8006084:	b5b0      	push	{r4, r5, r7, lr}
 8006086:	b08c      	sub	sp, #48	; 0x30
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8006090:	f107 0314 	add.w	r3, r7, #20
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]
 8006098:	605a      	str	r2, [r3, #4]
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 80060a0:	f107 0314 	add.w	r3, r7, #20
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	68b9      	ldr	r1, [r7, #8]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff fe20 	bl	8005cee <pb_encode>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f083 0301 	eor.w	r3, r3, #1
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d004      	beq.n	80060c4 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 80060ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	611a      	str	r2, [r3, #16]
#endif
        return false;
 80060c0:	2300      	movs	r3, #0
 80060c2:	e065      	b.n	8006190 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80060c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ca:	2200      	movs	r2, #0
 80060cc:	461c      	mov	r4, r3
 80060ce:	4615      	mov	r5, r2
 80060d0:	4622      	mov	r2, r4
 80060d2:	462b      	mov	r3, r5
 80060d4:	68f8      	ldr	r0, [r7, #12]
 80060d6:	f7ff feb8 	bl	8005e4a <pb_encode_varint>
 80060da:	4603      	mov	r3, r0
 80060dc:	f083 0301 	eor.w	r3, r3, #1
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <pb_encode_submessage+0x66>
        return false;
 80060e6:	2300      	movs	r3, #0
 80060e8:	e052      	b.n	8006190 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 80060f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060f4:	2100      	movs	r1, #0
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff f9ac 	bl	8005454 <pb_write>
 80060fc:	4603      	mov	r3, r0
 80060fe:	e047      	b.n	8006190 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006106:	441a      	add	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	429a      	cmp	r2, r3
 800610e:	d90b      	bls.n	8006128 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <pb_encode_submessage+0x9a>
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	e000      	b.n	8006120 <pb_encode_submessage+0x9c>
 800611e:	4b1e      	ldr	r3, [pc, #120]	; (8006198 <pb_encode_submessage+0x114>)
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	6113      	str	r3, [r2, #16]
 8006124:	2300      	movs	r3, #0
 8006126:	e033      	b.n	8006190 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8006138:	2300      	movs	r3, #0
 800613a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 800613c:	2300      	movs	r3, #0
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 8006140:	f107 0314 	add.w	r3, r7, #20
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	68b9      	ldr	r1, [r7, #8]
 8006148:	4618      	mov	r0, r3
 800614a:	f7ff fdd0 	bl	8005cee <pb_encode>
 800614e:	4603      	mov	r3, r0
 8006150:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	68da      	ldr	r2, [r3, #12]
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	441a      	add	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 8006166:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006170:	429a      	cmp	r2, r3
 8006172:	d00b      	beq.n	800618c <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <pb_encode_submessage+0xfe>
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	691b      	ldr	r3, [r3, #16]
 8006180:	e000      	b.n	8006184 <pb_encode_submessage+0x100>
 8006182:	4b06      	ldr	r3, [pc, #24]	; (800619c <pb_encode_submessage+0x118>)
 8006184:	68fa      	ldr	r2, [r7, #12]
 8006186:	6113      	str	r3, [r2, #16]
 8006188:	2300      	movs	r3, #0
 800618a:	e001      	b.n	8006190 <pb_encode_submessage+0x10c>
    
    return status;
 800618c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006190:	4618      	mov	r0, r3
 8006192:	3730      	adds	r7, #48	; 0x30
 8006194:	46bd      	mov	sp, r7
 8006196:	bdb0      	pop	{r4, r5, r7, pc}
 8006198:	0800b968 	.word	0x0800b968
 800619c:	0800b9f0 	.word	0x0800b9f0

080061a0 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80061a0:	b5b0      	push	{r4, r5, r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	69db      	ldr	r3, [r3, #28]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7ff f9a0 	bl	80054f4 <safe_read_bool>
 80061b4:	4603      	mov	r3, r0
 80061b6:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2200      	movs	r2, #0
 80061bc:	461c      	mov	r4, r3
 80061be:	4615      	mov	r5, r2
 80061c0:	4622      	mov	r2, r4
 80061c2:	462b      	mov	r3, r5
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff fe40 	bl	8005e4a <pb_encode_varint>
 80061ca:	4603      	mov	r3, r0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bdb0      	pop	{r4, r5, r7, pc}

080061d4 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80061d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061d8:	b08c      	sub	sp, #48	; 0x30
 80061da:	af00      	add	r7, sp, #0
 80061dc:	61f8      	str	r0, [r7, #28]
 80061de:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	7d9b      	ldrb	r3, [r3, #22]
 80061e4:	f003 030f 	and.w	r3, r3, #15
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d152      	bne.n	8006292 <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 80061ec:	f04f 0200 	mov.w	r2, #0
 80061f0:	f04f 0300 	mov.w	r3, #0
 80061f4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

        if (field->data_size == sizeof(uint_least8_t))
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	8a5b      	ldrh	r3, [r3, #18]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d10b      	bne.n	8006218 <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b2db      	uxtb	r3, r3
 8006208:	2200      	movs	r2, #0
 800620a:	613b      	str	r3, [r7, #16]
 800620c:	617a      	str	r2, [r7, #20]
 800620e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006212:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8006216:	e035      	b.n	8006284 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	8a5b      	ldrh	r3, [r3, #18]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d10b      	bne.n	8006238 <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29b      	uxth	r3, r3
 8006228:	2200      	movs	r2, #0
 800622a:	60bb      	str	r3, [r7, #8]
 800622c:	60fa      	str	r2, [r7, #12]
 800622e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8006232:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8006236:	e025      	b.n	8006284 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	8a5b      	ldrh	r3, [r3, #18]
 800623c:	2b04      	cmp	r3, #4
 800623e:	d10a      	bne.n	8006256 <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	69db      	ldr	r3, [r3, #28]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2200      	movs	r2, #0
 8006248:	603b      	str	r3, [r7, #0]
 800624a:	607a      	str	r2, [r7, #4]
 800624c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8006250:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8006254:	e016      	b.n	8006284 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 8006256:	69bb      	ldr	r3, [r7, #24]
 8006258:	8a5b      	ldrh	r3, [r3, #18]
 800625a:	2b08      	cmp	r3, #8
 800625c:	d106      	bne.n	800626c <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006266:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800626a:	e00b      	b.n	8006284 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800626c:	69fb      	ldr	r3, [r7, #28]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <pb_enc_varint+0xa6>
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	e000      	b.n	800627c <pb_enc_varint+0xa8>
 800627a:	4b36      	ldr	r3, [pc, #216]	; (8006354 <pb_enc_varint+0x180>)
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	6113      	str	r3, [r2, #16]
 8006280:	2300      	movs	r3, #0
 8006282:	e061      	b.n	8006348 <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 8006284:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006288:	69f8      	ldr	r0, [r7, #28]
 800628a:	f7ff fdde 	bl	8005e4a <pb_encode_varint>
 800628e:	4603      	mov	r3, r0
 8006290:	e05a      	b.n	8006348 <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 8006292:	f04f 0200 	mov.w	r2, #0
 8006296:	f04f 0300 	mov.w	r3, #0
 800629a:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	8a5b      	ldrh	r3, [r3, #18]
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	d10a      	bne.n	80062bc <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	f993 3000 	ldrsb.w	r3, [r3]
 80062ae:	b25b      	sxtb	r3, r3
 80062b0:	17da      	asrs	r2, r3, #31
 80062b2:	469a      	mov	sl, r3
 80062b4:	4693      	mov	fp, r2
 80062b6:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80062ba:	e032      	b.n	8006322 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	8a5b      	ldrh	r3, [r3, #18]
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d10a      	bne.n	80062da <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	69db      	ldr	r3, [r3, #28]
 80062c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062cc:	b21b      	sxth	r3, r3
 80062ce:	17da      	asrs	r2, r3, #31
 80062d0:	4698      	mov	r8, r3
 80062d2:	4691      	mov	r9, r2
 80062d4:	e9c7 8908 	strd	r8, r9, [r7, #32]
 80062d8:	e023      	b.n	8006322 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	8a5b      	ldrh	r3, [r3, #18]
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d108      	bne.n	80062f4 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	17da      	asrs	r2, r3, #31
 80062ea:	461c      	mov	r4, r3
 80062ec:	4615      	mov	r5, r2
 80062ee:	e9c7 4508 	strd	r4, r5, [r7, #32]
 80062f2:	e016      	b.n	8006322 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	8a5b      	ldrh	r3, [r3, #18]
 80062f8:	2b08      	cmp	r3, #8
 80062fa:	d106      	bne.n	800630a <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	69db      	ldr	r3, [r3, #28]
 8006300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006304:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8006308:	e00b      	b.n	8006322 <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d002      	beq.n	8006318 <pb_enc_varint+0x144>
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	e000      	b.n	800631a <pb_enc_varint+0x146>
 8006318:	4b0e      	ldr	r3, [pc, #56]	; (8006354 <pb_enc_varint+0x180>)
 800631a:	69fa      	ldr	r2, [r7, #28]
 800631c:	6113      	str	r3, [r2, #16]
 800631e:	2300      	movs	r3, #0
 8006320:	e012      	b.n	8006348 <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	7d9b      	ldrb	r3, [r3, #22]
 8006326:	f003 030f 	and.w	r3, r3, #15
 800632a:	2b03      	cmp	r3, #3
 800632c:	d106      	bne.n	800633c <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 800632e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006332:	69f8      	ldr	r0, [r7, #28]
 8006334:	f7ff fdb4 	bl	8005ea0 <pb_encode_svarint>
 8006338:	4603      	mov	r3, r0
 800633a:	e005      	b.n	8006348 <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 800633c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006340:	69f8      	ldr	r0, [r7, #28]
 8006342:	f7ff fd82 	bl	8005e4a <pb_encode_varint>
 8006346:	4603      	mov	r3, r0

    }
}
 8006348:	4618      	mov	r0, r3
 800634a:	3730      	adds	r7, #48	; 0x30
 800634c:	46bd      	mov	sp, r7
 800634e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006352:	bf00      	nop
 8006354:	0800ba04 	.word	0x0800ba04

08006358 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	8a5b      	ldrh	r3, [r3, #18]
 8006366:	2b04      	cmp	r3, #4
 8006368:	d107      	bne.n	800637a <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	69db      	ldr	r3, [r3, #28]
 800636e:	4619      	mov	r1, r3
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f7ff fdcf 	bl	8005f14 <pb_encode_fixed32>
 8006376:	4603      	mov	r3, r0
 8006378:	e016      	b.n	80063a8 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	8a5b      	ldrh	r3, [r3, #18]
 800637e:	2b08      	cmp	r3, #8
 8006380:	d107      	bne.n	8006392 <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	4619      	mov	r1, r3
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f7ff fdd2 	bl	8005f32 <pb_encode_fixed64>
 800638e:	4603      	mov	r3, r0
 8006390:	e00a      	b.n	80063a8 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <pb_enc_fixed+0x48>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	e000      	b.n	80063a2 <pb_enc_fixed+0x4a>
 80063a0:	4b03      	ldr	r3, [pc, #12]	; (80063b0 <pb_enc_fixed+0x58>)
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6113      	str	r3, [r2, #16]
 80063a6:	2300      	movs	r3, #0
    }
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}
 80063b0:	0800ba04 	.word	0x0800ba04

080063b4 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d106      	bne.n	80063dc <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 80063ce:	2200      	movs	r2, #0
 80063d0:	2100      	movs	r1, #0
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f7ff fe34 	bl	8006040 <pb_encode_string>
 80063d8:	4603      	mov	r3, r0
 80063da:	e022      	b.n	8006422 <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	7d9b      	ldrb	r3, [r3, #22]
 80063e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d113      	bne.n	8006410 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	881b      	ldrh	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	8a5b      	ldrh	r3, [r3, #18]
 80063f2:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 80063f4:	429a      	cmp	r2, r3
 80063f6:	d90b      	bls.n	8006410 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	691b      	ldr	r3, [r3, #16]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <pb_enc_bytes+0x52>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	e000      	b.n	8006408 <pb_enc_bytes+0x54>
 8006406:	4b09      	ldr	r3, [pc, #36]	; (800642c <pb_enc_bytes+0x78>)
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6113      	str	r3, [r2, #16]
 800640c:	2300      	movs	r3, #0
 800640e:	e008      	b.n	8006422 <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	1c99      	adds	r1, r3, #2
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	881b      	ldrh	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f7ff fe10 	bl	8006040 <pb_encode_string>
 8006420:	4603      	mov	r3, r0
}
 8006422:	4618      	mov	r0, r3
 8006424:	3710      	adds	r7, #16
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}
 800642a:	bf00      	nop
 800642c:	0800ba18 	.word	0x0800ba18

08006430 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b086      	sub	sp, #24
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	8a5b      	ldrh	r3, [r3, #18]
 8006442:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	69db      	ldr	r3, [r3, #28]
 8006448:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	7d9b      	ldrb	r3, [r3, #22]
 800644e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006452:	2b80      	cmp	r3, #128	; 0x80
 8006454:	d103      	bne.n	800645e <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 8006456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800645a:	613b      	str	r3, [r7, #16]
 800645c:	e011      	b.n	8006482 <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10b      	bne.n	800647c <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <pb_enc_string+0x42>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	e000      	b.n	8006474 <pb_enc_string+0x44>
 8006472:	4b1c      	ldr	r3, [pc, #112]	; (80064e4 <pb_enc_string+0xb4>)
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6113      	str	r3, [r2, #16]
 8006478:	2300      	movs	r3, #0
 800647a:	e02f      	b.n	80064dc <pb_enc_string+0xac>

        max_size -= 1;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	3b01      	subs	r3, #1
 8006480:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	e020      	b.n	80064d0 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 8006492:	e005      	b.n	80064a0 <pb_enc_string+0x70>
        {
            size++;
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	3301      	adds	r3, #1
 8006498:	617b      	str	r3, [r7, #20]
            p++;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3301      	adds	r3, #1
 800649e:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d203      	bcs.n	80064b0 <pb_enc_string+0x80>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1f1      	bne.n	8006494 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00b      	beq.n	80064d0 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d002      	beq.n	80064c6 <pb_enc_string+0x96>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	e000      	b.n	80064c8 <pb_enc_string+0x98>
 80064c6:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <pb_enc_string+0xb8>)
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	6113      	str	r3, [r2, #16]
 80064cc:	2300      	movs	r3, #0
 80064ce:	e005      	b.n	80064dc <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7ff fdb3 	bl	8006040 <pb_encode_string>
 80064da:	4603      	mov	r3, r0
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}
 80064e4:	0800ba2c 	.word	0x0800ba2c
 80064e8:	0800ba40 	.word	0x0800ba40

080064ec <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d10b      	bne.n	8006516 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <pb_enc_submessage+0x20>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	691b      	ldr	r3, [r3, #16]
 800650a:	e000      	b.n	800650e <pb_enc_submessage+0x22>
 800650c:	4b19      	ldr	r3, [pc, #100]	; (8006574 <pb_enc_submessage+0x88>)
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	6113      	str	r3, [r2, #16]
 8006512:	2300      	movs	r3, #0
 8006514:	e029      	b.n	800656a <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	7d9b      	ldrb	r3, [r3, #22]
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	2b09      	cmp	r3, #9
 8006520:	d11a      	bne.n	8006558 <pb_enc_submessage+0x6c>
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d016      	beq.n	8006558 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	3b08      	subs	r3, #8
 8006530:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00e      	beq.n	8006558 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	3204      	adds	r2, #4
 8006542:	6839      	ldr	r1, [r7, #0]
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	4798      	blx	r3
 8006548:	4603      	mov	r3, r0
 800654a:	f083 0301 	eor.w	r3, r3, #1
 800654e:	b2db      	uxtb	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <pb_enc_submessage+0x6c>
                return false;
 8006554:	2300      	movs	r3, #0
 8006556:	e008      	b.n	800656a <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	461a      	mov	r2, r3
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff fd8e 	bl	8006084 <pb_encode_submessage>
 8006568:	4603      	mov	r3, r0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3710      	adds	r7, #16
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	0800ba54 	.word	0x0800ba54

08006578 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b082      	sub	sp, #8
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	69d9      	ldr	r1, [r3, #28]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	8a5b      	ldrh	r3, [r3, #18]
 800658a:	461a      	mov	r2, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff fd57 	bl	8006040 <pb_encode_string>
 8006592:	4603      	mov	r3, r0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3708      	adds	r7, #8
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}

0800659c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065a2:	4b0f      	ldr	r3, [pc, #60]	; (80065e0 <HAL_MspInit+0x44>)
 80065a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065a6:	4a0e      	ldr	r2, [pc, #56]	; (80065e0 <HAL_MspInit+0x44>)
 80065a8:	f043 0301 	orr.w	r3, r3, #1
 80065ac:	6613      	str	r3, [r2, #96]	; 0x60
 80065ae:	4b0c      	ldr	r3, [pc, #48]	; (80065e0 <HAL_MspInit+0x44>)
 80065b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b2:	f003 0301 	and.w	r3, r3, #1
 80065b6:	607b      	str	r3, [r7, #4]
 80065b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065ba:	4b09      	ldr	r3, [pc, #36]	; (80065e0 <HAL_MspInit+0x44>)
 80065bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065be:	4a08      	ldr	r2, [pc, #32]	; (80065e0 <HAL_MspInit+0x44>)
 80065c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065c4:	6593      	str	r3, [r2, #88]	; 0x58
 80065c6:	4b06      	ldr	r3, [pc, #24]	; (80065e0 <HAL_MspInit+0x44>)
 80065c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80065d2:	f001 fcd1 	bl	8007f78 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80065d6:	bf00      	nop
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40021000 	.word	0x40021000

080065e4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b09a      	sub	sp, #104	; 0x68
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065ec:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80065f0:	2200      	movs	r2, #0
 80065f2:	601a      	str	r2, [r3, #0]
 80065f4:	605a      	str	r2, [r3, #4]
 80065f6:	609a      	str	r2, [r3, #8]
 80065f8:	60da      	str	r2, [r3, #12]
 80065fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80065fc:	f107 0310 	add.w	r3, r7, #16
 8006600:	2244      	movs	r2, #68	; 0x44
 8006602:	2100      	movs	r1, #0
 8006604:	4618      	mov	r0, r3
 8006606:	f004 fb61 	bl	800accc <memset>
  if(hfdcan->Instance==FDCAN1)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a24      	ldr	r2, [pc, #144]	; (80066a0 <HAL_FDCAN_MspInit+0xbc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d141      	bne.n	8006698 <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8006614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006618:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800661a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800661e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006620:	f107 0310 	add.w	r3, r7, #16
 8006624:	4618      	mov	r0, r3
 8006626:	f002 f9ad 	bl	8008984 <HAL_RCCEx_PeriphCLKConfig>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8006630:	f7fc fd82 	bl	8003138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8006634:	4b1b      	ldr	r3, [pc, #108]	; (80066a4 <HAL_FDCAN_MspInit+0xc0>)
 8006636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006638:	4a1a      	ldr	r2, [pc, #104]	; (80066a4 <HAL_FDCAN_MspInit+0xc0>)
 800663a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800663e:	6593      	str	r3, [r2, #88]	; 0x58
 8006640:	4b18      	ldr	r3, [pc, #96]	; (80066a4 <HAL_FDCAN_MspInit+0xc0>)
 8006642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006648:	60fb      	str	r3, [r7, #12]
 800664a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800664c:	4b15      	ldr	r3, [pc, #84]	; (80066a4 <HAL_FDCAN_MspInit+0xc0>)
 800664e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006650:	4a14      	ldr	r2, [pc, #80]	; (80066a4 <HAL_FDCAN_MspInit+0xc0>)
 8006652:	f043 0301 	orr.w	r3, r3, #1
 8006656:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006658:	4b12      	ldr	r3, [pc, #72]	; (80066a4 <HAL_FDCAN_MspInit+0xc0>)
 800665a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800665c:	f003 0301 	and.w	r3, r3, #1
 8006660:	60bb      	str	r3, [r7, #8]
 8006662:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006664:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006668:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800666a:	2302      	movs	r3, #2
 800666c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800666e:	2300      	movs	r3, #0
 8006670:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006672:	2300      	movs	r3, #0
 8006674:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8006676:	2309      	movs	r3, #9
 8006678:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800667a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800667e:	4619      	mov	r1, r3
 8006680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006684:	f001 fa08 	bl	8007a98 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8006688:	2200      	movs	r2, #0
 800668a:	2100      	movs	r1, #0
 800668c:	2015      	movs	r0, #21
 800668e:	f000 fba8 	bl	8006de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8006692:	2015      	movs	r0, #21
 8006694:	f000 fbbf 	bl	8006e16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8006698:	bf00      	nop
 800669a:	3768      	adds	r7, #104	; 0x68
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	40006400 	.word	0x40006400
 80066a4:	40021000 	.word	0x40021000

080066a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a1f      	ldr	r2, [pc, #124]	; (8006734 <HAL_TIM_Base_MspInit+0x8c>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d10c      	bne.n	80066d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80066ba:	4b1f      	ldr	r3, [pc, #124]	; (8006738 <HAL_TIM_Base_MspInit+0x90>)
 80066bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066be:	4a1e      	ldr	r2, [pc, #120]	; (8006738 <HAL_TIM_Base_MspInit+0x90>)
 80066c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80066c4:	6613      	str	r3, [r2, #96]	; 0x60
 80066c6:	4b1c      	ldr	r3, [pc, #112]	; (8006738 <HAL_TIM_Base_MspInit+0x90>)
 80066c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ce:	617b      	str	r3, [r7, #20]
 80066d0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80066d2:	e02a      	b.n	800672a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a18      	ldr	r2, [pc, #96]	; (800673c <HAL_TIM_Base_MspInit+0x94>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d114      	bne.n	8006708 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80066de:	4b16      	ldr	r3, [pc, #88]	; (8006738 <HAL_TIM_Base_MspInit+0x90>)
 80066e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066e2:	4a15      	ldr	r2, [pc, #84]	; (8006738 <HAL_TIM_Base_MspInit+0x90>)
 80066e4:	f043 0310 	orr.w	r3, r3, #16
 80066e8:	6593      	str	r3, [r2, #88]	; 0x58
 80066ea:	4b13      	ldr	r3, [pc, #76]	; (8006738 <HAL_TIM_Base_MspInit+0x90>)
 80066ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ee:	f003 0310 	and.w	r3, r3, #16
 80066f2:	613b      	str	r3, [r7, #16]
 80066f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80066f6:	2200      	movs	r2, #0
 80066f8:	210f      	movs	r1, #15
 80066fa:	2036      	movs	r0, #54	; 0x36
 80066fc:	f000 fb71 	bl	8006de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006700:	2036      	movs	r0, #54	; 0x36
 8006702:	f000 fb88 	bl	8006e16 <HAL_NVIC_EnableIRQ>
}
 8006706:	e010      	b.n	800672a <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a0c      	ldr	r2, [pc, #48]	; (8006740 <HAL_TIM_Base_MspInit+0x98>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d10b      	bne.n	800672a <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006712:	4b09      	ldr	r3, [pc, #36]	; (8006738 <HAL_TIM_Base_MspInit+0x90>)
 8006714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006716:	4a08      	ldr	r2, [pc, #32]	; (8006738 <HAL_TIM_Base_MspInit+0x90>)
 8006718:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800671c:	6613      	str	r3, [r2, #96]	; 0x60
 800671e:	4b06      	ldr	r3, [pc, #24]	; (8006738 <HAL_TIM_Base_MspInit+0x90>)
 8006720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	68fb      	ldr	r3, [r7, #12]
}
 800672a:	bf00      	nop
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	40012c00 	.word	0x40012c00
 8006738:	40021000 	.word	0x40021000
 800673c:	40001000 	.word	0x40001000
 8006740:	40013400 	.word	0x40013400

08006744 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006744:	b480      	push	{r7}
 8006746:	b085      	sub	sp, #20
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	4a0a      	ldr	r2, [pc, #40]	; (800677c <HAL_TIM_PWM_MspInit+0x38>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d10b      	bne.n	800676e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <HAL_TIM_PWM_MspInit+0x3c>)
 8006758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800675a:	4a09      	ldr	r2, [pc, #36]	; (8006780 <HAL_TIM_PWM_MspInit+0x3c>)
 800675c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006760:	6613      	str	r3, [r2, #96]	; 0x60
 8006762:	4b07      	ldr	r3, [pc, #28]	; (8006780 <HAL_TIM_PWM_MspInit+0x3c>)
 8006764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006766:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800676e:	bf00      	nop
 8006770:	3714      	adds	r7, #20
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40014000 	.word	0x40014000
 8006780:	40021000 	.word	0x40021000

08006784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08a      	sub	sp, #40	; 0x28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800678c:	f107 0314 	add.w	r3, r7, #20
 8006790:	2200      	movs	r2, #0
 8006792:	601a      	str	r2, [r3, #0]
 8006794:	605a      	str	r2, [r3, #4]
 8006796:	609a      	str	r2, [r3, #8]
 8006798:	60da      	str	r2, [r3, #12]
 800679a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a35      	ldr	r2, [pc, #212]	; (8006878 <HAL_TIM_MspPostInit+0xf4>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d11e      	bne.n	80067e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067a6:	4b35      	ldr	r3, [pc, #212]	; (800687c <HAL_TIM_MspPostInit+0xf8>)
 80067a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067aa:	4a34      	ldr	r2, [pc, #208]	; (800687c <HAL_TIM_MspPostInit+0xf8>)
 80067ac:	f043 0301 	orr.w	r3, r3, #1
 80067b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067b2:	4b32      	ldr	r3, [pc, #200]	; (800687c <HAL_TIM_MspPostInit+0xf8>)
 80067b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	613b      	str	r3, [r7, #16]
 80067bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80067be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067c4:	2302      	movs	r3, #2
 80067c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80067c8:	2302      	movs	r3, #2
 80067ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80067cc:	2300      	movs	r3, #0
 80067ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80067d0:	2306      	movs	r3, #6
 80067d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067d4:	f107 0314 	add.w	r3, r7, #20
 80067d8:	4619      	mov	r1, r3
 80067da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80067de:	f001 f95b 	bl	8007a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80067e2:	e045      	b.n	8006870 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM8)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a25      	ldr	r2, [pc, #148]	; (8006880 <HAL_TIM_MspPostInit+0xfc>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d11e      	bne.n	800682c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067ee:	4b23      	ldr	r3, [pc, #140]	; (800687c <HAL_TIM_MspPostInit+0xf8>)
 80067f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f2:	4a22      	ldr	r2, [pc, #136]	; (800687c <HAL_TIM_MspPostInit+0xf8>)
 80067f4:	f043 0301 	orr.w	r3, r3, #1
 80067f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067fa:	4b20      	ldr	r3, [pc, #128]	; (800687c <HAL_TIM_MspPostInit+0xf8>)
 80067fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	60fb      	str	r3, [r7, #12]
 8006804:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8006806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800680a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800680c:	2302      	movs	r3, #2
 800680e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006810:	2302      	movs	r3, #2
 8006812:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006814:	2300      	movs	r3, #0
 8006816:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8006818:	2302      	movs	r3, #2
 800681a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800681c:	f107 0314 	add.w	r3, r7, #20
 8006820:	4619      	mov	r1, r3
 8006822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006826:	f001 f937 	bl	8007a98 <HAL_GPIO_Init>
}
 800682a:	e021      	b.n	8006870 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM15)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a14      	ldr	r2, [pc, #80]	; (8006884 <HAL_TIM_MspPostInit+0x100>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d11c      	bne.n	8006870 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006836:	4b11      	ldr	r3, [pc, #68]	; (800687c <HAL_TIM_MspPostInit+0xf8>)
 8006838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800683a:	4a10      	ldr	r2, [pc, #64]	; (800687c <HAL_TIM_MspPostInit+0xf8>)
 800683c:	f043 0301 	orr.w	r3, r3, #1
 8006840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006842:	4b0e      	ldr	r3, [pc, #56]	; (800687c <HAL_TIM_MspPostInit+0xf8>)
 8006844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006846:	f003 0301 	and.w	r3, r3, #1
 800684a:	60bb      	str	r3, [r7, #8]
 800684c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800684e:	2304      	movs	r3, #4
 8006850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006852:	2302      	movs	r3, #2
 8006854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8006856:	2302      	movs	r3, #2
 8006858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800685a:	2300      	movs	r3, #0
 800685c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 800685e:	2309      	movs	r3, #9
 8006860:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006862:	f107 0314 	add.w	r3, r7, #20
 8006866:	4619      	mov	r1, r3
 8006868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800686c:	f001 f914 	bl	8007a98 <HAL_GPIO_Init>
}
 8006870:	bf00      	nop
 8006872:	3728      	adds	r7, #40	; 0x28
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40012c00 	.word	0x40012c00
 800687c:	40021000 	.word	0x40021000
 8006880:	40013400 	.word	0x40013400
 8006884:	40014000 	.word	0x40014000

08006888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006888:	b480      	push	{r7}
 800688a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800688c:	e7fe      	b.n	800688c <NMI_Handler+0x4>

0800688e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800688e:	b480      	push	{r7}
 8006890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006892:	e7fe      	b.n	8006892 <HardFault_Handler+0x4>

08006894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006894:	b480      	push	{r7}
 8006896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006898:	e7fe      	b.n	8006898 <MemManage_Handler+0x4>

0800689a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800689a:	b480      	push	{r7}
 800689c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800689e:	e7fe      	b.n	800689e <BusFault_Handler+0x4>

080068a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068a4:	e7fe      	b.n	80068a4 <UsageFault_Handler+0x4>

080068a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80068a6:	b480      	push	{r7}
 80068a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068aa:	bf00      	nop
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068b4:	b480      	push	{r7}
 80068b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068b8:	bf00      	nop
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80068c2:	b480      	push	{r7}
 80068c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80068c6:	bf00      	nop
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068d4:	f000 f96a 	bl	8006bac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068d8:	bf00      	nop
 80068da:	bd80      	pop	{r7, pc}

080068dc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80068e0:	4802      	ldr	r0, [pc, #8]	; (80068ec <FDCAN1_IT0_IRQHandler+0x10>)
 80068e2:	f000 fe79 	bl	80075d8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80068e6:	bf00      	nop
 80068e8:	bd80      	pop	{r7, pc}
 80068ea:	bf00      	nop
 80068ec:	20000088 	.word	0x20000088

080068f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80068f4:	4802      	ldr	r0, [pc, #8]	; (8006900 <TIM6_DAC_IRQHandler+0x10>)
 80068f6:	f002 fc4f 	bl	8009198 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80068fa:	bf00      	nop
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000138 	.word	0x20000138

08006904 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006904:	b480      	push	{r7}
 8006906:	af00      	add	r7, sp, #0
  return 1;
 8006908:	2301      	movs	r3, #1
}
 800690a:	4618      	mov	r0, r3
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <_kill>:

int _kill(int pid, int sig)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800691e:	f004 fa77 	bl	800ae10 <__errno>
 8006922:	4603      	mov	r3, r0
 8006924:	2216      	movs	r2, #22
 8006926:	601a      	str	r2, [r3, #0]
  return -1;
 8006928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}

08006934 <_exit>:

void _exit (int status)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800693c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7ff ffe7 	bl	8006914 <_kill>
  while (1) {}    /* Make sure we hang here */
 8006946:	e7fe      	b.n	8006946 <_exit+0x12>

08006948 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006948:	b580      	push	{r7, lr}
 800694a:	b086      	sub	sp, #24
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006954:	2300      	movs	r3, #0
 8006956:	617b      	str	r3, [r7, #20]
 8006958:	e00a      	b.n	8006970 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800695a:	f3af 8000 	nop.w
 800695e:	4601      	mov	r1, r0
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	60ba      	str	r2, [r7, #8]
 8006966:	b2ca      	uxtb	r2, r1
 8006968:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	3301      	adds	r3, #1
 800696e:	617b      	str	r3, [r7, #20]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	429a      	cmp	r2, r3
 8006976:	dbf0      	blt.n	800695a <_read+0x12>
  }

  return len;
 8006978:	687b      	ldr	r3, [r7, #4]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}

08006982 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006982:	b580      	push	{r7, lr}
 8006984:	b086      	sub	sp, #24
 8006986:	af00      	add	r7, sp, #0
 8006988:	60f8      	str	r0, [r7, #12]
 800698a:	60b9      	str	r1, [r7, #8]
 800698c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800698e:	2300      	movs	r3, #0
 8006990:	617b      	str	r3, [r7, #20]
 8006992:	e009      	b.n	80069a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	1c5a      	adds	r2, r3, #1
 8006998:	60ba      	str	r2, [r7, #8]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	4618      	mov	r0, r3
 800699e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	3301      	adds	r3, #1
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	dbf1      	blt.n	8006994 <_write+0x12>
  }
  return len;
 80069b0:	687b      	ldr	r3, [r7, #4]
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3718      	adds	r7, #24
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}

080069ba <_close>:

int _close(int file)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80069c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	370c      	adds	r7, #12
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr

080069d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80069e2:	605a      	str	r2, [r3, #4]
  return 0;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	370c      	adds	r7, #12
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <_isatty>:

int _isatty(int file)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b083      	sub	sp, #12
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80069fa:	2301      	movs	r3, #1
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	370c      	adds	r7, #12
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr
	...

08006a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006a2c:	4a14      	ldr	r2, [pc, #80]	; (8006a80 <_sbrk+0x5c>)
 8006a2e:	4b15      	ldr	r3, [pc, #84]	; (8006a84 <_sbrk+0x60>)
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006a38:	4b13      	ldr	r3, [pc, #76]	; (8006a88 <_sbrk+0x64>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d102      	bne.n	8006a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006a40:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <_sbrk+0x64>)
 8006a42:	4a12      	ldr	r2, [pc, #72]	; (8006a8c <_sbrk+0x68>)
 8006a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006a46:	4b10      	ldr	r3, [pc, #64]	; (8006a88 <_sbrk+0x64>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d207      	bcs.n	8006a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006a54:	f004 f9dc 	bl	800ae10 <__errno>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	220c      	movs	r2, #12
 8006a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006a62:	e009      	b.n	8006a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006a64:	4b08      	ldr	r3, [pc, #32]	; (8006a88 <_sbrk+0x64>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006a6a:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <_sbrk+0x64>)
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4413      	add	r3, r2
 8006a72:	4a05      	ldr	r2, [pc, #20]	; (8006a88 <_sbrk+0x64>)
 8006a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a76:	68fb      	ldr	r3, [r7, #12]
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3718      	adds	r7, #24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	bd80      	pop	{r7, pc}
 8006a80:	20008000 	.word	0x20008000
 8006a84:	00000400 	.word	0x00000400
 8006a88:	20000a00 	.word	0x20000a00
 8006a8c:	20000b58 	.word	0x20000b58

08006a90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006a90:	b480      	push	{r7}
 8006a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006a94:	4b06      	ldr	r3, [pc, #24]	; (8006ab0 <SystemInit+0x20>)
 8006a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a9a:	4a05      	ldr	r2, [pc, #20]	; (8006ab0 <SystemInit+0x20>)
 8006a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006aa4:	bf00      	nop
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	e000ed00 	.word	0xe000ed00

08006ab4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006ab4:	480d      	ldr	r0, [pc, #52]	; (8006aec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006ab6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8006ab8:	f7ff ffea 	bl	8006a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006abc:	480c      	ldr	r0, [pc, #48]	; (8006af0 <LoopForever+0x6>)
  ldr r1, =_edata
 8006abe:	490d      	ldr	r1, [pc, #52]	; (8006af4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006ac0:	4a0d      	ldr	r2, [pc, #52]	; (8006af8 <LoopForever+0xe>)
  movs r3, #0
 8006ac2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006ac4:	e002      	b.n	8006acc <LoopCopyDataInit>

08006ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006aca:	3304      	adds	r3, #4

08006acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006ad0:	d3f9      	bcc.n	8006ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006ad2:	4a0a      	ldr	r2, [pc, #40]	; (8006afc <LoopForever+0x12>)
  ldr r4, =_ebss
 8006ad4:	4c0a      	ldr	r4, [pc, #40]	; (8006b00 <LoopForever+0x16>)
  movs r3, #0
 8006ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006ad8:	e001      	b.n	8006ade <LoopFillZerobss>

08006ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006adc:	3204      	adds	r2, #4

08006ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006ae0:	d3fb      	bcc.n	8006ada <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8006ae2:	f004 f99b 	bl	800ae1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006ae6:	f7fb ff91 	bl	8002a0c <main>

08006aea <LoopForever>:

LoopForever:
    b LoopForever
 8006aea:	e7fe      	b.n	8006aea <LoopForever>
  ldr   r0, =_estack
 8006aec:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8006af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006af4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8006af8:	0800bbc4 	.word	0x0800bbc4
  ldr r2, =_sbss
 8006afc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8006b00:	20000b58 	.word	0x20000b58

08006b04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006b04:	e7fe      	b.n	8006b04 <ADC1_2_IRQHandler>

08006b06 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006b06:	b580      	push	{r7, lr}
 8006b08:	b082      	sub	sp, #8
 8006b0a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006b10:	2003      	movs	r0, #3
 8006b12:	f000 f95b 	bl	8006dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8006b16:	200e      	movs	r0, #14
 8006b18:	f000 f80e 	bl	8006b38 <HAL_InitTick>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	71fb      	strb	r3, [r7, #7]
 8006b26:	e001      	b.n	8006b2c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006b28:	f7ff fd38 	bl	800659c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006b2c:	79fb      	ldrb	r3, [r7, #7]

}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3708      	adds	r7, #8
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b084      	sub	sp, #16
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006b40:	2300      	movs	r3, #0
 8006b42:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006b44:	4b16      	ldr	r3, [pc, #88]	; (8006ba0 <HAL_InitTick+0x68>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d022      	beq.n	8006b92 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006b4c:	4b15      	ldr	r3, [pc, #84]	; (8006ba4 <HAL_InitTick+0x6c>)
 8006b4e:	681a      	ldr	r2, [r3, #0]
 8006b50:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <HAL_InitTick+0x68>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006b58:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 f966 	bl	8006e32 <HAL_SYSTICK_Config>
 8006b66:	4603      	mov	r3, r0
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d10f      	bne.n	8006b8c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b0f      	cmp	r3, #15
 8006b70:	d809      	bhi.n	8006b86 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b72:	2200      	movs	r2, #0
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b7a:	f000 f932 	bl	8006de2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006b7e:	4a0a      	ldr	r2, [pc, #40]	; (8006ba8 <HAL_InitTick+0x70>)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6013      	str	r3, [r2, #0]
 8006b84:	e007      	b.n	8006b96 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8006b86:	2301      	movs	r3, #1
 8006b88:	73fb      	strb	r3, [r7, #15]
 8006b8a:	e004      	b.n	8006b96 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	73fb      	strb	r3, [r7, #15]
 8006b90:	e001      	b.n	8006b96 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000008 	.word	0x20000008
 8006ba4:	20000000 	.word	0x20000000
 8006ba8:	20000004 	.word	0x20000004

08006bac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <HAL_IncTick+0x1c>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	4b05      	ldr	r3, [pc, #20]	; (8006bcc <HAL_IncTick+0x20>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4413      	add	r3, r2
 8006bba:	4a03      	ldr	r2, [pc, #12]	; (8006bc8 <HAL_IncTick+0x1c>)
 8006bbc:	6013      	str	r3, [r2, #0]
}
 8006bbe:	bf00      	nop
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr
 8006bc8:	20000a04 	.word	0x20000a04
 8006bcc:	20000008 	.word	0x20000008

08006bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8006bd4:	4b03      	ldr	r3, [pc, #12]	; (8006be4 <HAL_GetTick+0x14>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
 8006be2:	bf00      	nop
 8006be4:	20000a04 	.word	0x20000a04

08006be8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b084      	sub	sp, #16
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006bf0:	f7ff ffee 	bl	8006bd0 <HAL_GetTick>
 8006bf4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c00:	d004      	beq.n	8006c0c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006c02:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <HAL_Delay+0x40>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	68fa      	ldr	r2, [r7, #12]
 8006c08:	4413      	add	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006c0c:	bf00      	nop
 8006c0e:	f7ff ffdf 	bl	8006bd0 <HAL_GetTick>
 8006c12:	4602      	mov	r2, r0
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	1ad3      	subs	r3, r2, r3
 8006c18:	68fa      	ldr	r2, [r7, #12]
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d8f7      	bhi.n	8006c0e <HAL_Delay+0x26>
  {
  }
}
 8006c1e:	bf00      	nop
 8006c20:	bf00      	nop
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	20000008 	.word	0x20000008

08006c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	b085      	sub	sp, #20
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f003 0307 	and.w	r3, r3, #7
 8006c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006c3c:	4b0c      	ldr	r3, [pc, #48]	; (8006c70 <__NVIC_SetPriorityGrouping+0x44>)
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006c42:	68ba      	ldr	r2, [r7, #8]
 8006c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c48:	4013      	ands	r3, r2
 8006c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c5e:	4a04      	ldr	r2, [pc, #16]	; (8006c70 <__NVIC_SetPriorityGrouping+0x44>)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	60d3      	str	r3, [r2, #12]
}
 8006c64:	bf00      	nop
 8006c66:	3714      	adds	r7, #20
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr
 8006c70:	e000ed00 	.word	0xe000ed00

08006c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c74:	b480      	push	{r7}
 8006c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c78:	4b04      	ldr	r3, [pc, #16]	; (8006c8c <__NVIC_GetPriorityGrouping+0x18>)
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	0a1b      	lsrs	r3, r3, #8
 8006c7e:	f003 0307 	and.w	r3, r3, #7
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	e000ed00 	.word	0xe000ed00

08006c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	4603      	mov	r3, r0
 8006c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	db0b      	blt.n	8006cba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006ca2:	79fb      	ldrb	r3, [r7, #7]
 8006ca4:	f003 021f 	and.w	r2, r3, #31
 8006ca8:	4907      	ldr	r1, [pc, #28]	; (8006cc8 <__NVIC_EnableIRQ+0x38>)
 8006caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cae:	095b      	lsrs	r3, r3, #5
 8006cb0:	2001      	movs	r0, #1
 8006cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8006cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	e000e100 	.word	0xe000e100

08006ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	6039      	str	r1, [r7, #0]
 8006cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	db0a      	blt.n	8006cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	490c      	ldr	r1, [pc, #48]	; (8006d18 <__NVIC_SetPriority+0x4c>)
 8006ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cea:	0112      	lsls	r2, r2, #4
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	440b      	add	r3, r1
 8006cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006cf4:	e00a      	b.n	8006d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	4908      	ldr	r1, [pc, #32]	; (8006d1c <__NVIC_SetPriority+0x50>)
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	3b04      	subs	r3, #4
 8006d04:	0112      	lsls	r2, r2, #4
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	440b      	add	r3, r1
 8006d0a:	761a      	strb	r2, [r3, #24]
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	e000e100 	.word	0xe000e100
 8006d1c:	e000ed00 	.word	0xe000ed00

08006d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b089      	sub	sp, #36	; 0x24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f1c3 0307 	rsb	r3, r3, #7
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	bf28      	it	cs
 8006d3e:	2304      	movcs	r3, #4
 8006d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	3304      	adds	r3, #4
 8006d46:	2b06      	cmp	r3, #6
 8006d48:	d902      	bls.n	8006d50 <NVIC_EncodePriority+0x30>
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	3b03      	subs	r3, #3
 8006d4e:	e000      	b.n	8006d52 <NVIC_EncodePriority+0x32>
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5e:	43da      	mvns	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	401a      	ands	r2, r3
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d72:	43d9      	mvns	r1, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d78:	4313      	orrs	r3, r2
         );
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3724      	adds	r7, #36	; 0x24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
	...

08006d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d98:	d301      	bcc.n	8006d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e00f      	b.n	8006dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d9e:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <SysTick_Config+0x40>)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006da6:	210f      	movs	r1, #15
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dac:	f7ff ff8e 	bl	8006ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006db0:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <SysTick_Config+0x40>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006db6:	4b04      	ldr	r3, [pc, #16]	; (8006dc8 <SysTick_Config+0x40>)
 8006db8:	2207      	movs	r2, #7
 8006dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	e000e010 	.word	0xe000e010

08006dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff ff29 	bl	8006c2c <__NVIC_SetPriorityGrouping>
}
 8006dda:	bf00      	nop
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b086      	sub	sp, #24
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	4603      	mov	r3, r0
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
 8006dee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006df0:	f7ff ff40 	bl	8006c74 <__NVIC_GetPriorityGrouping>
 8006df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006df6:	687a      	ldr	r2, [r7, #4]
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	6978      	ldr	r0, [r7, #20]
 8006dfc:	f7ff ff90 	bl	8006d20 <NVIC_EncodePriority>
 8006e00:	4602      	mov	r2, r0
 8006e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e06:	4611      	mov	r1, r2
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff ff5f 	bl	8006ccc <__NVIC_SetPriority>
}
 8006e0e:	bf00      	nop
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e16:	b580      	push	{r7, lr}
 8006e18:	b082      	sub	sp, #8
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f7ff ff33 	bl	8006c90 <__NVIC_EnableIRQ>
}
 8006e2a:	bf00      	nop
 8006e2c:	3708      	adds	r7, #8
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}

08006e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e32:	b580      	push	{r7, lr}
 8006e34:	b082      	sub	sp, #8
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7ff ffa4 	bl	8006d88 <SysTick_Config>
 8006e40:	4603      	mov	r3, r0
}
 8006e42:	4618      	mov	r0, r3
 8006e44:	3708      	adds	r7, #8
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
	...

08006e4c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e147      	b.n	80070ee <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d106      	bne.n	8006e78 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f7ff fbb6 	bl	80065e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	699a      	ldr	r2, [r3, #24]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f022 0210 	bic.w	r2, r2, #16
 8006e86:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e88:	f7ff fea2 	bl	8006bd0 <HAL_GetTick>
 8006e8c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006e8e:	e012      	b.n	8006eb6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006e90:	f7ff fe9e 	bl	8006bd0 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	2b0a      	cmp	r3, #10
 8006e9c:	d90b      	bls.n	8006eb6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ea2:	f043 0201 	orr.w	r2, r3, #1
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2203      	movs	r2, #3
 8006eae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e11b      	b.n	80070ee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	f003 0308 	and.w	r3, r3, #8
 8006ec0:	2b08      	cmp	r3, #8
 8006ec2:	d0e5      	beq.n	8006e90 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0201 	orr.w	r2, r2, #1
 8006ed2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ed4:	f7ff fe7c 	bl	8006bd0 <HAL_GetTick>
 8006ed8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006eda:	e012      	b.n	8006f02 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006edc:	f7ff fe78 	bl	8006bd0 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b0a      	cmp	r3, #10
 8006ee8:	d90b      	bls.n	8006f02 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eee:	f043 0201 	orr.w	r2, r3, #1
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2203      	movs	r2, #3
 8006efa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006efe:	2301      	movs	r3, #1
 8006f00:	e0f5      	b.n	80070ee <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f003 0301 	and.w	r3, r3, #1
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0e5      	beq.n	8006edc <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0202 	orr.w	r2, r2, #2
 8006f1e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a74      	ldr	r2, [pc, #464]	; (80070f8 <HAL_FDCAN_Init+0x2ac>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d103      	bne.n	8006f32 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006f2a:	4a74      	ldr	r2, [pc, #464]	; (80070fc <HAL_FDCAN_Init+0x2b0>)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	7c1b      	ldrb	r3, [r3, #16]
 8006f36:	2b01      	cmp	r3, #1
 8006f38:	d108      	bne.n	8006f4c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	699a      	ldr	r2, [r3, #24]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f48:	619a      	str	r2, [r3, #24]
 8006f4a:	e007      	b.n	8006f5c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	699a      	ldr	r2, [r3, #24]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f5a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	7c5b      	ldrb	r3, [r3, #17]
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d108      	bne.n	8006f76 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699a      	ldr	r2, [r3, #24]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f72:	619a      	str	r2, [r3, #24]
 8006f74:	e007      	b.n	8006f86 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	699a      	ldr	r2, [r3, #24]
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006f84:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	7c9b      	ldrb	r3, [r3, #18]
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d108      	bne.n	8006fa0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	699a      	ldr	r2, [r3, #24]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006f9c:	619a      	str	r2, [r3, #24]
 8006f9e:	e007      	b.n	8006fb0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	699a      	ldr	r2, [r3, #24]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006fae:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689a      	ldr	r2, [r3, #8]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	430a      	orrs	r2, r1
 8006fc4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	699a      	ldr	r2, [r3, #24]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006fd4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 0210 	bic.w	r2, r2, #16
 8006fe4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d108      	bne.n	8007000 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	699a      	ldr	r2, [r3, #24]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f042 0204 	orr.w	r2, r2, #4
 8006ffc:	619a      	str	r2, [r3, #24]
 8006ffe:	e02c      	b.n	800705a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d028      	beq.n	800705a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	2b02      	cmp	r3, #2
 800700e:	d01c      	beq.n	800704a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699a      	ldr	r2, [r3, #24]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800701e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	691a      	ldr	r2, [r3, #16]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f042 0210 	orr.w	r2, r2, #16
 800702e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	68db      	ldr	r3, [r3, #12]
 8007034:	2b03      	cmp	r3, #3
 8007036:	d110      	bne.n	800705a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	699a      	ldr	r2, [r3, #24]
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f042 0220 	orr.w	r2, r2, #32
 8007046:	619a      	str	r2, [r3, #24]
 8007048:	e007      	b.n	800705a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	699a      	ldr	r2, [r3, #24]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f042 0220 	orr.w	r2, r2, #32
 8007058:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	3b01      	subs	r3, #1
 8007060:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	3b01      	subs	r3, #1
 8007068:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800706a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007072:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	3b01      	subs	r3, #1
 800707c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007082:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007084:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800708e:	d115      	bne.n	80070bc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007094:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709a:	3b01      	subs	r3, #1
 800709c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800709e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a4:	3b01      	subs	r3, #1
 80070a6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80070a8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070b0:	3b01      	subs	r3, #1
 80070b2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80070b8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80070ba:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	430a      	orrs	r2, r1
 80070ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 fc0e 	bl	80078f4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	40006400 	.word	0x40006400
 80070fc:	40006500 	.word	0x40006500

08007100 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b01      	cmp	r3, #1
 8007112:	d110      	bne.n	8007136 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2202      	movs	r2, #2
 8007118:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	699a      	ldr	r2, [r3, #24]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f022 0201 	bic.w	r2, r2, #1
 800712a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	e006      	b.n	8007144 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800713a:	f043 0204 	orr.w	r2, r3, #4
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
  }
}
 8007144:	4618      	mov	r0, r3
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b086      	sub	sp, #24
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007162:	b2db      	uxtb	r3, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d12c      	bne.n	80071c2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d007      	beq.n	8007188 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800717c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e023      	b.n	80071d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007190:	0c1b      	lsrs	r3, r3, #16
 8007192:	f003 0303 	and.w	r3, r3, #3
 8007196:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	68b9      	ldr	r1, [r7, #8]
 800719e:	68f8      	ldr	r0, [r7, #12]
 80071a0:	f000 fbfe 	bl	80079a0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2101      	movs	r1, #1
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	fa01 f202 	lsl.w	r2, r1, r2
 80071b0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80071b4:	2201      	movs	r2, #1
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	409a      	lsls	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	e006      	b.n	80071d0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c6:	f043 0208 	orr.w	r2, r3, #8
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
  }
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3718      	adds	r7, #24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80071d8:	b480      	push	{r7}
 80071da:	b08b      	sub	sp, #44	; 0x2c
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80071e6:	2300      	movs	r3, #0
 80071e8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80071f0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80071f2:	7efb      	ldrb	r3, [r7, #27]
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	f040 80e8 	bne.w	80073ca <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2b40      	cmp	r3, #64	; 0x40
 80071fe:	d137      	bne.n	8007270 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	2b00      	cmp	r3, #0
 800720e:	d107      	bne.n	8007220 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007214:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800721c:	2301      	movs	r3, #1
 800721e:	e0db      	b.n	80073d8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007228:	0e1b      	lsrs	r3, r3, #24
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	2b01      	cmp	r3, #1
 8007230:	d10a      	bne.n	8007248 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800723a:	0a5b      	lsrs	r3, r3, #9
 800723c:	f003 0301 	and.w	r3, r3, #1
 8007240:	2b01      	cmp	r3, #1
 8007242:	d101      	bne.n	8007248 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8007244:	2301      	movs	r3, #1
 8007246:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007250:	0a1b      	lsrs	r3, r3, #8
 8007252:	f003 0303 	and.w	r3, r3, #3
 8007256:	69fa      	ldr	r2, [r7, #28]
 8007258:	4413      	add	r3, r2
 800725a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007260:	69fa      	ldr	r2, [r7, #28]
 8007262:	4613      	mov	r3, r2
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	4413      	add	r3, r2
 8007268:	00db      	lsls	r3, r3, #3
 800726a:	440b      	add	r3, r1
 800726c:	627b      	str	r3, [r7, #36]	; 0x24
 800726e:	e036      	b.n	80072de <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007278:	f003 030f 	and.w	r3, r3, #15
 800727c:	2b00      	cmp	r3, #0
 800727e:	d107      	bne.n	8007290 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007284:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e0a3      	b.n	80073d8 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007298:	0e1b      	lsrs	r3, r3, #24
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d10a      	bne.n	80072b8 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072aa:	0a1b      	lsrs	r3, r3, #8
 80072ac:	f003 0301 	and.w	r3, r3, #1
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d101      	bne.n	80072b8 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80072b4:	2301      	movs	r3, #1
 80072b6:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072c0:	0a1b      	lsrs	r3, r3, #8
 80072c2:	f003 0303 	and.w	r3, r3, #3
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80072d0:	69fa      	ldr	r2, [r7, #28]
 80072d2:	4613      	mov	r3, r2
 80072d4:	00db      	lsls	r3, r3, #3
 80072d6:	4413      	add	r3, r2
 80072d8:	00db      	lsls	r3, r3, #3
 80072da:	440b      	add	r3, r1
 80072dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80072de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d107      	bne.n	8007302 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80072f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	0c9b      	lsrs	r3, r3, #18
 80072f8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	601a      	str	r2, [r3, #0]
 8007300:	e005      	b.n	800730e <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800730e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800731a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	3304      	adds	r3, #4
 800732a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	b29a      	uxth	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	0c1b      	lsrs	r3, r3, #16
 800733c:	f003 020f 	and.w	r2, r3, #15
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	0e1b      	lsrs	r3, r3, #24
 8007362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800736a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	0fda      	lsrs	r2, r3, #31
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	3304      	adds	r3, #4
 8007378:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800737e:	2300      	movs	r3, #0
 8007380:	623b      	str	r3, [r7, #32]
 8007382:	e00a      	b.n	800739a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	6a3b      	ldr	r3, [r7, #32]
 8007388:	441a      	add	r2, r3
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	440b      	add	r3, r1
 8007390:	7812      	ldrb	r2, [r2, #0]
 8007392:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	3301      	adds	r3, #1
 8007398:	623b      	str	r3, [r7, #32]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	4a11      	ldr	r2, [pc, #68]	; (80073e4 <HAL_FDCAN_GetRxMessage+0x20c>)
 80073a0:	5cd3      	ldrb	r3, [r2, r3]
 80073a2:	461a      	mov	r2, r3
 80073a4:	6a3b      	ldr	r3, [r7, #32]
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d3ec      	bcc.n	8007384 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b40      	cmp	r3, #64	; 0x40
 80073ae:	d105      	bne.n	80073bc <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80073ba:	e004      	b.n	80073c6 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	69fa      	ldr	r2, [r7, #28]
 80073c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e006      	b.n	80073d8 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073ce:	f043 0208 	orr.w	r2, r3, #8
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
  }
}
 80073d8:	4618      	mov	r0, r3
 80073da:	372c      	adds	r7, #44	; 0x2c
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	0800bb2c 	.word	0x0800bb2c

080073e8 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(const FDCAN_HandleTypeDef *hfdcan)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80073f8:	f003 0307 	and.w	r3, r3, #7
 80073fc:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 80073fe:	68fb      	ldr	r3, [r7, #12]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 800740c:	b480      	push	{r7}
 800740e:	b087      	sub	sp, #28
 8007410:	af00      	add	r7, sp, #0
 8007412:	60f8      	str	r0, [r7, #12]
 8007414:	60b9      	str	r1, [r7, #8]
 8007416:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800741e:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007420:	7dfb      	ldrb	r3, [r7, #23]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d003      	beq.n	800742e <HAL_FDCAN_ActivateNotification+0x22>
 8007426:	7dfb      	ldrb	r3, [r7, #23]
 8007428:	2b02      	cmp	r3, #2
 800742a:	f040 80c8 	bne.w	80075be <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007434:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f003 0307 	and.w	r3, r3, #7
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	f003 0301 	and.w	r3, r3, #1
 8007446:	2b00      	cmp	r3, #0
 8007448:	d03b      	beq.n	80074c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007450:	2b00      	cmp	r3, #0
 8007452:	d004      	beq.n	800745e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007454:	693b      	ldr	r3, [r7, #16]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d031      	beq.n	80074c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007464:	2b00      	cmp	r3, #0
 8007466:	d004      	beq.n	8007472 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b00      	cmp	r3, #0
 8007470:	d027      	beq.n	80074c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007478:	2b00      	cmp	r3, #0
 800747a:	d004      	beq.n	8007486 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	f003 0308 	and.w	r3, r3, #8
 8007482:	2b00      	cmp	r3, #0
 8007484:	d01d      	beq.n	80074c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 800748c:	2b00      	cmp	r3, #0
 800748e:	d004      	beq.n	800749a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	f003 0310 	and.w	r3, r3, #16
 8007496:	2b00      	cmp	r3, #0
 8007498:	d013      	beq.n	80074c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d004      	beq.n	80074ae <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d009      	beq.n	80074c2 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00c      	beq.n	80074d2 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d107      	bne.n	80074d2 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f042 0201 	orr.w	r2, r2, #1
 80074d0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f003 0307 	and.w	r3, r3, #7
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d004      	beq.n	80074e6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d13b      	bne.n	800755e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d004      	beq.n	80074fa <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f003 0302 	and.w	r3, r3, #2
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d131      	bne.n	800755e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007500:	2b00      	cmp	r3, #0
 8007502:	d004      	beq.n	800750e <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	2b00      	cmp	r3, #0
 800750c:	d127      	bne.n	800755e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8007514:	2b00      	cmp	r3, #0
 8007516:	d004      	beq.n	8007522 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	f003 0308 	and.w	r3, r3, #8
 800751e:	2b00      	cmp	r3, #0
 8007520:	d11d      	bne.n	800755e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8007528:	2b00      	cmp	r3, #0
 800752a:	d004      	beq.n	8007536 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	f003 0310 	and.w	r3, r3, #16
 8007532:	2b00      	cmp	r3, #0
 8007534:	d113      	bne.n	800755e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 800753c:	2b00      	cmp	r3, #0
 800753e:	d004      	beq.n	800754a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	f003 0320 	and.w	r3, r3, #32
 8007546:	2b00      	cmp	r3, #0
 8007548:	d109      	bne.n	800755e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00c      	beq.n	800756e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800755a:	2b00      	cmp	r3, #0
 800755c:	d007      	beq.n	800756e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f042 0202 	orr.w	r2, r2, #2
 800756c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007574:	2b00      	cmp	r3, #0
 8007576:	d009      	beq.n	800758c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	430a      	orrs	r2, r1
 8007588:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007592:	2b00      	cmp	r3, #0
 8007594:	d009      	beq.n	80075aa <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	430a      	orrs	r2, r1
 80075a6:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	430a      	orrs	r2, r1
 80075b8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e006      	b.n	80075cc <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c2:	f043 0202 	orr.w	r2, r3, #2
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
  }
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	371c      	adds	r7, #28
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08c      	sub	sp, #48	; 0x30
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075e6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80075ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075f4:	4013      	ands	r3, r2
 80075f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075fe:	f003 0307 	and.w	r3, r3, #7
 8007602:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800760a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800760c:	4013      	ands	r3, r2
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007616:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800761a:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007624:	4013      	ands	r3, r2
 8007626:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800762e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8007632:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800763a:	6a3a      	ldr	r2, [r7, #32]
 800763c:	4013      	ands	r3, r2
 800763e:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007646:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800764a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007652:	69fa      	ldr	r2, [r7, #28]
 8007654:	4013      	ands	r3, r2
 8007656:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007666:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00b      	beq.n	800768a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	d006      	beq.n	800768a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	2240      	movs	r2, #64	; 0x40
 8007682:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 f916 	bl	80078b6 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007690:	2b00      	cmp	r3, #0
 8007692:	d019      	beq.n	80076c8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800769a:	2b00      	cmp	r3, #0
 800769c:	d014      	beq.n	80076c8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80076a6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	4013      	ands	r3, r2
 80076b4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80076be:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80076c0:	6939      	ldr	r1, [r7, #16]
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f000 f8d8 	bl	8007878 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80076c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d007      	beq.n	80076de <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076d4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80076d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f000 f8a2 	bl	8007822 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80076de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d007      	beq.n	80076f4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80076ea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80076ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f7fa fd0a 	bl	8002108 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d007      	beq.n	800770a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007700:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007702:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f897 	bl	8007838 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00c      	beq.n	800772e <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800771a:	2b00      	cmp	r3, #0
 800771c:	d007      	beq.n	800772e <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007726:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f890 	bl	800784e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007734:	2b00      	cmp	r3, #0
 8007736:	d018      	beq.n	800776a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800773e:	2b00      	cmp	r3, #0
 8007740:	d013      	beq.n	800776a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800774a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007754:	68fa      	ldr	r2, [r7, #12]
 8007756:	4013      	ands	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2280      	movs	r2, #128	; 0x80
 8007760:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007762:	68f9      	ldr	r1, [r7, #12]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f87c 	bl	8007862 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00c      	beq.n	800778e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d007      	beq.n	800778e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007786:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f880 	bl	800788e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00c      	beq.n	80077b2 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d007      	beq.n	80077b2 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80077aa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 f878 	bl	80078a2 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00f      	beq.n	80077dc <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80077bc:	69bb      	ldr	r3, [r7, #24]
 80077be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d00a      	beq.n	80077dc <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80077ce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d007      	beq.n	80077f2 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69fa      	ldr	r2, [r7, #28]
 80077e8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80077ea:	69f9      	ldr	r1, [r7, #28]
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f876 	bl	80078de <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d009      	beq.n	800780c <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6a3a      	ldr	r2, [r7, #32]
 80077fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	431a      	orrs	r2, r3
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007810:	2b00      	cmp	r3, #0
 8007812:	d002      	beq.n	800781a <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 f858 	bl	80078ca <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800781a:	bf00      	nop
 800781c:	3730      	adds	r7, #48	; 0x30
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8007822:	b480      	push	{r7}
 8007824:	b083      	sub	sp, #12
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800782c:	bf00      	nop
 800782e:	370c      	adds	r7, #12
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007842:	bf00      	nop
 8007844:	370c      	adds	r7, #12
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr

0800784e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800784e:	b480      	push	{r7}
 8007850:	b083      	sub	sp, #12
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007856:	bf00      	nop
 8007858:	370c      	adds	r7, #12
 800785a:	46bd      	mov	sp, r7
 800785c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007860:	4770      	bx	lr

08007862 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007862:	b480      	push	{r7}
 8007864:	b083      	sub	sp, #12
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800786c:	bf00      	nop
 800786e:	370c      	adds	r7, #12
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr

08007878 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007882:	bf00      	nop
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b083      	sub	sp, #12
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr

080078b6 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078b6:	b480      	push	{r7}
 80078b8:	b083      	sub	sp, #12
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80078be:	bf00      	nop
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr

080078ca <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80078ca:	b480      	push	{r7}
 80078cc:	b083      	sub	sp, #12
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80078d2:	bf00      	nop
 80078d4:	370c      	adds	r7, #12
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr

080078de <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80078de:	b480      	push	{r7}
 80078e0:	b083      	sub	sp, #12
 80078e2:	af00      	add	r7, sp, #0
 80078e4:	6078      	str	r0, [r7, #4]
 80078e6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80078e8:	bf00      	nop
 80078ea:	370c      	adds	r7, #12
 80078ec:	46bd      	mov	sp, r7
 80078ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f2:	4770      	bx	lr

080078f4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80078fc:	4b27      	ldr	r3, [pc, #156]	; (800799c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80078fe:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800790e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007916:	041a      	lsls	r2, r3, #16
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	430a      	orrs	r2, r1
 800791e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007934:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800793c:	061a      	lsls	r2, r3, #24
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	430a      	orrs	r2, r1
 8007944:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	60fb      	str	r3, [r7, #12]
 8007974:	e005      	b.n	8007982 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	2200      	movs	r2, #0
 800797a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	3304      	adds	r3, #4
 8007980:	60fb      	str	r3, [r7, #12]
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	429a      	cmp	r2, r3
 800798c:	d3f3      	bcc.n	8007976 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	4000a400 	.word	0x4000a400

080079a0 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b089      	sub	sp, #36	; 0x24
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d10a      	bne.n	80079cc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80079be:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80079c6:	4313      	orrs	r3, r2
 80079c8:	61fb      	str	r3, [r7, #28]
 80079ca:	e00a      	b.n	80079e2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80079d4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80079da:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80079dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079e0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80079ec:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80079f2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80079f8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007a00:	4313      	orrs	r3, r2
 8007a02:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007a08:	683a      	ldr	r2, [r7, #0]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	4413      	add	r3, r2
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	440b      	add	r3, r1
 8007a14:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8007a16:	69bb      	ldr	r3, [r7, #24]
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007a1c:	69bb      	ldr	r3, [r7, #24]
 8007a1e:	3304      	adds	r3, #4
 8007a20:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	693a      	ldr	r2, [r7, #16]
 8007a26:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007a2e:	2300      	movs	r3, #0
 8007a30:	617b      	str	r3, [r7, #20]
 8007a32:	e020      	b.n	8007a76 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	3303      	adds	r3, #3
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	3302      	adds	r3, #2
 8007a44:	6879      	ldr	r1, [r7, #4]
 8007a46:	440b      	add	r3, r1
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007a4c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	3301      	adds	r3, #1
 8007a52:	6879      	ldr	r1, [r7, #4]
 8007a54:	440b      	add	r3, r1
 8007a56:	781b      	ldrb	r3, [r3, #0]
 8007a58:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007a5a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8007a5c:	6879      	ldr	r1, [r7, #4]
 8007a5e:	697a      	ldr	r2, [r7, #20]
 8007a60:	440a      	add	r2, r1
 8007a62:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007a64:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	3304      	adds	r3, #4
 8007a74:	617b      	str	r3, [r7, #20]
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	4a06      	ldr	r2, [pc, #24]	; (8007a94 <FDCAN_CopyMessageToRAM+0xf4>)
 8007a7c:	5cd3      	ldrb	r3, [r2, r3]
 8007a7e:	461a      	mov	r2, r3
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d3d6      	bcc.n	8007a34 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8007a86:	bf00      	nop
 8007a88:	bf00      	nop
 8007a8a:	3724      	adds	r7, #36	; 0x24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr
 8007a94:	0800bb2c 	.word	0x0800bb2c

08007a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b087      	sub	sp, #28
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007aa6:	e15a      	b.n	8007d5e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	2101      	movs	r1, #1
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8007ab4:	4013      	ands	r3, r2
 8007ab6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 814c 	beq.w	8007d58 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f003 0303 	and.w	r3, r3, #3
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d005      	beq.n	8007ad8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d130      	bne.n	8007b3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae8:	43db      	mvns	r3, r3
 8007aea:	693a      	ldr	r2, [r7, #16]
 8007aec:	4013      	ands	r3, r2
 8007aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	68da      	ldr	r2, [r3, #12]
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	005b      	lsls	r3, r3, #1
 8007af8:	fa02 f303 	lsl.w	r3, r2, r3
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	4313      	orrs	r3, r2
 8007b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	693a      	ldr	r2, [r7, #16]
 8007b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b0e:	2201      	movs	r2, #1
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	fa02 f303 	lsl.w	r3, r2, r3
 8007b16:	43db      	mvns	r3, r3
 8007b18:	693a      	ldr	r2, [r7, #16]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	091b      	lsrs	r3, r3, #4
 8007b24:	f003 0201 	and.w	r2, r3, #1
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2e:	693a      	ldr	r2, [r7, #16]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	693a      	ldr	r2, [r7, #16]
 8007b38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f003 0303 	and.w	r3, r3, #3
 8007b42:	2b03      	cmp	r3, #3
 8007b44:	d017      	beq.n	8007b76 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	68db      	ldr	r3, [r3, #12]
 8007b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	005b      	lsls	r3, r3, #1
 8007b50:	2203      	movs	r2, #3
 8007b52:	fa02 f303 	lsl.w	r3, r2, r3
 8007b56:	43db      	mvns	r3, r3
 8007b58:	693a      	ldr	r2, [r7, #16]
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	689a      	ldr	r2, [r3, #8]
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	693a      	ldr	r2, [r7, #16]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d123      	bne.n	8007bca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	08da      	lsrs	r2, r3, #3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	3208      	adds	r2, #8
 8007b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	f003 0307 	and.w	r3, r3, #7
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	220f      	movs	r2, #15
 8007b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b9e:	43db      	mvns	r3, r3
 8007ba0:	693a      	ldr	r2, [r7, #16]
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ba6:	683b      	ldr	r3, [r7, #0]
 8007ba8:	691a      	ldr	r2, [r3, #16]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f003 0307 	and.w	r3, r3, #7
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	08da      	lsrs	r2, r3, #3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	3208      	adds	r2, #8
 8007bc4:	6939      	ldr	r1, [r7, #16]
 8007bc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	005b      	lsls	r3, r3, #1
 8007bd4:	2203      	movs	r2, #3
 8007bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bda:	43db      	mvns	r3, r3
 8007bdc:	693a      	ldr	r2, [r7, #16]
 8007bde:	4013      	ands	r3, r2
 8007be0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f003 0203 	and.w	r2, r3, #3
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	fa02 f303 	lsl.w	r3, r2, r3
 8007bf2:	693a      	ldr	r2, [r7, #16]
 8007bf4:	4313      	orrs	r3, r2
 8007bf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	693a      	ldr	r2, [r7, #16]
 8007bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 80a6 	beq.w	8007d58 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c0c:	4b5b      	ldr	r3, [pc, #364]	; (8007d7c <HAL_GPIO_Init+0x2e4>)
 8007c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c10:	4a5a      	ldr	r2, [pc, #360]	; (8007d7c <HAL_GPIO_Init+0x2e4>)
 8007c12:	f043 0301 	orr.w	r3, r3, #1
 8007c16:	6613      	str	r3, [r2, #96]	; 0x60
 8007c18:	4b58      	ldr	r3, [pc, #352]	; (8007d7c <HAL_GPIO_Init+0x2e4>)
 8007c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c1c:	f003 0301 	and.w	r3, r3, #1
 8007c20:	60bb      	str	r3, [r7, #8]
 8007c22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007c24:	4a56      	ldr	r2, [pc, #344]	; (8007d80 <HAL_GPIO_Init+0x2e8>)
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	089b      	lsrs	r3, r3, #2
 8007c2a:	3302      	adds	r3, #2
 8007c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f003 0303 	and.w	r3, r3, #3
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	220f      	movs	r2, #15
 8007c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c40:	43db      	mvns	r3, r3
 8007c42:	693a      	ldr	r2, [r7, #16]
 8007c44:	4013      	ands	r3, r2
 8007c46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007c4e:	d01f      	beq.n	8007c90 <HAL_GPIO_Init+0x1f8>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a4c      	ldr	r2, [pc, #304]	; (8007d84 <HAL_GPIO_Init+0x2ec>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d019      	beq.n	8007c8c <HAL_GPIO_Init+0x1f4>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a4b      	ldr	r2, [pc, #300]	; (8007d88 <HAL_GPIO_Init+0x2f0>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d013      	beq.n	8007c88 <HAL_GPIO_Init+0x1f0>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a4a      	ldr	r2, [pc, #296]	; (8007d8c <HAL_GPIO_Init+0x2f4>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d00d      	beq.n	8007c84 <HAL_GPIO_Init+0x1ec>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a49      	ldr	r2, [pc, #292]	; (8007d90 <HAL_GPIO_Init+0x2f8>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d007      	beq.n	8007c80 <HAL_GPIO_Init+0x1e8>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	4a48      	ldr	r2, [pc, #288]	; (8007d94 <HAL_GPIO_Init+0x2fc>)
 8007c74:	4293      	cmp	r3, r2
 8007c76:	d101      	bne.n	8007c7c <HAL_GPIO_Init+0x1e4>
 8007c78:	2305      	movs	r3, #5
 8007c7a:	e00a      	b.n	8007c92 <HAL_GPIO_Init+0x1fa>
 8007c7c:	2306      	movs	r3, #6
 8007c7e:	e008      	b.n	8007c92 <HAL_GPIO_Init+0x1fa>
 8007c80:	2304      	movs	r3, #4
 8007c82:	e006      	b.n	8007c92 <HAL_GPIO_Init+0x1fa>
 8007c84:	2303      	movs	r3, #3
 8007c86:	e004      	b.n	8007c92 <HAL_GPIO_Init+0x1fa>
 8007c88:	2302      	movs	r3, #2
 8007c8a:	e002      	b.n	8007c92 <HAL_GPIO_Init+0x1fa>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	e000      	b.n	8007c92 <HAL_GPIO_Init+0x1fa>
 8007c90:	2300      	movs	r3, #0
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	f002 0203 	and.w	r2, r2, #3
 8007c98:	0092      	lsls	r2, r2, #2
 8007c9a:	4093      	lsls	r3, r2
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007ca2:	4937      	ldr	r1, [pc, #220]	; (8007d80 <HAL_GPIO_Init+0x2e8>)
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	089b      	lsrs	r3, r3, #2
 8007ca8:	3302      	adds	r3, #2
 8007caa:	693a      	ldr	r2, [r7, #16]
 8007cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007cb0:	4b39      	ldr	r3, [pc, #228]	; (8007d98 <HAL_GPIO_Init+0x300>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	43db      	mvns	r3, r3
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	4013      	ands	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	685b      	ldr	r3, [r3, #4]
 8007cc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d003      	beq.n	8007cd4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8007ccc:	693a      	ldr	r2, [r7, #16]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007cd4:	4a30      	ldr	r2, [pc, #192]	; (8007d98 <HAL_GPIO_Init+0x300>)
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007cda:	4b2f      	ldr	r3, [pc, #188]	; (8007d98 <HAL_GPIO_Init+0x300>)
 8007cdc:	68db      	ldr	r3, [r3, #12]
 8007cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	43db      	mvns	r3, r3
 8007ce4:	693a      	ldr	r2, [r7, #16]
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007cfe:	4a26      	ldr	r2, [pc, #152]	; (8007d98 <HAL_GPIO_Init+0x300>)
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8007d04:	4b24      	ldr	r3, [pc, #144]	; (8007d98 <HAL_GPIO_Init+0x300>)
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	43db      	mvns	r3, r3
 8007d0e:	693a      	ldr	r2, [r7, #16]
 8007d10:	4013      	ands	r3, r2
 8007d12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d003      	beq.n	8007d28 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4313      	orrs	r3, r2
 8007d26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007d28:	4a1b      	ldr	r2, [pc, #108]	; (8007d98 <HAL_GPIO_Init+0x300>)
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007d2e:	4b1a      	ldr	r3, [pc, #104]	; (8007d98 <HAL_GPIO_Init+0x300>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	43db      	mvns	r3, r3
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	4013      	ands	r3, r2
 8007d3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d003      	beq.n	8007d52 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8007d4a:	693a      	ldr	r2, [r7, #16]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007d52:	4a11      	ldr	r2, [pc, #68]	; (8007d98 <HAL_GPIO_Init+0x300>)
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	3301      	adds	r3, #1
 8007d5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	fa22 f303 	lsr.w	r3, r2, r3
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f47f ae9d 	bne.w	8007aa8 <HAL_GPIO_Init+0x10>
  }
}
 8007d6e:	bf00      	nop
 8007d70:	bf00      	nop
 8007d72:	371c      	adds	r7, #28
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr
 8007d7c:	40021000 	.word	0x40021000
 8007d80:	40010000 	.word	0x40010000
 8007d84:	48000400 	.word	0x48000400
 8007d88:	48000800 	.word	0x48000800
 8007d8c:	48000c00 	.word	0x48000c00
 8007d90:	48001000 	.word	0x48001000
 8007d94:	48001400 	.word	0x48001400
 8007d98:	40010400 	.word	0x40010400

08007d9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b085      	sub	sp, #20
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	691a      	ldr	r2, [r3, #16]
 8007dac:	887b      	ldrh	r3, [r7, #2]
 8007dae:	4013      	ands	r3, r2
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007db4:	2301      	movs	r3, #1
 8007db6:	73fb      	strb	r3, [r7, #15]
 8007db8:	e001      	b.n	8007dbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007dbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3714      	adds	r7, #20
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr

08007dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	807b      	strh	r3, [r7, #2]
 8007dd8:	4613      	mov	r3, r2
 8007dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ddc:	787b      	ldrb	r3, [r7, #1]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d003      	beq.n	8007dea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007de2:	887a      	ldrh	r2, [r7, #2]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007de8:	e002      	b.n	8007df0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007dea:	887a      	ldrh	r2, [r7, #2]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b085      	sub	sp, #20
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e0e:	887a      	ldrh	r2, [r7, #2]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	4013      	ands	r3, r2
 8007e14:	041a      	lsls	r2, r3, #16
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	43d9      	mvns	r1, r3
 8007e1a:	887b      	ldrh	r3, [r7, #2]
 8007e1c:	400b      	ands	r3, r1
 8007e1e:	431a      	orrs	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	619a      	str	r2, [r3, #24]
}
 8007e24:	bf00      	nop
 8007e26:	3714      	adds	r7, #20
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2e:	4770      	bx	lr

08007e30 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007e30:	b480      	push	{r7}
 8007e32:	b085      	sub	sp, #20
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d141      	bne.n	8007ec2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007e3e:	4b4b      	ldr	r3, [pc, #300]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e4a:	d131      	bne.n	8007eb0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e4c:	4b47      	ldr	r3, [pc, #284]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e52:	4a46      	ldr	r2, [pc, #280]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e5c:	4b43      	ldr	r3, [pc, #268]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007e64:	4a41      	ldr	r2, [pc, #260]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007e6a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e6c:	4b40      	ldr	r3, [pc, #256]	; (8007f70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2232      	movs	r2, #50	; 0x32
 8007e72:	fb02 f303 	mul.w	r3, r2, r3
 8007e76:	4a3f      	ldr	r2, [pc, #252]	; (8007f74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007e78:	fba2 2303 	umull	r2, r3, r2, r3
 8007e7c:	0c9b      	lsrs	r3, r3, #18
 8007e7e:	3301      	adds	r3, #1
 8007e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e82:	e002      	b.n	8007e8a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e8a:	4b38      	ldr	r3, [pc, #224]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e8c:	695b      	ldr	r3, [r3, #20]
 8007e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e96:	d102      	bne.n	8007e9e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d1f2      	bne.n	8007e84 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e9e:	4b33      	ldr	r3, [pc, #204]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ea0:	695b      	ldr	r3, [r3, #20]
 8007ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ea6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007eaa:	d158      	bne.n	8007f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007eac:	2303      	movs	r3, #3
 8007eae:	e057      	b.n	8007f60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007eb0:	4b2e      	ldr	r3, [pc, #184]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eb6:	4a2d      	ldr	r2, [pc, #180]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ebc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007ec0:	e04d      	b.n	8007f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ec8:	d141      	bne.n	8007f4e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007eca:	4b28      	ldr	r3, [pc, #160]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ed6:	d131      	bne.n	8007f3c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ed8:	4b24      	ldr	r3, [pc, #144]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ede:	4a23      	ldr	r2, [pc, #140]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ee4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ee8:	4b20      	ldr	r3, [pc, #128]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007ef0:	4a1e      	ldr	r2, [pc, #120]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ef2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007ef6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007ef8:	4b1d      	ldr	r3, [pc, #116]	; (8007f70 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2232      	movs	r2, #50	; 0x32
 8007efe:	fb02 f303 	mul.w	r3, r2, r3
 8007f02:	4a1c      	ldr	r2, [pc, #112]	; (8007f74 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007f04:	fba2 2303 	umull	r2, r3, r2, r3
 8007f08:	0c9b      	lsrs	r3, r3, #18
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f0e:	e002      	b.n	8007f16 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3b01      	subs	r3, #1
 8007f14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007f16:	4b15      	ldr	r3, [pc, #84]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f18:	695b      	ldr	r3, [r3, #20]
 8007f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f22:	d102      	bne.n	8007f2a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1f2      	bne.n	8007f10 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007f2a:	4b10      	ldr	r3, [pc, #64]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f2c:	695b      	ldr	r3, [r3, #20]
 8007f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f36:	d112      	bne.n	8007f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	e011      	b.n	8007f60 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f3c:	4b0b      	ldr	r3, [pc, #44]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f42:	4a0a      	ldr	r2, [pc, #40]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007f4c:	e007      	b.n	8007f5e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007f4e:	4b07      	ldr	r3, [pc, #28]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007f56:	4a05      	ldr	r2, [pc, #20]	; (8007f6c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007f58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f5c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	3714      	adds	r7, #20
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr
 8007f6c:	40007000 	.word	0x40007000
 8007f70:	20000000 	.word	0x20000000
 8007f74:	431bde83 	.word	0x431bde83

08007f78 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	4a04      	ldr	r2, [pc, #16]	; (8007f94 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f86:	6093      	str	r3, [r2, #8]
}
 8007f88:	bf00      	nop
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	40007000 	.word	0x40007000

08007f98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b088      	sub	sp, #32
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e2fe      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d075      	beq.n	80080a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fb6:	4b97      	ldr	r3, [pc, #604]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f003 030c 	and.w	r3, r3, #12
 8007fbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fc0:	4b94      	ldr	r3, [pc, #592]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f003 0303 	and.w	r3, r3, #3
 8007fc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	2b0c      	cmp	r3, #12
 8007fce:	d102      	bne.n	8007fd6 <HAL_RCC_OscConfig+0x3e>
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d002      	beq.n	8007fdc <HAL_RCC_OscConfig+0x44>
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	2b08      	cmp	r3, #8
 8007fda:	d10b      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fdc:	4b8d      	ldr	r3, [pc, #564]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d05b      	beq.n	80080a0 <HAL_RCC_OscConfig+0x108>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d157      	bne.n	80080a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e2d9      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ffc:	d106      	bne.n	800800c <HAL_RCC_OscConfig+0x74>
 8007ffe:	4b85      	ldr	r3, [pc, #532]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a84      	ldr	r2, [pc, #528]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8008004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008008:	6013      	str	r3, [r2, #0]
 800800a:	e01d      	b.n	8008048 <HAL_RCC_OscConfig+0xb0>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008014:	d10c      	bne.n	8008030 <HAL_RCC_OscConfig+0x98>
 8008016:	4b7f      	ldr	r3, [pc, #508]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a7e      	ldr	r2, [pc, #504]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 800801c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008020:	6013      	str	r3, [r2, #0]
 8008022:	4b7c      	ldr	r3, [pc, #496]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a7b      	ldr	r2, [pc, #492]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8008028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800802c:	6013      	str	r3, [r2, #0]
 800802e:	e00b      	b.n	8008048 <HAL_RCC_OscConfig+0xb0>
 8008030:	4b78      	ldr	r3, [pc, #480]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a77      	ldr	r2, [pc, #476]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8008036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800803a:	6013      	str	r3, [r2, #0]
 800803c:	4b75      	ldr	r3, [pc, #468]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a74      	ldr	r2, [pc, #464]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8008042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d013      	beq.n	8008078 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008050:	f7fe fdbe 	bl	8006bd0 <HAL_GetTick>
 8008054:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008056:	e008      	b.n	800806a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008058:	f7fe fdba 	bl	8006bd0 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	2b64      	cmp	r3, #100	; 0x64
 8008064:	d901      	bls.n	800806a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e29e      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800806a:	4b6a      	ldr	r3, [pc, #424]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0f0      	beq.n	8008058 <HAL_RCC_OscConfig+0xc0>
 8008076:	e014      	b.n	80080a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008078:	f7fe fdaa 	bl	8006bd0 <HAL_GetTick>
 800807c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800807e:	e008      	b.n	8008092 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008080:	f7fe fda6 	bl	8006bd0 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b64      	cmp	r3, #100	; 0x64
 800808c:	d901      	bls.n	8008092 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	e28a      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008092:	4b60      	ldr	r3, [pc, #384]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800809a:	2b00      	cmp	r3, #0
 800809c:	d1f0      	bne.n	8008080 <HAL_RCC_OscConfig+0xe8>
 800809e:	e000      	b.n	80080a2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f003 0302 	and.w	r3, r3, #2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d075      	beq.n	800819a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080ae:	4b59      	ldr	r3, [pc, #356]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f003 030c 	and.w	r3, r3, #12
 80080b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080b8:	4b56      	ldr	r3, [pc, #344]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	f003 0303 	and.w	r3, r3, #3
 80080c0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80080c2:	69bb      	ldr	r3, [r7, #24]
 80080c4:	2b0c      	cmp	r3, #12
 80080c6:	d102      	bne.n	80080ce <HAL_RCC_OscConfig+0x136>
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d002      	beq.n	80080d4 <HAL_RCC_OscConfig+0x13c>
 80080ce:	69bb      	ldr	r3, [r7, #24]
 80080d0:	2b04      	cmp	r3, #4
 80080d2:	d11f      	bne.n	8008114 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080d4:	4b4f      	ldr	r3, [pc, #316]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d005      	beq.n	80080ec <HAL_RCC_OscConfig+0x154>
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d101      	bne.n	80080ec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80080e8:	2301      	movs	r3, #1
 80080ea:	e25d      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ec:	4b49      	ldr	r3, [pc, #292]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 80080ee:	685b      	ldr	r3, [r3, #4]
 80080f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	691b      	ldr	r3, [r3, #16]
 80080f8:	061b      	lsls	r3, r3, #24
 80080fa:	4946      	ldr	r1, [pc, #280]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008100:	4b45      	ldr	r3, [pc, #276]	; (8008218 <HAL_RCC_OscConfig+0x280>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4618      	mov	r0, r3
 8008106:	f7fe fd17 	bl	8006b38 <HAL_InitTick>
 800810a:	4603      	mov	r3, r0
 800810c:	2b00      	cmp	r3, #0
 800810e:	d043      	beq.n	8008198 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008110:	2301      	movs	r3, #1
 8008112:	e249      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d023      	beq.n	8008164 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800811c:	4b3d      	ldr	r3, [pc, #244]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a3c      	ldr	r2, [pc, #240]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8008122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008128:	f7fe fd52 	bl	8006bd0 <HAL_GetTick>
 800812c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800812e:	e008      	b.n	8008142 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008130:	f7fe fd4e 	bl	8006bd0 <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d901      	bls.n	8008142 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e232      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008142:	4b34      	ldr	r3, [pc, #208]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800814a:	2b00      	cmp	r3, #0
 800814c:	d0f0      	beq.n	8008130 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800814e:	4b31      	ldr	r3, [pc, #196]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	061b      	lsls	r3, r3, #24
 800815c:	492d      	ldr	r1, [pc, #180]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 800815e:	4313      	orrs	r3, r2
 8008160:	604b      	str	r3, [r1, #4]
 8008162:	e01a      	b.n	800819a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008164:	4b2b      	ldr	r3, [pc, #172]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a2a      	ldr	r2, [pc, #168]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 800816a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800816e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008170:	f7fe fd2e 	bl	8006bd0 <HAL_GetTick>
 8008174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008176:	e008      	b.n	800818a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008178:	f7fe fd2a 	bl	8006bd0 <HAL_GetTick>
 800817c:	4602      	mov	r2, r0
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	1ad3      	subs	r3, r2, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d901      	bls.n	800818a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008186:	2303      	movs	r3, #3
 8008188:	e20e      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800818a:	4b22      	ldr	r3, [pc, #136]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1f0      	bne.n	8008178 <HAL_RCC_OscConfig+0x1e0>
 8008196:	e000      	b.n	800819a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008198:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f003 0308 	and.w	r3, r3, #8
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d041      	beq.n	800822a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d01c      	beq.n	80081e8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081ae:	4b19      	ldr	r3, [pc, #100]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 80081b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081b4:	4a17      	ldr	r2, [pc, #92]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 80081b6:	f043 0301 	orr.w	r3, r3, #1
 80081ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081be:	f7fe fd07 	bl	8006bd0 <HAL_GetTick>
 80081c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081c4:	e008      	b.n	80081d8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80081c6:	f7fe fd03 	bl	8006bd0 <HAL_GetTick>
 80081ca:	4602      	mov	r2, r0
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	1ad3      	subs	r3, r2, r3
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d901      	bls.n	80081d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80081d4:	2303      	movs	r3, #3
 80081d6:	e1e7      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80081d8:	4b0e      	ldr	r3, [pc, #56]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 80081da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0ef      	beq.n	80081c6 <HAL_RCC_OscConfig+0x22e>
 80081e6:	e020      	b.n	800822a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80081e8:	4b0a      	ldr	r3, [pc, #40]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 80081ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081ee:	4a09      	ldr	r2, [pc, #36]	; (8008214 <HAL_RCC_OscConfig+0x27c>)
 80081f0:	f023 0301 	bic.w	r3, r3, #1
 80081f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081f8:	f7fe fcea 	bl	8006bd0 <HAL_GetTick>
 80081fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80081fe:	e00d      	b.n	800821c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008200:	f7fe fce6 	bl	8006bd0 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d906      	bls.n	800821c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e1ca      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
 8008212:	bf00      	nop
 8008214:	40021000 	.word	0x40021000
 8008218:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800821c:	4b8c      	ldr	r3, [pc, #560]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 800821e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008222:	f003 0302 	and.w	r3, r3, #2
 8008226:	2b00      	cmp	r3, #0
 8008228:	d1ea      	bne.n	8008200 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b00      	cmp	r3, #0
 8008234:	f000 80a6 	beq.w	8008384 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008238:	2300      	movs	r3, #0
 800823a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800823c:	4b84      	ldr	r3, [pc, #528]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 800823e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <HAL_RCC_OscConfig+0x2b4>
 8008248:	2301      	movs	r3, #1
 800824a:	e000      	b.n	800824e <HAL_RCC_OscConfig+0x2b6>
 800824c:	2300      	movs	r3, #0
 800824e:	2b00      	cmp	r3, #0
 8008250:	d00d      	beq.n	800826e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008252:	4b7f      	ldr	r3, [pc, #508]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 8008254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008256:	4a7e      	ldr	r2, [pc, #504]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 8008258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800825c:	6593      	str	r3, [r2, #88]	; 0x58
 800825e:	4b7c      	ldr	r3, [pc, #496]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 8008260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800826a:	2301      	movs	r3, #1
 800826c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800826e:	4b79      	ldr	r3, [pc, #484]	; (8008454 <HAL_RCC_OscConfig+0x4bc>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008276:	2b00      	cmp	r3, #0
 8008278:	d118      	bne.n	80082ac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800827a:	4b76      	ldr	r3, [pc, #472]	; (8008454 <HAL_RCC_OscConfig+0x4bc>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a75      	ldr	r2, [pc, #468]	; (8008454 <HAL_RCC_OscConfig+0x4bc>)
 8008280:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008284:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008286:	f7fe fca3 	bl	8006bd0 <HAL_GetTick>
 800828a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800828c:	e008      	b.n	80082a0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800828e:	f7fe fc9f 	bl	8006bd0 <HAL_GetTick>
 8008292:	4602      	mov	r2, r0
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	1ad3      	subs	r3, r2, r3
 8008298:	2b02      	cmp	r3, #2
 800829a:	d901      	bls.n	80082a0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800829c:	2303      	movs	r3, #3
 800829e:	e183      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80082a0:	4b6c      	ldr	r3, [pc, #432]	; (8008454 <HAL_RCC_OscConfig+0x4bc>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d0f0      	beq.n	800828e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	2b01      	cmp	r3, #1
 80082b2:	d108      	bne.n	80082c6 <HAL_RCC_OscConfig+0x32e>
 80082b4:	4b66      	ldr	r3, [pc, #408]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 80082b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ba:	4a65      	ldr	r2, [pc, #404]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 80082bc:	f043 0301 	orr.w	r3, r3, #1
 80082c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082c4:	e024      	b.n	8008310 <HAL_RCC_OscConfig+0x378>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	2b05      	cmp	r3, #5
 80082cc:	d110      	bne.n	80082f0 <HAL_RCC_OscConfig+0x358>
 80082ce:	4b60      	ldr	r3, [pc, #384]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 80082d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082d4:	4a5e      	ldr	r2, [pc, #376]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 80082d6:	f043 0304 	orr.w	r3, r3, #4
 80082da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082de:	4b5c      	ldr	r3, [pc, #368]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 80082e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e4:	4a5a      	ldr	r2, [pc, #360]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 80082e6:	f043 0301 	orr.w	r3, r3, #1
 80082ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80082ee:	e00f      	b.n	8008310 <HAL_RCC_OscConfig+0x378>
 80082f0:	4b57      	ldr	r3, [pc, #348]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 80082f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082f6:	4a56      	ldr	r2, [pc, #344]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 80082f8:	f023 0301 	bic.w	r3, r3, #1
 80082fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008300:	4b53      	ldr	r3, [pc, #332]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 8008302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008306:	4a52      	ldr	r2, [pc, #328]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 8008308:	f023 0304 	bic.w	r3, r3, #4
 800830c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	689b      	ldr	r3, [r3, #8]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d016      	beq.n	8008346 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008318:	f7fe fc5a 	bl	8006bd0 <HAL_GetTick>
 800831c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800831e:	e00a      	b.n	8008336 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008320:	f7fe fc56 	bl	8006bd0 <HAL_GetTick>
 8008324:	4602      	mov	r2, r0
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	1ad3      	subs	r3, r2, r3
 800832a:	f241 3288 	movw	r2, #5000	; 0x1388
 800832e:	4293      	cmp	r3, r2
 8008330:	d901      	bls.n	8008336 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e138      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008336:	4b46      	ldr	r3, [pc, #280]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 8008338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	2b00      	cmp	r3, #0
 8008342:	d0ed      	beq.n	8008320 <HAL_RCC_OscConfig+0x388>
 8008344:	e015      	b.n	8008372 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008346:	f7fe fc43 	bl	8006bd0 <HAL_GetTick>
 800834a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800834c:	e00a      	b.n	8008364 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800834e:	f7fe fc3f 	bl	8006bd0 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	693b      	ldr	r3, [r7, #16]
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	f241 3288 	movw	r2, #5000	; 0x1388
 800835c:	4293      	cmp	r3, r2
 800835e:	d901      	bls.n	8008364 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e121      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008364:	4b3a      	ldr	r3, [pc, #232]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 8008366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800836a:	f003 0302 	and.w	r3, r3, #2
 800836e:	2b00      	cmp	r3, #0
 8008370:	d1ed      	bne.n	800834e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008372:	7ffb      	ldrb	r3, [r7, #31]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d105      	bne.n	8008384 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008378:	4b35      	ldr	r3, [pc, #212]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 800837a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837c:	4a34      	ldr	r2, [pc, #208]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 800837e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008382:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f003 0320 	and.w	r3, r3, #32
 800838c:	2b00      	cmp	r3, #0
 800838e:	d03c      	beq.n	800840a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d01c      	beq.n	80083d2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008398:	4b2d      	ldr	r3, [pc, #180]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 800839a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800839e:	4a2c      	ldr	r2, [pc, #176]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 80083a0:	f043 0301 	orr.w	r3, r3, #1
 80083a4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083a8:	f7fe fc12 	bl	8006bd0 <HAL_GetTick>
 80083ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80083ae:	e008      	b.n	80083c2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083b0:	f7fe fc0e 	bl	8006bd0 <HAL_GetTick>
 80083b4:	4602      	mov	r2, r0
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	1ad3      	subs	r3, r2, r3
 80083ba:	2b02      	cmp	r3, #2
 80083bc:	d901      	bls.n	80083c2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	e0f2      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80083c2:	4b23      	ldr	r3, [pc, #140]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 80083c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083c8:	f003 0302 	and.w	r3, r3, #2
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d0ef      	beq.n	80083b0 <HAL_RCC_OscConfig+0x418>
 80083d0:	e01b      	b.n	800840a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80083d2:	4b1f      	ldr	r3, [pc, #124]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 80083d4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80083d8:	4a1d      	ldr	r2, [pc, #116]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 80083da:	f023 0301 	bic.w	r3, r3, #1
 80083de:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083e2:	f7fe fbf5 	bl	8006bd0 <HAL_GetTick>
 80083e6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80083e8:	e008      	b.n	80083fc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80083ea:	f7fe fbf1 	bl	8006bd0 <HAL_GetTick>
 80083ee:	4602      	mov	r2, r0
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	1ad3      	subs	r3, r2, r3
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	d901      	bls.n	80083fc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e0d5      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80083fc:	4b14      	ldr	r3, [pc, #80]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 80083fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008402:	f003 0302 	and.w	r3, r3, #2
 8008406:	2b00      	cmp	r3, #0
 8008408:	d1ef      	bne.n	80083ea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	2b00      	cmp	r3, #0
 8008410:	f000 80c9 	beq.w	80085a6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008414:	4b0e      	ldr	r3, [pc, #56]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	f003 030c 	and.w	r3, r3, #12
 800841c:	2b0c      	cmp	r3, #12
 800841e:	f000 8083 	beq.w	8008528 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	69db      	ldr	r3, [r3, #28]
 8008426:	2b02      	cmp	r3, #2
 8008428:	d15e      	bne.n	80084e8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800842a:	4b09      	ldr	r3, [pc, #36]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a08      	ldr	r2, [pc, #32]	; (8008450 <HAL_RCC_OscConfig+0x4b8>)
 8008430:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008434:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008436:	f7fe fbcb 	bl	8006bd0 <HAL_GetTick>
 800843a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800843c:	e00c      	b.n	8008458 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800843e:	f7fe fbc7 	bl	8006bd0 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	693b      	ldr	r3, [r7, #16]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d905      	bls.n	8008458 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e0ab      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
 8008450:	40021000 	.word	0x40021000
 8008454:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008458:	4b55      	ldr	r3, [pc, #340]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1ec      	bne.n	800843e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008464:	4b52      	ldr	r3, [pc, #328]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 8008466:	68da      	ldr	r2, [r3, #12]
 8008468:	4b52      	ldr	r3, [pc, #328]	; (80085b4 <HAL_RCC_OscConfig+0x61c>)
 800846a:	4013      	ands	r3, r2
 800846c:	687a      	ldr	r2, [r7, #4]
 800846e:	6a11      	ldr	r1, [r2, #32]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008474:	3a01      	subs	r2, #1
 8008476:	0112      	lsls	r2, r2, #4
 8008478:	4311      	orrs	r1, r2
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800847e:	0212      	lsls	r2, r2, #8
 8008480:	4311      	orrs	r1, r2
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008486:	0852      	lsrs	r2, r2, #1
 8008488:	3a01      	subs	r2, #1
 800848a:	0552      	lsls	r2, r2, #21
 800848c:	4311      	orrs	r1, r2
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008492:	0852      	lsrs	r2, r2, #1
 8008494:	3a01      	subs	r2, #1
 8008496:	0652      	lsls	r2, r2, #25
 8008498:	4311      	orrs	r1, r2
 800849a:	687a      	ldr	r2, [r7, #4]
 800849c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800849e:	06d2      	lsls	r2, r2, #27
 80084a0:	430a      	orrs	r2, r1
 80084a2:	4943      	ldr	r1, [pc, #268]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 80084a4:	4313      	orrs	r3, r2
 80084a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084a8:	4b41      	ldr	r3, [pc, #260]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a40      	ldr	r2, [pc, #256]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 80084ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80084b4:	4b3e      	ldr	r3, [pc, #248]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	4a3d      	ldr	r2, [pc, #244]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 80084ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80084be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084c0:	f7fe fb86 	bl	8006bd0 <HAL_GetTick>
 80084c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084c6:	e008      	b.n	80084da <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084c8:	f7fe fb82 	bl	8006bd0 <HAL_GetTick>
 80084cc:	4602      	mov	r2, r0
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	1ad3      	subs	r3, r2, r3
 80084d2:	2b02      	cmp	r3, #2
 80084d4:	d901      	bls.n	80084da <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e066      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084da:	4b35      	ldr	r3, [pc, #212]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d0f0      	beq.n	80084c8 <HAL_RCC_OscConfig+0x530>
 80084e6:	e05e      	b.n	80085a6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80084e8:	4b31      	ldr	r3, [pc, #196]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a30      	ldr	r2, [pc, #192]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 80084ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084f4:	f7fe fb6c 	bl	8006bd0 <HAL_GetTick>
 80084f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80084fa:	e008      	b.n	800850e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084fc:	f7fe fb68 	bl	8006bd0 <HAL_GetTick>
 8008500:	4602      	mov	r2, r0
 8008502:	693b      	ldr	r3, [r7, #16]
 8008504:	1ad3      	subs	r3, r2, r3
 8008506:	2b02      	cmp	r3, #2
 8008508:	d901      	bls.n	800850e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800850a:	2303      	movs	r3, #3
 800850c:	e04c      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800850e:	4b28      	ldr	r3, [pc, #160]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008516:	2b00      	cmp	r3, #0
 8008518:	d1f0      	bne.n	80084fc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800851a:	4b25      	ldr	r3, [pc, #148]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	4924      	ldr	r1, [pc, #144]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 8008520:	4b25      	ldr	r3, [pc, #148]	; (80085b8 <HAL_RCC_OscConfig+0x620>)
 8008522:	4013      	ands	r3, r2
 8008524:	60cb      	str	r3, [r1, #12]
 8008526:	e03e      	b.n	80085a6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	69db      	ldr	r3, [r3, #28]
 800852c:	2b01      	cmp	r3, #1
 800852e:	d101      	bne.n	8008534 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e039      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008534:	4b1e      	ldr	r3, [pc, #120]	; (80085b0 <HAL_RCC_OscConfig+0x618>)
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f003 0203 	and.w	r2, r3, #3
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6a1b      	ldr	r3, [r3, #32]
 8008544:	429a      	cmp	r2, r3
 8008546:	d12c      	bne.n	80085a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008552:	3b01      	subs	r3, #1
 8008554:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008556:	429a      	cmp	r2, r3
 8008558:	d123      	bne.n	80085a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008564:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008566:	429a      	cmp	r2, r3
 8008568:	d11b      	bne.n	80085a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008574:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008576:	429a      	cmp	r2, r3
 8008578:	d113      	bne.n	80085a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008584:	085b      	lsrs	r3, r3, #1
 8008586:	3b01      	subs	r3, #1
 8008588:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800858a:	429a      	cmp	r2, r3
 800858c:	d109      	bne.n	80085a2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008598:	085b      	lsrs	r3, r3, #1
 800859a:	3b01      	subs	r3, #1
 800859c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800859e:	429a      	cmp	r2, r3
 80085a0:	d001      	beq.n	80085a6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80085a2:	2301      	movs	r3, #1
 80085a4:	e000      	b.n	80085a8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80085a6:	2300      	movs	r3, #0
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3720      	adds	r7, #32
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	40021000 	.word	0x40021000
 80085b4:	019f800c 	.word	0x019f800c
 80085b8:	feeefffc 	.word	0xfeeefffc

080085bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b086      	sub	sp, #24
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80085c6:	2300      	movs	r3, #0
 80085c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d101      	bne.n	80085d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80085d0:	2301      	movs	r3, #1
 80085d2:	e11e      	b.n	8008812 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80085d4:	4b91      	ldr	r3, [pc, #580]	; (800881c <HAL_RCC_ClockConfig+0x260>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d910      	bls.n	8008604 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085e2:	4b8e      	ldr	r3, [pc, #568]	; (800881c <HAL_RCC_ClockConfig+0x260>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f023 020f 	bic.w	r2, r3, #15
 80085ea:	498c      	ldr	r1, [pc, #560]	; (800881c <HAL_RCC_ClockConfig+0x260>)
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	4313      	orrs	r3, r2
 80085f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085f2:	4b8a      	ldr	r3, [pc, #552]	; (800881c <HAL_RCC_ClockConfig+0x260>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 030f 	and.w	r3, r3, #15
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	429a      	cmp	r2, r3
 80085fe:	d001      	beq.n	8008604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e106      	b.n	8008812 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0301 	and.w	r3, r3, #1
 800860c:	2b00      	cmp	r3, #0
 800860e:	d073      	beq.n	80086f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	2b03      	cmp	r3, #3
 8008616:	d129      	bne.n	800866c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008618:	4b81      	ldr	r3, [pc, #516]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008620:	2b00      	cmp	r3, #0
 8008622:	d101      	bne.n	8008628 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008624:	2301      	movs	r3, #1
 8008626:	e0f4      	b.n	8008812 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008628:	f000 f966 	bl	80088f8 <RCC_GetSysClockFreqFromPLLSource>
 800862c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	4a7c      	ldr	r2, [pc, #496]	; (8008824 <HAL_RCC_ClockConfig+0x268>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d93f      	bls.n	80086b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008636:	4b7a      	ldr	r3, [pc, #488]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d009      	beq.n	8008656 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800864a:	2b00      	cmp	r3, #0
 800864c:	d033      	beq.n	80086b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008652:	2b00      	cmp	r3, #0
 8008654:	d12f      	bne.n	80086b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008656:	4b72      	ldr	r3, [pc, #456]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800865e:	4a70      	ldr	r2, [pc, #448]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 8008660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008664:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008666:	2380      	movs	r3, #128	; 0x80
 8008668:	617b      	str	r3, [r7, #20]
 800866a:	e024      	b.n	80086b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	2b02      	cmp	r3, #2
 8008672:	d107      	bne.n	8008684 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008674:	4b6a      	ldr	r3, [pc, #424]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d109      	bne.n	8008694 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	e0c6      	b.n	8008812 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008684:	4b66      	ldr	r3, [pc, #408]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800868c:	2b00      	cmp	r3, #0
 800868e:	d101      	bne.n	8008694 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008690:	2301      	movs	r3, #1
 8008692:	e0be      	b.n	8008812 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008694:	f000 f8ce 	bl	8008834 <HAL_RCC_GetSysClockFreq>
 8008698:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	4a61      	ldr	r2, [pc, #388]	; (8008824 <HAL_RCC_ClockConfig+0x268>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d909      	bls.n	80086b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80086a2:	4b5f      	ldr	r3, [pc, #380]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086aa:	4a5d      	ldr	r2, [pc, #372]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 80086ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80086b2:	2380      	movs	r3, #128	; 0x80
 80086b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80086b6:	4b5a      	ldr	r3, [pc, #360]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	f023 0203 	bic.w	r2, r3, #3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	4957      	ldr	r1, [pc, #348]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80086c8:	f7fe fa82 	bl	8006bd0 <HAL_GetTick>
 80086cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086ce:	e00a      	b.n	80086e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086d0:	f7fe fa7e 	bl	8006bd0 <HAL_GetTick>
 80086d4:	4602      	mov	r2, r0
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	f241 3288 	movw	r2, #5000	; 0x1388
 80086de:	4293      	cmp	r3, r2
 80086e0:	d901      	bls.n	80086e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80086e2:	2303      	movs	r3, #3
 80086e4:	e095      	b.n	8008812 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80086e6:	4b4e      	ldr	r3, [pc, #312]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	f003 020c 	and.w	r2, r3, #12
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d1eb      	bne.n	80086d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f003 0302 	and.w	r3, r3, #2
 8008700:	2b00      	cmp	r3, #0
 8008702:	d023      	beq.n	800874c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d005      	beq.n	800871c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008710:	4b43      	ldr	r3, [pc, #268]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 8008712:	689b      	ldr	r3, [r3, #8]
 8008714:	4a42      	ldr	r2, [pc, #264]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 8008716:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800871a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0308 	and.w	r3, r3, #8
 8008724:	2b00      	cmp	r3, #0
 8008726:	d007      	beq.n	8008738 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008728:	4b3d      	ldr	r3, [pc, #244]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008730:	4a3b      	ldr	r2, [pc, #236]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 8008732:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008736:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008738:	4b39      	ldr	r3, [pc, #228]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	689b      	ldr	r3, [r3, #8]
 8008744:	4936      	ldr	r1, [pc, #216]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 8008746:	4313      	orrs	r3, r2
 8008748:	608b      	str	r3, [r1, #8]
 800874a:	e008      	b.n	800875e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	2b80      	cmp	r3, #128	; 0x80
 8008750:	d105      	bne.n	800875e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008752:	4b33      	ldr	r3, [pc, #204]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	4a32      	ldr	r2, [pc, #200]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 8008758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800875c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800875e:	4b2f      	ldr	r3, [pc, #188]	; (800881c <HAL_RCC_ClockConfig+0x260>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	f003 030f 	and.w	r3, r3, #15
 8008766:	683a      	ldr	r2, [r7, #0]
 8008768:	429a      	cmp	r2, r3
 800876a:	d21d      	bcs.n	80087a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800876c:	4b2b      	ldr	r3, [pc, #172]	; (800881c <HAL_RCC_ClockConfig+0x260>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f023 020f 	bic.w	r2, r3, #15
 8008774:	4929      	ldr	r1, [pc, #164]	; (800881c <HAL_RCC_ClockConfig+0x260>)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	4313      	orrs	r3, r2
 800877a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800877c:	f7fe fa28 	bl	8006bd0 <HAL_GetTick>
 8008780:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008782:	e00a      	b.n	800879a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008784:	f7fe fa24 	bl	8006bd0 <HAL_GetTick>
 8008788:	4602      	mov	r2, r0
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008792:	4293      	cmp	r3, r2
 8008794:	d901      	bls.n	800879a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008796:	2303      	movs	r3, #3
 8008798:	e03b      	b.n	8008812 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800879a:	4b20      	ldr	r3, [pc, #128]	; (800881c <HAL_RCC_ClockConfig+0x260>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 030f 	and.w	r3, r3, #15
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d1ed      	bne.n	8008784 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f003 0304 	and.w	r3, r3, #4
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d008      	beq.n	80087c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80087b4:	4b1a      	ldr	r3, [pc, #104]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	4917      	ldr	r1, [pc, #92]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 80087c2:	4313      	orrs	r3, r2
 80087c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0308 	and.w	r3, r3, #8
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d009      	beq.n	80087e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80087d2:	4b13      	ldr	r3, [pc, #76]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	691b      	ldr	r3, [r3, #16]
 80087de:	00db      	lsls	r3, r3, #3
 80087e0:	490f      	ldr	r1, [pc, #60]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80087e6:	f000 f825 	bl	8008834 <HAL_RCC_GetSysClockFreq>
 80087ea:	4602      	mov	r2, r0
 80087ec:	4b0c      	ldr	r3, [pc, #48]	; (8008820 <HAL_RCC_ClockConfig+0x264>)
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	091b      	lsrs	r3, r3, #4
 80087f2:	f003 030f 	and.w	r3, r3, #15
 80087f6:	490c      	ldr	r1, [pc, #48]	; (8008828 <HAL_RCC_ClockConfig+0x26c>)
 80087f8:	5ccb      	ldrb	r3, [r1, r3]
 80087fa:	f003 031f 	and.w	r3, r3, #31
 80087fe:	fa22 f303 	lsr.w	r3, r2, r3
 8008802:	4a0a      	ldr	r2, [pc, #40]	; (800882c <HAL_RCC_ClockConfig+0x270>)
 8008804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008806:	4b0a      	ldr	r3, [pc, #40]	; (8008830 <HAL_RCC_ClockConfig+0x274>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	4618      	mov	r0, r3
 800880c:	f7fe f994 	bl	8006b38 <HAL_InitTick>
 8008810:	4603      	mov	r3, r0
}
 8008812:	4618      	mov	r0, r3
 8008814:	3718      	adds	r7, #24
 8008816:	46bd      	mov	sp, r7
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	40022000 	.word	0x40022000
 8008820:	40021000 	.word	0x40021000
 8008824:	04c4b400 	.word	0x04c4b400
 8008828:	0800bb1c 	.word	0x0800bb1c
 800882c:	20000000 	.word	0x20000000
 8008830:	20000004 	.word	0x20000004

08008834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008834:	b480      	push	{r7}
 8008836:	b087      	sub	sp, #28
 8008838:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800883a:	4b2c      	ldr	r3, [pc, #176]	; (80088ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	f003 030c 	and.w	r3, r3, #12
 8008842:	2b04      	cmp	r3, #4
 8008844:	d102      	bne.n	800884c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008846:	4b2a      	ldr	r3, [pc, #168]	; (80088f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008848:	613b      	str	r3, [r7, #16]
 800884a:	e047      	b.n	80088dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800884c:	4b27      	ldr	r3, [pc, #156]	; (80088ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f003 030c 	and.w	r3, r3, #12
 8008854:	2b08      	cmp	r3, #8
 8008856:	d102      	bne.n	800885e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008858:	4b26      	ldr	r3, [pc, #152]	; (80088f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800885a:	613b      	str	r3, [r7, #16]
 800885c:	e03e      	b.n	80088dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800885e:	4b23      	ldr	r3, [pc, #140]	; (80088ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008860:	689b      	ldr	r3, [r3, #8]
 8008862:	f003 030c 	and.w	r3, r3, #12
 8008866:	2b0c      	cmp	r3, #12
 8008868:	d136      	bne.n	80088d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800886a:	4b20      	ldr	r3, [pc, #128]	; (80088ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f003 0303 	and.w	r3, r3, #3
 8008872:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008874:	4b1d      	ldr	r3, [pc, #116]	; (80088ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	091b      	lsrs	r3, r3, #4
 800887a:	f003 030f 	and.w	r3, r3, #15
 800887e:	3301      	adds	r3, #1
 8008880:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	2b03      	cmp	r3, #3
 8008886:	d10c      	bne.n	80088a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008888:	4a1a      	ldr	r2, [pc, #104]	; (80088f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008890:	4a16      	ldr	r2, [pc, #88]	; (80088ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8008892:	68d2      	ldr	r2, [r2, #12]
 8008894:	0a12      	lsrs	r2, r2, #8
 8008896:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800889a:	fb02 f303 	mul.w	r3, r2, r3
 800889e:	617b      	str	r3, [r7, #20]
      break;
 80088a0:	e00c      	b.n	80088bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80088a2:	4a13      	ldr	r2, [pc, #76]	; (80088f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80088aa:	4a10      	ldr	r2, [pc, #64]	; (80088ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80088ac:	68d2      	ldr	r2, [r2, #12]
 80088ae:	0a12      	lsrs	r2, r2, #8
 80088b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80088b4:	fb02 f303 	mul.w	r3, r2, r3
 80088b8:	617b      	str	r3, [r7, #20]
      break;
 80088ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80088bc:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	0e5b      	lsrs	r3, r3, #25
 80088c2:	f003 0303 	and.w	r3, r3, #3
 80088c6:	3301      	adds	r3, #1
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80088cc:	697a      	ldr	r2, [r7, #20]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80088d4:	613b      	str	r3, [r7, #16]
 80088d6:	e001      	b.n	80088dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80088d8:	2300      	movs	r3, #0
 80088da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80088dc:	693b      	ldr	r3, [r7, #16]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	371c      	adds	r7, #28
 80088e2:	46bd      	mov	sp, r7
 80088e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e8:	4770      	bx	lr
 80088ea:	bf00      	nop
 80088ec:	40021000 	.word	0x40021000
 80088f0:	00f42400 	.word	0x00f42400
 80088f4:	007a1200 	.word	0x007a1200

080088f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80088fe:	4b1e      	ldr	r3, [pc, #120]	; (8008978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008900:	68db      	ldr	r3, [r3, #12]
 8008902:	f003 0303 	and.w	r3, r3, #3
 8008906:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008908:	4b1b      	ldr	r3, [pc, #108]	; (8008978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800890a:	68db      	ldr	r3, [r3, #12]
 800890c:	091b      	lsrs	r3, r3, #4
 800890e:	f003 030f 	and.w	r3, r3, #15
 8008912:	3301      	adds	r3, #1
 8008914:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	2b03      	cmp	r3, #3
 800891a:	d10c      	bne.n	8008936 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800891c:	4a17      	ldr	r2, [pc, #92]	; (800897c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	fbb2 f3f3 	udiv	r3, r2, r3
 8008924:	4a14      	ldr	r2, [pc, #80]	; (8008978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008926:	68d2      	ldr	r2, [r2, #12]
 8008928:	0a12      	lsrs	r2, r2, #8
 800892a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800892e:	fb02 f303 	mul.w	r3, r2, r3
 8008932:	617b      	str	r3, [r7, #20]
    break;
 8008934:	e00c      	b.n	8008950 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008936:	4a12      	ldr	r2, [pc, #72]	; (8008980 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	fbb2 f3f3 	udiv	r3, r2, r3
 800893e:	4a0e      	ldr	r2, [pc, #56]	; (8008978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008940:	68d2      	ldr	r2, [r2, #12]
 8008942:	0a12      	lsrs	r2, r2, #8
 8008944:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008948:	fb02 f303 	mul.w	r3, r2, r3
 800894c:	617b      	str	r3, [r7, #20]
    break;
 800894e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008950:	4b09      	ldr	r3, [pc, #36]	; (8008978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008952:	68db      	ldr	r3, [r3, #12]
 8008954:	0e5b      	lsrs	r3, r3, #25
 8008956:	f003 0303 	and.w	r3, r3, #3
 800895a:	3301      	adds	r3, #1
 800895c:	005b      	lsls	r3, r3, #1
 800895e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	fbb2 f3f3 	udiv	r3, r2, r3
 8008968:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800896a:	687b      	ldr	r3, [r7, #4]
}
 800896c:	4618      	mov	r0, r3
 800896e:	371c      	adds	r7, #28
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	40021000 	.word	0x40021000
 800897c:	007a1200 	.word	0x007a1200
 8008980:	00f42400 	.word	0x00f42400

08008984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b086      	sub	sp, #24
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800898c:	2300      	movs	r3, #0
 800898e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008990:	2300      	movs	r3, #0
 8008992:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 8098 	beq.w	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80089a2:	2300      	movs	r3, #0
 80089a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80089a6:	4b43      	ldr	r3, [pc, #268]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10d      	bne.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80089b2:	4b40      	ldr	r3, [pc, #256]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089b6:	4a3f      	ldr	r2, [pc, #252]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089bc:	6593      	str	r3, [r2, #88]	; 0x58
 80089be:	4b3d      	ldr	r3, [pc, #244]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089c6:	60bb      	str	r3, [r7, #8]
 80089c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089ca:	2301      	movs	r3, #1
 80089cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089ce:	4b3a      	ldr	r3, [pc, #232]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a39      	ldr	r2, [pc, #228]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80089d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80089da:	f7fe f8f9 	bl	8006bd0 <HAL_GetTick>
 80089de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089e0:	e009      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089e2:	f7fe f8f5 	bl	8006bd0 <HAL_GetTick>
 80089e6:	4602      	mov	r2, r0
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	1ad3      	subs	r3, r2, r3
 80089ec:	2b02      	cmp	r3, #2
 80089ee:	d902      	bls.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80089f0:	2303      	movs	r3, #3
 80089f2:	74fb      	strb	r3, [r7, #19]
        break;
 80089f4:	e005      	b.n	8008a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80089f6:	4b30      	ldr	r3, [pc, #192]	; (8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d0ef      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008a02:	7cfb      	ldrb	r3, [r7, #19]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d159      	bne.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008a08:	4b2a      	ldr	r3, [pc, #168]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d01e      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	697a      	ldr	r2, [r7, #20]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d019      	beq.n	8008a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008a24:	4b23      	ldr	r3, [pc, #140]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008a30:	4b20      	ldr	r3, [pc, #128]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a36:	4a1f      	ldr	r2, [pc, #124]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008a40:	4b1c      	ldr	r3, [pc, #112]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a46:	4a1b      	ldr	r2, [pc, #108]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008a50:	4a18      	ldr	r2, [pc, #96]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d016      	beq.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a62:	f7fe f8b5 	bl	8006bd0 <HAL_GetTick>
 8008a66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a68:	e00b      	b.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a6a:	f7fe f8b1 	bl	8006bd0 <HAL_GetTick>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	1ad3      	subs	r3, r2, r3
 8008a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d902      	bls.n	8008a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	74fb      	strb	r3, [r7, #19]
            break;
 8008a80:	e006      	b.n	8008a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a82:	4b0c      	ldr	r3, [pc, #48]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a88:	f003 0302 	and.w	r3, r3, #2
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d0ec      	beq.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008a90:	7cfb      	ldrb	r3, [r7, #19]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d10b      	bne.n	8008aae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a96:	4b07      	ldr	r3, [pc, #28]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa4:	4903      	ldr	r1, [pc, #12]	; (8008ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008aa6:	4313      	orrs	r3, r2
 8008aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008aac:	e008      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008aae:	7cfb      	ldrb	r3, [r7, #19]
 8008ab0:	74bb      	strb	r3, [r7, #18]
 8008ab2:	e005      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008ab4:	40021000 	.word	0x40021000
 8008ab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008abc:	7cfb      	ldrb	r3, [r7, #19]
 8008abe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ac0:	7c7b      	ldrb	r3, [r7, #17]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d105      	bne.n	8008ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ac6:	4ba6      	ldr	r3, [pc, #664]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aca:	4aa5      	ldr	r2, [pc, #660]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ad0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 0301 	and.w	r3, r3, #1
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d00a      	beq.n	8008af4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ade:	4ba0      	ldr	r3, [pc, #640]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ae4:	f023 0203 	bic.w	r2, r3, #3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	499c      	ldr	r1, [pc, #624]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0302 	and.w	r3, r3, #2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00a      	beq.n	8008b16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008b00:	4b97      	ldr	r3, [pc, #604]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b06:	f023 020c 	bic.w	r2, r3, #12
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	4994      	ldr	r1, [pc, #592]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b10:	4313      	orrs	r3, r2
 8008b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0304 	and.w	r3, r3, #4
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00a      	beq.n	8008b38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008b22:	4b8f      	ldr	r3, [pc, #572]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	498b      	ldr	r1, [pc, #556]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f003 0308 	and.w	r3, r3, #8
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00a      	beq.n	8008b5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008b44:	4b86      	ldr	r3, [pc, #536]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	691b      	ldr	r3, [r3, #16]
 8008b52:	4983      	ldr	r1, [pc, #524]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b54:	4313      	orrs	r3, r2
 8008b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f003 0320 	and.w	r3, r3, #32
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008b66:	4b7e      	ldr	r3, [pc, #504]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b6c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	497a      	ldr	r1, [pc, #488]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b76:	4313      	orrs	r3, r2
 8008b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008b88:	4b75      	ldr	r3, [pc, #468]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	699b      	ldr	r3, [r3, #24]
 8008b96:	4972      	ldr	r1, [pc, #456]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008baa:	4b6d      	ldr	r3, [pc, #436]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bb0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	4969      	ldr	r1, [pc, #420]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008bcc:	4b64      	ldr	r3, [pc, #400]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	4961      	ldr	r1, [pc, #388]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008bee:	4b5c      	ldr	r3, [pc, #368]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bfc:	4958      	ldr	r1, [pc, #352]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d015      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c10:	4b53      	ldr	r3, [pc, #332]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1e:	4950      	ldr	r1, [pc, #320]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c20:	4313      	orrs	r3, r2
 8008c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c2e:	d105      	bne.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c30:	4b4b      	ldr	r3, [pc, #300]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	4a4a      	ldr	r2, [pc, #296]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c3a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d015      	beq.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c48:	4b45      	ldr	r3, [pc, #276]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c56:	4942      	ldr	r1, [pc, #264]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c66:	d105      	bne.n	8008c74 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c68:	4b3d      	ldr	r3, [pc, #244]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c6a:	68db      	ldr	r3, [r3, #12]
 8008c6c:	4a3c      	ldr	r2, [pc, #240]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c72:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d015      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008c80:	4b37      	ldr	r3, [pc, #220]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c86:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c8e:	4934      	ldr	r1, [pc, #208]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008c90:	4313      	orrs	r3, r2
 8008c92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c9a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c9e:	d105      	bne.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ca0:	4b2f      	ldr	r3, [pc, #188]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	4a2e      	ldr	r2, [pc, #184]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008ca6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008caa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d015      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008cb8:	4b29      	ldr	r3, [pc, #164]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cc6:	4926      	ldr	r1, [pc, #152]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008cd6:	d105      	bne.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008cd8:	4b21      	ldr	r3, [pc, #132]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	4a20      	ldr	r2, [pc, #128]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ce2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d015      	beq.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008cf0:	4b1b      	ldr	r3, [pc, #108]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cf6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfe:	4918      	ldr	r1, [pc, #96]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d00:	4313      	orrs	r3, r2
 8008d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d0e:	d105      	bne.n	8008d1c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d10:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	4a12      	ldr	r2, [pc, #72]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d1a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d015      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008d28:	4b0d      	ldr	r3, [pc, #52]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d2e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d36:	490a      	ldr	r1, [pc, #40]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d46:	d105      	bne.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008d48:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	4a04      	ldr	r2, [pc, #16]	; (8008d60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d52:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008d54:	7cbb      	ldrb	r3, [r7, #18]
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3718      	adds	r7, #24
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	40021000 	.word	0x40021000

08008d64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d101      	bne.n	8008d76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d72:	2301      	movs	r3, #1
 8008d74:	e049      	b.n	8008e0a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d7c:	b2db      	uxtb	r3, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d106      	bne.n	8008d90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d8a:	6878      	ldr	r0, [r7, #4]
 8008d8c:	f7fd fc8c 	bl	80066a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2202      	movs	r2, #2
 8008d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	3304      	adds	r3, #4
 8008da0:	4619      	mov	r1, r3
 8008da2:	4610      	mov	r0, r2
 8008da4:	f000 fd7e 	bl	80098a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2201      	movs	r2, #1
 8008dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2201      	movs	r2, #1
 8008df4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2201      	movs	r2, #1
 8008e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
	...

08008e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d001      	beq.n	8008e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e28:	2301      	movs	r3, #1
 8008e2a:	e04a      	b.n	8008ec2 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2202      	movs	r2, #2
 8008e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	68da      	ldr	r2, [r3, #12]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	f042 0201 	orr.w	r2, r2, #1
 8008e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a21      	ldr	r2, [pc, #132]	; (8008ed0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d018      	beq.n	8008e80 <HAL_TIM_Base_Start_IT+0x6c>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e56:	d013      	beq.n	8008e80 <HAL_TIM_Base_Start_IT+0x6c>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a1d      	ldr	r2, [pc, #116]	; (8008ed4 <HAL_TIM_Base_Start_IT+0xc0>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d00e      	beq.n	8008e80 <HAL_TIM_Base_Start_IT+0x6c>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a1c      	ldr	r2, [pc, #112]	; (8008ed8 <HAL_TIM_Base_Start_IT+0xc4>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d009      	beq.n	8008e80 <HAL_TIM_Base_Start_IT+0x6c>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	4a1a      	ldr	r2, [pc, #104]	; (8008edc <HAL_TIM_Base_Start_IT+0xc8>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d004      	beq.n	8008e80 <HAL_TIM_Base_Start_IT+0x6c>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a19      	ldr	r2, [pc, #100]	; (8008ee0 <HAL_TIM_Base_Start_IT+0xcc>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d115      	bne.n	8008eac <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689a      	ldr	r2, [r3, #8]
 8008e86:	4b17      	ldr	r3, [pc, #92]	; (8008ee4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008e88:	4013      	ands	r3, r2
 8008e8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	2b06      	cmp	r3, #6
 8008e90:	d015      	beq.n	8008ebe <HAL_TIM_Base_Start_IT+0xaa>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e98:	d011      	beq.n	8008ebe <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f042 0201 	orr.w	r2, r2, #1
 8008ea8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eaa:	e008      	b.n	8008ebe <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f042 0201 	orr.w	r2, r2, #1
 8008eba:	601a      	str	r2, [r3, #0]
 8008ebc:	e000      	b.n	8008ec0 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ebe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3714      	adds	r7, #20
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	40012c00 	.word	0x40012c00
 8008ed4:	40000400 	.word	0x40000400
 8008ed8:	40000800 	.word	0x40000800
 8008edc:	40013400 	.word	0x40013400
 8008ee0:	40014000 	.word	0x40014000
 8008ee4:	00010007 	.word	0x00010007

08008ee8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b082      	sub	sp, #8
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d101      	bne.n	8008efa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e049      	b.n	8008f8e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f00:	b2db      	uxtb	r3, r3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d106      	bne.n	8008f14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f7fd fc18 	bl	8006744 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2202      	movs	r2, #2
 8008f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681a      	ldr	r2, [r3, #0]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	3304      	adds	r3, #4
 8008f24:	4619      	mov	r1, r3
 8008f26:	4610      	mov	r0, r2
 8008f28:	f000 fcbc 	bl	80098a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f8c:	2300      	movs	r3, #0
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	3708      	adds	r7, #8
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
	...

08008f98 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d109      	bne.n	8008fbc <HAL_TIM_PWM_Start+0x24>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	2b01      	cmp	r3, #1
 8008fb2:	bf14      	ite	ne
 8008fb4:	2301      	movne	r3, #1
 8008fb6:	2300      	moveq	r3, #0
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	e03c      	b.n	8009036 <HAL_TIM_PWM_Start+0x9e>
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	2b04      	cmp	r3, #4
 8008fc0:	d109      	bne.n	8008fd6 <HAL_TIM_PWM_Start+0x3e>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008fc8:	b2db      	uxtb	r3, r3
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	bf14      	ite	ne
 8008fce:	2301      	movne	r3, #1
 8008fd0:	2300      	moveq	r3, #0
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	e02f      	b.n	8009036 <HAL_TIM_PWM_Start+0x9e>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b08      	cmp	r3, #8
 8008fda:	d109      	bne.n	8008ff0 <HAL_TIM_PWM_Start+0x58>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	bf14      	ite	ne
 8008fe8:	2301      	movne	r3, #1
 8008fea:	2300      	moveq	r3, #0
 8008fec:	b2db      	uxtb	r3, r3
 8008fee:	e022      	b.n	8009036 <HAL_TIM_PWM_Start+0x9e>
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2b0c      	cmp	r3, #12
 8008ff4:	d109      	bne.n	800900a <HAL_TIM_PWM_Start+0x72>
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ffc:	b2db      	uxtb	r3, r3
 8008ffe:	2b01      	cmp	r3, #1
 8009000:	bf14      	ite	ne
 8009002:	2301      	movne	r3, #1
 8009004:	2300      	moveq	r3, #0
 8009006:	b2db      	uxtb	r3, r3
 8009008:	e015      	b.n	8009036 <HAL_TIM_PWM_Start+0x9e>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	2b10      	cmp	r3, #16
 800900e:	d109      	bne.n	8009024 <HAL_TIM_PWM_Start+0x8c>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009016:	b2db      	uxtb	r3, r3
 8009018:	2b01      	cmp	r3, #1
 800901a:	bf14      	ite	ne
 800901c:	2301      	movne	r3, #1
 800901e:	2300      	moveq	r3, #0
 8009020:	b2db      	uxtb	r3, r3
 8009022:	e008      	b.n	8009036 <HAL_TIM_PWM_Start+0x9e>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800902a:	b2db      	uxtb	r3, r3
 800902c:	2b01      	cmp	r3, #1
 800902e:	bf14      	ite	ne
 8009030:	2301      	movne	r3, #1
 8009032:	2300      	moveq	r3, #0
 8009034:	b2db      	uxtb	r3, r3
 8009036:	2b00      	cmp	r3, #0
 8009038:	d001      	beq.n	800903e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	e097      	b.n	800916e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d104      	bne.n	800904e <HAL_TIM_PWM_Start+0xb6>
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2202      	movs	r2, #2
 8009048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800904c:	e023      	b.n	8009096 <HAL_TIM_PWM_Start+0xfe>
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b04      	cmp	r3, #4
 8009052:	d104      	bne.n	800905e <HAL_TIM_PWM_Start+0xc6>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2202      	movs	r2, #2
 8009058:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800905c:	e01b      	b.n	8009096 <HAL_TIM_PWM_Start+0xfe>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b08      	cmp	r3, #8
 8009062:	d104      	bne.n	800906e <HAL_TIM_PWM_Start+0xd6>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2202      	movs	r2, #2
 8009068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800906c:	e013      	b.n	8009096 <HAL_TIM_PWM_Start+0xfe>
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	2b0c      	cmp	r3, #12
 8009072:	d104      	bne.n	800907e <HAL_TIM_PWM_Start+0xe6>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2202      	movs	r2, #2
 8009078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800907c:	e00b      	b.n	8009096 <HAL_TIM_PWM_Start+0xfe>
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	2b10      	cmp	r3, #16
 8009082:	d104      	bne.n	800908e <HAL_TIM_PWM_Start+0xf6>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2202      	movs	r2, #2
 8009088:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800908c:	e003      	b.n	8009096 <HAL_TIM_PWM_Start+0xfe>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2202      	movs	r2, #2
 8009092:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	2201      	movs	r2, #1
 800909c:	6839      	ldr	r1, [r7, #0]
 800909e:	4618      	mov	r0, r3
 80090a0:	f001 f82e 	bl	800a100 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a33      	ldr	r2, [pc, #204]	; (8009178 <HAL_TIM_PWM_Start+0x1e0>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d013      	beq.n	80090d6 <HAL_TIM_PWM_Start+0x13e>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a32      	ldr	r2, [pc, #200]	; (800917c <HAL_TIM_PWM_Start+0x1e4>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00e      	beq.n	80090d6 <HAL_TIM_PWM_Start+0x13e>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a30      	ldr	r2, [pc, #192]	; (8009180 <HAL_TIM_PWM_Start+0x1e8>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d009      	beq.n	80090d6 <HAL_TIM_PWM_Start+0x13e>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a2f      	ldr	r2, [pc, #188]	; (8009184 <HAL_TIM_PWM_Start+0x1ec>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d004      	beq.n	80090d6 <HAL_TIM_PWM_Start+0x13e>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a2d      	ldr	r2, [pc, #180]	; (8009188 <HAL_TIM_PWM_Start+0x1f0>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d101      	bne.n	80090da <HAL_TIM_PWM_Start+0x142>
 80090d6:	2301      	movs	r3, #1
 80090d8:	e000      	b.n	80090dc <HAL_TIM_PWM_Start+0x144>
 80090da:	2300      	movs	r3, #0
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d007      	beq.n	80090f0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80090ee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a20      	ldr	r2, [pc, #128]	; (8009178 <HAL_TIM_PWM_Start+0x1e0>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d018      	beq.n	800912c <HAL_TIM_PWM_Start+0x194>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009102:	d013      	beq.n	800912c <HAL_TIM_PWM_Start+0x194>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	4a20      	ldr	r2, [pc, #128]	; (800918c <HAL_TIM_PWM_Start+0x1f4>)
 800910a:	4293      	cmp	r3, r2
 800910c:	d00e      	beq.n	800912c <HAL_TIM_PWM_Start+0x194>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	4a1f      	ldr	r2, [pc, #124]	; (8009190 <HAL_TIM_PWM_Start+0x1f8>)
 8009114:	4293      	cmp	r3, r2
 8009116:	d009      	beq.n	800912c <HAL_TIM_PWM_Start+0x194>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	4a17      	ldr	r2, [pc, #92]	; (800917c <HAL_TIM_PWM_Start+0x1e4>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d004      	beq.n	800912c <HAL_TIM_PWM_Start+0x194>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4a16      	ldr	r2, [pc, #88]	; (8009180 <HAL_TIM_PWM_Start+0x1e8>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d115      	bne.n	8009158 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	689a      	ldr	r2, [r3, #8]
 8009132:	4b18      	ldr	r3, [pc, #96]	; (8009194 <HAL_TIM_PWM_Start+0x1fc>)
 8009134:	4013      	ands	r3, r2
 8009136:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2b06      	cmp	r3, #6
 800913c:	d015      	beq.n	800916a <HAL_TIM_PWM_Start+0x1d2>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009144:	d011      	beq.n	800916a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f042 0201 	orr.w	r2, r2, #1
 8009154:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009156:	e008      	b.n	800916a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f042 0201 	orr.w	r2, r2, #1
 8009166:	601a      	str	r2, [r3, #0]
 8009168:	e000      	b.n	800916c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800916a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800916c:	2300      	movs	r3, #0
}
 800916e:	4618      	mov	r0, r3
 8009170:	3710      	adds	r7, #16
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	40012c00 	.word	0x40012c00
 800917c:	40013400 	.word	0x40013400
 8009180:	40014000 	.word	0x40014000
 8009184:	40014400 	.word	0x40014400
 8009188:	40014800 	.word	0x40014800
 800918c:	40000400 	.word	0x40000400
 8009190:	40000800 	.word	0x40000800
 8009194:	00010007 	.word	0x00010007

08009198 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	68db      	ldr	r3, [r3, #12]
 80091a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d020      	beq.n	80091fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	f003 0302 	and.w	r3, r3, #2
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01b      	beq.n	80091fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f06f 0202 	mvn.w	r2, #2
 80091cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	699b      	ldr	r3, [r3, #24]
 80091da:	f003 0303 	and.w	r3, r3, #3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d003      	beq.n	80091ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fb40 	bl	8009868 <HAL_TIM_IC_CaptureCallback>
 80091e8:	e005      	b.n	80091f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fb32 	bl	8009854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 fb43 	bl	800987c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f003 0304 	and.w	r3, r3, #4
 8009202:	2b00      	cmp	r3, #0
 8009204:	d020      	beq.n	8009248 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	f003 0304 	and.w	r3, r3, #4
 800920c:	2b00      	cmp	r3, #0
 800920e:	d01b      	beq.n	8009248 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f06f 0204 	mvn.w	r2, #4
 8009218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	2202      	movs	r2, #2
 800921e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	699b      	ldr	r3, [r3, #24]
 8009226:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800922a:	2b00      	cmp	r3, #0
 800922c:	d003      	beq.n	8009236 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fb1a 	bl	8009868 <HAL_TIM_IC_CaptureCallback>
 8009234:	e005      	b.n	8009242 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f000 fb0c 	bl	8009854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 fb1d 	bl	800987c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	f003 0308 	and.w	r3, r3, #8
 800924e:	2b00      	cmp	r3, #0
 8009250:	d020      	beq.n	8009294 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f003 0308 	and.w	r3, r3, #8
 8009258:	2b00      	cmp	r3, #0
 800925a:	d01b      	beq.n	8009294 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f06f 0208 	mvn.w	r2, #8
 8009264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2204      	movs	r2, #4
 800926a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f003 0303 	and.w	r3, r3, #3
 8009276:	2b00      	cmp	r3, #0
 8009278:	d003      	beq.n	8009282 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 faf4 	bl	8009868 <HAL_TIM_IC_CaptureCallback>
 8009280:	e005      	b.n	800928e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fae6 	bl	8009854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f000 faf7 	bl	800987c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f003 0310 	and.w	r3, r3, #16
 800929a:	2b00      	cmp	r3, #0
 800929c:	d020      	beq.n	80092e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f003 0310 	and.w	r3, r3, #16
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d01b      	beq.n	80092e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	f06f 0210 	mvn.w	r2, #16
 80092b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2208      	movs	r2, #8
 80092b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	69db      	ldr	r3, [r3, #28]
 80092be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d003      	beq.n	80092ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 face 	bl	8009868 <HAL_TIM_IC_CaptureCallback>
 80092cc:	e005      	b.n	80092da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 fac0 	bl	8009854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fad1 	bl	800987c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00c      	beq.n	8009304 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f003 0301 	and.w	r3, r3, #1
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d007      	beq.n	8009304 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	f06f 0201 	mvn.w	r2, #1
 80092fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7f8 fef0 	bl	80020e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800930a:	2b00      	cmp	r3, #0
 800930c:	d104      	bne.n	8009318 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8009314:	2b00      	cmp	r3, #0
 8009316:	d00c      	beq.n	8009332 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800931e:	2b00      	cmp	r3, #0
 8009320:	d007      	beq.n	8009332 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800932a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f001 f825 	bl	800a37c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00c      	beq.n	8009356 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009342:	2b00      	cmp	r3, #0
 8009344:	d007      	beq.n	8009356 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800934e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f001 f81d 	bl	800a390 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00c      	beq.n	800937a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009366:	2b00      	cmp	r3, #0
 8009368:	d007      	beq.n	800937a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009372:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fa8b 	bl	8009890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	f003 0320 	and.w	r3, r3, #32
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00c      	beq.n	800939e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f003 0320 	and.w	r3, r3, #32
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f06f 0220 	mvn.w	r2, #32
 8009396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 ffe5 	bl	800a368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00c      	beq.n	80093c2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d007      	beq.n	80093c2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80093ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 fff1 	bl	800a3a4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00c      	beq.n	80093e6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d007      	beq.n	80093e6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80093de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f000 ffe9 	bl	800a3b8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00c      	beq.n	800940a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d007      	beq.n	800940a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009402:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009404:	6878      	ldr	r0, [r7, #4]
 8009406:	f000 ffe1 	bl	800a3cc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00c      	beq.n	800942e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800941a:	2b00      	cmp	r3, #0
 800941c:	d007      	beq.n	800942e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 ffd9 	bl	800a3e0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af00      	add	r7, sp, #0
 800943e:	60f8      	str	r0, [r7, #12]
 8009440:	60b9      	str	r1, [r7, #8]
 8009442:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009444:	2300      	movs	r3, #0
 8009446:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800944e:	2b01      	cmp	r3, #1
 8009450:	d101      	bne.n	8009456 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009452:	2302      	movs	r3, #2
 8009454:	e0ff      	b.n	8009656 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2b14      	cmp	r3, #20
 8009462:	f200 80f0 	bhi.w	8009646 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009466:	a201      	add	r2, pc, #4	; (adr r2, 800946c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800946c:	080094c1 	.word	0x080094c1
 8009470:	08009647 	.word	0x08009647
 8009474:	08009647 	.word	0x08009647
 8009478:	08009647 	.word	0x08009647
 800947c:	08009501 	.word	0x08009501
 8009480:	08009647 	.word	0x08009647
 8009484:	08009647 	.word	0x08009647
 8009488:	08009647 	.word	0x08009647
 800948c:	08009543 	.word	0x08009543
 8009490:	08009647 	.word	0x08009647
 8009494:	08009647 	.word	0x08009647
 8009498:	08009647 	.word	0x08009647
 800949c:	08009583 	.word	0x08009583
 80094a0:	08009647 	.word	0x08009647
 80094a4:	08009647 	.word	0x08009647
 80094a8:	08009647 	.word	0x08009647
 80094ac:	080095c5 	.word	0x080095c5
 80094b0:	08009647 	.word	0x08009647
 80094b4:	08009647 	.word	0x08009647
 80094b8:	08009647 	.word	0x08009647
 80094bc:	08009605 	.word	0x08009605
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68b9      	ldr	r1, [r7, #8]
 80094c6:	4618      	mov	r0, r3
 80094c8:	f000 fa88 	bl	80099dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	699a      	ldr	r2, [r3, #24]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f042 0208 	orr.w	r2, r2, #8
 80094da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	699a      	ldr	r2, [r3, #24]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f022 0204 	bic.w	r2, r2, #4
 80094ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	6999      	ldr	r1, [r3, #24]
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	691a      	ldr	r2, [r3, #16]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	430a      	orrs	r2, r1
 80094fc:	619a      	str	r2, [r3, #24]
      break;
 80094fe:	e0a5      	b.n	800964c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68b9      	ldr	r1, [r7, #8]
 8009506:	4618      	mov	r0, r3
 8009508:	f000 faf8 	bl	8009afc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	699a      	ldr	r2, [r3, #24]
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800951a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	699a      	ldr	r2, [r3, #24]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800952a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	6999      	ldr	r1, [r3, #24]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	691b      	ldr	r3, [r3, #16]
 8009536:	021a      	lsls	r2, r3, #8
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	430a      	orrs	r2, r1
 800953e:	619a      	str	r2, [r3, #24]
      break;
 8009540:	e084      	b.n	800964c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	68b9      	ldr	r1, [r7, #8]
 8009548:	4618      	mov	r0, r3
 800954a:	f000 fb61 	bl	8009c10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	69da      	ldr	r2, [r3, #28]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f042 0208 	orr.w	r2, r2, #8
 800955c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	69da      	ldr	r2, [r3, #28]
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f022 0204 	bic.w	r2, r2, #4
 800956c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	69d9      	ldr	r1, [r3, #28]
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	691a      	ldr	r2, [r3, #16]
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	61da      	str	r2, [r3, #28]
      break;
 8009580:	e064      	b.n	800964c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	68b9      	ldr	r1, [r7, #8]
 8009588:	4618      	mov	r0, r3
 800958a:	f000 fbc9 	bl	8009d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	69da      	ldr	r2, [r3, #28]
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800959c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	69da      	ldr	r2, [r3, #28]
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	69d9      	ldr	r1, [r3, #28]
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	691b      	ldr	r3, [r3, #16]
 80095b8:	021a      	lsls	r2, r3, #8
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	430a      	orrs	r2, r1
 80095c0:	61da      	str	r2, [r3, #28]
      break;
 80095c2:	e043      	b.n	800964c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	68b9      	ldr	r1, [r7, #8]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f000 fc32 	bl	8009e34 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f042 0208 	orr.w	r2, r2, #8
 80095de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f022 0204 	bic.w	r2, r2, #4
 80095ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	691a      	ldr	r2, [r3, #16]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	430a      	orrs	r2, r1
 8009600:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009602:	e023      	b.n	800964c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	68b9      	ldr	r1, [r7, #8]
 800960a:	4618      	mov	r0, r3
 800960c:	f000 fc76 	bl	8009efc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800961e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800962e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	691b      	ldr	r3, [r3, #16]
 800963a:	021a      	lsls	r2, r3, #8
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	430a      	orrs	r2, r1
 8009642:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009644:	e002      	b.n	800964c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009646:	2301      	movs	r3, #1
 8009648:	75fb      	strb	r3, [r7, #23]
      break;
 800964a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	2200      	movs	r2, #0
 8009650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009654:	7dfb      	ldrb	r3, [r7, #23]
}
 8009656:	4618      	mov	r0, r3
 8009658:	3718      	adds	r7, #24
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop

08009660 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b084      	sub	sp, #16
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800966a:	2300      	movs	r3, #0
 800966c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009674:	2b01      	cmp	r3, #1
 8009676:	d101      	bne.n	800967c <HAL_TIM_ConfigClockSource+0x1c>
 8009678:	2302      	movs	r3, #2
 800967a:	e0de      	b.n	800983a <HAL_TIM_ConfigClockSource+0x1da>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2201      	movs	r2, #1
 8009680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2202      	movs	r2, #2
 8009688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800969a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800969e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a63      	ldr	r2, [pc, #396]	; (8009844 <HAL_TIM_ConfigClockSource+0x1e4>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	f000 80a9 	beq.w	800980e <HAL_TIM_ConfigClockSource+0x1ae>
 80096bc:	4a61      	ldr	r2, [pc, #388]	; (8009844 <HAL_TIM_ConfigClockSource+0x1e4>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	f200 80ae 	bhi.w	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
 80096c4:	4a60      	ldr	r2, [pc, #384]	; (8009848 <HAL_TIM_ConfigClockSource+0x1e8>)
 80096c6:	4293      	cmp	r3, r2
 80096c8:	f000 80a1 	beq.w	800980e <HAL_TIM_ConfigClockSource+0x1ae>
 80096cc:	4a5e      	ldr	r2, [pc, #376]	; (8009848 <HAL_TIM_ConfigClockSource+0x1e8>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	f200 80a6 	bhi.w	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
 80096d4:	4a5d      	ldr	r2, [pc, #372]	; (800984c <HAL_TIM_ConfigClockSource+0x1ec>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	f000 8099 	beq.w	800980e <HAL_TIM_ConfigClockSource+0x1ae>
 80096dc:	4a5b      	ldr	r2, [pc, #364]	; (800984c <HAL_TIM_ConfigClockSource+0x1ec>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	f200 809e 	bhi.w	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
 80096e4:	4a5a      	ldr	r2, [pc, #360]	; (8009850 <HAL_TIM_ConfigClockSource+0x1f0>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	f000 8091 	beq.w	800980e <HAL_TIM_ConfigClockSource+0x1ae>
 80096ec:	4a58      	ldr	r2, [pc, #352]	; (8009850 <HAL_TIM_ConfigClockSource+0x1f0>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	f200 8096 	bhi.w	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
 80096f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80096f8:	f000 8089 	beq.w	800980e <HAL_TIM_ConfigClockSource+0x1ae>
 80096fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009700:	f200 808e 	bhi.w	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
 8009704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009708:	d03e      	beq.n	8009788 <HAL_TIM_ConfigClockSource+0x128>
 800970a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800970e:	f200 8087 	bhi.w	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
 8009712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009716:	f000 8086 	beq.w	8009826 <HAL_TIM_ConfigClockSource+0x1c6>
 800971a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800971e:	d87f      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
 8009720:	2b70      	cmp	r3, #112	; 0x70
 8009722:	d01a      	beq.n	800975a <HAL_TIM_ConfigClockSource+0xfa>
 8009724:	2b70      	cmp	r3, #112	; 0x70
 8009726:	d87b      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
 8009728:	2b60      	cmp	r3, #96	; 0x60
 800972a:	d050      	beq.n	80097ce <HAL_TIM_ConfigClockSource+0x16e>
 800972c:	2b60      	cmp	r3, #96	; 0x60
 800972e:	d877      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
 8009730:	2b50      	cmp	r3, #80	; 0x50
 8009732:	d03c      	beq.n	80097ae <HAL_TIM_ConfigClockSource+0x14e>
 8009734:	2b50      	cmp	r3, #80	; 0x50
 8009736:	d873      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
 8009738:	2b40      	cmp	r3, #64	; 0x40
 800973a:	d058      	beq.n	80097ee <HAL_TIM_ConfigClockSource+0x18e>
 800973c:	2b40      	cmp	r3, #64	; 0x40
 800973e:	d86f      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
 8009740:	2b30      	cmp	r3, #48	; 0x30
 8009742:	d064      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x1ae>
 8009744:	2b30      	cmp	r3, #48	; 0x30
 8009746:	d86b      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
 8009748:	2b20      	cmp	r3, #32
 800974a:	d060      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x1ae>
 800974c:	2b20      	cmp	r3, #32
 800974e:	d867      	bhi.n	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
 8009750:	2b00      	cmp	r3, #0
 8009752:	d05c      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x1ae>
 8009754:	2b10      	cmp	r3, #16
 8009756:	d05a      	beq.n	800980e <HAL_TIM_ConfigClockSource+0x1ae>
 8009758:	e062      	b.n	8009820 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800976a:	f000 fca9 	bl	800a0c0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800977c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	68ba      	ldr	r2, [r7, #8]
 8009784:	609a      	str	r2, [r3, #8]
      break;
 8009786:	e04f      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800978c:	683b      	ldr	r3, [r7, #0]
 800978e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009798:	f000 fc92 	bl	800a0c0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	689a      	ldr	r2, [r3, #8]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097aa:	609a      	str	r2, [r3, #8]
      break;
 80097ac:	e03c      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ba:	461a      	mov	r2, r3
 80097bc:	f000 fc04 	bl	8009fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	2150      	movs	r1, #80	; 0x50
 80097c6:	4618      	mov	r0, r3
 80097c8:	f000 fc5d 	bl	800a086 <TIM_ITRx_SetConfig>
      break;
 80097cc:	e02c      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097da:	461a      	mov	r2, r3
 80097dc:	f000 fc23 	bl	800a026 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	2160      	movs	r1, #96	; 0x60
 80097e6:	4618      	mov	r0, r3
 80097e8:	f000 fc4d 	bl	800a086 <TIM_ITRx_SetConfig>
      break;
 80097ec:	e01c      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097fa:	461a      	mov	r2, r3
 80097fc:	f000 fbe4 	bl	8009fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	2140      	movs	r1, #64	; 0x40
 8009806:	4618      	mov	r0, r3
 8009808:	f000 fc3d 	bl	800a086 <TIM_ITRx_SetConfig>
      break;
 800980c:	e00c      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4619      	mov	r1, r3
 8009818:	4610      	mov	r0, r2
 800981a:	f000 fc34 	bl	800a086 <TIM_ITRx_SetConfig>
      break;
 800981e:	e003      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8009820:	2301      	movs	r3, #1
 8009822:	73fb      	strb	r3, [r7, #15]
      break;
 8009824:	e000      	b.n	8009828 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8009826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009838:	7bfb      	ldrb	r3, [r7, #15]
}
 800983a:	4618      	mov	r0, r3
 800983c:	3710      	adds	r7, #16
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	00100070 	.word	0x00100070
 8009848:	00100040 	.word	0x00100040
 800984c:	00100030 	.word	0x00100030
 8009850:	00100020 	.word	0x00100020

08009854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009854:	b480      	push	{r7}
 8009856:	b083      	sub	sp, #12
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800985c:	bf00      	nop
 800985e:	370c      	adds	r7, #12
 8009860:	46bd      	mov	sp, r7
 8009862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009866:	4770      	bx	lr

08009868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009868:	b480      	push	{r7}
 800986a:	b083      	sub	sp, #12
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009870:	bf00      	nop
 8009872:	370c      	adds	r7, #12
 8009874:	46bd      	mov	sp, r7
 8009876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987a:	4770      	bx	lr

0800987c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009884:	bf00      	nop
 8009886:	370c      	adds	r7, #12
 8009888:	46bd      	mov	sp, r7
 800988a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988e:	4770      	bx	lr

08009890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009898:	bf00      	nop
 800989a:	370c      	adds	r7, #12
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr

080098a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4a42      	ldr	r2, [pc, #264]	; (80099c0 <TIM_Base_SetConfig+0x11c>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d00f      	beq.n	80098dc <TIM_Base_SetConfig+0x38>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098c2:	d00b      	beq.n	80098dc <TIM_Base_SetConfig+0x38>
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	4a3f      	ldr	r2, [pc, #252]	; (80099c4 <TIM_Base_SetConfig+0x120>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d007      	beq.n	80098dc <TIM_Base_SetConfig+0x38>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a3e      	ldr	r2, [pc, #248]	; (80099c8 <TIM_Base_SetConfig+0x124>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d003      	beq.n	80098dc <TIM_Base_SetConfig+0x38>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a3d      	ldr	r2, [pc, #244]	; (80099cc <TIM_Base_SetConfig+0x128>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d108      	bne.n	80098ee <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	68fa      	ldr	r2, [r7, #12]
 80098ea:	4313      	orrs	r3, r2
 80098ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	4a33      	ldr	r2, [pc, #204]	; (80099c0 <TIM_Base_SetConfig+0x11c>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d01b      	beq.n	800992e <TIM_Base_SetConfig+0x8a>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098fc:	d017      	beq.n	800992e <TIM_Base_SetConfig+0x8a>
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4a30      	ldr	r2, [pc, #192]	; (80099c4 <TIM_Base_SetConfig+0x120>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d013      	beq.n	800992e <TIM_Base_SetConfig+0x8a>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	4a2f      	ldr	r2, [pc, #188]	; (80099c8 <TIM_Base_SetConfig+0x124>)
 800990a:	4293      	cmp	r3, r2
 800990c:	d00f      	beq.n	800992e <TIM_Base_SetConfig+0x8a>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	4a2e      	ldr	r2, [pc, #184]	; (80099cc <TIM_Base_SetConfig+0x128>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d00b      	beq.n	800992e <TIM_Base_SetConfig+0x8a>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	4a2d      	ldr	r2, [pc, #180]	; (80099d0 <TIM_Base_SetConfig+0x12c>)
 800991a:	4293      	cmp	r3, r2
 800991c:	d007      	beq.n	800992e <TIM_Base_SetConfig+0x8a>
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	4a2c      	ldr	r2, [pc, #176]	; (80099d4 <TIM_Base_SetConfig+0x130>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d003      	beq.n	800992e <TIM_Base_SetConfig+0x8a>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	4a2b      	ldr	r2, [pc, #172]	; (80099d8 <TIM_Base_SetConfig+0x134>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d108      	bne.n	8009940 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009934:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	68db      	ldr	r3, [r3, #12]
 800993a:	68fa      	ldr	r2, [r7, #12]
 800993c:	4313      	orrs	r3, r2
 800993e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	695b      	ldr	r3, [r3, #20]
 800994a:	4313      	orrs	r3, r2
 800994c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	68fa      	ldr	r2, [r7, #12]
 8009952:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	689a      	ldr	r2, [r3, #8]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	681a      	ldr	r2, [r3, #0]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a16      	ldr	r2, [pc, #88]	; (80099c0 <TIM_Base_SetConfig+0x11c>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d00f      	beq.n	800998c <TIM_Base_SetConfig+0xe8>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a17      	ldr	r2, [pc, #92]	; (80099cc <TIM_Base_SetConfig+0x128>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d00b      	beq.n	800998c <TIM_Base_SetConfig+0xe8>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a16      	ldr	r2, [pc, #88]	; (80099d0 <TIM_Base_SetConfig+0x12c>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d007      	beq.n	800998c <TIM_Base_SetConfig+0xe8>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a15      	ldr	r2, [pc, #84]	; (80099d4 <TIM_Base_SetConfig+0x130>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d003      	beq.n	800998c <TIM_Base_SetConfig+0xe8>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a14      	ldr	r2, [pc, #80]	; (80099d8 <TIM_Base_SetConfig+0x134>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d103      	bne.n	8009994 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	691a      	ldr	r2, [r3, #16]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d105      	bne.n	80099b2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	691b      	ldr	r3, [r3, #16]
 80099aa:	f023 0201 	bic.w	r2, r3, #1
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	611a      	str	r2, [r3, #16]
  }
}
 80099b2:	bf00      	nop
 80099b4:	3714      	adds	r7, #20
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	40012c00 	.word	0x40012c00
 80099c4:	40000400 	.word	0x40000400
 80099c8:	40000800 	.word	0x40000800
 80099cc:	40013400 	.word	0x40013400
 80099d0:	40014000 	.word	0x40014000
 80099d4:	40014400 	.word	0x40014400
 80099d8:	40014800 	.word	0x40014800

080099dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099dc:	b480      	push	{r7}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6a1b      	ldr	r3, [r3, #32]
 80099f0:	f023 0201 	bic.w	r2, r3, #1
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	699b      	ldr	r3, [r3, #24]
 8009a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	f023 0303 	bic.w	r3, r3, #3
 8009a16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	68fa      	ldr	r2, [r7, #12]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f023 0302 	bic.w	r3, r3, #2
 8009a28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	689b      	ldr	r3, [r3, #8]
 8009a2e:	697a      	ldr	r2, [r7, #20]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a2c      	ldr	r2, [pc, #176]	; (8009ae8 <TIM_OC1_SetConfig+0x10c>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d00f      	beq.n	8009a5c <TIM_OC1_SetConfig+0x80>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a2b      	ldr	r2, [pc, #172]	; (8009aec <TIM_OC1_SetConfig+0x110>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d00b      	beq.n	8009a5c <TIM_OC1_SetConfig+0x80>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a2a      	ldr	r2, [pc, #168]	; (8009af0 <TIM_OC1_SetConfig+0x114>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d007      	beq.n	8009a5c <TIM_OC1_SetConfig+0x80>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a29      	ldr	r2, [pc, #164]	; (8009af4 <TIM_OC1_SetConfig+0x118>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d003      	beq.n	8009a5c <TIM_OC1_SetConfig+0x80>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a28      	ldr	r2, [pc, #160]	; (8009af8 <TIM_OC1_SetConfig+0x11c>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d10c      	bne.n	8009a76 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f023 0308 	bic.w	r3, r3, #8
 8009a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a64:	683b      	ldr	r3, [r7, #0]
 8009a66:	68db      	ldr	r3, [r3, #12]
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	f023 0304 	bic.w	r3, r3, #4
 8009a74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	4a1b      	ldr	r2, [pc, #108]	; (8009ae8 <TIM_OC1_SetConfig+0x10c>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d00f      	beq.n	8009a9e <TIM_OC1_SetConfig+0xc2>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	4a1a      	ldr	r2, [pc, #104]	; (8009aec <TIM_OC1_SetConfig+0x110>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d00b      	beq.n	8009a9e <TIM_OC1_SetConfig+0xc2>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	4a19      	ldr	r2, [pc, #100]	; (8009af0 <TIM_OC1_SetConfig+0x114>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d007      	beq.n	8009a9e <TIM_OC1_SetConfig+0xc2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	4a18      	ldr	r2, [pc, #96]	; (8009af4 <TIM_OC1_SetConfig+0x118>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d003      	beq.n	8009a9e <TIM_OC1_SetConfig+0xc2>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a17      	ldr	r2, [pc, #92]	; (8009af8 <TIM_OC1_SetConfig+0x11c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d111      	bne.n	8009ac2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	693a      	ldr	r2, [r7, #16]
 8009ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	68fa      	ldr	r2, [r7, #12]
 8009acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	697a      	ldr	r2, [r7, #20]
 8009ada:	621a      	str	r2, [r3, #32]
}
 8009adc:	bf00      	nop
 8009ade:	371c      	adds	r7, #28
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae6:	4770      	bx	lr
 8009ae8:	40012c00 	.word	0x40012c00
 8009aec:	40013400 	.word	0x40013400
 8009af0:	40014000 	.word	0x40014000
 8009af4:	40014400 	.word	0x40014400
 8009af8:	40014800 	.word	0x40014800

08009afc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b087      	sub	sp, #28
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6a1b      	ldr	r3, [r3, #32]
 8009b10:	f023 0210 	bic.w	r2, r3, #16
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	699b      	ldr	r3, [r3, #24]
 8009b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	021b      	lsls	r3, r3, #8
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b44:	697b      	ldr	r3, [r7, #20]
 8009b46:	f023 0320 	bic.w	r3, r3, #32
 8009b4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	689b      	ldr	r3, [r3, #8]
 8009b50:	011b      	lsls	r3, r3, #4
 8009b52:	697a      	ldr	r2, [r7, #20]
 8009b54:	4313      	orrs	r3, r2
 8009b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a28      	ldr	r2, [pc, #160]	; (8009bfc <TIM_OC2_SetConfig+0x100>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d003      	beq.n	8009b68 <TIM_OC2_SetConfig+0x6c>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a27      	ldr	r2, [pc, #156]	; (8009c00 <TIM_OC2_SetConfig+0x104>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d10d      	bne.n	8009b84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	011b      	lsls	r3, r3, #4
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b7c:	697b      	ldr	r3, [r7, #20]
 8009b7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a1d      	ldr	r2, [pc, #116]	; (8009bfc <TIM_OC2_SetConfig+0x100>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d00f      	beq.n	8009bac <TIM_OC2_SetConfig+0xb0>
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a1c      	ldr	r2, [pc, #112]	; (8009c00 <TIM_OC2_SetConfig+0x104>)
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d00b      	beq.n	8009bac <TIM_OC2_SetConfig+0xb0>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	4a1b      	ldr	r2, [pc, #108]	; (8009c04 <TIM_OC2_SetConfig+0x108>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d007      	beq.n	8009bac <TIM_OC2_SetConfig+0xb0>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a1a      	ldr	r2, [pc, #104]	; (8009c08 <TIM_OC2_SetConfig+0x10c>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d003      	beq.n	8009bac <TIM_OC2_SetConfig+0xb0>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	4a19      	ldr	r2, [pc, #100]	; (8009c0c <TIM_OC2_SetConfig+0x110>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d113      	bne.n	8009bd4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bac:	693b      	ldr	r3, [r7, #16]
 8009bae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	695b      	ldr	r3, [r3, #20]
 8009bc0:	009b      	lsls	r3, r3, #2
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	699b      	ldr	r3, [r3, #24]
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	68fa      	ldr	r2, [r7, #12]
 8009bde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	697a      	ldr	r2, [r7, #20]
 8009bec:	621a      	str	r2, [r3, #32]
}
 8009bee:	bf00      	nop
 8009bf0:	371c      	adds	r7, #28
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
 8009bfa:	bf00      	nop
 8009bfc:	40012c00 	.word	0x40012c00
 8009c00:	40013400 	.word	0x40013400
 8009c04:	40014000 	.word	0x40014000
 8009c08:	40014400 	.word	0x40014400
 8009c0c:	40014800 	.word	0x40014800

08009c10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b087      	sub	sp, #28
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6a1b      	ldr	r3, [r3, #32]
 8009c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a1b      	ldr	r3, [r3, #32]
 8009c24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	69db      	ldr	r3, [r3, #28]
 8009c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f023 0303 	bic.w	r3, r3, #3
 8009c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	021b      	lsls	r3, r3, #8
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a27      	ldr	r2, [pc, #156]	; (8009d0c <TIM_OC3_SetConfig+0xfc>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d003      	beq.n	8009c7a <TIM_OC3_SetConfig+0x6a>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a26      	ldr	r2, [pc, #152]	; (8009d10 <TIM_OC3_SetConfig+0x100>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d10d      	bne.n	8009c96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a1c      	ldr	r2, [pc, #112]	; (8009d0c <TIM_OC3_SetConfig+0xfc>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d00f      	beq.n	8009cbe <TIM_OC3_SetConfig+0xae>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a1b      	ldr	r2, [pc, #108]	; (8009d10 <TIM_OC3_SetConfig+0x100>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d00b      	beq.n	8009cbe <TIM_OC3_SetConfig+0xae>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a1a      	ldr	r2, [pc, #104]	; (8009d14 <TIM_OC3_SetConfig+0x104>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d007      	beq.n	8009cbe <TIM_OC3_SetConfig+0xae>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a19      	ldr	r2, [pc, #100]	; (8009d18 <TIM_OC3_SetConfig+0x108>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d003      	beq.n	8009cbe <TIM_OC3_SetConfig+0xae>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a18      	ldr	r2, [pc, #96]	; (8009d1c <TIM_OC3_SetConfig+0x10c>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d113      	bne.n	8009ce6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	695b      	ldr	r3, [r3, #20]
 8009cd2:	011b      	lsls	r3, r3, #4
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	699b      	ldr	r3, [r3, #24]
 8009cde:	011b      	lsls	r3, r3, #4
 8009ce0:	693a      	ldr	r2, [r7, #16]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	685a      	ldr	r2, [r3, #4]
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	621a      	str	r2, [r3, #32]
}
 8009d00:	bf00      	nop
 8009d02:	371c      	adds	r7, #28
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	40012c00 	.word	0x40012c00
 8009d10:	40013400 	.word	0x40013400
 8009d14:	40014000 	.word	0x40014000
 8009d18:	40014400 	.word	0x40014400
 8009d1c:	40014800 	.word	0x40014800

08009d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b087      	sub	sp, #28
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	6a1b      	ldr	r3, [r3, #32]
 8009d34:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	69db      	ldr	r3, [r3, #28]
 8009d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	021b      	lsls	r3, r3, #8
 8009d62:	68fa      	ldr	r2, [r7, #12]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
 8009d74:	031b      	lsls	r3, r3, #12
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	4a28      	ldr	r2, [pc, #160]	; (8009e20 <TIM_OC4_SetConfig+0x100>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d003      	beq.n	8009d8c <TIM_OC4_SetConfig+0x6c>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	4a27      	ldr	r2, [pc, #156]	; (8009e24 <TIM_OC4_SetConfig+0x104>)
 8009d88:	4293      	cmp	r3, r2
 8009d8a:	d10d      	bne.n	8009da8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009d8c:	697b      	ldr	r3, [r7, #20]
 8009d8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009d92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	031b      	lsls	r3, r3, #12
 8009d9a:	697a      	ldr	r2, [r7, #20]
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009da0:	697b      	ldr	r3, [r7, #20]
 8009da2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009da6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	4a1d      	ldr	r2, [pc, #116]	; (8009e20 <TIM_OC4_SetConfig+0x100>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d00f      	beq.n	8009dd0 <TIM_OC4_SetConfig+0xb0>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a1c      	ldr	r2, [pc, #112]	; (8009e24 <TIM_OC4_SetConfig+0x104>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d00b      	beq.n	8009dd0 <TIM_OC4_SetConfig+0xb0>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a1b      	ldr	r2, [pc, #108]	; (8009e28 <TIM_OC4_SetConfig+0x108>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d007      	beq.n	8009dd0 <TIM_OC4_SetConfig+0xb0>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a1a      	ldr	r2, [pc, #104]	; (8009e2c <TIM_OC4_SetConfig+0x10c>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d003      	beq.n	8009dd0 <TIM_OC4_SetConfig+0xb0>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a19      	ldr	r2, [pc, #100]	; (8009e30 <TIM_OC4_SetConfig+0x110>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d113      	bne.n	8009df8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dd6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dde:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	695b      	ldr	r3, [r3, #20]
 8009de4:	019b      	lsls	r3, r3, #6
 8009de6:	693a      	ldr	r2, [r7, #16]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	019b      	lsls	r3, r3, #6
 8009df2:	693a      	ldr	r2, [r7, #16]
 8009df4:	4313      	orrs	r3, r2
 8009df6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	693a      	ldr	r2, [r7, #16]
 8009dfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	68fa      	ldr	r2, [r7, #12]
 8009e02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	697a      	ldr	r2, [r7, #20]
 8009e10:	621a      	str	r2, [r3, #32]
}
 8009e12:	bf00      	nop
 8009e14:	371c      	adds	r7, #28
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr
 8009e1e:	bf00      	nop
 8009e20:	40012c00 	.word	0x40012c00
 8009e24:	40013400 	.word	0x40013400
 8009e28:	40014000 	.word	0x40014000
 8009e2c:	40014400 	.word	0x40014400
 8009e30:	40014800 	.word	0x40014800

08009e34 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
 8009e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6a1b      	ldr	r3, [r3, #32]
 8009e42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a1b      	ldr	r3, [r3, #32]
 8009e48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009e72:	693b      	ldr	r3, [r7, #16]
 8009e74:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009e78:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	041b      	lsls	r3, r3, #16
 8009e80:	693a      	ldr	r2, [r7, #16]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	4a17      	ldr	r2, [pc, #92]	; (8009ee8 <TIM_OC5_SetConfig+0xb4>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d00f      	beq.n	8009eae <TIM_OC5_SetConfig+0x7a>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	4a16      	ldr	r2, [pc, #88]	; (8009eec <TIM_OC5_SetConfig+0xb8>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d00b      	beq.n	8009eae <TIM_OC5_SetConfig+0x7a>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	4a15      	ldr	r2, [pc, #84]	; (8009ef0 <TIM_OC5_SetConfig+0xbc>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d007      	beq.n	8009eae <TIM_OC5_SetConfig+0x7a>
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	4a14      	ldr	r2, [pc, #80]	; (8009ef4 <TIM_OC5_SetConfig+0xc0>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d003      	beq.n	8009eae <TIM_OC5_SetConfig+0x7a>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	4a13      	ldr	r2, [pc, #76]	; (8009ef8 <TIM_OC5_SetConfig+0xc4>)
 8009eaa:	4293      	cmp	r3, r2
 8009eac:	d109      	bne.n	8009ec2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	695b      	ldr	r3, [r3, #20]
 8009eba:	021b      	lsls	r3, r3, #8
 8009ebc:	697a      	ldr	r2, [r7, #20]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	697a      	ldr	r2, [r7, #20]
 8009ec6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68fa      	ldr	r2, [r7, #12]
 8009ecc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	685a      	ldr	r2, [r3, #4]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	621a      	str	r2, [r3, #32]
}
 8009edc:	bf00      	nop
 8009ede:	371c      	adds	r7, #28
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	40012c00 	.word	0x40012c00
 8009eec:	40013400 	.word	0x40013400
 8009ef0:	40014000 	.word	0x40014000
 8009ef4:	40014400 	.word	0x40014400
 8009ef8:	40014800 	.word	0x40014800

08009efc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009efc:	b480      	push	{r7}
 8009efe:	b087      	sub	sp, #28
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a1b      	ldr	r3, [r3, #32]
 8009f10:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	021b      	lsls	r3, r3, #8
 8009f36:	68fa      	ldr	r2, [r7, #12]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	689b      	ldr	r3, [r3, #8]
 8009f48:	051b      	lsls	r3, r3, #20
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	4a18      	ldr	r2, [pc, #96]	; (8009fb4 <TIM_OC6_SetConfig+0xb8>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d00f      	beq.n	8009f78 <TIM_OC6_SetConfig+0x7c>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	4a17      	ldr	r2, [pc, #92]	; (8009fb8 <TIM_OC6_SetConfig+0xbc>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d00b      	beq.n	8009f78 <TIM_OC6_SetConfig+0x7c>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	4a16      	ldr	r2, [pc, #88]	; (8009fbc <TIM_OC6_SetConfig+0xc0>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d007      	beq.n	8009f78 <TIM_OC6_SetConfig+0x7c>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	4a15      	ldr	r2, [pc, #84]	; (8009fc0 <TIM_OC6_SetConfig+0xc4>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d003      	beq.n	8009f78 <TIM_OC6_SetConfig+0x7c>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	4a14      	ldr	r2, [pc, #80]	; (8009fc4 <TIM_OC6_SetConfig+0xc8>)
 8009f74:	4293      	cmp	r3, r2
 8009f76:	d109      	bne.n	8009f8c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009f78:	697b      	ldr	r3, [r7, #20]
 8009f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	695b      	ldr	r3, [r3, #20]
 8009f84:	029b      	lsls	r3, r3, #10
 8009f86:	697a      	ldr	r2, [r7, #20]
 8009f88:	4313      	orrs	r3, r2
 8009f8a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	685a      	ldr	r2, [r3, #4]
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	693a      	ldr	r2, [r7, #16]
 8009fa4:	621a      	str	r2, [r3, #32]
}
 8009fa6:	bf00      	nop
 8009fa8:	371c      	adds	r7, #28
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	40012c00 	.word	0x40012c00
 8009fb8:	40013400 	.word	0x40013400
 8009fbc:	40014000 	.word	0x40014000
 8009fc0:	40014400 	.word	0x40014400
 8009fc4:	40014800 	.word	0x40014800

08009fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	6a1b      	ldr	r3, [r3, #32]
 8009fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	f023 0201 	bic.w	r2, r3, #1
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fec:	693b      	ldr	r3, [r7, #16]
 8009fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	011b      	lsls	r3, r3, #4
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	f023 030a 	bic.w	r3, r3, #10
 800a004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	4313      	orrs	r3, r2
 800a00c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	693a      	ldr	r2, [r7, #16]
 800a012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	697a      	ldr	r2, [r7, #20]
 800a018:	621a      	str	r2, [r3, #32]
}
 800a01a:	bf00      	nop
 800a01c:	371c      	adds	r7, #28
 800a01e:	46bd      	mov	sp, r7
 800a020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a024:	4770      	bx	lr

0800a026 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a026:	b480      	push	{r7}
 800a028:	b087      	sub	sp, #28
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	60f8      	str	r0, [r7, #12]
 800a02e:	60b9      	str	r1, [r7, #8]
 800a030:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6a1b      	ldr	r3, [r3, #32]
 800a036:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6a1b      	ldr	r3, [r3, #32]
 800a03c:	f023 0210 	bic.w	r2, r3, #16
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	699b      	ldr	r3, [r3, #24]
 800a048:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a050:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	031b      	lsls	r3, r3, #12
 800a056:	693a      	ldr	r2, [r7, #16]
 800a058:	4313      	orrs	r3, r2
 800a05a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a062:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	011b      	lsls	r3, r3, #4
 800a068:	697a      	ldr	r2, [r7, #20]
 800a06a:	4313      	orrs	r3, r2
 800a06c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	693a      	ldr	r2, [r7, #16]
 800a072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	697a      	ldr	r2, [r7, #20]
 800a078:	621a      	str	r2, [r3, #32]
}
 800a07a:	bf00      	nop
 800a07c:	371c      	adds	r7, #28
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a086:	b480      	push	{r7}
 800a088:	b085      	sub	sp, #20
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
 800a08e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a09c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0a2:	683a      	ldr	r2, [r7, #0]
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	4313      	orrs	r3, r2
 800a0a8:	f043 0307 	orr.w	r3, r3, #7
 800a0ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	609a      	str	r2, [r3, #8]
}
 800a0b4:	bf00      	nop
 800a0b6:	3714      	adds	r7, #20
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a0da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	021a      	lsls	r2, r3, #8
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	431a      	orrs	r2, r3
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	697a      	ldr	r2, [r7, #20]
 800a0ea:	4313      	orrs	r3, r2
 800a0ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	697a      	ldr	r2, [r7, #20]
 800a0f2:	609a      	str	r2, [r3, #8]
}
 800a0f4:	bf00      	nop
 800a0f6:	371c      	adds	r7, #28
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a100:	b480      	push	{r7}
 800a102:	b087      	sub	sp, #28
 800a104:	af00      	add	r7, sp, #0
 800a106:	60f8      	str	r0, [r7, #12]
 800a108:	60b9      	str	r1, [r7, #8]
 800a10a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	f003 031f 	and.w	r3, r3, #31
 800a112:	2201      	movs	r2, #1
 800a114:	fa02 f303 	lsl.w	r3, r2, r3
 800a118:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	6a1a      	ldr	r2, [r3, #32]
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	43db      	mvns	r3, r3
 800a122:	401a      	ands	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	6a1a      	ldr	r2, [r3, #32]
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	f003 031f 	and.w	r3, r3, #31
 800a132:	6879      	ldr	r1, [r7, #4]
 800a134:	fa01 f303 	lsl.w	r3, r1, r3
 800a138:	431a      	orrs	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	621a      	str	r2, [r3, #32]
}
 800a13e:	bf00      	nop
 800a140:	371c      	adds	r7, #28
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
	...

0800a14c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d101      	bne.n	800a164 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a160:	2302      	movs	r3, #2
 800a162:	e065      	b.n	800a230 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	2201      	movs	r2, #1
 800a168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2202      	movs	r2, #2
 800a170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	4a2c      	ldr	r2, [pc, #176]	; (800a23c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a18a:	4293      	cmp	r3, r2
 800a18c:	d004      	beq.n	800a198 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	4a2b      	ldr	r2, [pc, #172]	; (800a240 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d108      	bne.n	800a1aa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a19e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	685b      	ldr	r3, [r3, #4]
 800a1a4:	68fa      	ldr	r2, [r7, #12]
 800a1a6:	4313      	orrs	r3, r2
 800a1a8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a1b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a1b      	ldr	r2, [pc, #108]	; (800a23c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d018      	beq.n	800a204 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1da:	d013      	beq.n	800a204 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a18      	ldr	r2, [pc, #96]	; (800a244 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d00e      	beq.n	800a204 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a17      	ldr	r2, [pc, #92]	; (800a248 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d009      	beq.n	800a204 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a12      	ldr	r2, [pc, #72]	; (800a240 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d004      	beq.n	800a204 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a13      	ldr	r2, [pc, #76]	; (800a24c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d10c      	bne.n	800a21e <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a20a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a20c:	683b      	ldr	r3, [r7, #0]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	68ba      	ldr	r2, [r7, #8]
 800a212:	4313      	orrs	r3, r2
 800a214:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2200      	movs	r2, #0
 800a22a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3714      	adds	r7, #20
 800a234:	46bd      	mov	sp, r7
 800a236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23a:	4770      	bx	lr
 800a23c:	40012c00 	.word	0x40012c00
 800a240:	40013400 	.word	0x40013400
 800a244:	40000400 	.word	0x40000400
 800a248:	40000800 	.word	0x40000800
 800a24c:	40014000 	.word	0x40014000

0800a250 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a250:	b480      	push	{r7}
 800a252:	b085      	sub	sp, #20
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a25a:	2300      	movs	r3, #0
 800a25c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a264:	2b01      	cmp	r3, #1
 800a266:	d101      	bne.n	800a26c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a268:	2302      	movs	r3, #2
 800a26a:	e073      	b.n	800a354 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2201      	movs	r2, #1
 800a270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a27a:	683b      	ldr	r3, [r7, #0]
 800a27c:	68db      	ldr	r3, [r3, #12]
 800a27e:	4313      	orrs	r3, r2
 800a280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a288:	683b      	ldr	r3, [r7, #0]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	4313      	orrs	r3, r2
 800a28e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	691b      	ldr	r3, [r3, #16]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	695b      	ldr	r3, [r3, #20]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	699b      	ldr	r3, [r3, #24]
 800a2e0:	041b      	lsls	r3, r3, #16
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	69db      	ldr	r3, [r3, #28]
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	4a19      	ldr	r2, [pc, #100]	; (800a360 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d004      	beq.n	800a308 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a18      	ldr	r2, [pc, #96]	; (800a364 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d11c      	bne.n	800a342 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a312:	051b      	lsls	r3, r3, #20
 800a314:	4313      	orrs	r3, r2
 800a316:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	4313      	orrs	r3, r2
 800a324:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	40012c00 	.word	0x40012c00
 800a364:	40013400 	.word	0x40013400

0800a368 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a398:	bf00      	nop
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b083      	sub	sp, #12
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a3ac:	bf00      	nop
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b083      	sub	sp, #12
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a3c0:	bf00      	nop
 800a3c2:	370c      	adds	r7, #12
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr

0800a3cc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a3d4:	bf00      	nop
 800a3d6:	370c      	adds	r7, #12
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr

0800a3e0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a3e0:	b480      	push	{r7}
 800a3e2:	b083      	sub	sp, #12
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <_ZdlPvj>:
 800a3f4:	f000 b97a 	b.w	800a6ec <_ZdlPv>

0800a3f8 <_ZNSaIcEC1Ev>:
 800a3f8:	4770      	bx	lr

0800a3fa <_ZNSaIcED1Ev>:
 800a3fa:	4770      	bx	lr

0800a3fc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800a3fc:	b10a      	cbz	r2, 800a402 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800a3fe:	f000 bd34 	b.w	800ae6a <memcpy>
 800a402:	4770      	bx	lr

0800a404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800a404:	b508      	push	{r3, lr}
 800a406:	680b      	ldr	r3, [r1, #0]
 800a408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a40c:	d302      	bcc.n	800a414 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800a40e:	480d      	ldr	r0, [pc, #52]	; (800a444 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800a410:	f000 f985 	bl	800a71e <_ZSt20__throw_length_errorPKc>
 800a414:	4293      	cmp	r3, r2
 800a416:	d90b      	bls.n	800a430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a418:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800a41c:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800a420:	d206      	bcs.n	800a430 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a422:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800a426:	bf2a      	itet	cs
 800a428:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 800a42c:	6008      	strcc	r0, [r1, #0]
 800a42e:	600b      	strcs	r3, [r1, #0]
 800a430:	6808      	ldr	r0, [r1, #0]
 800a432:	3001      	adds	r0, #1
 800a434:	d501      	bpl.n	800a43a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800a436:	f000 f96c 	bl	800a712 <_ZSt17__throw_bad_allocv>
 800a43a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a43e:	f000 b957 	b.w	800a6f0 <_Znwj>
 800a442:	bf00      	nop
 800a444:	0800bb3c 	.word	0x0800bb3c

0800a448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800a448:	f850 3b08 	ldr.w	r3, [r0], #8
 800a44c:	4283      	cmp	r3, r0
 800a44e:	d002      	beq.n	800a456 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800a450:	4618      	mov	r0, r3
 800a452:	f000 b94b 	b.w	800a6ec <_ZdlPv>
 800a456:	4770      	bx	lr

0800a458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800a458:	2a01      	cmp	r2, #1
 800a45a:	b410      	push	{r4}
 800a45c:	d104      	bne.n	800a468 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800a45e:	780a      	ldrb	r2, [r1, #0]
 800a460:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a464:	7002      	strb	r2, [r0, #0]
 800a466:	4770      	bx	lr
 800a468:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a46c:	f7ff bfc6 	b.w	800a3fc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800a470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 800a470:	b508      	push	{r3, lr}
 800a472:	1a52      	subs	r2, r2, r1
 800a474:	f7ff fff0 	bl	800a458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a478:	bd08      	pop	{r3, pc}

0800a47a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800a47a:	b508      	push	{r3, lr}
 800a47c:	1a52      	subs	r2, r2, r1
 800a47e:	f7ff ffeb 	bl	800a458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a482:	bd08      	pop	{r3, pc}

0800a484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 800a484:	4288      	cmp	r0, r1
 800a486:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a488:	4604      	mov	r4, r0
 800a48a:	460e      	mov	r6, r1
 800a48c:	d01e      	beq.n	800a4cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 800a48e:	4603      	mov	r3, r0
 800a490:	684d      	ldr	r5, [r1, #4]
 800a492:	f853 2b08 	ldr.w	r2, [r3], #8
 800a496:	429a      	cmp	r2, r3
 800a498:	bf14      	ite	ne
 800a49a:	6882      	ldrne	r2, [r0, #8]
 800a49c:	220f      	moveq	r2, #15
 800a49e:	42aa      	cmp	r2, r5
 800a4a0:	d20a      	bcs.n	800a4b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 800a4a2:	a901      	add	r1, sp, #4
 800a4a4:	9501      	str	r5, [sp, #4]
 800a4a6:	f7ff ffad 	bl	800a404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a4aa:	4607      	mov	r7, r0
 800a4ac:	4620      	mov	r0, r4
 800a4ae:	f7ff ffcb 	bl	800a448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a4b2:	9b01      	ldr	r3, [sp, #4]
 800a4b4:	6027      	str	r7, [r4, #0]
 800a4b6:	60a3      	str	r3, [r4, #8]
 800a4b8:	b125      	cbz	r5, 800a4c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 800a4ba:	6831      	ldr	r1, [r6, #0]
 800a4bc:	6820      	ldr	r0, [r4, #0]
 800a4be:	462a      	mov	r2, r5
 800a4c0:	f7ff ffca 	bl	800a458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	6065      	str	r5, [r4, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	555a      	strb	r2, [r3, r5]
 800a4cc:	b003      	add	sp, #12
 800a4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a4d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800a4d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a4d6:	461f      	mov	r7, r3
 800a4d8:	6843      	ldr	r3, [r0, #4]
 800a4da:	eb01 0802 	add.w	r8, r1, r2
 800a4de:	1ab2      	subs	r2, r6, r2
 800a4e0:	441a      	add	r2, r3
 800a4e2:	eba3 0908 	sub.w	r9, r3, r8
 800a4e6:	4603      	mov	r3, r0
 800a4e8:	9201      	str	r2, [sp, #4]
 800a4ea:	f853 2b08 	ldr.w	r2, [r3], #8
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	bf18      	it	ne
 800a4f2:	6882      	ldrne	r2, [r0, #8]
 800a4f4:	460d      	mov	r5, r1
 800a4f6:	bf08      	it	eq
 800a4f8:	220f      	moveq	r2, #15
 800a4fa:	a901      	add	r1, sp, #4
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	f7ff ff81 	bl	800a404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a502:	4682      	mov	sl, r0
 800a504:	b11d      	cbz	r5, 800a50e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 800a506:	6821      	ldr	r1, [r4, #0]
 800a508:	462a      	mov	r2, r5
 800a50a:	f7ff ffa5 	bl	800a458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a50e:	b137      	cbz	r7, 800a51e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800a510:	b12e      	cbz	r6, 800a51e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 800a512:	4632      	mov	r2, r6
 800a514:	4639      	mov	r1, r7
 800a516:	eb0a 0005 	add.w	r0, sl, r5
 800a51a:	f7ff ff9d 	bl	800a458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a51e:	f1b9 0f00 	cmp.w	r9, #0
 800a522:	d007      	beq.n	800a534 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 800a524:	6821      	ldr	r1, [r4, #0]
 800a526:	4435      	add	r5, r6
 800a528:	464a      	mov	r2, r9
 800a52a:	4441      	add	r1, r8
 800a52c:	eb0a 0005 	add.w	r0, sl, r5
 800a530:	f7ff ff92 	bl	800a458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a534:	4620      	mov	r0, r4
 800a536:	f7ff ff87 	bl	800a448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a53a:	9b01      	ldr	r3, [sp, #4]
 800a53c:	f8c4 a000 	str.w	sl, [r4]
 800a540:	60a3      	str	r3, [r4, #8]
 800a542:	b002      	add	sp, #8
 800a544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a548 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800a548:	f100 0208 	add.w	r2, r0, #8
 800a54c:	6002      	str	r2, [r0, #0]
 800a54e:	2200      	movs	r2, #0
 800a550:	6042      	str	r2, [r0, #4]
 800a552:	7202      	strb	r2, [r0, #8]
 800a554:	4770      	bx	lr

0800a556 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800a556:	b510      	push	{r4, lr}
 800a558:	4604      	mov	r4, r0
 800a55a:	f7ff ff75 	bl	800a448 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a55e:	4620      	mov	r0, r4
 800a560:	bd10      	pop	{r4, pc}

0800a562 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 800a562:	b510      	push	{r4, lr}
 800a564:	4604      	mov	r4, r0
 800a566:	f7ff ff8d 	bl	800a484 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 800a56a:	4620      	mov	r0, r4
 800a56c:	bd10      	pop	{r4, pc}

0800a56e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800a56e:	b570      	push	{r4, r5, r6, lr}
 800a570:	460c      	mov	r4, r1
 800a572:	f851 3b08 	ldr.w	r3, [r1], #8
 800a576:	4299      	cmp	r1, r3
 800a578:	4605      	mov	r5, r0
 800a57a:	6800      	ldr	r0, [r0, #0]
 800a57c:	d110      	bne.n	800a5a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x32>
 800a57e:	42a5      	cmp	r5, r4
 800a580:	d008      	beq.n	800a594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 800a582:	6862      	ldr	r2, [r4, #4]
 800a584:	b10a      	cbz	r2, 800a58a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c>
 800a586:	f7ff ff67 	bl	800a458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a58a:	6863      	ldr	r3, [r4, #4]
 800a58c:	682a      	ldr	r2, [r5, #0]
 800a58e:	606b      	str	r3, [r5, #4]
 800a590:	2100      	movs	r1, #0
 800a592:	54d1      	strb	r1, [r2, r3]
 800a594:	6822      	ldr	r2, [r4, #0]
 800a596:	2300      	movs	r3, #0
 800a598:	6063      	str	r3, [r4, #4]
 800a59a:	7013      	strb	r3, [r2, #0]
 800a59c:	4628      	mov	r0, r5
 800a59e:	bd70      	pop	{r4, r5, r6, pc}
 800a5a0:	602b      	str	r3, [r5, #0]
 800a5a2:	f105 0608 	add.w	r6, r5, #8
 800a5a6:	6863      	ldr	r3, [r4, #4]
 800a5a8:	606b      	str	r3, [r5, #4]
 800a5aa:	42b0      	cmp	r0, r6
 800a5ac:	68a3      	ldr	r3, [r4, #8]
 800a5ae:	bf18      	it	ne
 800a5b0:	68aa      	ldrne	r2, [r5, #8]
 800a5b2:	60ab      	str	r3, [r5, #8]
 800a5b4:	bf08      	it	eq
 800a5b6:	2000      	moveq	r0, #0
 800a5b8:	b110      	cbz	r0, 800a5c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x52>
 800a5ba:	6020      	str	r0, [r4, #0]
 800a5bc:	60a2      	str	r2, [r4, #8]
 800a5be:	e7e9      	b.n	800a594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 800a5c0:	6021      	str	r1, [r4, #0]
 800a5c2:	e7e7      	b.n	800a594 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>

0800a5c4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800a5c4:	6840      	ldr	r0, [r0, #4]
 800a5c6:	4770      	bx	lr

0800a5c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800a5c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5ca:	4604      	mov	r4, r0
 800a5cc:	4623      	mov	r3, r4
 800a5ce:	6840      	ldr	r0, [r0, #4]
 800a5d0:	f853 6b08 	ldr.w	r6, [r3], #8
 800a5d4:	429e      	cmp	r6, r3
 800a5d6:	bf18      	it	ne
 800a5d8:	68a3      	ldrne	r3, [r4, #8]
 800a5da:	eb00 0502 	add.w	r5, r0, r2
 800a5de:	bf08      	it	eq
 800a5e0:	230f      	moveq	r3, #15
 800a5e2:	429d      	cmp	r5, r3
 800a5e4:	d80a      	bhi.n	800a5fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 800a5e6:	b112      	cbz	r2, 800a5ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 800a5e8:	4430      	add	r0, r6
 800a5ea:	f7ff ff35 	bl	800a458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	6065      	str	r5, [r4, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	4620      	mov	r0, r4
 800a5f6:	555a      	strb	r2, [r3, r5]
 800a5f8:	b002      	add	sp, #8
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}
 800a5fc:	9200      	str	r2, [sp, #0]
 800a5fe:	460b      	mov	r3, r1
 800a600:	2200      	movs	r2, #0
 800a602:	4601      	mov	r1, r0
 800a604:	4620      	mov	r0, r4
 800a606:	f7ff ff63 	bl	800a4d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800a60a:	e7f0      	b.n	800a5ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

0800a60c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800a60c:	b508      	push	{r3, lr}
 800a60e:	e9d1 1200 	ldrd	r1, r2, [r1]
 800a612:	f7ff ffd9 	bl	800a5c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800a616:	bd08      	pop	{r3, pc}

0800a618 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 800a618:	b508      	push	{r3, lr}
 800a61a:	f7ff fff7 	bl	800a60c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 800a61e:	bd08      	pop	{r3, pc}

0800a620 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800a620:	6800      	ldr	r0, [r0, #0]
 800a622:	4770      	bx	lr

0800a624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 800a624:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a626:	4604      	mov	r4, r0
 800a628:	4616      	mov	r6, r2
 800a62a:	460d      	mov	r5, r1
 800a62c:	b919      	cbnz	r1, 800a636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800a62e:	b112      	cbz	r2, 800a636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800a630:	480d      	ldr	r0, [pc, #52]	; (800a668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800a632:	f000 f871 	bl	800a718 <_ZSt19__throw_logic_errorPKc>
 800a636:	1b73      	subs	r3, r6, r5
 800a638:	2b0f      	cmp	r3, #15
 800a63a:	9301      	str	r3, [sp, #4]
 800a63c:	d907      	bls.n	800a64e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800a63e:	2200      	movs	r2, #0
 800a640:	a901      	add	r1, sp, #4
 800a642:	4620      	mov	r0, r4
 800a644:	f7ff fede 	bl	800a404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a648:	9b01      	ldr	r3, [sp, #4]
 800a64a:	6020      	str	r0, [r4, #0]
 800a64c:	60a3      	str	r3, [r4, #8]
 800a64e:	4632      	mov	r2, r6
 800a650:	4629      	mov	r1, r5
 800a652:	6820      	ldr	r0, [r4, #0]
 800a654:	f7ff ff0c 	bl	800a470 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800a658:	9b01      	ldr	r3, [sp, #4]
 800a65a:	6822      	ldr	r2, [r4, #0]
 800a65c:	6063      	str	r3, [r4, #4]
 800a65e:	2100      	movs	r1, #0
 800a660:	54d1      	strb	r1, [r2, r3]
 800a662:	b002      	add	sp, #8
 800a664:	bd70      	pop	{r4, r5, r6, pc}
 800a666:	bf00      	nop
 800a668:	0800bb54 	.word	0x0800bb54

0800a66c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800a66c:	b538      	push	{r3, r4, r5, lr}
 800a66e:	f100 0308 	add.w	r3, r0, #8
 800a672:	6003      	str	r3, [r0, #0]
 800a674:	e9d1 5200 	ldrd	r5, r2, [r1]
 800a678:	4604      	mov	r4, r0
 800a67a:	f04f 0300 	mov.w	r3, #0
 800a67e:	442a      	add	r2, r5
 800a680:	4629      	mov	r1, r5
 800a682:	f7ff ffcf 	bl	800a624 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800a686:	4620      	mov	r0, r4
 800a688:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800a68c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a68e:	4604      	mov	r4, r0
 800a690:	4616      	mov	r6, r2
 800a692:	460d      	mov	r5, r1
 800a694:	b919      	cbnz	r1, 800a69e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a696:	b112      	cbz	r2, 800a69e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a698:	480d      	ldr	r0, [pc, #52]	; (800a6d0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800a69a:	f000 f83d 	bl	800a718 <_ZSt19__throw_logic_errorPKc>
 800a69e:	1b73      	subs	r3, r6, r5
 800a6a0:	2b0f      	cmp	r3, #15
 800a6a2:	9301      	str	r3, [sp, #4]
 800a6a4:	d907      	bls.n	800a6b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	a901      	add	r1, sp, #4
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	f7ff feaa 	bl	800a404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a6b0:	9b01      	ldr	r3, [sp, #4]
 800a6b2:	6020      	str	r0, [r4, #0]
 800a6b4:	60a3      	str	r3, [r4, #8]
 800a6b6:	4632      	mov	r2, r6
 800a6b8:	4629      	mov	r1, r5
 800a6ba:	6820      	ldr	r0, [r4, #0]
 800a6bc:	f7ff fedd 	bl	800a47a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800a6c0:	9b01      	ldr	r3, [sp, #4]
 800a6c2:	6822      	ldr	r2, [r4, #0]
 800a6c4:	6063      	str	r3, [r4, #4]
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	54d1      	strb	r1, [r2, r3]
 800a6ca:	b002      	add	sp, #8
 800a6cc:	bd70      	pop	{r4, r5, r6, pc}
 800a6ce:	bf00      	nop
 800a6d0:	0800bb54 	.word	0x0800bb54

0800a6d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 800a6d4:	b510      	push	{r4, lr}
 800a6d6:	f100 0308 	add.w	r3, r0, #8
 800a6da:	4604      	mov	r4, r0
 800a6dc:	6003      	str	r3, [r0, #0]
 800a6de:	440a      	add	r2, r1
 800a6e0:	f04f 0300 	mov.w	r3, #0
 800a6e4:	f7ff ffd2 	bl	800a68c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800a6e8:	4620      	mov	r0, r4
 800a6ea:	bd10      	pop	{r4, pc}

0800a6ec <_ZdlPv>:
 800a6ec:	f000 b832 	b.w	800a754 <free>

0800a6f0 <_Znwj>:
 800a6f0:	2801      	cmp	r0, #1
 800a6f2:	bf38      	it	cc
 800a6f4:	2001      	movcc	r0, #1
 800a6f6:	b510      	push	{r4, lr}
 800a6f8:	4604      	mov	r4, r0
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 f822 	bl	800a744 <malloc>
 800a700:	b100      	cbz	r0, 800a704 <_Znwj+0x14>
 800a702:	bd10      	pop	{r4, pc}
 800a704:	f000 f80e 	bl	800a724 <_ZSt15get_new_handlerv>
 800a708:	b908      	cbnz	r0, 800a70e <_Znwj+0x1e>
 800a70a:	f000 f813 	bl	800a734 <abort>
 800a70e:	4780      	blx	r0
 800a710:	e7f3      	b.n	800a6fa <_Znwj+0xa>

0800a712 <_ZSt17__throw_bad_allocv>:
 800a712:	b508      	push	{r3, lr}
 800a714:	f000 f80e 	bl	800a734 <abort>

0800a718 <_ZSt19__throw_logic_errorPKc>:
 800a718:	b508      	push	{r3, lr}
 800a71a:	f000 f80b 	bl	800a734 <abort>

0800a71e <_ZSt20__throw_length_errorPKc>:
 800a71e:	b508      	push	{r3, lr}
 800a720:	f000 f808 	bl	800a734 <abort>

0800a724 <_ZSt15get_new_handlerv>:
 800a724:	4b02      	ldr	r3, [pc, #8]	; (800a730 <_ZSt15get_new_handlerv+0xc>)
 800a726:	6818      	ldr	r0, [r3, #0]
 800a728:	f3bf 8f5b 	dmb	ish
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	20000a08 	.word	0x20000a08

0800a734 <abort>:
 800a734:	b508      	push	{r3, lr}
 800a736:	2006      	movs	r0, #6
 800a738:	f000 faf8 	bl	800ad2c <raise>
 800a73c:	2001      	movs	r0, #1
 800a73e:	f7fc f8f9 	bl	8006934 <_exit>
	...

0800a744 <malloc>:
 800a744:	4b02      	ldr	r3, [pc, #8]	; (800a750 <malloc+0xc>)
 800a746:	4601      	mov	r1, r0
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	f000 b82b 	b.w	800a7a4 <_malloc_r>
 800a74e:	bf00      	nop
 800a750:	20000064 	.word	0x20000064

0800a754 <free>:
 800a754:	4b02      	ldr	r3, [pc, #8]	; (800a760 <free+0xc>)
 800a756:	4601      	mov	r1, r0
 800a758:	6818      	ldr	r0, [r3, #0]
 800a75a:	f000 bb95 	b.w	800ae88 <_free_r>
 800a75e:	bf00      	nop
 800a760:	20000064 	.word	0x20000064

0800a764 <sbrk_aligned>:
 800a764:	b570      	push	{r4, r5, r6, lr}
 800a766:	4e0e      	ldr	r6, [pc, #56]	; (800a7a0 <sbrk_aligned+0x3c>)
 800a768:	460c      	mov	r4, r1
 800a76a:	6831      	ldr	r1, [r6, #0]
 800a76c:	4605      	mov	r5, r0
 800a76e:	b911      	cbnz	r1, 800a776 <sbrk_aligned+0x12>
 800a770:	f000 fb2c 	bl	800adcc <_sbrk_r>
 800a774:	6030      	str	r0, [r6, #0]
 800a776:	4621      	mov	r1, r4
 800a778:	4628      	mov	r0, r5
 800a77a:	f000 fb27 	bl	800adcc <_sbrk_r>
 800a77e:	1c43      	adds	r3, r0, #1
 800a780:	d00a      	beq.n	800a798 <sbrk_aligned+0x34>
 800a782:	1cc4      	adds	r4, r0, #3
 800a784:	f024 0403 	bic.w	r4, r4, #3
 800a788:	42a0      	cmp	r0, r4
 800a78a:	d007      	beq.n	800a79c <sbrk_aligned+0x38>
 800a78c:	1a21      	subs	r1, r4, r0
 800a78e:	4628      	mov	r0, r5
 800a790:	f000 fb1c 	bl	800adcc <_sbrk_r>
 800a794:	3001      	adds	r0, #1
 800a796:	d101      	bne.n	800a79c <sbrk_aligned+0x38>
 800a798:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a79c:	4620      	mov	r0, r4
 800a79e:	bd70      	pop	{r4, r5, r6, pc}
 800a7a0:	20000a10 	.word	0x20000a10

0800a7a4 <_malloc_r>:
 800a7a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a8:	1ccd      	adds	r5, r1, #3
 800a7aa:	f025 0503 	bic.w	r5, r5, #3
 800a7ae:	3508      	adds	r5, #8
 800a7b0:	2d0c      	cmp	r5, #12
 800a7b2:	bf38      	it	cc
 800a7b4:	250c      	movcc	r5, #12
 800a7b6:	2d00      	cmp	r5, #0
 800a7b8:	4607      	mov	r7, r0
 800a7ba:	db01      	blt.n	800a7c0 <_malloc_r+0x1c>
 800a7bc:	42a9      	cmp	r1, r5
 800a7be:	d905      	bls.n	800a7cc <_malloc_r+0x28>
 800a7c0:	230c      	movs	r3, #12
 800a7c2:	603b      	str	r3, [r7, #0]
 800a7c4:	2600      	movs	r6, #0
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7cc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a8a0 <_malloc_r+0xfc>
 800a7d0:	f000 f868 	bl	800a8a4 <__malloc_lock>
 800a7d4:	f8d8 3000 	ldr.w	r3, [r8]
 800a7d8:	461c      	mov	r4, r3
 800a7da:	bb5c      	cbnz	r4, 800a834 <_malloc_r+0x90>
 800a7dc:	4629      	mov	r1, r5
 800a7de:	4638      	mov	r0, r7
 800a7e0:	f7ff ffc0 	bl	800a764 <sbrk_aligned>
 800a7e4:	1c43      	adds	r3, r0, #1
 800a7e6:	4604      	mov	r4, r0
 800a7e8:	d155      	bne.n	800a896 <_malloc_r+0xf2>
 800a7ea:	f8d8 4000 	ldr.w	r4, [r8]
 800a7ee:	4626      	mov	r6, r4
 800a7f0:	2e00      	cmp	r6, #0
 800a7f2:	d145      	bne.n	800a880 <_malloc_r+0xdc>
 800a7f4:	2c00      	cmp	r4, #0
 800a7f6:	d048      	beq.n	800a88a <_malloc_r+0xe6>
 800a7f8:	6823      	ldr	r3, [r4, #0]
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4638      	mov	r0, r7
 800a7fe:	eb04 0903 	add.w	r9, r4, r3
 800a802:	f000 fae3 	bl	800adcc <_sbrk_r>
 800a806:	4581      	cmp	r9, r0
 800a808:	d13f      	bne.n	800a88a <_malloc_r+0xe6>
 800a80a:	6821      	ldr	r1, [r4, #0]
 800a80c:	1a6d      	subs	r5, r5, r1
 800a80e:	4629      	mov	r1, r5
 800a810:	4638      	mov	r0, r7
 800a812:	f7ff ffa7 	bl	800a764 <sbrk_aligned>
 800a816:	3001      	adds	r0, #1
 800a818:	d037      	beq.n	800a88a <_malloc_r+0xe6>
 800a81a:	6823      	ldr	r3, [r4, #0]
 800a81c:	442b      	add	r3, r5
 800a81e:	6023      	str	r3, [r4, #0]
 800a820:	f8d8 3000 	ldr.w	r3, [r8]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d038      	beq.n	800a89a <_malloc_r+0xf6>
 800a828:	685a      	ldr	r2, [r3, #4]
 800a82a:	42a2      	cmp	r2, r4
 800a82c:	d12b      	bne.n	800a886 <_malloc_r+0xe2>
 800a82e:	2200      	movs	r2, #0
 800a830:	605a      	str	r2, [r3, #4]
 800a832:	e00f      	b.n	800a854 <_malloc_r+0xb0>
 800a834:	6822      	ldr	r2, [r4, #0]
 800a836:	1b52      	subs	r2, r2, r5
 800a838:	d41f      	bmi.n	800a87a <_malloc_r+0xd6>
 800a83a:	2a0b      	cmp	r2, #11
 800a83c:	d917      	bls.n	800a86e <_malloc_r+0xca>
 800a83e:	1961      	adds	r1, r4, r5
 800a840:	42a3      	cmp	r3, r4
 800a842:	6025      	str	r5, [r4, #0]
 800a844:	bf18      	it	ne
 800a846:	6059      	strne	r1, [r3, #4]
 800a848:	6863      	ldr	r3, [r4, #4]
 800a84a:	bf08      	it	eq
 800a84c:	f8c8 1000 	streq.w	r1, [r8]
 800a850:	5162      	str	r2, [r4, r5]
 800a852:	604b      	str	r3, [r1, #4]
 800a854:	4638      	mov	r0, r7
 800a856:	f104 060b 	add.w	r6, r4, #11
 800a85a:	f000 f829 	bl	800a8b0 <__malloc_unlock>
 800a85e:	f026 0607 	bic.w	r6, r6, #7
 800a862:	1d23      	adds	r3, r4, #4
 800a864:	1af2      	subs	r2, r6, r3
 800a866:	d0ae      	beq.n	800a7c6 <_malloc_r+0x22>
 800a868:	1b9b      	subs	r3, r3, r6
 800a86a:	50a3      	str	r3, [r4, r2]
 800a86c:	e7ab      	b.n	800a7c6 <_malloc_r+0x22>
 800a86e:	42a3      	cmp	r3, r4
 800a870:	6862      	ldr	r2, [r4, #4]
 800a872:	d1dd      	bne.n	800a830 <_malloc_r+0x8c>
 800a874:	f8c8 2000 	str.w	r2, [r8]
 800a878:	e7ec      	b.n	800a854 <_malloc_r+0xb0>
 800a87a:	4623      	mov	r3, r4
 800a87c:	6864      	ldr	r4, [r4, #4]
 800a87e:	e7ac      	b.n	800a7da <_malloc_r+0x36>
 800a880:	4634      	mov	r4, r6
 800a882:	6876      	ldr	r6, [r6, #4]
 800a884:	e7b4      	b.n	800a7f0 <_malloc_r+0x4c>
 800a886:	4613      	mov	r3, r2
 800a888:	e7cc      	b.n	800a824 <_malloc_r+0x80>
 800a88a:	230c      	movs	r3, #12
 800a88c:	603b      	str	r3, [r7, #0]
 800a88e:	4638      	mov	r0, r7
 800a890:	f000 f80e 	bl	800a8b0 <__malloc_unlock>
 800a894:	e797      	b.n	800a7c6 <_malloc_r+0x22>
 800a896:	6025      	str	r5, [r4, #0]
 800a898:	e7dc      	b.n	800a854 <_malloc_r+0xb0>
 800a89a:	605b      	str	r3, [r3, #4]
 800a89c:	deff      	udf	#255	; 0xff
 800a89e:	bf00      	nop
 800a8a0:	20000a0c 	.word	0x20000a0c

0800a8a4 <__malloc_lock>:
 800a8a4:	4801      	ldr	r0, [pc, #4]	; (800a8ac <__malloc_lock+0x8>)
 800a8a6:	f000 bade 	b.w	800ae66 <__retarget_lock_acquire_recursive>
 800a8aa:	bf00      	nop
 800a8ac:	20000b54 	.word	0x20000b54

0800a8b0 <__malloc_unlock>:
 800a8b0:	4801      	ldr	r0, [pc, #4]	; (800a8b8 <__malloc_unlock+0x8>)
 800a8b2:	f000 bad9 	b.w	800ae68 <__retarget_lock_release_recursive>
 800a8b6:	bf00      	nop
 800a8b8:	20000b54 	.word	0x20000b54

0800a8bc <std>:
 800a8bc:	2300      	movs	r3, #0
 800a8be:	b510      	push	{r4, lr}
 800a8c0:	4604      	mov	r4, r0
 800a8c2:	e9c0 3300 	strd	r3, r3, [r0]
 800a8c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a8ca:	6083      	str	r3, [r0, #8]
 800a8cc:	8181      	strh	r1, [r0, #12]
 800a8ce:	6643      	str	r3, [r0, #100]	; 0x64
 800a8d0:	81c2      	strh	r2, [r0, #14]
 800a8d2:	6183      	str	r3, [r0, #24]
 800a8d4:	4619      	mov	r1, r3
 800a8d6:	2208      	movs	r2, #8
 800a8d8:	305c      	adds	r0, #92	; 0x5c
 800a8da:	f000 f9f7 	bl	800accc <memset>
 800a8de:	4b0d      	ldr	r3, [pc, #52]	; (800a914 <std+0x58>)
 800a8e0:	6263      	str	r3, [r4, #36]	; 0x24
 800a8e2:	4b0d      	ldr	r3, [pc, #52]	; (800a918 <std+0x5c>)
 800a8e4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a8e6:	4b0d      	ldr	r3, [pc, #52]	; (800a91c <std+0x60>)
 800a8e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a8ea:	4b0d      	ldr	r3, [pc, #52]	; (800a920 <std+0x64>)
 800a8ec:	6323      	str	r3, [r4, #48]	; 0x30
 800a8ee:	4b0d      	ldr	r3, [pc, #52]	; (800a924 <std+0x68>)
 800a8f0:	6224      	str	r4, [r4, #32]
 800a8f2:	429c      	cmp	r4, r3
 800a8f4:	d006      	beq.n	800a904 <std+0x48>
 800a8f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a8fa:	4294      	cmp	r4, r2
 800a8fc:	d002      	beq.n	800a904 <std+0x48>
 800a8fe:	33d0      	adds	r3, #208	; 0xd0
 800a900:	429c      	cmp	r4, r3
 800a902:	d105      	bne.n	800a910 <std+0x54>
 800a904:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a90c:	f000 baaa 	b.w	800ae64 <__retarget_lock_init_recursive>
 800a910:	bd10      	pop	{r4, pc}
 800a912:	bf00      	nop
 800a914:	0800ab1d 	.word	0x0800ab1d
 800a918:	0800ab3f 	.word	0x0800ab3f
 800a91c:	0800ab77 	.word	0x0800ab77
 800a920:	0800ab9b 	.word	0x0800ab9b
 800a924:	20000a14 	.word	0x20000a14

0800a928 <stdio_exit_handler>:
 800a928:	4a02      	ldr	r2, [pc, #8]	; (800a934 <stdio_exit_handler+0xc>)
 800a92a:	4903      	ldr	r1, [pc, #12]	; (800a938 <stdio_exit_handler+0x10>)
 800a92c:	4803      	ldr	r0, [pc, #12]	; (800a93c <stdio_exit_handler+0x14>)
 800a92e:	f000 b869 	b.w	800aa04 <_fwalk_sglue>
 800a932:	bf00      	nop
 800a934:	2000000c 	.word	0x2000000c
 800a938:	0800b5d5 	.word	0x0800b5d5
 800a93c:	20000018 	.word	0x20000018

0800a940 <cleanup_stdio>:
 800a940:	6841      	ldr	r1, [r0, #4]
 800a942:	4b0c      	ldr	r3, [pc, #48]	; (800a974 <cleanup_stdio+0x34>)
 800a944:	4299      	cmp	r1, r3
 800a946:	b510      	push	{r4, lr}
 800a948:	4604      	mov	r4, r0
 800a94a:	d001      	beq.n	800a950 <cleanup_stdio+0x10>
 800a94c:	f000 fe42 	bl	800b5d4 <_fflush_r>
 800a950:	68a1      	ldr	r1, [r4, #8]
 800a952:	4b09      	ldr	r3, [pc, #36]	; (800a978 <cleanup_stdio+0x38>)
 800a954:	4299      	cmp	r1, r3
 800a956:	d002      	beq.n	800a95e <cleanup_stdio+0x1e>
 800a958:	4620      	mov	r0, r4
 800a95a:	f000 fe3b 	bl	800b5d4 <_fflush_r>
 800a95e:	68e1      	ldr	r1, [r4, #12]
 800a960:	4b06      	ldr	r3, [pc, #24]	; (800a97c <cleanup_stdio+0x3c>)
 800a962:	4299      	cmp	r1, r3
 800a964:	d004      	beq.n	800a970 <cleanup_stdio+0x30>
 800a966:	4620      	mov	r0, r4
 800a968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a96c:	f000 be32 	b.w	800b5d4 <_fflush_r>
 800a970:	bd10      	pop	{r4, pc}
 800a972:	bf00      	nop
 800a974:	20000a14 	.word	0x20000a14
 800a978:	20000a7c 	.word	0x20000a7c
 800a97c:	20000ae4 	.word	0x20000ae4

0800a980 <global_stdio_init.part.0>:
 800a980:	b510      	push	{r4, lr}
 800a982:	4b0b      	ldr	r3, [pc, #44]	; (800a9b0 <global_stdio_init.part.0+0x30>)
 800a984:	4c0b      	ldr	r4, [pc, #44]	; (800a9b4 <global_stdio_init.part.0+0x34>)
 800a986:	4a0c      	ldr	r2, [pc, #48]	; (800a9b8 <global_stdio_init.part.0+0x38>)
 800a988:	601a      	str	r2, [r3, #0]
 800a98a:	4620      	mov	r0, r4
 800a98c:	2200      	movs	r2, #0
 800a98e:	2104      	movs	r1, #4
 800a990:	f7ff ff94 	bl	800a8bc <std>
 800a994:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a998:	2201      	movs	r2, #1
 800a99a:	2109      	movs	r1, #9
 800a99c:	f7ff ff8e 	bl	800a8bc <std>
 800a9a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a9a4:	2202      	movs	r2, #2
 800a9a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9aa:	2112      	movs	r1, #18
 800a9ac:	f7ff bf86 	b.w	800a8bc <std>
 800a9b0:	20000b4c 	.word	0x20000b4c
 800a9b4:	20000a14 	.word	0x20000a14
 800a9b8:	0800a929 	.word	0x0800a929

0800a9bc <__sfp_lock_acquire>:
 800a9bc:	4801      	ldr	r0, [pc, #4]	; (800a9c4 <__sfp_lock_acquire+0x8>)
 800a9be:	f000 ba52 	b.w	800ae66 <__retarget_lock_acquire_recursive>
 800a9c2:	bf00      	nop
 800a9c4:	20000b55 	.word	0x20000b55

0800a9c8 <__sfp_lock_release>:
 800a9c8:	4801      	ldr	r0, [pc, #4]	; (800a9d0 <__sfp_lock_release+0x8>)
 800a9ca:	f000 ba4d 	b.w	800ae68 <__retarget_lock_release_recursive>
 800a9ce:	bf00      	nop
 800a9d0:	20000b55 	.word	0x20000b55

0800a9d4 <__sinit>:
 800a9d4:	b510      	push	{r4, lr}
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	f7ff fff0 	bl	800a9bc <__sfp_lock_acquire>
 800a9dc:	6a23      	ldr	r3, [r4, #32]
 800a9de:	b11b      	cbz	r3, 800a9e8 <__sinit+0x14>
 800a9e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a9e4:	f7ff bff0 	b.w	800a9c8 <__sfp_lock_release>
 800a9e8:	4b04      	ldr	r3, [pc, #16]	; (800a9fc <__sinit+0x28>)
 800a9ea:	6223      	str	r3, [r4, #32]
 800a9ec:	4b04      	ldr	r3, [pc, #16]	; (800aa00 <__sinit+0x2c>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d1f5      	bne.n	800a9e0 <__sinit+0xc>
 800a9f4:	f7ff ffc4 	bl	800a980 <global_stdio_init.part.0>
 800a9f8:	e7f2      	b.n	800a9e0 <__sinit+0xc>
 800a9fa:	bf00      	nop
 800a9fc:	0800a941 	.word	0x0800a941
 800aa00:	20000b4c 	.word	0x20000b4c

0800aa04 <_fwalk_sglue>:
 800aa04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa08:	4607      	mov	r7, r0
 800aa0a:	4688      	mov	r8, r1
 800aa0c:	4614      	mov	r4, r2
 800aa0e:	2600      	movs	r6, #0
 800aa10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800aa14:	f1b9 0901 	subs.w	r9, r9, #1
 800aa18:	d505      	bpl.n	800aa26 <_fwalk_sglue+0x22>
 800aa1a:	6824      	ldr	r4, [r4, #0]
 800aa1c:	2c00      	cmp	r4, #0
 800aa1e:	d1f7      	bne.n	800aa10 <_fwalk_sglue+0xc>
 800aa20:	4630      	mov	r0, r6
 800aa22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa26:	89ab      	ldrh	r3, [r5, #12]
 800aa28:	2b01      	cmp	r3, #1
 800aa2a:	d907      	bls.n	800aa3c <_fwalk_sglue+0x38>
 800aa2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aa30:	3301      	adds	r3, #1
 800aa32:	d003      	beq.n	800aa3c <_fwalk_sglue+0x38>
 800aa34:	4629      	mov	r1, r5
 800aa36:	4638      	mov	r0, r7
 800aa38:	47c0      	blx	r8
 800aa3a:	4306      	orrs	r6, r0
 800aa3c:	3568      	adds	r5, #104	; 0x68
 800aa3e:	e7e9      	b.n	800aa14 <_fwalk_sglue+0x10>

0800aa40 <iprintf>:
 800aa40:	b40f      	push	{r0, r1, r2, r3}
 800aa42:	b507      	push	{r0, r1, r2, lr}
 800aa44:	4906      	ldr	r1, [pc, #24]	; (800aa60 <iprintf+0x20>)
 800aa46:	ab04      	add	r3, sp, #16
 800aa48:	6808      	ldr	r0, [r1, #0]
 800aa4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800aa4e:	6881      	ldr	r1, [r0, #8]
 800aa50:	9301      	str	r3, [sp, #4]
 800aa52:	f000 fa8f 	bl	800af74 <_vfiprintf_r>
 800aa56:	b003      	add	sp, #12
 800aa58:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa5c:	b004      	add	sp, #16
 800aa5e:	4770      	bx	lr
 800aa60:	20000064 	.word	0x20000064

0800aa64 <_puts_r>:
 800aa64:	6a03      	ldr	r3, [r0, #32]
 800aa66:	b570      	push	{r4, r5, r6, lr}
 800aa68:	6884      	ldr	r4, [r0, #8]
 800aa6a:	4605      	mov	r5, r0
 800aa6c:	460e      	mov	r6, r1
 800aa6e:	b90b      	cbnz	r3, 800aa74 <_puts_r+0x10>
 800aa70:	f7ff ffb0 	bl	800a9d4 <__sinit>
 800aa74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa76:	07db      	lsls	r3, r3, #31
 800aa78:	d405      	bmi.n	800aa86 <_puts_r+0x22>
 800aa7a:	89a3      	ldrh	r3, [r4, #12]
 800aa7c:	0598      	lsls	r0, r3, #22
 800aa7e:	d402      	bmi.n	800aa86 <_puts_r+0x22>
 800aa80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa82:	f000 f9f0 	bl	800ae66 <__retarget_lock_acquire_recursive>
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	0719      	lsls	r1, r3, #28
 800aa8a:	d513      	bpl.n	800aab4 <_puts_r+0x50>
 800aa8c:	6923      	ldr	r3, [r4, #16]
 800aa8e:	b18b      	cbz	r3, 800aab4 <_puts_r+0x50>
 800aa90:	3e01      	subs	r6, #1
 800aa92:	68a3      	ldr	r3, [r4, #8]
 800aa94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	60a3      	str	r3, [r4, #8]
 800aa9c:	b9e9      	cbnz	r1, 800aada <_puts_r+0x76>
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	da2e      	bge.n	800ab00 <_puts_r+0x9c>
 800aaa2:	4622      	mov	r2, r4
 800aaa4:	210a      	movs	r1, #10
 800aaa6:	4628      	mov	r0, r5
 800aaa8:	f000 f87b 	bl	800aba2 <__swbuf_r>
 800aaac:	3001      	adds	r0, #1
 800aaae:	d007      	beq.n	800aac0 <_puts_r+0x5c>
 800aab0:	250a      	movs	r5, #10
 800aab2:	e007      	b.n	800aac4 <_puts_r+0x60>
 800aab4:	4621      	mov	r1, r4
 800aab6:	4628      	mov	r0, r5
 800aab8:	f000 f8b0 	bl	800ac1c <__swsetup_r>
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d0e7      	beq.n	800aa90 <_puts_r+0x2c>
 800aac0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800aac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aac6:	07da      	lsls	r2, r3, #31
 800aac8:	d405      	bmi.n	800aad6 <_puts_r+0x72>
 800aaca:	89a3      	ldrh	r3, [r4, #12]
 800aacc:	059b      	lsls	r3, r3, #22
 800aace:	d402      	bmi.n	800aad6 <_puts_r+0x72>
 800aad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aad2:	f000 f9c9 	bl	800ae68 <__retarget_lock_release_recursive>
 800aad6:	4628      	mov	r0, r5
 800aad8:	bd70      	pop	{r4, r5, r6, pc}
 800aada:	2b00      	cmp	r3, #0
 800aadc:	da04      	bge.n	800aae8 <_puts_r+0x84>
 800aade:	69a2      	ldr	r2, [r4, #24]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	dc06      	bgt.n	800aaf2 <_puts_r+0x8e>
 800aae4:	290a      	cmp	r1, #10
 800aae6:	d004      	beq.n	800aaf2 <_puts_r+0x8e>
 800aae8:	6823      	ldr	r3, [r4, #0]
 800aaea:	1c5a      	adds	r2, r3, #1
 800aaec:	6022      	str	r2, [r4, #0]
 800aaee:	7019      	strb	r1, [r3, #0]
 800aaf0:	e7cf      	b.n	800aa92 <_puts_r+0x2e>
 800aaf2:	4622      	mov	r2, r4
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f000 f854 	bl	800aba2 <__swbuf_r>
 800aafa:	3001      	adds	r0, #1
 800aafc:	d1c9      	bne.n	800aa92 <_puts_r+0x2e>
 800aafe:	e7df      	b.n	800aac0 <_puts_r+0x5c>
 800ab00:	6823      	ldr	r3, [r4, #0]
 800ab02:	250a      	movs	r5, #10
 800ab04:	1c5a      	adds	r2, r3, #1
 800ab06:	6022      	str	r2, [r4, #0]
 800ab08:	701d      	strb	r5, [r3, #0]
 800ab0a:	e7db      	b.n	800aac4 <_puts_r+0x60>

0800ab0c <puts>:
 800ab0c:	4b02      	ldr	r3, [pc, #8]	; (800ab18 <puts+0xc>)
 800ab0e:	4601      	mov	r1, r0
 800ab10:	6818      	ldr	r0, [r3, #0]
 800ab12:	f7ff bfa7 	b.w	800aa64 <_puts_r>
 800ab16:	bf00      	nop
 800ab18:	20000064 	.word	0x20000064

0800ab1c <__sread>:
 800ab1c:	b510      	push	{r4, lr}
 800ab1e:	460c      	mov	r4, r1
 800ab20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab24:	f000 f92c 	bl	800ad80 <_read_r>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	bfab      	itete	ge
 800ab2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ab2e:	89a3      	ldrhlt	r3, [r4, #12]
 800ab30:	181b      	addge	r3, r3, r0
 800ab32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ab36:	bfac      	ite	ge
 800ab38:	6563      	strge	r3, [r4, #84]	; 0x54
 800ab3a:	81a3      	strhlt	r3, [r4, #12]
 800ab3c:	bd10      	pop	{r4, pc}

0800ab3e <__swrite>:
 800ab3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab42:	461f      	mov	r7, r3
 800ab44:	898b      	ldrh	r3, [r1, #12]
 800ab46:	05db      	lsls	r3, r3, #23
 800ab48:	4605      	mov	r5, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	4616      	mov	r6, r2
 800ab4e:	d505      	bpl.n	800ab5c <__swrite+0x1e>
 800ab50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab54:	2302      	movs	r3, #2
 800ab56:	2200      	movs	r2, #0
 800ab58:	f000 f900 	bl	800ad5c <_lseek_r>
 800ab5c:	89a3      	ldrh	r3, [r4, #12]
 800ab5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab66:	81a3      	strh	r3, [r4, #12]
 800ab68:	4632      	mov	r2, r6
 800ab6a:	463b      	mov	r3, r7
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab72:	f000 b93b 	b.w	800adec <_write_r>

0800ab76 <__sseek>:
 800ab76:	b510      	push	{r4, lr}
 800ab78:	460c      	mov	r4, r1
 800ab7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab7e:	f000 f8ed 	bl	800ad5c <_lseek_r>
 800ab82:	1c43      	adds	r3, r0, #1
 800ab84:	89a3      	ldrh	r3, [r4, #12]
 800ab86:	bf15      	itete	ne
 800ab88:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab92:	81a3      	strheq	r3, [r4, #12]
 800ab94:	bf18      	it	ne
 800ab96:	81a3      	strhne	r3, [r4, #12]
 800ab98:	bd10      	pop	{r4, pc}

0800ab9a <__sclose>:
 800ab9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab9e:	f000 b8cd 	b.w	800ad3c <_close_r>

0800aba2 <__swbuf_r>:
 800aba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aba4:	460e      	mov	r6, r1
 800aba6:	4614      	mov	r4, r2
 800aba8:	4605      	mov	r5, r0
 800abaa:	b118      	cbz	r0, 800abb4 <__swbuf_r+0x12>
 800abac:	6a03      	ldr	r3, [r0, #32]
 800abae:	b90b      	cbnz	r3, 800abb4 <__swbuf_r+0x12>
 800abb0:	f7ff ff10 	bl	800a9d4 <__sinit>
 800abb4:	69a3      	ldr	r3, [r4, #24]
 800abb6:	60a3      	str	r3, [r4, #8]
 800abb8:	89a3      	ldrh	r3, [r4, #12]
 800abba:	071a      	lsls	r2, r3, #28
 800abbc:	d525      	bpl.n	800ac0a <__swbuf_r+0x68>
 800abbe:	6923      	ldr	r3, [r4, #16]
 800abc0:	b31b      	cbz	r3, 800ac0a <__swbuf_r+0x68>
 800abc2:	6823      	ldr	r3, [r4, #0]
 800abc4:	6922      	ldr	r2, [r4, #16]
 800abc6:	1a98      	subs	r0, r3, r2
 800abc8:	6963      	ldr	r3, [r4, #20]
 800abca:	b2f6      	uxtb	r6, r6
 800abcc:	4283      	cmp	r3, r0
 800abce:	4637      	mov	r7, r6
 800abd0:	dc04      	bgt.n	800abdc <__swbuf_r+0x3a>
 800abd2:	4621      	mov	r1, r4
 800abd4:	4628      	mov	r0, r5
 800abd6:	f000 fcfd 	bl	800b5d4 <_fflush_r>
 800abda:	b9e0      	cbnz	r0, 800ac16 <__swbuf_r+0x74>
 800abdc:	68a3      	ldr	r3, [r4, #8]
 800abde:	3b01      	subs	r3, #1
 800abe0:	60a3      	str	r3, [r4, #8]
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	6022      	str	r2, [r4, #0]
 800abe8:	701e      	strb	r6, [r3, #0]
 800abea:	6962      	ldr	r2, [r4, #20]
 800abec:	1c43      	adds	r3, r0, #1
 800abee:	429a      	cmp	r2, r3
 800abf0:	d004      	beq.n	800abfc <__swbuf_r+0x5a>
 800abf2:	89a3      	ldrh	r3, [r4, #12]
 800abf4:	07db      	lsls	r3, r3, #31
 800abf6:	d506      	bpl.n	800ac06 <__swbuf_r+0x64>
 800abf8:	2e0a      	cmp	r6, #10
 800abfa:	d104      	bne.n	800ac06 <__swbuf_r+0x64>
 800abfc:	4621      	mov	r1, r4
 800abfe:	4628      	mov	r0, r5
 800ac00:	f000 fce8 	bl	800b5d4 <_fflush_r>
 800ac04:	b938      	cbnz	r0, 800ac16 <__swbuf_r+0x74>
 800ac06:	4638      	mov	r0, r7
 800ac08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac0a:	4621      	mov	r1, r4
 800ac0c:	4628      	mov	r0, r5
 800ac0e:	f000 f805 	bl	800ac1c <__swsetup_r>
 800ac12:	2800      	cmp	r0, #0
 800ac14:	d0d5      	beq.n	800abc2 <__swbuf_r+0x20>
 800ac16:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ac1a:	e7f4      	b.n	800ac06 <__swbuf_r+0x64>

0800ac1c <__swsetup_r>:
 800ac1c:	b538      	push	{r3, r4, r5, lr}
 800ac1e:	4b2a      	ldr	r3, [pc, #168]	; (800acc8 <__swsetup_r+0xac>)
 800ac20:	4605      	mov	r5, r0
 800ac22:	6818      	ldr	r0, [r3, #0]
 800ac24:	460c      	mov	r4, r1
 800ac26:	b118      	cbz	r0, 800ac30 <__swsetup_r+0x14>
 800ac28:	6a03      	ldr	r3, [r0, #32]
 800ac2a:	b90b      	cbnz	r3, 800ac30 <__swsetup_r+0x14>
 800ac2c:	f7ff fed2 	bl	800a9d4 <__sinit>
 800ac30:	89a3      	ldrh	r3, [r4, #12]
 800ac32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac36:	0718      	lsls	r0, r3, #28
 800ac38:	d422      	bmi.n	800ac80 <__swsetup_r+0x64>
 800ac3a:	06d9      	lsls	r1, r3, #27
 800ac3c:	d407      	bmi.n	800ac4e <__swsetup_r+0x32>
 800ac3e:	2309      	movs	r3, #9
 800ac40:	602b      	str	r3, [r5, #0]
 800ac42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac46:	81a3      	strh	r3, [r4, #12]
 800ac48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac4c:	e034      	b.n	800acb8 <__swsetup_r+0x9c>
 800ac4e:	0758      	lsls	r0, r3, #29
 800ac50:	d512      	bpl.n	800ac78 <__swsetup_r+0x5c>
 800ac52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac54:	b141      	cbz	r1, 800ac68 <__swsetup_r+0x4c>
 800ac56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac5a:	4299      	cmp	r1, r3
 800ac5c:	d002      	beq.n	800ac64 <__swsetup_r+0x48>
 800ac5e:	4628      	mov	r0, r5
 800ac60:	f000 f912 	bl	800ae88 <_free_r>
 800ac64:	2300      	movs	r3, #0
 800ac66:	6363      	str	r3, [r4, #52]	; 0x34
 800ac68:	89a3      	ldrh	r3, [r4, #12]
 800ac6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac6e:	81a3      	strh	r3, [r4, #12]
 800ac70:	2300      	movs	r3, #0
 800ac72:	6063      	str	r3, [r4, #4]
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	6023      	str	r3, [r4, #0]
 800ac78:	89a3      	ldrh	r3, [r4, #12]
 800ac7a:	f043 0308 	orr.w	r3, r3, #8
 800ac7e:	81a3      	strh	r3, [r4, #12]
 800ac80:	6923      	ldr	r3, [r4, #16]
 800ac82:	b94b      	cbnz	r3, 800ac98 <__swsetup_r+0x7c>
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac8e:	d003      	beq.n	800ac98 <__swsetup_r+0x7c>
 800ac90:	4621      	mov	r1, r4
 800ac92:	4628      	mov	r0, r5
 800ac94:	f000 fcec 	bl	800b670 <__smakebuf_r>
 800ac98:	89a0      	ldrh	r0, [r4, #12]
 800ac9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac9e:	f010 0301 	ands.w	r3, r0, #1
 800aca2:	d00a      	beq.n	800acba <__swsetup_r+0x9e>
 800aca4:	2300      	movs	r3, #0
 800aca6:	60a3      	str	r3, [r4, #8]
 800aca8:	6963      	ldr	r3, [r4, #20]
 800acaa:	425b      	negs	r3, r3
 800acac:	61a3      	str	r3, [r4, #24]
 800acae:	6923      	ldr	r3, [r4, #16]
 800acb0:	b943      	cbnz	r3, 800acc4 <__swsetup_r+0xa8>
 800acb2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acb6:	d1c4      	bne.n	800ac42 <__swsetup_r+0x26>
 800acb8:	bd38      	pop	{r3, r4, r5, pc}
 800acba:	0781      	lsls	r1, r0, #30
 800acbc:	bf58      	it	pl
 800acbe:	6963      	ldrpl	r3, [r4, #20]
 800acc0:	60a3      	str	r3, [r4, #8]
 800acc2:	e7f4      	b.n	800acae <__swsetup_r+0x92>
 800acc4:	2000      	movs	r0, #0
 800acc6:	e7f7      	b.n	800acb8 <__swsetup_r+0x9c>
 800acc8:	20000064 	.word	0x20000064

0800accc <memset>:
 800accc:	4402      	add	r2, r0
 800acce:	4603      	mov	r3, r0
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d100      	bne.n	800acd6 <memset+0xa>
 800acd4:	4770      	bx	lr
 800acd6:	f803 1b01 	strb.w	r1, [r3], #1
 800acda:	e7f9      	b.n	800acd0 <memset+0x4>

0800acdc <_raise_r>:
 800acdc:	291f      	cmp	r1, #31
 800acde:	b538      	push	{r3, r4, r5, lr}
 800ace0:	4604      	mov	r4, r0
 800ace2:	460d      	mov	r5, r1
 800ace4:	d904      	bls.n	800acf0 <_raise_r+0x14>
 800ace6:	2316      	movs	r3, #22
 800ace8:	6003      	str	r3, [r0, #0]
 800acea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800acee:	bd38      	pop	{r3, r4, r5, pc}
 800acf0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800acf2:	b112      	cbz	r2, 800acfa <_raise_r+0x1e>
 800acf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800acf8:	b94b      	cbnz	r3, 800ad0e <_raise_r+0x32>
 800acfa:	4620      	mov	r0, r4
 800acfc:	f000 f864 	bl	800adc8 <_getpid_r>
 800ad00:	462a      	mov	r2, r5
 800ad02:	4601      	mov	r1, r0
 800ad04:	4620      	mov	r0, r4
 800ad06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ad0a:	f000 b84b 	b.w	800ada4 <_kill_r>
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d00a      	beq.n	800ad28 <_raise_r+0x4c>
 800ad12:	1c59      	adds	r1, r3, #1
 800ad14:	d103      	bne.n	800ad1e <_raise_r+0x42>
 800ad16:	2316      	movs	r3, #22
 800ad18:	6003      	str	r3, [r0, #0]
 800ad1a:	2001      	movs	r0, #1
 800ad1c:	e7e7      	b.n	800acee <_raise_r+0x12>
 800ad1e:	2400      	movs	r4, #0
 800ad20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ad24:	4628      	mov	r0, r5
 800ad26:	4798      	blx	r3
 800ad28:	2000      	movs	r0, #0
 800ad2a:	e7e0      	b.n	800acee <_raise_r+0x12>

0800ad2c <raise>:
 800ad2c:	4b02      	ldr	r3, [pc, #8]	; (800ad38 <raise+0xc>)
 800ad2e:	4601      	mov	r1, r0
 800ad30:	6818      	ldr	r0, [r3, #0]
 800ad32:	f7ff bfd3 	b.w	800acdc <_raise_r>
 800ad36:	bf00      	nop
 800ad38:	20000064 	.word	0x20000064

0800ad3c <_close_r>:
 800ad3c:	b538      	push	{r3, r4, r5, lr}
 800ad3e:	4d06      	ldr	r5, [pc, #24]	; (800ad58 <_close_r+0x1c>)
 800ad40:	2300      	movs	r3, #0
 800ad42:	4604      	mov	r4, r0
 800ad44:	4608      	mov	r0, r1
 800ad46:	602b      	str	r3, [r5, #0]
 800ad48:	f7fb fe37 	bl	80069ba <_close>
 800ad4c:	1c43      	adds	r3, r0, #1
 800ad4e:	d102      	bne.n	800ad56 <_close_r+0x1a>
 800ad50:	682b      	ldr	r3, [r5, #0]
 800ad52:	b103      	cbz	r3, 800ad56 <_close_r+0x1a>
 800ad54:	6023      	str	r3, [r4, #0]
 800ad56:	bd38      	pop	{r3, r4, r5, pc}
 800ad58:	20000b50 	.word	0x20000b50

0800ad5c <_lseek_r>:
 800ad5c:	b538      	push	{r3, r4, r5, lr}
 800ad5e:	4d07      	ldr	r5, [pc, #28]	; (800ad7c <_lseek_r+0x20>)
 800ad60:	4604      	mov	r4, r0
 800ad62:	4608      	mov	r0, r1
 800ad64:	4611      	mov	r1, r2
 800ad66:	2200      	movs	r2, #0
 800ad68:	602a      	str	r2, [r5, #0]
 800ad6a:	461a      	mov	r2, r3
 800ad6c:	f7fb fe4c 	bl	8006a08 <_lseek>
 800ad70:	1c43      	adds	r3, r0, #1
 800ad72:	d102      	bne.n	800ad7a <_lseek_r+0x1e>
 800ad74:	682b      	ldr	r3, [r5, #0]
 800ad76:	b103      	cbz	r3, 800ad7a <_lseek_r+0x1e>
 800ad78:	6023      	str	r3, [r4, #0]
 800ad7a:	bd38      	pop	{r3, r4, r5, pc}
 800ad7c:	20000b50 	.word	0x20000b50

0800ad80 <_read_r>:
 800ad80:	b538      	push	{r3, r4, r5, lr}
 800ad82:	4d07      	ldr	r5, [pc, #28]	; (800ada0 <_read_r+0x20>)
 800ad84:	4604      	mov	r4, r0
 800ad86:	4608      	mov	r0, r1
 800ad88:	4611      	mov	r1, r2
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	602a      	str	r2, [r5, #0]
 800ad8e:	461a      	mov	r2, r3
 800ad90:	f7fb fdda 	bl	8006948 <_read>
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	d102      	bne.n	800ad9e <_read_r+0x1e>
 800ad98:	682b      	ldr	r3, [r5, #0]
 800ad9a:	b103      	cbz	r3, 800ad9e <_read_r+0x1e>
 800ad9c:	6023      	str	r3, [r4, #0]
 800ad9e:	bd38      	pop	{r3, r4, r5, pc}
 800ada0:	20000b50 	.word	0x20000b50

0800ada4 <_kill_r>:
 800ada4:	b538      	push	{r3, r4, r5, lr}
 800ada6:	4d07      	ldr	r5, [pc, #28]	; (800adc4 <_kill_r+0x20>)
 800ada8:	2300      	movs	r3, #0
 800adaa:	4604      	mov	r4, r0
 800adac:	4608      	mov	r0, r1
 800adae:	4611      	mov	r1, r2
 800adb0:	602b      	str	r3, [r5, #0]
 800adb2:	f7fb fdaf 	bl	8006914 <_kill>
 800adb6:	1c43      	adds	r3, r0, #1
 800adb8:	d102      	bne.n	800adc0 <_kill_r+0x1c>
 800adba:	682b      	ldr	r3, [r5, #0]
 800adbc:	b103      	cbz	r3, 800adc0 <_kill_r+0x1c>
 800adbe:	6023      	str	r3, [r4, #0]
 800adc0:	bd38      	pop	{r3, r4, r5, pc}
 800adc2:	bf00      	nop
 800adc4:	20000b50 	.word	0x20000b50

0800adc8 <_getpid_r>:
 800adc8:	f7fb bd9c 	b.w	8006904 <_getpid>

0800adcc <_sbrk_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d06      	ldr	r5, [pc, #24]	; (800ade8 <_sbrk_r+0x1c>)
 800add0:	2300      	movs	r3, #0
 800add2:	4604      	mov	r4, r0
 800add4:	4608      	mov	r0, r1
 800add6:	602b      	str	r3, [r5, #0]
 800add8:	f7fb fe24 	bl	8006a24 <_sbrk>
 800addc:	1c43      	adds	r3, r0, #1
 800adde:	d102      	bne.n	800ade6 <_sbrk_r+0x1a>
 800ade0:	682b      	ldr	r3, [r5, #0]
 800ade2:	b103      	cbz	r3, 800ade6 <_sbrk_r+0x1a>
 800ade4:	6023      	str	r3, [r4, #0]
 800ade6:	bd38      	pop	{r3, r4, r5, pc}
 800ade8:	20000b50 	.word	0x20000b50

0800adec <_write_r>:
 800adec:	b538      	push	{r3, r4, r5, lr}
 800adee:	4d07      	ldr	r5, [pc, #28]	; (800ae0c <_write_r+0x20>)
 800adf0:	4604      	mov	r4, r0
 800adf2:	4608      	mov	r0, r1
 800adf4:	4611      	mov	r1, r2
 800adf6:	2200      	movs	r2, #0
 800adf8:	602a      	str	r2, [r5, #0]
 800adfa:	461a      	mov	r2, r3
 800adfc:	f7fb fdc1 	bl	8006982 <_write>
 800ae00:	1c43      	adds	r3, r0, #1
 800ae02:	d102      	bne.n	800ae0a <_write_r+0x1e>
 800ae04:	682b      	ldr	r3, [r5, #0]
 800ae06:	b103      	cbz	r3, 800ae0a <_write_r+0x1e>
 800ae08:	6023      	str	r3, [r4, #0]
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	20000b50 	.word	0x20000b50

0800ae10 <__errno>:
 800ae10:	4b01      	ldr	r3, [pc, #4]	; (800ae18 <__errno+0x8>)
 800ae12:	6818      	ldr	r0, [r3, #0]
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop
 800ae18:	20000064 	.word	0x20000064

0800ae1c <__libc_init_array>:
 800ae1c:	b570      	push	{r4, r5, r6, lr}
 800ae1e:	4d0d      	ldr	r5, [pc, #52]	; (800ae54 <__libc_init_array+0x38>)
 800ae20:	4c0d      	ldr	r4, [pc, #52]	; (800ae58 <__libc_init_array+0x3c>)
 800ae22:	1b64      	subs	r4, r4, r5
 800ae24:	10a4      	asrs	r4, r4, #2
 800ae26:	2600      	movs	r6, #0
 800ae28:	42a6      	cmp	r6, r4
 800ae2a:	d109      	bne.n	800ae40 <__libc_init_array+0x24>
 800ae2c:	4d0b      	ldr	r5, [pc, #44]	; (800ae5c <__libc_init_array+0x40>)
 800ae2e:	4c0c      	ldr	r4, [pc, #48]	; (800ae60 <__libc_init_array+0x44>)
 800ae30:	f000 fc7c 	bl	800b72c <_init>
 800ae34:	1b64      	subs	r4, r4, r5
 800ae36:	10a4      	asrs	r4, r4, #2
 800ae38:	2600      	movs	r6, #0
 800ae3a:	42a6      	cmp	r6, r4
 800ae3c:	d105      	bne.n	800ae4a <__libc_init_array+0x2e>
 800ae3e:	bd70      	pop	{r4, r5, r6, pc}
 800ae40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae44:	4798      	blx	r3
 800ae46:	3601      	adds	r6, #1
 800ae48:	e7ee      	b.n	800ae28 <__libc_init_array+0xc>
 800ae4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae4e:	4798      	blx	r3
 800ae50:	3601      	adds	r6, #1
 800ae52:	e7f2      	b.n	800ae3a <__libc_init_array+0x1e>
 800ae54:	0800bbb4 	.word	0x0800bbb4
 800ae58:	0800bbb4 	.word	0x0800bbb4
 800ae5c:	0800bbb4 	.word	0x0800bbb4
 800ae60:	0800bbbc 	.word	0x0800bbbc

0800ae64 <__retarget_lock_init_recursive>:
 800ae64:	4770      	bx	lr

0800ae66 <__retarget_lock_acquire_recursive>:
 800ae66:	4770      	bx	lr

0800ae68 <__retarget_lock_release_recursive>:
 800ae68:	4770      	bx	lr

0800ae6a <memcpy>:
 800ae6a:	440a      	add	r2, r1
 800ae6c:	4291      	cmp	r1, r2
 800ae6e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ae72:	d100      	bne.n	800ae76 <memcpy+0xc>
 800ae74:	4770      	bx	lr
 800ae76:	b510      	push	{r4, lr}
 800ae78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae80:	4291      	cmp	r1, r2
 800ae82:	d1f9      	bne.n	800ae78 <memcpy+0xe>
 800ae84:	bd10      	pop	{r4, pc}
	...

0800ae88 <_free_r>:
 800ae88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ae8a:	2900      	cmp	r1, #0
 800ae8c:	d044      	beq.n	800af18 <_free_r+0x90>
 800ae8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae92:	9001      	str	r0, [sp, #4]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	f1a1 0404 	sub.w	r4, r1, #4
 800ae9a:	bfb8      	it	lt
 800ae9c:	18e4      	addlt	r4, r4, r3
 800ae9e:	f7ff fd01 	bl	800a8a4 <__malloc_lock>
 800aea2:	4a1e      	ldr	r2, [pc, #120]	; (800af1c <_free_r+0x94>)
 800aea4:	9801      	ldr	r0, [sp, #4]
 800aea6:	6813      	ldr	r3, [r2, #0]
 800aea8:	b933      	cbnz	r3, 800aeb8 <_free_r+0x30>
 800aeaa:	6063      	str	r3, [r4, #4]
 800aeac:	6014      	str	r4, [r2, #0]
 800aeae:	b003      	add	sp, #12
 800aeb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aeb4:	f7ff bcfc 	b.w	800a8b0 <__malloc_unlock>
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	d908      	bls.n	800aece <_free_r+0x46>
 800aebc:	6825      	ldr	r5, [r4, #0]
 800aebe:	1961      	adds	r1, r4, r5
 800aec0:	428b      	cmp	r3, r1
 800aec2:	bf01      	itttt	eq
 800aec4:	6819      	ldreq	r1, [r3, #0]
 800aec6:	685b      	ldreq	r3, [r3, #4]
 800aec8:	1949      	addeq	r1, r1, r5
 800aeca:	6021      	streq	r1, [r4, #0]
 800aecc:	e7ed      	b.n	800aeaa <_free_r+0x22>
 800aece:	461a      	mov	r2, r3
 800aed0:	685b      	ldr	r3, [r3, #4]
 800aed2:	b10b      	cbz	r3, 800aed8 <_free_r+0x50>
 800aed4:	42a3      	cmp	r3, r4
 800aed6:	d9fa      	bls.n	800aece <_free_r+0x46>
 800aed8:	6811      	ldr	r1, [r2, #0]
 800aeda:	1855      	adds	r5, r2, r1
 800aedc:	42a5      	cmp	r5, r4
 800aede:	d10b      	bne.n	800aef8 <_free_r+0x70>
 800aee0:	6824      	ldr	r4, [r4, #0]
 800aee2:	4421      	add	r1, r4
 800aee4:	1854      	adds	r4, r2, r1
 800aee6:	42a3      	cmp	r3, r4
 800aee8:	6011      	str	r1, [r2, #0]
 800aeea:	d1e0      	bne.n	800aeae <_free_r+0x26>
 800aeec:	681c      	ldr	r4, [r3, #0]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	6053      	str	r3, [r2, #4]
 800aef2:	440c      	add	r4, r1
 800aef4:	6014      	str	r4, [r2, #0]
 800aef6:	e7da      	b.n	800aeae <_free_r+0x26>
 800aef8:	d902      	bls.n	800af00 <_free_r+0x78>
 800aefa:	230c      	movs	r3, #12
 800aefc:	6003      	str	r3, [r0, #0]
 800aefe:	e7d6      	b.n	800aeae <_free_r+0x26>
 800af00:	6825      	ldr	r5, [r4, #0]
 800af02:	1961      	adds	r1, r4, r5
 800af04:	428b      	cmp	r3, r1
 800af06:	bf04      	itt	eq
 800af08:	6819      	ldreq	r1, [r3, #0]
 800af0a:	685b      	ldreq	r3, [r3, #4]
 800af0c:	6063      	str	r3, [r4, #4]
 800af0e:	bf04      	itt	eq
 800af10:	1949      	addeq	r1, r1, r5
 800af12:	6021      	streq	r1, [r4, #0]
 800af14:	6054      	str	r4, [r2, #4]
 800af16:	e7ca      	b.n	800aeae <_free_r+0x26>
 800af18:	b003      	add	sp, #12
 800af1a:	bd30      	pop	{r4, r5, pc}
 800af1c:	20000a0c 	.word	0x20000a0c

0800af20 <__sfputc_r>:
 800af20:	6893      	ldr	r3, [r2, #8]
 800af22:	3b01      	subs	r3, #1
 800af24:	2b00      	cmp	r3, #0
 800af26:	b410      	push	{r4}
 800af28:	6093      	str	r3, [r2, #8]
 800af2a:	da08      	bge.n	800af3e <__sfputc_r+0x1e>
 800af2c:	6994      	ldr	r4, [r2, #24]
 800af2e:	42a3      	cmp	r3, r4
 800af30:	db01      	blt.n	800af36 <__sfputc_r+0x16>
 800af32:	290a      	cmp	r1, #10
 800af34:	d103      	bne.n	800af3e <__sfputc_r+0x1e>
 800af36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af3a:	f7ff be32 	b.w	800aba2 <__swbuf_r>
 800af3e:	6813      	ldr	r3, [r2, #0]
 800af40:	1c58      	adds	r0, r3, #1
 800af42:	6010      	str	r0, [r2, #0]
 800af44:	7019      	strb	r1, [r3, #0]
 800af46:	4608      	mov	r0, r1
 800af48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af4c:	4770      	bx	lr

0800af4e <__sfputs_r>:
 800af4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af50:	4606      	mov	r6, r0
 800af52:	460f      	mov	r7, r1
 800af54:	4614      	mov	r4, r2
 800af56:	18d5      	adds	r5, r2, r3
 800af58:	42ac      	cmp	r4, r5
 800af5a:	d101      	bne.n	800af60 <__sfputs_r+0x12>
 800af5c:	2000      	movs	r0, #0
 800af5e:	e007      	b.n	800af70 <__sfputs_r+0x22>
 800af60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af64:	463a      	mov	r2, r7
 800af66:	4630      	mov	r0, r6
 800af68:	f7ff ffda 	bl	800af20 <__sfputc_r>
 800af6c:	1c43      	adds	r3, r0, #1
 800af6e:	d1f3      	bne.n	800af58 <__sfputs_r+0xa>
 800af70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800af74 <_vfiprintf_r>:
 800af74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af78:	460d      	mov	r5, r1
 800af7a:	b09d      	sub	sp, #116	; 0x74
 800af7c:	4614      	mov	r4, r2
 800af7e:	4698      	mov	r8, r3
 800af80:	4606      	mov	r6, r0
 800af82:	b118      	cbz	r0, 800af8c <_vfiprintf_r+0x18>
 800af84:	6a03      	ldr	r3, [r0, #32]
 800af86:	b90b      	cbnz	r3, 800af8c <_vfiprintf_r+0x18>
 800af88:	f7ff fd24 	bl	800a9d4 <__sinit>
 800af8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800af8e:	07d9      	lsls	r1, r3, #31
 800af90:	d405      	bmi.n	800af9e <_vfiprintf_r+0x2a>
 800af92:	89ab      	ldrh	r3, [r5, #12]
 800af94:	059a      	lsls	r2, r3, #22
 800af96:	d402      	bmi.n	800af9e <_vfiprintf_r+0x2a>
 800af98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800af9a:	f7ff ff64 	bl	800ae66 <__retarget_lock_acquire_recursive>
 800af9e:	89ab      	ldrh	r3, [r5, #12]
 800afa0:	071b      	lsls	r3, r3, #28
 800afa2:	d501      	bpl.n	800afa8 <_vfiprintf_r+0x34>
 800afa4:	692b      	ldr	r3, [r5, #16]
 800afa6:	b99b      	cbnz	r3, 800afd0 <_vfiprintf_r+0x5c>
 800afa8:	4629      	mov	r1, r5
 800afaa:	4630      	mov	r0, r6
 800afac:	f7ff fe36 	bl	800ac1c <__swsetup_r>
 800afb0:	b170      	cbz	r0, 800afd0 <_vfiprintf_r+0x5c>
 800afb2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afb4:	07dc      	lsls	r4, r3, #31
 800afb6:	d504      	bpl.n	800afc2 <_vfiprintf_r+0x4e>
 800afb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afbc:	b01d      	add	sp, #116	; 0x74
 800afbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc2:	89ab      	ldrh	r3, [r5, #12]
 800afc4:	0598      	lsls	r0, r3, #22
 800afc6:	d4f7      	bmi.n	800afb8 <_vfiprintf_r+0x44>
 800afc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afca:	f7ff ff4d 	bl	800ae68 <__retarget_lock_release_recursive>
 800afce:	e7f3      	b.n	800afb8 <_vfiprintf_r+0x44>
 800afd0:	2300      	movs	r3, #0
 800afd2:	9309      	str	r3, [sp, #36]	; 0x24
 800afd4:	2320      	movs	r3, #32
 800afd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800afda:	f8cd 800c 	str.w	r8, [sp, #12]
 800afde:	2330      	movs	r3, #48	; 0x30
 800afe0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b194 <_vfiprintf_r+0x220>
 800afe4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800afe8:	f04f 0901 	mov.w	r9, #1
 800afec:	4623      	mov	r3, r4
 800afee:	469a      	mov	sl, r3
 800aff0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aff4:	b10a      	cbz	r2, 800affa <_vfiprintf_r+0x86>
 800aff6:	2a25      	cmp	r2, #37	; 0x25
 800aff8:	d1f9      	bne.n	800afee <_vfiprintf_r+0x7a>
 800affa:	ebba 0b04 	subs.w	fp, sl, r4
 800affe:	d00b      	beq.n	800b018 <_vfiprintf_r+0xa4>
 800b000:	465b      	mov	r3, fp
 800b002:	4622      	mov	r2, r4
 800b004:	4629      	mov	r1, r5
 800b006:	4630      	mov	r0, r6
 800b008:	f7ff ffa1 	bl	800af4e <__sfputs_r>
 800b00c:	3001      	adds	r0, #1
 800b00e:	f000 80a9 	beq.w	800b164 <_vfiprintf_r+0x1f0>
 800b012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b014:	445a      	add	r2, fp
 800b016:	9209      	str	r2, [sp, #36]	; 0x24
 800b018:	f89a 3000 	ldrb.w	r3, [sl]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 80a1 	beq.w	800b164 <_vfiprintf_r+0x1f0>
 800b022:	2300      	movs	r3, #0
 800b024:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b028:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b02c:	f10a 0a01 	add.w	sl, sl, #1
 800b030:	9304      	str	r3, [sp, #16]
 800b032:	9307      	str	r3, [sp, #28]
 800b034:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b038:	931a      	str	r3, [sp, #104]	; 0x68
 800b03a:	4654      	mov	r4, sl
 800b03c:	2205      	movs	r2, #5
 800b03e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b042:	4854      	ldr	r0, [pc, #336]	; (800b194 <_vfiprintf_r+0x220>)
 800b044:	f7f5 f8ec 	bl	8000220 <memchr>
 800b048:	9a04      	ldr	r2, [sp, #16]
 800b04a:	b9d8      	cbnz	r0, 800b084 <_vfiprintf_r+0x110>
 800b04c:	06d1      	lsls	r1, r2, #27
 800b04e:	bf44      	itt	mi
 800b050:	2320      	movmi	r3, #32
 800b052:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b056:	0713      	lsls	r3, r2, #28
 800b058:	bf44      	itt	mi
 800b05a:	232b      	movmi	r3, #43	; 0x2b
 800b05c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b060:	f89a 3000 	ldrb.w	r3, [sl]
 800b064:	2b2a      	cmp	r3, #42	; 0x2a
 800b066:	d015      	beq.n	800b094 <_vfiprintf_r+0x120>
 800b068:	9a07      	ldr	r2, [sp, #28]
 800b06a:	4654      	mov	r4, sl
 800b06c:	2000      	movs	r0, #0
 800b06e:	f04f 0c0a 	mov.w	ip, #10
 800b072:	4621      	mov	r1, r4
 800b074:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b078:	3b30      	subs	r3, #48	; 0x30
 800b07a:	2b09      	cmp	r3, #9
 800b07c:	d94d      	bls.n	800b11a <_vfiprintf_r+0x1a6>
 800b07e:	b1b0      	cbz	r0, 800b0ae <_vfiprintf_r+0x13a>
 800b080:	9207      	str	r2, [sp, #28]
 800b082:	e014      	b.n	800b0ae <_vfiprintf_r+0x13a>
 800b084:	eba0 0308 	sub.w	r3, r0, r8
 800b088:	fa09 f303 	lsl.w	r3, r9, r3
 800b08c:	4313      	orrs	r3, r2
 800b08e:	9304      	str	r3, [sp, #16]
 800b090:	46a2      	mov	sl, r4
 800b092:	e7d2      	b.n	800b03a <_vfiprintf_r+0xc6>
 800b094:	9b03      	ldr	r3, [sp, #12]
 800b096:	1d19      	adds	r1, r3, #4
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	9103      	str	r1, [sp, #12]
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	bfbb      	ittet	lt
 800b0a0:	425b      	neglt	r3, r3
 800b0a2:	f042 0202 	orrlt.w	r2, r2, #2
 800b0a6:	9307      	strge	r3, [sp, #28]
 800b0a8:	9307      	strlt	r3, [sp, #28]
 800b0aa:	bfb8      	it	lt
 800b0ac:	9204      	strlt	r2, [sp, #16]
 800b0ae:	7823      	ldrb	r3, [r4, #0]
 800b0b0:	2b2e      	cmp	r3, #46	; 0x2e
 800b0b2:	d10c      	bne.n	800b0ce <_vfiprintf_r+0x15a>
 800b0b4:	7863      	ldrb	r3, [r4, #1]
 800b0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800b0b8:	d134      	bne.n	800b124 <_vfiprintf_r+0x1b0>
 800b0ba:	9b03      	ldr	r3, [sp, #12]
 800b0bc:	1d1a      	adds	r2, r3, #4
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	9203      	str	r2, [sp, #12]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	bfb8      	it	lt
 800b0c6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b0ca:	3402      	adds	r4, #2
 800b0cc:	9305      	str	r3, [sp, #20]
 800b0ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b1a4 <_vfiprintf_r+0x230>
 800b0d2:	7821      	ldrb	r1, [r4, #0]
 800b0d4:	2203      	movs	r2, #3
 800b0d6:	4650      	mov	r0, sl
 800b0d8:	f7f5 f8a2 	bl	8000220 <memchr>
 800b0dc:	b138      	cbz	r0, 800b0ee <_vfiprintf_r+0x17a>
 800b0de:	9b04      	ldr	r3, [sp, #16]
 800b0e0:	eba0 000a 	sub.w	r0, r0, sl
 800b0e4:	2240      	movs	r2, #64	; 0x40
 800b0e6:	4082      	lsls	r2, r0
 800b0e8:	4313      	orrs	r3, r2
 800b0ea:	3401      	adds	r4, #1
 800b0ec:	9304      	str	r3, [sp, #16]
 800b0ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0f2:	4829      	ldr	r0, [pc, #164]	; (800b198 <_vfiprintf_r+0x224>)
 800b0f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b0f8:	2206      	movs	r2, #6
 800b0fa:	f7f5 f891 	bl	8000220 <memchr>
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d03f      	beq.n	800b182 <_vfiprintf_r+0x20e>
 800b102:	4b26      	ldr	r3, [pc, #152]	; (800b19c <_vfiprintf_r+0x228>)
 800b104:	bb1b      	cbnz	r3, 800b14e <_vfiprintf_r+0x1da>
 800b106:	9b03      	ldr	r3, [sp, #12]
 800b108:	3307      	adds	r3, #7
 800b10a:	f023 0307 	bic.w	r3, r3, #7
 800b10e:	3308      	adds	r3, #8
 800b110:	9303      	str	r3, [sp, #12]
 800b112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b114:	443b      	add	r3, r7
 800b116:	9309      	str	r3, [sp, #36]	; 0x24
 800b118:	e768      	b.n	800afec <_vfiprintf_r+0x78>
 800b11a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b11e:	460c      	mov	r4, r1
 800b120:	2001      	movs	r0, #1
 800b122:	e7a6      	b.n	800b072 <_vfiprintf_r+0xfe>
 800b124:	2300      	movs	r3, #0
 800b126:	3401      	adds	r4, #1
 800b128:	9305      	str	r3, [sp, #20]
 800b12a:	4619      	mov	r1, r3
 800b12c:	f04f 0c0a 	mov.w	ip, #10
 800b130:	4620      	mov	r0, r4
 800b132:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b136:	3a30      	subs	r2, #48	; 0x30
 800b138:	2a09      	cmp	r2, #9
 800b13a:	d903      	bls.n	800b144 <_vfiprintf_r+0x1d0>
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d0c6      	beq.n	800b0ce <_vfiprintf_r+0x15a>
 800b140:	9105      	str	r1, [sp, #20]
 800b142:	e7c4      	b.n	800b0ce <_vfiprintf_r+0x15a>
 800b144:	fb0c 2101 	mla	r1, ip, r1, r2
 800b148:	4604      	mov	r4, r0
 800b14a:	2301      	movs	r3, #1
 800b14c:	e7f0      	b.n	800b130 <_vfiprintf_r+0x1bc>
 800b14e:	ab03      	add	r3, sp, #12
 800b150:	9300      	str	r3, [sp, #0]
 800b152:	462a      	mov	r2, r5
 800b154:	4b12      	ldr	r3, [pc, #72]	; (800b1a0 <_vfiprintf_r+0x22c>)
 800b156:	a904      	add	r1, sp, #16
 800b158:	4630      	mov	r0, r6
 800b15a:	f3af 8000 	nop.w
 800b15e:	4607      	mov	r7, r0
 800b160:	1c78      	adds	r0, r7, #1
 800b162:	d1d6      	bne.n	800b112 <_vfiprintf_r+0x19e>
 800b164:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b166:	07d9      	lsls	r1, r3, #31
 800b168:	d405      	bmi.n	800b176 <_vfiprintf_r+0x202>
 800b16a:	89ab      	ldrh	r3, [r5, #12]
 800b16c:	059a      	lsls	r2, r3, #22
 800b16e:	d402      	bmi.n	800b176 <_vfiprintf_r+0x202>
 800b170:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b172:	f7ff fe79 	bl	800ae68 <__retarget_lock_release_recursive>
 800b176:	89ab      	ldrh	r3, [r5, #12]
 800b178:	065b      	lsls	r3, r3, #25
 800b17a:	f53f af1d 	bmi.w	800afb8 <_vfiprintf_r+0x44>
 800b17e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b180:	e71c      	b.n	800afbc <_vfiprintf_r+0x48>
 800b182:	ab03      	add	r3, sp, #12
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	462a      	mov	r2, r5
 800b188:	4b05      	ldr	r3, [pc, #20]	; (800b1a0 <_vfiprintf_r+0x22c>)
 800b18a:	a904      	add	r1, sp, #16
 800b18c:	4630      	mov	r0, r6
 800b18e:	f000 f879 	bl	800b284 <_printf_i>
 800b192:	e7e4      	b.n	800b15e <_vfiprintf_r+0x1ea>
 800b194:	0800bb7e 	.word	0x0800bb7e
 800b198:	0800bb88 	.word	0x0800bb88
 800b19c:	00000000 	.word	0x00000000
 800b1a0:	0800af4f 	.word	0x0800af4f
 800b1a4:	0800bb84 	.word	0x0800bb84

0800b1a8 <_printf_common>:
 800b1a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1ac:	4616      	mov	r6, r2
 800b1ae:	4699      	mov	r9, r3
 800b1b0:	688a      	ldr	r2, [r1, #8]
 800b1b2:	690b      	ldr	r3, [r1, #16]
 800b1b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	bfb8      	it	lt
 800b1bc:	4613      	movlt	r3, r2
 800b1be:	6033      	str	r3, [r6, #0]
 800b1c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b1c4:	4607      	mov	r7, r0
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	b10a      	cbz	r2, 800b1ce <_printf_common+0x26>
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	6033      	str	r3, [r6, #0]
 800b1ce:	6823      	ldr	r3, [r4, #0]
 800b1d0:	0699      	lsls	r1, r3, #26
 800b1d2:	bf42      	ittt	mi
 800b1d4:	6833      	ldrmi	r3, [r6, #0]
 800b1d6:	3302      	addmi	r3, #2
 800b1d8:	6033      	strmi	r3, [r6, #0]
 800b1da:	6825      	ldr	r5, [r4, #0]
 800b1dc:	f015 0506 	ands.w	r5, r5, #6
 800b1e0:	d106      	bne.n	800b1f0 <_printf_common+0x48>
 800b1e2:	f104 0a19 	add.w	sl, r4, #25
 800b1e6:	68e3      	ldr	r3, [r4, #12]
 800b1e8:	6832      	ldr	r2, [r6, #0]
 800b1ea:	1a9b      	subs	r3, r3, r2
 800b1ec:	42ab      	cmp	r3, r5
 800b1ee:	dc26      	bgt.n	800b23e <_printf_common+0x96>
 800b1f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b1f4:	1e13      	subs	r3, r2, #0
 800b1f6:	6822      	ldr	r2, [r4, #0]
 800b1f8:	bf18      	it	ne
 800b1fa:	2301      	movne	r3, #1
 800b1fc:	0692      	lsls	r2, r2, #26
 800b1fe:	d42b      	bmi.n	800b258 <_printf_common+0xb0>
 800b200:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b204:	4649      	mov	r1, r9
 800b206:	4638      	mov	r0, r7
 800b208:	47c0      	blx	r8
 800b20a:	3001      	adds	r0, #1
 800b20c:	d01e      	beq.n	800b24c <_printf_common+0xa4>
 800b20e:	6823      	ldr	r3, [r4, #0]
 800b210:	6922      	ldr	r2, [r4, #16]
 800b212:	f003 0306 	and.w	r3, r3, #6
 800b216:	2b04      	cmp	r3, #4
 800b218:	bf02      	ittt	eq
 800b21a:	68e5      	ldreq	r5, [r4, #12]
 800b21c:	6833      	ldreq	r3, [r6, #0]
 800b21e:	1aed      	subeq	r5, r5, r3
 800b220:	68a3      	ldr	r3, [r4, #8]
 800b222:	bf0c      	ite	eq
 800b224:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b228:	2500      	movne	r5, #0
 800b22a:	4293      	cmp	r3, r2
 800b22c:	bfc4      	itt	gt
 800b22e:	1a9b      	subgt	r3, r3, r2
 800b230:	18ed      	addgt	r5, r5, r3
 800b232:	2600      	movs	r6, #0
 800b234:	341a      	adds	r4, #26
 800b236:	42b5      	cmp	r5, r6
 800b238:	d11a      	bne.n	800b270 <_printf_common+0xc8>
 800b23a:	2000      	movs	r0, #0
 800b23c:	e008      	b.n	800b250 <_printf_common+0xa8>
 800b23e:	2301      	movs	r3, #1
 800b240:	4652      	mov	r2, sl
 800b242:	4649      	mov	r1, r9
 800b244:	4638      	mov	r0, r7
 800b246:	47c0      	blx	r8
 800b248:	3001      	adds	r0, #1
 800b24a:	d103      	bne.n	800b254 <_printf_common+0xac>
 800b24c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b254:	3501      	adds	r5, #1
 800b256:	e7c6      	b.n	800b1e6 <_printf_common+0x3e>
 800b258:	18e1      	adds	r1, r4, r3
 800b25a:	1c5a      	adds	r2, r3, #1
 800b25c:	2030      	movs	r0, #48	; 0x30
 800b25e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b262:	4422      	add	r2, r4
 800b264:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b268:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b26c:	3302      	adds	r3, #2
 800b26e:	e7c7      	b.n	800b200 <_printf_common+0x58>
 800b270:	2301      	movs	r3, #1
 800b272:	4622      	mov	r2, r4
 800b274:	4649      	mov	r1, r9
 800b276:	4638      	mov	r0, r7
 800b278:	47c0      	blx	r8
 800b27a:	3001      	adds	r0, #1
 800b27c:	d0e6      	beq.n	800b24c <_printf_common+0xa4>
 800b27e:	3601      	adds	r6, #1
 800b280:	e7d9      	b.n	800b236 <_printf_common+0x8e>
	...

0800b284 <_printf_i>:
 800b284:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b288:	7e0f      	ldrb	r7, [r1, #24]
 800b28a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b28c:	2f78      	cmp	r7, #120	; 0x78
 800b28e:	4691      	mov	r9, r2
 800b290:	4680      	mov	r8, r0
 800b292:	460c      	mov	r4, r1
 800b294:	469a      	mov	sl, r3
 800b296:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b29a:	d807      	bhi.n	800b2ac <_printf_i+0x28>
 800b29c:	2f62      	cmp	r7, #98	; 0x62
 800b29e:	d80a      	bhi.n	800b2b6 <_printf_i+0x32>
 800b2a0:	2f00      	cmp	r7, #0
 800b2a2:	f000 80d4 	beq.w	800b44e <_printf_i+0x1ca>
 800b2a6:	2f58      	cmp	r7, #88	; 0x58
 800b2a8:	f000 80c0 	beq.w	800b42c <_printf_i+0x1a8>
 800b2ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b2b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b2b4:	e03a      	b.n	800b32c <_printf_i+0xa8>
 800b2b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b2ba:	2b15      	cmp	r3, #21
 800b2bc:	d8f6      	bhi.n	800b2ac <_printf_i+0x28>
 800b2be:	a101      	add	r1, pc, #4	; (adr r1, 800b2c4 <_printf_i+0x40>)
 800b2c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b2c4:	0800b31d 	.word	0x0800b31d
 800b2c8:	0800b331 	.word	0x0800b331
 800b2cc:	0800b2ad 	.word	0x0800b2ad
 800b2d0:	0800b2ad 	.word	0x0800b2ad
 800b2d4:	0800b2ad 	.word	0x0800b2ad
 800b2d8:	0800b2ad 	.word	0x0800b2ad
 800b2dc:	0800b331 	.word	0x0800b331
 800b2e0:	0800b2ad 	.word	0x0800b2ad
 800b2e4:	0800b2ad 	.word	0x0800b2ad
 800b2e8:	0800b2ad 	.word	0x0800b2ad
 800b2ec:	0800b2ad 	.word	0x0800b2ad
 800b2f0:	0800b435 	.word	0x0800b435
 800b2f4:	0800b35d 	.word	0x0800b35d
 800b2f8:	0800b3ef 	.word	0x0800b3ef
 800b2fc:	0800b2ad 	.word	0x0800b2ad
 800b300:	0800b2ad 	.word	0x0800b2ad
 800b304:	0800b457 	.word	0x0800b457
 800b308:	0800b2ad 	.word	0x0800b2ad
 800b30c:	0800b35d 	.word	0x0800b35d
 800b310:	0800b2ad 	.word	0x0800b2ad
 800b314:	0800b2ad 	.word	0x0800b2ad
 800b318:	0800b3f7 	.word	0x0800b3f7
 800b31c:	682b      	ldr	r3, [r5, #0]
 800b31e:	1d1a      	adds	r2, r3, #4
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	602a      	str	r2, [r5, #0]
 800b324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b32c:	2301      	movs	r3, #1
 800b32e:	e09f      	b.n	800b470 <_printf_i+0x1ec>
 800b330:	6820      	ldr	r0, [r4, #0]
 800b332:	682b      	ldr	r3, [r5, #0]
 800b334:	0607      	lsls	r7, r0, #24
 800b336:	f103 0104 	add.w	r1, r3, #4
 800b33a:	6029      	str	r1, [r5, #0]
 800b33c:	d501      	bpl.n	800b342 <_printf_i+0xbe>
 800b33e:	681e      	ldr	r6, [r3, #0]
 800b340:	e003      	b.n	800b34a <_printf_i+0xc6>
 800b342:	0646      	lsls	r6, r0, #25
 800b344:	d5fb      	bpl.n	800b33e <_printf_i+0xba>
 800b346:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b34a:	2e00      	cmp	r6, #0
 800b34c:	da03      	bge.n	800b356 <_printf_i+0xd2>
 800b34e:	232d      	movs	r3, #45	; 0x2d
 800b350:	4276      	negs	r6, r6
 800b352:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b356:	485a      	ldr	r0, [pc, #360]	; (800b4c0 <_printf_i+0x23c>)
 800b358:	230a      	movs	r3, #10
 800b35a:	e012      	b.n	800b382 <_printf_i+0xfe>
 800b35c:	682b      	ldr	r3, [r5, #0]
 800b35e:	6820      	ldr	r0, [r4, #0]
 800b360:	1d19      	adds	r1, r3, #4
 800b362:	6029      	str	r1, [r5, #0]
 800b364:	0605      	lsls	r5, r0, #24
 800b366:	d501      	bpl.n	800b36c <_printf_i+0xe8>
 800b368:	681e      	ldr	r6, [r3, #0]
 800b36a:	e002      	b.n	800b372 <_printf_i+0xee>
 800b36c:	0641      	lsls	r1, r0, #25
 800b36e:	d5fb      	bpl.n	800b368 <_printf_i+0xe4>
 800b370:	881e      	ldrh	r6, [r3, #0]
 800b372:	4853      	ldr	r0, [pc, #332]	; (800b4c0 <_printf_i+0x23c>)
 800b374:	2f6f      	cmp	r7, #111	; 0x6f
 800b376:	bf0c      	ite	eq
 800b378:	2308      	moveq	r3, #8
 800b37a:	230a      	movne	r3, #10
 800b37c:	2100      	movs	r1, #0
 800b37e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b382:	6865      	ldr	r5, [r4, #4]
 800b384:	60a5      	str	r5, [r4, #8]
 800b386:	2d00      	cmp	r5, #0
 800b388:	bfa2      	ittt	ge
 800b38a:	6821      	ldrge	r1, [r4, #0]
 800b38c:	f021 0104 	bicge.w	r1, r1, #4
 800b390:	6021      	strge	r1, [r4, #0]
 800b392:	b90e      	cbnz	r6, 800b398 <_printf_i+0x114>
 800b394:	2d00      	cmp	r5, #0
 800b396:	d04b      	beq.n	800b430 <_printf_i+0x1ac>
 800b398:	4615      	mov	r5, r2
 800b39a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b39e:	fb03 6711 	mls	r7, r3, r1, r6
 800b3a2:	5dc7      	ldrb	r7, [r0, r7]
 800b3a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b3a8:	4637      	mov	r7, r6
 800b3aa:	42bb      	cmp	r3, r7
 800b3ac:	460e      	mov	r6, r1
 800b3ae:	d9f4      	bls.n	800b39a <_printf_i+0x116>
 800b3b0:	2b08      	cmp	r3, #8
 800b3b2:	d10b      	bne.n	800b3cc <_printf_i+0x148>
 800b3b4:	6823      	ldr	r3, [r4, #0]
 800b3b6:	07de      	lsls	r6, r3, #31
 800b3b8:	d508      	bpl.n	800b3cc <_printf_i+0x148>
 800b3ba:	6923      	ldr	r3, [r4, #16]
 800b3bc:	6861      	ldr	r1, [r4, #4]
 800b3be:	4299      	cmp	r1, r3
 800b3c0:	bfde      	ittt	le
 800b3c2:	2330      	movle	r3, #48	; 0x30
 800b3c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b3c8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b3cc:	1b52      	subs	r2, r2, r5
 800b3ce:	6122      	str	r2, [r4, #16]
 800b3d0:	f8cd a000 	str.w	sl, [sp]
 800b3d4:	464b      	mov	r3, r9
 800b3d6:	aa03      	add	r2, sp, #12
 800b3d8:	4621      	mov	r1, r4
 800b3da:	4640      	mov	r0, r8
 800b3dc:	f7ff fee4 	bl	800b1a8 <_printf_common>
 800b3e0:	3001      	adds	r0, #1
 800b3e2:	d14a      	bne.n	800b47a <_printf_i+0x1f6>
 800b3e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b3e8:	b004      	add	sp, #16
 800b3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ee:	6823      	ldr	r3, [r4, #0]
 800b3f0:	f043 0320 	orr.w	r3, r3, #32
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	4833      	ldr	r0, [pc, #204]	; (800b4c4 <_printf_i+0x240>)
 800b3f8:	2778      	movs	r7, #120	; 0x78
 800b3fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b3fe:	6823      	ldr	r3, [r4, #0]
 800b400:	6829      	ldr	r1, [r5, #0]
 800b402:	061f      	lsls	r7, r3, #24
 800b404:	f851 6b04 	ldr.w	r6, [r1], #4
 800b408:	d402      	bmi.n	800b410 <_printf_i+0x18c>
 800b40a:	065f      	lsls	r7, r3, #25
 800b40c:	bf48      	it	mi
 800b40e:	b2b6      	uxthmi	r6, r6
 800b410:	07df      	lsls	r7, r3, #31
 800b412:	bf48      	it	mi
 800b414:	f043 0320 	orrmi.w	r3, r3, #32
 800b418:	6029      	str	r1, [r5, #0]
 800b41a:	bf48      	it	mi
 800b41c:	6023      	strmi	r3, [r4, #0]
 800b41e:	b91e      	cbnz	r6, 800b428 <_printf_i+0x1a4>
 800b420:	6823      	ldr	r3, [r4, #0]
 800b422:	f023 0320 	bic.w	r3, r3, #32
 800b426:	6023      	str	r3, [r4, #0]
 800b428:	2310      	movs	r3, #16
 800b42a:	e7a7      	b.n	800b37c <_printf_i+0xf8>
 800b42c:	4824      	ldr	r0, [pc, #144]	; (800b4c0 <_printf_i+0x23c>)
 800b42e:	e7e4      	b.n	800b3fa <_printf_i+0x176>
 800b430:	4615      	mov	r5, r2
 800b432:	e7bd      	b.n	800b3b0 <_printf_i+0x12c>
 800b434:	682b      	ldr	r3, [r5, #0]
 800b436:	6826      	ldr	r6, [r4, #0]
 800b438:	6961      	ldr	r1, [r4, #20]
 800b43a:	1d18      	adds	r0, r3, #4
 800b43c:	6028      	str	r0, [r5, #0]
 800b43e:	0635      	lsls	r5, r6, #24
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	d501      	bpl.n	800b448 <_printf_i+0x1c4>
 800b444:	6019      	str	r1, [r3, #0]
 800b446:	e002      	b.n	800b44e <_printf_i+0x1ca>
 800b448:	0670      	lsls	r0, r6, #25
 800b44a:	d5fb      	bpl.n	800b444 <_printf_i+0x1c0>
 800b44c:	8019      	strh	r1, [r3, #0]
 800b44e:	2300      	movs	r3, #0
 800b450:	6123      	str	r3, [r4, #16]
 800b452:	4615      	mov	r5, r2
 800b454:	e7bc      	b.n	800b3d0 <_printf_i+0x14c>
 800b456:	682b      	ldr	r3, [r5, #0]
 800b458:	1d1a      	adds	r2, r3, #4
 800b45a:	602a      	str	r2, [r5, #0]
 800b45c:	681d      	ldr	r5, [r3, #0]
 800b45e:	6862      	ldr	r2, [r4, #4]
 800b460:	2100      	movs	r1, #0
 800b462:	4628      	mov	r0, r5
 800b464:	f7f4 fedc 	bl	8000220 <memchr>
 800b468:	b108      	cbz	r0, 800b46e <_printf_i+0x1ea>
 800b46a:	1b40      	subs	r0, r0, r5
 800b46c:	6060      	str	r0, [r4, #4]
 800b46e:	6863      	ldr	r3, [r4, #4]
 800b470:	6123      	str	r3, [r4, #16]
 800b472:	2300      	movs	r3, #0
 800b474:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b478:	e7aa      	b.n	800b3d0 <_printf_i+0x14c>
 800b47a:	6923      	ldr	r3, [r4, #16]
 800b47c:	462a      	mov	r2, r5
 800b47e:	4649      	mov	r1, r9
 800b480:	4640      	mov	r0, r8
 800b482:	47d0      	blx	sl
 800b484:	3001      	adds	r0, #1
 800b486:	d0ad      	beq.n	800b3e4 <_printf_i+0x160>
 800b488:	6823      	ldr	r3, [r4, #0]
 800b48a:	079b      	lsls	r3, r3, #30
 800b48c:	d413      	bmi.n	800b4b6 <_printf_i+0x232>
 800b48e:	68e0      	ldr	r0, [r4, #12]
 800b490:	9b03      	ldr	r3, [sp, #12]
 800b492:	4298      	cmp	r0, r3
 800b494:	bfb8      	it	lt
 800b496:	4618      	movlt	r0, r3
 800b498:	e7a6      	b.n	800b3e8 <_printf_i+0x164>
 800b49a:	2301      	movs	r3, #1
 800b49c:	4632      	mov	r2, r6
 800b49e:	4649      	mov	r1, r9
 800b4a0:	4640      	mov	r0, r8
 800b4a2:	47d0      	blx	sl
 800b4a4:	3001      	adds	r0, #1
 800b4a6:	d09d      	beq.n	800b3e4 <_printf_i+0x160>
 800b4a8:	3501      	adds	r5, #1
 800b4aa:	68e3      	ldr	r3, [r4, #12]
 800b4ac:	9903      	ldr	r1, [sp, #12]
 800b4ae:	1a5b      	subs	r3, r3, r1
 800b4b0:	42ab      	cmp	r3, r5
 800b4b2:	dcf2      	bgt.n	800b49a <_printf_i+0x216>
 800b4b4:	e7eb      	b.n	800b48e <_printf_i+0x20a>
 800b4b6:	2500      	movs	r5, #0
 800b4b8:	f104 0619 	add.w	r6, r4, #25
 800b4bc:	e7f5      	b.n	800b4aa <_printf_i+0x226>
 800b4be:	bf00      	nop
 800b4c0:	0800bb8f 	.word	0x0800bb8f
 800b4c4:	0800bba0 	.word	0x0800bba0

0800b4c8 <__sflush_r>:
 800b4c8:	898a      	ldrh	r2, [r1, #12]
 800b4ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ce:	4605      	mov	r5, r0
 800b4d0:	0710      	lsls	r0, r2, #28
 800b4d2:	460c      	mov	r4, r1
 800b4d4:	d458      	bmi.n	800b588 <__sflush_r+0xc0>
 800b4d6:	684b      	ldr	r3, [r1, #4]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	dc05      	bgt.n	800b4e8 <__sflush_r+0x20>
 800b4dc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	dc02      	bgt.n	800b4e8 <__sflush_r+0x20>
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b4ea:	2e00      	cmp	r6, #0
 800b4ec:	d0f9      	beq.n	800b4e2 <__sflush_r+0x1a>
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b4f4:	682f      	ldr	r7, [r5, #0]
 800b4f6:	6a21      	ldr	r1, [r4, #32]
 800b4f8:	602b      	str	r3, [r5, #0]
 800b4fa:	d032      	beq.n	800b562 <__sflush_r+0x9a>
 800b4fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b4fe:	89a3      	ldrh	r3, [r4, #12]
 800b500:	075a      	lsls	r2, r3, #29
 800b502:	d505      	bpl.n	800b510 <__sflush_r+0x48>
 800b504:	6863      	ldr	r3, [r4, #4]
 800b506:	1ac0      	subs	r0, r0, r3
 800b508:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b50a:	b10b      	cbz	r3, 800b510 <__sflush_r+0x48>
 800b50c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b50e:	1ac0      	subs	r0, r0, r3
 800b510:	2300      	movs	r3, #0
 800b512:	4602      	mov	r2, r0
 800b514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b516:	6a21      	ldr	r1, [r4, #32]
 800b518:	4628      	mov	r0, r5
 800b51a:	47b0      	blx	r6
 800b51c:	1c43      	adds	r3, r0, #1
 800b51e:	89a3      	ldrh	r3, [r4, #12]
 800b520:	d106      	bne.n	800b530 <__sflush_r+0x68>
 800b522:	6829      	ldr	r1, [r5, #0]
 800b524:	291d      	cmp	r1, #29
 800b526:	d82b      	bhi.n	800b580 <__sflush_r+0xb8>
 800b528:	4a29      	ldr	r2, [pc, #164]	; (800b5d0 <__sflush_r+0x108>)
 800b52a:	410a      	asrs	r2, r1
 800b52c:	07d6      	lsls	r6, r2, #31
 800b52e:	d427      	bmi.n	800b580 <__sflush_r+0xb8>
 800b530:	2200      	movs	r2, #0
 800b532:	6062      	str	r2, [r4, #4]
 800b534:	04d9      	lsls	r1, r3, #19
 800b536:	6922      	ldr	r2, [r4, #16]
 800b538:	6022      	str	r2, [r4, #0]
 800b53a:	d504      	bpl.n	800b546 <__sflush_r+0x7e>
 800b53c:	1c42      	adds	r2, r0, #1
 800b53e:	d101      	bne.n	800b544 <__sflush_r+0x7c>
 800b540:	682b      	ldr	r3, [r5, #0]
 800b542:	b903      	cbnz	r3, 800b546 <__sflush_r+0x7e>
 800b544:	6560      	str	r0, [r4, #84]	; 0x54
 800b546:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b548:	602f      	str	r7, [r5, #0]
 800b54a:	2900      	cmp	r1, #0
 800b54c:	d0c9      	beq.n	800b4e2 <__sflush_r+0x1a>
 800b54e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b552:	4299      	cmp	r1, r3
 800b554:	d002      	beq.n	800b55c <__sflush_r+0x94>
 800b556:	4628      	mov	r0, r5
 800b558:	f7ff fc96 	bl	800ae88 <_free_r>
 800b55c:	2000      	movs	r0, #0
 800b55e:	6360      	str	r0, [r4, #52]	; 0x34
 800b560:	e7c0      	b.n	800b4e4 <__sflush_r+0x1c>
 800b562:	2301      	movs	r3, #1
 800b564:	4628      	mov	r0, r5
 800b566:	47b0      	blx	r6
 800b568:	1c41      	adds	r1, r0, #1
 800b56a:	d1c8      	bne.n	800b4fe <__sflush_r+0x36>
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d0c5      	beq.n	800b4fe <__sflush_r+0x36>
 800b572:	2b1d      	cmp	r3, #29
 800b574:	d001      	beq.n	800b57a <__sflush_r+0xb2>
 800b576:	2b16      	cmp	r3, #22
 800b578:	d101      	bne.n	800b57e <__sflush_r+0xb6>
 800b57a:	602f      	str	r7, [r5, #0]
 800b57c:	e7b1      	b.n	800b4e2 <__sflush_r+0x1a>
 800b57e:	89a3      	ldrh	r3, [r4, #12]
 800b580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b584:	81a3      	strh	r3, [r4, #12]
 800b586:	e7ad      	b.n	800b4e4 <__sflush_r+0x1c>
 800b588:	690f      	ldr	r7, [r1, #16]
 800b58a:	2f00      	cmp	r7, #0
 800b58c:	d0a9      	beq.n	800b4e2 <__sflush_r+0x1a>
 800b58e:	0793      	lsls	r3, r2, #30
 800b590:	680e      	ldr	r6, [r1, #0]
 800b592:	bf08      	it	eq
 800b594:	694b      	ldreq	r3, [r1, #20]
 800b596:	600f      	str	r7, [r1, #0]
 800b598:	bf18      	it	ne
 800b59a:	2300      	movne	r3, #0
 800b59c:	eba6 0807 	sub.w	r8, r6, r7
 800b5a0:	608b      	str	r3, [r1, #8]
 800b5a2:	f1b8 0f00 	cmp.w	r8, #0
 800b5a6:	dd9c      	ble.n	800b4e2 <__sflush_r+0x1a>
 800b5a8:	6a21      	ldr	r1, [r4, #32]
 800b5aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5ac:	4643      	mov	r3, r8
 800b5ae:	463a      	mov	r2, r7
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	47b0      	blx	r6
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	dc06      	bgt.n	800b5c6 <__sflush_r+0xfe>
 800b5b8:	89a3      	ldrh	r3, [r4, #12]
 800b5ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5be:	81a3      	strh	r3, [r4, #12]
 800b5c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b5c4:	e78e      	b.n	800b4e4 <__sflush_r+0x1c>
 800b5c6:	4407      	add	r7, r0
 800b5c8:	eba8 0800 	sub.w	r8, r8, r0
 800b5cc:	e7e9      	b.n	800b5a2 <__sflush_r+0xda>
 800b5ce:	bf00      	nop
 800b5d0:	dfbffffe 	.word	0xdfbffffe

0800b5d4 <_fflush_r>:
 800b5d4:	b538      	push	{r3, r4, r5, lr}
 800b5d6:	690b      	ldr	r3, [r1, #16]
 800b5d8:	4605      	mov	r5, r0
 800b5da:	460c      	mov	r4, r1
 800b5dc:	b913      	cbnz	r3, 800b5e4 <_fflush_r+0x10>
 800b5de:	2500      	movs	r5, #0
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	bd38      	pop	{r3, r4, r5, pc}
 800b5e4:	b118      	cbz	r0, 800b5ee <_fflush_r+0x1a>
 800b5e6:	6a03      	ldr	r3, [r0, #32]
 800b5e8:	b90b      	cbnz	r3, 800b5ee <_fflush_r+0x1a>
 800b5ea:	f7ff f9f3 	bl	800a9d4 <__sinit>
 800b5ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d0f3      	beq.n	800b5de <_fflush_r+0xa>
 800b5f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b5f8:	07d0      	lsls	r0, r2, #31
 800b5fa:	d404      	bmi.n	800b606 <_fflush_r+0x32>
 800b5fc:	0599      	lsls	r1, r3, #22
 800b5fe:	d402      	bmi.n	800b606 <_fflush_r+0x32>
 800b600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b602:	f7ff fc30 	bl	800ae66 <__retarget_lock_acquire_recursive>
 800b606:	4628      	mov	r0, r5
 800b608:	4621      	mov	r1, r4
 800b60a:	f7ff ff5d 	bl	800b4c8 <__sflush_r>
 800b60e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b610:	07da      	lsls	r2, r3, #31
 800b612:	4605      	mov	r5, r0
 800b614:	d4e4      	bmi.n	800b5e0 <_fflush_r+0xc>
 800b616:	89a3      	ldrh	r3, [r4, #12]
 800b618:	059b      	lsls	r3, r3, #22
 800b61a:	d4e1      	bmi.n	800b5e0 <_fflush_r+0xc>
 800b61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b61e:	f7ff fc23 	bl	800ae68 <__retarget_lock_release_recursive>
 800b622:	e7dd      	b.n	800b5e0 <_fflush_r+0xc>

0800b624 <__swhatbuf_r>:
 800b624:	b570      	push	{r4, r5, r6, lr}
 800b626:	460c      	mov	r4, r1
 800b628:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b62c:	2900      	cmp	r1, #0
 800b62e:	b096      	sub	sp, #88	; 0x58
 800b630:	4615      	mov	r5, r2
 800b632:	461e      	mov	r6, r3
 800b634:	da0d      	bge.n	800b652 <__swhatbuf_r+0x2e>
 800b636:	89a3      	ldrh	r3, [r4, #12]
 800b638:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b63c:	f04f 0100 	mov.w	r1, #0
 800b640:	bf0c      	ite	eq
 800b642:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b646:	2340      	movne	r3, #64	; 0x40
 800b648:	2000      	movs	r0, #0
 800b64a:	6031      	str	r1, [r6, #0]
 800b64c:	602b      	str	r3, [r5, #0]
 800b64e:	b016      	add	sp, #88	; 0x58
 800b650:	bd70      	pop	{r4, r5, r6, pc}
 800b652:	466a      	mov	r2, sp
 800b654:	f000 f848 	bl	800b6e8 <_fstat_r>
 800b658:	2800      	cmp	r0, #0
 800b65a:	dbec      	blt.n	800b636 <__swhatbuf_r+0x12>
 800b65c:	9901      	ldr	r1, [sp, #4]
 800b65e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b662:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b666:	4259      	negs	r1, r3
 800b668:	4159      	adcs	r1, r3
 800b66a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b66e:	e7eb      	b.n	800b648 <__swhatbuf_r+0x24>

0800b670 <__smakebuf_r>:
 800b670:	898b      	ldrh	r3, [r1, #12]
 800b672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b674:	079d      	lsls	r5, r3, #30
 800b676:	4606      	mov	r6, r0
 800b678:	460c      	mov	r4, r1
 800b67a:	d507      	bpl.n	800b68c <__smakebuf_r+0x1c>
 800b67c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b680:	6023      	str	r3, [r4, #0]
 800b682:	6123      	str	r3, [r4, #16]
 800b684:	2301      	movs	r3, #1
 800b686:	6163      	str	r3, [r4, #20]
 800b688:	b002      	add	sp, #8
 800b68a:	bd70      	pop	{r4, r5, r6, pc}
 800b68c:	ab01      	add	r3, sp, #4
 800b68e:	466a      	mov	r2, sp
 800b690:	f7ff ffc8 	bl	800b624 <__swhatbuf_r>
 800b694:	9900      	ldr	r1, [sp, #0]
 800b696:	4605      	mov	r5, r0
 800b698:	4630      	mov	r0, r6
 800b69a:	f7ff f883 	bl	800a7a4 <_malloc_r>
 800b69e:	b948      	cbnz	r0, 800b6b4 <__smakebuf_r+0x44>
 800b6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6a4:	059a      	lsls	r2, r3, #22
 800b6a6:	d4ef      	bmi.n	800b688 <__smakebuf_r+0x18>
 800b6a8:	f023 0303 	bic.w	r3, r3, #3
 800b6ac:	f043 0302 	orr.w	r3, r3, #2
 800b6b0:	81a3      	strh	r3, [r4, #12]
 800b6b2:	e7e3      	b.n	800b67c <__smakebuf_r+0xc>
 800b6b4:	89a3      	ldrh	r3, [r4, #12]
 800b6b6:	6020      	str	r0, [r4, #0]
 800b6b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6bc:	81a3      	strh	r3, [r4, #12]
 800b6be:	9b00      	ldr	r3, [sp, #0]
 800b6c0:	6163      	str	r3, [r4, #20]
 800b6c2:	9b01      	ldr	r3, [sp, #4]
 800b6c4:	6120      	str	r0, [r4, #16]
 800b6c6:	b15b      	cbz	r3, 800b6e0 <__smakebuf_r+0x70>
 800b6c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	f000 f81d 	bl	800b70c <_isatty_r>
 800b6d2:	b128      	cbz	r0, 800b6e0 <__smakebuf_r+0x70>
 800b6d4:	89a3      	ldrh	r3, [r4, #12]
 800b6d6:	f023 0303 	bic.w	r3, r3, #3
 800b6da:	f043 0301 	orr.w	r3, r3, #1
 800b6de:	81a3      	strh	r3, [r4, #12]
 800b6e0:	89a3      	ldrh	r3, [r4, #12]
 800b6e2:	431d      	orrs	r5, r3
 800b6e4:	81a5      	strh	r5, [r4, #12]
 800b6e6:	e7cf      	b.n	800b688 <__smakebuf_r+0x18>

0800b6e8 <_fstat_r>:
 800b6e8:	b538      	push	{r3, r4, r5, lr}
 800b6ea:	4d07      	ldr	r5, [pc, #28]	; (800b708 <_fstat_r+0x20>)
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	4604      	mov	r4, r0
 800b6f0:	4608      	mov	r0, r1
 800b6f2:	4611      	mov	r1, r2
 800b6f4:	602b      	str	r3, [r5, #0]
 800b6f6:	f7fb f96c 	bl	80069d2 <_fstat>
 800b6fa:	1c43      	adds	r3, r0, #1
 800b6fc:	d102      	bne.n	800b704 <_fstat_r+0x1c>
 800b6fe:	682b      	ldr	r3, [r5, #0]
 800b700:	b103      	cbz	r3, 800b704 <_fstat_r+0x1c>
 800b702:	6023      	str	r3, [r4, #0]
 800b704:	bd38      	pop	{r3, r4, r5, pc}
 800b706:	bf00      	nop
 800b708:	20000b50 	.word	0x20000b50

0800b70c <_isatty_r>:
 800b70c:	b538      	push	{r3, r4, r5, lr}
 800b70e:	4d06      	ldr	r5, [pc, #24]	; (800b728 <_isatty_r+0x1c>)
 800b710:	2300      	movs	r3, #0
 800b712:	4604      	mov	r4, r0
 800b714:	4608      	mov	r0, r1
 800b716:	602b      	str	r3, [r5, #0]
 800b718:	f7fb f96b 	bl	80069f2 <_isatty>
 800b71c:	1c43      	adds	r3, r0, #1
 800b71e:	d102      	bne.n	800b726 <_isatty_r+0x1a>
 800b720:	682b      	ldr	r3, [r5, #0]
 800b722:	b103      	cbz	r3, 800b726 <_isatty_r+0x1a>
 800b724:	6023      	str	r3, [r4, #0]
 800b726:	bd38      	pop	{r3, r4, r5, pc}
 800b728:	20000b50 	.word	0x20000b50

0800b72c <_init>:
 800b72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b72e:	bf00      	nop
 800b730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b732:	bc08      	pop	{r3}
 800b734:	469e      	mov	lr, r3
 800b736:	4770      	bx	lr

0800b738 <_fini>:
 800b738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b73a:	bf00      	nop
 800b73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b73e:	bc08      	pop	{r3}
 800b740:	469e      	mov	lr, r3
 800b742:	4770      	bx	lr


holonomic_drive2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af24  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800b104  0800b104  0001b104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b55c  0800b55c  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  0800b55c  0800b55c  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b55c  0800b55c  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b55c  0800b55c  0001b55c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800b564  0800b564  0001b564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800b56c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  20000068  0800b5d4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000864  0800b5d4  00020864  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020eea  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004265  00000000  00000000  00040fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001498  00000000  00000000  00045230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fe1  00000000  00000000  000466c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024794  00000000  00000000  000476a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016399  00000000  00000000  0006be3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db701  00000000  00000000  000821d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007654  00000000  00000000  0015d8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00164f2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b0ec 	.word	0x0800b0ec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	0800b0ec 	.word	0x0800b0ec

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2iz>:
 8000b6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d215      	bcs.n	8000ba2 <__aeabi_d2iz+0x36>
 8000b76:	d511      	bpl.n	8000b9c <__aeabi_d2iz+0x30>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d912      	bls.n	8000ba8 <__aeabi_d2iz+0x3c>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	bf18      	it	ne
 8000b98:	4240      	negne	r0, r0
 8000b9a:	4770      	bx	lr
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba6:	d105      	bne.n	8000bb4 <__aeabi_d2iz+0x48>
 8000ba8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bac:	bf08      	it	eq
 8000bae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bb2:	4770      	bx	lr
 8000bb4:	f04f 0000 	mov.w	r0, #0
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2uiz>:
 8000bbc:	004a      	lsls	r2, r1, #1
 8000bbe:	d211      	bcs.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc4:	d211      	bcs.n	8000bea <__aeabi_d2uiz+0x2e>
 8000bc6:	d50d      	bpl.n	8000be4 <__aeabi_d2uiz+0x28>
 8000bc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bcc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bd0:	d40e      	bmi.n	8000bf0 <__aeabi_d2uiz+0x34>
 8000bd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	4770      	bx	lr
 8000be4:	f04f 0000 	mov.w	r0, #0
 8000be8:	4770      	bx	lr
 8000bea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bee:	d102      	bne.n	8000bf6 <__aeabi_d2uiz+0x3a>
 8000bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf4:	4770      	bx	lr
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	4770      	bx	lr

08000bfc <__aeabi_d2f>:
 8000bfc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c04:	bf24      	itt	cs
 8000c06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0e:	d90d      	bls.n	8000c2c <__aeabi_d2f+0x30>
 8000c10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c24:	bf08      	it	eq
 8000c26:	f020 0001 	biceq.w	r0, r0, #1
 8000c2a:	4770      	bx	lr
 8000c2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c30:	d121      	bne.n	8000c76 <__aeabi_d2f+0x7a>
 8000c32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c36:	bfbc      	itt	lt
 8000c38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	4770      	bxlt	lr
 8000c3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c46:	f1c2 0218 	rsb	r2, r2, #24
 8000c4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c52:	fa20 f002 	lsr.w	r0, r0, r2
 8000c56:	bf18      	it	ne
 8000c58:	f040 0001 	orrne.w	r0, r0, #1
 8000c5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c68:	ea40 000c 	orr.w	r0, r0, ip
 8000c6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c74:	e7cc      	b.n	8000c10 <__aeabi_d2f+0x14>
 8000c76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c7a:	d107      	bne.n	8000c8c <__aeabi_d2f+0x90>
 8000c7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c80:	bf1e      	ittt	ne
 8000c82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c8a:	4770      	bxne	lr
 8000c8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>:
#include <ChampiCan.h>

#include "stdio.h"
#include <string.h>

ChampiCan::ChampiCan(FDCAN_HandleTypeDef *handle_fdcan) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
 8000ca6:	4a15      	ldr	r2, [pc, #84]	; (8000cfc <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef+0x60>)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3308      	adds	r3, #8
 8000cb6:	2224      	movs	r2, #36	; 0x24
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f009 fce6 	bl	800a68c <memset>

	handle_fdcan_ = handle_fdcan;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	683a      	ldr	r2, [r7, #0]
 8000cc4:	605a      	str	r2, [r3, #4]

	tx_header_.IdType = FDCAN_STANDARD_ID;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	60da      	str	r2, [r3, #12]
	tx_header_.TxFrameType = FDCAN_DATA_FRAME;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	2200      	movs	r2, #0
 8000cd0:	611a      	str	r2, [r3, #16]
	tx_header_.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
	tx_header_.BitRateSwitch = FDCAN_BRS_OFF;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
	tx_header_.FDFormat = FDCAN_CLASSIC_CAN;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
	tx_header_.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	625a      	str	r2, [r3, #36]	; 0x24
	tx_header_.MessageMarker = 0;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2200      	movs	r2, #0
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28

}
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	0800b460 	.word	0x0800b460

08000d00 <_ZN9ChampiCanC1Ev>:

ChampiCan::ChampiCan() = default;
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <_ZN9ChampiCanC1Ev+0x2c>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3308      	adds	r3, #8
 8000d18:	2224      	movs	r2, #36	; 0x24
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f009 fcb5 	bl	800a68c <memset>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4618      	mov	r0, r3
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	0800b460 	.word	0x0800b460

08000d30 <_ZN9ChampiCan5startEv>:

int ChampiCan::start() {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	/* Start the FDCAN module */
	if (HAL_FDCAN_Start(handle_fdcan_) != HAL_OK)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f005 fed1 	bl	8006ae4 <HAL_FDCAN_Start>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	bf14      	ite	ne
 8000d48:	2301      	movne	r3, #1
 8000d4a:	2300      	moveq	r3, #0
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <_ZN9ChampiCan5startEv+0x26>
	{
		return 1;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e011      	b.n	8000d7a <_ZN9ChampiCan5startEv+0x4a>
	}
	if (HAL_FDCAN_ActivateNotification(handle_fdcan_, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2101      	movs	r1, #1
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f006 f834 	bl	8006dcc <HAL_FDCAN_ActivateNotification>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	bf14      	ite	ne
 8000d6a:	2301      	movne	r3, #1
 8000d6c:	2300      	moveq	r3, #0
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <_ZN9ChampiCan5startEv+0x48>
	{
		return 1;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e000      	b.n	8000d7a <_ZN9ChampiCan5startEv+0x4a>
	}
	return 0;
 8000d78:	2300      	movs	r3, #0
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
	...

08000d84 <_ZN9ChampiCan10send_frameEmPhm>:
    {
        ret = 1;
    }
    return ret;
}
int ChampiCan::send_frame(uint32_t id, uint8_t *frame_data, uint32_t size) {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
 8000d90:	603b      	str	r3, [r7, #0]
	tx_header_.Identifier = id;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	68ba      	ldr	r2, [r7, #8]
 8000d96:	609a      	str	r2, [r3, #8]
	tx_header_.DataLength = size;
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	615a      	str	r2, [r3, #20]

    int ret = HAL_FDCAN_AddMessageToTxFifoQ(handle_fdcan_, &tx_header_, frame_data);
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	6858      	ldr	r0, [r3, #4]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	3308      	adds	r3, #8
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	4619      	mov	r1, r3
 8000daa:	f005 fec3 	bl	8006b34 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000dae:	4603      	mov	r3, r0
 8000db0:	61fb      	str	r3, [r7, #28]

    if (ret == HAL_OK) {
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d101      	bne.n	8000dbc <_ZN9ChampiCan10send_frameEmPhm+0x38>
        return 0;
 8000db8:	2300      	movs	r3, #0
 8000dba:	e031      	b.n	8000e20 <_ZN9ChampiCan10send_frameEmPhm+0x9c>
    }

    /* We got an error, try again until it works. Also blink the LED at 2Hz */
    // Get led value to restore it after the loop
    GPIO_PinState led_state = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	481a      	ldr	r0, [pc, #104]	; (8000e28 <_ZN9ChampiCan10send_frameEmPhm+0xa4>)
 8000dc0:	f006 fccc 	bl	800775c <HAL_GPIO_ReadPin>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	75fb      	strb	r3, [r7, #23]

    unsigned long last_time = HAL_GetTick();
 8000dc8:	f005 fbf4 	bl	80065b4 <HAL_GetTick>
 8000dcc:	61b8      	str	r0, [r7, #24]
    while(ret != HAL_OK) {
 8000dce:	e01c      	b.n	8000e0a <_ZN9ChampiCan10send_frameEmPhm+0x86>
        ret = HAL_FDCAN_AddMessageToTxFifoQ(handle_fdcan_, &tx_header_, frame_data);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	6858      	ldr	r0, [r3, #4]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	3308      	adds	r3, #8
 8000dd8:	687a      	ldr	r2, [r7, #4]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	f005 feaa 	bl	8006b34 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000de0:	4603      	mov	r3, r0
 8000de2:	61fb      	str	r3, [r7, #28]
        HAL_Delay(1);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f005 fbf1 	bl	80065cc <HAL_Delay>
        unsigned long now = HAL_GetTick();
 8000dea:	f005 fbe3 	bl	80065b4 <HAL_GetTick>
 8000dee:	6138      	str	r0, [r7, #16]
        if(now - last_time > 500) {
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	69bb      	ldr	r3, [r7, #24]
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000dfa:	d906      	bls.n	8000e0a <_ZN9ChampiCan10send_frameEmPhm+0x86>
              last_time = now;
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	61bb      	str	r3, [r7, #24]
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_8); // The built-in LED
 8000e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e04:	4808      	ldr	r0, [pc, #32]	; (8000e28 <_ZN9ChampiCan10send_frameEmPhm+0xa4>)
 8000e06:	f006 fcd9 	bl	80077bc <HAL_GPIO_TogglePin>
    while(ret != HAL_OK) {
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d1df      	bne.n	8000dd0 <_ZN9ChampiCan10send_frameEmPhm+0x4c>
        }
    }
    // Restore the LED state
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, led_state);
 8000e10:	7dfb      	ldrb	r3, [r7, #23]
 8000e12:	461a      	mov	r2, r3
 8000e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <_ZN9ChampiCan10send_frameEmPhm+0xa4>)
 8000e1a:	f006 fcb7 	bl	800778c <HAL_GPIO_WritePin>
    return 1; // Means we had to retry. Used for logging.
 8000e1e:	2301      	movs	r3, #1
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3720      	adds	r7, #32
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	48000400 	.word	0x48000400

08000e2c <_ZN9ChampiCan8send_msgEmPhm>:

int ChampiCan::send_msg(uint32_t id, uint8_t *msg, uint32_t msg_size) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08a      	sub	sp, #40	; 0x28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
 8000e38:	603b      	str	r3, [r7, #0]

	static uint16_t msg_number = 0;

	if (msg_size > 512) {
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e40:	d901      	bls.n	8000e46 <_ZN9ChampiCan8send_msgEmPhm+0x1a>
		return 1;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e084      	b.n	8000f50 <_ZN9ChampiCan8send_msgEmPhm+0x124>
	}

	uint8_t frame_data[8] = {0};
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
	uint16_t nb_frames = (uint16_t) msg_size / 6 + (msg_size % 6 > 0 ? 1 : 0);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	4a41      	ldr	r2, [pc, #260]	; (8000f58 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000e54:	fba2 2303 	umull	r2, r3, r2, r3
 8000e58:	089b      	lsrs	r3, r3, #2
 8000e5a:	b298      	uxth	r0, r3
 8000e5c:	6839      	ldr	r1, [r7, #0]
 8000e5e:	4b3e      	ldr	r3, [pc, #248]	; (8000f58 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000e60:	fba3 2301 	umull	r2, r3, r3, r1
 8000e64:	089a      	lsrs	r2, r3, #2
 8000e66:	4613      	mov	r3, r2
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	1aca      	subs	r2, r1, r3
 8000e70:	2a00      	cmp	r2, #0
 8000e72:	d001      	beq.n	8000e78 <_ZN9ChampiCan8send_msgEmPhm+0x4c>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <_ZN9ChampiCan8send_msgEmPhm+0x4e>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	4403      	add	r3, r0
 8000e7c:	83fb      	strh	r3, [r7, #30]

	for(uint16_t i=0; i<nb_frames; i++) {
 8000e7e:	2300      	movs	r3, #0
 8000e80:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000e82:	e053      	b.n	8000f2c <_ZN9ChampiCan8send_msgEmPhm+0x100>

		// Frame descriptor
		uint16_t frame_descriptor = msg_number << 12 | (nb_frames << 6) | i;
 8000e84:	4b35      	ldr	r3, [pc, #212]	; (8000f5c <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	031b      	lsls	r3, r3, #12
 8000e8a:	b21a      	sxth	r2, r3
 8000e8c:	8bfb      	ldrh	r3, [r7, #30]
 8000e8e:	019b      	lsls	r3, r3, #6
 8000e90:	b21b      	sxth	r3, r3
 8000e92:	4313      	orrs	r3, r2
 8000e94:	b21a      	sxth	r2, r3
 8000e96:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b21b      	sxth	r3, r3
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	827b      	strh	r3, [r7, #18]
 8000ea2:	8a7b      	ldrh	r3, [r7, #18]
		memcpy(frame_data, (char*)&frame_descriptor, 2);
 8000ea4:	82bb      	strh	r3, [r7, #20]

		// Data size
		int num_bytes_frame = 6;
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	623b      	str	r3, [r7, #32]
		if(i==nb_frames-1) {
 8000eaa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000eac:	8bfb      	ldrh	r3, [r7, #30]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	d10a      	bne.n	8000eca <_ZN9ChampiCan8send_msgEmPhm+0x9e>
			num_bytes_frame = msg_size % 6;
 8000eb4:	6839      	ldr	r1, [r7, #0]
 8000eb6:	4b28      	ldr	r3, [pc, #160]	; (8000f58 <_ZN9ChampiCan8send_msgEmPhm+0x12c>)
 8000eb8:	fba3 2301 	umull	r2, r3, r3, r1
 8000ebc:	089a      	lsrs	r2, r3, #2
 8000ebe:	4613      	mov	r3, r2
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	4413      	add	r3, r2
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	1aca      	subs	r2, r1, r3
 8000ec8:	623a      	str	r2, [r7, #32]
		}

		// Data
		memcpy(frame_data+2, msg + i*6, num_bytes_frame);
 8000eca:	f107 0014 	add.w	r0, r7, #20
 8000ece:	3002      	adds	r0, #2
 8000ed0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000ed2:	4613      	mov	r3, r2
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	4413      	add	r3, r2
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	461a      	mov	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	6a3a      	ldr	r2, [r7, #32]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f009 fca1 	bl	800a82a <memcpy>

		// Send
		if(send_frame(id, frame_data, num_bytes_frame+2) != 0) {
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	3302      	adds	r3, #2
 8000eec:	f107 0214 	add.w	r2, r7, #20
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	68f8      	ldr	r0, [r7, #12]
 8000ef4:	f7ff ff46 	bl	8000d84 <_ZN9ChampiCan10send_frameEmPhm>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	bf14      	ite	ne
 8000efe:	2301      	movne	r3, #1
 8000f00:	2300      	moveq	r3, #0
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00e      	beq.n	8000f26 <_ZN9ChampiCan8send_msgEmPhm+0xfa>
			msg_number = (msg_number + 1) % 4;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000f0a:	881b      	ldrh	r3, [r3, #0]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	425a      	negs	r2, r3
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	f002 0203 	and.w	r2, r2, #3
 8000f18:	bf58      	it	pl
 8000f1a:	4253      	negpl	r3, r2
 8000f1c:	b29a      	uxth	r2, r3
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000f20:	801a      	strh	r2, [r3, #0]
			return 1;
 8000f22:	2301      	movs	r3, #1
 8000f24:	e014      	b.n	8000f50 <_ZN9ChampiCan8send_msgEmPhm+0x124>
	for(uint16_t i=0; i<nb_frames; i++) {
 8000f26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000f28:	3301      	adds	r3, #1
 8000f2a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000f2c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000f2e:	8bfb      	ldrh	r3, [r7, #30]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d3a7      	bcc.n	8000e84 <_ZN9ChampiCan8send_msgEmPhm+0x58>
		}
	}

    msg_number = (msg_number + 1) % 4;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	425a      	negs	r2, r3
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	f002 0203 	and.w	r2, r2, #3
 8000f44:	bf58      	it	pl
 8000f46:	4253      	negpl	r3, r2
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <_ZN9ChampiCan8send_msgEmPhm+0x130>)
 8000f4c:	801a      	strh	r2, [r3, #0]

    return 0;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	aaaaaaab 	.word	0xaaaaaaab
 8000f5c:	20000084 	.word	0x20000084

08000f60 <_ZN9ChampiCanD1Ev>:


ChampiCan::~ChampiCan() = default;
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <_ZN9ChampiCanD1Ev+0x1c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4618      	mov	r0, r3
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	0800b460 	.word	0x0800b460

08000f80 <_ZN9ChampiCanD0Ev>:
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ffe9 	bl	8000f60 <_ZN9ChampiCanD1Ev>
 8000f8e:	212c      	movs	r1, #44	; 0x2c
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f008 ff0f 	bl	8009db4 <_ZdlPvj>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_Z3subPKfS0_Pf>:

Vel sub(Vel vel1, Vel vel2) {
	return {vel1.x - vel2.x, vel1.y - vel2.y, vel1.theta - vel2.theta};
}

void sub(const float* arr1, const float* arr2, float* ret) {
 8000fa0:	b480      	push	{r7}
 8000fa2:	b087      	sub	sp, #28
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
	for(int i=0; i<3; i++) {
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	e016      	b.n	8000fe0 <_Z3subPKfS0_Pf+0x40>
		ret[i] = arr1[i] - arr2[i];
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	4413      	add	r3, r2
 8000fba:	ed93 7a00 	vldr	s14, [r3]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	68ba      	ldr	r2, [r7, #8]
 8000fc4:	4413      	add	r3, r2
 8000fc6:	edd3 7a00 	vldr	s15, [r3]
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fd6:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	617b      	str	r3, [r7, #20]
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	dde5      	ble.n	8000fb2 <_Z3subPKfS0_Pf+0x12>
	}
}
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
 8000fea:	371c      	adds	r7, #28
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr

08000ff4 <_Z3absPKfPf>:

void abs(const float* arr, float* ret) {
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	e026      	b.n	8001052 <_Z3absPKfPf+0x5e>
		if(arr[i]>=0) {
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	687a      	ldr	r2, [r7, #4]
 800100a:	4413      	add	r3, r2
 800100c:	edd3 7a00 	vldr	s15, [r3]
 8001010:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001018:	db0a      	blt.n	8001030 <_Z3absPKfPf+0x3c>
			ret[i] = arr[i];
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	441a      	add	r2, r3
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	6839      	ldr	r1, [r7, #0]
 8001028:	440b      	add	r3, r1
 800102a:	6812      	ldr	r2, [r2, #0]
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	e00d      	b.n	800104c <_Z3absPKfPf+0x58>
		}
		else {
			ret[i] = -arr[i];
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	687a      	ldr	r2, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	edd3 7a00 	vldr	s15, [r3]
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	683a      	ldr	r2, [r7, #0]
 8001042:	4413      	add	r3, r2
 8001044:	eef1 7a67 	vneg.f32	s15, s15
 8001048:	edc3 7a00 	vstr	s15, [r3]
	for(int i=0; i<3; i++) {
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	3301      	adds	r3, #1
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b02      	cmp	r3, #2
 8001056:	ddd5      	ble.n	8001004 <_Z3absPKfPf+0x10>
		}
	}
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr

08001066 <_Z13get_index_maxPKf>:

int get_index_max(const float* arr) {
 8001066:	b480      	push	{r7}
 8001068:	b083      	sub	sp, #12
 800106a:	af00      	add	r7, sp, #0
 800106c:	6078      	str	r0, [r7, #4]
	if(arr[0] >= arr[1] && arr[0] >= arr[2]) {
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	ed93 7a00 	vldr	s14, [r3]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3304      	adds	r3, #4
 8001078:	edd3 7a00 	vldr	s15, [r3]
 800107c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001084:	db0d      	blt.n	80010a2 <_Z13get_index_maxPKf+0x3c>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	ed93 7a00 	vldr	s14, [r3]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3308      	adds	r3, #8
 8001090:	edd3 7a00 	vldr	s15, [r3]
 8001094:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001098:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800109c:	db01      	blt.n	80010a2 <_Z13get_index_maxPKf+0x3c>
		return 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	e01b      	b.n	80010da <_Z13get_index_maxPKf+0x74>
	}
	else if(arr[1] >= arr[0] && arr[1] >= arr[2]) {
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3304      	adds	r3, #4
 80010a6:	ed93 7a00 	vldr	s14, [r3]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	edd3 7a00 	vldr	s15, [r3]
 80010b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b8:	db0e      	blt.n	80010d8 <_Z13get_index_maxPKf+0x72>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3304      	adds	r3, #4
 80010be:	ed93 7a00 	vldr	s14, [r3]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	3308      	adds	r3, #8
 80010c6:	edd3 7a00 	vldr	s15, [r3]
 80010ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80010ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010d2:	db01      	blt.n	80010d8 <_Z13get_index_maxPKf+0x72>
		return 1;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <_Z13get_index_maxPKf+0x74>
	}
	else {
		return 2;
 80010d8:	2302      	movs	r3, #2
	}
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <_ZN3VelC1Ev>:
#define HOLONOMICDRIVE3_H_


#include "Stepper.h"

struct Vel {
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f04f 0200 	mov.w	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f04f 0200 	mov.w	r2, #0
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	370c      	adds	r7, #12
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <_ZN7StepperaSERKS_>:
#ifndef SRC_STEPPER_H_
#define SRC_STEPPER_H_

#include "stm32g4xx_hal.h"

class Stepper {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	6039      	str	r1, [r7, #0]
 800111e:	687a      	ldr	r2, [r7, #4]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	1d10      	adds	r0, r2, #4
 8001124:	3304      	adds	r3, #4
 8001126:	224c      	movs	r2, #76	; 0x4c
 8001128:	4619      	mov	r1, r3
 800112a:	f009 fb7e 	bl	800a82a <memcpy>
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	651a      	str	r2, [r3, #80]	; 0x50
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	659a      	str	r2, [r3, #88]	; 0x58
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	661a      	str	r2, [r3, #96]	; 0x60
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <_ZN15HolonomicDrive3C1ERK7StepperS2_S2_df>:

HolonomicDrive3::HolonomicDrive3(const Stepper& stepper0, const Stepper& stepper1, const Stepper& stepper2, double wheel_radius, float wheel_distance) {
 8001168:	b5b0      	push	{r4, r5, r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	61f8      	str	r0, [r7, #28]
 8001170:	61b9      	str	r1, [r7, #24]
 8001172:	617a      	str	r2, [r7, #20]
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	ed87 0b02 	vstr	d0, [r7, #8]
 800117a:	ed87 1a01 	vstr	s2, [r7, #4]
 800117e:	4a32      	ldr	r2, [pc, #200]	; (8001248 <_ZN15HolonomicDrive3C1ERK7StepperS2_S2_df+0xe0>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	3304      	adds	r3, #4
 8001188:	2402      	movs	r4, #2
 800118a:	461d      	mov	r5, r3
 800118c:	e004      	b.n	8001198 <_ZN15HolonomicDrive3C1ERK7StepperS2_S2_df+0x30>
 800118e:	4628      	mov	r0, r5
 8001190:	f000 fd52 	bl	8001c38 <_ZN7StepperC1Ev>
 8001194:	3564      	adds	r5, #100	; 0x64
 8001196:	3c01      	subs	r4, #1
 8001198:	2c00      	cmp	r4, #0
 800119a:	daf8      	bge.n	800118e <_ZN15HolonomicDrive3C1ERK7StepperS2_S2_df+0x26>
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80011a2:	4618      	mov	r0, r3
 80011a4:	f7ff ff9f 	bl	80010e6 <_ZN3VelC1Ev>
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80011ae:	4618      	mov	r0, r3
 80011b0:	f7ff ff99 	bl	80010e6 <_ZN3VelC1Ev>
	this->steppers[0] = stepper0;
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	3304      	adds	r3, #4
 80011b8:	69b9      	ldr	r1, [r7, #24]
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff ffaa 	bl	8001114 <_ZN7StepperaSERKS_>
	this->steppers[1] = stepper1;
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	3368      	adds	r3, #104	; 0x68
 80011c4:	6979      	ldr	r1, [r7, #20]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ffa4 	bl	8001114 <_ZN7StepperaSERKS_>
	this->steppers[2] = stepper2;
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	33cc      	adds	r3, #204	; 0xcc
 80011d0:	6939      	ldr	r1, [r7, #16]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff9e 	bl	8001114 <_ZN7StepperaSERKS_>
	this->wheel_circumference = wheel_radius * 2.0 * PI;
 80011d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	f7ff f874 	bl	80002cc <__adddf3>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4610      	mov	r0, r2
 80011ea:	4619      	mov	r1, r3
 80011ec:	a314      	add	r3, pc, #80	; (adr r3, 8001240 <_ZN15HolonomicDrive3C1ERK7StepperS2_S2_df+0xd8>)
 80011ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f2:	f7ff fa21 	bl	8000638 <__aeabi_dmul>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	4610      	mov	r0, r2
 80011fc:	4619      	mov	r1, r3
 80011fe:	f7ff fcfd 	bl	8000bfc <__aeabi_d2f>
 8001202:	4602      	mov	r2, r0
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
	this->wheel_distance = wheel_distance;
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
	this->current_wheels_speeds_rps[0] = 0;
 8001212:	69fb      	ldr	r3, [r7, #28]
 8001214:	f04f 0200 	mov.w	r2, #0
 8001218:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
	this->current_wheels_speeds_rps[1] = 0;
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	this->current_wheels_speeds_rps[2] = 0;
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

}
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	4618      	mov	r0, r3
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bdb0      	pop	{r4, r5, r7, pc}
 800123a:	bf00      	nop
 800123c:	f3af 8000 	nop.w
 8001240:	54442eea 	.word	0x54442eea
 8001244:	400921fb 	.word	0x400921fb
 8001248:	0800b470 	.word	0x0800b470

0800124c <_ZN15HolonomicDrive311set_cmd_velE3Vel>:

void HolonomicDrive3::set_cmd_vel(Vel cmd) {
 800124c:	b480      	push	{r7}
 800124e:	b085      	sub	sp, #20
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	eef0 6a40 	vmov.f32	s13, s0
 8001258:	eeb0 7a60 	vmov.f32	s14, s1
 800125c:	eef0 7a41 	vmov.f32	s15, s2
 8001260:	edc7 6a00 	vstr	s13, [r7]
 8001264:	ed87 7a01 	vstr	s14, [r7, #4]
 8001268:	edc7 7a02 	vstr	s15, [r7, #8]
	this->cmd_vel = cmd;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001272:	463a      	mov	r2, r7
 8001274:	ca07      	ldmia	r2, {r0, r1, r2}
 8001276:	e883 0007 	stmia.w	r3, {r0, r1, r2}
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>:

void HolonomicDrive3::compute_wheels_speeds(Vel cmd, float *ret_speeds_rps) {
 8001288:	b5b0      	push	{r4, r5, r7, lr}
 800128a:	b08a      	sub	sp, #40	; 0x28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6178      	str	r0, [r7, #20]
 8001290:	eef0 6a40 	vmov.f32	s13, s0
 8001294:	eeb0 7a60 	vmov.f32	s14, s1
 8001298:	eef0 7a41 	vmov.f32	s15, s2
 800129c:	6079      	str	r1, [r7, #4]
 800129e:	edc7 6a02 	vstr	s13, [r7, #8]
 80012a2:	ed87 7a03 	vstr	s14, [r7, #12]
 80012a6:	edc7 7a04 	vstr	s15, [r7, #16]
    float wheel0_mps = 0.5 * this->cmd_vel.y + SQRT_3_OVER_2 * this->cmd_vel.x + this->wheel_distance * this->cmd_vel.theta;
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f969 	bl	8000588 <__aeabi_f2d>
 80012b6:	f04f 0200 	mov.w	r2, #0
 80012ba:	4b55      	ldr	r3, [pc, #340]	; (8001410 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x188>)
 80012bc:	f7ff f9bc 	bl	8000638 <__aeabi_dmul>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4614      	mov	r4, r2
 80012c6:	461d      	mov	r5, r3
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f95a 	bl	8000588 <__aeabi_f2d>
 80012d4:	a34c      	add	r3, pc, #304	; (adr r3, 8001408 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x180>)
 80012d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012da:	f7ff f9ad 	bl	8000638 <__aeabi_dmul>
 80012de:	4602      	mov	r2, r0
 80012e0:	460b      	mov	r3, r1
 80012e2:	4620      	mov	r0, r4
 80012e4:	4629      	mov	r1, r5
 80012e6:	f7fe fff1 	bl	80002cc <__adddf3>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4614      	mov	r4, r2
 80012f0:	461d      	mov	r5, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	ed93 7a4d 	vldr	s14, [r3, #308]	; 0x134
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80012fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001302:	ee17 0a90 	vmov	r0, s15
 8001306:	f7ff f93f 	bl	8000588 <__aeabi_f2d>
 800130a:	4602      	mov	r2, r0
 800130c:	460b      	mov	r3, r1
 800130e:	4620      	mov	r0, r4
 8001310:	4629      	mov	r1, r5
 8001312:	f7fe ffdb 	bl	80002cc <__adddf3>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc6d 	bl	8000bfc <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
    float wheel1_mps = 0.5 * this->cmd_vel.y - SQRT_3_OVER_2 * this->cmd_vel.x + this->wheel_distance * this->cmd_vel.theta;
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff f92b 	bl	8000588 <__aeabi_f2d>
 8001332:	f04f 0200 	mov.w	r2, #0
 8001336:	4b36      	ldr	r3, [pc, #216]	; (8001410 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x188>)
 8001338:	f7ff f97e 	bl	8000638 <__aeabi_dmul>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4614      	mov	r4, r2
 8001342:	461d      	mov	r5, r3
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff f91c 	bl	8000588 <__aeabi_f2d>
 8001350:	a32d      	add	r3, pc, #180	; (adr r3, 8001408 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf+0x180>)
 8001352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001356:	f7ff f96f 	bl	8000638 <__aeabi_dmul>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	4620      	mov	r0, r4
 8001360:	4629      	mov	r1, r5
 8001362:	f7fe ffb1 	bl	80002c8 <__aeabi_dsub>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4614      	mov	r4, r2
 800136c:	461d      	mov	r5, r3
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	ed93 7a4d 	vldr	s14, [r3, #308]	; 0x134
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 800137a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800137e:	ee17 0a90 	vmov	r0, s15
 8001382:	f7ff f901 	bl	8000588 <__aeabi_f2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4620      	mov	r0, r4
 800138c:	4629      	mov	r1, r5
 800138e:	f7fe ff9d 	bl	80002cc <__adddf3>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff fc2f 	bl	8000bfc <__aeabi_d2f>
 800139e:	4603      	mov	r3, r0
 80013a0:	623b      	str	r3, [r7, #32]
    float wheel2_mps = - this->cmd_vel.y + this->wheel_distance * this->cmd_vel.theta;
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	ed93 7a4d 	vldr	s14, [r3, #308]	; 0x134
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 80013ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 80013b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013bc:	edc7 7a07 	vstr	s15, [r7, #28]
    // wheel mps -> wheel rps
    ret_speeds_rps[0] = wheel0_mps / this->wheel_circumference;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 80013c6:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80013ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[1] = wheel1_mps / this->wheel_circumference;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	3304      	adds	r3, #4
 80013de:	edd7 6a08 	vldr	s13, [r7, #32]
 80013e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013e6:	edc3 7a00 	vstr	s15, [r3]
    ret_speeds_rps[2] = wheel2_mps / this->wheel_circumference;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3308      	adds	r3, #8
 80013f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80013f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fc:	edc3 7a00 	vstr	s15, [r3]
}
 8001400:	bf00      	nop
 8001402:	3728      	adds	r7, #40	; 0x28
 8001404:	46bd      	mov	sp, r7
 8001406:	bdb0      	pop	{r4, r5, r7, pc}
 8001408:	e857b07f 	.word	0xe857b07f
 800140c:	3febb67a 	.word	0x3febb67a
 8001410:	3fe00000 	.word	0x3fe00000

08001414 <_ZN15HolonomicDrive319write_wheels_speedsEPf>:

void HolonomicDrive3::write_wheels_speeds(float *speeds_rps) {
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
	for(int i=0; i<3; i++) {
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e020      	b.n	8001466 <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x52>
		this->steppers[i].set_speed_rps(speeds_rps[i]);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	2264      	movs	r2, #100	; 0x64
 8001428:	fb02 f303 	mul.w	r3, r2, r3
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	4413      	add	r3, r2
 8001430:	1d19      	adds	r1, r3, #4
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	4413      	add	r3, r2
 800143a:	edd3 7a00 	vldr	s15, [r3]
 800143e:	eeb0 0a67 	vmov.f32	s0, s15
 8001442:	4608      	mov	r0, r1
 8001444:	f000 fc96 	bl	8001d74 <_ZN7Stepper13set_speed_rpsEf>
		this->current_wheels_speeds_rps[i] = speeds_rps[i];
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	4413      	add	r3, r2
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	6879      	ldr	r1, [r7, #4]
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3350      	adds	r3, #80	; 0x50
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	440b      	add	r3, r1
 800145c:	3304      	adds	r3, #4
 800145e:	601a      	str	r2, [r3, #0]
	for(int i=0; i<3; i++) {
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	3301      	adds	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2b02      	cmp	r3, #2
 800146a:	dddb      	ble.n	8001424 <_ZN15HolonomicDrive319write_wheels_speedsEPf+0x10>
	}
}
 800146c:	bf00      	nop
 800146e:	bf00      	nop
 8001470:	3710      	adds	r7, #16
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <_ZN15HolonomicDrive324spin_once_motors_controlEv>:

void HolonomicDrive3::spin_once_motors_control() {
 8001478:	b580      	push	{r7, lr}
 800147a:	b092      	sub	sp, #72	; 0x48
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]

	// compare current_vel and cmd_vel wheels speeds to check the required acceleration to transition directly from current to command
	float cmd_wheels_speeds[3]; // rotations per second
	this->compute_wheels_speeds(cmd_vel, cmd_wheels_speeds);
 8001480:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	edd3 6a4e 	vldr	s13, [r3, #312]	; 0x138
 800148a:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 800148e:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8001492:	4611      	mov	r1, r2
 8001494:	eeb0 0a66 	vmov.f32	s0, s13
 8001498:	eef0 0a47 	vmov.f32	s1, s14
 800149c:	eeb0 1a67 	vmov.f32	s2, s15
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff fef1 	bl	8001288 <_ZN15HolonomicDrive321compute_wheels_speedsE3VelPf>

	if(this->current_wheels_speeds_rps[2] != this->current_wheels_speeds_rps[2]) {
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 80014b2:	eeb4 7a67 	vcmp.f32	s14, s15
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	d009      	beq.n	80014d0 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x58>
		this->current_wheels_speeds_rps[2]--;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	edd3 7a53 	vldr	s15, [r3, #332]	; 0x14c
 80014c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
	}

	float desired_accels_wheels[3];
	sub(cmd_wheels_speeds, this->current_wheels_speeds_rps, desired_accels_wheels);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f503 71a2 	add.w	r1, r3, #324	; 0x144
 80014d6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80014da:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fd5e 	bl	8000fa0 <_Z3subPKfS0_Pf>

	float abs_desired_accels_wheels[3];
	abs(desired_accels_wheels, abs_desired_accels_wheels);
 80014e4:	f107 0218 	add.w	r2, r7, #24
 80014e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fd80 	bl	8000ff4 <_Z3absPKfPf>
	if(abs_desired_accels_wheels[0] < MAX_ACCEL_PER_CYCLE && abs_desired_accels_wheels[1] < MAX_ACCEL_PER_CYCLE && abs_desired_accels_wheels[2] < MAX_ACCEL_PER_CYCLE) {
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff f846 	bl	8000588 <__aeabi_f2d>
 80014fc:	a33e      	add	r3, pc, #248	; (adr r3, 80015f8 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x180>)
 80014fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001502:	f7ff fb0b 	bl	8000b1c <__aeabi_dcmplt>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d01e      	beq.n	800154a <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xd2>
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f83a 	bl	8000588 <__aeabi_f2d>
 8001514:	a338      	add	r3, pc, #224	; (adr r3, 80015f8 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x180>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7ff faff 	bl	8000b1c <__aeabi_dcmplt>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d012      	beq.n	800154a <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xd2>
 8001524:	6a3b      	ldr	r3, [r7, #32]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f82e 	bl	8000588 <__aeabi_f2d>
 800152c:	a332      	add	r3, pc, #200	; (adr r3, 80015f8 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x180>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff faf3 	bl	8000b1c <__aeabi_dcmplt>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <_ZN15HolonomicDrive324spin_once_motors_controlEv+0xd2>
		// acceleration requested is ok, no need to accelerate gradually.

		this->write_wheels_speeds(cmd_wheels_speeds);
 800153c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001540:	4619      	mov	r1, r3
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ff66 	bl	8001414 <_ZN15HolonomicDrive319write_wheels_speedsEPf>
 8001548:	e048      	b.n	80015dc <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x164>
	}
	else {
		// Trouver la roue qui pose le + problème. On va alors pouvoir réduire les accélérations des 3 roues de façon
		// de façon proportionelle, de façon que la roue qui pose le + problème ait une accélération égale à MAX_ACCEL_PER_CYCLE
		int i_max = get_index_max(abs_desired_accels_wheels);
 800154a:	f107 0318 	add.w	r3, r7, #24
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff fd89 	bl	8001066 <_Z13get_index_maxPKf>
 8001554:	6438      	str	r0, [r7, #64]	; 0x40

		float speed_ratio = MAX_ACCEL_PER_CYCLE / abs_desired_accels_wheels[i_max]; // speed ratio of each original speed to add
 8001556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	3348      	adds	r3, #72	; 0x48
 800155c:	443b      	add	r3, r7
 800155e:	3b30      	subs	r3, #48	; 0x30
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff f810 	bl	8000588 <__aeabi_f2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	a122      	add	r1, pc, #136	; (adr r1, 80015f8 <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x180>)
 800156e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001572:	f7ff f98b 	bl	800088c <__aeabi_ddiv>
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4610      	mov	r0, r2
 800157c:	4619      	mov	r1, r3
 800157e:	f7ff fb3d 	bl	8000bfc <__aeabi_d2f>
 8001582:	4603      	mov	r3, r0
 8001584:	63fb      	str	r3, [r7, #60]	; 0x3c

		float new_speeds_cmds[3];
		for(int i=0; i<3; i++) {
 8001586:	2300      	movs	r3, #0
 8001588:	647b      	str	r3, [r7, #68]	; 0x44
 800158a:	e01e      	b.n	80015ca <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x152>
			new_speeds_cmds[i] = current_wheels_speeds_rps[i] + speed_ratio * desired_accels_wheels[i];
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001590:	3350      	adds	r3, #80	; 0x50
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3304      	adds	r3, #4
 8001598:	ed93 7a00 	vldr	s14, [r3]
 800159c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	3348      	adds	r3, #72	; 0x48
 80015a2:	443b      	add	r3, r7
 80015a4:	3b24      	subs	r3, #36	; 0x24
 80015a6:	edd3 6a00 	vldr	s13, [r3]
 80015aa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80015ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	3348      	adds	r3, #72	; 0x48
 80015bc:	443b      	add	r3, r7
 80015be:	3b3c      	subs	r3, #60	; 0x3c
 80015c0:	edc3 7a00 	vstr	s15, [r3]
		for(int i=0; i<3; i++) {
 80015c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015c6:	3301      	adds	r3, #1
 80015c8:	647b      	str	r3, [r7, #68]	; 0x44
 80015ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	dddd      	ble.n	800158c <_ZN15HolonomicDrive324spin_once_motors_controlEv+0x114>
		}

		// set speed
		this->write_wheels_speeds(new_speeds_cmds);
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	4619      	mov	r1, r3
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff1c 	bl	8001414 <_ZN15HolonomicDrive319write_wheels_speedsEPf>
	}

	// Compute / update current vel (linear / angular)
	update_current_vel(this->current_wheels_speeds_rps);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80015e2:	4619      	mov	r1, r3
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f000 f853 	bl	8001690 <_ZN15HolonomicDrive318update_current_velEPKf>


}
 80015ea:	bf00      	nop
 80015ec:	3748      	adds	r7, #72	; 0x48
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	f3af 8000 	nop.w
 80015f8:	9999999a 	.word	0x9999999a
 80015fc:	3fb99999 	.word	0x3fb99999

08001600 <_ZN15HolonomicDrive315get_current_velEv>:

Vel HolonomicDrive3::get_current_vel() {
 8001600:	b480      	push	{r7}
 8001602:	b08b      	sub	sp, #44	; 0x2c
 8001604:	af00      	add	r7, sp, #0
 8001606:	6178      	str	r0, [r7, #20]
	return this->current_vel;
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	f502 72a8 	add.w	r2, r2, #336	; 0x150
 8001612:	ca07      	ldmia	r2, {r0, r1, r2}
 8001614:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001618:	69f9      	ldr	r1, [r7, #28]
 800161a:	6a3a      	ldr	r2, [r7, #32]
 800161c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161e:	ee06 1a90 	vmov	s13, r1
 8001622:	ee07 2a10 	vmov	s14, r2
 8001626:	ee07 3a90 	vmov	s15, r3
}
 800162a:	eeb0 0a66 	vmov.f32	s0, s13
 800162e:	eef0 0a47 	vmov.f32	s1, s14
 8001632:	eeb0 1a67 	vmov.f32	s2, s15
 8001636:	372c      	adds	r7, #44	; 0x2c
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <_ZN15HolonomicDrive3C1Ev>:

HolonomicDrive3::HolonomicDrive3() {
 8001640:	b5b0      	push	{r4, r5, r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	4a0f      	ldr	r2, [pc, #60]	; (8001688 <_ZN15HolonomicDrive3C1Ev+0x48>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	601a      	str	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	3304      	adds	r3, #4
 8001652:	2402      	movs	r4, #2
 8001654:	461d      	mov	r5, r3
 8001656:	e004      	b.n	8001662 <_ZN15HolonomicDrive3C1Ev+0x22>
 8001658:	4628      	mov	r0, r5
 800165a:	f000 faed 	bl	8001c38 <_ZN7StepperC1Ev>
 800165e:	3564      	adds	r5, #100	; 0x64
 8001660:	3c01      	subs	r4, #1
 8001662:	2c00      	cmp	r4, #0
 8001664:	daf8      	bge.n	8001658 <_ZN15HolonomicDrive3C1Ev+0x18>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fd3a 	bl	80010e6 <_ZN3VelC1Ev>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fd34 	bl	80010e6 <_ZN3VelC1Ev>
}
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bdb0      	pop	{r4, r5, r7, pc}
 8001688:	0800b470 	.word	0x0800b470
 800168c:	00000000 	.word	0x00000000

08001690 <_ZN15HolonomicDrive318update_current_velEPKf>:

void HolonomicDrive3::update_current_vel(const float* speeds_rps) {
 8001690:	b5b0      	push	{r4, r5, r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	6039      	str	r1, [r7, #0]
	float wheel0_mps = speeds_rps[0] * this->wheel_circumference;
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	ed93 7a00 	vldr	s14, [r3]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 80016a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016aa:	edc7 7a05 	vstr	s15, [r7, #20]
	float wheel1_mps = speeds_rps[1] * this->wheel_circumference;
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	3304      	adds	r3, #4
 80016b2:	ed93 7a00 	vldr	s14, [r3]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 80016bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c0:	edc7 7a04 	vstr	s15, [r7, #16]
	float wheel2_mps = speeds_rps[2] * this->wheel_circumference;
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	3308      	adds	r3, #8
 80016c8:	ed93 7a00 	vldr	s14, [r3]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 80016d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d6:	edc7 7a03 	vstr	s15, [r7, #12]

	this->current_vel.x = SQRT_3_OVER_3 * (wheel0_mps - wheel1_mps);
 80016da:	ed97 7a05 	vldr	s14, [r7, #20]
 80016de:	edd7 7a04 	vldr	s15, [r7, #16]
 80016e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e6:	ee17 0a90 	vmov	r0, s15
 80016ea:	f7fe ff4d 	bl	8000588 <__aeabi_f2d>
 80016ee:	a33c      	add	r3, pc, #240	; (adr r3, 80017e0 <_ZN15HolonomicDrive318update_current_velEPKf+0x150>)
 80016f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f4:	f7fe ffa0 	bl	8000638 <__aeabi_dmul>
 80016f8:	4602      	mov	r2, r0
 80016fa:	460b      	mov	r3, r1
 80016fc:	4610      	mov	r0, r2
 80016fe:	4619      	mov	r1, r3
 8001700:	f7ff fa7c 	bl	8000bfc <__aeabi_d2f>
 8001704:	4602      	mov	r2, r0
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
	this->current_vel.y = (1./3.) * (wheel0_mps + wheel1_mps) - (2./3.) * wheel2_mps;
 800170c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001710:	edd7 7a04 	vldr	s15, [r7, #16]
 8001714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001718:	ee17 0a90 	vmov	r0, s15
 800171c:	f7fe ff34 	bl	8000588 <__aeabi_f2d>
 8001720:	a331      	add	r3, pc, #196	; (adr r3, 80017e8 <_ZN15HolonomicDrive318update_current_velEPKf+0x158>)
 8001722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001726:	f7fe ff87 	bl	8000638 <__aeabi_dmul>
 800172a:	4602      	mov	r2, r0
 800172c:	460b      	mov	r3, r1
 800172e:	4614      	mov	r4, r2
 8001730:	461d      	mov	r5, r3
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f7fe ff28 	bl	8000588 <__aeabi_f2d>
 8001738:	a32d      	add	r3, pc, #180	; (adr r3, 80017f0 <_ZN15HolonomicDrive318update_current_velEPKf+0x160>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff7b 	bl	8000638 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4620      	mov	r0, r4
 8001748:	4629      	mov	r1, r5
 800174a:	f7fe fdbd 	bl	80002c8 <__aeabi_dsub>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff fa51 	bl	8000bfc <__aeabi_d2f>
 800175a:	4602      	mov	r2, r0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	this->current_vel.theta = (1./(3.*wheel_distance)) * (wheel0_mps + wheel1_mps + wheel2_mps);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe ff0d 	bl	8000588 <__aeabi_f2d>
 800176e:	f04f 0200 	mov.w	r2, #0
 8001772:	4b19      	ldr	r3, [pc, #100]	; (80017d8 <_ZN15HolonomicDrive318update_current_velEPKf+0x148>)
 8001774:	f7fe ff60 	bl	8000638 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	f04f 0000 	mov.w	r0, #0
 8001780:	4916      	ldr	r1, [pc, #88]	; (80017dc <_ZN15HolonomicDrive318update_current_velEPKf+0x14c>)
 8001782:	f7ff f883 	bl	800088c <__aeabi_ddiv>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4614      	mov	r4, r2
 800178c:	461d      	mov	r5, r3
 800178e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001792:	edd7 7a04 	vldr	s15, [r7, #16]
 8001796:	ee37 7a27 	vadd.f32	s14, s14, s15
 800179a:	edd7 7a03 	vldr	s15, [r7, #12]
 800179e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a2:	ee17 0a90 	vmov	r0, s15
 80017a6:	f7fe feef 	bl	8000588 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4620      	mov	r0, r4
 80017b0:	4629      	mov	r1, r5
 80017b2:	f7fe ff41 	bl	8000638 <__aeabi_dmul>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	4610      	mov	r0, r2
 80017bc:	4619      	mov	r1, r3
 80017be:	f7ff fa1d 	bl	8000bfc <__aeabi_d2f>
 80017c2:	4602      	mov	r2, r0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
}
 80017ca:	bf00      	nop
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bdb0      	pop	{r4, r5, r7, pc}
 80017d2:	bf00      	nop
 80017d4:	f3af 8000 	nop.w
 80017d8:	40080000 	.word	0x40080000
 80017dc:	3ff00000 	.word	0x3ff00000
 80017e0:	4591a01f 	.word	0x4591a01f
 80017e4:	3fe279a7 	.word	0x3fe279a7
 80017e8:	55555555 	.word	0x55555555
 80017ec:	3fd55555 	.word	0x3fd55555
 80017f0:	55555555 	.word	0x55555555
 80017f4:	3fe55555 	.word	0x3fe55555

080017f8 <_ZN15HolonomicDrive3D1Ev>:

HolonomicDrive3::~HolonomicDrive3() {
 80017f8:	b590      	push	{r4, r7, lr}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	4a0d      	ldr	r2, [pc, #52]	; (8001838 <_ZN15HolonomicDrive3D1Ev+0x40>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3304      	adds	r3, #4
	// TODO Auto-generated destructor stub
}
 800180a:	2b00      	cmp	r3, #0
 800180c:	d00d      	beq.n	800182a <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3304      	adds	r3, #4
 8001812:	f503 7496 	add.w	r4, r3, #300	; 0x12c
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3304      	adds	r3, #4
}
 800181a:	429c      	cmp	r4, r3
 800181c:	d005      	beq.n	800182a <_ZN15HolonomicDrive3D1Ev+0x32>
HolonomicDrive3::~HolonomicDrive3() {
 800181e:	3c64      	subs	r4, #100	; 0x64
 8001820:	6823      	ldr	r3, [r4, #0]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4620      	mov	r0, r4
 8001826:	4798      	blx	r3
}
 8001828:	e7f5      	b.n	8001816 <_ZN15HolonomicDrive3D1Ev+0x1e>
HolonomicDrive3::~HolonomicDrive3() {
 800182a:	bf00      	nop
}
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}
 8001836:	bf00      	nop
 8001838:	0800b470 	.word	0x0800b470

0800183c <_ZN15HolonomicDrive3D0Ev>:
HolonomicDrive3::~HolonomicDrive3() {
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
}
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ffd7 	bl	80017f8 <_ZN15HolonomicDrive3D1Ev>
 800184a:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f008 fab0 	bl	8009db4 <_ZdlPvj>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <_ZN17MessageRecomposerC1Ev>:
#include "MessageRecomposer.h"

#include "stdio.h"


MessageRecomposer::MessageRecomposer() {
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	4a0c      	ldr	r2, [pc, #48]	; (800189c <_ZN17MessageRecomposerC1Ev+0x3c>)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3324      	adds	r3, #36	; 0x24
 8001872:	2413      	movs	r4, #19
 8001874:	461d      	mov	r5, r3
 8001876:	e004      	b.n	8001882 <_ZN17MessageRecomposerC1Ev+0x22>
 8001878:	4628      	mov	r0, r5
 800187a:	f008 fb45 	bl	8009f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 800187e:	3518      	adds	r5, #24
 8001880:	3c01      	subs	r4, #1
 8001882:	2c00      	cmp	r4, #0
 8001884:	daf8      	bge.n	8001878 <_ZN17MessageRecomposerC1Ev+0x18>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800188c:	4618      	mov	r0, r3
 800188e:	f008 fb3b 	bl	8009f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
	// TODO Auto-generated constructor stub

}
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bdb0      	pop	{r4, r5, r7, pc}
 800189c:	0800b480 	.word	0x0800b480

080018a0 <_ZN17MessageRecomposer9add_frameEPhh>:

void MessageRecomposer::add_frame(uint8_t *frame_data, uint8_t length) {
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	b09b      	sub	sp, #108	; 0x6c
 80018a4:	af02      	add	r7, sp, #8
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	4613      	mov	r3, r2
 80018ac:	71fb      	strb	r3, [r7, #7]

	int msg_number;
    int msg_size;
    int frame_index;

    decode_descriptor(frame_data, msg_number, msg_size, frame_index);
 80018ae:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80018b2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80018b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	460b      	mov	r3, r1
 80018be:	68b9      	ldr	r1, [r7, #8]
 80018c0:	68f8      	ldr	r0, [r7, #12]
 80018c2:	f000 f910 	bl	8001ae6 <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>

    // TODO check if the number follows the expected order (0 -> 1 -> 2 -> 3 -> 0 -> ...)
    // But it's not that easy bc what if we miss an entire message ? we would loose the 3 messages that follow it
    if(msg_number_ != msg_number) {
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d019      	beq.n	8001904 <_ZN17MessageRecomposer9add_frameEPhh+0x64>
        // new message
        printf("New message\n");
 80018d0:	4856      	ldr	r0, [pc, #344]	; (8001a2c <_ZN17MessageRecomposer9add_frameEPhh+0x18c>)
 80018d2:	f008 fdfb 	bl	800a4cc <puts>
        msg_number_ = msg_number;
 80018d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	605a      	str	r2, [r3, #4]
        n_frames_ = msg_size;
 80018dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	609a      	str	r2, [r3, #8]
        for(int i=0; i<n_frames_; i++) {
 80018e2:	2300      	movs	r3, #0
 80018e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018e6:	e008      	b.n	80018fa <_ZN17MessageRecomposer9add_frameEPhh+0x5a>
            frames_received_[i] = false;
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018ec:	4413      	add	r3, r2
 80018ee:	330d      	adds	r3, #13
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 80018f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80018f6:	3301      	adds	r3, #1
 80018f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001900:	429a      	cmp	r2, r3
 8001902:	dbf1      	blt.n	80018e8 <_ZN17MessageRecomposer9add_frameEPhh+0x48>
        }
    }

    frames_received_[frame_index] = true;
 8001904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001906:	68fa      	ldr	r2, [r7, #12]
 8001908:	4413      	add	r3, r2
 800190a:	2201      	movs	r2, #1
 800190c:	735a      	strb	r2, [r3, #13]
    msg_parts[frame_index] = std::string((char*)frame_data+2, length-2);
 800190e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001910:	4613      	mov	r3, r2
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	3320      	adds	r3, #32
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4413      	add	r3, r2
 800191e:	1d1c      	adds	r4, r3, #4
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	1c9d      	adds	r5, r3, #2
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	3b02      	subs	r3, #2
 8001928:	461e      	mov	r6, r3
 800192a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800192e:	4618      	mov	r0, r3
 8001930:	f008 fa42 	bl	8009db8 <_ZNSaIcEC1Ev>
 8001934:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001938:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800193c:	4632      	mov	r2, r6
 800193e:	4629      	mov	r1, r5
 8001940:	f008 fba8 	bl	800a094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>
 8001944:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001948:	4619      	mov	r1, r3
 800194a:	4620      	mov	r0, r4
 800194c:	f008 faef 	bl	8009f2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001950:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001954:	4618      	mov	r0, r3
 8001956:	f008 fade 	bl	8009f16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800195a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800195e:	4618      	mov	r0, r3
 8001960:	f008 fa2b 	bl	8009dba <_ZNSaIcED1Ev>

    for(int i=0; i<n_frames_; i++) {
 8001964:	2300      	movs	r3, #0
 8001966:	65bb      	str	r3, [r7, #88]	; 0x58
 8001968:	e00c      	b.n	8001984 <_ZN17MessageRecomposer9add_frameEPhh+0xe4>
    	printf("Frame %d received : %d\n", i, frames_received_[i]);
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800196e:	4413      	add	r3, r2
 8001970:	330d      	adds	r3, #13
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8001978:	482d      	ldr	r0, [pc, #180]	; (8001a30 <_ZN17MessageRecomposer9add_frameEPhh+0x190>)
 800197a:	f008 fd41 	bl	800a400 <iprintf>
    for(int i=0; i<n_frames_; i++) {
 800197e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001980:	3301      	adds	r3, #1
 8001982:	65bb      	str	r3, [r7, #88]	; 0x58
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800198a:	429a      	cmp	r2, r3
 800198c:	dbed      	blt.n	800196a <_ZN17MessageRecomposer9add_frameEPhh+0xca>
    }

    if(all_frames_received()) {
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f000 f8d3 	bl	8001b3a <_ZN17MessageRecomposer19all_frames_receivedEv>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d043      	beq.n	8001a22 <_ZN17MessageRecomposer9add_frameEPhh+0x182>
        printf("All frames received\n");
 800199a:	4826      	ldr	r0, [pc, #152]	; (8001a34 <_ZN17MessageRecomposer9add_frameEPhh+0x194>)
 800199c:	f008 fd96 	bl	800a4cc <puts>
        std::string full_msg;
 80019a0:	f107 0310 	add.w	r3, r7, #16
 80019a4:	4618      	mov	r0, r3
 80019a6:	f008 faaf 	bl	8009f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
        for(int i=0; i<n_frames_; i++) {
 80019aa:	2300      	movs	r3, #0
 80019ac:	657b      	str	r3, [r7, #84]	; 0x54
 80019ae:	e011      	b.n	80019d4 <_ZN17MessageRecomposer9add_frameEPhh+0x134>
            full_msg += msg_parts[i];
 80019b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	3320      	adds	r3, #32
 80019bc:	68fa      	ldr	r2, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	1d1a      	adds	r2, r3, #4
 80019c2:	f107 0310 	add.w	r3, r7, #16
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f008 fb05 	bl	8009fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>
        for(int i=0; i<n_frames_; i++) {
 80019ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019d0:	3301      	adds	r3, #1
 80019d2:	657b      	str	r3, [r7, #84]	; 0x54
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80019da:	429a      	cmp	r2, r3
 80019dc:	dbe8      	blt.n	80019b0 <_ZN17MessageRecomposer9add_frameEPhh+0x110>
        }
        full_msg_ = full_msg;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80019e4:	f107 0210 	add.w	r2, r7, #16
 80019e8:	4611      	mov	r1, r2
 80019ea:	4618      	mov	r0, r3
 80019ec:	f008 fa99 	bl	8009f22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
        full_msg_received_ = true;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2201      	movs	r2, #1
 80019f4:	731a      	strb	r2, [r3, #12]
        for(int i=0; i<n_frames_; i++) {
 80019f6:	2300      	movs	r3, #0
 80019f8:	653b      	str	r3, [r7, #80]	; 0x50
 80019fa:	e008      	b.n	8001a0e <_ZN17MessageRecomposer9add_frameEPhh+0x16e>
            frames_received_[i] = false;
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a00:	4413      	add	r3, r2
 8001a02:	330d      	adds	r3, #13
 8001a04:	2200      	movs	r2, #0
 8001a06:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<n_frames_; i++) {
 8001a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	653b      	str	r3, [r7, #80]	; 0x50
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a14:	429a      	cmp	r2, r3
 8001a16:	dbf1      	blt.n	80019fc <_ZN17MessageRecomposer9add_frameEPhh+0x15c>
        }
    }
 8001a18:	f107 0310 	add.w	r3, r7, #16
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f008 fa7a 	bl	8009f16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001a22:	bf00      	nop
 8001a24:	3764      	adds	r7, #100	; 0x64
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	0800b104 	.word	0x0800b104
 8001a30:	0800b110 	.word	0x0800b110
 8001a34:	0800b128 	.word	0x0800b128

08001a38 <_ZN17MessageRecomposer21check_if_new_full_msgEv>:

bool MessageRecomposer::check_if_new_full_msg() {
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
    return full_msg_received_;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7b1b      	ldrb	r3, [r3, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>:

std::string MessageRecomposer::get_full_msg() {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
    full_msg_received_ = false;
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	731a      	strb	r2, [r3, #12]
    return full_msg_;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001a66:	4619      	mov	r1, r3
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f008 fadf 	bl	800a02c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
}
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	3708      	adds	r7, #8
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <_ZN17MessageRecomposerD1Ev>:

MessageRecomposer::~MessageRecomposer() {
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <_ZN17MessageRecomposerD1Ev+0x48>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f008 fa42 	bl	8009f16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3324      	adds	r3, #36	; 0x24
	// TODO Auto-generated destructor stub
}
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00c      	beq.n	8001ab4 <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3324      	adds	r3, #36	; 0x24
 8001a9e:	f503 74f0 	add.w	r4, r3, #480	; 0x1e0
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	3324      	adds	r3, #36	; 0x24
}
 8001aa6:	429c      	cmp	r4, r3
 8001aa8:	d004      	beq.n	8001ab4 <_ZN17MessageRecomposerD1Ev+0x3c>
MessageRecomposer::~MessageRecomposer() {
 8001aaa:	3c18      	subs	r4, #24
 8001aac:	4620      	mov	r0, r4
 8001aae:	f008 fa32 	bl	8009f16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001ab2:	e7f6      	b.n	8001aa2 <_ZN17MessageRecomposerD1Ev+0x2a>
MessageRecomposer::~MessageRecomposer() {
 8001ab4:	bf00      	nop
}
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd90      	pop	{r4, r7, pc}
 8001ac0:	0800b480 	.word	0x0800b480

08001ac4 <_ZN17MessageRecomposerD0Ev>:
MessageRecomposer::~MessageRecomposer() {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
}
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ffd3 	bl	8001a78 <_ZN17MessageRecomposerD1Ev>
 8001ad2:	f44f 7107 	mov.w	r1, #540	; 0x21c
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f008 f96c 	bl	8009db4 <_ZdlPvj>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_ZN17MessageRecomposer17decode_descriptorEPhRiS1_S1_>:

void MessageRecomposer::decode_descriptor(uint8_t *frame_data, int &msg_number,
		int &msg_size, int &frame_index) {
 8001ae6:	b480      	push	{r7}
 8001ae8:	b087      	sub	sp, #28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
 8001af2:	603b      	str	r3, [r7, #0]

    uint16_t msg_descriptor = frame_data[1] << 8 | frame_data[0];
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	3301      	adds	r3, #1
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	b21a      	sxth	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	781b      	ldrb	r3, [r3, #0]
 8001b02:	b21b      	sxth	r3, r3
 8001b04:	4313      	orrs	r3, r2
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	82fb      	strh	r3, [r7, #22]

    // todo mask the unused bits for safety (eg if error of transmission)

    msg_number = (msg_descriptor >> 12);
 8001b0a:	8afb      	ldrh	r3, [r7, #22]
 8001b0c:	0b1b      	lsrs	r3, r3, #12
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	601a      	str	r2, [r3, #0]
    msg_size = (msg_descriptor >> 6) & 0x3F;
 8001b16:	8afb      	ldrh	r3, [r7, #22]
 8001b18:	099b      	lsrs	r3, r3, #6
 8001b1a:	b29b      	uxth	r3, r3
 8001b1c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	601a      	str	r2, [r3, #0]
    frame_index = msg_descriptor & 0x3F;
 8001b24:	8afb      	ldrh	r3, [r7, #22]
 8001b26:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b2a:	6a3b      	ldr	r3, [r7, #32]
 8001b2c:	601a      	str	r2, [r3, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	371c      	adds	r7, #28
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_ZN17MessageRecomposer19all_frames_receivedEv>:

bool MessageRecomposer::all_frames_received() {
 8001b3a:	b480      	push	{r7}
 8001b3c:	b085      	sub	sp, #20
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
    for(int i=0; i<n_frames_; i++) {
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	e00e      	b.n	8001b66 <_ZN17MessageRecomposer19all_frames_receivedEv+0x2c>
        if(!frames_received_[i]) {
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	330d      	adds	r3, #13
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	f083 0301 	eor.w	r3, r3, #1
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <_ZN17MessageRecomposer19all_frames_receivedEv+0x26>
            return false;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e008      	b.n	8001b72 <_ZN17MessageRecomposer19all_frames_receivedEv+0x38>
    for(int i=0; i<n_frames_; i++) {
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	3301      	adds	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	dbeb      	blt.n	8001b48 <_ZN17MessageRecomposer19all_frames_receivedEv+0xe>
        }
    }
    return true;
 8001b70:	2301      	movs	r3, #1
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <_Z21PWM_set_high_durationP11TIM_TypeDefi>:

#define SYS_CORE_CLOCK_HZ 170000000.
#define SYS_CORE_CLOCK_MHZ 170.


void PWM_set_high_duration(TIM_TypeDef *timx, int us) {
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
	timx->CCR1 = SYS_CORE_CLOCK_MHZ/(timx->PSC+1) * us;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b8e:	3301      	adds	r3, #1
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcd7 	bl	8000544 <__aeabi_ui2d>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	f04f 0000 	mov.w	r0, #0
 8001b9e:	490e      	ldr	r1, [pc, #56]	; (8001bd8 <_Z21PWM_set_high_durationP11TIM_TypeDefi+0x58>)
 8001ba0:	f7fe fe74 	bl	800088c <__aeabi_ddiv>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4614      	mov	r4, r2
 8001baa:	461d      	mov	r5, r3
 8001bac:	6838      	ldr	r0, [r7, #0]
 8001bae:	f7fe fcd9 	bl	8000564 <__aeabi_i2d>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	4629      	mov	r1, r5
 8001bba:	f7fe fd3d 	bl	8000638 <__aeabi_dmul>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7fe fff9 	bl	8000bbc <__aeabi_d2uiz>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd8:	40654000 	.word	0x40654000
 8001bdc:	00000000 	.word	0x00000000

08001be0 <_Z12PWM_set_freqP11TIM_TypeDefi>:

void PWM_set_freq(TIM_TypeDef *timx, int hz) {
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	int arr = SYS_CORE_CLOCK_HZ/((timx->PSC+1)*hz);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bee:	3301      	adds	r3, #1
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fca4 	bl	8000544 <__aeabi_ui2d>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	a10b      	add	r1, pc, #44	; (adr r1, 8001c30 <_Z12PWM_set_freqP11TIM_TypeDefi+0x50>)
 8001c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c06:	f7fe fe41 	bl	800088c <__aeabi_ddiv>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	4610      	mov	r0, r2
 8001c10:	4619      	mov	r1, r3
 8001c12:	f7fe ffab 	bl	8000b6c <__aeabi_d2iz>
 8001c16:	4603      	mov	r3, r0
 8001c18:	60fb      	str	r3, [r7, #12]
	timx->CNT = 0;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
	timx->ARR = arr;
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	00000000 	.word	0x00000000
 8001c34:	41a443fd 	.word	0x41a443fd

08001c38 <_ZN7StepperC1Ev>:

Stepper::Stepper() {}
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	4a04      	ldr	r2, [pc, #16]	; (8001c54 <_ZN7StepperC1Ev+0x1c>)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	0800b490 	.word	0x0800b490

08001c58 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>:

Stepper::Stepper(TIM_HandleTypeDef tim_handle_step, uint32_t tim_channel_step, GPIO_TypeDef *GPIOx_dir, uint16_t GPIO_Pin_dir) {
 8001c58:	b084      	sub	sp, #16
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	f107 0014 	add.w	r0, r7, #20
 8001c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8001c6a:	4a1b      	ldr	r2, [pc, #108]	; (8001cd8 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft+0x80>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
	this->tim_handle = tim_handle_step;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3304      	adds	r3, #4
 8001c74:	f107 0114 	add.w	r1, r7, #20
 8001c78:	224c      	movs	r2, #76	; 0x4c
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f008 fdd5 	bl	800a82a <memcpy>
	this->GPIOx_dir = GPIOx_dir;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001c84:	651a      	str	r2, [r3, #80]	; 0x50
	this->GPIO_Pin_dir = GPIO_Pin_dir;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8001c8c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	this->tim_channel = tim_channel_step;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c94:	659a      	str	r2, [r3, #88]	; 0x58
	HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f005 fd72 	bl	800778c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&this->tim_handle, this->tim_channel);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	1d1a      	adds	r2, r3, #4
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f006 fe50 	bl	8008958 <HAL_TIM_PWM_Start>

	this->current_dir = 0;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	661a      	str	r2, [r3, #96]	; 0x60
	this->stopped = true;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
}
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cd2:	b004      	add	sp, #16
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	0800b490 	.word	0x0800b490

08001cdc <_ZN7Stepper19set_speed_step_freqEii>:

void Stepper::set_speed_step_freq(int hz, int dir) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
	if(hz < 15){// todo calculer freq min automatiquement
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	2b0e      	cmp	r3, #14
 8001cec:	dc12      	bgt.n	8001d14 <_ZN7Stepper19set_speed_step_freqEii+0x38>
		if(!stopped) {
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001cf4:	f083 0301 	eor.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d036      	beq.n	8001d6c <_ZN7Stepper19set_speed_step_freqEii+0x90>
			PWM_set_high_duration(this->tim_handle.Instance, 0);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2100      	movs	r1, #0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff3b 	bl	8001b80 <_Z21PWM_set_high_durationP11TIM_TypeDefi>
			stopped = true;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		}
		return;
 8001d12:	e02b      	b.n	8001d6c <_ZN7Stepper19set_speed_step_freqEii+0x90>
	}
	if(stopped) {
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <_ZN7Stepper19set_speed_step_freqEii+0x56>
		// stepper stopped, start pwm
		PWM_set_high_duration(this->tim_handle.Instance, 10);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	210a      	movs	r1, #10
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff2b 	bl	8001b80 <_Z21PWM_set_high_durationP11TIM_TypeDefi>
		stopped = false;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
	}
	PWM_set_freq(this->tim_handle.Instance, hz);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	68b9      	ldr	r1, [r7, #8]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff ff51 	bl	8001be0 <_Z12PWM_set_freqP11TIM_TypeDefi>

	if(dir==1) {
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d109      	bne.n	8001d58 <_ZN7Stepper19set_speed_step_freqEii+0x7c>
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_SET);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4619      	mov	r1, r3
 8001d52:	f005 fd1b 	bl	800778c <HAL_GPIO_WritePin>
 8001d56:	e00a      	b.n	8001d6e <_ZN7Stepper19set_speed_step_freqEii+0x92>
	}else {
		HAL_GPIO_WritePin(this->GPIOx_dir, this->GPIO_Pin_dir, GPIO_PIN_RESET);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001d62:	2200      	movs	r2, #0
 8001d64:	4619      	mov	r1, r3
 8001d66:	f005 fd11 	bl	800778c <HAL_GPIO_WritePin>
 8001d6a:	e000      	b.n	8001d6e <_ZN7Stepper19set_speed_step_freqEii+0x92>
		return;
 8001d6c:	bf00      	nop
	}
}
 8001d6e:	3710      	adds	r7, #16
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_ZN7Stepper13set_speed_rpsEf>:

void Stepper::set_speed_rps(float rps) {
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	ed87 0a00 	vstr	s0, [r7]
	// 3200 steps per revolution
	int hz = rps * 3200.0;
 8001d80:	6838      	ldr	r0, [r7, #0]
 8001d82:	f7fe fc01 	bl	8000588 <__aeabi_f2d>
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <_ZN7Stepper13set_speed_rpsEf+0x54>)
 8001d8c:	f7fe fc54 	bl	8000638 <__aeabi_dmul>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4610      	mov	r0, r2
 8001d96:	4619      	mov	r1, r3
 8001d98:	f7fe fee8 	bl	8000b6c <__aeabi_d2iz>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	60fb      	str	r3, [r7, #12]
	if(hz>=0) {
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	db05      	blt.n	8001db2 <_ZN7Stepper13set_speed_rpsEf+0x3e>
		this->set_speed_step_freq(hz, 1);
 8001da6:	2201      	movs	r2, #1
 8001da8:	68f9      	ldr	r1, [r7, #12]
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ff96 	bl	8001cdc <_ZN7Stepper19set_speed_step_freqEii>
	}
	else {
		this->set_speed_step_freq(-hz, 0);
	}
}
 8001db0:	e006      	b.n	8001dc0 <_ZN7Stepper13set_speed_rpsEf+0x4c>
		this->set_speed_step_freq(-hz, 0);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	425b      	negs	r3, r3
 8001db6:	2200      	movs	r2, #0
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f7ff ff8e 	bl	8001cdc <_ZN7Stepper19set_speed_step_freqEii>
}
 8001dc0:	bf00      	nop
 8001dc2:	3710      	adds	r7, #16
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40a90000 	.word	0x40a90000

08001dcc <_ZN7StepperD1Ev>:

Stepper::~Stepper() {
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
 8001dd4:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <_ZN7StepperD1Ev+0x1c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	0800b490 	.word	0x0800b490

08001dec <_ZN7StepperD0Ev>:
Stepper::~Stepper() {
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
}
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ffe9 	bl	8001dcc <_ZN7StepperD1Ev>
 8001dfa:	2164      	movs	r1, #100	; 0x64
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f007 ffd9 	bl	8009db4 <_ZdlPvj>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
    if(htim->Instance == TIM6) {
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_TIM_PeriodElapsedCallback+0x16>
    	loop();
 8001e1e:	f000 f94d 	bl	80020bc <_Z4loopv>
    }
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40001000 	.word	0x40001000

08001e30 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b094      	sub	sp, #80	; 0x50
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
	if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f003 0301 	and.w	r3, r3, #1
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d035      	beq.n	8001eb0 <HAL_FDCAN_RxFifo0Callback+0x80>
	{
		/* Retrieve Rx messages from RX FIFO0 */
		FDCAN_RxHeaderTypeDef RxHeader;
		uint8_t RxData[8];

		if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 8001e44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e48:	f107 0208 	add.w	r2, r7, #8
 8001e4c:	2140      	movs	r1, #64	; 0x40
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f004 feb4 	bl	8006bbc <HAL_FDCAN_GetRxMessage>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bf14      	ite	ne
 8001e5a:	2301      	movne	r3, #1
 8001e5c:	2300      	moveq	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d004      	beq.n	8001e6e <HAL_FDCAN_RxFifo0Callback+0x3e>
			printf("error rx\n");
 8001e64:	4814      	ldr	r0, [pc, #80]	; (8001eb8 <HAL_FDCAN_RxFifo0Callback+0x88>)
 8001e66:	f008 fb31 	bl	800a4cc <puts>
			Error_Handler();
 8001e6a:	f000 fe67 	bl	8002b3c <Error_Handler>
		 * Pour le moment, on n'utilise pas de mutex ou de choses comme ça, donc il faut faire attention
		 * à ne pas modifier trop de variables partagées, et de priviligier la modifcation de variables
		 * de 32 bits ou moins (pour que leur modification soit une opération atomique)
		 * */

		if (RxHeader.Identifier == 0x10) {
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b10      	cmp	r3, #16
 8001e72:	d11d      	bne.n	8001eb0 <HAL_FDCAN_RxFifo0Callback+0x80>
			msg_recomposer_cmd_vel.add_frame(RxData, RxHeader.DataLength);
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480f      	ldr	r0, [pc, #60]	; (8001ebc <HAL_FDCAN_RxFifo0Callback+0x8c>)
 8001e80:	f7ff fd0e 	bl	80018a0 <_ZN17MessageRecomposer9add_frameEPhh>

			if(msg_recomposer_cmd_vel.check_if_new_full_msg()) {
 8001e84:	480d      	ldr	r0, [pc, #52]	; (8001ebc <HAL_FDCAN_RxFifo0Callback+0x8c>)
 8001e86:	f7ff fdd7 	bl	8001a38 <_ZN17MessageRecomposer21check_if_new_full_msgEv>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00f      	beq.n	8001eb0 <HAL_FDCAN_RxFifo0Callback+0x80>
				std::string proto_msg = msg_recomposer_cmd_vel.get_full_msg();
 8001e90:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e94:	4909      	ldr	r1, [pc, #36]	; (8001ebc <HAL_FDCAN_RxFifo0Callback+0x8c>)
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fdda 	bl	8001a50 <_ZN17MessageRecomposer12get_full_msgB5cxx11Ev>
				on_receive_cmd_vel(proto_msg);
 8001e9c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f80d 	bl	8001ec0 <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>

			}
 8001ea6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f008 f833 	bl	8009f16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
		}
	}
}
 8001eb0:	bf00      	nop
 8001eb2:	3750      	adds	r7, #80	; 0x50
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	0800b13c 	.word	0x0800b13c
 8001ebc:	200004d0 	.word	0x200004d0

08001ec0 <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void on_receive_cmd_vel(const std::string& proto_msg) {
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b091      	sub	sp, #68	; 0x44
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

	// Allocate space for the decoded message.
	msgs_can_BaseVel ret_cmd_vel = msgs_can_BaseVel_init_zero;
 8001ec8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ecc:	2200      	movs	r2, #0
 8001ece:	601a      	str	r2, [r3, #0]
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	609a      	str	r2, [r3, #8]
 8001ed4:	60da      	str	r2, [r3, #12]
 8001ed6:	611a      	str	r2, [r3, #16]
 8001ed8:	615a      	str	r2, [r3, #20]
	  // Create a stream that reads from the buffer.
	pb_istream_t stream_ret = pb_istream_from_buffer((const unsigned char*)proto_msg.c_str(), proto_msg.size());
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f008 f880 	bl	8009fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8001ee0:	4604      	mov	r4, r0
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f008 f84e 	bl	8009f84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f107 0318 	add.w	r3, r7, #24
 8001eee:	4621      	mov	r1, r4
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f001 fa75 	bl	80033e0 <pb_istream_from_buffer>
	  // Now we are ready to decode the message.
	 if (!pb_decode(&stream_ret, msgs_can_BaseVel_fields, &ret_cmd_vel)) {
 8001ef6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001efa:	f107 0318 	add.w	r3, r7, #24
 8001efe:	4917      	ldr	r1, [pc, #92]	; (8001f5c <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x9c>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 fba7 	bl	8004654 <pb_decode>
 8001f06:	4603      	mov	r3, r0
 8001f08:	f083 0301 	eor.w	r3, r3, #1
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00b      	beq.n	8001f2a <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x6a>
		 printf("Decoding failed: %s\n", PB_GET_ERROR(&stream_ret));
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5c>
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	e000      	b.n	8001f1e <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x5e>
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa0>)
 8001f1e:	4619      	mov	r1, r3
 8001f20:	4810      	ldr	r0, [pc, #64]	; (8001f64 <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa4>)
 8001f22:	f008 fa6d 	bl	800a400 <iprintf>
		 Error_Handler();
 8001f26:	f000 fe09 	bl	8002b3c <Error_Handler>
	 }

	// Use message
	Vel cmd_vel = {ret_cmd_vel.x, ret_cmd_vel.y, ret_cmd_vel.theta};
 8001f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f30:	613b      	str	r3, [r7, #16]
 8001f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f34:	617b      	str	r3, [r7, #20]
	holo_drive.set_cmd_vel(cmd_vel);
 8001f36:	edd7 6a03 	vldr	s13, [r7, #12]
 8001f3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f3e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f42:	eeb0 0a66 	vmov.f32	s0, s13
 8001f46:	eef0 0a47 	vmov.f32	s1, s14
 8001f4a:	eeb0 1a67 	vmov.f32	s2, s15
 8001f4e:	4806      	ldr	r0, [pc, #24]	; (8001f68 <_Z18on_receive_cmd_velRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa8>)
 8001f50:	f7ff f97c 	bl	800124c <_ZN15HolonomicDrive311set_cmd_velE3Vel>
}
 8001f54:	bf00      	nop
 8001f56:	3744      	adds	r7, #68	; 0x44
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd90      	pop	{r4, r7, pc}
 8001f5c:	0800b4ac 	.word	0x0800b4ac
 8001f60:	0800b148 	.word	0x0800b148
 8001f64:	0800b150 	.word	0x0800b150
 8001f68:	20000348 	.word	0x20000348

08001f6c <_Z12transmit_vel3Vel>:

void transmit_vel(Vel vel) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b092      	sub	sp, #72	; 0x48
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	eef0 6a40 	vmov.f32	s13, s0
 8001f76:	eeb0 7a60 	vmov.f32	s14, s1
 8001f7a:	eef0 7a41 	vmov.f32	s15, s2
 8001f7e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001f82:	ed87 7a02 	vstr	s14, [r7, #8]
 8001f86:	edc7 7a03 	vstr	s15, [r7, #12]

	// Init message
	msgs_can_BaseVel vel_proto = msgs_can_BaseVel_init_zero;
 8001f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	609a      	str	r2, [r3, #8]
 8001f96:	60da      	str	r2, [r3, #12]
 8001f98:	611a      	str	r2, [r3, #16]
 8001f9a:	615a      	str	r2, [r3, #20]
	pb_ostream_t stream = pb_ostream_from_buffer(buffer_encode_tx_vel, sizeof(buffer_encode_tx_vel));
 8001f9c:	f107 0314 	add.w	r3, r7, #20
 8001fa0:	221e      	movs	r2, #30
 8001fa2:	4925      	ldr	r1, [pc, #148]	; (8002038 <_Z12transmit_vel3Vel+0xcc>)
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f002 ff27 	bl	8004df8 <pb_ostream_from_buffer>

	// Fill message
	vel_proto.x = vel.x;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	62fb      	str	r3, [r7, #44]	; 0x2c
	vel_proto.y = vel.y;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	637b      	str	r3, [r7, #52]	; 0x34
	vel_proto.theta = vel.theta;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
	vel_proto.has_x = true;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	vel_proto.has_y = true;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	vel_proto.has_theta = true;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38

	// Encode message
	bool status = pb_encode(&stream, msgs_can_BaseVel_fields, &vel_proto);
 8001fc8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	491a      	ldr	r1, [pc, #104]	; (800203c <_Z12transmit_vel3Vel+0xd0>)
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f003 fb7d 	bl	80056d2 <pb_encode>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	size_t message_length = stream.bytes_written;
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	643b      	str	r3, [r7, #64]	; 0x40

	// Check for errors
	if (!status)  {
 8001fe2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001fe6:	f083 0301 	eor.w	r3, r3, #1
 8001fea:	b2db      	uxtb	r3, r3
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d00b      	beq.n	8002008 <_Z12transmit_vel3Vel+0x9c>
		printf("Encoding failed: %s\n", PB_GET_ERROR(&stream));
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d001      	beq.n	8001ffa <_Z12transmit_vel3Vel+0x8e>
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	e000      	b.n	8001ffc <_Z12transmit_vel3Vel+0x90>
 8001ffa:	4b11      	ldr	r3, [pc, #68]	; (8002040 <_Z12transmit_vel3Vel+0xd4>)
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4811      	ldr	r0, [pc, #68]	; (8002044 <_Z12transmit_vel3Vel+0xd8>)
 8002000:	f008 f9fe 	bl	800a400 <iprintf>
		Error_Handler();
 8002004:	f000 fd9a 	bl	8002b3c <Error_Handler>
	}

	// Send
	if (champi_can.send_msg(0x11, (uint8_t*) buffer_encode_tx_vel, message_length) !=0) {
 8002008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200a:	4a0b      	ldr	r2, [pc, #44]	; (8002038 <_Z12transmit_vel3Vel+0xcc>)
 800200c:	2111      	movs	r1, #17
 800200e:	480e      	ldr	r0, [pc, #56]	; (8002048 <_Z12transmit_vel3Vel+0xdc>)
 8002010:	f7fe ff0c 	bl	8000e2c <_ZN9ChampiCan8send_msgEmPhm>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf14      	ite	ne
 800201a:	2301      	movne	r3, #1
 800201c:	2300      	moveq	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d004      	beq.n	800202e <_Z12transmit_vel3Vel+0xc2>
	/* Transmission request Error */
		printf("ERROR: msg not sent\n");
 8002024:	4809      	ldr	r0, [pc, #36]	; (800204c <_Z12transmit_vel3Vel+0xe0>)
 8002026:	f008 fa51 	bl	800a4cc <puts>
		Error_Handler();
 800202a:	f000 fd87 	bl	8002b3c <Error_Handler>
	}
}
 800202e:	bf00      	nop
 8002030:	3748      	adds	r7, #72	; 0x48
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200006ec 	.word	0x200006ec
 800203c:	0800b4ac 	.word	0x0800b4ac
 8002040:	0800b148 	.word	0x0800b148
 8002044:	0800b168 	.word	0x0800b168
 8002048:	200004a4 	.word	0x200004a4
 800204c:	0800b180 	.word	0x0800b180

08002050 <_Z13set_loop_freqi>:

void set_loop_freq(int hz) {
 8002050:	b5b0      	push	{r4, r5, r7, lr}
 8002052:	b082      	sub	sp, #8
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
	htim6.Instance->ARR = SYS_CORE_CLOCK_HZ / (htim6.Instance->PSC+1) / hz;
 8002058:	4b17      	ldr	r3, [pc, #92]	; (80020b8 <_Z13set_loop_freqi+0x68>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	3301      	adds	r3, #1
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa6f 	bl	8000544 <__aeabi_ui2d>
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	a111      	add	r1, pc, #68	; (adr r1, 80020b0 <_Z13set_loop_freqi+0x60>)
 800206c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002070:	f7fe fc0c 	bl	800088c <__aeabi_ddiv>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4614      	mov	r4, r2
 800207a:	461d      	mov	r5, r3
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7fe fa71 	bl	8000564 <__aeabi_i2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	f7fe fbff 	bl	800088c <__aeabi_ddiv>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4909      	ldr	r1, [pc, #36]	; (80020b8 <_Z13set_loop_freqi+0x68>)
 8002094:	680c      	ldr	r4, [r1, #0]
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	f7fe fd8f 	bl	8000bbc <__aeabi_d2uiz>
 800209e:	4603      	mov	r3, r0
 80020a0:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 80020a2:	bf00      	nop
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bdb0      	pop	{r4, r5, r7, pc}
 80020aa:	bf00      	nop
 80020ac:	f3af 8000 	nop.w
 80020b0:	00000000 	.word	0x00000000
 80020b4:	41a443fd 	.word	0x41a443fd
 80020b8:	20000138 	.word	0x20000138

080020bc <_Z4loopv>:

void loop() {
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0

	holo_drive.spin_once_motors_control();
 80020c2:	4812      	ldr	r0, [pc, #72]	; (800210c <_Z4loopv+0x50>)
 80020c4:	f7ff f9d8 	bl	8001478 <_ZN15HolonomicDrive324spin_once_motors_controlEv>

	transmit_vel(holo_drive.get_current_vel());
 80020c8:	4810      	ldr	r0, [pc, #64]	; (800210c <_Z4loopv+0x50>)
 80020ca:	f7ff fa99 	bl	8001600 <_ZN15HolonomicDrive315get_current_velEv>
 80020ce:	eef0 6a40 	vmov.f32	s13, s0
 80020d2:	eeb0 7a60 	vmov.f32	s14, s1
 80020d6:	eef0 7a41 	vmov.f32	s15, s2
 80020da:	edc7 6a01 	vstr	s13, [r7, #4]
 80020de:	ed87 7a02 	vstr	s14, [r7, #8]
 80020e2:	edc7 7a03 	vstr	s15, [r7, #12]
 80020e6:	edd7 6a01 	vldr	s13, [r7, #4]
 80020ea:	ed97 7a02 	vldr	s14, [r7, #8]
 80020ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80020f2:	eeb0 0a66 	vmov.f32	s0, s13
 80020f6:	eef0 0a47 	vmov.f32	s1, s14
 80020fa:	eeb0 1a67 	vmov.f32	s2, s15
 80020fe:	f7ff ff35 	bl	8001f6c <_Z12transmit_vel3Vel>

}
 8002102:	bf00      	nop
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000348 	.word	0x20000348

08002110 <_ZN15HolonomicDrive3aSERKS_>:
	float x = 0;
	float y = 0;
	float theta = 0;
};

class HolonomicDrive3 {
 8002110:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	6039      	str	r1, [r7, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	1d1a      	adds	r2, r3, #4
 800211e:	2502      	movs	r5, #2
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	1d1c      	adds	r4, r3, #4
 8002124:	4616      	mov	r6, r2
 8002126:	e006      	b.n	8002136 <_ZN15HolonomicDrive3aSERKS_+0x26>
 8002128:	4621      	mov	r1, r4
 800212a:	4630      	mov	r0, r6
 800212c:	f7fe fff2 	bl	8001114 <_ZN7StepperaSERKS_>
 8002130:	3664      	adds	r6, #100	; 0x64
 8002132:	3464      	adds	r4, #100	; 0x64
 8002134:	3d01      	subs	r5, #1
 8002136:	2d00      	cmp	r5, #0
 8002138:	daf6      	bge.n	8002128 <_ZN15HolonomicDrive3aSERKS_+0x18>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800215a:	f502 729c 	add.w	r2, r2, #312	; 0x138
 800215e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002160:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f503 71a2 	add.w	r1, r3, #324	; 0x144
 800216a:	2202      	movs	r2, #2
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8002172:	e004      	b.n	800217e <_ZN15HolonomicDrive3aSERKS_+0x6e>
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	6008      	str	r0, [r1, #0]
 8002178:	3104      	adds	r1, #4
 800217a:	3304      	adds	r3, #4
 800217c:	3a01      	subs	r2, #1
 800217e:	2a00      	cmp	r2, #0
 8002180:	daf8      	bge.n	8002174 <_ZN15HolonomicDrive3aSERKS_+0x64>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800218a:	f502 72a8 	add.w	r2, r2, #336	; 0x150
 800218e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002190:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800219e <_ZN9ChampiCanaSERKS_>:
#ifndef INC_CHAMPICAN_H_
#define INC_CHAMPICAN_H_

#include "stm32g4xx_hal.h"

class ChampiCan {
 800219e:	b4b0      	push	{r4, r5, r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	6039      	str	r1, [r7, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685a      	ldr	r2, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	f102 0408 	add.w	r4, r2, #8
 80021b8:	f103 0508 	add.w	r5, r3, #8
 80021bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80021c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021c4:	682b      	ldr	r3, [r5, #0]
 80021c6:	6023      	str	r3, [r4, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bcb0      	pop	{r4, r5, r7}
 80021d2:	4770      	bx	lr

080021d4 <_ZN17MessageRecomposeraSERKS_>:
 */
#define MAX_LENGTH_MSG 20

#include "string"

class MessageRecomposer {
 80021d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	605a      	str	r2, [r3, #4]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	609a      	str	r2, [r3, #8]
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	7b1a      	ldrb	r2, [r3, #12]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	731a      	strb	r2, [r3, #12]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f103 010d 	add.w	r1, r3, #13
 80021fc:	2213      	movs	r2, #19
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	330d      	adds	r3, #13
 8002202:	e004      	b.n	800220e <_ZN17MessageRecomposeraSERKS_+0x3a>
 8002204:	7818      	ldrb	r0, [r3, #0]
 8002206:	7008      	strb	r0, [r1, #0]
 8002208:	3101      	adds	r1, #1
 800220a:	3301      	adds	r3, #1
 800220c:	3a01      	subs	r2, #1
 800220e:	2a00      	cmp	r2, #0
 8002210:	daf8      	bge.n	8002204 <_ZN17MessageRecomposeraSERKS_+0x30>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8002218:	2513      	movs	r5, #19
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f103 0424 	add.w	r4, r3, #36	; 0x24
 8002220:	4616      	mov	r6, r2
 8002222:	e006      	b.n	8002232 <_ZN17MessageRecomposeraSERKS_+0x5e>
 8002224:	4621      	mov	r1, r4
 8002226:	4630      	mov	r0, r6
 8002228:	f007 fe7b 	bl	8009f22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800222c:	3618      	adds	r6, #24
 800222e:	3418      	adds	r4, #24
 8002230:	3d01      	subs	r5, #1
 8002232:	2d00      	cmp	r5, #0
 8002234:	daf6      	bge.n	8002224 <_ZN17MessageRecomposeraSERKS_+0x50>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f503 7201 	add.w	r2, r3, #516	; 0x204
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002242:	4619      	mov	r1, r3
 8002244:	4610      	mov	r0, r2
 8002246:	f007 fe6c 	bl	8009f22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002254:	0000      	movs	r0, r0
	...

08002258 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002258:	b5f0      	push	{r4, r5, r6, r7, lr}
 800225a:	f2ad 5d24 	subw	sp, sp, #1316	; 0x524
 800225e:	af14      	add	r7, sp, #80	; 0x50
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002260:	f004 f943 	bl	80064ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002264:	f000 f8e8 	bl	8002438 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002268:	f000 fc04 	bl	8002a74 <_ZL12MX_GPIO_Initv>
  MX_TIM1_Init();
 800226c:	f000 f986 	bl	800257c <_ZL12MX_TIM1_Initv>
  MX_TIM8_Init();
 8002270:	f000 fa94 	bl	800279c <_ZL12MX_TIM8_Initv>
  MX_TIM6_Init();
 8002274:	f000 fa52 	bl	800271c <_ZL12MX_TIM6_Initv>
  MX_FDCAN1_Init();
 8002278:	f000 f934 	bl	80024e4 <_ZL14MX_FDCAN1_Initv>
  MX_TIM15_Init();
 800227c:	f000 fb5e 	bl	800293c <_ZL13MX_TIM15_Initv>
  /* USER CODE BEGIN 2 */

  stepper0 = Stepper(htim8, TIM_CHANNEL_1, GPIOA, GPIO_PIN_4);
 8002280:	4e61      	ldr	r6, [pc, #388]	; (8002408 <main+0x1b0>)
 8002282:	46bc      	mov	ip, r7
 8002284:	2310      	movs	r3, #16
 8002286:	9312      	str	r3, [sp, #72]	; 0x48
 8002288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800228c:	9311      	str	r3, [sp, #68]	; 0x44
 800228e:	2300      	movs	r3, #0
 8002290:	9310      	str	r3, [sp, #64]	; 0x40
 8002292:	466d      	mov	r5, sp
 8002294:	f106 040c 	add.w	r4, r6, #12
 8002298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800229c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800229e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80022ac:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80022b0:	4660      	mov	r0, ip
 80022b2:	f7ff fcd1 	bl	8001c58 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 80022b6:	463b      	mov	r3, r7
 80022b8:	4619      	mov	r1, r3
 80022ba:	4854      	ldr	r0, [pc, #336]	; (800240c <main+0x1b4>)
 80022bc:	f7fe ff2a 	bl	8001114 <_ZN7StepperaSERKS_>
 80022c0:	463b      	mov	r3, r7
 80022c2:	4618      	mov	r0, r3
 80022c4:	f7ff fd82 	bl	8001dcc <_ZN7StepperD1Ev>
  stepper1 = Stepper(htim1, TIM_CHANNEL_1, GPIOA, GPIO_PIN_0);
 80022c8:	4e51      	ldr	r6, [pc, #324]	; (8002410 <main+0x1b8>)
 80022ca:	f107 0c64 	add.w	ip, r7, #100	; 0x64
 80022ce:	2301      	movs	r3, #1
 80022d0:	9312      	str	r3, [sp, #72]	; 0x48
 80022d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80022d6:	9311      	str	r3, [sp, #68]	; 0x44
 80022d8:	2300      	movs	r3, #0
 80022da:	9310      	str	r3, [sp, #64]	; 0x40
 80022dc:	466d      	mov	r5, sp
 80022de:	f106 040c 	add.w	r4, r6, #12
 80022e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022ee:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022f2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80022f6:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 80022fa:	4660      	mov	r0, ip
 80022fc:	f7ff fcac 	bl	8001c58 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 8002300:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002304:	4619      	mov	r1, r3
 8002306:	4843      	ldr	r0, [pc, #268]	; (8002414 <main+0x1bc>)
 8002308:	f7fe ff04 	bl	8001114 <_ZN7StepperaSERKS_>
 800230c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fd5b 	bl	8001dcc <_ZN7StepperD1Ev>
  stepper2 = Stepper(htim15, TIM_CHANNEL_1, GPIOA, GPIO_PIN_1);
 8002316:	4e40      	ldr	r6, [pc, #256]	; (8002418 <main+0x1c0>)
 8002318:	f107 0cc8 	add.w	ip, r7, #200	; 0xc8
 800231c:	2302      	movs	r3, #2
 800231e:	9312      	str	r3, [sp, #72]	; 0x48
 8002320:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002324:	9311      	str	r3, [sp, #68]	; 0x44
 8002326:	2300      	movs	r3, #0
 8002328:	9310      	str	r3, [sp, #64]	; 0x40
 800232a:	466d      	mov	r5, sp
 800232c:	f106 040c 	add.w	r4, r6, #12
 8002330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002340:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8002344:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8002348:	4660      	mov	r0, ip
 800234a:	f7ff fc85 	bl	8001c58 <_ZN7StepperC1E17TIM_HandleTypeDefmP12GPIO_TypeDeft>
 800234e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002352:	4619      	mov	r1, r3
 8002354:	4831      	ldr	r0, [pc, #196]	; (800241c <main+0x1c4>)
 8002356:	f7fe fedd 	bl	8001114 <_ZN7StepperaSERKS_>
 800235a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fd34 	bl	8001dcc <_ZN7StepperD1Ev>

  holo_drive = HolonomicDrive3(stepper0, stepper1, stepper2, 0.029, 0.175);
 8002364:	f507 7096 	add.w	r0, r7, #300	; 0x12c
 8002368:	ed9f 1a2d 	vldr	s2, [pc, #180]	; 8002420 <main+0x1c8>
 800236c:	ed9f 0b24 	vldr	d0, [pc, #144]	; 8002400 <main+0x1a8>
 8002370:	4b2a      	ldr	r3, [pc, #168]	; (800241c <main+0x1c4>)
 8002372:	4a28      	ldr	r2, [pc, #160]	; (8002414 <main+0x1bc>)
 8002374:	4925      	ldr	r1, [pc, #148]	; (800240c <main+0x1b4>)
 8002376:	f7fe fef7 	bl	8001168 <_ZN15HolonomicDrive3C1ERK7StepperS2_S2_df>
 800237a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800237e:	4619      	mov	r1, r3
 8002380:	4828      	ldr	r0, [pc, #160]	; (8002424 <main+0x1cc>)
 8002382:	f7ff fec5 	bl	8002110 <_ZN15HolonomicDrive3aSERKS_>
 8002386:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fa34 	bl	80017f8 <_ZN15HolonomicDrive3D1Ev>

  champi_can = ChampiCan(&hfdcan1);
 8002390:	f507 7322 	add.w	r3, r7, #648	; 0x288
 8002394:	4924      	ldr	r1, [pc, #144]	; (8002428 <main+0x1d0>)
 8002396:	4618      	mov	r0, r3
 8002398:	f7fe fc80 	bl	8000c9c <_ZN9ChampiCanC1EP19FDCAN_HandleTypeDef>
 800239c:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80023a0:	4619      	mov	r1, r3
 80023a2:	4822      	ldr	r0, [pc, #136]	; (800242c <main+0x1d4>)
 80023a4:	f7ff fefb 	bl	800219e <_ZN9ChampiCanaSERKS_>
 80023a8:	f507 7322 	add.w	r3, r7, #648	; 0x288
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe fdd7 	bl	8000f60 <_ZN9ChampiCanD1Ev>
  msg_recomposer_cmd_vel = MessageRecomposer();
 80023b2:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fa52 	bl	8001860 <_ZN17MessageRecomposerC1Ev>
 80023bc:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80023c0:	4619      	mov	r1, r3
 80023c2:	481b      	ldr	r0, [pc, #108]	; (8002430 <main+0x1d8>)
 80023c4:	f7ff ff06 	bl	80021d4 <_ZN17MessageRecomposeraSERKS_>
 80023c8:	f507 732d 	add.w	r3, r7, #692	; 0x2b4
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7ff fb53 	bl	8001a78 <_ZN17MessageRecomposerD1Ev>


  if(champi_can.start() != 0) {
 80023d2:	4816      	ldr	r0, [pc, #88]	; (800242c <main+0x1d4>)
 80023d4:	f7fe fcac 	bl	8000d30 <_ZN9ChampiCan5startEv>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	bf14      	ite	ne
 80023de:	2301      	movne	r3, #1
 80023e0:	2300      	moveq	r3, #0
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <main+0x194>
       * cette fonction, et d'autre part, réagir à cette erreur, c'est peut être la rendre inaperçue.
       * Pour l'instant, on appelle l'error handler par défaut, et peut être à la coupe, on mettra lui en plus
       * vu que de toute facon ce sera plus trop le temps de deboguer
      */
	  //error_handler_can_init();
      Error_Handler();
 80023e8:	f000 fba8 	bl	8002b3c <Error_Handler>
  }

  set_loop_freq(100);
 80023ec:	2064      	movs	r0, #100	; 0x64
 80023ee:	f7ff fe2f 	bl	8002050 <_Z13set_loop_freqi>
  HAL_TIM_Base_Start_IT(&htim6);
 80023f2:	4810      	ldr	r0, [pc, #64]	; (8002434 <main+0x1dc>)
 80023f4:	f006 f9ee 	bl	80087d4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (true)
 80023f8:	e7fe      	b.n	80023f8 <main+0x1a0>
 80023fa:	bf00      	nop
 80023fc:	f3af 8000 	nop.w
 8002400:	0e560419 	.word	0x0e560419
 8002404:	3f9db22d 	.word	0x3f9db22d
 8002408:	20000184 	.word	0x20000184
 800240c:	2000021c 	.word	0x2000021c
 8002410:	200000ec 	.word	0x200000ec
 8002414:	20000280 	.word	0x20000280
 8002418:	200001d0 	.word	0x200001d0
 800241c:	200002e4 	.word	0x200002e4
 8002420:	3e333333 	.word	0x3e333333
 8002424:	20000348 	.word	0x20000348
 8002428:	20000088 	.word	0x20000088
 800242c:	200004a4 	.word	0x200004a4
 8002430:	200004d0 	.word	0x200004d0
 8002434:	20000138 	.word	0x20000138

08002438 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b094      	sub	sp, #80	; 0x50
 800243c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800243e:	f107 0318 	add.w	r3, r7, #24
 8002442:	2238      	movs	r2, #56	; 0x38
 8002444:	2100      	movs	r1, #0
 8002446:	4618      	mov	r0, r3
 8002448:	f008 f920 	bl	800a68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800244c:	1d3b      	adds	r3, r7, #4
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	605a      	str	r2, [r3, #4]
 8002454:	609a      	str	r2, [r3, #8]
 8002456:	60da      	str	r2, [r3, #12]
 8002458:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800245a:	2000      	movs	r0, #0
 800245c:	f005 f9c8 	bl	80077f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002460:	2302      	movs	r3, #2
 8002462:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002464:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002468:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800246a:	2340      	movs	r3, #64	; 0x40
 800246c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800246e:	2302      	movs	r3, #2
 8002470:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002472:	2302      	movs	r3, #2
 8002474:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8002476:	2304      	movs	r3, #4
 8002478:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800247a:	2355      	movs	r3, #85	; 0x55
 800247c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800247e:	2302      	movs	r3, #2
 8002480:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002482:	2302      	movs	r3, #2
 8002484:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002486:	2302      	movs	r3, #2
 8002488:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800248a:	f107 0318 	add.w	r3, r7, #24
 800248e:	4618      	mov	r0, r3
 8002490:	f005 fa62 	bl	8007958 <HAL_RCC_OscConfig>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	bf14      	ite	ne
 800249a:	2301      	movne	r3, #1
 800249c:	2300      	moveq	r3, #0
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <_Z18SystemClock_Configv+0x70>
  {
    Error_Handler();
 80024a4:	f000 fb4a 	bl	8002b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024a8:	230f      	movs	r3, #15
 80024aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024ac:	2303      	movs	r3, #3
 80024ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80024b4:	2300      	movs	r3, #0
 80024b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80024bc:	1d3b      	adds	r3, r7, #4
 80024be:	2104      	movs	r1, #4
 80024c0:	4618      	mov	r0, r3
 80024c2:	f005 fd5b 	bl	8007f7c <HAL_RCC_ClockConfig>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	bf14      	ite	ne
 80024cc:	2301      	movne	r3, #1
 80024ce:	2300      	moveq	r3, #0
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 80024d6:	f000 fb31 	bl	8002b3c <Error_Handler>
  }
}
 80024da:	bf00      	nop
 80024dc:	3750      	adds	r7, #80	; 0x50
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <_ZL14MX_FDCAN1_Initv>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80024e8:	4b22      	ldr	r3, [pc, #136]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 80024ea:	4a23      	ldr	r2, [pc, #140]	; (8002578 <_ZL14MX_FDCAN1_Initv+0x94>)
 80024ec:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80024ee:	4b21      	ldr	r3, [pc, #132]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80024f4:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80024fa:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8002500:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002502:	2201      	movs	r2, #1
 8002504:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8002506:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002508:	2200      	movs	r2, #0
 800250a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800250c:	4b19      	ldr	r3, [pc, #100]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 800250e:	2200      	movs	r2, #0
 8002510:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 10;
 8002512:	4b18      	ldr	r3, [pc, #96]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002514:	220a      	movs	r2, #10
 8002516:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002518:	4b16      	ldr	r3, [pc, #88]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 800251a:	2201      	movs	r2, #1
 800251c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 14;
 800251e:	4b15      	ldr	r3, [pc, #84]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002520:	220e      	movs	r2, #14
 8002522:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8002524:	4b13      	ldr	r3, [pc, #76]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002526:	2202      	movs	r2, #2
 8002528:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 800252c:	220a      	movs	r2, #10
 800252e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8002530:	4b10      	ldr	r3, [pc, #64]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002532:	2201      	movs	r2, #1
 8002534:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 14;
 8002536:	4b0f      	ldr	r3, [pc, #60]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002538:	220e      	movs	r2, #14
 800253a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 2;
 800253c:	4b0d      	ldr	r3, [pc, #52]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 800253e:	2202      	movs	r2, #2
 8002540:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002544:	2200      	movs	r2, #0
 8002546:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8002548:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 800254a:	2200      	movs	r2, #0
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002550:	2200      	movs	r2, #0
 8002552:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002554:	4807      	ldr	r0, [pc, #28]	; (8002574 <_ZL14MX_FDCAN1_Initv+0x90>)
 8002556:	f004 f96b 	bl	8006830 <HAL_FDCAN_Init>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d001      	beq.n	800256e <_ZL14MX_FDCAN1_Initv+0x8a>
  {
    Error_Handler();
 800256a:	f000 fae7 	bl	8002b3c <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 800256e:	bf00      	nop
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000088 	.word	0x20000088
 8002578:	40006400 	.word	0x40006400

0800257c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b09c      	sub	sp, #112	; 0x70
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002582:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8002586:	2200      	movs	r2, #0
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	605a      	str	r2, [r3, #4]
 800258c:	609a      	str	r2, [r3, #8]
 800258e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002590:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800259c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
 80025ac:	615a      	str	r2, [r3, #20]
 80025ae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025b0:	1d3b      	adds	r3, r7, #4
 80025b2:	2234      	movs	r2, #52	; 0x34
 80025b4:	2100      	movs	r1, #0
 80025b6:	4618      	mov	r0, r3
 80025b8:	f008 f868 	bl	800a68c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80025bc:	4b55      	ldr	r3, [pc, #340]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 80025be:	4a56      	ldr	r2, [pc, #344]	; (8002718 <_ZL12MX_TIM1_Initv+0x19c>)
 80025c0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 260;
 80025c2:	4b54      	ldr	r3, [pc, #336]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 80025c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80025c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ca:	4b52      	ldr	r3, [pc, #328]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80025d0:	4b50      	ldr	r3, [pc, #320]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 80025d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80025d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025d8:	4b4e      	ldr	r3, [pc, #312]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 80025da:	2200      	movs	r2, #0
 80025dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80025de:	4b4d      	ldr	r3, [pc, #308]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025e4:	4b4b      	ldr	r3, [pc, #300]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80025ea:	484a      	ldr	r0, [pc, #296]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 80025ec:	f006 f89a 	bl	8008724 <HAL_TIM_Base_Init>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bf14      	ite	ne
 80025f6:	2301      	movne	r3, #1
 80025f8:	2300      	moveq	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <_ZL12MX_TIM1_Initv+0x88>
  {
    Error_Handler();
 8002600:	f000 fa9c 	bl	8002b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002604:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002608:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800260a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800260e:	4619      	mov	r1, r3
 8002610:	4840      	ldr	r0, [pc, #256]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 8002612:	f006 fd05 	bl	8009020 <HAL_TIM_ConfigClockSource>
 8002616:	4603      	mov	r3, r0
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf14      	ite	ne
 800261c:	2301      	movne	r3, #1
 800261e:	2300      	moveq	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8002626:	f000 fa89 	bl	8002b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800262a:	483a      	ldr	r0, [pc, #232]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 800262c:	f006 f93c 	bl	80088a8 <HAL_TIM_PWM_Init>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	bf14      	ite	ne
 8002636:	2301      	movne	r3, #1
 8002638:	2300      	moveq	r3, #0
 800263a:	b2db      	uxtb	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <_ZL12MX_TIM1_Initv+0xc8>
  {
    Error_Handler();
 8002640:	f000 fa7c 	bl	8002b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002644:	2300      	movs	r3, #0
 8002646:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800264c:	2300      	movs	r3, #0
 800264e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002650:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002654:	4619      	mov	r1, r3
 8002656:	482f      	ldr	r0, [pc, #188]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 8002658:	f007 fa58 	bl	8009b0c <HAL_TIMEx_MasterConfigSynchronization>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	bf14      	ite	ne
 8002662:	2301      	movne	r3, #1
 8002664:	2300      	moveq	r3, #0
 8002666:	b2db      	uxtb	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d001      	beq.n	8002670 <_ZL12MX_TIM1_Initv+0xf4>
  {
    Error_Handler();
 800266c:	f000 fa66 	bl	8002b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002670:	2360      	movs	r3, #96	; 0x60
 8002672:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002678:	2300      	movs	r3, #0
 800267a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800267c:	2300      	movs	r3, #0
 800267e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002680:	2300      	movs	r3, #0
 8002682:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002684:	2300      	movs	r3, #0
 8002686:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002688:	2300      	movs	r3, #0
 800268a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800268c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002690:	2200      	movs	r2, #0
 8002692:	4619      	mov	r1, r3
 8002694:	481f      	ldr	r0, [pc, #124]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 8002696:	f006 fbaf 	bl	8008df8 <HAL_TIM_PWM_ConfigChannel>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	bf14      	ite	ne
 80026a0:	2301      	movne	r3, #1
 80026a2:	2300      	moveq	r3, #0
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 80026aa:	f000 fa47 	bl	8002b3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80026ae:	2300      	movs	r3, #0
 80026b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80026b6:	2300      	movs	r3, #0
 80026b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80026c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80026c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80026cc:	2300      	movs	r3, #0
 80026ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80026d0:	2300      	movs	r3, #0
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80026d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80026da:	2300      	movs	r3, #0
 80026dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80026de:	2300      	movs	r3, #0
 80026e0:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80026e6:	1d3b      	adds	r3, r7, #4
 80026e8:	4619      	mov	r1, r3
 80026ea:	480a      	ldr	r0, [pc, #40]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 80026ec:	f007 fa90 	bl	8009c10 <HAL_TIMEx_ConfigBreakDeadTime>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf14      	ite	ne
 80026f6:	2301      	movne	r3, #1
 80026f8:	2300      	moveq	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <_ZL12MX_TIM1_Initv+0x188>
  {
    Error_Handler();
 8002700:	f000 fa1c 	bl	8002b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002704:	4803      	ldr	r0, [pc, #12]	; (8002714 <_ZL12MX_TIM1_Initv+0x198>)
 8002706:	f003 fd2f 	bl	8006168 <HAL_TIM_MspPostInit>

}
 800270a:	bf00      	nop
 800270c:	3770      	adds	r7, #112	; 0x70
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200000ec 	.word	0x200000ec
 8002718:	40012c00 	.word	0x40012c00

0800271c <_ZL12MX_TIM6_Initv>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	605a      	str	r2, [r3, #4]
 800272a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <_ZL12MX_TIM6_Initv+0x78>)
 800272e:	4a1a      	ldr	r2, [pc, #104]	; (8002798 <_ZL12MX_TIM6_Initv+0x7c>)
 8002730:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 100;
 8002732:	4b18      	ldr	r3, [pc, #96]	; (8002794 <_ZL12MX_TIM6_Initv+0x78>)
 8002734:	2264      	movs	r2, #100	; 0x64
 8002736:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002738:	4b16      	ldr	r3, [pc, #88]	; (8002794 <_ZL12MX_TIM6_Initv+0x78>)
 800273a:	2200      	movs	r2, #0
 800273c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <_ZL12MX_TIM6_Initv+0x78>)
 8002740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002744:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002746:	4b13      	ldr	r3, [pc, #76]	; (8002794 <_ZL12MX_TIM6_Initv+0x78>)
 8002748:	2200      	movs	r2, #0
 800274a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800274c:	4811      	ldr	r0, [pc, #68]	; (8002794 <_ZL12MX_TIM6_Initv+0x78>)
 800274e:	f005 ffe9 	bl	8008724 <HAL_TIM_Base_Init>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	bf14      	ite	ne
 8002758:	2301      	movne	r3, #1
 800275a:	2300      	moveq	r3, #0
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <_ZL12MX_TIM6_Initv+0x4a>
  {
    Error_Handler();
 8002762:	f000 f9eb 	bl	8002b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800276a:	2300      	movs	r3, #0
 800276c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	4619      	mov	r1, r3
 8002772:	4808      	ldr	r0, [pc, #32]	; (8002794 <_ZL12MX_TIM6_Initv+0x78>)
 8002774:	f007 f9ca 	bl	8009b0c <HAL_TIMEx_MasterConfigSynchronization>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	bf14      	ite	ne
 800277e:	2301      	movne	r3, #1
 8002780:	2300      	moveq	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <_ZL12MX_TIM6_Initv+0x70>
  {
    Error_Handler();
 8002788:	f000 f9d8 	bl	8002b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800278c:	bf00      	nop
 800278e:	3710      	adds	r7, #16
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	20000138 	.word	0x20000138
 8002798:	40001000 	.word	0x40001000

0800279c <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b09c      	sub	sp, #112	; 0x70
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80027a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80027a6:	2200      	movs	r2, #0
 80027a8:	601a      	str	r2, [r3, #0]
 80027aa:	605a      	str	r2, [r3, #4]
 80027ac:	609a      	str	r2, [r3, #8]
 80027ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80027b4:	2200      	movs	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	605a      	str	r2, [r3, #4]
 80027ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80027bc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
 80027cc:	615a      	str	r2, [r3, #20]
 80027ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80027d0:	1d3b      	adds	r3, r7, #4
 80027d2:	2234      	movs	r2, #52	; 0x34
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f007 ff58 	bl	800a68c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80027dc:	4b55      	ldr	r3, [pc, #340]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 80027de:	4a56      	ldr	r2, [pc, #344]	; (8002938 <_ZL12MX_TIM8_Initv+0x19c>)
 80027e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 260;
 80027e2:	4b54      	ldr	r3, [pc, #336]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 80027e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027e8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027ea:	4b52      	ldr	r3, [pc, #328]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80027f0:	4b50      	ldr	r3, [pc, #320]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 80027f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027f8:	4b4e      	ldr	r3, [pc, #312]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80027fe:	4b4d      	ldr	r3, [pc, #308]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 8002800:	2200      	movs	r2, #0
 8002802:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002804:	4b4b      	ldr	r3, [pc, #300]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 8002806:	2200      	movs	r2, #0
 8002808:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800280a:	484a      	ldr	r0, [pc, #296]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 800280c:	f005 ff8a 	bl	8008724 <HAL_TIM_Base_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	bf14      	ite	ne
 8002816:	2301      	movne	r3, #1
 8002818:	2300      	moveq	r3, #0
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d001      	beq.n	8002824 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8002820:	f000 f98c 	bl	8002b3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002828:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800282a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800282e:	4619      	mov	r1, r3
 8002830:	4840      	ldr	r0, [pc, #256]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 8002832:	f006 fbf5 	bl	8009020 <HAL_TIM_ConfigClockSource>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	bf14      	ite	ne
 800283c:	2301      	movne	r3, #1
 800283e:	2300      	moveq	r3, #0
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <_ZL12MX_TIM8_Initv+0xae>
  {
    Error_Handler();
 8002846:	f000 f979 	bl	8002b3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800284a:	483a      	ldr	r0, [pc, #232]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 800284c:	f006 f82c 	bl	80088a8 <HAL_TIM_PWM_Init>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	bf14      	ite	ne
 8002856:	2301      	movne	r3, #1
 8002858:	2300      	moveq	r3, #0
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <_ZL12MX_TIM8_Initv+0xc8>
  {
    Error_Handler();
 8002860:	f000 f96c 	bl	8002b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002864:	2300      	movs	r3, #0
 8002866:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002868:	2300      	movs	r3, #0
 800286a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800286c:	2300      	movs	r3, #0
 800286e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002870:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002874:	4619      	mov	r1, r3
 8002876:	482f      	ldr	r0, [pc, #188]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 8002878:	f007 f948 	bl	8009b0c <HAL_TIMEx_MasterConfigSynchronization>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	bf14      	ite	ne
 8002882:	2301      	movne	r3, #1
 8002884:	2300      	moveq	r3, #0
 8002886:	b2db      	uxtb	r3, r3
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <_ZL12MX_TIM8_Initv+0xf4>
  {
    Error_Handler();
 800288c:	f000 f956 	bl	8002b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002890:	2360      	movs	r3, #96	; 0x60
 8002892:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002898:	2300      	movs	r3, #0
 800289a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800289c:	2300      	movs	r3, #0
 800289e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028a0:	2300      	movs	r3, #0
 80028a2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80028a4:	2300      	movs	r3, #0
 80028a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80028a8:	2300      	movs	r3, #0
 80028aa:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80028ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80028b0:	2200      	movs	r2, #0
 80028b2:	4619      	mov	r1, r3
 80028b4:	481f      	ldr	r0, [pc, #124]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 80028b6:	f006 fa9f 	bl	8008df8 <HAL_TIM_PWM_ConfigChannel>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <_ZL12MX_TIM8_Initv+0x132>
  {
    Error_Handler();
 80028ca:	f000 f937 	bl	8002b3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80028ce:	2300      	movs	r3, #0
 80028d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80028e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80028ec:	2300      	movs	r3, #0
 80028ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80028f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80028fa:	2300      	movs	r3, #0
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80028fe:	2300      	movs	r3, #0
 8002900:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002902:	2300      	movs	r3, #0
 8002904:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8002906:	1d3b      	adds	r3, r7, #4
 8002908:	4619      	mov	r1, r3
 800290a:	480a      	ldr	r0, [pc, #40]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 800290c:	f007 f980 	bl	8009c10 <HAL_TIMEx_ConfigBreakDeadTime>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	bf14      	ite	ne
 8002916:	2301      	movne	r3, #1
 8002918:	2300      	moveq	r3, #0
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <_ZL12MX_TIM8_Initv+0x188>
  {
    Error_Handler();
 8002920:	f000 f90c 	bl	8002b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002924:	4803      	ldr	r0, [pc, #12]	; (8002934 <_ZL12MX_TIM8_Initv+0x198>)
 8002926:	f003 fc1f 	bl	8006168 <HAL_TIM_MspPostInit>

}
 800292a:	bf00      	nop
 800292c:	3770      	adds	r7, #112	; 0x70
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000184 	.word	0x20000184
 8002938:	40013400 	.word	0x40013400

0800293c <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b098      	sub	sp, #96	; 0x60
 8002940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002942:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002946:	2200      	movs	r2, #0
 8002948:	601a      	str	r2, [r3, #0]
 800294a:	605a      	str	r2, [r3, #4]
 800294c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800294e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	605a      	str	r2, [r3, #4]
 8002958:	609a      	str	r2, [r3, #8]
 800295a:	60da      	str	r2, [r3, #12]
 800295c:	611a      	str	r2, [r3, #16]
 800295e:	615a      	str	r2, [r3, #20]
 8002960:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2234      	movs	r2, #52	; 0x34
 8002966:	2100      	movs	r1, #0
 8002968:	4618      	mov	r0, r3
 800296a:	f007 fe8f 	bl	800a68c <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800296e:	4b3f      	ldr	r3, [pc, #252]	; (8002a6c <_ZL13MX_TIM15_Initv+0x130>)
 8002970:	4a3f      	ldr	r2, [pc, #252]	; (8002a70 <_ZL13MX_TIM15_Initv+0x134>)
 8002972:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 260;
 8002974:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <_ZL13MX_TIM15_Initv+0x130>)
 8002976:	f44f 7282 	mov.w	r2, #260	; 0x104
 800297a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 800297c:	4b3b      	ldr	r3, [pc, #236]	; (8002a6c <_ZL13MX_TIM15_Initv+0x130>)
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8002982:	4b3a      	ldr	r3, [pc, #232]	; (8002a6c <_ZL13MX_TIM15_Initv+0x130>)
 8002984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002988:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800298a:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <_ZL13MX_TIM15_Initv+0x130>)
 800298c:	2200      	movs	r2, #0
 800298e:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002990:	4b36      	ldr	r3, [pc, #216]	; (8002a6c <_ZL13MX_TIM15_Initv+0x130>)
 8002992:	2200      	movs	r2, #0
 8002994:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002996:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <_ZL13MX_TIM15_Initv+0x130>)
 8002998:	2200      	movs	r2, #0
 800299a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 800299c:	4833      	ldr	r0, [pc, #204]	; (8002a6c <_ZL13MX_TIM15_Initv+0x130>)
 800299e:	f005 ff83 	bl	80088a8 <HAL_TIM_PWM_Init>
 80029a2:	4603      	mov	r3, r0
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bf14      	ite	ne
 80029a8:	2301      	movne	r3, #1
 80029aa:	2300      	moveq	r3, #0
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <_ZL13MX_TIM15_Initv+0x7a>
  {
    Error_Handler();
 80029b2:	f000 f8c3 	bl	8002b3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80029b6:	2300      	movs	r3, #0
 80029b8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029ba:	2300      	movs	r3, #0
 80029bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80029be:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80029c2:	4619      	mov	r1, r3
 80029c4:	4829      	ldr	r0, [pc, #164]	; (8002a6c <_ZL13MX_TIM15_Initv+0x130>)
 80029c6:	f007 f8a1 	bl	8009b0c <HAL_TIMEx_MasterConfigSynchronization>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	bf14      	ite	ne
 80029d0:	2301      	movne	r3, #1
 80029d2:	2300      	moveq	r3, #0
 80029d4:	b2db      	uxtb	r3, r3
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d001      	beq.n	80029de <_ZL13MX_TIM15_Initv+0xa2>
  {
    Error_Handler();
 80029da:	f000 f8af 	bl	8002b3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029de:	2360      	movs	r3, #96	; 0x60
 80029e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029e6:	2300      	movs	r3, #0
 80029e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80029ea:	2300      	movs	r3, #0
 80029ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ee:	2300      	movs	r3, #0
 80029f0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80029f2:	2300      	movs	r3, #0
 80029f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80029f6:	2300      	movs	r3, #0
 80029f8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80029fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80029fe:	2200      	movs	r2, #0
 8002a00:	4619      	mov	r1, r3
 8002a02:	481a      	ldr	r0, [pc, #104]	; (8002a6c <_ZL13MX_TIM15_Initv+0x130>)
 8002a04:	f006 f9f8 	bl	8008df8 <HAL_TIM_PWM_ConfigChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	bf14      	ite	ne
 8002a0e:	2301      	movne	r3, #1
 8002a10:	2300      	moveq	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <_ZL13MX_TIM15_Initv+0xe0>
  {
    Error_Handler();
 8002a18:	f000 f890 	bl	8002b3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002a20:	2300      	movs	r3, #0
 8002a22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002a30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002a3e:	1d3b      	adds	r3, r7, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	480a      	ldr	r0, [pc, #40]	; (8002a6c <_ZL13MX_TIM15_Initv+0x130>)
 8002a44:	f007 f8e4 	bl	8009c10 <HAL_TIMEx_ConfigBreakDeadTime>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	bf14      	ite	ne
 8002a4e:	2301      	movne	r3, #1
 8002a50:	2300      	moveq	r3, #0
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <_ZL13MX_TIM15_Initv+0x120>
  {
    Error_Handler();
 8002a58:	f000 f870 	bl	8002b3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002a5c:	4803      	ldr	r0, [pc, #12]	; (8002a6c <_ZL13MX_TIM15_Initv+0x130>)
 8002a5e:	f003 fb83 	bl	8006168 <HAL_TIM_MspPostInit>

}
 8002a62:	bf00      	nop
 8002a64:	3760      	adds	r7, #96	; 0x60
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200001d0 	.word	0x200001d0
 8002a70:	40014000 	.word	0x40014000

08002a74 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7a:	f107 030c 	add.w	r3, r7, #12
 8002a7e:	2200      	movs	r2, #0
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	605a      	str	r2, [r3, #4]
 8002a84:	609a      	str	r2, [r3, #8]
 8002a86:	60da      	str	r2, [r3, #12]
 8002a88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a8a:	4b2a      	ldr	r3, [pc, #168]	; (8002b34 <_ZL12MX_GPIO_Initv+0xc0>)
 8002a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8e:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <_ZL12MX_GPIO_Initv+0xc0>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002a96:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <_ZL12MX_GPIO_Initv+0xc0>)
 8002a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <_ZL12MX_GPIO_Initv+0xc0>)
 8002aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aa6:	4a23      	ldr	r2, [pc, #140]	; (8002b34 <_ZL12MX_GPIO_Initv+0xc0>)
 8002aa8:	f043 0302 	orr.w	r3, r3, #2
 8002aac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aae:	4b21      	ldr	r3, [pc, #132]	; (8002b34 <_ZL12MX_GPIO_Initv+0xc0>)
 8002ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	607b      	str	r3, [r7, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_7, GPIO_PIN_RESET);
 8002aba:	2200      	movs	r2, #0
 8002abc:	2193      	movs	r1, #147	; 0x93
 8002abe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ac2:	f004 fe63 	bl	800778c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Built_in_LED_GREEN_GPIO_Port, Built_in_LED_GREEN_Pin, GPIO_PIN_RESET);
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002acc:	481a      	ldr	r0, [pc, #104]	; (8002b38 <_ZL12MX_GPIO_Initv+0xc4>)
 8002ace:	f004 fe5d 	bl	800778c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 8002ad2:	2313      	movs	r3, #19
 8002ad4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 030c 	add.w	r3, r7, #12
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002aec:	f004 fcb4 	bl	8007458 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002af0:	2380      	movs	r3, #128	; 0x80
 8002af2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002af4:	2311      	movs	r3, #17
 8002af6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002afc:	2300      	movs	r3, #0
 8002afe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b00:	f107 030c 	add.w	r3, r7, #12
 8002b04:	4619      	mov	r1, r3
 8002b06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b0a:	f004 fca5 	bl	8007458 <HAL_GPIO_Init>

  /*Configure GPIO pin : Built_in_LED_GREEN_Pin */
  GPIO_InitStruct.Pin = Built_in_LED_GREEN_Pin;
 8002b0e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b14:	2301      	movs	r3, #1
 8002b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Built_in_LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8002b20:	f107 030c 	add.w	r3, r7, #12
 8002b24:	4619      	mov	r1, r3
 8002b26:	4804      	ldr	r0, [pc, #16]	; (8002b38 <_ZL12MX_GPIO_Initv+0xc4>)
 8002b28:	f004 fc96 	bl	8007458 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b2c:	bf00      	nop
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000
 8002b38:	48000400 	.word	0x48000400

08002b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b40:	b672      	cpsid	i
}
 8002b42:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (true)
  {
      // Blink 1Hz
      HAL_GPIO_TogglePin(Built_in_LED_GREEN_GPIO_Port, Built_in_LED_GREEN_Pin);
 8002b44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b48:	4803      	ldr	r0, [pc, #12]	; (8002b58 <Error_Handler+0x1c>)
 8002b4a:	f004 fe37 	bl	80077bc <HAL_GPIO_TogglePin>
      HAL_Delay(1000);
 8002b4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b52:	f003 fd3b 	bl	80065cc <HAL_Delay>
      HAL_GPIO_TogglePin(Built_in_LED_GREEN_GPIO_Port, Built_in_LED_GREEN_Pin);
 8002b56:	e7f5      	b.n	8002b44 <Error_Handler+0x8>
 8002b58:	48000400 	.word	0x48000400

08002b5c <_Z41__static_initialization_and_destruction_0ii>:
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d116      	bne.n	8002b9a <_Z41__static_initialization_and_destruction_0ii+0x3e>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d111      	bne.n	8002b9a <_Z41__static_initialization_and_destruction_0ii+0x3e>
Stepper stepper0;
 8002b76:	4818      	ldr	r0, [pc, #96]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002b78:	f7ff f85e 	bl	8001c38 <_ZN7StepperC1Ev>
Stepper stepper1;
 8002b7c:	4817      	ldr	r0, [pc, #92]	; (8002bdc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002b7e:	f7ff f85b 	bl	8001c38 <_ZN7StepperC1Ev>
Stepper stepper2;
 8002b82:	4817      	ldr	r0, [pc, #92]	; (8002be0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002b84:	f7ff f858 	bl	8001c38 <_ZN7StepperC1Ev>
HolonomicDrive3 holo_drive;
 8002b88:	4816      	ldr	r0, [pc, #88]	; (8002be4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002b8a:	f7fe fd59 	bl	8001640 <_ZN15HolonomicDrive3C1Ev>
ChampiCan champi_can;
 8002b8e:	4816      	ldr	r0, [pc, #88]	; (8002be8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002b90:	f7fe f8b6 	bl	8000d00 <_ZN9ChampiCanC1Ev>
MessageRecomposer msg_recomposer_cmd_vel;
 8002b94:	4815      	ldr	r0, [pc, #84]	; (8002bec <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002b96:	f7fe fe63 	bl	8001860 <_ZN17MessageRecomposerC1Ev>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d116      	bne.n	8002bce <_Z41__static_initialization_and_destruction_0ii+0x72>
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d111      	bne.n	8002bce <_Z41__static_initialization_and_destruction_0ii+0x72>
 8002baa:	4810      	ldr	r0, [pc, #64]	; (8002bec <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002bac:	f7fe ff64 	bl	8001a78 <_ZN17MessageRecomposerD1Ev>
ChampiCan champi_can;
 8002bb0:	480d      	ldr	r0, [pc, #52]	; (8002be8 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002bb2:	f7fe f9d5 	bl	8000f60 <_ZN9ChampiCanD1Ev>
HolonomicDrive3 holo_drive;
 8002bb6:	480b      	ldr	r0, [pc, #44]	; (8002be4 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002bb8:	f7fe fe1e 	bl	80017f8 <_ZN15HolonomicDrive3D1Ev>
Stepper stepper2;
 8002bbc:	4808      	ldr	r0, [pc, #32]	; (8002be0 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002bbe:	f7ff f905 	bl	8001dcc <_ZN7StepperD1Ev>
Stepper stepper1;
 8002bc2:	4806      	ldr	r0, [pc, #24]	; (8002bdc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002bc4:	f7ff f902 	bl	8001dcc <_ZN7StepperD1Ev>
Stepper stepper0;
 8002bc8:	4803      	ldr	r0, [pc, #12]	; (8002bd8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002bca:	f7ff f8ff 	bl	8001dcc <_ZN7StepperD1Ev>
}
 8002bce:	bf00      	nop
 8002bd0:	3708      	adds	r7, #8
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	2000021c 	.word	0x2000021c
 8002bdc:	20000280 	.word	0x20000280
 8002be0:	200002e4 	.word	0x200002e4
 8002be4:	20000348 	.word	0x20000348
 8002be8:	200004a4 	.word	0x200004a4
 8002bec:	200004d0 	.word	0x200004d0

08002bf0 <_GLOBAL__sub_I_hfdcan1>:
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f7ff ffaf 	bl	8002b5c <_Z41__static_initialization_and_destruction_0ii>
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <_GLOBAL__sub_D_hfdcan1>:
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7ff ffa7 	bl	8002b5c <_Z41__static_initialization_and_destruction_0ii>
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b08f      	sub	sp, #60	; 0x3c
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	891a      	ldrh	r2, [r3, #8]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	8a1b      	ldrh	r3, [r3, #16]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d301      	bcc.n	8002c2a <load_descriptor_values+0x1a>
        return false;
 8002c26:	2300      	movs	r3, #0
 8002c28:	e156      	b.n	8002ed8 <load_descriptor_values+0x2c8>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	895b      	ldrh	r3, [r3, #10]
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	0a1b      	lsrs	r3, r3, #8
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 8002c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c48:	f003 0303 	and.w	r3, r3, #3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d05a      	beq.n	8002d06 <load_descriptor_values+0xf6>
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	f200 8094 	bhi.w	8002d7e <load_descriptor_values+0x16e>
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <load_descriptor_values+0x50>
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d01f      	beq.n	8002c9e <load_descriptor_values+0x8e>
 8002c5e:	e08e      	b.n	8002d7e <load_descriptor_values+0x16e>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	089b      	lsrs	r3, r3, #2
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c78:	0e1b      	lsrs	r3, r3, #24
 8002c7a:	b25b      	sxtb	r3, r3
 8002c7c:	f003 030f 	and.w	r3, r3, #15
 8002c80:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c86:	0c1b      	lsrs	r3, r3, #16
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 8002c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8e:	0f1b      	lsrs	r3, r3, #28
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	825a      	strh	r2, [r3, #18]
            break;
 8002c9c:	e0b4      	b.n	8002e08 <load_descriptor_values+0x1f8>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	895b      	ldrh	r3, [r3, #10]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4413      	add	r3, r2
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 8002cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb4:	0c1b      	lsrs	r3, r3, #16
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbc:	b29a      	uxth	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 8002cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc4:	089b      	lsrs	r3, r3, #2
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ccc:	b29a      	uxth	r2, r3
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	0f1b      	lsrs	r3, r3, #28
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	019b      	lsls	r3, r3, #6
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 8002ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce2:	0f1b      	lsrs	r3, r3, #28
 8002ce4:	b25b      	sxtb	r3, r3
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 8002cee:	69fb      	ldr	r3, [r7, #28]
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	0c1b      	lsrs	r3, r3, #16
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	825a      	strh	r2, [r3, #18]
            break;
 8002d04:	e080      	b.n	8002e08 <load_descriptor_values+0x1f8>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	895b      	ldrh	r3, [r3, #10]
 8002d10:	3301      	adds	r3, #1
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	4413      	add	r3, r2
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	62bb      	str	r3, [r7, #40]	; 0x28
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	895b      	ldrh	r3, [r3, #10]
 8002d24:	3302      	adds	r3, #2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	895b      	ldrh	r3, [r3, #10]
 8002d38:	3303      	adds	r3, #3
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	623b      	str	r3, [r7, #32]

            iter->array_size = (pb_size_t)(word0 >> 16);
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	0c1b      	lsrs	r3, r3, #16
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8002d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4e:	089b      	lsrs	r3, r3, #2
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	019b      	lsls	r3, r3, #6
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	4313      	orrs	r3, r2
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8002d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d6c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 8002d74:	6a3b      	ldr	r3, [r7, #32]
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	825a      	strh	r2, [r3, #18]
            break;
 8002d7c:	e044      	b.n	8002e08 <load_descriptor_values+0x1f8>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	895b      	ldrh	r3, [r3, #10]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	895b      	ldrh	r3, [r3, #10]
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	4413      	add	r3, r2
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	895b      	ldrh	r3, [r3, #10]
 8002db0:	3303      	adds	r3, #3
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	895b      	ldrh	r3, [r3, #10]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	b29a      	uxth	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 8002dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd8:	089b      	lsrs	r3, r3, #2
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	019b      	lsls	r3, r3, #6
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	4313      	orrs	r3, r2
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	825a      	strh	r2, [r3, #18]
            break;
 8002e06:	bf00      	nop
        }
    }

    if (!iter->message)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <load_descriptor_values+0x20e>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	621a      	str	r2, [r3, #32]
 8002e1c:	e041      	b.n	8002ea2 <load_descriptor_values+0x292>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685a      	ldr	r2, [r3, #4]
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	441a      	add	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	619a      	str	r2, [r3, #24]

        if (size_offset)
 8002e2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d008      	beq.n	8002e44 <load_descriptor_values+0x234>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699a      	ldr	r2, [r3, #24]
 8002e36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002e3a:	425b      	negs	r3, r3
 8002e3c:	441a      	add	r2, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	621a      	str	r2, [r3, #32]
 8002e42:	e01a      	b.n	8002e7a <load_descriptor_values+0x26a>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	7d9b      	ldrb	r3, [r3, #22]
 8002e48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e4c:	2b20      	cmp	r3, #32
 8002e4e:	d111      	bne.n	8002e74 <load_descriptor_values+0x264>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	7d9b      	ldrb	r3, [r3, #22]
 8002e54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d005      	beq.n	8002e68 <load_descriptor_values+0x258>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	7d9b      	ldrb	r3, [r3, #22]
 8002e60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 8002e64:	2b80      	cmp	r3, #128	; 0x80
 8002e66:	d105      	bne.n	8002e74 <load_descriptor_values+0x264>
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f103 0214 	add.w	r2, r3, #20
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	621a      	str	r2, [r3, #32]
 8002e72:	e002      	b.n	8002e7a <load_descriptor_values+0x26a>
        }
        else
        {
            iter->pSize = NULL;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	7d9b      	ldrb	r3, [r3, #22]
 8002e7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e82:	2b80      	cmp	r3, #128	; 0x80
 8002e84:	d109      	bne.n	8002e9a <load_descriptor_values+0x28a>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <load_descriptor_values+0x28a>
        {
            iter->pData = *(void**)iter->pField;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	61da      	str	r2, [r3, #28]
 8002e98:	e003      	b.n	8002ea2 <load_descriptor_values+0x292>
        }
        else
        {
            iter->pData = iter->pField;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	699a      	ldr	r2, [r3, #24]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	7d9b      	ldrb	r3, [r3, #22]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	2b08      	cmp	r3, #8
 8002eac:	d005      	beq.n	8002eba <load_descriptor_values+0x2aa>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	7d9b      	ldrb	r3, [r3, #22]
 8002eb2:	f003 030f 	and.w	r3, r3, #15
 8002eb6:	2b09      	cmp	r3, #9
 8002eb8:	d10a      	bne.n	8002ed0 <load_descriptor_values+0x2c0>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685a      	ldr	r2, [r3, #4]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	89db      	ldrh	r3, [r3, #14]
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24
 8002ece:	e002      	b.n	8002ed6 <load_descriptor_values+0x2c6>
    }
    else
    {
        iter->submsg_desc = NULL;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 8002ed6:	2301      	movs	r3, #1
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	373c      	adds	r7, #60	; 0x3c
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
    iter->index++;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	891b      	ldrh	r3, [r3, #8]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	b29a      	uxth	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	891a      	ldrh	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	8a1b      	ldrh	r3, [r3, #16]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d30c      	bcc.n	8002f20 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	819a      	strh	r2, [r3, #12]
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
    }
}
 8002f1e:	e03c      	b.n	8002f9a <advance_iterator+0xb6>
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	895b      	ldrh	r3, [r3, #10]
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	0a1b      	lsrs	r3, r3, #8
 8002f36:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2201      	movs	r2, #1
 8002f40:	fa02 f303 	lsl.w	r3, r2, r3
 8002f44:	813b      	strh	r3, [r7, #8]
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	895a      	ldrh	r2, [r3, #10]
 8002f4a:	893b      	ldrh	r3, [r7, #8]
 8002f4c:	4413      	add	r3, r2
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	899a      	ldrh	r2, [r3, #12]
 8002f58:	7afb      	ldrb	r3, [r7, #11]
 8002f5a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf0c      	ite	eq
 8002f62:	2301      	moveq	r3, #1
 8002f64:	2300      	movne	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	89da      	ldrh	r2, [r3, #14]
 8002f76:	7afb      	ldrb	r3, [r7, #11]
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d004      	beq.n	8002f8a <advance_iterator+0xa6>
 8002f80:	7afb      	ldrb	r3, [r7, #11]
 8002f82:	f003 030f 	and.w	r3, r3, #15
 8002f86:	2b09      	cmp	r3, #9
 8002f88:	d101      	bne.n	8002f8e <advance_iterator+0xaa>
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e000      	b.n	8002f90 <advance_iterator+0xac>
 8002f8e:	2300      	movs	r3, #0
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	4413      	add	r3, r2
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	81da      	strh	r2, [r3, #14]
}
 8002f9a:	bf00      	nop
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
 8002fae:	60b9      	str	r1, [r7, #8]
 8002fb0:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 8002fb2:	2228      	movs	r2, #40	; 0x28
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f007 fb68 	bl	800a68c <memset>

    iter->descriptor = desc;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	601a      	str	r2, [r3, #0]
    iter->message = message;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	687a      	ldr	r2, [r7, #4]
 8002fc6:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 8002fc8:	68f8      	ldr	r0, [r7, #12]
 8002fca:	f7ff fe21 	bl	8002c10 <load_descriptor_values>
 8002fce:	4603      	mov	r3, r0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	0a1b      	lsrs	r3, r3, #8
 8002ff6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002ffa:	2b80      	cmp	r3, #128	; 0x80
 8002ffc:	d109      	bne.n	8003012 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	3304      	adds	r3, #4
 8003002:	461a      	mov	r2, r3
 8003004:	6939      	ldr	r1, [r7, #16]
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f7ff ffcd 	bl	8002fa6 <pb_field_iter_begin>
 800300c:	4603      	mov	r3, r0
 800300e:	75fb      	strb	r3, [r7, #23]
 8003010:	e008      	b.n	8003024 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	461a      	mov	r2, r3
 8003018:	6939      	ldr	r1, [r7, #16]
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ffc3 	bl	8002fa6 <pb_field_iter_begin>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	f103 020c 	add.w	r2, r3, #12
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	621a      	str	r2, [r3, #32]
    return status;
 800302e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003030:	4618      	mov	r0, r3
 8003032:	3718      	adds	r7, #24
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ff4f 	bl	8002ee4 <advance_iterator>
    (void)load_descriptor_values(iter);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7ff fde2 	bl	8002c10 <load_descriptor_values>
    return iter->index != 0;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	891b      	ldrh	r3, [r3, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
}
 800305a:	4618      	mov	r0, r3
 800305c:	3708      	adds	r7, #8
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}

08003062 <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
 800306a:	6039      	str	r1, [r7, #0]
    if (iter->tag == tag)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	8a1b      	ldrh	r3, [r3, #16]
 8003070:	461a      	mov	r2, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	4293      	cmp	r3, r2
 8003076:	d101      	bne.n	800307c <pb_field_iter_find+0x1a>
    {
        return true; /* Nothing to do, correct field already. */
 8003078:	2301      	movs	r3, #1
 800307a:	e044      	b.n	8003106 <pb_field_iter_find+0xa4>
    }
    else if (tag > iter->descriptor->largest_tag)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	8a9b      	ldrh	r3, [r3, #20]
 8003082:	461a      	mov	r2, r3
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	4293      	cmp	r3, r2
 8003088:	d901      	bls.n	800308e <pb_field_iter_find+0x2c>
    {
        return false;
 800308a:	2300      	movs	r3, #0
 800308c:	e03b      	b.n	8003106 <pb_field_iter_find+0xa4>
    }
    else
    {
        pb_size_t start = iter->index;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	891b      	ldrh	r3, [r3, #8]
 8003092:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        if (tag < iter->tag)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	8a1b      	ldrh	r3, [r3, #16]
 8003098:	461a      	mov	r2, r3
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	4293      	cmp	r3, r2
 800309e:	d204      	bcs.n	80030aa <pb_field_iter_find+0x48>
        {
            /* Fields are in tag number order, so we know that tag is between
             * 0 and our start position. Setting index to end forces
             * advance_iterator() call below to restart from beginning. */
            iter->index = iter->descriptor->field_count;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	8a1a      	ldrh	r2, [r3, #16]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	811a      	strh	r2, [r3, #8]
        }

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f7ff ff1a 	bl	8002ee4 <advance_iterator>

            /* Do fast check for tag number match */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	895b      	ldrh	r3, [r3, #10]
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60bb      	str	r3, [r7, #8]

            if (((fieldinfo >> 2) & 0x3F) == (tag & 0x3F))
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	089a      	lsrs	r2, r3, #2
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	4053      	eors	r3, r2
 80030ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d110      	bne.n	80030f4 <pb_field_iter_find+0x92>
            {
                /* Good candidate, check further */
                (void)load_descriptor_values(iter);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff fd9c 	bl	8002c10 <load_descriptor_values>

                if (iter->tag == tag &&
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	8a1b      	ldrh	r3, [r3, #16]
 80030dc:	461a      	mov	r2, r3
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d107      	bne.n	80030f4 <pb_field_iter_find+0x92>
                    PB_LTYPE(iter->type) != PB_LTYPE_EXTENSION)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	7d9b      	ldrb	r3, [r3, #22]
 80030e8:	f003 030f 	and.w	r3, r3, #15
                if (iter->tag == tag &&
 80030ec:	2b0a      	cmp	r3, #10
 80030ee:	d001      	beq.n	80030f4 <pb_field_iter_find+0x92>
                {
                    /* Found it */
                    return true;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e008      	b.n	8003106 <pb_field_iter_find+0xa4>
                }
            }
        } while (iter->index != start);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	891b      	ldrh	r3, [r3, #8]
 80030f8:	89fa      	ldrh	r2, [r7, #14]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d1d5      	bne.n	80030aa <pb_field_iter_find+0x48>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff fd86 	bl	8002c10 <load_descriptor_values>
        return false;
 8003104:	2300      	movs	r3, #0
    }
}
 8003106:	4618      	mov	r0, r3
 8003108:	3710      	adds	r7, #16
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <pb_field_iter_find_extension>:

bool pb_field_iter_find_extension(pb_field_iter_t *iter)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b084      	sub	sp, #16
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
    if (PB_LTYPE(iter->type) == PB_LTYPE_EXTENSION)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7d9b      	ldrb	r3, [r3, #22]
 800311a:	f003 030f 	and.w	r3, r3, #15
 800311e:	2b0a      	cmp	r3, #10
 8003120:	d101      	bne.n	8003126 <pb_field_iter_find_extension+0x18>
    {
        return true;
 8003122:	2301      	movs	r3, #1
 8003124:	e022      	b.n	800316c <pb_field_iter_find_extension+0x5e>
    }
    else
    {
        pb_size_t start = iter->index;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	891b      	ldrh	r3, [r3, #8]
 800312a:	81fb      	strh	r3, [r7, #14]
        uint32_t fieldinfo;

        do
        {
            /* Advance iterator but don't load values yet */
            advance_iterator(iter);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f7ff fed9 	bl	8002ee4 <advance_iterator>

            /* Do fast check for field type */
            fieldinfo = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	895b      	ldrh	r3, [r3, #10]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	60bb      	str	r3, [r7, #8]

            if (PB_LTYPE((fieldinfo >> 8) & 0xFF) == PB_LTYPE_EXTENSION)
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	0a1b      	lsrs	r3, r3, #8
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	2b0a      	cmp	r3, #10
 800314e:	d104      	bne.n	800315a <pb_field_iter_find_extension+0x4c>
            {
                return load_descriptor_values(iter);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff fd5d 	bl	8002c10 <load_descriptor_values>
 8003156:	4603      	mov	r3, r0
 8003158:	e008      	b.n	800316c <pb_field_iter_find_extension+0x5e>
            }
        } while (iter->index != start);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	891b      	ldrh	r3, [r3, #8]
 800315e:	89fa      	ldrh	r2, [r7, #14]
 8003160:	429a      	cmp	r2, r3
 8003162:	d1e3      	bne.n	800312c <pb_field_iter_find_extension+0x1e>

        /* Searched all the way back to start, and found nothing. */
        (void)load_descriptor_values(iter);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7ff fd53 	bl	8002c10 <load_descriptor_values>
        return false;
 800316a:	2300      	movs	r3, #0
    }
}
 800316c:	4618      	mov	r0, r3
 800316e:	3710      	adds	r7, #16
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <pb_const_cast>:

static void *pb_const_cast(const void *p)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	60fb      	str	r3, [r7, #12]
    return t.p1;
 8003180:	68fb      	ldr	r3, [r7, #12]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 800318e:	b580      	push	{r7, lr}
 8003190:	b084      	sub	sp, #16
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7ff ffea 	bl	8003174 <pb_const_cast>
 80031a0:	4603      	mov	r3, r0
 80031a2:	461a      	mov	r2, r3
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7ff fefd 	bl	8002fa6 <pb_field_iter_begin>
 80031ac:	4603      	mov	r3, r0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b082      	sub	sp, #8
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 80031c0:	6838      	ldr	r0, [r7, #0]
 80031c2:	f7ff ffd7 	bl	8003174 <pb_const_cast>
 80031c6:	4603      	mov	r3, r0
 80031c8:	4619      	mov	r1, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff ff04 	bl	8002fd8 <pb_field_iter_begin_extension>
 80031d0:	4603      	mov	r3, r0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b086      	sub	sp, #24
 80031de:	af00      	add	r7, sp, #0
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	8a5b      	ldrh	r3, [r3, #18]
 80031ea:	2b08      	cmp	r3, #8
 80031ec:	d125      	bne.n	800323a <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01f      	beq.n	800323a <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00c      	beq.n	800321a <pb_default_field_callback+0x40>
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d008      	beq.n	800321a <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	3204      	adds	r2, #4
 8003210:	6879      	ldr	r1, [r7, #4]
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	4798      	blx	r3
 8003216:	4603      	mov	r3, r0
 8003218:	e010      	b.n	800323c <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d00c      	beq.n	800323a <pb_default_field_callback+0x60>
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	3204      	adds	r2, #4
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	68b8      	ldr	r0, [r7, #8]
 8003234:	4798      	blx	r3
 8003236:	4603      	mov	r3, r0
 8003238:	e000      	b.n	800323c <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 800323a:	2301      	movs	r3, #1

}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	617b      	str	r3, [r7, #20]
    stream->state = (pb_byte_t*)stream->state + count;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	441a      	add	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	605a      	str	r2, [r3, #4]
    
    if (buf != NULL)
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d004      	beq.n	8003272 <buf_read+0x2e>
    {
        memcpy(buf, source, count * sizeof(pb_byte_t));
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6979      	ldr	r1, [r7, #20]
 800326c:	68b8      	ldr	r0, [r7, #8]
 800326e:	f007 fadc 	bl	800a82a <memcpy>
    }
    
    return true;
 8003272:	2301      	movs	r3, #1
}
 8003274:	4618      	mov	r0, r3
 8003276:	3718      	adds	r7, #24
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <pb_read>:

bool checkreturn pb_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
    if (count == 0)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <pb_read+0x16>
        return true;
 800328e:	2301      	movs	r3, #1
 8003290:	e05f      	b.n	8003352 <pb_read+0xd6>

#ifndef PB_BUFFER_ONLY
	if (buf == NULL && stream->callback != buf_read)
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d123      	bne.n	80032e0 <pb_read+0x64>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a2f      	ldr	r2, [pc, #188]	; (800335c <pb_read+0xe0>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d01e      	beq.n	80032e0 <pb_read+0x64>
	{
		/* Skip input bytes */
		pb_byte_t tmp[16];
		while (count > 16)
 80032a2:	e011      	b.n	80032c8 <pb_read+0x4c>
		{
			if (!pb_read(stream, tmp, 16))
 80032a4:	f107 0310 	add.w	r3, r7, #16
 80032a8:	2210      	movs	r2, #16
 80032aa:	4619      	mov	r1, r3
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f7ff ffe5 	bl	800327c <pb_read>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f083 0301 	eor.w	r3, r3, #1
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <pb_read+0x46>
				return false;
 80032be:	2300      	movs	r3, #0
 80032c0:	e047      	b.n	8003352 <pb_read+0xd6>
			
			count -= 16;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3b10      	subs	r3, #16
 80032c6:	607b      	str	r3, [r7, #4]
		while (count > 16)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b10      	cmp	r3, #16
 80032cc:	d8ea      	bhi.n	80032a4 <pb_read+0x28>
		}
		
		return pb_read(stream, tmp, count);
 80032ce:	f107 0310 	add.w	r3, r7, #16
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	4619      	mov	r1, r3
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff ffd0 	bl	800327c <pb_read>
 80032dc:	4603      	mov	r3, r0
 80032de:	e038      	b.n	8003352 <pb_read+0xd6>
	}
#endif

    if (stream->bytes_left < count)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d90b      	bls.n	8003302 <pb_read+0x86>
        PB_RETURN_ERROR(stream, "end-of-stream");
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d002      	beq.n	80032f8 <pb_read+0x7c>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	e000      	b.n	80032fa <pb_read+0x7e>
 80032f8:	4b19      	ldr	r3, [pc, #100]	; (8003360 <pb_read+0xe4>)
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	60d3      	str	r3, [r2, #12]
 80032fe:	2300      	movs	r3, #0
 8003300:	e027      	b.n	8003352 <pb_read+0xd6>
    
#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, count))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	4798      	blx	r3
 800330e:	4603      	mov	r3, r0
 8003310:	f083 0301 	eor.w	r3, r3, #1
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00b      	beq.n	8003332 <pb_read+0xb6>
        PB_RETURN_ERROR(stream, "io error");
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d002      	beq.n	8003328 <pb_read+0xac>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	68db      	ldr	r3, [r3, #12]
 8003326:	e000      	b.n	800332a <pb_read+0xae>
 8003328:	4b0e      	ldr	r3, [pc, #56]	; (8003364 <pb_read+0xe8>)
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	60d3      	str	r3, [r2, #12]
 800332e:	2300      	movs	r3, #0
 8003330:	e00f      	b.n	8003352 <pb_read+0xd6>
#else
    if (!buf_read(stream, buf, count))
        return false;
#endif
    
    if (stream->bytes_left < count)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	429a      	cmp	r2, r3
 800333a:	d903      	bls.n	8003344 <pb_read+0xc8>
        stream->bytes_left = 0;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	e005      	b.n	8003350 <pb_read+0xd4>
    else
        stream->bytes_left -= count;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1ad2      	subs	r2, r2, r3
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	609a      	str	r2, [r3, #8]

    return true;
 8003350:	2301      	movs	r3, #1
}
 8003352:	4618      	mov	r0, r3
 8003354:	3720      	adds	r7, #32
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}
 800335a:	bf00      	nop
 800335c:	08003245 	.word	0x08003245
 8003360:	0800b194 	.word	0x0800b194
 8003364:	0800b1a4 	.word	0x0800b1a4

08003368 <pb_readbyte>:

/* Read a single byte from input stream. buf may not be NULL.
 * This is an optimization for the varint decoding. */
static bool checkreturn pb_readbyte(pb_istream_t *stream, pb_byte_t *buf)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
    if (stream->bytes_left == 0)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10b      	bne.n	8003392 <pb_readbyte+0x2a>
        PB_RETURN_ERROR(stream, "end-of-stream");
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <pb_readbyte+0x20>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	e000      	b.n	800338a <pb_readbyte+0x22>
 8003388:	4b13      	ldr	r3, [pc, #76]	; (80033d8 <pb_readbyte+0x70>)
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	60d3      	str	r3, [r2, #12]
 800338e:	2300      	movs	r3, #0
 8003390:	e01d      	b.n	80033ce <pb_readbyte+0x66>

#ifndef PB_BUFFER_ONLY
    if (!stream->callback(stream, buf, 1))
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2201      	movs	r2, #1
 8003398:	6839      	ldr	r1, [r7, #0]
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	4798      	blx	r3
 800339e:	4603      	mov	r3, r0
 80033a0:	f083 0301 	eor.w	r3, r3, #1
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00b      	beq.n	80033c2 <pb_readbyte+0x5a>
        PB_RETURN_ERROR(stream, "io error");
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d002      	beq.n	80033b8 <pb_readbyte+0x50>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	e000      	b.n	80033ba <pb_readbyte+0x52>
 80033b8:	4b08      	ldr	r3, [pc, #32]	; (80033dc <pb_readbyte+0x74>)
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	60d3      	str	r3, [r2, #12]
 80033be:	2300      	movs	r3, #0
 80033c0:	e005      	b.n	80033ce <pb_readbyte+0x66>
#else
    *buf = *(const pb_byte_t*)stream->state;
    stream->state = (pb_byte_t*)stream->state + 1;
#endif

    stream->bytes_left--;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	1e5a      	subs	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	609a      	str	r2, [r3, #8]
    
    return true;    
 80033cc:	2301      	movs	r3, #1
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	0800b194 	.word	0x0800b194
 80033dc:	0800b1a4 	.word	0x0800b1a4

080033e0 <pb_istream_from_buffer>:

pb_istream_t pb_istream_from_buffer(const pb_byte_t *buf, size_t msglen)
{
 80033e0:	b490      	push	{r4, r7}
 80033e2:	b08a      	sub	sp, #40	; 0x28
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
        const void *c_state;
    } state;
#ifdef PB_BUFFER_ONLY
    stream.callback = NULL;
#else
    stream.callback = &buf_read;
 80033ec:	4b0a      	ldr	r3, [pc, #40]	; (8003418 <pb_istream_from_buffer+0x38>)
 80033ee:	61bb      	str	r3, [r7, #24]
#endif
    state.c_state = buf;
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	617b      	str	r3, [r7, #20]
    stream.state = state.state;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	61fb      	str	r3, [r7, #28]
    stream.bytes_left = msglen;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	461c      	mov	r4, r3
 8003404:	f107 0318 	add.w	r3, r7, #24
 8003408:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800340a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800340e:	68f8      	ldr	r0, [r7, #12]
 8003410:	3728      	adds	r7, #40	; 0x28
 8003412:	46bd      	mov	sp, r7
 8003414:	bc90      	pop	{r4, r7}
 8003416:	4770      	bx	lr
 8003418:	08003245 	.word	0x08003245

0800341c <pb_decode_varint32_eof>:
/********************
 * Helper functions *
 ********************/

static bool checkreturn pb_decode_varint32_eof(pb_istream_t *stream, uint32_t *dest, bool *eof)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
    pb_byte_t byte;
    uint32_t result;
    
    if (!pb_readbyte(stream, &byte))
 8003428:	f107 0315 	add.w	r3, r7, #21
 800342c:	4619      	mov	r1, r3
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff ff9a 	bl	8003368 <pb_readbyte>
 8003434:	4603      	mov	r3, r0
 8003436:	f083 0301 	eor.w	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	d00b      	beq.n	8003458 <pb_decode_varint32_eof+0x3c>
    {
        if (stream->bytes_left == 0)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d105      	bne.n	8003454 <pb_decode_varint32_eof+0x38>
        {
            if (eof)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d002      	beq.n	8003454 <pb_decode_varint32_eof+0x38>
            {
                *eof = true;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	701a      	strb	r2, [r3, #0]
            }
        }

        return false;
 8003454:	2300      	movs	r3, #0
 8003456:	e084      	b.n	8003562 <pb_decode_varint32_eof+0x146>
    }
    
    if ((byte & 0x80) == 0)
 8003458:	7d7b      	ldrb	r3, [r7, #21]
 800345a:	b25b      	sxtb	r3, r3
 800345c:	2b00      	cmp	r3, #0
 800345e:	db02      	blt.n	8003466 <pb_decode_varint32_eof+0x4a>
    {
        /* Quick case, 1 byte value */
        result = byte;
 8003460:	7d7b      	ldrb	r3, [r7, #21]
 8003462:	61fb      	str	r3, [r7, #28]
 8003464:	e079      	b.n	800355a <pb_decode_varint32_eof+0x13e>
    }
    else
    {
        /* Multibyte case */
        uint_fast8_t bitpos = 7;
 8003466:	2307      	movs	r3, #7
 8003468:	61bb      	str	r3, [r7, #24]
        result = byte & 0x7F;
 800346a:	7d7b      	ldrb	r3, [r7, #21]
 800346c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003470:	61fb      	str	r3, [r7, #28]
        
        do
        {
            if (!pb_readbyte(stream, &byte))
 8003472:	f107 0315 	add.w	r3, r7, #21
 8003476:	4619      	mov	r1, r3
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f7ff ff75 	bl	8003368 <pb_readbyte>
 800347e:	4603      	mov	r3, r0
 8003480:	f083 0301 	eor.w	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <pb_decode_varint32_eof+0x72>
                return false;
 800348a:	2300      	movs	r3, #0
 800348c:	e069      	b.n	8003562 <pb_decode_varint32_eof+0x146>
            
            if (bitpos >= 32)
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	2b1f      	cmp	r3, #31
 8003492:	d92f      	bls.n	80034f4 <pb_decode_varint32_eof+0xd8>
            {
                /* Note: The varint could have trailing 0x80 bytes, or 0xFF for negative. */
                pb_byte_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	2b3e      	cmp	r3, #62	; 0x3e
 8003498:	d801      	bhi.n	800349e <pb_decode_varint32_eof+0x82>
 800349a:	23ff      	movs	r3, #255	; 0xff
 800349c:	e000      	b.n	80034a0 <pb_decode_varint32_eof+0x84>
 800349e:	2301      	movs	r3, #1
 80034a0:	75fb      	strb	r3, [r7, #23]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80034a2:	7d7b      	ldrb	r3, [r7, #21]
 80034a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d006      	beq.n	80034ba <pb_decode_varint32_eof+0x9e>
                         ((result >> 31) != 0 && byte == sign_extension));
 80034ac:	69fb      	ldr	r3, [r7, #28]
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	da05      	bge.n	80034be <pb_decode_varint32_eof+0xa2>
                         ((result >> 31) != 0 && byte == sign_extension));
 80034b2:	7d7b      	ldrb	r3, [r7, #21]
 80034b4:	7dfa      	ldrb	r2, [r7, #23]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d101      	bne.n	80034be <pb_decode_varint32_eof+0xa2>
                bool valid_extension = ((byte & 0x7F) == 0x00 ||
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <pb_decode_varint32_eof+0xa4>
 80034be:	2300      	movs	r3, #0
 80034c0:	75bb      	strb	r3, [r7, #22]
 80034c2:	7dbb      	ldrb	r3, [r7, #22]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	75bb      	strb	r3, [r7, #22]

                if (bitpos >= 64 || !valid_extension)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b3f      	cmp	r3, #63	; 0x3f
 80034ce:	d805      	bhi.n	80034dc <pb_decode_varint32_eof+0xc0>
 80034d0:	7dbb      	ldrb	r3, [r7, #22]
 80034d2:	f083 0301 	eor.w	r3, r3, #1
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d037      	beq.n	800354c <pb_decode_varint32_eof+0x130>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <pb_decode_varint32_eof+0xce>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	e000      	b.n	80034ec <pb_decode_varint32_eof+0xd0>
 80034ea:	4b20      	ldr	r3, [pc, #128]	; (800356c <pb_decode_varint32_eof+0x150>)
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	60d3      	str	r3, [r2, #12]
 80034f0:	2300      	movs	r3, #0
 80034f2:	e036      	b.n	8003562 <pb_decode_varint32_eof+0x146>
                }
            }
            else if (bitpos == 28)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b1c      	cmp	r3, #28
 80034f8:	d11f      	bne.n	800353a <pb_decode_varint32_eof+0x11e>
            {
                if ((byte & 0x70) != 0 && (byte & 0x78) != 0x78)
 80034fa:	7d7b      	ldrb	r3, [r7, #21]
 80034fc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003500:	2b00      	cmp	r3, #0
 8003502:	d010      	beq.n	8003526 <pb_decode_varint32_eof+0x10a>
 8003504:	7d7b      	ldrb	r3, [r7, #21]
 8003506:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800350a:	2b78      	cmp	r3, #120	; 0x78
 800350c:	d00b      	beq.n	8003526 <pb_decode_varint32_eof+0x10a>
                {
                    PB_RETURN_ERROR(stream, "varint overflow");
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d002      	beq.n	800351c <pb_decode_varint32_eof+0x100>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	e000      	b.n	800351e <pb_decode_varint32_eof+0x102>
 800351c:	4b13      	ldr	r3, [pc, #76]	; (800356c <pb_decode_varint32_eof+0x150>)
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	60d3      	str	r3, [r2, #12]
 8003522:	2300      	movs	r3, #0
 8003524:	e01d      	b.n	8003562 <pb_decode_varint32_eof+0x146>
                }
                result |= (uint32_t)(byte & 0x0F) << bitpos;
 8003526:	7d7b      	ldrb	r3, [r7, #21]
 8003528:	f003 020f 	and.w	r2, r3, #15
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	69fa      	ldr	r2, [r7, #28]
 8003534:	4313      	orrs	r3, r2
 8003536:	61fb      	str	r3, [r7, #28]
 8003538:	e008      	b.n	800354c <pb_decode_varint32_eof+0x130>
            }
            else
            {
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 800353a:	7d7b      	ldrb	r3, [r7, #21]
 800353c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	69fa      	ldr	r2, [r7, #28]
 8003548:	4313      	orrs	r3, r2
 800354a:	61fb      	str	r3, [r7, #28]
            }
            bitpos = (uint_fast8_t)(bitpos + 7);
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	3307      	adds	r3, #7
 8003550:	61bb      	str	r3, [r7, #24]
        } while (byte & 0x80);
 8003552:	7d7b      	ldrb	r3, [r7, #21]
 8003554:	b25b      	sxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	db8b      	blt.n	8003472 <pb_decode_varint32_eof+0x56>
   }
   
   *dest = result;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	601a      	str	r2, [r3, #0]
   return true;
 8003560:	2301      	movs	r3, #1
}
 8003562:	4618      	mov	r0, r3
 8003564:	3720      	adds	r7, #32
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	0800b1b0 	.word	0x0800b1b0

08003570 <pb_decode_varint32>:

bool checkreturn pb_decode_varint32(pb_istream_t *stream, uint32_t *dest)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
    return pb_decode_varint32_eof(stream, dest, NULL);
 800357a:	2200      	movs	r2, #0
 800357c:	6839      	ldr	r1, [r7, #0]
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ff4c 	bl	800341c <pb_decode_varint32_eof>
 8003584:	4603      	mov	r3, r0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <pb_decode_varint>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_decode_varint(pb_istream_t *stream, uint64_t *dest)
{
 8003590:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003594:	b08a      	sub	sp, #40	; 0x28
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
    pb_byte_t byte;
    uint_fast8_t bitpos = 0;
 800359c:	2300      	movs	r3, #0
 800359e:	627b      	str	r3, [r7, #36]	; 0x24
    uint64_t result = 0;
 80035a0:	f04f 0200 	mov.w	r2, #0
 80035a4:	f04f 0300 	mov.w	r3, #0
 80035a8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    do
    {
        if (!pb_readbyte(stream, &byte))
 80035ac:	f107 0317 	add.w	r3, r7, #23
 80035b0:	4619      	mov	r1, r3
 80035b2:	68f8      	ldr	r0, [r7, #12]
 80035b4:	f7ff fed8 	bl	8003368 <pb_readbyte>
 80035b8:	4603      	mov	r3, r0
 80035ba:	f083 0301 	eor.w	r3, r3, #1
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <pb_decode_varint+0x38>
            return false;
 80035c4:	2300      	movs	r3, #0
 80035c6:	e041      	b.n	800364c <pb_decode_varint+0xbc>

        if (bitpos >= 63 && (byte & 0xFE) != 0)
 80035c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ca:	2b3e      	cmp	r3, #62	; 0x3e
 80035cc:	d910      	bls.n	80035f0 <pb_decode_varint+0x60>
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00b      	beq.n	80035f0 <pb_decode_varint+0x60>
            PB_RETURN_ERROR(stream, "varint overflow");
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <pb_decode_varint+0x56>
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	e000      	b.n	80035e8 <pb_decode_varint+0x58>
 80035e6:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <pb_decode_varint+0xc8>)
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	60d3      	str	r3, [r2, #12]
 80035ec:	2300      	movs	r3, #0
 80035ee:	e02d      	b.n	800364c <pb_decode_varint+0xbc>

        result |= (uint64_t)(byte & 0x7F) << bitpos;
 80035f0:	7dfb      	ldrb	r3, [r7, #23]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2200      	movs	r2, #0
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	607a      	str	r2, [r7, #4]
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	f003 087f 	and.w	r8, r3, #127	; 0x7f
 8003600:	f04f 0900 	mov.w	r9, #0
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	f1a3 0120 	sub.w	r1, r3, #32
 800360a:	f1c3 0220 	rsb	r2, r3, #32
 800360e:	fa09 f503 	lsl.w	r5, r9, r3
 8003612:	fa08 f101 	lsl.w	r1, r8, r1
 8003616:	430d      	orrs	r5, r1
 8003618:	fa28 f202 	lsr.w	r2, r8, r2
 800361c:	4315      	orrs	r5, r2
 800361e:	fa08 f403 	lsl.w	r4, r8, r3
 8003622:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003626:	ea42 0a04 	orr.w	sl, r2, r4
 800362a:	ea43 0b05 	orr.w	fp, r3, r5
 800362e:	e9c7 ab06 	strd	sl, fp, [r7, #24]
        bitpos = (uint_fast8_t)(bitpos + 7);
 8003632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003634:	3307      	adds	r3, #7
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
    } while (byte & 0x80);
 8003638:	7dfb      	ldrb	r3, [r7, #23]
 800363a:	b25b      	sxtb	r3, r3
 800363c:	2b00      	cmp	r3, #0
 800363e:	dbb5      	blt.n	80035ac <pb_decode_varint+0x1c>
    
    *dest = result;
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003646:	e9c1 2300 	strd	r2, r3, [r1]
    return true;
 800364a:	2301      	movs	r3, #1
}
 800364c:	4618      	mov	r0, r3
 800364e:	3728      	adds	r7, #40	; 0x28
 8003650:	46bd      	mov	sp, r7
 8003652:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003656:	bf00      	nop
 8003658:	0800b1b0 	.word	0x0800b1b0

0800365c <pb_skip_varint>:
#endif

bool checkreturn pb_skip_varint(pb_istream_t *stream)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
    pb_byte_t byte;
    do
    {
        if (!pb_read(stream, &byte, 1))
 8003664:	f107 030f 	add.w	r3, r7, #15
 8003668:	2201      	movs	r2, #1
 800366a:	4619      	mov	r1, r3
 800366c:	6878      	ldr	r0, [r7, #4]
 800366e:	f7ff fe05 	bl	800327c <pb_read>
 8003672:	4603      	mov	r3, r0
 8003674:	f083 0301 	eor.w	r3, r3, #1
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <pb_skip_varint+0x26>
            return false;
 800367e:	2300      	movs	r3, #0
 8003680:	e004      	b.n	800368c <pb_skip_varint+0x30>
    } while (byte & 0x80);
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	b25b      	sxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	dbec      	blt.n	8003664 <pb_skip_varint+0x8>
    return true;
 800368a:	2301      	movs	r3, #1
}
 800368c:	4618      	mov	r0, r3
 800368e:	3710      	adds	r7, #16
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}

08003694 <pb_skip_string>:

bool checkreturn pb_skip_string(pb_istream_t *stream)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b084      	sub	sp, #16
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
    uint32_t length;
    if (!pb_decode_varint32(stream, &length))
 800369c:	f107 030c 	add.w	r3, r7, #12
 80036a0:	4619      	mov	r1, r3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff ff64 	bl	8003570 <pb_decode_varint32>
 80036a8:	4603      	mov	r3, r0
 80036aa:	f083 0301 	eor.w	r3, r3, #1
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <pb_skip_string+0x24>
        return false;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e006      	b.n	80036c6 <pb_skip_string+0x32>
    if ((size_t)length != length)
    {
        PB_RETURN_ERROR(stream, "size too large");
    }

    return pb_read(stream, NULL, (size_t)length);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	461a      	mov	r2, r3
 80036bc:	2100      	movs	r1, #0
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff fddc 	bl	800327c <pb_read>
 80036c4:	4603      	mov	r3, r0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <pb_decode_tag>:

bool checkreturn pb_decode_tag(pb_istream_t *stream, pb_wire_type_t *wire_type, uint32_t *tag, bool *eof)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b086      	sub	sp, #24
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	60f8      	str	r0, [r7, #12]
 80036d6:	60b9      	str	r1, [r7, #8]
 80036d8:	607a      	str	r2, [r7, #4]
 80036da:	603b      	str	r3, [r7, #0]
    uint32_t temp;
    *eof = false;
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
    *wire_type = (pb_wire_type_t) 0;
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	2200      	movs	r2, #0
 80036e6:	701a      	strb	r2, [r3, #0]
    *tag = 0;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	601a      	str	r2, [r3, #0]
    
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 80036ee:	f107 0314 	add.w	r3, r7, #20
 80036f2:	683a      	ldr	r2, [r7, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f7ff fe90 	bl	800341c <pb_decode_varint32_eof>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f083 0301 	eor.w	r3, r3, #1
 8003702:	b2db      	uxtb	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d001      	beq.n	800370c <pb_decode_tag+0x3e>
    {
        return false;
 8003708:	2300      	movs	r3, #0
 800370a:	e00b      	b.n	8003724 <pb_decode_tag+0x56>
    }
    
    *tag = temp >> 3;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	08da      	lsrs	r2, r3, #3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	601a      	str	r2, [r3, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	b2db      	uxtb	r3, r3
 8003718:	f003 0307 	and.w	r3, r3, #7
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	701a      	strb	r2, [r3, #0]
    return true;
 8003722:	2301      	movs	r3, #1
}
 8003724:	4618      	mov	r0, r3
 8003726:	3718      	adds	r7, #24
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <pb_skip_field>:

bool checkreturn pb_skip_field(pb_istream_t *stream, pb_wire_type_t wire_type)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	70fb      	strb	r3, [r7, #3]
    switch (wire_type)
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	2b05      	cmp	r3, #5
 800373c:	d826      	bhi.n	800378c <pb_skip_field+0x60>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <pb_skip_field+0x18>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	0800375d 	.word	0x0800375d
 8003748:	08003767 	.word	0x08003767
 800374c:	08003775 	.word	0x08003775
 8003750:	0800378d 	.word	0x0800378d
 8003754:	0800378d 	.word	0x0800378d
 8003758:	0800377f 	.word	0x0800377f
    {
        case PB_WT_VARINT: return pb_skip_varint(stream);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f7ff ff7d 	bl	800365c <pb_skip_varint>
 8003762:	4603      	mov	r3, r0
 8003764:	e01d      	b.n	80037a2 <pb_skip_field+0x76>
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8003766:	2208      	movs	r2, #8
 8003768:	2100      	movs	r1, #0
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff fd86 	bl	800327c <pb_read>
 8003770:	4603      	mov	r3, r0
 8003772:	e016      	b.n	80037a2 <pb_skip_field+0x76>
        case PB_WT_STRING: return pb_skip_string(stream);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff8d 	bl	8003694 <pb_skip_string>
 800377a:	4603      	mov	r3, r0
 800377c:	e011      	b.n	80037a2 <pb_skip_field+0x76>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 800377e:	2204      	movs	r2, #4
 8003780:	2100      	movs	r1, #0
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff fd7a 	bl	800327c <pb_read>
 8003788:	4603      	mov	r3, r0
 800378a:	e00a      	b.n	80037a2 <pb_skip_field+0x76>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <pb_skip_field+0x6e>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	e000      	b.n	800379c <pb_skip_field+0x70>
 800379a:	4b04      	ldr	r3, [pc, #16]	; (80037ac <pb_skip_field+0x80>)
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	60d3      	str	r3, [r2, #12]
 80037a0:	2300      	movs	r3, #0
    }
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	0800b1c0 	.word	0x0800b1c0

080037b0 <read_raw_value>:

/* Read a raw value to buffer, for the purpose of passing it to callback as
 * a substream. Size is maximum size on call, and actual size on return.
 */
static bool checkreturn read_raw_value(pb_istream_t *stream, pb_wire_type_t wire_type, pb_byte_t *buf, size_t *size)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	607a      	str	r2, [r7, #4]
 80037ba:	603b      	str	r3, [r7, #0]
 80037bc:	460b      	mov	r3, r1
 80037be:	72fb      	strb	r3, [r7, #11]
    size_t max_size = *size;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	617b      	str	r3, [r7, #20]
    switch (wire_type)
 80037c6:	7afb      	ldrb	r3, [r7, #11]
 80037c8:	2b05      	cmp	r3, #5
 80037ca:	d03f      	beq.n	800384c <read_raw_value+0x9c>
 80037cc:	2b05      	cmp	r3, #5
 80037ce:	dc47      	bgt.n	8003860 <read_raw_value+0xb0>
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <read_raw_value+0x2a>
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d02f      	beq.n	8003838 <read_raw_value+0x88>
 80037d8:	e042      	b.n	8003860 <read_raw_value+0xb0>
    {
        case PB_WT_VARINT:
            *size = 0;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
            do
            {
                (*size)++;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	1c5a      	adds	r2, r3, #1
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	601a      	str	r2, [r3, #0]
                if (*size > max_size)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d20b      	bcs.n	800380c <read_raw_value+0x5c>
                    PB_RETURN_ERROR(stream, "varint overflow");
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <read_raw_value+0x52>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	e000      	b.n	8003804 <read_raw_value+0x54>
 8003802:	4b1f      	ldr	r3, [pc, #124]	; (8003880 <read_raw_value+0xd0>)
 8003804:	68fa      	ldr	r2, [r7, #12]
 8003806:	60d3      	str	r3, [r2, #12]
 8003808:	2300      	movs	r3, #0
 800380a:	e034      	b.n	8003876 <read_raw_value+0xc6>

                if (!pb_read(stream, buf, 1))
 800380c:	2201      	movs	r2, #1
 800380e:	6879      	ldr	r1, [r7, #4]
 8003810:	68f8      	ldr	r0, [r7, #12]
 8003812:	f7ff fd33 	bl	800327c <pb_read>
 8003816:	4603      	mov	r3, r0
 8003818:	f083 0301 	eor.w	r3, r3, #1
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <read_raw_value+0x76>
                    return false;
 8003822:	2300      	movs	r3, #0
 8003824:	e027      	b.n	8003876 <read_raw_value+0xc6>
            } while (*buf++ & 0x80);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	b25b      	sxtb	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	dbd5      	blt.n	80037e0 <read_raw_value+0x30>
            return true;
 8003834:	2301      	movs	r3, #1
 8003836:	e01e      	b.n	8003876 <read_raw_value+0xc6>
            
        case PB_WT_64BIT:
            *size = 8;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2208      	movs	r2, #8
 800383c:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 8);
 800383e:	2208      	movs	r2, #8
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f7ff fd1a 	bl	800327c <pb_read>
 8003848:	4603      	mov	r3, r0
 800384a:	e014      	b.n	8003876 <read_raw_value+0xc6>
        
        case PB_WT_32BIT:
            *size = 4;
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	2204      	movs	r2, #4
 8003850:	601a      	str	r2, [r3, #0]
            return pb_read(stream, buf, 4);
 8003852:	2204      	movs	r2, #4
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f7ff fd10 	bl	800327c <pb_read>
 800385c:	4603      	mov	r3, r0
 800385e:	e00a      	b.n	8003876 <read_raw_value+0xc6>
            /* Calling read_raw_value with a PB_WT_STRING is an error.
             * Explicitly handle this case and fallthrough to default to avoid
             * compiler warnings.
             */

        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <read_raw_value+0xbe>
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	68db      	ldr	r3, [r3, #12]
 800386c:	e000      	b.n	8003870 <read_raw_value+0xc0>
 800386e:	4b05      	ldr	r3, [pc, #20]	; (8003884 <read_raw_value+0xd4>)
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	60d3      	str	r3, [r2, #12]
 8003874:	2300      	movs	r3, #0
    }
}
 8003876:	4618      	mov	r0, r3
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	0800b1b0 	.word	0x0800b1b0
 8003884:	0800b1c0 	.word	0x0800b1c0

08003888 <pb_make_string_substream>:

/* Decode string length from stream and return a substream with limited length.
 * Remember to close the substream using pb_close_string_substream().
 */
bool checkreturn pb_make_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
    uint32_t size;
    if (!pb_decode_varint32(stream, &size))
 8003892:	f107 030c 	add.w	r3, r7, #12
 8003896:	4619      	mov	r1, r3
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff fe69 	bl	8003570 <pb_decode_varint32>
 800389e:	4603      	mov	r3, r0
 80038a0:	f083 0301 	eor.w	r3, r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <pb_make_string_substream+0x26>
        return false;
 80038aa:	2300      	movs	r3, #0
 80038ac:	e020      	b.n	80038f0 <pb_make_string_substream+0x68>
    
    *substream = *stream;
 80038ae:	683a      	ldr	r2, [r7, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4614      	mov	r4, r2
 80038b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80038b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d20b      	bcs.n	80038dc <pb_make_string_substream+0x54>
        PB_RETURN_ERROR(stream, "parent stream too short");
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <pb_make_string_substream+0x4a>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	e000      	b.n	80038d4 <pb_make_string_substream+0x4c>
 80038d2:	4b09      	ldr	r3, [pc, #36]	; (80038f8 <pb_make_string_substream+0x70>)
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	60d3      	str	r3, [r2, #12]
 80038d8:	2300      	movs	r3, #0
 80038da:	e009      	b.n	80038f0 <pb_make_string_substream+0x68>
    
    substream->bytes_left = (size_t)size;
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	609a      	str	r2, [r3, #8]
    stream->bytes_left -= (size_t)size;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689a      	ldr	r2, [r3, #8]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	1ad2      	subs	r2, r2, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	609a      	str	r2, [r3, #8]
    return true;
 80038ee:	2301      	movs	r3, #1
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd90      	pop	{r4, r7, pc}
 80038f8:	0800b1d4 	.word	0x0800b1d4

080038fc <pb_close_string_substream>:

bool checkreturn pb_close_string_substream(pb_istream_t *stream, pb_istream_t *substream)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
    if (substream->bytes_left) {
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00e      	beq.n	800392c <pb_close_string_substream+0x30>
        if (!pb_read(substream, NULL, substream->bytes_left))
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	461a      	mov	r2, r3
 8003914:	2100      	movs	r1, #0
 8003916:	6838      	ldr	r0, [r7, #0]
 8003918:	f7ff fcb0 	bl	800327c <pb_read>
 800391c:	4603      	mov	r3, r0
 800391e:	f083 0301 	eor.w	r3, r3, #1
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <pb_close_string_substream+0x30>
            return false;
 8003928:	2300      	movs	r3, #0
 800392a:	e008      	b.n	800393e <pb_close_string_substream+0x42>
    }

    stream->state = substream->state;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	605a      	str	r2, [r3, #4]

#ifndef PB_NO_ERRMSG
    stream->errmsg = substream->errmsg;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	60da      	str	r2, [r3, #12]
#endif
    return true;
 800393c:	2301      	movs	r3, #1
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
	...

08003948 <decode_basic_field>:
/*************************
 * Decode a single field *
 *************************/

static bool checkreturn decode_basic_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	460b      	mov	r3, r1
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	72fb      	strb	r3, [r7, #11]
    switch (PB_LTYPE(field->type))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	7d9b      	ldrb	r3, [r3, #22]
 800395a:	f003 030f 	and.w	r3, r3, #15
 800395e:	2b0b      	cmp	r3, #11
 8003960:	f200 80d4 	bhi.w	8003b0c <decode_basic_field+0x1c4>
 8003964:	a201      	add	r2, pc, #4	; (adr r2, 800396c <decode_basic_field+0x24>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	0800399d 	.word	0x0800399d
 8003970:	080039cd 	.word	0x080039cd
 8003974:	080039cd 	.word	0x080039cd
 8003978:	080039cd 	.word	0x080039cd
 800397c:	080039fd 	.word	0x080039fd
 8003980:	08003a31 	.word	0x08003a31
 8003984:	08003a65 	.word	0x08003a65
 8003988:	08003a8f 	.word	0x08003a8f
 800398c:	08003ab9 	.word	0x08003ab9
 8003990:	08003ab9 	.word	0x08003ab9
 8003994:	08003b0d 	.word	0x08003b0d
 8003998:	08003ae3 	.word	0x08003ae3
    {
        case PB_LTYPE_BOOL:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 800399c:	7afb      	ldrb	r3, [r7, #11]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00e      	beq.n	80039c0 <decode_basic_field+0x78>
 80039a2:	7afb      	ldrb	r3, [r7, #11]
 80039a4:	2bff      	cmp	r3, #255	; 0xff
 80039a6:	d00b      	beq.n	80039c0 <decode_basic_field+0x78>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d002      	beq.n	80039b6 <decode_basic_field+0x6e>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	e000      	b.n	80039b8 <decode_basic_field+0x70>
 80039b6:	4b5d      	ldr	r3, [pc, #372]	; (8003b2c <decode_basic_field+0x1e4>)
 80039b8:	68fa      	ldr	r2, [r7, #12]
 80039ba:	60d3      	str	r3, [r2, #12]
 80039bc:	2300      	movs	r3, #0
 80039be:	e0b0      	b.n	8003b22 <decode_basic_field+0x1da>

            return pb_dec_bool(stream, field);
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	68f8      	ldr	r0, [r7, #12]
 80039c4:	f000 fef6 	bl	80047b4 <pb_dec_bool>
 80039c8:	4603      	mov	r3, r0
 80039ca:	e0aa      	b.n	8003b22 <decode_basic_field+0x1da>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            if (wire_type != PB_WT_VARINT && wire_type != PB_WT_PACKED)
 80039cc:	7afb      	ldrb	r3, [r7, #11]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00e      	beq.n	80039f0 <decode_basic_field+0xa8>
 80039d2:	7afb      	ldrb	r3, [r7, #11]
 80039d4:	2bff      	cmp	r3, #255	; 0xff
 80039d6:	d00b      	beq.n	80039f0 <decode_basic_field+0xa8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d002      	beq.n	80039e6 <decode_basic_field+0x9e>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	e000      	b.n	80039e8 <decode_basic_field+0xa0>
 80039e6:	4b51      	ldr	r3, [pc, #324]	; (8003b2c <decode_basic_field+0x1e4>)
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	60d3      	str	r3, [r2, #12]
 80039ec:	2300      	movs	r3, #0
 80039ee:	e098      	b.n	8003b22 <decode_basic_field+0x1da>

            return pb_dec_varint(stream, field);
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 feee 	bl	80047d4 <pb_dec_varint>
 80039f8:	4603      	mov	r3, r0
 80039fa:	e092      	b.n	8003b22 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED32:
            if (wire_type != PB_WT_32BIT && wire_type != PB_WT_PACKED)
 80039fc:	7afb      	ldrb	r3, [r7, #11]
 80039fe:	2b05      	cmp	r3, #5
 8003a00:	d00e      	beq.n	8003a20 <decode_basic_field+0xd8>
 8003a02:	7afb      	ldrb	r3, [r7, #11]
 8003a04:	2bff      	cmp	r3, #255	; 0xff
 8003a06:	d00b      	beq.n	8003a20 <decode_basic_field+0xd8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <decode_basic_field+0xce>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68db      	ldr	r3, [r3, #12]
 8003a14:	e000      	b.n	8003a18 <decode_basic_field+0xd0>
 8003a16:	4b45      	ldr	r3, [pc, #276]	; (8003b2c <decode_basic_field+0x1e4>)
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	60d3      	str	r3, [r2, #12]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	e080      	b.n	8003b22 <decode_basic_field+0x1da>

            return pb_decode_fixed32(stream, field->pData);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	69db      	ldr	r3, [r3, #28]
 8003a24:	4619      	mov	r1, r3
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	f000 fe8a 	bl	8004740 <pb_decode_fixed32>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	e078      	b.n	8003b22 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED64:
            if (wire_type != PB_WT_64BIT && wire_type != PB_WT_PACKED)
 8003a30:	7afb      	ldrb	r3, [r7, #11]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d00e      	beq.n	8003a54 <decode_basic_field+0x10c>
 8003a36:	7afb      	ldrb	r3, [r7, #11]
 8003a38:	2bff      	cmp	r3, #255	; 0xff
 8003a3a:	d00b      	beq.n	8003a54 <decode_basic_field+0x10c>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d002      	beq.n	8003a4a <decode_basic_field+0x102>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	e000      	b.n	8003a4c <decode_basic_field+0x104>
 8003a4a:	4b38      	ldr	r3, [pc, #224]	; (8003b2c <decode_basic_field+0x1e4>)
 8003a4c:	68fa      	ldr	r2, [r7, #12]
 8003a4e:	60d3      	str	r3, [r2, #12]
 8003a50:	2300      	movs	r3, #0
 8003a52:	e066      	b.n	8003b22 <decode_basic_field+0x1da>
#endif

#ifdef PB_WITHOUT_64BIT
            PB_RETURN_ERROR(stream, "invalid data_size");
#else
            return pb_decode_fixed64(stream, field->pData);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	69db      	ldr	r3, [r3, #28]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 fe8c 	bl	8004778 <pb_decode_fixed64>
 8003a60:	4603      	mov	r3, r0
 8003a62:	e05e      	b.n	8003b22 <decode_basic_field+0x1da>
#endif

        case PB_LTYPE_BYTES:
            if (wire_type != PB_WT_STRING)
 8003a64:	7afb      	ldrb	r3, [r7, #11]
 8003a66:	2b02      	cmp	r3, #2
 8003a68:	d00b      	beq.n	8003a82 <decode_basic_field+0x13a>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <decode_basic_field+0x130>
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	e000      	b.n	8003a7a <decode_basic_field+0x132>
 8003a78:	4b2c      	ldr	r3, [pc, #176]	; (8003b2c <decode_basic_field+0x1e4>)
 8003a7a:	68fa      	ldr	r2, [r7, #12]
 8003a7c:	60d3      	str	r3, [r2, #12]
 8003a7e:	2300      	movs	r3, #0
 8003a80:	e04f      	b.n	8003b22 <decode_basic_field+0x1da>

            return pb_dec_bytes(stream, field);
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 ffd1 	bl	8004a2c <pb_dec_bytes>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	e049      	b.n	8003b22 <decode_basic_field+0x1da>

        case PB_LTYPE_STRING:
            if (wire_type != PB_WT_STRING)
 8003a8e:	7afb      	ldrb	r3, [r7, #11]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d00b      	beq.n	8003aac <decode_basic_field+0x164>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <decode_basic_field+0x15a>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	e000      	b.n	8003aa4 <decode_basic_field+0x15c>
 8003aa2:	4b22      	ldr	r3, [pc, #136]	; (8003b2c <decode_basic_field+0x1e4>)
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	60d3      	str	r3, [r2, #12]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	e03a      	b.n	8003b22 <decode_basic_field+0x1da>

            return pb_dec_string(stream, field);
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f001 f830 	bl	8004b14 <pb_dec_string>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	e034      	b.n	8003b22 <decode_basic_field+0x1da>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            if (wire_type != PB_WT_STRING)
 8003ab8:	7afb      	ldrb	r3, [r7, #11]
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d00b      	beq.n	8003ad6 <decode_basic_field+0x18e>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d002      	beq.n	8003acc <decode_basic_field+0x184>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	e000      	b.n	8003ace <decode_basic_field+0x186>
 8003acc:	4b17      	ldr	r3, [pc, #92]	; (8003b2c <decode_basic_field+0x1e4>)
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	60d3      	str	r3, [r2, #12]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	e025      	b.n	8003b22 <decode_basic_field+0x1da>

            return pb_dec_submessage(stream, field);
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f001 f897 	bl	8004c0c <pb_dec_submessage>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	e01f      	b.n	8003b22 <decode_basic_field+0x1da>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            if (wire_type != PB_WT_STRING)
 8003ae2:	7afb      	ldrb	r3, [r7, #11]
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d00b      	beq.n	8003b00 <decode_basic_field+0x1b8>
                PB_RETURN_ERROR(stream, "wrong wire type");
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d002      	beq.n	8003af6 <decode_basic_field+0x1ae>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	e000      	b.n	8003af8 <decode_basic_field+0x1b0>
 8003af6:	4b0d      	ldr	r3, [pc, #52]	; (8003b2c <decode_basic_field+0x1e4>)
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	60d3      	str	r3, [r2, #12]
 8003afc:	2300      	movs	r3, #0
 8003afe:	e010      	b.n	8003b22 <decode_basic_field+0x1da>

            return pb_dec_fixed_length_bytes(stream, field);
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f001 f90c 	bl	8004d20 <pb_dec_fixed_length_bytes>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	e00a      	b.n	8003b22 <decode_basic_field+0x1da>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <decode_basic_field+0x1d2>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	e000      	b.n	8003b1c <decode_basic_field+0x1d4>
 8003b1a:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <decode_basic_field+0x1e8>)
 8003b1c:	68fa      	ldr	r2, [r7, #12]
 8003b1e:	60d3      	str	r3, [r2, #12]
 8003b20:	2300      	movs	r3, #0
    }
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3710      	adds	r7, #16
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	0800b1ec 	.word	0x0800b1ec
 8003b30:	0800b1fc 	.word	0x0800b1fc

08003b34 <decode_static_field>:

static bool checkreturn decode_static_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b096      	sub	sp, #88	; 0x58
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	72fb      	strb	r3, [r7, #11]
    switch (PB_HTYPE(field->type))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	7d9b      	ldrb	r3, [r3, #22]
 8003b46:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b4a:	2b30      	cmp	r3, #48	; 0x30
 8003b4c:	f000 80c2 	beq.w	8003cd4 <decode_static_field+0x1a0>
 8003b50:	2b30      	cmp	r3, #48	; 0x30
 8003b52:	f200 811a 	bhi.w	8003d8a <decode_static_field+0x256>
 8003b56:	2b20      	cmp	r3, #32
 8003b58:	d01f      	beq.n	8003b9a <decode_static_field+0x66>
 8003b5a:	2b20      	cmp	r3, #32
 8003b5c:	f200 8115 	bhi.w	8003d8a <decode_static_field+0x256>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <decode_static_field+0x36>
 8003b64:	2b10      	cmp	r3, #16
 8003b66:	d008      	beq.n	8003b7a <decode_static_field+0x46>
 8003b68:	e10f      	b.n	8003d8a <decode_static_field+0x256>
    {
        case PB_HTYPE_REQUIRED:
            return decode_basic_field(stream, wire_type, field);
 8003b6a:	7afb      	ldrb	r3, [r7, #11]
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4619      	mov	r1, r3
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f7ff fee9 	bl	8003948 <decode_basic_field>
 8003b76:	4603      	mov	r3, r0
 8003b78:	e112      	b.n	8003da0 <decode_static_field+0x26c>
            
        case PB_HTYPE_OPTIONAL:
            if (field->pSize != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d003      	beq.n	8003b8a <decode_static_field+0x56>
                *(bool*)field->pSize = true;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
            return decode_basic_field(stream, wire_type, field);
 8003b8a:	7afb      	ldrb	r3, [r7, #11]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff fed9 	bl	8003948 <decode_basic_field>
 8003b96:	4603      	mov	r3, r0
 8003b98:	e102      	b.n	8003da0 <decode_static_field+0x26c>
    
        case PB_HTYPE_REPEATED:
            if (wire_type == PB_WT_STRING
 8003b9a:	7afb      	ldrb	r3, [r7, #11]
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d16c      	bne.n	8003c7a <decode_static_field+0x146>
                && PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7d9b      	ldrb	r3, [r3, #22]
 8003ba4:	f003 030f 	and.w	r3, r3, #15
 8003ba8:	2b05      	cmp	r3, #5
 8003baa:	d866      	bhi.n	8003c7a <decode_static_field+0x146>
            {
                /* Packed array */
                bool status = true;
 8003bac:	2301      	movs	r3, #1
 8003bae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                pb_istream_t substream;
                pb_size_t *size = (pb_size_t*)field->pSize;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	653b      	str	r3, [r7, #80]	; 0x50
                field->pData = (char*)field->pField + field->data_size * (*size);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	8a52      	ldrh	r2, [r2, #18]
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bc4:	8812      	ldrh	r2, [r2, #0]
 8003bc6:	fb01 f202 	mul.w	r2, r1, r2
 8003bca:	441a      	add	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	61da      	str	r2, [r3, #28]

                if (!pb_make_string_substream(stream, &substream))
 8003bd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f7ff fe56 	bl	8003888 <pb_make_string_substream>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f083 0301 	eor.w	r3, r3, #1
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01f      	beq.n	8003c28 <decode_static_field+0xf4>
                    return false;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e0d9      	b.n	8003da0 <decode_static_field+0x26c>

                while (substream.bytes_left > 0 && *size < field->array_size)
                {
                    if (!decode_basic_field(&substream, PB_WT_PACKED, field))
 8003bec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	21ff      	movs	r1, #255	; 0xff
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff fea7 	bl	8003948 <decode_basic_field>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f083 0301 	eor.w	r3, r3, #1
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <decode_static_field+0xda>
                    {
                        status = false;
 8003c06:	2300      	movs	r3, #0
 8003c08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
                        break;
 8003c0c:	e015      	b.n	8003c3a <decode_static_field+0x106>
                    }
                    (*size)++;
 8003c0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c10:	881b      	ldrh	r3, [r3, #0]
 8003c12:	3301      	adds	r3, #1
 8003c14:	b29a      	uxth	r2, r3
 8003c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c18:	801a      	strh	r2, [r3, #0]
                    field->pData = (char*)field->pData + field->data_size;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	69db      	ldr	r3, [r3, #28]
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	8a52      	ldrh	r2, [r2, #18]
 8003c22:	441a      	add	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	61da      	str	r2, [r3, #28]
                while (substream.bytes_left > 0 && *size < field->array_size)
 8003c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <decode_static_field+0x106>
 8003c2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c30:	881a      	ldrh	r2, [r3, #0]
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	8a9b      	ldrh	r3, [r3, #20]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d3d8      	bcc.n	8003bec <decode_static_field+0xb8>
                }

                if (substream.bytes_left != 0)
 8003c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00b      	beq.n	8003c58 <decode_static_field+0x124>
                    PB_RETURN_ERROR(stream, "array overflow");
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <decode_static_field+0x11a>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	68db      	ldr	r3, [r3, #12]
 8003c4c:	e000      	b.n	8003c50 <decode_static_field+0x11c>
 8003c4e:	4b56      	ldr	r3, [pc, #344]	; (8003da8 <decode_static_field+0x274>)
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	60d3      	str	r3, [r2, #12]
 8003c54:	2300      	movs	r3, #0
 8003c56:	e0a3      	b.n	8003da0 <decode_static_field+0x26c>
                if (!pb_close_string_substream(stream, &substream))
 8003c58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f7ff fe4c 	bl	80038fc <pb_close_string_substream>
 8003c64:	4603      	mov	r3, r0
 8003c66:	f083 0301 	eor.w	r3, r3, #1
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <decode_static_field+0x140>
                    return false;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e095      	b.n	8003da0 <decode_static_field+0x26c>

                return status;
 8003c74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c78:	e092      	b.n	8003da0 <decode_static_field+0x26c>
            }
            else
            {
                /* Repeated field */
                pb_size_t *size = (pb_size_t*)field->pSize;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
                field->pData = (char*)field->pField + field->data_size * (*size);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	8a52      	ldrh	r2, [r2, #18]
 8003c88:	4611      	mov	r1, r2
 8003c8a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c8c:	8812      	ldrh	r2, [r2, #0]
 8003c8e:	fb01 f202 	mul.w	r2, r1, r2
 8003c92:	441a      	add	r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	61da      	str	r2, [r3, #28]

                if ((*size)++ >= field->array_size)
 8003c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c9a:	881b      	ldrh	r3, [r3, #0]
 8003c9c:	1c5a      	adds	r2, r3, #1
 8003c9e:	b291      	uxth	r1, r2
 8003ca0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ca2:	8011      	strh	r1, [r2, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	8a92      	ldrh	r2, [r2, #20]
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d30b      	bcc.n	8003cc4 <decode_static_field+0x190>
                    PB_RETURN_ERROR(stream, "array overflow");
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d002      	beq.n	8003cba <decode_static_field+0x186>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	e000      	b.n	8003cbc <decode_static_field+0x188>
 8003cba:	4b3b      	ldr	r3, [pc, #236]	; (8003da8 <decode_static_field+0x274>)
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	60d3      	str	r3, [r2, #12]
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	e06d      	b.n	8003da0 <decode_static_field+0x26c>

                return decode_basic_field(stream, wire_type, field);
 8003cc4:	7afb      	ldrb	r3, [r7, #11]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	4619      	mov	r1, r3
 8003cca:	68f8      	ldr	r0, [r7, #12]
 8003ccc:	f7ff fe3c 	bl	8003948 <decode_basic_field>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	e065      	b.n	8003da0 <decode_static_field+0x26c>
            }

        case PB_HTYPE_ONEOF:
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7d9b      	ldrb	r3, [r3, #22]
 8003cd8:	f003 030f 	and.w	r3, r3, #15
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	d005      	beq.n	8003cec <decode_static_field+0x1b8>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	7d9b      	ldrb	r3, [r3, #22]
 8003ce4:	f003 030f 	and.w	r3, r3, #15
 8003ce8:	2b09      	cmp	r3, #9
 8003cea:	d141      	bne.n	8003d70 <decode_static_field+0x23c>
                *(pb_size_t*)field->pSize != field->tag)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	881a      	ldrh	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	8a1b      	ldrh	r3, [r3, #16]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d03a      	beq.n	8003d70 <decode_static_field+0x23c>
                 * from some other union field.
                 * If callbacks are needed inside oneof field, use .proto
                 * option submsg_callback to have a separate callback function
                 * that can set the fields before submessage is decoded.
                 * pb_dec_submessage() will set any default values. */
                memset(field->pData, 0, (size_t)field->data_size);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	69d8      	ldr	r0, [r3, #28]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	8a5b      	ldrh	r3, [r3, #18]
 8003d02:	461a      	mov	r2, r3
 8003d04:	2100      	movs	r1, #0
 8003d06:	f006 fcc1 	bl	800a68c <memset>

                /* Set default values for the submessage fields. */
                if (field->submsg_desc->default_value != NULL ||
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d10a      	bne.n	8003d2a <decode_static_field+0x1f6>
                    field->submsg_desc->field_callback != NULL ||
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	68db      	ldr	r3, [r3, #12]
                if (field->submsg_desc->default_value != NULL ||
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d105      	bne.n	8003d2a <decode_static_field+0x1f6>
                    field->submsg_desc->submsg_info[0] != NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
                    field->submsg_desc->field_callback != NULL ||
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d022      	beq.n	8003d70 <decode_static_field+0x23c>
                {
                    pb_field_iter_t submsg_iter;
                    if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	f107 0314 	add.w	r3, r7, #20
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff f935 	bl	8002fa6 <pb_field_iter_begin>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d016      	beq.n	8003d70 <decode_static_field+0x23c>
                    {
                        if (!pb_message_set_to_defaults(&submsg_iter))
 8003d42:	f107 0314 	add.w	r3, r7, #20
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 fa4d 	bl	80041e6 <pb_message_set_to_defaults>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f083 0301 	eor.w	r3, r3, #1
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00b      	beq.n	8003d70 <decode_static_field+0x23c>
                            PB_RETURN_ERROR(stream, "failed to set defaults");
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <decode_static_field+0x232>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	e000      	b.n	8003d68 <decode_static_field+0x234>
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <decode_static_field+0x278>)
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	60d3      	str	r3, [r2, #12]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e017      	b.n	8003da0 <decode_static_field+0x26c>
                    }
                }
            }
            *(pb_size_t*)field->pSize = field->tag;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	8a12      	ldrh	r2, [r2, #16]
 8003d78:	801a      	strh	r2, [r3, #0]

            return decode_basic_field(stream, wire_type, field);
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f7ff fde1 	bl	8003948 <decode_basic_field>
 8003d86:	4603      	mov	r3, r0
 8003d88:	e00a      	b.n	8003da0 <decode_static_field+0x26c>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <decode_static_field+0x264>
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	e000      	b.n	8003d9a <decode_static_field+0x266>
 8003d98:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <decode_static_field+0x27c>)
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	60d3      	str	r3, [r2, #12]
 8003d9e:	2300      	movs	r3, #0
    }
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3758      	adds	r7, #88	; 0x58
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	0800b210 	.word	0x0800b210
 8003dac:	0800b220 	.word	0x0800b220
 8003db0:	0800b1fc 	.word	0x0800b1fc

08003db4 <decode_pointer_field>:
    }
}
#endif

static bool checkreturn decode_pointer_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	460b      	mov	r3, r1
 8003dbe:	607a      	str	r2, [r7, #4]
 8003dc0:	72fb      	strb	r3, [r7, #11]
#ifndef PB_ENABLE_MALLOC
    PB_UNUSED(wire_type);
    PB_UNUSED(field);
    PB_RETURN_ERROR(stream, "no malloc support");
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d002      	beq.n	8003dd0 <decode_pointer_field+0x1c>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	e000      	b.n	8003dd2 <decode_pointer_field+0x1e>
 8003dd0:	4b04      	ldr	r3, [pc, #16]	; (8003de4 <decode_pointer_field+0x30>)
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	60d3      	str	r3, [r2, #12]
 8003dd6:	2300      	movs	r3, #0

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
    }
#endif
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	0800b238 	.word	0x0800b238

08003de8 <decode_callback_field>:

static bool checkreturn decode_callback_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003de8:	b590      	push	{r4, r7, lr}
 8003dea:	b097      	sub	sp, #92	; 0x5c
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	61f8      	str	r0, [r7, #28]
 8003df0:	460b      	mov	r3, r1
 8003df2:	617a      	str	r2, [r7, #20]
 8003df4:	76fb      	strb	r3, [r7, #27]
    if (!field->descriptor->field_callback)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d106      	bne.n	8003e0e <decode_callback_field+0x26>
        return pb_skip_field(stream, wire_type);
 8003e00:	7efb      	ldrb	r3, [r7, #27]
 8003e02:	4619      	mov	r1, r3
 8003e04:	69f8      	ldr	r0, [r7, #28]
 8003e06:	f7ff fc91 	bl	800372c <pb_skip_field>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	e070      	b.n	8003ef0 <decode_callback_field+0x108>

    if (wire_type == PB_WT_STRING)
 8003e0e:	7efb      	ldrb	r3, [r7, #27]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d145      	bne.n	8003ea0 <decode_callback_field+0xb8>
    {
        pb_istream_t substream;
        size_t prev_bytes_left;
        
        if (!pb_make_string_substream(stream, &substream))
 8003e14:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e18:	4619      	mov	r1, r3
 8003e1a:	69f8      	ldr	r0, [r7, #28]
 8003e1c:	f7ff fd34 	bl	8003888 <pb_make_string_substream>
 8003e20:	4603      	mov	r3, r0
 8003e22:	f083 0301 	eor.w	r3, r3, #1
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d001      	beq.n	8003e30 <decode_callback_field+0x48>
            return false;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	e05f      	b.n	8003ef0 <decode_callback_field+0x108>
        
        do
        {
            prev_bytes_left = substream.bytes_left;
 8003e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e32:	657b      	str	r3, [r7, #84]	; 0x54
            if (!field->descriptor->field_callback(&substream, NULL, field))
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	2100      	movs	r1, #0
 8003e42:	4798      	blx	r3
 8003e44:	4603      	mov	r3, r0
 8003e46:	f083 0301 	eor.w	r3, r3, #1
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d010      	beq.n	8003e72 <decode_callback_field+0x8a>
            {
                PB_SET_ERROR(stream, substream.errmsg ? substream.errmsg : "callback failed");
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d002      	beq.n	8003e5e <decode_callback_field+0x76>
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	e005      	b.n	8003e6a <decode_callback_field+0x82>
 8003e5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <decode_callback_field+0x80>
 8003e64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e66:	e000      	b.n	8003e6a <decode_callback_field+0x82>
 8003e68:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <decode_callback_field+0x110>)
 8003e6a:	69fa      	ldr	r2, [r7, #28]
 8003e6c:	60d3      	str	r3, [r2, #12]
                return false;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	e03e      	b.n	8003ef0 <decode_callback_field+0x108>
            }
        } while (substream.bytes_left > 0 && substream.bytes_left < prev_bytes_left);
 8003e72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d003      	beq.n	8003e80 <decode_callback_field+0x98>
 8003e78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e7a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d8d7      	bhi.n	8003e30 <decode_callback_field+0x48>
        
        if (!pb_close_string_substream(stream, &substream))
 8003e80:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003e84:	4619      	mov	r1, r3
 8003e86:	69f8      	ldr	r0, [r7, #28]
 8003e88:	f7ff fd38 	bl	80038fc <pb_close_string_substream>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	f083 0301 	eor.w	r3, r3, #1
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <decode_callback_field+0xb4>
            return false;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	e029      	b.n	8003ef0 <decode_callback_field+0x108>

        return true;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e027      	b.n	8003ef0 <decode_callback_field+0x108>
         * This is required so that we can limit the stream length,
         * which in turn allows to use same callback for packed and
         * not-packed fields. */
        pb_istream_t substream;
        pb_byte_t buffer[10];
        size_t size = sizeof(buffer);
 8003ea0:	230a      	movs	r3, #10
 8003ea2:	627b      	str	r3, [r7, #36]	; 0x24
        
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8003ea4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003eac:	7ef9      	ldrb	r1, [r7, #27]
 8003eae:	69f8      	ldr	r0, [r7, #28]
 8003eb0:	f7ff fc7e 	bl	80037b0 <read_raw_value>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	f083 0301 	eor.w	r3, r3, #1
 8003eba:	b2db      	uxtb	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d001      	beq.n	8003ec4 <decode_callback_field+0xdc>
            return false;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	e015      	b.n	8003ef0 <decode_callback_field+0x108>
        substream = pb_istream_from_buffer(buffer, size);
 8003ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ec6:	463b      	mov	r3, r7
 8003ec8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fa87 	bl	80033e0 <pb_istream_from_buffer>
 8003ed2:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003eda:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        
        return field->descriptor->field_callback(&substream, NULL, field);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	2100      	movs	r1, #0
 8003eec:	4798      	blx	r3
 8003eee:	4603      	mov	r3, r0
    }
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	375c      	adds	r7, #92	; 0x5c
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd90      	pop	{r4, r7, pc}
 8003ef8:	0800b24c 	.word	0x0800b24c

08003efc <decode_field>:

static bool checkreturn decode_field(pb_istream_t *stream, pb_wire_type_t wire_type, pb_field_iter_t *field)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	460b      	mov	r3, r1
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	72fb      	strb	r3, [r7, #11]
        if (!pb_release_union_field(stream, field))
            return false;
    }
#endif

    switch (PB_ATYPE(field->type))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	7d9b      	ldrb	r3, [r3, #22]
 8003f0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f12:	2b80      	cmp	r3, #128	; 0x80
 8003f14:	d00e      	beq.n	8003f34 <decode_field+0x38>
 8003f16:	2b80      	cmp	r3, #128	; 0x80
 8003f18:	d81c      	bhi.n	8003f54 <decode_field+0x58>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <decode_field+0x28>
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d010      	beq.n	8003f44 <decode_field+0x48>
 8003f22:	e017      	b.n	8003f54 <decode_field+0x58>
    {
        case PB_ATYPE_STATIC:
            return decode_static_field(stream, wire_type, field);
 8003f24:	7afb      	ldrb	r3, [r7, #11]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	4619      	mov	r1, r3
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7ff fe02 	bl	8003b34 <decode_static_field>
 8003f30:	4603      	mov	r3, r0
 8003f32:	e01a      	b.n	8003f6a <decode_field+0x6e>
        
        case PB_ATYPE_POINTER:
            return decode_pointer_field(stream, wire_type, field);
 8003f34:	7afb      	ldrb	r3, [r7, #11]
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	4619      	mov	r1, r3
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7ff ff3a 	bl	8003db4 <decode_pointer_field>
 8003f40:	4603      	mov	r3, r0
 8003f42:	e012      	b.n	8003f6a <decode_field+0x6e>
        
        case PB_ATYPE_CALLBACK:
            return decode_callback_field(stream, wire_type, field);
 8003f44:	7afb      	ldrb	r3, [r7, #11]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	4619      	mov	r1, r3
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7ff ff4c 	bl	8003de8 <decode_callback_field>
 8003f50:	4603      	mov	r3, r0
 8003f52:	e00a      	b.n	8003f6a <decode_field+0x6e>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d002      	beq.n	8003f62 <decode_field+0x66>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	e000      	b.n	8003f64 <decode_field+0x68>
 8003f62:	4b04      	ldr	r3, [pc, #16]	; (8003f74 <decode_field+0x78>)
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	60d3      	str	r3, [r2, #12]
 8003f68:	2300      	movs	r3, #0
    }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	0800b1fc 	.word	0x0800b1fc

08003f78 <default_extension_decoder>:
/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_decoder(pb_istream_t *stream,
    pb_extension_t *extension, uint32_t tag, pb_wire_type_t wire_type)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08e      	sub	sp, #56	; 0x38
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	607a      	str	r2, [r7, #4]
 8003f84:	70fb      	strb	r3, [r7, #3]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension(&iter, extension))
 8003f86:	f107 0310 	add.w	r3, r7, #16
 8003f8a:	68b9      	ldr	r1, [r7, #8]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff f823 	bl	8002fd8 <pb_field_iter_begin_extension>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f083 0301 	eor.w	r3, r3, #1
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <default_extension_decoder+0x3e>
        PB_RETURN_ERROR(stream, "invalid extension");
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <default_extension_decoder+0x34>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	e000      	b.n	8003fae <default_extension_decoder+0x36>
 8003fac:	4b0e      	ldr	r3, [pc, #56]	; (8003fe8 <default_extension_decoder+0x70>)
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	60d3      	str	r3, [r2, #12]
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e014      	b.n	8003fe0 <default_extension_decoder+0x68>

    if (iter.tag != tag || !iter.message)
 8003fb6:	8c3b      	ldrh	r3, [r7, #32]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d102      	bne.n	8003fc6 <default_extension_decoder+0x4e>
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <default_extension_decoder+0x52>
        return true;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e00a      	b.n	8003fe0 <default_extension_decoder+0x68>

    extension->found = true;
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	731a      	strb	r2, [r3, #12]
    return decode_field(stream, wire_type, &iter);
 8003fd0:	f107 0210 	add.w	r2, r7, #16
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f7ff ff8f 	bl	8003efc <decode_field>
 8003fde:	4603      	mov	r3, r0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3738      	adds	r7, #56	; 0x38
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	0800b25c 	.word	0x0800b25c

08003fec <decode_extension>:

/* Try to decode an unknown field as an extension field. Tries each extension
 * decoder in turn, until one of them handles the field or loop ends. */
static bool checkreturn decode_extension(pb_istream_t *stream,
    uint32_t tag, pb_wire_type_t wire_type, pb_extension_t *extension)
{
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	60b9      	str	r1, [r7, #8]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	71fb      	strb	r3, [r7, #7]
    size_t pos = stream->bytes_left;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	613b      	str	r3, [r7, #16]
    
    while (extension != NULL && pos == stream->bytes_left)
 8004002:	e022      	b.n	800404a <decode_extension+0x5e>
    {
        bool status;
        if (extension->type->decode)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d00a      	beq.n	8004024 <decode_extension+0x38>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681c      	ldr	r4, [r3, #0]
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	6839      	ldr	r1, [r7, #0]
 800401a:	68f8      	ldr	r0, [r7, #12]
 800401c:	47a0      	blx	r4
 800401e:	4603      	mov	r3, r0
 8004020:	75fb      	strb	r3, [r7, #23]
 8004022:	e007      	b.n	8004034 <decode_extension+0x48>
        else
            status = default_extension_decoder(stream, extension, tag, wire_type);
 8004024:	79fb      	ldrb	r3, [r7, #7]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	6839      	ldr	r1, [r7, #0]
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f7ff ffa4 	bl	8003f78 <default_extension_decoder>
 8004030:	4603      	mov	r3, r0
 8004032:	75fb      	strb	r3, [r7, #23]

        if (!status)
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	f083 0301 	eor.w	r3, r3, #1
 800403a:	b2db      	uxtb	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d001      	beq.n	8004044 <decode_extension+0x58>
            return false;
 8004040:	2300      	movs	r3, #0
 8004042:	e00b      	b.n	800405c <decode_extension+0x70>
        
        extension = extension->next;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	603b      	str	r3, [r7, #0]
    while (extension != NULL && pos == stream->bytes_left)
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d004      	beq.n	800405a <decode_extension+0x6e>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	429a      	cmp	r2, r3
 8004058:	d0d4      	beq.n	8004004 <decode_extension+0x18>
    }
    
    return true;
 800405a:	2301      	movs	r3, #1
}
 800405c:	4618      	mov	r0, r3
 800405e:	371c      	adds	r7, #28
 8004060:	46bd      	mov	sp, r7
 8004062:	bd90      	pop	{r4, r7, pc}

08004064 <pb_field_set_to_default>:

/* Initialize message fields to default values, recursively */
static bool pb_field_set_to_default(pb_field_iter_t *field)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08e      	sub	sp, #56	; 0x38
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
    pb_type_t type;
    type = field->type;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	7d9b      	ldrb	r3, [r3, #22]
 8004070:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8004074:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004078:	f003 030f 	and.w	r3, r3, #15
 800407c:	2b0a      	cmp	r3, #10
 800407e:	d124      	bne.n	80040ca <pb_field_set_to_default+0x66>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)field->pData;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	69db      	ldr	r3, [r3, #28]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 8004088:	e01b      	b.n	80040c2 <pb_field_set_to_default+0x5e>
        {
            pb_field_iter_t ext_iter;
            if (pb_field_iter_begin_extension(&ext_iter, ext))
 800408a:	f107 0308 	add.w	r3, r7, #8
 800408e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe ffa1 	bl	8002fd8 <pb_field_iter_begin_extension>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00f      	beq.n	80040bc <pb_field_set_to_default+0x58>
            {
                ext->found = false;
 800409c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800409e:	2200      	movs	r2, #0
 80040a0:	731a      	strb	r2, [r3, #12]
                if (!pb_message_set_to_defaults(&ext_iter))
 80040a2:	f107 0308 	add.w	r3, r7, #8
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 f89d 	bl	80041e6 <pb_message_set_to_defaults>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f083 0301 	eor.w	r3, r3, #1
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d001      	beq.n	80040bc <pb_field_set_to_default+0x58>
                    return false;
 80040b8:	2300      	movs	r3, #0
 80040ba:	e090      	b.n	80041de <pb_field_set_to_default+0x17a>
            }
            ext = ext->next;
 80040bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	637b      	str	r3, [r7, #52]	; 0x34
        while (ext != NULL)
 80040c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e0      	bne.n	800408a <pb_field_set_to_default+0x26>
 80040c8:	e088      	b.n	80041dc <pb_field_set_to_default+0x178>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80040ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80040ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d166      	bne.n	80041a4 <pb_field_set_to_default+0x140>
    {
        bool init_data = true;
 80040d6:	2301      	movs	r3, #1
 80040d8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 80040dc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80040e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040e4:	2b10      	cmp	r3, #16
 80040e6:	d108      	bne.n	80040fa <pb_field_set_to_default+0x96>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a1b      	ldr	r3, [r3, #32]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d004      	beq.n	80040fa <pb_field_set_to_default+0x96>
        {
            /* Set has_field to false. Still initialize the optional field
             * itself also. */
            *(bool*)field->pSize = false;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	2200      	movs	r2, #0
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e012      	b.n	8004120 <pb_field_set_to_default+0xbc>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80040fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80040fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004102:	2b20      	cmp	r3, #32
 8004104:	d005      	beq.n	8004112 <pb_field_set_to_default+0xae>
                 PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8004106:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800410a:	f003 0330 	and.w	r3, r3, #48	; 0x30
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 800410e:	2b30      	cmp	r3, #48	; 0x30
 8004110:	d106      	bne.n	8004120 <pb_field_set_to_default+0xbc>
        {
            /* REPEATED: Set array count to 0, no need to initialize contents.
               ONEOF: Set which_field to 0. */
            *(pb_size_t*)field->pSize = 0;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	2200      	movs	r2, #0
 8004118:	801a      	strh	r2, [r3, #0]
            init_data = false;
 800411a:	2300      	movs	r3, #0
 800411c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
        }

        if (init_data)
 8004120:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004124:	2b00      	cmp	r3, #0
 8004126:	d059      	beq.n	80041dc <pb_field_set_to_default+0x178>
        {
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	7d9b      	ldrb	r3, [r3, #22]
 800412c:	f003 030f 	and.w	r3, r3, #15
 8004130:	2b08      	cmp	r3, #8
 8004132:	d005      	beq.n	8004140 <pb_field_set_to_default+0xdc>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	7d9b      	ldrb	r3, [r3, #22]
 8004138:	f003 030f 	and.w	r3, r3, #15
 800413c:	2b09      	cmp	r3, #9
 800413e:	d128      	bne.n	8004192 <pb_field_set_to_default+0x12e>
                (field->submsg_desc->default_value != NULL ||
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004144:	689b      	ldr	r3, [r3, #8]
            if (PB_LTYPE_IS_SUBMSG(field->type) &&
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->field_callback != NULL ||
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414e:	68db      	ldr	r3, [r3, #12]
                (field->submsg_desc->default_value != NULL ||
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <pb_field_set_to_default+0xfc>
                 field->submsg_desc->submsg_info[0] != NULL))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
                 field->submsg_desc->field_callback != NULL ||
 800415c:	2b00      	cmp	r3, #0
 800415e:	d018      	beq.n	8004192 <pb_field_set_to_default+0x12e>
            {
                /* Initialize submessage to defaults.
                 * Only needed if it has default values
                 * or callback/submessage fields. */
                pb_field_iter_t submsg_iter;
                if (pb_field_iter_begin(&submsg_iter, field->submsg_desc, field->pData))
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69da      	ldr	r2, [r3, #28]
 8004168:	f107 0308 	add.w	r3, r7, #8
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe ff1a 	bl	8002fa6 <pb_field_iter_begin>
 8004172:	4603      	mov	r3, r0
 8004174:	2b00      	cmp	r3, #0
 8004176:	d030      	beq.n	80041da <pb_field_set_to_default+0x176>
                {
                    if (!pb_message_set_to_defaults(&submsg_iter))
 8004178:	f107 0308 	add.w	r3, r7, #8
 800417c:	4618      	mov	r0, r3
 800417e:	f000 f832 	bl	80041e6 <pb_message_set_to_defaults>
 8004182:	4603      	mov	r3, r0
 8004184:	f083 0301 	eor.w	r3, r3, #1
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	d025      	beq.n	80041da <pb_field_set_to_default+0x176>
                        return false;
 800418e:	2300      	movs	r3, #0
 8004190:	e025      	b.n	80041de <pb_field_set_to_default+0x17a>
                }
            }
            else
            {
                /* Initialize to zeros */
                memset(field->pData, 0, (size_t)field->data_size);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69d8      	ldr	r0, [r3, #28]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	8a5b      	ldrh	r3, [r3, #18]
 800419a:	461a      	mov	r2, r3
 800419c:	2100      	movs	r1, #0
 800419e:	f006 fa75 	bl	800a68c <memset>
 80041a2:	e01b      	b.n	80041dc <pb_field_set_to_default+0x178>
            }
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 80041a4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80041a8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041ac:	2b80      	cmp	r3, #128	; 0x80
 80041ae:	d115      	bne.n	80041dc <pb_field_set_to_default+0x178>
    {
        /* Initialize the pointer to NULL. */
        *(void**)field->pField = NULL;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]

        /* Initialize array count to 0. */
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80041b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80041bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80041c0:	2b20      	cmp	r3, #32
 80041c2:	d005      	beq.n	80041d0 <pb_field_set_to_default+0x16c>
            PB_HTYPE(type) == PB_HTYPE_ONEOF)
 80041c4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80041c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 80041cc:	2b30      	cmp	r3, #48	; 0x30
 80041ce:	d105      	bne.n	80041dc <pb_field_set_to_default+0x178>
        {
            *(pb_size_t*)field->pSize = 0;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	2200      	movs	r2, #0
 80041d6:	801a      	strh	r2, [r3, #0]
 80041d8:	e000      	b.n	80041dc <pb_field_set_to_default+0x178>
            {
 80041da:	bf00      	nop
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }

    return true;
 80041dc:	2301      	movs	r3, #1
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3738      	adds	r7, #56	; 0x38
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <pb_message_set_to_defaults>:

static bool pb_message_set_to_defaults(pb_field_iter_t *iter)
{
 80041e6:	b590      	push	{r4, r7, lr}
 80041e8:	b08d      	sub	sp, #52	; 0x34
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6178      	str	r0, [r7, #20]
    pb_istream_t defstream = PB_ISTREAM_EMPTY;
 80041ee:	f107 0320 	add.w	r3, r7, #32
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	605a      	str	r2, [r3, #4]
 80041f8:	609a      	str	r2, [r3, #8]
 80041fa:	60da      	str	r2, [r3, #12]
    uint32_t tag = 0;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61fb      	str	r3, [r7, #28]
    pb_wire_type_t wire_type = PB_WT_VARINT;
 8004200:	2300      	movs	r3, #0
 8004202:	76fb      	strb	r3, [r7, #27]
    bool eof;

    if (iter->descriptor->default_value)
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d020      	beq.n	8004250 <pb_message_set_to_defaults+0x6a>
    {
        defstream = pb_istream_from_buffer(iter->descriptor->default_value, (size_t)-1);
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	6899      	ldr	r1, [r3, #8]
 8004214:	463b      	mov	r3, r7
 8004216:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff f8e0 	bl	80033e0 <pb_istream_from_buffer>
 8004220:	f107 0420 	add.w	r4, r7, #32
 8004224:	463b      	mov	r3, r7
 8004226:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004228:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 800422c:	f107 031a 	add.w	r3, r7, #26
 8004230:	f107 021c 	add.w	r2, r7, #28
 8004234:	f107 011b 	add.w	r1, r7, #27
 8004238:	f107 0020 	add.w	r0, r7, #32
 800423c:	f7ff fa47 	bl	80036ce <pb_decode_tag>
 8004240:	4603      	mov	r3, r0
 8004242:	f083 0301 	eor.w	r3, r3, #1
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <pb_message_set_to_defaults+0x6a>
            return false;
 800424c:	2300      	movs	r3, #0
 800424e:	e043      	b.n	80042d8 <pb_message_set_to_defaults+0xf2>
    }

    do
    {
        if (!pb_field_set_to_default(iter))
 8004250:	6978      	ldr	r0, [r7, #20]
 8004252:	f7ff ff07 	bl	8004064 <pb_field_set_to_default>
 8004256:	4603      	mov	r3, r0
 8004258:	f083 0301 	eor.w	r3, r3, #1
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <pb_message_set_to_defaults+0x80>
            return false;
 8004262:	2300      	movs	r3, #0
 8004264:	e038      	b.n	80042d8 <pb_message_set_to_defaults+0xf2>

        if (tag != 0 && iter->tag == tag)
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d02e      	beq.n	80042ca <pb_message_set_to_defaults+0xe4>
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	8a1b      	ldrh	r3, [r3, #16]
 8004270:	461a      	mov	r2, r3
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	429a      	cmp	r2, r3
 8004276:	d128      	bne.n	80042ca <pb_message_set_to_defaults+0xe4>
        {
            /* We have a default value for this field in the defstream */
            if (!decode_field(&defstream, wire_type, iter))
 8004278:	7ef9      	ldrb	r1, [r7, #27]
 800427a:	f107 0320 	add.w	r3, r7, #32
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	4618      	mov	r0, r3
 8004282:	f7ff fe3b 	bl	8003efc <decode_field>
 8004286:	4603      	mov	r3, r0
 8004288:	f083 0301 	eor.w	r3, r3, #1
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <pb_message_set_to_defaults+0xb0>
                return false;
 8004292:	2300      	movs	r3, #0
 8004294:	e020      	b.n	80042d8 <pb_message_set_to_defaults+0xf2>
            if (!pb_decode_tag(&defstream, &wire_type, &tag, &eof))
 8004296:	f107 031a 	add.w	r3, r7, #26
 800429a:	f107 021c 	add.w	r2, r7, #28
 800429e:	f107 011b 	add.w	r1, r7, #27
 80042a2:	f107 0020 	add.w	r0, r7, #32
 80042a6:	f7ff fa12 	bl	80036ce <pb_decode_tag>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f083 0301 	eor.w	r3, r3, #1
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <pb_message_set_to_defaults+0xd4>
                return false;
 80042b6:	2300      	movs	r3, #0
 80042b8:	e00e      	b.n	80042d8 <pb_message_set_to_defaults+0xf2>

            if (iter->pSize)
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d003      	beq.n	80042ca <pb_message_set_to_defaults+0xe4>
                *(bool*)iter->pSize = false;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	2200      	movs	r2, #0
 80042c8:	701a      	strb	r2, [r3, #0]
        }
    } while (pb_field_iter_next(iter));
 80042ca:	6978      	ldr	r0, [r7, #20]
 80042cc:	f7fe feb4 	bl	8003038 <pb_field_iter_next>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1bc      	bne.n	8004250 <pb_message_set_to_defaults+0x6a>

    return true;
 80042d6:	2301      	movs	r3, #1
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3734      	adds	r7, #52	; 0x34
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd90      	pop	{r4, r7, pc}

080042e0 <pb_decode_inner>:
/*********************
 * Decode all fields *
 *********************/

static bool checkreturn pb_decode_inner(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct, unsigned int flags)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b09a      	sub	sp, #104	; 0x68
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
    uint32_t extension_range_start = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	667b      	str	r3, [r7, #100]	; 0x64
    pb_extension_t *extensions = NULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	663b      	str	r3, [r7, #96]	; 0x60

    /* 'fixed_count_field' and 'fixed_count_size' track position of a repeated fixed
     * count field. This can only handle _one_ repeated fixed count field that
     * is unpacked and unordered among other (non repeated fixed count) fields.
     */
    pb_size_t fixed_count_field = PB_SIZE_MAX;
 80042f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042fa:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
    pb_size_t fixed_count_size = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
    pb_size_t fixed_count_total_size = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

    pb_fields_seen_t fields_seen = {{0, 0}};
 800430a:	2300      	movs	r3, #0
 800430c:	643b      	str	r3, [r7, #64]	; 0x40
 800430e:	2300      	movs	r3, #0
 8004310:	647b      	str	r3, [r7, #68]	; 0x44
    const uint32_t allbits = ~(uint32_t)0;
 8004312:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004316:	657b      	str	r3, [r7, #84]	; 0x54
    pb_field_iter_t iter;

    if (pb_field_iter_begin(&iter, fields, dest_struct))
 8004318:	f107 0318 	add.w	r3, r7, #24
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	4618      	mov	r0, r3
 8004322:	f7fe fe40 	bl	8002fa6 <pb_field_iter_begin>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8102 	beq.w	8004532 <pb_decode_inner+0x252>
    {
        if ((flags & PB_DECODE_NOINIT) == 0)
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	2b00      	cmp	r3, #0
 8004336:	f040 80fc 	bne.w	8004532 <pb_decode_inner+0x252>
        {
            if (!pb_message_set_to_defaults(&iter))
 800433a:	f107 0318 	add.w	r3, r7, #24
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ff51 	bl	80041e6 <pb_message_set_to_defaults>
 8004344:	4603      	mov	r3, r0
 8004346:	f083 0301 	eor.w	r3, r3, #1
 800434a:	b2db      	uxtb	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	f000 80f0 	beq.w	8004532 <pb_decode_inner+0x252>
                PB_RETURN_ERROR(stream, "failed to set defaults");
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d002      	beq.n	8004360 <pb_decode_inner+0x80>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	e000      	b.n	8004362 <pb_decode_inner+0x82>
 8004360:	4b99      	ldr	r3, [pc, #612]	; (80045c8 <pb_decode_inner+0x2e8>)
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	60d3      	str	r3, [r2, #12]
 8004366:	2300      	movs	r3, #0
 8004368:	e16d      	b.n	8004646 <pb_decode_inner+0x366>
    {
        uint32_t tag;
        pb_wire_type_t wire_type;
        bool eof;

        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 800436a:	f107 0312 	add.w	r3, r7, #18
 800436e:	f107 0214 	add.w	r2, r7, #20
 8004372:	f107 0113 	add.w	r1, r7, #19
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	f7ff f9a9 	bl	80036ce <pb_decode_tag>
 800437c:	4603      	mov	r3, r0
 800437e:	f083 0301 	eor.w	r3, r3, #1
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d005      	beq.n	8004394 <pb_decode_inner+0xb4>
        {
            if (eof)
 8004388:	7cbb      	ldrb	r3, [r7, #18]
 800438a:	2b00      	cmp	r3, #0
 800438c:	f040 80d7 	bne.w	800453e <pb_decode_inner+0x25e>
                break;
            else
                return false;
 8004390:	2300      	movs	r3, #0
 8004392:	e158      	b.n	8004646 <pb_decode_inner+0x366>
        }

        if (tag == 0)
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d111      	bne.n	80043be <pb_decode_inner+0xde>
        {
          if (flags & PB_DECODE_NULLTERMINATED)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	f003 0304 	and.w	r3, r3, #4
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f040 80ce 	bne.w	8004542 <pb_decode_inner+0x262>
          {
            break;
          }
          else
          {
            PB_RETURN_ERROR(stream, "zero tag");
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <pb_decode_inner+0xd4>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	e000      	b.n	80043b6 <pb_decode_inner+0xd6>
 80043b4:	4b85      	ldr	r3, [pc, #532]	; (80045cc <pb_decode_inner+0x2ec>)
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	60d3      	str	r3, [r2, #12]
 80043ba:	2300      	movs	r3, #0
 80043bc:	e143      	b.n	8004646 <pb_decode_inner+0x366>
          }
        }

        if (!pb_field_iter_find(&iter, tag) || PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 80043be:	697a      	ldr	r2, [r7, #20]
 80043c0:	f107 0318 	add.w	r3, r7, #24
 80043c4:	4611      	mov	r1, r2
 80043c6:	4618      	mov	r0, r3
 80043c8:	f7fe fe4b 	bl	8003062 <pb_field_iter_find>
 80043cc:	4603      	mov	r3, r0
 80043ce:	f083 0301 	eor.w	r3, r3, #1
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d105      	bne.n	80043e4 <pb_decode_inner+0x104>
 80043d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80043dc:	f003 030f 	and.w	r3, r3, #15
 80043e0:	2b0a      	cmp	r3, #10
 80043e2:	d13c      	bne.n	800445e <pb_decode_inner+0x17e>
        {
            /* No match found, check if it matches an extension. */
            if (extension_range_start == 0)
 80043e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d112      	bne.n	8004410 <pb_decode_inner+0x130>
            {
                if (pb_field_iter_find_extension(&iter))
 80043ea:	f107 0318 	add.w	r3, r7, #24
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe fe8d 	bl	800310e <pb_field_iter_find_extension>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d004      	beq.n	8004404 <pb_decode_inner+0x124>
                {
                    extensions = *(pb_extension_t* const *)iter.pData;
 80043fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	663b      	str	r3, [r7, #96]	; 0x60
                    extension_range_start = iter.tag;
 8004400:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004402:	667b      	str	r3, [r7, #100]	; 0x64
                }

                if (!extensions)
 8004404:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004406:	2b00      	cmp	r3, #0
 8004408:	d102      	bne.n	8004410 <pb_decode_inner+0x130>
                {
                    extension_range_start = (uint32_t)-1;
 800440a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800440e:	667b      	str	r3, [r7, #100]	; 0x64
                }
            }

            if (tag >= extension_range_start)
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004414:	429a      	cmp	r2, r3
 8004416:	d815      	bhi.n	8004444 <pb_decode_inner+0x164>
            {
                size_t pos = stream->bytes_left;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	64fb      	str	r3, [r7, #76]	; 0x4c

                if (!decode_extension(stream, tag, wire_type, extensions))
 800441e:	6979      	ldr	r1, [r7, #20]
 8004420:	7cfa      	ldrb	r2, [r7, #19]
 8004422:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f7ff fde1 	bl	8003fec <decode_extension>
 800442a:	4603      	mov	r3, r0
 800442c:	f083 0301 	eor.w	r3, r3, #1
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <pb_decode_inner+0x15a>
                    return false;
 8004436:	2300      	movs	r3, #0
 8004438:	e105      	b.n	8004646 <pb_decode_inner+0x366>

                if (pos != stream->bytes_left)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004440:	429a      	cmp	r2, r3
 8004442:	d173      	bne.n	800452c <pb_decode_inner+0x24c>
                    continue;
                }
            }

            /* No match found, skip data */
            if (!pb_skip_field(stream, wire_type))
 8004444:	7cfb      	ldrb	r3, [r7, #19]
 8004446:	4619      	mov	r1, r3
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f7ff f96f 	bl	800372c <pb_skip_field>
 800444e:	4603      	mov	r3, r0
 8004450:	f083 0301 	eor.w	r3, r3, #1
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d06a      	beq.n	8004530 <pb_decode_inner+0x250>
                return false;
 800445a:	2300      	movs	r3, #0
 800445c:	e0f3      	b.n	8004646 <pb_decode_inner+0x366>
        }

        /* If a repeated fixed count field was found, get size from
         * 'fixed_count_field' as there is no counter contained in the struct.
         */
        if (PB_HTYPE(iter.type) == PB_HTYPE_REPEATED && iter.pSize == &iter.array_size)
 800445e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004462:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004466:	2b20      	cmp	r3, #32
 8004468:	d12e      	bne.n	80044c8 <pb_decode_inner+0x1e8>
 800446a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800446c:	f107 0318 	add.w	r3, r7, #24
 8004470:	3314      	adds	r3, #20
 8004472:	429a      	cmp	r2, r3
 8004474:	d128      	bne.n	80044c8 <pb_decode_inner+0x1e8>
        {
            if (fixed_count_field != iter.index) {
 8004476:	8c3b      	ldrh	r3, [r7, #32]
 8004478:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 800447c:	429a      	cmp	r2, r3
 800447e:	d020      	beq.n	80044c2 <pb_decode_inner+0x1e2>
                /* If the new fixed count field does not match the previous one,
                 * check that the previous one is NULL or that it finished
                 * receiving all the expected data.
                 */
                if (fixed_count_field != PB_SIZE_MAX &&
 8004480:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004488:	4293      	cmp	r3, r2
 800448a:	d011      	beq.n	80044b0 <pb_decode_inner+0x1d0>
                    fixed_count_size != fixed_count_total_size)
 800448c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
                if (fixed_count_field != PB_SIZE_MAX &&
 8004490:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8004494:	429a      	cmp	r2, r3
 8004496:	d00b      	beq.n	80044b0 <pb_decode_inner+0x1d0>
                {
                    PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d002      	beq.n	80044a6 <pb_decode_inner+0x1c6>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	e000      	b.n	80044a8 <pb_decode_inner+0x1c8>
 80044a6:	4b4a      	ldr	r3, [pc, #296]	; (80045d0 <pb_decode_inner+0x2f0>)
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	60d3      	str	r3, [r2, #12]
 80044ac:	2300      	movs	r3, #0
 80044ae:	e0ca      	b.n	8004646 <pb_decode_inner+0x366>
                }

                fixed_count_field = iter.index;
 80044b0:	8c3b      	ldrh	r3, [r7, #32]
 80044b2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
                fixed_count_size = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
                fixed_count_total_size = iter.array_size;
 80044bc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80044be:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
            }

            iter.pSize = &fixed_count_size;
 80044c2:	f107 034a 	add.w	r3, r7, #74	; 0x4a
 80044c6:	63bb      	str	r3, [r7, #56]	; 0x38
        }

        if (PB_HTYPE(iter.type) == PB_HTYPE_REQUIRED
 80044c8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80044cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d11c      	bne.n	800450e <pb_decode_inner+0x22e>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 80044d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044d6:	2b3f      	cmp	r3, #63	; 0x3f
 80044d8:	d819      	bhi.n	800450e <pb_decode_inner+0x22e>
        {
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 80044da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044dc:	f003 031f 	and.w	r3, r3, #31
 80044e0:	2201      	movs	r2, #1
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	653b      	str	r3, [r7, #80]	; 0x50
            fields_seen.bitfield[iter.required_field_index >> 5] |= tmp;
 80044e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044ea:	095b      	lsrs	r3, r3, #5
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	3368      	adds	r3, #104	; 0x68
 80044f2:	443b      	add	r3, r7
 80044f4:	f853 2c28 	ldr.w	r2, [r3, #-40]
 80044f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044fa:	095b      	lsrs	r3, r3, #5
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	4619      	mov	r1, r3
 8004500:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004502:	431a      	orrs	r2, r3
 8004504:	008b      	lsls	r3, r1, #2
 8004506:	3368      	adds	r3, #104	; 0x68
 8004508:	443b      	add	r3, r7
 800450a:	f843 2c28 	str.w	r2, [r3, #-40]
        }

        if (!decode_field(stream, wire_type, &iter))
 800450e:	7cfb      	ldrb	r3, [r7, #19]
 8004510:	f107 0218 	add.w	r2, r7, #24
 8004514:	4619      	mov	r1, r3
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f7ff fcf0 	bl	8003efc <decode_field>
 800451c:	4603      	mov	r3, r0
 800451e:	f083 0301 	eor.w	r3, r3, #1
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d004      	beq.n	8004532 <pb_decode_inner+0x252>
            return false;
 8004528:	2300      	movs	r3, #0
 800452a:	e08c      	b.n	8004646 <pb_decode_inner+0x366>
                    continue;
 800452c:	bf00      	nop
 800452e:	e000      	b.n	8004532 <pb_decode_inner+0x252>
            continue;
 8004530:	bf00      	nop
    while (stream->bytes_left)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	2b00      	cmp	r3, #0
 8004538:	f47f af17 	bne.w	800436a <pb_decode_inner+0x8a>
 800453c:	e002      	b.n	8004544 <pb_decode_inner+0x264>
                break;
 800453e:	bf00      	nop
 8004540:	e000      	b.n	8004544 <pb_decode_inner+0x264>
            break;
 8004542:	bf00      	nop
    }

    /* Check that all elements of the last decoded fixed count field were present. */
    if (fixed_count_field != PB_SIZE_MAX &&
 8004544:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004548:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800454c:	4293      	cmp	r3, r2
 800454e:	d011      	beq.n	8004574 <pb_decode_inner+0x294>
        fixed_count_size != fixed_count_total_size)
 8004550:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
    if (fixed_count_field != PB_SIZE_MAX &&
 8004554:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8004558:	429a      	cmp	r2, r3
 800455a:	d00b      	beq.n	8004574 <pb_decode_inner+0x294>
    {
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <pb_decode_inner+0x28a>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	e000      	b.n	800456c <pb_decode_inner+0x28c>
 800456a:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <pb_decode_inner+0x2f0>)
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	60d3      	str	r3, [r2, #12]
 8004570:	2300      	movs	r3, #0
 8004572:	e068      	b.n	8004646 <pb_decode_inner+0x366>
    }

    /* Check that all required fields were present. */
    {
        pb_size_t req_field_count = iter.descriptor->required_field_count;
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	8a5b      	ldrh	r3, [r3, #18]
 8004578:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

        if (req_field_count > 0)
 800457c:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004580:	2b00      	cmp	r3, #0
 8004582:	d05f      	beq.n	8004644 <pb_decode_inner+0x364>
        {
            pb_size_t i;

            if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 8004584:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004588:	2b40      	cmp	r3, #64	; 0x40
 800458a:	d902      	bls.n	8004592 <pb_decode_inner+0x2b2>
                req_field_count = PB_MAX_REQUIRED_FIELDS;
 800458c:	2340      	movs	r3, #64	; 0x40
 800458e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

            /* Check the whole words */
            for (i = 0; i < (req_field_count >> 5); i++)
 8004592:	2300      	movs	r3, #0
 8004594:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8004598:	e023      	b.n	80045e2 <pb_decode_inner+0x302>
            {
                if (fields_seen.bitfield[i] != allbits)
 800459a:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	3368      	adds	r3, #104	; 0x68
 80045a2:	443b      	add	r3, r7
 80045a4:	f853 3c28 	ldr.w	r3, [r3, #-40]
 80045a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d014      	beq.n	80045d8 <pb_decode_inner+0x2f8>
                    PB_RETURN_ERROR(stream, "missing required field");
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d002      	beq.n	80045bc <pb_decode_inner+0x2dc>
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	e000      	b.n	80045be <pb_decode_inner+0x2de>
 80045bc:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <pb_decode_inner+0x2f4>)
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	60d3      	str	r3, [r2, #12]
 80045c2:	2300      	movs	r3, #0
 80045c4:	e03f      	b.n	8004646 <pb_decode_inner+0x366>
 80045c6:	bf00      	nop
 80045c8:	0800b220 	.word	0x0800b220
 80045cc:	0800b270 	.word	0x0800b270
 80045d0:	0800b27c 	.word	0x0800b27c
 80045d4:	0800b2a0 	.word	0x0800b2a0
            for (i = 0; i < (req_field_count >> 5); i++)
 80045d8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80045dc:	3301      	adds	r3, #1
 80045de:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 80045e2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d3d3      	bcc.n	800459a <pb_decode_inner+0x2ba>
            }

            /* Check the remaining bits (if any) */
            if ((req_field_count & 31) != 0)
 80045f2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d022      	beq.n	8004644 <pb_decode_inner+0x364>
            {
                if (fields_seen.bitfield[req_field_count >> 5] !=
 80045fe:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004602:	095b      	lsrs	r3, r3, #5
 8004604:	b29b      	uxth	r3, r3
 8004606:	009b      	lsls	r3, r3, #2
 8004608:	3368      	adds	r3, #104	; 0x68
 800460a:	443b      	add	r3, r7
 800460c:	f853 2c28 	ldr.w	r2, [r3, #-40]
                    (allbits >> (uint_least8_t)(32 - (req_field_count & 31))))
 8004610:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004614:	b2db      	uxtb	r3, r3
 8004616:	f003 031f 	and.w	r3, r3, #31
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f1c3 0320 	rsb	r3, r3, #32
 8004620:	b2db      	uxtb	r3, r3
 8004622:	4619      	mov	r1, r3
 8004624:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004626:	40cb      	lsrs	r3, r1
                if (fields_seen.bitfield[req_field_count >> 5] !=
 8004628:	429a      	cmp	r2, r3
 800462a:	d00b      	beq.n	8004644 <pb_decode_inner+0x364>
                {
                    PB_RETURN_ERROR(stream, "missing required field");
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <pb_decode_inner+0x35a>
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	e000      	b.n	800463c <pb_decode_inner+0x35c>
 800463a:	4b05      	ldr	r3, [pc, #20]	; (8004650 <pb_decode_inner+0x370>)
 800463c:	68fa      	ldr	r2, [r7, #12]
 800463e:	60d3      	str	r3, [r2, #12]
 8004640:	2300      	movs	r3, #0
 8004642:	e000      	b.n	8004646 <pb_decode_inner+0x366>
                }
            }
        }
    }

    return true;
 8004644:	2301      	movs	r3, #1
}
 8004646:	4618      	mov	r0, r3
 8004648:	3768      	adds	r7, #104	; 0x68
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	0800b2a0 	.word	0x0800b2a0

08004654 <pb_decode>:
    
    return status;
}

bool checkreturn pb_decode(pb_istream_t *stream, const pb_msgdesc_t *fields, void *dest_struct)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
    bool status;

    status = pb_decode_inner(stream, fields, dest_struct, 0);
 8004660:	2300      	movs	r3, #0
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff fe3a 	bl	80042e0 <pb_decode_inner>
 800466c:	4603      	mov	r3, r0
 800466e:	75fb      	strb	r3, [r7, #23]
#ifdef PB_ENABLE_MALLOC
    if (!status)
        pb_release(fields, dest_struct);
#endif

    return status;
 8004670:	7dfb      	ldrb	r3, [r7, #23]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}

0800467a <pb_decode_bool>:
#endif

/* Field decoders */

bool pb_decode_bool(pb_istream_t *stream, bool *dest)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b084      	sub	sp, #16
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]
    uint32_t value;
    if (!pb_decode_varint32(stream, &value))
 8004684:	f107 030c 	add.w	r3, r7, #12
 8004688:	4619      	mov	r1, r3
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fe ff70 	bl	8003570 <pb_decode_varint32>
 8004690:	4603      	mov	r3, r0
 8004692:	f083 0301 	eor.w	r3, r3, #1
 8004696:	b2db      	uxtb	r3, r3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d001      	beq.n	80046a0 <pb_decode_bool+0x26>
        return false;
 800469c:	2300      	movs	r3, #0
 800469e:	e008      	b.n	80046b2 <pb_decode_bool+0x38>

    *(bool*)dest = (value != 0);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	bf14      	ite	ne
 80046a6:	2301      	movne	r3, #1
 80046a8:	2300      	moveq	r3, #0
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	701a      	strb	r2, [r3, #0]
    return true;
 80046b0:	2301      	movs	r3, #1
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}

080046ba <pb_decode_svarint>:

bool pb_decode_svarint(pb_istream_t *stream, pb_int64_t *dest)
{
 80046ba:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
    pb_uint64_t value;
    if (!pb_decode_varint(stream, &value))
 80046c6:	f107 0308 	add.w	r3, r7, #8
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7fe ff5f 	bl	8003590 <pb_decode_varint>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f083 0301 	eor.w	r3, r3, #1
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <pb_decode_svarint+0x28>
        return false;
 80046de:	2300      	movs	r3, #0
 80046e0:	e029      	b.n	8004736 <pb_decode_svarint+0x7c>
    
    if (value & 1)
 80046e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046e6:	f002 0401 	and.w	r4, r2, #1
 80046ea:	2500      	movs	r5, #0
 80046ec:	ea54 0305 	orrs.w	r3, r4, r5
 80046f0:	d013      	beq.n	800471a <pb_decode_svarint+0x60>
        *dest = (pb_int64_t)(~(value >> 1));
 80046f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	0842      	lsrs	r2, r0, #1
 8004700:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 8004704:	084b      	lsrs	r3, r1, #1
 8004706:	ea6f 0802 	mvn.w	r8, r2
 800470a:	ea6f 0903 	mvn.w	r9, r3
 800470e:	4642      	mov	r2, r8
 8004710:	464b      	mov	r3, r9
 8004712:	6839      	ldr	r1, [r7, #0]
 8004714:	e9c1 2300 	strd	r2, r3, [r1]
 8004718:	e00c      	b.n	8004734 <pb_decode_svarint+0x7a>
    else
        *dest = (pb_int64_t)(value >> 1);
 800471a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800471e:	f04f 0200 	mov.w	r2, #0
 8004722:	f04f 0300 	mov.w	r3, #0
 8004726:	0842      	lsrs	r2, r0, #1
 8004728:	ea42 72c1 	orr.w	r2, r2, r1, lsl #31
 800472c:	084b      	lsrs	r3, r1, #1
 800472e:	6839      	ldr	r1, [r7, #0]
 8004730:	e9c1 2300 	strd	r2, r3, [r1]
    
    return true;
 8004734:	2301      	movs	r3, #1
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08004740 <pb_decode_fixed32>:

bool pb_decode_fixed32(pb_istream_t *stream, void *dest)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
    union {
        uint32_t fixed32;
        pb_byte_t bytes[4];
    } u;

    if (!pb_read(stream, u.bytes, 4))
 800474a:	f107 030c 	add.w	r3, r7, #12
 800474e:	2204      	movs	r2, #4
 8004750:	4619      	mov	r1, r3
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fe fd92 	bl	800327c <pb_read>
 8004758:	4603      	mov	r3, r0
 800475a:	f083 0301 	eor.w	r3, r3, #1
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b00      	cmp	r3, #0
 8004762:	d001      	beq.n	8004768 <pb_decode_fixed32+0x28>
        return false;
 8004764:	2300      	movs	r3, #0
 8004766:	e003      	b.n	8004770 <pb_decode_fixed32+0x30>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint32_t*)dest = u.fixed32;
 8004768:	68fa      	ldr	r2, [r7, #12]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	601a      	str	r2, [r3, #0]
    *(uint32_t*)dest = ((uint32_t)u.bytes[0] << 0) |
                       ((uint32_t)u.bytes[1] << 8) |
                       ((uint32_t)u.bytes[2] << 16) |
                       ((uint32_t)u.bytes[3] << 24);
#endif
    return true;
 800476e:	2301      	movs	r3, #1
}
 8004770:	4618      	mov	r0, r3
 8004772:	3710      	adds	r7, #16
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <pb_decode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool pb_decode_fixed64(pb_istream_t *stream, void *dest)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
    union {
        uint64_t fixed64;
        pb_byte_t bytes[8];
    } u;

    if (!pb_read(stream, u.bytes, 8))
 8004782:	f107 0308 	add.w	r3, r7, #8
 8004786:	2208      	movs	r2, #8
 8004788:	4619      	mov	r1, r3
 800478a:	6878      	ldr	r0, [r7, #4]
 800478c:	f7fe fd76 	bl	800327c <pb_read>
 8004790:	4603      	mov	r3, r0
 8004792:	f083 0301 	eor.w	r3, r3, #1
 8004796:	b2db      	uxtb	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <pb_decode_fixed64+0x28>
        return false;
 800479c:	2300      	movs	r3, #0
 800479e:	e005      	b.n	80047ac <pb_decode_fixed64+0x34>

#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* fast path - if we know that we're on little endian, assign directly */
    *(uint64_t*)dest = u.fixed64;
 80047a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047a4:	6839      	ldr	r1, [r7, #0]
 80047a6:	e9c1 2300 	strd	r2, r3, [r1]
                       ((uint64_t)u.bytes[4] << 32) |
                       ((uint64_t)u.bytes[5] << 40) |
                       ((uint64_t)u.bytes[6] << 48) |
                       ((uint64_t)u.bytes[7] << 56);
#endif
    return true;
 80047aa:	2301      	movs	r3, #1
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3710      	adds	r7, #16
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <pb_dec_bool>:
#endif

static bool checkreturn pb_dec_bool(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
    return pb_decode_bool(stream, (bool*)field->pData);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	69db      	ldr	r3, [r3, #28]
 80047c2:	4619      	mov	r1, r3
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff ff58 	bl	800467a <pb_decode_bool>
 80047ca:	4603      	mov	r3, r0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <pb_dec_varint>:

static bool checkreturn pb_dec_varint(pb_istream_t *stream, const pb_field_iter_t *field)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b094      	sub	sp, #80	; 0x50
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6278      	str	r0, [r7, #36]	; 0x24
 80047de:	6239      	str	r1, [r7, #32]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	7d9b      	ldrb	r3, [r3, #22]
 80047e4:	f003 030f 	and.w	r3, r3, #15
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d179      	bne.n	80048e0 <pb_dec_varint+0x10c>
    {
        pb_uint64_t value, clamped;
        if (!pb_decode_varint(stream, &value))
 80047ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80047f0:	4619      	mov	r1, r3
 80047f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047f4:	f7fe fecc 	bl	8003590 <pb_decode_varint>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f083 0301 	eor.w	r3, r3, #1
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <pb_dec_varint+0x34>
            return false;
 8004804:	2300      	movs	r3, #0
 8004806:	e107      	b.n	8004a18 <pb_dec_varint+0x244>

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_uint64_t))
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	8a5b      	ldrh	r3, [r3, #18]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d10a      	bne.n	8004826 <pb_dec_varint+0x52>
            clamped = *(pb_uint64_t*)field->pData = value;
 8004810:	6a3b      	ldr	r3, [r7, #32]
 8004812:	69d9      	ldr	r1, [r3, #28]
 8004814:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004818:	e9c1 2300 	strd	r2, r3, [r1]
 800481c:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004820:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8004824:	e046      	b.n	80048b4 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint32_t))
 8004826:	6a3b      	ldr	r3, [r7, #32]
 8004828:	8a5b      	ldrh	r3, [r3, #18]
 800482a:	2b04      	cmp	r3, #4
 800482c:	d10e      	bne.n	800484c <pb_dec_varint+0x78>
            clamped = *(uint32_t*)field->pData = (uint32_t)value;
 800482e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	4602      	mov	r2, r0
 8004838:	601a      	str	r2, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2200      	movs	r2, #0
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	617a      	str	r2, [r7, #20]
 8004842:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004846:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800484a:	e033      	b.n	80048b4 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least16_t))
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	8a5b      	ldrh	r3, [r3, #18]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d10f      	bne.n	8004874 <pb_dec_varint+0xa0>
            clamped = *(uint_least16_t*)field->pData = (uint_least16_t)value;
 8004854:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004858:	6a3b      	ldr	r3, [r7, #32]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	b282      	uxth	r2, r0
 800485e:	801a      	strh	r2, [r3, #0]
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	b29b      	uxth	r3, r3
 8004864:	2200      	movs	r2, #0
 8004866:	60bb      	str	r3, [r7, #8]
 8004868:	60fa      	str	r2, [r7, #12]
 800486a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800486e:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8004872:	e01f      	b.n	80048b4 <pb_dec_varint+0xe0>
        else if (field->data_size == sizeof(uint_least8_t))
 8004874:	6a3b      	ldr	r3, [r7, #32]
 8004876:	8a5b      	ldrh	r3, [r3, #18]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d10f      	bne.n	800489c <pb_dec_varint+0xc8>
            clamped = *(uint_least8_t*)field->pData = (uint_least8_t)value;
 800487c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004880:	6a3b      	ldr	r3, [r7, #32]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	b2c2      	uxtb	r2, r0
 8004886:	701a      	strb	r2, [r3, #0]
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2200      	movs	r2, #0
 800488e:	603b      	str	r3, [r7, #0]
 8004890:	607a      	str	r2, [r7, #4]
 8004892:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004896:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 800489a:	e00b      	b.n	80048b4 <pb_dec_varint+0xe0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800489c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <pb_dec_varint+0xd6>
 80048a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	e000      	b.n	80048ac <pb_dec_varint+0xd8>
 80048aa:	4b5e      	ldr	r3, [pc, #376]	; (8004a24 <pb_dec_varint+0x250>)
 80048ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ae:	60d3      	str	r3, [r2, #12]
 80048b0:	2300      	movs	r3, #0
 80048b2:	e0b1      	b.n	8004a18 <pb_dec_varint+0x244>

        if (clamped != value)
 80048b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048b8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80048bc:	4299      	cmp	r1, r3
 80048be:	bf08      	it	eq
 80048c0:	4290      	cmpeq	r0, r2
 80048c2:	d00b      	beq.n	80048dc <pb_dec_varint+0x108>
            PB_RETURN_ERROR(stream, "integer too large");
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <pb_dec_varint+0xfe>
 80048cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	e000      	b.n	80048d4 <pb_dec_varint+0x100>
 80048d2:	4b55      	ldr	r3, [pc, #340]	; (8004a28 <pb_dec_varint+0x254>)
 80048d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d6:	60d3      	str	r3, [r2, #12]
 80048d8:	2300      	movs	r3, #0
 80048da:	e09d      	b.n	8004a18 <pb_dec_varint+0x244>

        return true;
 80048dc:	2301      	movs	r3, #1
 80048de:	e09b      	b.n	8004a18 <pb_dec_varint+0x244>
    {
        pb_uint64_t value;
        pb_int64_t svalue;
        pb_int64_t clamped;

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	7d9b      	ldrb	r3, [r3, #22]
 80048e4:	f003 030f 	and.w	r3, r3, #15
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d10d      	bne.n	8004908 <pb_dec_varint+0x134>
        {
            if (!pb_decode_svarint(stream, &svalue))
 80048ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80048f0:	4619      	mov	r1, r3
 80048f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80048f4:	f7ff fee1 	bl	80046ba <pb_decode_svarint>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f083 0301 	eor.w	r3, r3, #1
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	d022      	beq.n	800494a <pb_dec_varint+0x176>
                return false;
 8004904:	2300      	movs	r3, #0
 8004906:	e087      	b.n	8004a18 <pb_dec_varint+0x244>
        }
        else
        {
            if (!pb_decode_varint(stream, &value))
 8004908:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800490c:	4619      	mov	r1, r3
 800490e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004910:	f7fe fe3e 	bl	8003590 <pb_decode_varint>
 8004914:	4603      	mov	r3, r0
 8004916:	f083 0301 	eor.w	r3, r3, #1
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d001      	beq.n	8004924 <pb_dec_varint+0x150>
                return false;
 8004920:	2300      	movs	r3, #0
 8004922:	e079      	b.n	8004a18 <pb_dec_varint+0x244>
            * be cast as int32_t, instead of the int64_t that should be used when
            * encoding. Nanopb versions before 0.2.5 had a bug in encoding. In order to
            * not break decoding of such messages, we cast <=32 bit fields to
            * int32_t first to get the sign correct.
            */
            if (field->data_size == sizeof(pb_int64_t))
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	8a5b      	ldrh	r3, [r3, #18]
 8004928:	2b08      	cmp	r3, #8
 800492a:	d104      	bne.n	8004936 <pb_dec_varint+0x162>
                svalue = (pb_int64_t)value;
 800492c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004930:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004934:	e009      	b.n	800494a <pb_dec_varint+0x176>
            else
                svalue = (int32_t)value;
 8004936:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800493a:	4613      	mov	r3, r2
 800493c:	17da      	asrs	r2, r3, #31
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	61fa      	str	r2, [r7, #28]
 8004942:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004946:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        }

        /* Cast to the proper field size, while checking for overflows */
        if (field->data_size == sizeof(pb_int64_t))
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	8a5b      	ldrh	r3, [r3, #18]
 800494e:	2b08      	cmp	r3, #8
 8004950:	d10a      	bne.n	8004968 <pb_dec_varint+0x194>
            clamped = *(pb_int64_t*)field->pData = svalue;
 8004952:	6a3b      	ldr	r3, [r7, #32]
 8004954:	69d9      	ldr	r1, [r3, #28]
 8004956:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800495a:	e9c1 2300 	strd	r2, r3, [r1]
 800495e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004962:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
 8004966:	e042      	b.n	80049ee <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int32_t))
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	8a5b      	ldrh	r3, [r3, #18]
 800496c:	2b04      	cmp	r3, #4
 800496e:	d10c      	bne.n	800498a <pb_dec_varint+0x1b6>
            clamped = *(int32_t*)field->pData = (int32_t)svalue;
 8004970:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	4602      	mov	r2, r0
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	17da      	asrs	r2, r3, #31
 8004980:	469a      	mov	sl, r3
 8004982:	4693      	mov	fp, r2
 8004984:	e9c7 ab10 	strd	sl, fp, [r7, #64]	; 0x40
 8004988:	e031      	b.n	80049ee <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least16_t))
 800498a:	6a3b      	ldr	r3, [r7, #32]
 800498c:	8a5b      	ldrh	r3, [r3, #18]
 800498e:	2b02      	cmp	r3, #2
 8004990:	d10e      	bne.n	80049b0 <pb_dec_varint+0x1dc>
            clamped = *(int_least16_t*)field->pData = (int_least16_t)svalue;
 8004992:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	b202      	sxth	r2, r0
 800499c:	801a      	strh	r2, [r3, #0]
 800499e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80049a2:	b21b      	sxth	r3, r3
 80049a4:	17da      	asrs	r2, r3, #31
 80049a6:	4698      	mov	r8, r3
 80049a8:	4691      	mov	r9, r2
 80049aa:	e9c7 8910 	strd	r8, r9, [r7, #64]	; 0x40
 80049ae:	e01e      	b.n	80049ee <pb_dec_varint+0x21a>
        else if (field->data_size == sizeof(int_least8_t))
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	8a5b      	ldrh	r3, [r3, #18]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d10e      	bne.n	80049d6 <pb_dec_varint+0x202>
            clamped = *(int_least8_t*)field->pData = (int_least8_t)svalue;
 80049b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80049bc:	6a3b      	ldr	r3, [r7, #32]
 80049be:	69db      	ldr	r3, [r3, #28]
 80049c0:	b242      	sxtb	r2, r0
 80049c2:	701a      	strb	r2, [r3, #0]
 80049c4:	f993 3000 	ldrsb.w	r3, [r3]
 80049c8:	b25b      	sxtb	r3, r3
 80049ca:	17da      	asrs	r2, r3, #31
 80049cc:	461c      	mov	r4, r3
 80049ce:	4615      	mov	r5, r2
 80049d0:	e9c7 4510 	strd	r4, r5, [r7, #64]	; 0x40
 80049d4:	e00b      	b.n	80049ee <pb_dec_varint+0x21a>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d002      	beq.n	80049e4 <pb_dec_varint+0x210>
 80049de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	e000      	b.n	80049e6 <pb_dec_varint+0x212>
 80049e4:	4b0f      	ldr	r3, [pc, #60]	; (8004a24 <pb_dec_varint+0x250>)
 80049e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e8:	60d3      	str	r3, [r2, #12]
 80049ea:	2300      	movs	r3, #0
 80049ec:	e014      	b.n	8004a18 <pb_dec_varint+0x244>

        if (clamped != svalue)
 80049ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049f2:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80049f6:	4299      	cmp	r1, r3
 80049f8:	bf08      	it	eq
 80049fa:	4290      	cmpeq	r0, r2
 80049fc:	d00b      	beq.n	8004a16 <pb_dec_varint+0x242>
            PB_RETURN_ERROR(stream, "integer too large");
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <pb_dec_varint+0x238>
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	e000      	b.n	8004a0e <pb_dec_varint+0x23a>
 8004a0c:	4b06      	ldr	r3, [pc, #24]	; (8004a28 <pb_dec_varint+0x254>)
 8004a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a10:	60d3      	str	r3, [r2, #12]
 8004a12:	2300      	movs	r3, #0
 8004a14:	e000      	b.n	8004a18 <pb_dec_varint+0x244>

        return true;
 8004a16:	2301      	movs	r3, #1
    }
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3750      	adds	r7, #80	; 0x50
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a22:	bf00      	nop
 8004a24:	0800b2b8 	.word	0x0800b2b8
 8004a28:	0800b2cc 	.word	0x0800b2cc

08004a2c <pb_dec_bytes>:

static bool checkreturn pb_dec_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
 8004a34:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_bytes_array_t *dest;
    
    if (!pb_decode_varint32(stream, &size))
 8004a36:	f107 030c 	add.w	r3, r7, #12
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7fe fd97 	bl	8003570 <pb_decode_varint32>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f083 0301 	eor.w	r3, r3, #1
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <pb_dec_bytes+0x26>
        return false;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e055      	b.n	8004afe <pb_dec_bytes+0xd2>
    
    if (size > PB_SIZE_MAX)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a58:	d30b      	bcc.n	8004a72 <pb_dec_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68db      	ldr	r3, [r3, #12]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d002      	beq.n	8004a68 <pb_dec_bytes+0x3c>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	e000      	b.n	8004a6a <pb_dec_bytes+0x3e>
 8004a68:	4b27      	ldr	r3, [pc, #156]	; (8004b08 <pb_dec_bytes+0xdc>)
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	60d3      	str	r3, [r2, #12]
 8004a6e:	2300      	movs	r3, #0
 8004a70:	e045      	b.n	8004afe <pb_dec_bytes+0xd2>
    
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3302      	adds	r3, #2
 8004a76:	617b      	str	r3, [r7, #20]
    if (size > alloc_size)
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	697a      	ldr	r2, [r7, #20]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d20b      	bcs.n	8004a98 <pb_dec_bytes+0x6c>
        PB_RETURN_ERROR(stream, "size too large");
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d002      	beq.n	8004a8e <pb_dec_bytes+0x62>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	e000      	b.n	8004a90 <pb_dec_bytes+0x64>
 8004a8e:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <pb_dec_bytes+0xe0>)
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	60d3      	str	r3, [r2, #12]
 8004a94:	2300      	movs	r3, #0
 8004a96:	e032      	b.n	8004afe <pb_dec_bytes+0xd2>
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	7d9b      	ldrb	r3, [r3, #22]
 8004a9c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004aa0:	2b80      	cmp	r3, #128	; 0x80
 8004aa2:	d10b      	bne.n	8004abc <pb_dec_bytes+0x90>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d002      	beq.n	8004ab2 <pb_dec_bytes+0x86>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	e000      	b.n	8004ab4 <pb_dec_bytes+0x88>
 8004ab2:	4b17      	ldr	r3, [pc, #92]	; (8004b10 <pb_dec_bytes+0xe4>)
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	60d3      	str	r3, [r2, #12]
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e020      	b.n	8004afe <pb_dec_bytes+0xd2>
        dest = *(pb_bytes_array_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	8a5b      	ldrh	r3, [r3, #18]
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d90b      	bls.n	8004ae0 <pb_dec_bytes+0xb4>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d002      	beq.n	8004ad6 <pb_dec_bytes+0xaa>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	e000      	b.n	8004ad8 <pb_dec_bytes+0xac>
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <pb_dec_bytes+0xdc>)
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	60d3      	str	r3, [r2, #12]
 8004adc:	2300      	movs	r3, #0
 8004ade:	e00e      	b.n	8004afe <pb_dec_bytes+0xd2>
        dest = (pb_bytes_array_t*)field->pData;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	613b      	str	r3, [r7, #16]
    }

    dest->size = (pb_size_t)size;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	b29a      	uxth	r2, r3
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	801a      	strh	r2, [r3, #0]
    return pb_read(stream, dest->bytes, (size_t)size);
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	3302      	adds	r3, #2
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4619      	mov	r1, r3
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fe fbc0 	bl	800327c <pb_read>
 8004afc:	4603      	mov	r3, r0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3718      	adds	r7, #24
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	0800b2e0 	.word	0x0800b2e0
 8004b0c:	0800b2f0 	.word	0x0800b2f0
 8004b10:	0800b238 	.word	0x0800b238

08004b14 <pb_dec_string>:

static bool checkreturn pb_dec_string(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
    uint32_t size;
    size_t alloc_size;
    pb_byte_t *dest = (pb_byte_t*)field->pData;
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	617b      	str	r3, [r7, #20]

    if (!pb_decode_varint32(stream, &size))
 8004b24:	f107 030c 	add.w	r3, r7, #12
 8004b28:	4619      	mov	r1, r3
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7fe fd20 	bl	8003570 <pb_decode_varint32>
 8004b30:	4603      	mov	r3, r0
 8004b32:	f083 0301 	eor.w	r3, r3, #1
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <pb_dec_string+0x2c>
        return false;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	e05a      	b.n	8004bf6 <pb_dec_string+0xe2>

    if (size == (uint32_t)-1)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b46:	d10b      	bne.n	8004b60 <pb_dec_string+0x4c>
        PB_RETURN_ERROR(stream, "size too large");
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d002      	beq.n	8004b56 <pb_dec_string+0x42>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	e000      	b.n	8004b58 <pb_dec_string+0x44>
 8004b56:	4b2a      	ldr	r3, [pc, #168]	; (8004c00 <pb_dec_string+0xec>)
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	60d3      	str	r3, [r2, #12]
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e04a      	b.n	8004bf6 <pb_dec_string+0xe2>

    /* Space for null terminator */
    alloc_size = (size_t)(size + 1);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3301      	adds	r3, #1
 8004b64:	613b      	str	r3, [r7, #16]

    if (alloc_size < size)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d20b      	bcs.n	8004b86 <pb_dec_string+0x72>
        PB_RETURN_ERROR(stream, "size too large");
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d002      	beq.n	8004b7c <pb_dec_string+0x68>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	e000      	b.n	8004b7e <pb_dec_string+0x6a>
 8004b7c:	4b20      	ldr	r3, [pc, #128]	; (8004c00 <pb_dec_string+0xec>)
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	60d3      	str	r3, [r2, #12]
 8004b82:	2300      	movs	r3, #0
 8004b84:	e037      	b.n	8004bf6 <pb_dec_string+0xe2>

    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	7d9b      	ldrb	r3, [r3, #22]
 8004b8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004b8e:	2b80      	cmp	r3, #128	; 0x80
 8004b90:	d10b      	bne.n	8004baa <pb_dec_string+0x96>
    {
#ifndef PB_ENABLE_MALLOC
        PB_RETURN_ERROR(stream, "no malloc support");
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <pb_dec_string+0x8c>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	e000      	b.n	8004ba2 <pb_dec_string+0x8e>
 8004ba0:	4b18      	ldr	r3, [pc, #96]	; (8004c04 <pb_dec_string+0xf0>)
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	60d3      	str	r3, [r2, #12]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	e025      	b.n	8004bf6 <pb_dec_string+0xe2>
        dest = *(pb_byte_t**)field->pData;
#endif
    }
    else
    {
        if (alloc_size > field->data_size)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	8a5b      	ldrh	r3, [r3, #18]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d90b      	bls.n	8004bce <pb_dec_string+0xba>
            PB_RETURN_ERROR(stream, "string overflow");
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d002      	beq.n	8004bc4 <pb_dec_string+0xb0>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	e000      	b.n	8004bc6 <pb_dec_string+0xb2>
 8004bc4:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <pb_dec_string+0xf4>)
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	60d3      	str	r3, [r2, #12]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e013      	b.n	8004bf6 <pb_dec_string+0xe2>
    }
    
    dest[size] = 0;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	697a      	ldr	r2, [r7, #20]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]

    if (!pb_read(stream, dest, (size_t)size))
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	6979      	ldr	r1, [r7, #20]
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f7fe fb4c 	bl	800327c <pb_read>
 8004be4:	4603      	mov	r3, r0
 8004be6:	f083 0301 	eor.w	r3, r3, #1
 8004bea:	b2db      	uxtb	r3, r3
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <pb_dec_string+0xe0>
        return false;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	e000      	b.n	8004bf6 <pb_dec_string+0xe2>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8((const char*)dest))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return true;
 8004bf4:	2301      	movs	r3, #1
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	0800b2f0 	.word	0x0800b2f0
 8004c04:	0800b238 	.word	0x0800b238
 8004c08:	0800b300 	.word	0x0800b300

08004c0c <pb_dec_submessage>:

static bool checkreturn pb_dec_submessage(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08a      	sub	sp, #40	; 0x28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
    bool status = true;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    bool submsg_consumed = false;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    pb_istream_t substream;

    if (!pb_make_string_substream(stream, &substream))
 8004c22:	f107 030c 	add.w	r3, r7, #12
 8004c26:	4619      	mov	r1, r3
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	f7fe fe2d 	bl	8003888 <pb_make_string_substream>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	f083 0301 	eor.w	r3, r3, #1
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <pb_dec_submessage+0x32>
        return false;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	e069      	b.n	8004d12 <pb_dec_submessage+0x106>
    
    if (field->submsg_desc == NULL)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10b      	bne.n	8004c5e <pb_dec_submessage+0x52>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d002      	beq.n	8004c54 <pb_dec_submessage+0x48>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	e000      	b.n	8004c56 <pb_dec_submessage+0x4a>
 8004c54:	4b31      	ldr	r3, [pc, #196]	; (8004d1c <pb_dec_submessage+0x110>)
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	60d3      	str	r3, [r2, #12]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e059      	b.n	8004d12 <pb_dec_submessage+0x106>
    
    /* Submessages can have a separate message-level callback that is called
     * before decoding the message. Typically it is used to set callback fields
     * inside oneofs. */
    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	7d9b      	ldrb	r3, [r3, #22]
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	2b09      	cmp	r3, #9
 8004c68:	d11c      	bne.n	8004ca4 <pb_dec_submessage+0x98>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6a1b      	ldr	r3, [r3, #32]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d018      	beq.n	8004ca4 <pb_dec_submessage+0x98>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	3b08      	subs	r3, #8
 8004c78:	61fb      	str	r3, [r7, #28]
        if (callback->funcs.decode)
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d010      	beq.n	8004ca4 <pb_dec_submessage+0x98>
        {
            status = callback->funcs.decode(&substream, field, &callback->arg);
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	3204      	adds	r2, #4
 8004c8a:	f107 000c 	add.w	r0, r7, #12
 8004c8e:	6839      	ldr	r1, [r7, #0]
 8004c90:	4798      	blx	r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

            if (substream.bytes_left == 0)
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d102      	bne.n	8004ca4 <pb_dec_submessage+0x98>
            {
                submsg_consumed = true;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            }
        }
    }

    /* Now decode the submessage contents */
    if (status && !submsg_consumed)
 8004ca4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d022      	beq.n	8004cf2 <pb_dec_submessage+0xe6>
 8004cac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004cb0:	f083 0301 	eor.w	r3, r3, #1
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d01b      	beq.n	8004cf2 <pb_dec_submessage+0xe6>
    {
        unsigned int flags = 0;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	623b      	str	r3, [r7, #32]

        /* Static required/optional fields are already initialized by top-level
         * pb_decode(), no need to initialize them again. */
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	7d9b      	ldrb	r3, [r3, #22]
 8004cc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d107      	bne.n	8004cda <pb_dec_submessage+0xce>
            PB_HTYPE(field->type) != PB_HTYPE_REPEATED)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	7d9b      	ldrb	r3, [r3, #22]
 8004cce:	f003 0330 	and.w	r3, r3, #48	; 0x30
        if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8004cd2:	2b20      	cmp	r3, #32
 8004cd4:	d001      	beq.n	8004cda <pb_dec_submessage+0xce>
        {
            flags = PB_DECODE_NOINIT;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	623b      	str	r3, [r7, #32]
        }

        status = pb_decode_inner(&substream, field->submsg_desc, field->pData, flags);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	69da      	ldr	r2, [r3, #28]
 8004ce2:	f107 000c 	add.w	r0, r7, #12
 8004ce6:	6a3b      	ldr	r3, [r7, #32]
 8004ce8:	f7ff fafa 	bl	80042e0 <pb_decode_inner>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    
    if (!pb_close_string_substream(stream, &substream))
 8004cf2:	f107 030c 	add.w	r3, r7, #12
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7fe fdff 	bl	80038fc <pb_close_string_substream>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f083 0301 	eor.w	r3, r3, #1
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <pb_dec_submessage+0x102>
        return false;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e001      	b.n	8004d12 <pb_dec_submessage+0x106>

    return status;
 8004d0e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3728      	adds	r7, #40	; 0x28
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	0800b310 	.word	0x0800b310

08004d20 <pb_dec_fixed_length_bytes>:

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_iter_t *field)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8004d2a:	f107 030c 	add.w	r3, r7, #12
 8004d2e:	4619      	mov	r1, r3
 8004d30:	6878      	ldr	r0, [r7, #4]
 8004d32:	f7fe fc1d 	bl	8003570 <pb_decode_varint32>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f083 0301 	eor.w	r3, r3, #1
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <pb_dec_fixed_length_bytes+0x26>
        return false;
 8004d42:	2300      	movs	r3, #0
 8004d44:	e037      	b.n	8004db6 <pb_dec_fixed_length_bytes+0x96>

    if (size > PB_SIZE_MAX)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d4c:	d30b      	bcc.n	8004d66 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d002      	beq.n	8004d5c <pb_dec_fixed_length_bytes+0x3c>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	e000      	b.n	8004d5e <pb_dec_fixed_length_bytes+0x3e>
 8004d5c:	4b18      	ldr	r3, [pc, #96]	; (8004dc0 <pb_dec_fixed_length_bytes+0xa0>)
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	60d3      	str	r3, [r2, #12]
 8004d62:	2300      	movs	r3, #0
 8004d64:	e027      	b.n	8004db6 <pb_dec_fixed_length_bytes+0x96>

    if (size == 0)
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d109      	bne.n	8004d80 <pb_dec_fixed_length_bytes+0x60>
    {
        /* As a special case, treat empty bytes string as all zeros for fixed_length_bytes. */
        memset(field->pData, 0, (size_t)field->data_size);
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	69d8      	ldr	r0, [r3, #28]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	8a5b      	ldrh	r3, [r3, #18]
 8004d74:	461a      	mov	r2, r3
 8004d76:	2100      	movs	r1, #0
 8004d78:	f005 fc88 	bl	800a68c <memset>
        return true;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e01a      	b.n	8004db6 <pb_dec_fixed_length_bytes+0x96>
    }

    if (size != field->data_size)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	8a5b      	ldrh	r3, [r3, #18]
 8004d84:	461a      	mov	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d00b      	beq.n	8004da4 <pb_dec_fixed_length_bytes+0x84>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d002      	beq.n	8004d9a <pb_dec_fixed_length_bytes+0x7a>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	e000      	b.n	8004d9c <pb_dec_fixed_length_bytes+0x7c>
 8004d9a:	4b0a      	ldr	r3, [pc, #40]	; (8004dc4 <pb_dec_fixed_length_bytes+0xa4>)
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	60d3      	str	r3, [r2, #12]
 8004da0:	2300      	movs	r3, #0
 8004da2:	e008      	b.n	8004db6 <pb_dec_fixed_length_bytes+0x96>

    return pb_read(stream, (pb_byte_t*)field->pData, (size_t)field->data_size);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	69d9      	ldr	r1, [r3, #28]
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	8a5b      	ldrh	r3, [r3, #18]
 8004dac:	461a      	mov	r2, r3
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7fe fa64 	bl	800327c <pb_read>
 8004db4:	4603      	mov	r3, r0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	0800b2e0 	.word	0x0800b2e0
 8004dc4:	0800b32c 	.word	0x0800b32c

08004dc8 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 8004dda:	697a      	ldr	r2, [r7, #20]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	441a      	add	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	68b9      	ldr	r1, [r7, #8]
 8004de8:	6978      	ldr	r0, [r7, #20]
 8004dea:	f005 fd1e 	bl	800a82a <memcpy>
    
    return true;
 8004dee:	2301      	movs	r3, #1
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 8004df8:	b4b0      	push	{r4, r5, r7}
 8004dfa:	b08b      	sub	sp, #44	; 0x2c
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 8004e04:	4b0b      	ldr	r3, [pc, #44]	; (8004e34 <pb_ostream_from_buffer+0x3c>)
 8004e06:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 8004e10:	2300      	movs	r3, #0
 8004e12:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 8004e14:	2300      	movs	r3, #0
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	461d      	mov	r5, r3
 8004e1c:	f107 0414 	add.w	r4, r7, #20
 8004e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	602b      	str	r3, [r5, #0]
}
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	372c      	adds	r7, #44	; 0x2c
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bcb0      	pop	{r4, r5, r7}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	08004dc9 	.word	0x08004dc9

08004e38 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d037      	beq.n	8004eba <pb_write+0x82>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d033      	beq.n	8004eba <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	441a      	add	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d307      	bcc.n	8004e72 <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	441a      	add	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	689b      	ldr	r3, [r3, #8]
        if (stream->bytes_written + count < stream->bytes_written ||
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d90b      	bls.n	8004e8a <pb_write+0x52>
        {
            PB_RETURN_ERROR(stream, "stream full");
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <pb_write+0x48>
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	e000      	b.n	8004e82 <pb_write+0x4a>
 8004e80:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <pb_write+0x98>)
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	6113      	str	r3, [r2, #16]
 8004e86:	2300      	movs	r3, #0
 8004e88:	e01e      	b.n	8004ec8 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	4798      	blx	r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	f083 0301 	eor.w	r3, r3, #1
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00b      	beq.n	8004eba <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d002      	beq.n	8004eb0 <pb_write+0x78>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	e000      	b.n	8004eb2 <pb_write+0x7a>
 8004eb0:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <pb_write+0x9c>)
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	6113      	str	r3, [r2, #16]
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	e006      	b.n	8004ec8 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	441a      	add	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	60da      	str	r2, [r3, #12]
    return true;
 8004ec6:	2301      	movs	r3, #1
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	0800b350 	.word	0x0800b350
 8004ed4:	0800b35c 	.word	0x0800b35c

08004ed8 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	b085      	sub	sp, #20
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	e00a      	b.n	8004f00 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d001      	beq.n	8004efa <safe_read_bool+0x22>
            return true;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e006      	b.n	8004f08 <safe_read_bool+0x30>
    for (i = 0; i < sizeof(bool); i++)
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3301      	adds	r3, #1
 8004efe:	60fb      	str	r3, [r7, #12]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0f1      	beq.n	8004eea <safe_read_bool+0x12>
    }
    return false;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8004f14:	b5b0      	push	{r4, r5, r7, lr}
 8004f16:	b08c      	sub	sp, #48	; 0x30
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6a1b      	ldr	r3, [r3, #32]
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (count == 0)
 8004f26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d101      	bne.n	8004f30 <encode_array+0x1c>
        return true;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e13d      	b.n	80051ac <encode_array+0x298>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	7d9b      	ldrb	r3, [r3, #22]
 8004f34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f38:	2b80      	cmp	r3, #128	; 0x80
 8004f3a:	d010      	beq.n	8004f5e <encode_array+0x4a>
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	8a9b      	ldrh	r3, [r3, #20]
 8004f40:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d90b      	bls.n	8004f5e <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <encode_array+0x40>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	e000      	b.n	8004f56 <encode_array+0x42>
 8004f54:	4b97      	ldr	r3, [pc, #604]	; (80051b4 <encode_array+0x2a0>)
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	6113      	str	r3, [r2, #16]
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	e126      	b.n	80051ac <encode_array+0x298>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	7d9b      	ldrb	r3, [r3, #22]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	2b05      	cmp	r3, #5
 8004f68:	f200 80b3 	bhi.w	80050d2 <encode_array+0x1be>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	8a1b      	ldrh	r3, [r3, #16]
 8004f70:	461a      	mov	r2, r3
 8004f72:	2102      	movs	r1, #2
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fcdd 	bl	8005934 <pb_encode_tag>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	f083 0301 	eor.w	r3, r3, #1
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <encode_array+0x76>
            return false;
 8004f86:	2300      	movs	r3, #0
 8004f88:	e110      	b.n	80051ac <encode_array+0x298>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	7d9b      	ldrb	r3, [r3, #22]
 8004f8e:	f003 030f 	and.w	r3, r3, #15
 8004f92:	2b04      	cmp	r3, #4
 8004f94:	d103      	bne.n	8004f9e <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 8004f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f9c:	e047      	b.n	800502e <encode_array+0x11a>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	7d9b      	ldrb	r3, [r3, #22]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	2b05      	cmp	r3, #5
 8004fa8:	d103      	bne.n	8004fb2 <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 8004faa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	62bb      	str	r3, [r7, #40]	; 0x28
 8004fb0:	e03d      	b.n	800502e <encode_array+0x11a>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8004fb2:	f107 0308 	add.w	r3, r7, #8
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	601a      	str	r2, [r3, #0]
 8004fba:	605a      	str	r2, [r3, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
 8004fbe:	60da      	str	r2, [r3, #12]
 8004fc0:	611a      	str	r2, [r3, #16]
            void *pData_orig = field->pData;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	61fb      	str	r3, [r7, #28]
            for (i = 0; i < count; i++)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004fcc:	e026      	b.n	800501c <encode_array+0x108>
            {
                if (!pb_enc_varint(&sizestream, field))
 8004fce:	f107 0308 	add.w	r3, r7, #8
 8004fd2:	6839      	ldr	r1, [r7, #0]
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 fdef 	bl	8005bb8 <pb_enc_varint>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	f083 0301 	eor.w	r3, r3, #1
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d010      	beq.n	8005008 <encode_array+0xf4>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <encode_array+0xe0>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	e005      	b.n	8005000 <encode_array+0xec>
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <encode_array+0xea>
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	e000      	b.n	8005000 <encode_array+0xec>
 8004ffe:	4b6e      	ldr	r3, [pc, #440]	; (80051b8 <encode_array+0x2a4>)
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6113      	str	r3, [r2, #16]
 8005004:	2300      	movs	r3, #0
 8005006:	e0d1      	b.n	80051ac <encode_array+0x298>
                field->pData = (char*)field->pData + field->data_size;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	69db      	ldr	r3, [r3, #28]
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	8a52      	ldrh	r2, [r2, #18]
 8005010:	441a      	add	r2, r3
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	61da      	str	r2, [r3, #28]
            for (i = 0; i < count; i++)
 8005016:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005018:	3301      	adds	r3, #1
 800501a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800501c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800501e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005020:	429a      	cmp	r2, r3
 8005022:	d3d4      	bcc.n	8004fce <encode_array+0xba>
            }
            field->pData = pData_orig;
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	69fa      	ldr	r2, [r7, #28]
 8005028:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800502e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005030:	2200      	movs	r2, #0
 8005032:	461c      	mov	r4, r3
 8005034:	4615      	mov	r5, r2
 8005036:	4622      	mov	r2, r4
 8005038:	462b      	mov	r3, r5
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 fbf7 	bl	800582e <pb_encode_varint>
 8005040:	4603      	mov	r3, r0
 8005042:	f083 0301 	eor.w	r3, r3, #1
 8005046:	b2db      	uxtb	r3, r3
 8005048:	2b00      	cmp	r3, #0
 800504a:	d001      	beq.n	8005050 <encode_array+0x13c>
            return false;
 800504c:	2300      	movs	r3, #0
 800504e:	e0ad      	b.n	80051ac <encode_array+0x298>
        
        if (stream->callback == NULL)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d106      	bne.n	8005066 <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 8005058:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800505a:	2100      	movs	r1, #0
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f7ff feeb 	bl	8004e38 <pb_write>
 8005062:	4603      	mov	r3, r0
 8005064:	e0a2      	b.n	80051ac <encode_array+0x298>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 8005066:	2300      	movs	r3, #0
 8005068:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800506a:	e02d      	b.n	80050c8 <encode_array+0x1b4>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	7d9b      	ldrb	r3, [r3, #22]
 8005070:	f003 030f 	and.w	r3, r3, #15
 8005074:	2b04      	cmp	r3, #4
 8005076:	d005      	beq.n	8005084 <encode_array+0x170>
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	7d9b      	ldrb	r3, [r3, #22]
 800507c:	f003 030f 	and.w	r3, r3, #15
 8005080:	2b05      	cmp	r3, #5
 8005082:	d10b      	bne.n	800509c <encode_array+0x188>
            {
                if (!pb_enc_fixed(stream, field))
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fe58 	bl	8005d3c <pb_enc_fixed>
 800508c:	4603      	mov	r3, r0
 800508e:	f083 0301 	eor.w	r3, r3, #1
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00d      	beq.n	80050b4 <encode_array+0x1a0>
                    return false;
 8005098:	2300      	movs	r3, #0
 800509a:	e087      	b.n	80051ac <encode_array+0x298>
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 800509c:	6839      	ldr	r1, [r7, #0]
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fd8a 	bl	8005bb8 <pb_enc_varint>
 80050a4:	4603      	mov	r3, r0
 80050a6:	f083 0301 	eor.w	r3, r3, #1
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d001      	beq.n	80050b4 <encode_array+0x1a0>
                    return false;
 80050b0:	2300      	movs	r3, #0
 80050b2:	e07b      	b.n	80051ac <encode_array+0x298>
            }

            field->pData = (char*)field->pData + field->data_size;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	69db      	ldr	r3, [r3, #28]
 80050b8:	683a      	ldr	r2, [r7, #0]
 80050ba:	8a52      	ldrh	r2, [r2, #18]
 80050bc:	441a      	add	r2, r3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 80050c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80050c4:	3301      	adds	r3, #1
 80050c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80050c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80050ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d3cd      	bcc.n	800506c <encode_array+0x158>
 80050d0:	e06b      	b.n	80051aa <encode_array+0x296>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 80050d2:	2300      	movs	r3, #0
 80050d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80050d6:	e064      	b.n	80051a2 <encode_array+0x28e>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	7d9b      	ldrb	r3, [r3, #22]
 80050dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80050e0:	2b80      	cmp	r3, #128	; 0x80
 80050e2:	d147      	bne.n	8005174 <encode_array+0x260>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	7d9b      	ldrb	r3, [r3, #22]
 80050e8:	f003 030f 	and.w	r3, r3, #15
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 80050ec:	2b07      	cmp	r3, #7
 80050ee:	d005      	beq.n	80050fc <encode_array+0x1e8>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	7d9b      	ldrb	r3, [r3, #22]
 80050f4:	f003 030f 	and.w	r3, r3, #15
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 80050f8:	2b06      	cmp	r3, #6
 80050fa:	d13b      	bne.n	8005174 <encode_array+0x260>
            {
                bool status;
                void *pData_orig = field->pData;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	69db      	ldr	r3, [r3, #28]
 8005100:	623b      	str	r3, [r7, #32]
                field->pData = *(void* const*)field->pData;
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	69db      	ldr	r3, [r3, #28]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d11c      	bne.n	800514e <encode_array+0x23a>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f000 fc36 	bl	8005988 <pb_encode_tag_for_field>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <encode_array+0x226>
                             pb_encode_varint(stream, 0);
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 fb7f 	bl	800582e <pb_encode_varint>
 8005130:	4603      	mov	r3, r0
                    status = pb_encode_tag_for_field(stream, field) &&
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <encode_array+0x226>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <encode_array+0x228>
 800513a:	2300      	movs	r3, #0
 800513c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005140:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800514c:	e006      	b.n	800515c <encode_array+0x248>
                }
                else
                {
                    status = encode_basic_field(stream, field);
 800514e:	6839      	ldr	r1, [r7, #0]
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f000 f951 	bl	80053f8 <encode_basic_field>
 8005156:	4603      	mov	r3, r0
 8005158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                field->pData = pData_orig;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	6a3a      	ldr	r2, [r7, #32]
 8005160:	61da      	str	r2, [r3, #28]

                if (!status)
 8005162:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005166:	f083 0301 	eor.w	r3, r3, #1
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00d      	beq.n	800518c <encode_array+0x278>
                    return false;
 8005170:	2300      	movs	r3, #0
 8005172:	e01b      	b.n	80051ac <encode_array+0x298>
            }
            else
            {
                if (!encode_basic_field(stream, field))
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f93e 	bl	80053f8 <encode_basic_field>
 800517c:	4603      	mov	r3, r0
 800517e:	f083 0301 	eor.w	r3, r3, #1
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d002      	beq.n	800518e <encode_array+0x27a>
                    return false;
 8005188:	2300      	movs	r3, #0
 800518a:	e00f      	b.n	80051ac <encode_array+0x298>
            {
 800518c:	bf00      	nop
            }
            field->pData = (char*)field->pData + field->data_size;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	69db      	ldr	r3, [r3, #28]
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	8a52      	ldrh	r2, [r2, #18]
 8005196:	441a      	add	r2, r3
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	61da      	str	r2, [r3, #28]
        for (i = 0; i < count; i++)
 800519c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800519e:	3301      	adds	r3, #1
 80051a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80051a2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80051a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d396      	bcc.n	80050d8 <encode_array+0x1c4>
        }
    }
    
    return true;
 80051aa:	2301      	movs	r3, #1
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3730      	adds	r7, #48	; 0x30
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bdb0      	pop	{r4, r5, r7, pc}
 80051b4:	0800b368 	.word	0x0800b368
 80051b8:	0800b380 	.word	0x0800b380

080051bc <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b092      	sub	sp, #72	; 0x48
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	7d9b      	ldrb	r3, [r3, #22]
 80051c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 80051cc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80051d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	f040 80c9 	bne.w	800536c <pb_check_proto3_default_value+0x1b0>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 80051da:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80051de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d101      	bne.n	80051ea <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e100      	b.n	80053ec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 80051ea:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80051ee:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051f2:	2b20      	cmp	r3, #32
 80051f4:	d108      	bne.n	8005208 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	bf0c      	ite	eq
 8005200:	2301      	moveq	r3, #1
 8005202:	2300      	movne	r3, #0
 8005204:	b2db      	uxtb	r3, r3
 8005206:	e0f1      	b.n	80053ec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 8005208:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800520c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005210:	2b30      	cmp	r3, #48	; 0x30
 8005212:	d108      	bne.n	8005226 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a1b      	ldr	r3, [r3, #32]
 8005218:	881b      	ldrh	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	bf0c      	ite	eq
 800521e:	2301      	moveq	r3, #1
 8005220:	2300      	movne	r3, #0
 8005222:	b2db      	uxtb	r3, r3
 8005224:	e0e2      	b.n	80053ec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 8005226:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800522a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800522e:	2b10      	cmp	r3, #16
 8005230:	d115      	bne.n	800525e <pb_check_proto3_default_value+0xa2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d011      	beq.n	800525e <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	4618      	mov	r0, r3
 8005240:	f7ff fe4a 	bl	8004ed8 <safe_read_bool>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	bf14      	ite	ne
 800524a:	2301      	movne	r3, #1
 800524c:	2300      	moveq	r3, #0
 800524e:	b2db      	uxtb	r3, r3
 8005250:	f083 0301 	eor.w	r3, r3, #1
 8005254:	b2db      	uxtb	r3, r3
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	b2db      	uxtb	r3, r3
 800525c:	e0c6      	b.n	80053ec <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->default_value)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 8005268:	2300      	movs	r3, #0
 800526a:	e0bf      	b.n	80053ec <pb_check_proto3_default_value+0x230>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800526c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	2b05      	cmp	r3, #5
 8005276:	d81c      	bhi.n	80052b2 <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	69db      	ldr	r3, [r3, #28]
 800527c:	637b      	str	r3, [r7, #52]	; 0x34
            for (i = 0; i < field->data_size; i++)
 800527e:	2300      	movs	r3, #0
 8005280:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8005284:	e00d      	b.n	80052a2 <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 8005286:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800528a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800528c:	4413      	add	r3, r2
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 8005294:	2300      	movs	r3, #0
 8005296:	e0a9      	b.n	80053ec <pb_check_proto3_default_value+0x230>
            for (i = 0; i < field->data_size; i++)
 8005298:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800529c:	3301      	adds	r3, #1
 800529e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	8a5b      	ldrh	r3, [r3, #18]
 80052a6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d3eb      	bcc.n	8005286 <pb_check_proto3_default_value+0xca>
                }
            }

            return true;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e09c      	b.n	80053ec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 80052b2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	2b06      	cmp	r3, #6
 80052bc:	d10a      	bne.n	80052d4 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	63bb      	str	r3, [r7, #56]	; 0x38
            return bytes->size == 0;
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	881b      	ldrh	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf0c      	ite	eq
 80052cc:	2301      	moveq	r3, #1
 80052ce:	2300      	movne	r3, #0
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	e08b      	b.n	80053ec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 80052d4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80052d8:	f003 030f 	and.w	r3, r3, #15
 80052dc:	2b07      	cmp	r3, #7
 80052de:	d108      	bne.n	80052f2 <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	69db      	ldr	r3, [r3, #28]
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bf0c      	ite	eq
 80052ea:	2301      	moveq	r3, #1
 80052ec:	2300      	movne	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	e07c      	b.n	80053ec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 80052f2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	2b0b      	cmp	r3, #11
 80052fc:	d107      	bne.n	800530e <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	8a5b      	ldrh	r3, [r3, #18]
 8005302:	2b00      	cmp	r3, #0
 8005304:	bf0c      	ite	eq
 8005306:	2301      	moveq	r3, #1
 8005308:	2300      	movne	r3, #0
 800530a:	b2db      	uxtb	r3, r3
 800530c:	e06e      	b.n	80053ec <pb_check_proto3_default_value+0x230>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 800530e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	2b08      	cmp	r3, #8
 8005318:	d005      	beq.n	8005326 <pb_check_proto3_default_value+0x16a>
 800531a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	2b09      	cmp	r3, #9
 8005324:	d161      	bne.n	80053ea <pb_check_proto3_default_value+0x22e>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69da      	ldr	r2, [r3, #28]
 800532e:	f107 030c 	add.w	r3, r7, #12
 8005332:	4618      	mov	r0, r3
 8005334:	f7fd fe37 	bl	8002fa6 <pb_field_iter_begin>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d014      	beq.n	8005368 <pb_check_proto3_default_value+0x1ac>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 800533e:	f107 030c 	add.w	r3, r7, #12
 8005342:	4618      	mov	r0, r3
 8005344:	f7ff ff3a 	bl	80051bc <pb_check_proto3_default_value>
 8005348:	4603      	mov	r3, r0
 800534a:	f083 0301 	eor.w	r3, r3, #1
 800534e:	b2db      	uxtb	r3, r3
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <pb_check_proto3_default_value+0x19c>
                    {
                        return false;
 8005354:	2300      	movs	r3, #0
 8005356:	e049      	b.n	80053ec <pb_check_proto3_default_value+0x230>
                    }
                } while (pb_field_iter_next(&iter));
 8005358:	f107 030c 	add.w	r3, r7, #12
 800535c:	4618      	mov	r0, r3
 800535e:	f7fd fe6b 	bl	8003038 <pb_field_iter_next>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1ea      	bne.n	800533e <pb_check_proto3_default_value+0x182>
            }
            return true;
 8005368:	2301      	movs	r3, #1
 800536a:	e03f      	b.n	80053ec <pb_check_proto3_default_value+0x230>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800536c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005370:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005374:	2b80      	cmp	r3, #128	; 0x80
 8005376:	d107      	bne.n	8005388 <pb_check_proto3_default_value+0x1cc>
    {
        return field->pData == NULL;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf0c      	ite	eq
 8005380:	2301      	moveq	r3, #1
 8005382:	2300      	movne	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	e031      	b.n	80053ec <pb_check_proto3_default_value+0x230>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 8005388:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800538c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005390:	2b40      	cmp	r3, #64	; 0x40
 8005392:	d12a      	bne.n	80053ea <pb_check_proto3_default_value+0x22e>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 8005394:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005398:	f003 030f 	and.w	r3, r3, #15
 800539c:	2b0a      	cmp	r3, #10
 800539e:	d10a      	bne.n	80053b6 <pb_check_proto3_default_value+0x1fa>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	69db      	ldr	r3, [r3, #28]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	63fb      	str	r3, [r7, #60]	; 0x3c
            return extension == NULL;
 80053a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	bf0c      	ite	eq
 80053ae:	2301      	moveq	r3, #1
 80053b0:	2300      	movne	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	e01a      	b.n	80053ec <pb_check_proto3_default_value+0x230>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	4a0d      	ldr	r2, [pc, #52]	; (80053f4 <pb_check_proto3_default_value+0x238>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d10a      	bne.n	80053d8 <pb_check_proto3_default_value+0x21c>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69db      	ldr	r3, [r3, #28]
 80053c6:	643b      	str	r3, [r7, #64]	; 0x40
            return pCallback->funcs.encode == NULL;
 80053c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	bf0c      	ite	eq
 80053d0:	2301      	moveq	r3, #1
 80053d2:	2300      	movne	r3, #0
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	e009      	b.n	80053ec <pb_check_proto3_default_value+0x230>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	bf0c      	ite	eq
 80053e2:	2301      	moveq	r3, #1
 80053e4:	2300      	movne	r3, #0
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	e000      	b.n	80053ec <pb_check_proto3_default_value+0x230>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3748      	adds	r7, #72	; 0x48
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}
 80053f4:	080031db 	.word	0x080031db

080053f8 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 800540a:	2301      	movs	r3, #1
 800540c:	e061      	b.n	80054d2 <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 800540e:	6839      	ldr	r1, [r7, #0]
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fab9 	bl	8005988 <pb_encode_tag_for_field>
 8005416:	4603      	mov	r3, r0
 8005418:	f083 0301 	eor.w	r3, r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b00      	cmp	r3, #0
 8005420:	d001      	beq.n	8005426 <encode_basic_field+0x2e>
        return false;
 8005422:	2300      	movs	r3, #0
 8005424:	e055      	b.n	80054d2 <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	7d9b      	ldrb	r3, [r3, #22]
 800542a:	f003 030f 	and.w	r3, r3, #15
 800542e:	2b0b      	cmp	r3, #11
 8005430:	d844      	bhi.n	80054bc <encode_basic_field+0xc4>
 8005432:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <encode_basic_field+0x40>)
 8005434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005438:	08005469 	.word	0x08005469
 800543c:	08005475 	.word	0x08005475
 8005440:	08005475 	.word	0x08005475
 8005444:	08005475 	.word	0x08005475
 8005448:	08005481 	.word	0x08005481
 800544c:	08005481 	.word	0x08005481
 8005450:	0800548d 	.word	0x0800548d
 8005454:	08005499 	.word	0x08005499
 8005458:	080054a5 	.word	0x080054a5
 800545c:	080054a5 	.word	0x080054a5
 8005460:	080054bd 	.word	0x080054bd
 8005464:	080054b1 	.word	0x080054b1
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 8005468:	6839      	ldr	r1, [r7, #0]
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 fb8a 	bl	8005b84 <pb_enc_bool>
 8005470:	4603      	mov	r3, r0
 8005472:	e02e      	b.n	80054d2 <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 8005474:	6839      	ldr	r1, [r7, #0]
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 fb9e 	bl	8005bb8 <pb_enc_varint>
 800547c:	4603      	mov	r3, r0
 800547e:	e028      	b.n	80054d2 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 fc5a 	bl	8005d3c <pb_enc_fixed>
 8005488:	4603      	mov	r3, r0
 800548a:	e022      	b.n	80054d2 <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 fc82 	bl	8005d98 <pb_enc_bytes>
 8005494:	4603      	mov	r3, r0
 8005496:	e01c      	b.n	80054d2 <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 8005498:	6839      	ldr	r1, [r7, #0]
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fcba 	bl	8005e14 <pb_enc_string>
 80054a0:	4603      	mov	r3, r0
 80054a2:	e016      	b.n	80054d2 <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 fd12 	bl	8005ed0 <pb_enc_submessage>
 80054ac:	4603      	mov	r3, r0
 80054ae:	e010      	b.n	80054d2 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 80054b0:	6839      	ldr	r1, [r7, #0]
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fd52 	bl	8005f5c <pb_enc_fixed_length_bytes>
 80054b8:	4603      	mov	r3, r0
 80054ba:	e00a      	b.n	80054d2 <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <encode_basic_field+0xd2>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	e000      	b.n	80054cc <encode_basic_field+0xd4>
 80054ca:	4b04      	ldr	r3, [pc, #16]	; (80054dc <encode_basic_field+0xe4>)
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6113      	str	r3, [r2, #16]
 80054d0:	2300      	movs	r3, #0
    }
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3708      	adds	r7, #8
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop
 80054dc:	0800b388 	.word	0x0800b388

080054e0 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b082      	sub	sp, #8
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d018      	beq.n	8005526 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	683a      	ldr	r2, [r7, #0]
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	2000      	movs	r0, #0
 8005500:	4798      	blx	r3
 8005502:	4603      	mov	r3, r0
 8005504:	f083 0301 	eor.w	r3, r3, #1
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00b      	beq.n	8005526 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d002      	beq.n	800551c <encode_callback_field+0x3c>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	e000      	b.n	800551e <encode_callback_field+0x3e>
 800551c:	4b04      	ldr	r3, [pc, #16]	; (8005530 <encode_callback_field+0x50>)
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	6113      	str	r3, [r2, #16]
 8005522:	2300      	movs	r3, #0
 8005524:	e000      	b.n	8005528 <encode_callback_field+0x48>
    }
    return true;
 8005526:	2301      	movs	r3, #1
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	0800b39c 	.word	0x0800b39c

08005534 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	7d9b      	ldrb	r3, [r3, #22]
 8005542:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005546:	2b30      	cmp	r3, #48	; 0x30
 8005548:	d108      	bne.n	800555c <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6a1b      	ldr	r3, [r3, #32]
 800554e:	881a      	ldrh	r2, [r3, #0]
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	8a1b      	ldrh	r3, [r3, #16]
 8005554:	429a      	cmp	r2, r3
 8005556:	d026      	beq.n	80055a6 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 8005558:	2301      	movs	r3, #1
 800555a:	e059      	b.n	8005610 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	7d9b      	ldrb	r3, [r3, #22]
 8005560:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005564:	2b10      	cmp	r3, #16
 8005566:	d11e      	bne.n	80055a6 <encode_field+0x72>
    {
        if (field->pSize)
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6a1b      	ldr	r3, [r3, #32]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00c      	beq.n	800558a <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	6a1b      	ldr	r3, [r3, #32]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fcaf 	bl	8004ed8 <safe_read_bool>
 800557a:	4603      	mov	r3, r0
 800557c:	f083 0301 	eor.w	r3, r3, #1
 8005580:	b2db      	uxtb	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d00f      	beq.n	80055a6 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 8005586:	2301      	movs	r3, #1
 8005588:	e042      	b.n	8005610 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	7d9b      	ldrb	r3, [r3, #22]
 800558e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d107      	bne.n	80055a6 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 8005596:	6838      	ldr	r0, [r7, #0]
 8005598:	f7ff fe10 	bl	80051bc <pb_check_proto3_default_value>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <encode_field+0x72>
                return true;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e034      	b.n	8005610 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d113      	bne.n	80055d6 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	7d9b      	ldrb	r3, [r3, #22]
 80055b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d10b      	bne.n	80055d2 <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <encode_field+0x94>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	e000      	b.n	80055ca <encode_field+0x96>
 80055c8:	4b13      	ldr	r3, [pc, #76]	; (8005618 <encode_field+0xe4>)
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6113      	str	r3, [r2, #16]
 80055ce:	2300      	movs	r3, #0
 80055d0:	e01e      	b.n	8005610 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e01c      	b.n	8005610 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	7d9b      	ldrb	r3, [r3, #22]
 80055da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055de:	2b40      	cmp	r3, #64	; 0x40
 80055e0:	d105      	bne.n	80055ee <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f7ff ff7b 	bl	80054e0 <encode_callback_field>
 80055ea:	4603      	mov	r3, r0
 80055ec:	e010      	b.n	8005610 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	7d9b      	ldrb	r3, [r3, #22]
 80055f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	d105      	bne.n	8005606 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 80055fa:	6839      	ldr	r1, [r7, #0]
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff fc89 	bl	8004f14 <encode_array>
 8005602:	4603      	mov	r3, r0
 8005604:	e004      	b.n	8005610 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 8005606:	6839      	ldr	r1, [r7, #0]
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff fef5 	bl	80053f8 <encode_basic_field>
 800560e:	4603      	mov	r3, r0
    }
}
 8005610:	4618      	mov	r0, r3
 8005612:	3708      	adds	r7, #8
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}
 8005618:	0800b3ac 	.word	0x0800b3ac

0800561c <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b08c      	sub	sp, #48	; 0x30
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 8005626:	f107 0308 	add.w	r3, r7, #8
 800562a:	6839      	ldr	r1, [r7, #0]
 800562c:	4618      	mov	r0, r3
 800562e:	f7fd fdc2 	bl	80031b6 <pb_field_iter_begin_extension_const>
 8005632:	4603      	mov	r3, r0
 8005634:	f083 0301 	eor.w	r3, r3, #1
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00b      	beq.n	8005656 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <default_extension_encoder+0x30>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	e000      	b.n	800564e <default_extension_encoder+0x32>
 800564c:	4b07      	ldr	r3, [pc, #28]	; (800566c <default_extension_encoder+0x50>)
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6113      	str	r3, [r2, #16]
 8005652:	2300      	movs	r3, #0
 8005654:	e006      	b.n	8005664 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 8005656:	f107 0308 	add.w	r3, r7, #8
 800565a:	4619      	mov	r1, r3
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f7ff ff69 	bl	8005534 <encode_field>
 8005662:	4603      	mov	r3, r0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3730      	adds	r7, #48	; 0x30
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	0800b3c4 	.word	0x0800b3c4

08005670 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	69db      	ldr	r3, [r3, #28]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60fb      	str	r3, [r7, #12]

    while (extension)
 8005682:	e01e      	b.n	80056c2 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d008      	beq.n	80056a0 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	68f9      	ldr	r1, [r7, #12]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	4798      	blx	r3
 800569a:	4603      	mov	r3, r0
 800569c:	72fb      	strb	r3, [r7, #11]
 800569e:	e005      	b.n	80056ac <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 80056a0:	68f9      	ldr	r1, [r7, #12]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7ff ffba 	bl	800561c <default_extension_encoder>
 80056a8:	4603      	mov	r3, r0
 80056aa:	72fb      	strb	r3, [r7, #11]

        if (!status)
 80056ac:	7afb      	ldrb	r3, [r7, #11]
 80056ae:	f083 0301 	eor.w	r3, r3, #1
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <encode_extension_field+0x4c>
            return false;
 80056b8:	2300      	movs	r3, #0
 80056ba:	e006      	b.n	80056ca <encode_extension_field+0x5a>
        
        extension = extension->next;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	60fb      	str	r3, [r7, #12]
    while (extension)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d1dd      	bne.n	8005684 <encode_extension_field+0x14>
    }
    
    return true;
 80056c8:	2301      	movs	r3, #1
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b08e      	sub	sp, #56	; 0x38
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 80056de:	f107 0310 	add.w	r3, r7, #16
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	68b9      	ldr	r1, [r7, #8]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fd fd51 	bl	800318e <pb_field_iter_begin_const>
 80056ec:	4603      	mov	r3, r0
 80056ee:	f083 0301 	eor.w	r3, r3, #1
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d001      	beq.n	80056fc <pb_encode+0x2a>
        return true; /* Empty message type */
 80056f8:	2301      	movs	r3, #1
 80056fa:	e02a      	b.n	8005752 <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 80056fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005700:	f003 030f 	and.w	r3, r3, #15
 8005704:	2b0a      	cmp	r3, #10
 8005706:	d10d      	bne.n	8005724 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 8005708:	f107 0310 	add.w	r3, r7, #16
 800570c:	4619      	mov	r1, r3
 800570e:	68f8      	ldr	r0, [r7, #12]
 8005710:	f7ff ffae 	bl	8005670 <encode_extension_field>
 8005714:	4603      	mov	r3, r0
 8005716:	f083 0301 	eor.w	r3, r3, #1
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00f      	beq.n	8005740 <pb_encode+0x6e>
                return false;
 8005720:	2300      	movs	r3, #0
 8005722:	e016      	b.n	8005752 <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 8005724:	f107 0310 	add.w	r3, r7, #16
 8005728:	4619      	mov	r1, r3
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f7ff ff02 	bl	8005534 <encode_field>
 8005730:	4603      	mov	r3, r0
 8005732:	f083 0301 	eor.w	r3, r3, #1
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <pb_encode+0x6e>
                return false;
 800573c:	2300      	movs	r3, #0
 800573e:	e008      	b.n	8005752 <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 8005740:	f107 0310 	add.w	r3, r7, #16
 8005744:	4618      	mov	r0, r3
 8005746:	f7fd fc77 	bl	8003038 <pb_field_iter_next>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1d5      	bne.n	80056fc <pb_encode+0x2a>
    
    return true;
 8005750:	2301      	movs	r3, #1
}
 8005752:	4618      	mov	r0, r3
 8005754:	3738      	adds	r7, #56	; 0x38
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}

0800575a <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 800575a:	b580      	push	{r7, lr}
 800575c:	b088      	sub	sp, #32
 800575e:	af00      	add	r7, sp, #0
 8005760:	60f8      	str	r0, [r7, #12]
 8005762:	60b9      	str	r1, [r7, #8]
 8005764:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 8005766:	2300      	movs	r3, #0
 8005768:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	b2db      	uxtb	r3, r3
 800576e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005772:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	09db      	lsrs	r3, r3, #7
 8005778:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 800577a:	e013      	b.n	80057a4 <pb_encode_varint_32+0x4a>
    {
        byte |= 0x80;
 800577c:	7efb      	ldrb	r3, [r7, #27]
 800577e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005782:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 8005784:	69fb      	ldr	r3, [r7, #28]
 8005786:	1c5a      	adds	r2, r3, #1
 8005788:	61fa      	str	r2, [r7, #28]
 800578a:	3320      	adds	r3, #32
 800578c:	443b      	add	r3, r7
 800578e:	7efa      	ldrb	r2, [r7, #27]
 8005790:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	b2db      	uxtb	r3, r3
 8005798:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800579c:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	09db      	lsrs	r3, r3, #7
 80057a2:	60bb      	str	r3, [r7, #8]
    while (i < 4 && (low != 0 || high != 0))
 80057a4:	69fb      	ldr	r3, [r7, #28]
 80057a6:	2b03      	cmp	r3, #3
 80057a8:	d805      	bhi.n	80057b6 <pb_encode_varint_32+0x5c>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d1e5      	bne.n	800577c <pb_encode_varint_32+0x22>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d1e2      	bne.n	800577c <pb_encode_varint_32+0x22>
    }

    if (high)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d024      	beq.n	8005806 <pb_encode_varint_32+0xac>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	011b      	lsls	r3, r3, #4
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	7efb      	ldrb	r3, [r7, #27]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	08db      	lsrs	r3, r3, #3
 80057d4:	607b      	str	r3, [r7, #4]

        while (high)
 80057d6:	e013      	b.n	8005800 <pb_encode_varint_32+0xa6>
        {
            byte |= 0x80;
 80057d8:	7efb      	ldrb	r3, [r7, #27]
 80057da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80057de:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 80057e0:	69fb      	ldr	r3, [r7, #28]
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	61fa      	str	r2, [r7, #28]
 80057e6:	3320      	adds	r3, #32
 80057e8:	443b      	add	r3, r7
 80057ea:	7efa      	ldrb	r2, [r7, #27]
 80057ec:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f8:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	09db      	lsrs	r3, r3, #7
 80057fe:	607b      	str	r3, [r7, #4]
        while (high)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d1e8      	bne.n	80057d8 <pb_encode_varint_32+0x7e>
        }
    }

    buffer[i++] = byte;
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	1c5a      	adds	r2, r3, #1
 800580a:	61fa      	str	r2, [r7, #28]
 800580c:	3320      	adds	r3, #32
 800580e:	443b      	add	r3, r7
 8005810:	7efa      	ldrb	r2, [r7, #27]
 8005812:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 8005816:	f107 0310 	add.w	r3, r7, #16
 800581a:	69fa      	ldr	r2, [r7, #28]
 800581c:	4619      	mov	r1, r3
 800581e:	68f8      	ldr	r0, [r7, #12]
 8005820:	f7ff fb0a 	bl	8004e38 <pb_write>
 8005824:	4603      	mov	r3, r0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3720      	adds	r7, #32
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800582e:	b590      	push	{r4, r7, lr}
 8005830:	b087      	sub	sp, #28
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 800583a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800583e:	2a80      	cmp	r2, #128	; 0x80
 8005840:	f173 0300 	sbcs.w	r3, r3, #0
 8005844:	d20a      	bcs.n	800585c <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 8005846:	783b      	ldrb	r3, [r7, #0]
 8005848:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 800584a:	f107 0317 	add.w	r3, r7, #23
 800584e:	2201      	movs	r2, #1
 8005850:	4619      	mov	r1, r3
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f7ff faf0 	bl	8004e38 <pb_write>
 8005858:	4603      	mov	r3, r0
 800585a:	e00f      	b.n	800587c <pb_encode_varint+0x4e>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 800585c:	683c      	ldr	r4, [r7, #0]
 800585e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005862:	f04f 0200 	mov.w	r2, #0
 8005866:	f04f 0300 	mov.w	r3, #0
 800586a:	000a      	movs	r2, r1
 800586c:	2300      	movs	r3, #0
 800586e:	4613      	mov	r3, r2
 8005870:	461a      	mov	r2, r3
 8005872:	4621      	mov	r1, r4
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f7ff ff70 	bl	800575a <pb_encode_varint_32>
 800587a:	4603      	mov	r3, r0
#endif
    }
}
 800587c:	4618      	mov	r0, r3
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	bd90      	pop	{r4, r7, pc}

08005884 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 8005884:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005888:	b08a      	sub	sp, #40	; 0x28
 800588a:	af00      	add	r7, sp, #0
 800588c:	6178      	str	r0, [r7, #20]
 800588e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 8005892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005896:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800589a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if (value < 0)
 800589e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	da15      	bge.n	80058d2 <pb_encode_svarint+0x4e>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 80058a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80058aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ae:	ea00 0402 	and.w	r4, r0, r2
 80058b2:	ea01 0503 	and.w	r5, r1, r3
 80058b6:	1923      	adds	r3, r4, r4
 80058b8:	603b      	str	r3, [r7, #0]
 80058ba:	eb45 0305 	adc.w	r3, r5, r5
 80058be:	607b      	str	r3, [r7, #4]
 80058c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058c4:	ea6f 0a02 	mvn.w	sl, r2
 80058c8:	ea6f 0b03 	mvn.w	fp, r3
 80058cc:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 80058d0:	e007      	b.n	80058e2 <pb_encode_svarint+0x5e>
    else
        zigzagged = (pb_uint64_t)value << 1;
 80058d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058d6:	eb12 0802 	adds.w	r8, r2, r2
 80058da:	eb43 0903 	adc.w	r9, r3, r3
 80058de:	e9c7 8908 	strd	r8, r9, [r7, #32]
    
    return pb_encode_varint(stream, zigzagged);
 80058e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058e6:	6978      	ldr	r0, [r7, #20]
 80058e8:	f7ff ffa1 	bl	800582e <pb_encode_varint>
 80058ec:	4603      	mov	r3, r0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3728      	adds	r7, #40	; 0x28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080058f8 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 8005902:	2204      	movs	r2, #4
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f7ff fa96 	bl	8004e38 <pb_write>
 800590c:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 800590e:	4618      	mov	r0, r3
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}

08005916 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 8005916:	b580      	push	{r7, lr}
 8005918:	b082      	sub	sp, #8
 800591a:	af00      	add	r7, sp, #0
 800591c:	6078      	str	r0, [r7, #4]
 800591e:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 8005920:	2208      	movs	r2, #8
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff fa87 	bl	8004e38 <pb_write>
 800592a:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 800592c:	4618      	mov	r0, r3
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 8005934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005938:	b088      	sub	sp, #32
 800593a:	af00      	add	r7, sp, #0
 800593c:	6178      	str	r0, [r7, #20]
 800593e:	460b      	mov	r3, r1
 8005940:	60fa      	str	r2, [r7, #12]
 8005942:	74fb      	strb	r3, [r7, #19]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2200      	movs	r2, #0
 8005948:	469a      	mov	sl, r3
 800594a:	4693      	mov	fp, r2
 800594c:	ea4f 755a 	mov.w	r5, sl, lsr #29
 8005950:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 8005954:	7cfb      	ldrb	r3, [r7, #19]
 8005956:	2200      	movs	r2, #0
 8005958:	4698      	mov	r8, r3
 800595a:	4691      	mov	r9, r2
 800595c:	ea44 0308 	orr.w	r3, r4, r8
 8005960:	603b      	str	r3, [r7, #0]
 8005962:	ea45 0309 	orr.w	r3, r5, r9
 8005966:	607b      	str	r3, [r7, #4]
 8005968:	e9d7 3400 	ldrd	r3, r4, [r7]
 800596c:	e9c7 3406 	strd	r3, r4, [r7, #24]
    return pb_encode_varint(stream, tag);
 8005970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005974:	6978      	ldr	r0, [r7, #20]
 8005976:	f7ff ff5a 	bl	800582e <pb_encode_varint>
 800597a:	4603      	mov	r3, r0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3720      	adds	r7, #32
 8005980:	46bd      	mov	sp, r7
 8005982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08005988 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b084      	sub	sp, #16
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	7d9b      	ldrb	r3, [r3, #22]
 8005996:	f003 030f 	and.w	r3, r3, #15
 800599a:	2b0b      	cmp	r3, #11
 800599c:	d826      	bhi.n	80059ec <pb_encode_tag_for_field+0x64>
 800599e:	a201      	add	r2, pc, #4	; (adr r2, 80059a4 <pb_encode_tag_for_field+0x1c>)
 80059a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a4:	080059d5 	.word	0x080059d5
 80059a8:	080059d5 	.word	0x080059d5
 80059ac:	080059d5 	.word	0x080059d5
 80059b0:	080059d5 	.word	0x080059d5
 80059b4:	080059db 	.word	0x080059db
 80059b8:	080059e1 	.word	0x080059e1
 80059bc:	080059e7 	.word	0x080059e7
 80059c0:	080059e7 	.word	0x080059e7
 80059c4:	080059e7 	.word	0x080059e7
 80059c8:	080059e7 	.word	0x080059e7
 80059cc:	080059ed 	.word	0x080059ed
 80059d0:	080059e7 	.word	0x080059e7
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 80059d4:	2300      	movs	r3, #0
 80059d6:	73fb      	strb	r3, [r7, #15]
            break;
 80059d8:	e014      	b.n	8005a04 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 80059da:	2305      	movs	r3, #5
 80059dc:	73fb      	strb	r3, [r7, #15]
            break;
 80059de:	e011      	b.n	8005a04 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
            break;
 80059e4:	e00e      	b.n	8005a04 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 80059e6:	2302      	movs	r3, #2
 80059e8:	73fb      	strb	r3, [r7, #15]
            break;
 80059ea:	e00b      	b.n	8005a04 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d002      	beq.n	80059fa <pb_encode_tag_for_field+0x72>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	e000      	b.n	80059fc <pb_encode_tag_for_field+0x74>
 80059fa:	4b09      	ldr	r3, [pc, #36]	; (8005a20 <pb_encode_tag_for_field+0x98>)
 80059fc:	687a      	ldr	r2, [r7, #4]
 80059fe:	6113      	str	r3, [r2, #16]
 8005a00:	2300      	movs	r3, #0
 8005a02:	e008      	b.n	8005a16 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	8a1b      	ldrh	r3, [r3, #16]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7ff ff90 	bl	8005934 <pb_encode_tag>
 8005a14:	4603      	mov	r3, r0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	0800b388 	.word	0x0800b388

08005a24 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 8005a24:	b5b0      	push	{r4, r5, r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	60b9      	str	r1, [r7, #8]
 8005a2e:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	461c      	mov	r4, r3
 8005a36:	4615      	mov	r5, r2
 8005a38:	4622      	mov	r2, r4
 8005a3a:	462b      	mov	r3, r5
 8005a3c:	68f8      	ldr	r0, [r7, #12]
 8005a3e:	f7ff fef6 	bl	800582e <pb_encode_varint>
 8005a42:	4603      	mov	r3, r0
 8005a44:	f083 0301 	eor.w	r3, r3, #1
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d001      	beq.n	8005a52 <pb_encode_string+0x2e>
        return false;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	e005      	b.n	8005a5e <pb_encode_string+0x3a>
    
    return pb_write(stream, buffer, size);
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	68b9      	ldr	r1, [r7, #8]
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f7ff f9ee 	bl	8004e38 <pb_write>
 8005a5c:	4603      	mov	r3, r0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005a68 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 8005a68:	b5b0      	push	{r4, r5, r7, lr}
 8005a6a:	b08c      	sub	sp, #48	; 0x30
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8005a74:	f107 0314 	add.w	r3, r7, #20
 8005a78:	2200      	movs	r2, #0
 8005a7a:	601a      	str	r2, [r3, #0]
 8005a7c:	605a      	str	r2, [r3, #4]
 8005a7e:	609a      	str	r2, [r3, #8]
 8005a80:	60da      	str	r2, [r3, #12]
 8005a82:	611a      	str	r2, [r3, #16]
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 8005a84:	f107 0314 	add.w	r3, r7, #20
 8005a88:	687a      	ldr	r2, [r7, #4]
 8005a8a:	68b9      	ldr	r1, [r7, #8]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff fe20 	bl	80056d2 <pb_encode>
 8005a92:	4603      	mov	r3, r0
 8005a94:	f083 0301 	eor.w	r3, r3, #1
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d004      	beq.n	8005aa8 <pb_encode_submessage+0x40>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 8005a9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	611a      	str	r2, [r3, #16]
#endif
        return false;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	e065      	b.n	8005b74 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aae:	2200      	movs	r2, #0
 8005ab0:	461c      	mov	r4, r3
 8005ab2:	4615      	mov	r5, r2
 8005ab4:	4622      	mov	r2, r4
 8005ab6:	462b      	mov	r3, r5
 8005ab8:	68f8      	ldr	r0, [r7, #12]
 8005aba:	f7ff feb8 	bl	800582e <pb_encode_varint>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f083 0301 	eor.w	r3, r3, #1
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <pb_encode_submessage+0x66>
        return false;
 8005aca:	2300      	movs	r3, #0
 8005acc:	e052      	b.n	8005b74 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d106      	bne.n	8005ae4 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 8005ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad8:	2100      	movs	r1, #0
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f7ff f9ac 	bl	8004e38 <pb_write>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	e047      	b.n	8005b74 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aea:	441a      	add	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d90b      	bls.n	8005b0c <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	691b      	ldr	r3, [r3, #16]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d002      	beq.n	8005b02 <pb_encode_submessage+0x9a>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	e000      	b.n	8005b04 <pb_encode_submessage+0x9c>
 8005b02:	4b1e      	ldr	r3, [pc, #120]	; (8005b7c <pb_encode_submessage+0x114>)
 8005b04:	68fa      	ldr	r2, [r7, #12]
 8005b06:	6113      	str	r3, [r2, #16]
 8005b08:	2300      	movs	r3, #0
 8005b0a:	e033      	b.n	8005b74 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 8005b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1a:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 8005b24:	f107 0314 	add.w	r3, r7, #20
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	68b9      	ldr	r1, [r7, #8]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff fdd0 	bl	80056d2 <pb_encode>
 8005b32:	4603      	mov	r3, r0
 8005b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	6a3b      	ldr	r3, [r7, #32]
 8005b3e:	441a      	add	r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 8005b44:	69ba      	ldr	r2, [r7, #24]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d00b      	beq.n	8005b70 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	691b      	ldr	r3, [r3, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <pb_encode_submessage+0xfe>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	e000      	b.n	8005b68 <pb_encode_submessage+0x100>
 8005b66:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <pb_encode_submessage+0x118>)
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	6113      	str	r3, [r2, #16]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e001      	b.n	8005b74 <pb_encode_submessage+0x10c>
    
    return status;
 8005b70:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3730      	adds	r7, #48	; 0x30
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8005b7c:	0800b350 	.word	0x0800b350
 8005b80:	0800b3d8 	.word	0x0800b3d8

08005b84 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005b84:	b5b0      	push	{r4, r5, r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff f9a0 	bl	8004ed8 <safe_read_bool>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	461c      	mov	r4, r3
 8005ba2:	4615      	mov	r5, r2
 8005ba4:	4622      	mov	r2, r4
 8005ba6:	462b      	mov	r3, r5
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7ff fe40 	bl	800582e <pb_encode_varint>
 8005bae:	4603      	mov	r3, r0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bdb0      	pop	{r4, r5, r7, pc}

08005bb8 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005bb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bbc:	b08c      	sub	sp, #48	; 0x30
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	61f8      	str	r0, [r7, #28]
 8005bc2:	61b9      	str	r1, [r7, #24]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	7d9b      	ldrb	r3, [r3, #22]
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d152      	bne.n	8005c76 <pb_enc_varint+0xbe>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

        if (field->data_size == sizeof(uint_least8_t))
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	8a5b      	ldrh	r3, [r3, #18]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d10b      	bne.n	8005bfc <pb_enc_varint+0x44>
            value = *(const uint_least8_t*)field->pData;
 8005be4:	69bb      	ldr	r3, [r7, #24]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2200      	movs	r2, #0
 8005bee:	613b      	str	r3, [r7, #16]
 8005bf0:	617a      	str	r2, [r7, #20]
 8005bf2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005bf6:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8005bfa:	e035      	b.n	8005c68 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint_least16_t))
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	8a5b      	ldrh	r3, [r3, #18]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d10b      	bne.n	8005c1c <pb_enc_varint+0x64>
            value = *(const uint_least16_t*)field->pData;
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	60fa      	str	r2, [r7, #12]
 8005c12:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005c16:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8005c1a:	e025      	b.n	8005c68 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(uint32_t))
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	8a5b      	ldrh	r3, [r3, #18]
 8005c20:	2b04      	cmp	r3, #4
 8005c22:	d10a      	bne.n	8005c3a <pb_enc_varint+0x82>
            value = *(const uint32_t*)field->pData;
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	69db      	ldr	r3, [r3, #28]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	603b      	str	r3, [r7, #0]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005c34:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8005c38:	e016      	b.n	8005c68 <pb_enc_varint+0xb0>
        else if (field->data_size == sizeof(pb_uint64_t))
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	8a5b      	ldrh	r3, [r3, #18]
 8005c3e:	2b08      	cmp	r3, #8
 8005c40:	d106      	bne.n	8005c50 <pb_enc_varint+0x98>
            value = *(const pb_uint64_t*)field->pData;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8005c4e:	e00b      	b.n	8005c68 <pb_enc_varint+0xb0>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	691b      	ldr	r3, [r3, #16]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d002      	beq.n	8005c5e <pb_enc_varint+0xa6>
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	e000      	b.n	8005c60 <pb_enc_varint+0xa8>
 8005c5e:	4b36      	ldr	r3, [pc, #216]	; (8005d38 <pb_enc_varint+0x180>)
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	6113      	str	r3, [r2, #16]
 8005c64:	2300      	movs	r3, #0
 8005c66:	e061      	b.n	8005d2c <pb_enc_varint+0x174>

        return pb_encode_varint(stream, value);
 8005c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c6c:	69f8      	ldr	r0, [r7, #28]
 8005c6e:	f7ff fdde 	bl	800582e <pb_encode_varint>
 8005c72:	4603      	mov	r3, r0
 8005c74:	e05a      	b.n	8005d2c <pb_enc_varint+0x174>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 8005c76:	f04f 0200 	mov.w	r2, #0
 8005c7a:	f04f 0300 	mov.w	r3, #0
 8005c7e:	e9c7 2308 	strd	r2, r3, [r7, #32]

        if (field->data_size == sizeof(int_least8_t))
 8005c82:	69bb      	ldr	r3, [r7, #24]
 8005c84:	8a5b      	ldrh	r3, [r3, #18]
 8005c86:	2b01      	cmp	r3, #1
 8005c88:	d10a      	bne.n	8005ca0 <pb_enc_varint+0xe8>
            value = *(const int_least8_t*)field->pData;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	f993 3000 	ldrsb.w	r3, [r3]
 8005c92:	b25b      	sxtb	r3, r3
 8005c94:	17da      	asrs	r2, r3, #31
 8005c96:	469a      	mov	sl, r3
 8005c98:	4693      	mov	fp, r2
 8005c9a:	e9c7 ab08 	strd	sl, fp, [r7, #32]
 8005c9e:	e032      	b.n	8005d06 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int_least16_t))
 8005ca0:	69bb      	ldr	r3, [r7, #24]
 8005ca2:	8a5b      	ldrh	r3, [r3, #18]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d10a      	bne.n	8005cbe <pb_enc_varint+0x106>
            value = *(const int_least16_t*)field->pData;
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	69db      	ldr	r3, [r3, #28]
 8005cac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005cb0:	b21b      	sxth	r3, r3
 8005cb2:	17da      	asrs	r2, r3, #31
 8005cb4:	4698      	mov	r8, r3
 8005cb6:	4691      	mov	r9, r2
 8005cb8:	e9c7 8908 	strd	r8, r9, [r7, #32]
 8005cbc:	e023      	b.n	8005d06 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(int32_t))
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	8a5b      	ldrh	r3, [r3, #18]
 8005cc2:	2b04      	cmp	r3, #4
 8005cc4:	d108      	bne.n	8005cd8 <pb_enc_varint+0x120>
            value = *(const int32_t*)field->pData;
 8005cc6:	69bb      	ldr	r3, [r7, #24]
 8005cc8:	69db      	ldr	r3, [r3, #28]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	17da      	asrs	r2, r3, #31
 8005cce:	461c      	mov	r4, r3
 8005cd0:	4615      	mov	r5, r2
 8005cd2:	e9c7 4508 	strd	r4, r5, [r7, #32]
 8005cd6:	e016      	b.n	8005d06 <pb_enc_varint+0x14e>
        else if (field->data_size == sizeof(pb_int64_t))
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	8a5b      	ldrh	r3, [r3, #18]
 8005cdc:	2b08      	cmp	r3, #8
 8005cde:	d106      	bne.n	8005cee <pb_enc_varint+0x136>
            value = *(const pb_int64_t*)field->pData;
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce8:	e9c7 2308 	strd	r2, r3, [r7, #32]
 8005cec:	e00b      	b.n	8005d06 <pb_enc_varint+0x14e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d002      	beq.n	8005cfc <pb_enc_varint+0x144>
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	e000      	b.n	8005cfe <pb_enc_varint+0x146>
 8005cfc:	4b0e      	ldr	r3, [pc, #56]	; (8005d38 <pb_enc_varint+0x180>)
 8005cfe:	69fa      	ldr	r2, [r7, #28]
 8005d00:	6113      	str	r3, [r2, #16]
 8005d02:	2300      	movs	r3, #0
 8005d04:	e012      	b.n	8005d2c <pb_enc_varint+0x174>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	7d9b      	ldrb	r3, [r3, #22]
 8005d0a:	f003 030f 	and.w	r3, r3, #15
 8005d0e:	2b03      	cmp	r3, #3
 8005d10:	d106      	bne.n	8005d20 <pb_enc_varint+0x168>
            return pb_encode_svarint(stream, value);
 8005d12:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d16:	69f8      	ldr	r0, [r7, #28]
 8005d18:	f7ff fdb4 	bl	8005884 <pb_encode_svarint>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	e005      	b.n	8005d2c <pb_enc_varint+0x174>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 8005d20:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d24:	69f8      	ldr	r0, [r7, #28]
 8005d26:	f7ff fd82 	bl	800582e <pb_encode_varint>
 8005d2a:	4603      	mov	r3, r0

    }
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3730      	adds	r7, #48	; 0x30
 8005d30:	46bd      	mov	sp, r7
 8005d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d36:	bf00      	nop
 8005d38:	0800b3ec 	.word	0x0800b3ec

08005d3c <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b082      	sub	sp, #8
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	8a5b      	ldrh	r3, [r3, #18]
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d107      	bne.n	8005d5e <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	69db      	ldr	r3, [r3, #28]
 8005d52:	4619      	mov	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f7ff fdcf 	bl	80058f8 <pb_encode_fixed32>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	e016      	b.n	8005d8c <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	8a5b      	ldrh	r3, [r3, #18]
 8005d62:	2b08      	cmp	r3, #8
 8005d64:	d107      	bne.n	8005d76 <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	69db      	ldr	r3, [r3, #28]
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f7ff fdd2 	bl	8005916 <pb_encode_fixed64>
 8005d72:	4603      	mov	r3, r0
 8005d74:	e00a      	b.n	8005d8c <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <pb_enc_fixed+0x48>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	e000      	b.n	8005d86 <pb_enc_fixed+0x4a>
 8005d84:	4b03      	ldr	r3, [pc, #12]	; (8005d94 <pb_enc_fixed+0x58>)
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6113      	str	r3, [r2, #16]
 8005d8a:	2300      	movs	r3, #0
    }
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3708      	adds	r7, #8
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	0800b3ec 	.word	0x0800b3ec

08005d98 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 8005da2:	2300      	movs	r3, #0
 8005da4:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	69db      	ldr	r3, [r3, #28]
 8005daa:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d106      	bne.n	8005dc0 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 8005db2:	2200      	movs	r2, #0
 8005db4:	2100      	movs	r1, #0
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7ff fe34 	bl	8005a24 <pb_encode_string>
 8005dbc:	4603      	mov	r3, r0
 8005dbe:	e022      	b.n	8005e06 <pb_enc_bytes+0x6e>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	7d9b      	ldrb	r3, [r3, #22]
 8005dc4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d113      	bne.n	8005df4 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	8a5b      	ldrh	r3, [r3, #18]
 8005dd6:	3b02      	subs	r3, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d90b      	bls.n	8005df4 <pb_enc_bytes+0x5c>
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d002      	beq.n	8005dea <pb_enc_bytes+0x52>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	e000      	b.n	8005dec <pb_enc_bytes+0x54>
 8005dea:	4b09      	ldr	r3, [pc, #36]	; (8005e10 <pb_enc_bytes+0x78>)
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	6113      	str	r3, [r2, #16]
 8005df0:	2300      	movs	r3, #0
 8005df2:	e008      	b.n	8005e06 <pb_enc_bytes+0x6e>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	1c99      	adds	r1, r3, #2
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	881b      	ldrh	r3, [r3, #0]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff fe10 	bl	8005a24 <pb_encode_string>
 8005e04:	4603      	mov	r3, r0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3710      	adds	r7, #16
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	0800b400 	.word	0x0800b400

08005e14 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	8a5b      	ldrh	r3, [r3, #18]
 8005e26:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	69db      	ldr	r3, [r3, #28]
 8005e2c:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	7d9b      	ldrb	r3, [r3, #22]
 8005e32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e36:	2b80      	cmp	r3, #128	; 0x80
 8005e38:	d103      	bne.n	8005e42 <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 8005e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005e3e:	613b      	str	r3, [r7, #16]
 8005e40:	e011      	b.n	8005e66 <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d10b      	bne.n	8005e60 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <pb_enc_string+0x42>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	691b      	ldr	r3, [r3, #16]
 8005e54:	e000      	b.n	8005e58 <pb_enc_string+0x44>
 8005e56:	4b1c      	ldr	r3, [pc, #112]	; (8005ec8 <pb_enc_string+0xb4>)
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	6113      	str	r3, [r2, #16]
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e02f      	b.n	8005ec0 <pb_enc_string+0xac>

        max_size -= 1;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	3b01      	subs	r3, #1
 8005e64:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d102      	bne.n	8005e72 <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	617b      	str	r3, [r7, #20]
 8005e70:	e020      	b.n	8005eb4 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 8005e76:	e005      	b.n	8005e84 <pb_enc_string+0x70>
        {
            size++;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	617b      	str	r3, [r7, #20]
            p++;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
        while (size < max_size && *p != '\0')
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d203      	bcs.n	8005e94 <pb_enc_string+0x80>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1f1      	bne.n	8005e78 <pb_enc_string+0x64>
        }

        if (*p != '\0')
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00b      	beq.n	8005eb4 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d002      	beq.n	8005eaa <pb_enc_string+0x96>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	e000      	b.n	8005eac <pb_enc_string+0x98>
 8005eaa:	4b08      	ldr	r3, [pc, #32]	; (8005ecc <pb_enc_string+0xb8>)
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6113      	str	r3, [r2, #16]
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	e005      	b.n	8005ec0 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 8005eb4:	697a      	ldr	r2, [r7, #20]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff fdb3 	bl	8005a24 <pb_encode_string>
 8005ebe:	4603      	mov	r3, r0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	0800b414 	.word	0x0800b414
 8005ecc:	0800b428 	.word	0x0800b428

08005ed0 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b084      	sub	sp, #16
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
 8005ed8:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <pb_enc_submessage+0x20>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	e000      	b.n	8005ef2 <pb_enc_submessage+0x22>
 8005ef0:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <pb_enc_submessage+0x88>)
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6113      	str	r3, [r2, #16]
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	e029      	b.n	8005f4e <pb_enc_submessage+0x7e>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	7d9b      	ldrb	r3, [r3, #22]
 8005efe:	f003 030f 	and.w	r3, r3, #15
 8005f02:	2b09      	cmp	r3, #9
 8005f04:	d11a      	bne.n	8005f3c <pb_enc_submessage+0x6c>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	6a1b      	ldr	r3, [r3, #32]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d016      	beq.n	8005f3c <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	3b08      	subs	r3, #8
 8005f14:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00e      	beq.n	8005f3c <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	3204      	adds	r2, #4
 8005f26:	6839      	ldr	r1, [r7, #0]
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	4798      	blx	r3
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	f083 0301 	eor.w	r3, r3, #1
 8005f32:	b2db      	uxtb	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d001      	beq.n	8005f3c <pb_enc_submessage+0x6c>
                return false;
 8005f38:	2300      	movs	r3, #0
 8005f3a:	e008      	b.n	8005f4e <pb_enc_submessage+0x7e>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	461a      	mov	r2, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7ff fd8e 	bl	8005a68 <pb_encode_submessage>
 8005f4c:	4603      	mov	r3, r0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3710      	adds	r7, #16
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	0800b43c 	.word	0x0800b43c

08005f5c <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	69d9      	ldr	r1, [r3, #28]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	8a5b      	ldrh	r3, [r3, #18]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff fd57 	bl	8005a24 <pb_encode_string>
 8005f76:	4603      	mov	r3, r0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f86:	4b0f      	ldr	r3, [pc, #60]	; (8005fc4 <HAL_MspInit+0x44>)
 8005f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f8a:	4a0e      	ldr	r2, [pc, #56]	; (8005fc4 <HAL_MspInit+0x44>)
 8005f8c:	f043 0301 	orr.w	r3, r3, #1
 8005f90:	6613      	str	r3, [r2, #96]	; 0x60
 8005f92:	4b0c      	ldr	r3, [pc, #48]	; (8005fc4 <HAL_MspInit+0x44>)
 8005f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005f9e:	4b09      	ldr	r3, [pc, #36]	; (8005fc4 <HAL_MspInit+0x44>)
 8005fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fa2:	4a08      	ldr	r2, [pc, #32]	; (8005fc4 <HAL_MspInit+0x44>)
 8005fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa8:	6593      	str	r3, [r2, #88]	; 0x58
 8005faa:	4b06      	ldr	r3, [pc, #24]	; (8005fc4 <HAL_MspInit+0x44>)
 8005fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fb2:	603b      	str	r3, [r7, #0]
 8005fb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8005fb6:	f001 fcbf 	bl	8007938 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005fba:	bf00      	nop
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	40021000 	.word	0x40021000

08005fc8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b09a      	sub	sp, #104	; 0x68
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005fd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	605a      	str	r2, [r3, #4]
 8005fda:	609a      	str	r2, [r3, #8]
 8005fdc:	60da      	str	r2, [r3, #12]
 8005fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005fe0:	f107 0310 	add.w	r3, r7, #16
 8005fe4:	2244      	movs	r2, #68	; 0x44
 8005fe6:	2100      	movs	r1, #0
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f004 fb4f 	bl	800a68c <memset>
  if(hfdcan->Instance==FDCAN1)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a24      	ldr	r2, [pc, #144]	; (8006084 <HAL_FDCAN_MspInit+0xbc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d141      	bne.n	800607c <HAL_FDCAN_MspInit+0xb4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8005ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ffc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8005ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006002:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006004:	f107 0310 	add.w	r3, r7, #16
 8006008:	4618      	mov	r0, r3
 800600a:	f002 f99b 	bl	8008344 <HAL_RCCEx_PeriphCLKConfig>
 800600e:	4603      	mov	r3, r0
 8006010:	2b00      	cmp	r3, #0
 8006012:	d001      	beq.n	8006018 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8006014:	f7fc fd92 	bl	8002b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8006018:	4b1b      	ldr	r3, [pc, #108]	; (8006088 <HAL_FDCAN_MspInit+0xc0>)
 800601a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800601c:	4a1a      	ldr	r2, [pc, #104]	; (8006088 <HAL_FDCAN_MspInit+0xc0>)
 800601e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006022:	6593      	str	r3, [r2, #88]	; 0x58
 8006024:	4b18      	ldr	r3, [pc, #96]	; (8006088 <HAL_FDCAN_MspInit+0xc0>)
 8006026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602c:	60fb      	str	r3, [r7, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006030:	4b15      	ldr	r3, [pc, #84]	; (8006088 <HAL_FDCAN_MspInit+0xc0>)
 8006032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006034:	4a14      	ldr	r2, [pc, #80]	; (8006088 <HAL_FDCAN_MspInit+0xc0>)
 8006036:	f043 0301 	orr.w	r3, r3, #1
 800603a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800603c:	4b12      	ldr	r3, [pc, #72]	; (8006088 <HAL_FDCAN_MspInit+0xc0>)
 800603e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006040:	f003 0301 	and.w	r3, r3, #1
 8006044:	60bb      	str	r3, [r7, #8]
 8006046:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006048:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800604c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800604e:	2302      	movs	r3, #2
 8006050:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006052:	2300      	movs	r3, #0
 8006054:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006056:	2300      	movs	r3, #0
 8006058:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800605a:	2309      	movs	r3, #9
 800605c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800605e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006062:	4619      	mov	r1, r3
 8006064:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006068:	f001 f9f6 	bl	8007458 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800606c:	2200      	movs	r2, #0
 800606e:	2100      	movs	r1, #0
 8006070:	2015      	movs	r0, #21
 8006072:	f000 fba8 	bl	80067c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8006076:	2015      	movs	r0, #21
 8006078:	f000 fbbf 	bl	80067fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 800607c:	bf00      	nop
 800607e:	3768      	adds	r7, #104	; 0x68
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	40006400 	.word	0x40006400
 8006088:	40021000 	.word	0x40021000

0800608c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a1f      	ldr	r2, [pc, #124]	; (8006118 <HAL_TIM_Base_MspInit+0x8c>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d10c      	bne.n	80060b8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800609e:	4b1f      	ldr	r3, [pc, #124]	; (800611c <HAL_TIM_Base_MspInit+0x90>)
 80060a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060a2:	4a1e      	ldr	r2, [pc, #120]	; (800611c <HAL_TIM_Base_MspInit+0x90>)
 80060a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80060a8:	6613      	str	r3, [r2, #96]	; 0x60
 80060aa:	4b1c      	ldr	r3, [pc, #112]	; (800611c <HAL_TIM_Base_MspInit+0x90>)
 80060ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060b2:	617b      	str	r3, [r7, #20]
 80060b4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80060b6:	e02a      	b.n	800610e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a18      	ldr	r2, [pc, #96]	; (8006120 <HAL_TIM_Base_MspInit+0x94>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d114      	bne.n	80060ec <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80060c2:	4b16      	ldr	r3, [pc, #88]	; (800611c <HAL_TIM_Base_MspInit+0x90>)
 80060c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c6:	4a15      	ldr	r2, [pc, #84]	; (800611c <HAL_TIM_Base_MspInit+0x90>)
 80060c8:	f043 0310 	orr.w	r3, r3, #16
 80060cc:	6593      	str	r3, [r2, #88]	; 0x58
 80060ce:	4b13      	ldr	r3, [pc, #76]	; (800611c <HAL_TIM_Base_MspInit+0x90>)
 80060d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d2:	f003 0310 	and.w	r3, r3, #16
 80060d6:	613b      	str	r3, [r7, #16]
 80060d8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80060da:	2200      	movs	r2, #0
 80060dc:	210f      	movs	r1, #15
 80060de:	2036      	movs	r0, #54	; 0x36
 80060e0:	f000 fb71 	bl	80067c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80060e4:	2036      	movs	r0, #54	; 0x36
 80060e6:	f000 fb88 	bl	80067fa <HAL_NVIC_EnableIRQ>
}
 80060ea:	e010      	b.n	800610e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a0c      	ldr	r2, [pc, #48]	; (8006124 <HAL_TIM_Base_MspInit+0x98>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d10b      	bne.n	800610e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80060f6:	4b09      	ldr	r3, [pc, #36]	; (800611c <HAL_TIM_Base_MspInit+0x90>)
 80060f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fa:	4a08      	ldr	r2, [pc, #32]	; (800611c <HAL_TIM_Base_MspInit+0x90>)
 80060fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006100:	6613      	str	r3, [r2, #96]	; 0x60
 8006102:	4b06      	ldr	r3, [pc, #24]	; (800611c <HAL_TIM_Base_MspInit+0x90>)
 8006104:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	68fb      	ldr	r3, [r7, #12]
}
 800610e:	bf00      	nop
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	40012c00 	.word	0x40012c00
 800611c:	40021000 	.word	0x40021000
 8006120:	40001000 	.word	0x40001000
 8006124:	40013400 	.word	0x40013400

08006128 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8006128:	b480      	push	{r7}
 800612a:	b085      	sub	sp, #20
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM15)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <HAL_TIM_PWM_MspInit+0x38>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d10b      	bne.n	8006152 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800613a:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <HAL_TIM_PWM_MspInit+0x3c>)
 800613c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800613e:	4a09      	ldr	r2, [pc, #36]	; (8006164 <HAL_TIM_PWM_MspInit+0x3c>)
 8006140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006144:	6613      	str	r3, [r2, #96]	; 0x60
 8006146:	4b07      	ldr	r3, [pc, #28]	; (8006164 <HAL_TIM_PWM_MspInit+0x3c>)
 8006148:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800614a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800614e:	60fb      	str	r3, [r7, #12]
 8006150:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8006152:	bf00      	nop
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
 800615e:	bf00      	nop
 8006160:	40014000 	.word	0x40014000
 8006164:	40021000 	.word	0x40021000

08006168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b08a      	sub	sp, #40	; 0x28
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006170:	f107 0314 	add.w	r3, r7, #20
 8006174:	2200      	movs	r2, #0
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	605a      	str	r2, [r3, #4]
 800617a:	609a      	str	r2, [r3, #8]
 800617c:	60da      	str	r2, [r3, #12]
 800617e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a35      	ldr	r2, [pc, #212]	; (800625c <HAL_TIM_MspPostInit+0xf4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d11e      	bne.n	80061c8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800618a:	4b35      	ldr	r3, [pc, #212]	; (8006260 <HAL_TIM_MspPostInit+0xf8>)
 800618c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618e:	4a34      	ldr	r2, [pc, #208]	; (8006260 <HAL_TIM_MspPostInit+0xf8>)
 8006190:	f043 0301 	orr.w	r3, r3, #1
 8006194:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006196:	4b32      	ldr	r3, [pc, #200]	; (8006260 <HAL_TIM_MspPostInit+0xf8>)
 8006198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	613b      	str	r3, [r7, #16]
 80061a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80061a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80061a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a8:	2302      	movs	r3, #2
 80061aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80061ac:	2302      	movs	r3, #2
 80061ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061b0:	2300      	movs	r3, #0
 80061b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80061b4:	2306      	movs	r3, #6
 80061b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061b8:	f107 0314 	add.w	r3, r7, #20
 80061bc:	4619      	mov	r1, r3
 80061be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80061c2:	f001 f949 	bl	8007458 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80061c6:	e045      	b.n	8006254 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM8)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a25      	ldr	r2, [pc, #148]	; (8006264 <HAL_TIM_MspPostInit+0xfc>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d11e      	bne.n	8006210 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80061d2:	4b23      	ldr	r3, [pc, #140]	; (8006260 <HAL_TIM_MspPostInit+0xf8>)
 80061d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d6:	4a22      	ldr	r2, [pc, #136]	; (8006260 <HAL_TIM_MspPostInit+0xf8>)
 80061d8:	f043 0301 	orr.w	r3, r3, #1
 80061dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80061de:	4b20      	ldr	r3, [pc, #128]	; (8006260 <HAL_TIM_MspPostInit+0xf8>)
 80061e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	60fb      	str	r3, [r7, #12]
 80061e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80061ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061f0:	2302      	movs	r3, #2
 80061f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80061f4:	2302      	movs	r3, #2
 80061f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061f8:	2300      	movs	r3, #0
 80061fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 80061fc:	2302      	movs	r3, #2
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006200:	f107 0314 	add.w	r3, r7, #20
 8006204:	4619      	mov	r1, r3
 8006206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800620a:	f001 f925 	bl	8007458 <HAL_GPIO_Init>
}
 800620e:	e021      	b.n	8006254 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM15)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a14      	ldr	r2, [pc, #80]	; (8006268 <HAL_TIM_MspPostInit+0x100>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d11c      	bne.n	8006254 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800621a:	4b11      	ldr	r3, [pc, #68]	; (8006260 <HAL_TIM_MspPostInit+0xf8>)
 800621c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621e:	4a10      	ldr	r2, [pc, #64]	; (8006260 <HAL_TIM_MspPostInit+0xf8>)
 8006220:	f043 0301 	orr.w	r3, r3, #1
 8006224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006226:	4b0e      	ldr	r3, [pc, #56]	; (8006260 <HAL_TIM_MspPostInit+0xf8>)
 8006228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800622a:	f003 0301 	and.w	r3, r3, #1
 800622e:	60bb      	str	r3, [r7, #8]
 8006230:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006232:	2304      	movs	r3, #4
 8006234:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006236:	2302      	movs	r3, #2
 8006238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800623a:	2302      	movs	r3, #2
 800623c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800623e:	2300      	movs	r3, #0
 8006240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8006242:	2309      	movs	r3, #9
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006246:	f107 0314 	add.w	r3, r7, #20
 800624a:	4619      	mov	r1, r3
 800624c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006250:	f001 f902 	bl	8007458 <HAL_GPIO_Init>
}
 8006254:	bf00      	nop
 8006256:	3728      	adds	r7, #40	; 0x28
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	40012c00 	.word	0x40012c00
 8006260:	40021000 	.word	0x40021000
 8006264:	40013400 	.word	0x40013400
 8006268:	40014000 	.word	0x40014000

0800626c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800626c:	b480      	push	{r7}
 800626e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006270:	e7fe      	b.n	8006270 <NMI_Handler+0x4>

08006272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006272:	b480      	push	{r7}
 8006274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006276:	e7fe      	b.n	8006276 <HardFault_Handler+0x4>

08006278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006278:	b480      	push	{r7}
 800627a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800627c:	e7fe      	b.n	800627c <MemManage_Handler+0x4>

0800627e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800627e:	b480      	push	{r7}
 8006280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006282:	e7fe      	b.n	8006282 <BusFault_Handler+0x4>

08006284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006284:	b480      	push	{r7}
 8006286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006288:	e7fe      	b.n	8006288 <UsageFault_Handler+0x4>

0800628a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800628a:	b480      	push	{r7}
 800628c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800628e:	bf00      	nop
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006298:	b480      	push	{r7}
 800629a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800629c:	bf00      	nop
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80062a6:	b480      	push	{r7}
 80062a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80062aa:	bf00      	nop
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80062b8:	f000 f96a 	bl	8006590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80062bc:	bf00      	nop
 80062be:	bd80      	pop	{r7, pc}

080062c0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80062c4:	4802      	ldr	r0, [pc, #8]	; (80062d0 <FDCAN1_IT0_IRQHandler+0x10>)
 80062c6:	f000 fe67 	bl	8006f98 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80062ca:	bf00      	nop
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000088 	.word	0x20000088

080062d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80062d8:	4802      	ldr	r0, [pc, #8]	; (80062e4 <TIM6_DAC_IRQHandler+0x10>)
 80062da:	f002 fc3d 	bl	8008b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80062de:	bf00      	nop
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000138 	.word	0x20000138

080062e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  return 1;
 80062ec:	2301      	movs	r3, #1
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <_kill>:

int _kill(int pid, int sig)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b082      	sub	sp, #8
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
 8006300:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8006302:	f004 fa65 	bl	800a7d0 <__errno>
 8006306:	4603      	mov	r3, r0
 8006308:	2216      	movs	r2, #22
 800630a:	601a      	str	r2, [r3, #0]
  return -1;
 800630c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006310:	4618      	mov	r0, r3
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <_exit>:

void _exit (int status)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8006320:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff ffe7 	bl	80062f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800632a:	e7fe      	b.n	800632a <_exit+0x12>

0800632c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b086      	sub	sp, #24
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006338:	2300      	movs	r3, #0
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	e00a      	b.n	8006354 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800633e:	f3af 8000 	nop.w
 8006342:	4601      	mov	r1, r0
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	1c5a      	adds	r2, r3, #1
 8006348:	60ba      	str	r2, [r7, #8]
 800634a:	b2ca      	uxtb	r2, r1
 800634c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	3301      	adds	r3, #1
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	697a      	ldr	r2, [r7, #20]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	429a      	cmp	r2, r3
 800635a:	dbf0      	blt.n	800633e <_read+0x12>
  }

  return len;
 800635c:	687b      	ldr	r3, [r7, #4]
}
 800635e:	4618      	mov	r0, r3
 8006360:	3718      	adds	r7, #24
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b086      	sub	sp, #24
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006372:	2300      	movs	r3, #0
 8006374:	617b      	str	r3, [r7, #20]
 8006376:	e009      	b.n	800638c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	1c5a      	adds	r2, r3, #1
 800637c:	60ba      	str	r2, [r7, #8]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	4618      	mov	r0, r3
 8006382:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	3301      	adds	r3, #1
 800638a:	617b      	str	r3, [r7, #20]
 800638c:	697a      	ldr	r2, [r7, #20]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	429a      	cmp	r2, r3
 8006392:	dbf1      	blt.n	8006378 <_write+0x12>
  }
  return len;
 8006394:	687b      	ldr	r3, [r7, #4]
}
 8006396:	4618      	mov	r0, r3
 8006398:	3718      	adds	r7, #24
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <_close>:

int _close(int file)
{
 800639e:	b480      	push	{r7}
 80063a0:	b083      	sub	sp, #12
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80063a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
 80063be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063c6:	605a      	str	r2, [r3, #4]
  return 0;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <_isatty>:

int _isatty(int file)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80063de:	2301      	movs	r3, #1
}
 80063e0:	4618      	mov	r0, r3
 80063e2:	370c      	adds	r7, #12
 80063e4:	46bd      	mov	sp, r7
 80063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ea:	4770      	bx	lr

080063ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	60f8      	str	r0, [r7, #12]
 80063f4:	60b9      	str	r1, [r7, #8]
 80063f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
	...

08006408 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006410:	4a14      	ldr	r2, [pc, #80]	; (8006464 <_sbrk+0x5c>)
 8006412:	4b15      	ldr	r3, [pc, #84]	; (8006468 <_sbrk+0x60>)
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800641c:	4b13      	ldr	r3, [pc, #76]	; (800646c <_sbrk+0x64>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d102      	bne.n	800642a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006424:	4b11      	ldr	r3, [pc, #68]	; (800646c <_sbrk+0x64>)
 8006426:	4a12      	ldr	r2, [pc, #72]	; (8006470 <_sbrk+0x68>)
 8006428:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800642a:	4b10      	ldr	r3, [pc, #64]	; (800646c <_sbrk+0x64>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	4413      	add	r3, r2
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	429a      	cmp	r2, r3
 8006436:	d207      	bcs.n	8006448 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006438:	f004 f9ca 	bl	800a7d0 <__errno>
 800643c:	4603      	mov	r3, r0
 800643e:	220c      	movs	r2, #12
 8006440:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006446:	e009      	b.n	800645c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006448:	4b08      	ldr	r3, [pc, #32]	; (800646c <_sbrk+0x64>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800644e:	4b07      	ldr	r3, [pc, #28]	; (800646c <_sbrk+0x64>)
 8006450:	681a      	ldr	r2, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4413      	add	r3, r2
 8006456:	4a05      	ldr	r2, [pc, #20]	; (800646c <_sbrk+0x64>)
 8006458:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800645a:	68fb      	ldr	r3, [r7, #12]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	20008000 	.word	0x20008000
 8006468:	00000400 	.word	0x00000400
 800646c:	2000070c 	.word	0x2000070c
 8006470:	20000868 	.word	0x20000868

08006474 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006474:	b480      	push	{r7}
 8006476:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006478:	4b06      	ldr	r3, [pc, #24]	; (8006494 <SystemInit+0x20>)
 800647a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647e:	4a05      	ldr	r2, [pc, #20]	; (8006494 <SystemInit+0x20>)
 8006480:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006484:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006488:	bf00      	nop
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	e000ed00 	.word	0xe000ed00

08006498 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006498:	480d      	ldr	r0, [pc, #52]	; (80064d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800649a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800649c:	f7ff ffea 	bl	8006474 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80064a0:	480c      	ldr	r0, [pc, #48]	; (80064d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80064a2:	490d      	ldr	r1, [pc, #52]	; (80064d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80064a4:	4a0d      	ldr	r2, [pc, #52]	; (80064dc <LoopForever+0xe>)
  movs r3, #0
 80064a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80064a8:	e002      	b.n	80064b0 <LoopCopyDataInit>

080064aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064ae:	3304      	adds	r3, #4

080064b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064b4:	d3f9      	bcc.n	80064aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064b6:	4a0a      	ldr	r2, [pc, #40]	; (80064e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80064b8:	4c0a      	ldr	r4, [pc, #40]	; (80064e4 <LoopForever+0x16>)
  movs r3, #0
 80064ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064bc:	e001      	b.n	80064c2 <LoopFillZerobss>

080064be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064c0:	3204      	adds	r2, #4

080064c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80064c4:	d3fb      	bcc.n	80064be <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80064c6:	f004 f989 	bl	800a7dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80064ca:	f7fb fec5 	bl	8002258 <main>

080064ce <LoopForever>:

LoopForever:
    b LoopForever
 80064ce:	e7fe      	b.n	80064ce <LoopForever>
  ldr   r0, =_estack
 80064d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80064d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80064d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80064dc:	0800b56c 	.word	0x0800b56c
  ldr r2, =_sbss
 80064e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80064e4:	20000864 	.word	0x20000864

080064e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80064e8:	e7fe      	b.n	80064e8 <ADC1_2_IRQHandler>

080064ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064ea:	b580      	push	{r7, lr}
 80064ec:	b082      	sub	sp, #8
 80064ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064f4:	2003      	movs	r0, #3
 80064f6:	f000 f95b 	bl	80067b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064fa:	200e      	movs	r0, #14
 80064fc:	f000 f80e 	bl	800651c <HAL_InitTick>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	71fb      	strb	r3, [r7, #7]
 800650a:	e001      	b.n	8006510 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800650c:	f7ff fd38 	bl	8005f80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006510:	79fb      	ldrb	r3, [r7, #7]

}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8006528:	4b16      	ldr	r3, [pc, #88]	; (8006584 <HAL_InitTick+0x68>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d022      	beq.n	8006576 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006530:	4b15      	ldr	r3, [pc, #84]	; (8006588 <HAL_InitTick+0x6c>)
 8006532:	681a      	ldr	r2, [r3, #0]
 8006534:	4b13      	ldr	r3, [pc, #76]	; (8006584 <HAL_InitTick+0x68>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800653c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006540:	fbb2 f3f3 	udiv	r3, r2, r3
 8006544:	4618      	mov	r0, r3
 8006546:	f000 f966 	bl	8006816 <HAL_SYSTICK_Config>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10f      	bne.n	8006570 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b0f      	cmp	r3, #15
 8006554:	d809      	bhi.n	800656a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006556:	2200      	movs	r2, #0
 8006558:	6879      	ldr	r1, [r7, #4]
 800655a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800655e:	f000 f932 	bl	80067c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006562:	4a0a      	ldr	r2, [pc, #40]	; (800658c <HAL_InitTick+0x70>)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	e007      	b.n	800657a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	73fb      	strb	r3, [r7, #15]
 800656e:	e004      	b.n	800657a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	73fb      	strb	r3, [r7, #15]
 8006574:	e001      	b.n	800657a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800657a:	7bfb      	ldrb	r3, [r7, #15]
}
 800657c:	4618      	mov	r0, r3
 800657e:	3710      	adds	r7, #16
 8006580:	46bd      	mov	sp, r7
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000008 	.word	0x20000008
 8006588:	20000000 	.word	0x20000000
 800658c:	20000004 	.word	0x20000004

08006590 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006590:	b480      	push	{r7}
 8006592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006594:	4b05      	ldr	r3, [pc, #20]	; (80065ac <HAL_IncTick+0x1c>)
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_IncTick+0x20>)
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4413      	add	r3, r2
 800659e:	4a03      	ldr	r2, [pc, #12]	; (80065ac <HAL_IncTick+0x1c>)
 80065a0:	6013      	str	r3, [r2, #0]
}
 80065a2:	bf00      	nop
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	20000710 	.word	0x20000710
 80065b0:	20000008 	.word	0x20000008

080065b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065b4:	b480      	push	{r7}
 80065b6:	af00      	add	r7, sp, #0
  return uwTick;
 80065b8:	4b03      	ldr	r3, [pc, #12]	; (80065c8 <HAL_GetTick+0x14>)
 80065ba:	681b      	ldr	r3, [r3, #0]
}
 80065bc:	4618      	mov	r0, r3
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	20000710 	.word	0x20000710

080065cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065d4:	f7ff ffee 	bl	80065b4 <HAL_GetTick>
 80065d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80065e4:	d004      	beq.n	80065f0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <HAL_Delay+0x40>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68fa      	ldr	r2, [r7, #12]
 80065ec:	4413      	add	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80065f0:	bf00      	nop
 80065f2:	f7ff ffdf 	bl	80065b4 <HAL_GetTick>
 80065f6:	4602      	mov	r2, r0
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d8f7      	bhi.n	80065f2 <HAL_Delay+0x26>
  {
  }
}
 8006602:	bf00      	nop
 8006604:	bf00      	nop
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	20000008 	.word	0x20000008

08006610 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f003 0307 	and.w	r3, r3, #7
 800661e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006620:	4b0c      	ldr	r3, [pc, #48]	; (8006654 <__NVIC_SetPriorityGrouping+0x44>)
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800662c:	4013      	ands	r3, r2
 800662e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006638:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800663c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006642:	4a04      	ldr	r2, [pc, #16]	; (8006654 <__NVIC_SetPriorityGrouping+0x44>)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	60d3      	str	r3, [r2, #12]
}
 8006648:	bf00      	nop
 800664a:	3714      	adds	r7, #20
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr
 8006654:	e000ed00 	.word	0xe000ed00

08006658 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800665c:	4b04      	ldr	r3, [pc, #16]	; (8006670 <__NVIC_GetPriorityGrouping+0x18>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	0a1b      	lsrs	r3, r3, #8
 8006662:	f003 0307 	and.w	r3, r3, #7
}
 8006666:	4618      	mov	r0, r3
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	e000ed00 	.word	0xe000ed00

08006674 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800667e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006682:	2b00      	cmp	r3, #0
 8006684:	db0b      	blt.n	800669e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006686:	79fb      	ldrb	r3, [r7, #7]
 8006688:	f003 021f 	and.w	r2, r3, #31
 800668c:	4907      	ldr	r1, [pc, #28]	; (80066ac <__NVIC_EnableIRQ+0x38>)
 800668e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006692:	095b      	lsrs	r3, r3, #5
 8006694:	2001      	movs	r0, #1
 8006696:	fa00 f202 	lsl.w	r2, r0, r2
 800669a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800669e:	bf00      	nop
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr
 80066aa:	bf00      	nop
 80066ac:	e000e100 	.word	0xe000e100

080066b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	4603      	mov	r3, r0
 80066b8:	6039      	str	r1, [r7, #0]
 80066ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	db0a      	blt.n	80066da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	490c      	ldr	r1, [pc, #48]	; (80066fc <__NVIC_SetPriority+0x4c>)
 80066ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066ce:	0112      	lsls	r2, r2, #4
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	440b      	add	r3, r1
 80066d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066d8:	e00a      	b.n	80066f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	b2da      	uxtb	r2, r3
 80066de:	4908      	ldr	r1, [pc, #32]	; (8006700 <__NVIC_SetPriority+0x50>)
 80066e0:	79fb      	ldrb	r3, [r7, #7]
 80066e2:	f003 030f 	and.w	r3, r3, #15
 80066e6:	3b04      	subs	r3, #4
 80066e8:	0112      	lsls	r2, r2, #4
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	440b      	add	r3, r1
 80066ee:	761a      	strb	r2, [r3, #24]
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	e000e100 	.word	0xe000e100
 8006700:	e000ed00 	.word	0xe000ed00

08006704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006704:	b480      	push	{r7}
 8006706:	b089      	sub	sp, #36	; 0x24
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f003 0307 	and.w	r3, r3, #7
 8006716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	f1c3 0307 	rsb	r3, r3, #7
 800671e:	2b04      	cmp	r3, #4
 8006720:	bf28      	it	cs
 8006722:	2304      	movcs	r3, #4
 8006724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	3304      	adds	r3, #4
 800672a:	2b06      	cmp	r3, #6
 800672c:	d902      	bls.n	8006734 <NVIC_EncodePriority+0x30>
 800672e:	69fb      	ldr	r3, [r7, #28]
 8006730:	3b03      	subs	r3, #3
 8006732:	e000      	b.n	8006736 <NVIC_EncodePriority+0x32>
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006738:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	fa02 f303 	lsl.w	r3, r2, r3
 8006742:	43da      	mvns	r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	401a      	ands	r2, r3
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800674c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	fa01 f303 	lsl.w	r3, r1, r3
 8006756:	43d9      	mvns	r1, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800675c:	4313      	orrs	r3, r2
         );
}
 800675e:	4618      	mov	r0, r3
 8006760:	3724      	adds	r7, #36	; 0x24
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
	...

0800676c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800676c:	b580      	push	{r7, lr}
 800676e:	b082      	sub	sp, #8
 8006770:	af00      	add	r7, sp, #0
 8006772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	3b01      	subs	r3, #1
 8006778:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800677c:	d301      	bcc.n	8006782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800677e:	2301      	movs	r3, #1
 8006780:	e00f      	b.n	80067a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006782:	4a0a      	ldr	r2, [pc, #40]	; (80067ac <SysTick_Config+0x40>)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3b01      	subs	r3, #1
 8006788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800678a:	210f      	movs	r1, #15
 800678c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006790:	f7ff ff8e 	bl	80066b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006794:	4b05      	ldr	r3, [pc, #20]	; (80067ac <SysTick_Config+0x40>)
 8006796:	2200      	movs	r2, #0
 8006798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800679a:	4b04      	ldr	r3, [pc, #16]	; (80067ac <SysTick_Config+0x40>)
 800679c:	2207      	movs	r2, #7
 800679e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	e000e010 	.word	0xe000e010

080067b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7ff ff29 	bl	8006610 <__NVIC_SetPriorityGrouping>
}
 80067be:	bf00      	nop
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b086      	sub	sp, #24
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	4603      	mov	r3, r0
 80067ce:	60b9      	str	r1, [r7, #8]
 80067d0:	607a      	str	r2, [r7, #4]
 80067d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067d4:	f7ff ff40 	bl	8006658 <__NVIC_GetPriorityGrouping>
 80067d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	6978      	ldr	r0, [r7, #20]
 80067e0:	f7ff ff90 	bl	8006704 <NVIC_EncodePriority>
 80067e4:	4602      	mov	r2, r0
 80067e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ea:	4611      	mov	r1, r2
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff ff5f 	bl	80066b0 <__NVIC_SetPriority>
}
 80067f2:	bf00      	nop
 80067f4:	3718      	adds	r7, #24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b082      	sub	sp, #8
 80067fe:	af00      	add	r7, sp, #0
 8006800:	4603      	mov	r3, r0
 8006802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff ff33 	bl	8006674 <__NVIC_EnableIRQ>
}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006816:	b580      	push	{r7, lr}
 8006818:	b082      	sub	sp, #8
 800681a:	af00      	add	r7, sp, #0
 800681c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f7ff ffa4 	bl	800676c <SysTick_Config>
 8006824:	4603      	mov	r3, r0
}
 8006826:	4618      	mov	r0, r3
 8006828:	3708      	adds	r7, #8
 800682a:	46bd      	mov	sp, r7
 800682c:	bd80      	pop	{r7, pc}
	...

08006830 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800683e:	2301      	movs	r3, #1
 8006840:	e147      	b.n	8006ad2 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7ff fbb6 	bl	8005fc8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 0210 	bic.w	r2, r2, #16
 800686a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800686c:	f7ff fea2 	bl	80065b4 <HAL_GetTick>
 8006870:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006872:	e012      	b.n	800689a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006874:	f7ff fe9e 	bl	80065b4 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b0a      	cmp	r3, #10
 8006880:	d90b      	bls.n	800689a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006886:	f043 0201 	orr.w	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2203      	movs	r2, #3
 8006892:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	e11b      	b.n	8006ad2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	699b      	ldr	r3, [r3, #24]
 80068a0:	f003 0308 	and.w	r3, r3, #8
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d0e5      	beq.n	8006874 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	699a      	ldr	r2, [r3, #24]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f042 0201 	orr.w	r2, r2, #1
 80068b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068b8:	f7ff fe7c 	bl	80065b4 <HAL_GetTick>
 80068bc:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80068be:	e012      	b.n	80068e6 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80068c0:	f7ff fe78 	bl	80065b4 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b0a      	cmp	r3, #10
 80068cc:	d90b      	bls.n	80068e6 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068d2:	f043 0201 	orr.w	r2, r3, #1
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2203      	movs	r2, #3
 80068de:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e0f5      	b.n	8006ad2 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	699b      	ldr	r3, [r3, #24]
 80068ec:	f003 0301 	and.w	r3, r3, #1
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d0e5      	beq.n	80068c0 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	699a      	ldr	r2, [r3, #24]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f042 0202 	orr.w	r2, r2, #2
 8006902:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a74      	ldr	r2, [pc, #464]	; (8006adc <HAL_FDCAN_Init+0x2ac>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d103      	bne.n	8006916 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800690e:	4a74      	ldr	r2, [pc, #464]	; (8006ae0 <HAL_FDCAN_Init+0x2b0>)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	7c1b      	ldrb	r3, [r3, #16]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d108      	bne.n	8006930 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	699a      	ldr	r2, [r3, #24]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800692c:	619a      	str	r2, [r3, #24]
 800692e:	e007      	b.n	8006940 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699a      	ldr	r2, [r3, #24]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800693e:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	7c5b      	ldrb	r3, [r3, #17]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d108      	bne.n	800695a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	699a      	ldr	r2, [r3, #24]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006956:	619a      	str	r2, [r3, #24]
 8006958:	e007      	b.n	800696a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	699a      	ldr	r2, [r3, #24]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006968:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	7c9b      	ldrb	r3, [r3, #18]
 800696e:	2b01      	cmp	r3, #1
 8006970:	d108      	bne.n	8006984 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	699a      	ldr	r2, [r3, #24]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006980:	619a      	str	r2, [r3, #24]
 8006982:	e007      	b.n	8006994 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699a      	ldr	r2, [r3, #24]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006992:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	430a      	orrs	r2, r1
 80069a8:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	699a      	ldr	r2, [r3, #24]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80069b8:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691a      	ldr	r2, [r3, #16]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0210 	bic.w	r2, r2, #16
 80069c8:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d108      	bne.n	80069e4 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	699a      	ldr	r2, [r3, #24]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f042 0204 	orr.w	r2, r2, #4
 80069e0:	619a      	str	r2, [r3, #24]
 80069e2:	e02c      	b.n	8006a3e <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d028      	beq.n	8006a3e <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d01c      	beq.n	8006a2e <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006a02:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	691a      	ldr	r2, [r3, #16]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0210 	orr.w	r2, r2, #16
 8006a12:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68db      	ldr	r3, [r3, #12]
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d110      	bne.n	8006a3e <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699a      	ldr	r2, [r3, #24]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0220 	orr.w	r2, r2, #32
 8006a2a:	619a      	str	r2, [r3, #24]
 8006a2c:	e007      	b.n	8006a3e <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	699a      	ldr	r2, [r3, #24]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f042 0220 	orr.w	r2, r2, #32
 8006a3c:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	3b01      	subs	r3, #1
 8006a44:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a4e:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006a56:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006a66:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006a68:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	689b      	ldr	r3, [r3, #8]
 8006a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a72:	d115      	bne.n	8006aa0 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a78:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a82:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006a8c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	3b01      	subs	r3, #1
 8006a96:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006a9c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006a9e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 fbfc 	bl	80072b4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3710      	adds	r7, #16
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	40006400 	.word	0x40006400
 8006ae0:	40006500 	.word	0x40006500

08006ae4 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b083      	sub	sp, #12
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d110      	bne.n	8006b1a <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2202      	movs	r2, #2
 8006afc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	699a      	ldr	r2, [r3, #24]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 0201 	bic.w	r2, r2, #1
 8006b0e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	e006      	b.n	8006b28 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b1e:	f043 0204 	orr.w	r2, r3, #4
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
  }
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	60f8      	str	r0, [r7, #12]
 8006b3c:	60b9      	str	r1, [r7, #8]
 8006b3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d12c      	bne.n	8006ba6 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d007      	beq.n	8006b6c <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e023      	b.n	8006bb4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8006b74:	0c1b      	lsrs	r3, r3, #16
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	68b9      	ldr	r1, [r7, #8]
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 fbec 	bl	8007360 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2101      	movs	r1, #1
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	fa01 f202 	lsl.w	r2, r1, r2
 8006b94:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006b98:	2201      	movs	r2, #1
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	409a      	lsls	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	e006      	b.n	8006bb4 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006baa:	f043 0208 	orr.w	r2, r3, #8
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
  }
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b08b      	sub	sp, #44	; 0x2c
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
 8006bc8:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006bd4:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8006bd6:	7efb      	ldrb	r3, [r7, #27]
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	f040 80e8 	bne.w	8006dae <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b40      	cmp	r3, #64	; 0x40
 8006be2:	d137      	bne.n	8006c54 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bec:	f003 030f 	and.w	r3, r3, #15
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d107      	bne.n	8006c04 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bf8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e0db      	b.n	8006dbc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0c:	0e1b      	lsrs	r3, r3, #24
 8006c0e:	f003 0301 	and.w	r3, r3, #1
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d10a      	bne.n	8006c2c <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c1e:	0a5b      	lsrs	r3, r3, #9
 8006c20:	f003 0301 	and.w	r3, r3, #1
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d101      	bne.n	8006c2c <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c34:	0a1b      	lsrs	r3, r3, #8
 8006c36:	f003 0303 	and.w	r3, r3, #3
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	4413      	add	r3, r2
 8006c3e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8006c44:	69fa      	ldr	r2, [r7, #28]
 8006c46:	4613      	mov	r3, r2
 8006c48:	00db      	lsls	r3, r3, #3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	440b      	add	r3, r1
 8006c50:	627b      	str	r3, [r7, #36]	; 0x24
 8006c52:	e036      	b.n	8006cc2 <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c5c:	f003 030f 	and.w	r3, r3, #15
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d107      	bne.n	8006c74 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c68:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e0a3      	b.n	8006dbc <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c7c:	0e1b      	lsrs	r3, r3, #24
 8006c7e:	f003 0301 	and.w	r3, r3, #1
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d10a      	bne.n	8006c9c <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c8e:	0a1b      	lsrs	r3, r3, #8
 8006c90:	f003 0301 	and.w	r3, r3, #1
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ca4:	0a1b      	lsrs	r3, r3, #8
 8006ca6:	f003 0303 	and.w	r3, r3, #3
 8006caa:	69fa      	ldr	r2, [r7, #28]
 8006cac:	4413      	add	r3, r2
 8006cae:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006cb4:	69fa      	ldr	r2, [r7, #28]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	00db      	lsls	r3, r3, #3
 8006cba:	4413      	add	r3, r2
 8006cbc:	00db      	lsls	r3, r3, #3
 8006cbe:	440b      	add	r3, r1
 8006cc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d107      	bne.n	8006ce6 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	0c9b      	lsrs	r3, r3, #18
 8006cdc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	601a      	str	r2, [r3, #0]
 8006ce4:	e005      	b.n	8006cf2 <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8006d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	0c1b      	lsrs	r3, r3, #16
 8006d20:	f003 020f 	and.w	r2, r3, #15
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	0e1b      	lsrs	r3, r3, #24
 8006d46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	0fda      	lsrs	r2, r3, #31
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8006d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5a:	3304      	adds	r3, #4
 8006d5c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8006d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d60:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006d62:	2300      	movs	r3, #0
 8006d64:	623b      	str	r3, [r7, #32]
 8006d66:	e00a      	b.n	8006d7e <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	441a      	add	r2, r3
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6a3b      	ldr	r3, [r7, #32]
 8006d72:	440b      	add	r3, r1
 8006d74:	7812      	ldrb	r2, [r2, #0]
 8006d76:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	623b      	str	r3, [r7, #32]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	4a11      	ldr	r2, [pc, #68]	; (8006dc8 <HAL_FDCAN_GetRxMessage+0x20c>)
 8006d84:	5cd3      	ldrb	r3, [r2, r3]
 8006d86:	461a      	mov	r2, r3
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d3ec      	bcc.n	8006d68 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2b40      	cmp	r3, #64	; 0x40
 8006d92:	d105      	bne.n	8006da0 <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69fa      	ldr	r2, [r7, #28]
 8006d9a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8006d9e:	e004      	b.n	8006daa <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	e006      	b.n	8006dbc <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db2:	f043 0208 	orr.w	r2, r3, #8
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
  }
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	372c      	adds	r7, #44	; 0x2c
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr
 8006dc8:	0800b4d4 	.word	0x0800b4d4

08006dcc <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006dde:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b01      	cmp	r3, #1
 8006de4:	d003      	beq.n	8006dee <HAL_FDCAN_ActivateNotification+0x22>
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	f040 80c8 	bne.w	8006f7e <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df4:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f003 0307 	and.w	r3, r3, #7
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d004      	beq.n	8006e0a <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f003 0301 	and.w	r3, r3, #1
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d03b      	beq.n	8006e82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d004      	beq.n	8006e1e <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d031      	beq.n	8006e82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d004      	beq.n	8006e32 <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f003 0304 	and.w	r3, r3, #4
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d027      	beq.n	8006e82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d004      	beq.n	8006e46 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	f003 0308 	and.w	r3, r3, #8
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d01d      	beq.n	8006e82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d004      	beq.n	8006e5a <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	f003 0310 	and.w	r3, r3, #16
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d013      	beq.n	8006e82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f003 0320 	and.w	r3, r3, #32
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d009      	beq.n	8006e82 <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006e6e:	68bb      	ldr	r3, [r7, #8]
 8006e70:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00c      	beq.n	8006e92 <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d107      	bne.n	8006e92 <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f042 0201 	orr.w	r2, r2, #1
 8006e90:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	f003 0307 	and.w	r3, r3, #7
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d004      	beq.n	8006ea6 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f003 0301 	and.w	r3, r3, #1
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d13b      	bne.n	8006f1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f003 0338 	and.w	r3, r3, #56	; 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d004      	beq.n	8006eba <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d131      	bne.n	8006f1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d004      	beq.n	8006ece <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	f003 0304 	and.w	r3, r3, #4
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d127      	bne.n	8006f1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f403 53f0 	and.w	r3, r3, #7680	; 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d004      	beq.n	8006ee2 <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f003 0308 	and.w	r3, r3, #8
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d11d      	bne.n	8006f1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d004      	beq.n	8006ef6 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f003 0310 	and.w	r3, r3, #16
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d113      	bne.n	8006f1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	f003 0320 	and.w	r3, r3, #32
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d109      	bne.n	8006f1e <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	f403 037c 	and.w	r3, r3, #16515072	; 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00c      	beq.n	8006f2e <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d007      	beq.n	8006f2e <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f042 0202 	orr.w	r2, r2, #2
 8006f2c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d009      	beq.n	8006f4c <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f8d3 10dc 	ldr.w	r1, [r3, #220]	; 0xdc
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	430a      	orrs	r2, r1
 8006f48:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d009      	beq.n	8006f6a <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return function status */
    return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e006      	b.n	8006f8c <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f82:	f043 0202 	orr.w	r2, r3, #2
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
  }
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	371c      	adds	r7, #28
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b08c      	sub	sp, #48	; 0x30
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fa6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8006faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fb4:	4013      	ands	r3, r2
 8006fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fcc:	4013      	ands	r3, r2
 8006fce:	62bb      	str	r3, [r7, #40]	; 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006fda:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	627b      	str	r3, [r7, #36]	; 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fee:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8006ff2:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ffa:	6a3a      	ldr	r2, [r7, #32]
 8006ffc:	4013      	ands	r3, r2
 8006ffe:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007006:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800700a:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007012:	69fa      	ldr	r2, [r7, #28]
 8007014:	4013      	ands	r3, r2
 8007016:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701e:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007026:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8007032:	69bb      	ldr	r3, [r7, #24]
 8007034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007038:	2b00      	cmp	r3, #0
 800703a:	d006      	beq.n	800704a <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2240      	movs	r2, #64	; 0x40
 8007042:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f916 	bl	8007276 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007050:	2b00      	cmp	r3, #0
 8007052:	d019      	beq.n	8007088 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007054:	69bb      	ldr	r3, [r7, #24]
 8007056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800705a:	2b00      	cmp	r3, #0
 800705c:	d014      	beq.n	8007088 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007066:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	4013      	ands	r3, r2
 8007074:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800707e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007080:	6939      	ldr	r1, [r7, #16]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f8d8 	bl	8007238 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d007      	beq.n	800709e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007094:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f8a2 	bl	80071e2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d007      	beq.n	80070b4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070aa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80070ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fa febe 	bl	8001e30 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80070b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d007      	beq.n	80070ca <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80070c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f897 	bl	80071f8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00c      	beq.n	80070ee <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d007      	beq.n	80070ee <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070e6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f000 f890 	bl	800720e <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d018      	beq.n	800712a <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d013      	beq.n	800712a <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800710a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	4013      	ands	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2280      	movs	r2, #128	; 0x80
 8007120:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007122:	68f9      	ldr	r1, [r7, #12]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f000 f87c 	bl	8007222 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00c      	beq.n	800714e <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007134:	69bb      	ldr	r3, [r7, #24]
 8007136:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800713a:	2b00      	cmp	r3, #0
 800713c:	d007      	beq.n	800714e <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007146:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f880 	bl	800724e <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00c      	beq.n	8007172 <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007158:	69bb      	ldr	r3, [r7, #24]
 800715a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800715e:	2b00      	cmp	r3, #0
 8007160:	d007      	beq.n	8007172 <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800716a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f878 	bl	8007262 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007178:	2b00      	cmp	r3, #0
 800717a:	d00f      	beq.n	800719c <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d00a      	beq.n	800719c <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800718e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007194:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800719c:	69fb      	ldr	r3, [r7, #28]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d007      	beq.n	80071b2 <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	69fa      	ldr	r2, [r7, #28]
 80071a8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80071aa:	69f9      	ldr	r1, [r7, #28]
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f000 f876 	bl	800729e <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80071b2:	6a3b      	ldr	r3, [r7, #32]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d009      	beq.n	80071cc <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	6a3a      	ldr	r2, [r7, #32]
 80071be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80071c4:	6a3b      	ldr	r3, [r7, #32]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f000 f858 	bl	800728a <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80071da:	bf00      	nop
 80071dc:	3730      	adds	r7, #48	; 0x30
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80071e2:	b480      	push	{r7}
 80071e4:	b083      	sub	sp, #12
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	6078      	str	r0, [r7, #4]
 80071ea:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007202:	bf00      	nop
 8007204:	370c      	adds	r7, #12
 8007206:	46bd      	mov	sp, r7
 8007208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720c:	4770      	bx	lr

0800720e <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800720e:	b480      	push	{r7}
 8007210:	b083      	sub	sp, #12
 8007212:	af00      	add	r7, sp, #0
 8007214:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr

08007222 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007222:	b480      	push	{r7}
 8007224:	b083      	sub	sp, #12
 8007226:	af00      	add	r7, sp, #0
 8007228:	6078      	str	r0, [r7, #4]
 800722a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007242:	bf00      	nop
 8007244:	370c      	adds	r7, #12
 8007246:	46bd      	mov	sp, r7
 8007248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724c:	4770      	bx	lr

0800724e <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800724e:	b480      	push	{r7}
 8007250:	b083      	sub	sp, #12
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007262:	b480      	push	{r7}
 8007264:	b083      	sub	sp, #12
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr

08007276 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007276:	b480      	push	{r7}
 8007278:	b083      	sub	sp, #12
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800727e:	bf00      	nop
 8007280:	370c      	adds	r7, #12
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr

0800728a <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800728a:	b480      	push	{r7}
 800728c:	b083      	sub	sp, #12
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800729e:	b480      	push	{r7}
 80072a0:	b083      	sub	sp, #12
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80072bc:	4b27      	ldr	r3, [pc, #156]	; (800735c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80072be:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68ba      	ldr	r2, [r7, #8]
 80072c4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072ce:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d6:	041a      	lsls	r2, r3, #16
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072f4:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072fc:	061a      	lsls	r2, r3, #24
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	f503 721e 	add.w	r2, r3, #632	; 0x278
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	60fb      	str	r3, [r7, #12]
 8007334:	e005      	b.n	8007342 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	3304      	adds	r3, #4
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	429a      	cmp	r2, r3
 800734c:	d3f3      	bcc.n	8007336 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800734e:	bf00      	nop
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr
 800735c:	4000a400 	.word	0x4000a400

08007360 <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 8007360:	b480      	push	{r7}
 8007362:	b089      	sub	sp, #36	; 0x24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800737e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007386:	4313      	orrs	r3, r2
 8007388:	61fb      	str	r3, [r7, #28]
 800738a:	e00a      	b.n	80073a2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007394:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800739a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800739c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073a0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80073ac:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80073b2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80073b8:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	68db      	ldr	r3, [r3, #12]
 80073be:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80073c0:	4313      	orrs	r3, r2
 80073c2:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80073c8:	683a      	ldr	r2, [r7, #0]
 80073ca:	4613      	mov	r3, r2
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	4413      	add	r3, r2
 80073d0:	00db      	lsls	r3, r3, #3
 80073d2:	440b      	add	r3, r1
 80073d4:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80073d6:	69bb      	ldr	r3, [r7, #24]
 80073d8:	69fa      	ldr	r2, [r7, #28]
 80073da:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80073dc:	69bb      	ldr	r3, [r7, #24]
 80073de:	3304      	adds	r3, #4
 80073e0:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80073e8:	69bb      	ldr	r3, [r7, #24]
 80073ea:	3304      	adds	r3, #4
 80073ec:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80073ee:	2300      	movs	r3, #0
 80073f0:	617b      	str	r3, [r7, #20]
 80073f2:	e020      	b.n	8007436 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	3303      	adds	r3, #3
 80073f8:	687a      	ldr	r2, [r7, #4]
 80073fa:	4413      	add	r3, r2
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	3302      	adds	r3, #2
 8007404:	6879      	ldr	r1, [r7, #4]
 8007406:	440b      	add	r3, r1
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800740c:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	3301      	adds	r3, #1
 8007412:	6879      	ldr	r1, [r7, #4]
 8007414:	440b      	add	r3, r1
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800741a:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	440a      	add	r2, r1
 8007422:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8007424:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	3304      	adds	r3, #4
 800742e:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	3304      	adds	r3, #4
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	68db      	ldr	r3, [r3, #12]
 800743a:	4a06      	ldr	r2, [pc, #24]	; (8007454 <FDCAN_CopyMessageToRAM+0xf4>)
 800743c:	5cd3      	ldrb	r3, [r2, r3]
 800743e:	461a      	mov	r2, r3
 8007440:	697b      	ldr	r3, [r7, #20]
 8007442:	4293      	cmp	r3, r2
 8007444:	d3d6      	bcc.n	80073f4 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8007446:	bf00      	nop
 8007448:	bf00      	nop
 800744a:	3724      	adds	r7, #36	; 0x24
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr
 8007454:	0800b4d4 	.word	0x0800b4d4

08007458 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007462:	2300      	movs	r3, #0
 8007464:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007466:	e15a      	b.n	800771e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	2101      	movs	r1, #1
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	fa01 f303 	lsl.w	r3, r1, r3
 8007474:	4013      	ands	r3, r2
 8007476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 814c 	beq.w	8007718 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	f003 0303 	and.w	r3, r3, #3
 8007488:	2b01      	cmp	r3, #1
 800748a:	d005      	beq.n	8007498 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	685b      	ldr	r3, [r3, #4]
 8007490:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007494:	2b02      	cmp	r3, #2
 8007496:	d130      	bne.n	80074fa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	005b      	lsls	r3, r3, #1
 80074a2:	2203      	movs	r2, #3
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	43db      	mvns	r3, r3
 80074aa:	693a      	ldr	r2, [r7, #16]
 80074ac:	4013      	ands	r3, r2
 80074ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	005b      	lsls	r3, r3, #1
 80074b8:	fa02 f303 	lsl.w	r3, r2, r3
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	4313      	orrs	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80074ce:	2201      	movs	r2, #1
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	fa02 f303 	lsl.w	r3, r2, r3
 80074d6:	43db      	mvns	r3, r3
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4013      	ands	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	091b      	lsrs	r3, r3, #4
 80074e4:	f003 0201 	and.w	r2, r3, #1
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	fa02 f303 	lsl.w	r3, r2, r3
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	f003 0303 	and.w	r3, r3, #3
 8007502:	2b03      	cmp	r3, #3
 8007504:	d017      	beq.n	8007536 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	2203      	movs	r2, #3
 8007512:	fa02 f303 	lsl.w	r3, r2, r3
 8007516:	43db      	mvns	r3, r3
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	4013      	ands	r3, r2
 800751c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	005b      	lsls	r3, r3, #1
 8007526:	fa02 f303 	lsl.w	r3, r2, r3
 800752a:	693a      	ldr	r2, [r7, #16]
 800752c:	4313      	orrs	r3, r2
 800752e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	693a      	ldr	r2, [r7, #16]
 8007534:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	2b02      	cmp	r3, #2
 8007540:	d123      	bne.n	800758a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	08da      	lsrs	r2, r3, #3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	3208      	adds	r2, #8
 800754a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800754e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	f003 0307 	and.w	r3, r3, #7
 8007556:	009b      	lsls	r3, r3, #2
 8007558:	220f      	movs	r2, #15
 800755a:	fa02 f303 	lsl.w	r3, r2, r3
 800755e:	43db      	mvns	r3, r3
 8007560:	693a      	ldr	r2, [r7, #16]
 8007562:	4013      	ands	r3, r2
 8007564:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	691a      	ldr	r2, [r3, #16]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f003 0307 	and.w	r3, r3, #7
 8007570:	009b      	lsls	r3, r3, #2
 8007572:	fa02 f303 	lsl.w	r3, r2, r3
 8007576:	693a      	ldr	r2, [r7, #16]
 8007578:	4313      	orrs	r3, r2
 800757a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	08da      	lsrs	r2, r3, #3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	3208      	adds	r2, #8
 8007584:	6939      	ldr	r1, [r7, #16]
 8007586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	005b      	lsls	r3, r3, #1
 8007594:	2203      	movs	r2, #3
 8007596:	fa02 f303 	lsl.w	r3, r2, r3
 800759a:	43db      	mvns	r3, r3
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	4013      	ands	r3, r2
 80075a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f003 0203 	and.w	r2, r3, #3
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	fa02 f303 	lsl.w	r3, r2, r3
 80075b2:	693a      	ldr	r2, [r7, #16]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f000 80a6 	beq.w	8007718 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075cc:	4b5b      	ldr	r3, [pc, #364]	; (800773c <HAL_GPIO_Init+0x2e4>)
 80075ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075d0:	4a5a      	ldr	r2, [pc, #360]	; (800773c <HAL_GPIO_Init+0x2e4>)
 80075d2:	f043 0301 	orr.w	r3, r3, #1
 80075d6:	6613      	str	r3, [r2, #96]	; 0x60
 80075d8:	4b58      	ldr	r3, [pc, #352]	; (800773c <HAL_GPIO_Init+0x2e4>)
 80075da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	60bb      	str	r3, [r7, #8]
 80075e2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075e4:	4a56      	ldr	r2, [pc, #344]	; (8007740 <HAL_GPIO_Init+0x2e8>)
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	089b      	lsrs	r3, r3, #2
 80075ea:	3302      	adds	r3, #2
 80075ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	f003 0303 	and.w	r3, r3, #3
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	220f      	movs	r2, #15
 80075fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007600:	43db      	mvns	r3, r3
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	4013      	ands	r3, r2
 8007606:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800760e:	d01f      	beq.n	8007650 <HAL_GPIO_Init+0x1f8>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	4a4c      	ldr	r2, [pc, #304]	; (8007744 <HAL_GPIO_Init+0x2ec>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d019      	beq.n	800764c <HAL_GPIO_Init+0x1f4>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a4b      	ldr	r2, [pc, #300]	; (8007748 <HAL_GPIO_Init+0x2f0>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d013      	beq.n	8007648 <HAL_GPIO_Init+0x1f0>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a4a      	ldr	r2, [pc, #296]	; (800774c <HAL_GPIO_Init+0x2f4>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00d      	beq.n	8007644 <HAL_GPIO_Init+0x1ec>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a49      	ldr	r2, [pc, #292]	; (8007750 <HAL_GPIO_Init+0x2f8>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d007      	beq.n	8007640 <HAL_GPIO_Init+0x1e8>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a48      	ldr	r2, [pc, #288]	; (8007754 <HAL_GPIO_Init+0x2fc>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d101      	bne.n	800763c <HAL_GPIO_Init+0x1e4>
 8007638:	2305      	movs	r3, #5
 800763a:	e00a      	b.n	8007652 <HAL_GPIO_Init+0x1fa>
 800763c:	2306      	movs	r3, #6
 800763e:	e008      	b.n	8007652 <HAL_GPIO_Init+0x1fa>
 8007640:	2304      	movs	r3, #4
 8007642:	e006      	b.n	8007652 <HAL_GPIO_Init+0x1fa>
 8007644:	2303      	movs	r3, #3
 8007646:	e004      	b.n	8007652 <HAL_GPIO_Init+0x1fa>
 8007648:	2302      	movs	r3, #2
 800764a:	e002      	b.n	8007652 <HAL_GPIO_Init+0x1fa>
 800764c:	2301      	movs	r3, #1
 800764e:	e000      	b.n	8007652 <HAL_GPIO_Init+0x1fa>
 8007650:	2300      	movs	r3, #0
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	f002 0203 	and.w	r2, r2, #3
 8007658:	0092      	lsls	r2, r2, #2
 800765a:	4093      	lsls	r3, r2
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	4313      	orrs	r3, r2
 8007660:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007662:	4937      	ldr	r1, [pc, #220]	; (8007740 <HAL_GPIO_Init+0x2e8>)
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	089b      	lsrs	r3, r3, #2
 8007668:	3302      	adds	r3, #2
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007670:	4b39      	ldr	r3, [pc, #228]	; (8007758 <HAL_GPIO_Init+0x300>)
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	43db      	mvns	r3, r3
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	4013      	ands	r3, r2
 800767e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007694:	4a30      	ldr	r2, [pc, #192]	; (8007758 <HAL_GPIO_Init+0x300>)
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800769a:	4b2f      	ldr	r3, [pc, #188]	; (8007758 <HAL_GPIO_Init+0x300>)
 800769c:	68db      	ldr	r3, [r3, #12]
 800769e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	43db      	mvns	r3, r3
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4013      	ands	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80076be:	4a26      	ldr	r2, [pc, #152]	; (8007758 <HAL_GPIO_Init+0x300>)
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80076c4:	4b24      	ldr	r3, [pc, #144]	; (8007758 <HAL_GPIO_Init+0x300>)
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	43db      	mvns	r3, r3
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	4013      	ands	r3, r2
 80076d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80076e8:	4a1b      	ldr	r2, [pc, #108]	; (8007758 <HAL_GPIO_Init+0x300>)
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80076ee:	4b1a      	ldr	r3, [pc, #104]	; (8007758 <HAL_GPIO_Init+0x300>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	43db      	mvns	r3, r3
 80076f8:	693a      	ldr	r2, [r7, #16]
 80076fa:	4013      	ands	r3, r2
 80076fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80076fe:	683b      	ldr	r3, [r7, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800770a:	693a      	ldr	r2, [r7, #16]
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	4313      	orrs	r3, r2
 8007710:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007712:	4a11      	ldr	r2, [pc, #68]	; (8007758 <HAL_GPIO_Init+0x300>)
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	3301      	adds	r3, #1
 800771c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	fa22 f303 	lsr.w	r3, r2, r3
 8007728:	2b00      	cmp	r3, #0
 800772a:	f47f ae9d 	bne.w	8007468 <HAL_GPIO_Init+0x10>
  }
}
 800772e:	bf00      	nop
 8007730:	bf00      	nop
 8007732:	371c      	adds	r7, #28
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr
 800773c:	40021000 	.word	0x40021000
 8007740:	40010000 	.word	0x40010000
 8007744:	48000400 	.word	0x48000400
 8007748:	48000800 	.word	0x48000800
 800774c:	48000c00 	.word	0x48000c00
 8007750:	48001000 	.word	0x48001000
 8007754:	48001400 	.word	0x48001400
 8007758:	40010400 	.word	0x40010400

0800775c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800775c:	b480      	push	{r7}
 800775e:	b085      	sub	sp, #20
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	691a      	ldr	r2, [r3, #16]
 800776c:	887b      	ldrh	r3, [r7, #2]
 800776e:	4013      	ands	r3, r2
 8007770:	2b00      	cmp	r3, #0
 8007772:	d002      	beq.n	800777a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007774:	2301      	movs	r3, #1
 8007776:	73fb      	strb	r3, [r7, #15]
 8007778:	e001      	b.n	800777e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800777a:	2300      	movs	r3, #0
 800777c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800777e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007780:	4618      	mov	r0, r3
 8007782:	3714      	adds	r7, #20
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	807b      	strh	r3, [r7, #2]
 8007798:	4613      	mov	r3, r2
 800779a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800779c:	787b      	ldrb	r3, [r7, #1]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d003      	beq.n	80077aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80077a2:	887a      	ldrh	r2, [r7, #2]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80077a8:	e002      	b.n	80077b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80077aa:	887a      	ldrh	r2, [r7, #2]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80077b0:	bf00      	nop
 80077b2:	370c      	adds	r7, #12
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	695b      	ldr	r3, [r3, #20]
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80077ce:	887a      	ldrh	r2, [r7, #2]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	4013      	ands	r3, r2
 80077d4:	041a      	lsls	r2, r3, #16
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	43d9      	mvns	r1, r3
 80077da:	887b      	ldrh	r3, [r7, #2]
 80077dc:	400b      	ands	r3, r1
 80077de:	431a      	orrs	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	619a      	str	r2, [r3, #24]
}
 80077e4:	bf00      	nop
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b085      	sub	sp, #20
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d141      	bne.n	8007882 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80077fe:	4b4b      	ldr	r3, [pc, #300]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800780a:	d131      	bne.n	8007870 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800780c:	4b47      	ldr	r3, [pc, #284]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800780e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007812:	4a46      	ldr	r2, [pc, #280]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007814:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007818:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800781c:	4b43      	ldr	r3, [pc, #268]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007824:	4a41      	ldr	r2, [pc, #260]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007826:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800782a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800782c:	4b40      	ldr	r3, [pc, #256]	; (8007930 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	2232      	movs	r2, #50	; 0x32
 8007832:	fb02 f303 	mul.w	r3, r2, r3
 8007836:	4a3f      	ldr	r2, [pc, #252]	; (8007934 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007838:	fba2 2303 	umull	r2, r3, r2, r3
 800783c:	0c9b      	lsrs	r3, r3, #18
 800783e:	3301      	adds	r3, #1
 8007840:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007842:	e002      	b.n	800784a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	3b01      	subs	r3, #1
 8007848:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800784a:	4b38      	ldr	r3, [pc, #224]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800784c:	695b      	ldr	r3, [r3, #20]
 800784e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007856:	d102      	bne.n	800785e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1f2      	bne.n	8007844 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800785e:	4b33      	ldr	r3, [pc, #204]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007860:	695b      	ldr	r3, [r3, #20]
 8007862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800786a:	d158      	bne.n	800791e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e057      	b.n	8007920 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007870:	4b2e      	ldr	r3, [pc, #184]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007872:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007876:	4a2d      	ldr	r2, [pc, #180]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800787c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007880:	e04d      	b.n	800791e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007888:	d141      	bne.n	800790e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800788a:	4b28      	ldr	r3, [pc, #160]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007896:	d131      	bne.n	80078fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007898:	4b24      	ldr	r3, [pc, #144]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800789a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800789e:	4a23      	ldr	r2, [pc, #140]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80078a8:	4b20      	ldr	r3, [pc, #128]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80078b0:	4a1e      	ldr	r2, [pc, #120]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80078b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80078b8:	4b1d      	ldr	r3, [pc, #116]	; (8007930 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2232      	movs	r2, #50	; 0x32
 80078be:	fb02 f303 	mul.w	r3, r2, r3
 80078c2:	4a1c      	ldr	r2, [pc, #112]	; (8007934 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80078c4:	fba2 2303 	umull	r2, r3, r2, r3
 80078c8:	0c9b      	lsrs	r3, r3, #18
 80078ca:	3301      	adds	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078ce:	e002      	b.n	80078d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	3b01      	subs	r3, #1
 80078d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80078d6:	4b15      	ldr	r3, [pc, #84]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078d8:	695b      	ldr	r3, [r3, #20]
 80078da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e2:	d102      	bne.n	80078ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1f2      	bne.n	80078d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80078ea:	4b10      	ldr	r3, [pc, #64]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078ec:	695b      	ldr	r3, [r3, #20]
 80078ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078f6:	d112      	bne.n	800791e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80078f8:	2303      	movs	r3, #3
 80078fa:	e011      	b.n	8007920 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80078fc:	4b0b      	ldr	r3, [pc, #44]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80078fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007902:	4a0a      	ldr	r2, [pc, #40]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007908:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800790c:	e007      	b.n	800791e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800790e:	4b07      	ldr	r3, [pc, #28]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007916:	4a05      	ldr	r2, [pc, #20]	; (800792c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007918:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800791c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3714      	adds	r7, #20
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	40007000 	.word	0x40007000
 8007930:	20000000 	.word	0x20000000
 8007934:	431bde83 	.word	0x431bde83

08007938 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007938:	b480      	push	{r7}
 800793a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800793c:	4b05      	ldr	r3, [pc, #20]	; (8007954 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	4a04      	ldr	r2, [pc, #16]	; (8007954 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007942:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007946:	6093      	str	r3, [r2, #8]
}
 8007948:	bf00      	nop
 800794a:	46bd      	mov	sp, r7
 800794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	40007000 	.word	0x40007000

08007958 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e2fe      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	2b00      	cmp	r3, #0
 8007974:	d075      	beq.n	8007a62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007976:	4b97      	ldr	r3, [pc, #604]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f003 030c 	and.w	r3, r3, #12
 800797e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007980:	4b94      	ldr	r3, [pc, #592]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f003 0303 	and.w	r3, r3, #3
 8007988:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	2b0c      	cmp	r3, #12
 800798e:	d102      	bne.n	8007996 <HAL_RCC_OscConfig+0x3e>
 8007990:	697b      	ldr	r3, [r7, #20]
 8007992:	2b03      	cmp	r3, #3
 8007994:	d002      	beq.n	800799c <HAL_RCC_OscConfig+0x44>
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b08      	cmp	r3, #8
 800799a:	d10b      	bne.n	80079b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800799c:	4b8d      	ldr	r3, [pc, #564]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d05b      	beq.n	8007a60 <HAL_RCC_OscConfig+0x108>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	685b      	ldr	r3, [r3, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d157      	bne.n	8007a60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e2d9      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079bc:	d106      	bne.n	80079cc <HAL_RCC_OscConfig+0x74>
 80079be:	4b85      	ldr	r3, [pc, #532]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a84      	ldr	r2, [pc, #528]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079c8:	6013      	str	r3, [r2, #0]
 80079ca:	e01d      	b.n	8007a08 <HAL_RCC_OscConfig+0xb0>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079d4:	d10c      	bne.n	80079f0 <HAL_RCC_OscConfig+0x98>
 80079d6:	4b7f      	ldr	r3, [pc, #508]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a7e      	ldr	r2, [pc, #504]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079e0:	6013      	str	r3, [r2, #0]
 80079e2:	4b7c      	ldr	r3, [pc, #496]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a7b      	ldr	r2, [pc, #492]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ec:	6013      	str	r3, [r2, #0]
 80079ee:	e00b      	b.n	8007a08 <HAL_RCC_OscConfig+0xb0>
 80079f0:	4b78      	ldr	r3, [pc, #480]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a77      	ldr	r2, [pc, #476]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	4b75      	ldr	r3, [pc, #468]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4a74      	ldr	r2, [pc, #464]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d013      	beq.n	8007a38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a10:	f7fe fdd0 	bl	80065b4 <HAL_GetTick>
 8007a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a16:	e008      	b.n	8007a2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a18:	f7fe fdcc 	bl	80065b4 <HAL_GetTick>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	2b64      	cmp	r3, #100	; 0x64
 8007a24:	d901      	bls.n	8007a2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007a26:	2303      	movs	r3, #3
 8007a28:	e29e      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a2a:	4b6a      	ldr	r3, [pc, #424]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d0f0      	beq.n	8007a18 <HAL_RCC_OscConfig+0xc0>
 8007a36:	e014      	b.n	8007a62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a38:	f7fe fdbc 	bl	80065b4 <HAL_GetTick>
 8007a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a3e:	e008      	b.n	8007a52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a40:	f7fe fdb8 	bl	80065b4 <HAL_GetTick>
 8007a44:	4602      	mov	r2, r0
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	1ad3      	subs	r3, r2, r3
 8007a4a:	2b64      	cmp	r3, #100	; 0x64
 8007a4c:	d901      	bls.n	8007a52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a4e:	2303      	movs	r3, #3
 8007a50:	e28a      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a52:	4b60      	ldr	r3, [pc, #384]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1f0      	bne.n	8007a40 <HAL_RCC_OscConfig+0xe8>
 8007a5e:	e000      	b.n	8007a62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d075      	beq.n	8007b5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a6e:	4b59      	ldr	r3, [pc, #356]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	f003 030c 	and.w	r3, r3, #12
 8007a76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007a78:	4b56      	ldr	r3, [pc, #344]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	f003 0303 	and.w	r3, r3, #3
 8007a80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b0c      	cmp	r3, #12
 8007a86:	d102      	bne.n	8007a8e <HAL_RCC_OscConfig+0x136>
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d002      	beq.n	8007a94 <HAL_RCC_OscConfig+0x13c>
 8007a8e:	69bb      	ldr	r3, [r7, #24]
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d11f      	bne.n	8007ad4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a94:	4b4f      	ldr	r3, [pc, #316]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <HAL_RCC_OscConfig+0x154>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e25d      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aac:	4b49      	ldr	r3, [pc, #292]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	691b      	ldr	r3, [r3, #16]
 8007ab8:	061b      	lsls	r3, r3, #24
 8007aba:	4946      	ldr	r1, [pc, #280]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007abc:	4313      	orrs	r3, r2
 8007abe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007ac0:	4b45      	ldr	r3, [pc, #276]	; (8007bd8 <HAL_RCC_OscConfig+0x280>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fe fd29 	bl	800651c <HAL_InitTick>
 8007aca:	4603      	mov	r3, r0
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d043      	beq.n	8007b58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e249      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d023      	beq.n	8007b24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007adc:	4b3d      	ldr	r3, [pc, #244]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a3c      	ldr	r2, [pc, #240]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae8:	f7fe fd64 	bl	80065b4 <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007aee:	e008      	b.n	8007b02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007af0:	f7fe fd60 	bl	80065b4 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e232      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b02:	4b34      	ldr	r3, [pc, #208]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d0f0      	beq.n	8007af0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b0e:	4b31      	ldr	r3, [pc, #196]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	061b      	lsls	r3, r3, #24
 8007b1c:	492d      	ldr	r1, [pc, #180]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	604b      	str	r3, [r1, #4]
 8007b22:	e01a      	b.n	8007b5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b24:	4b2b      	ldr	r3, [pc, #172]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a2a      	ldr	r2, [pc, #168]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b30:	f7fe fd40 	bl	80065b4 <HAL_GetTick>
 8007b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b38:	f7fe fd3c 	bl	80065b4 <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e20e      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b4a:	4b22      	ldr	r3, [pc, #136]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1f0      	bne.n	8007b38 <HAL_RCC_OscConfig+0x1e0>
 8007b56:	e000      	b.n	8007b5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d041      	beq.n	8007bea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d01c      	beq.n	8007ba8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b6e:	4b19      	ldr	r3, [pc, #100]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b74:	4a17      	ldr	r2, [pc, #92]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b76:	f043 0301 	orr.w	r3, r3, #1
 8007b7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b7e:	f7fe fd19 	bl	80065b4 <HAL_GetTick>
 8007b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b84:	e008      	b.n	8007b98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b86:	f7fe fd15 	bl	80065b4 <HAL_GetTick>
 8007b8a:	4602      	mov	r2, r0
 8007b8c:	693b      	ldr	r3, [r7, #16]
 8007b8e:	1ad3      	subs	r3, r2, r3
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d901      	bls.n	8007b98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e1e7      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b98:	4b0e      	ldr	r3, [pc, #56]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d0ef      	beq.n	8007b86 <HAL_RCC_OscConfig+0x22e>
 8007ba6:	e020      	b.n	8007bea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007baa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bae:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <HAL_RCC_OscConfig+0x27c>)
 8007bb0:	f023 0301 	bic.w	r3, r3, #1
 8007bb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb8:	f7fe fcfc 	bl	80065b4 <HAL_GetTick>
 8007bbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bbe:	e00d      	b.n	8007bdc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bc0:	f7fe fcf8 	bl	80065b4 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d906      	bls.n	8007bdc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e1ca      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
 8007bd2:	bf00      	nop
 8007bd4:	40021000 	.word	0x40021000
 8007bd8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bdc:	4b8c      	ldr	r3, [pc, #560]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007be2:	f003 0302 	and.w	r3, r3, #2
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d1ea      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0304 	and.w	r3, r3, #4
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	f000 80a6 	beq.w	8007d44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007bfc:	4b84      	ldr	r3, [pc, #528]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d101      	bne.n	8007c0c <HAL_RCC_OscConfig+0x2b4>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	e000      	b.n	8007c0e <HAL_RCC_OscConfig+0x2b6>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00d      	beq.n	8007c2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c12:	4b7f      	ldr	r3, [pc, #508]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c16:	4a7e      	ldr	r2, [pc, #504]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c1c:	6593      	str	r3, [r2, #88]	; 0x58
 8007c1e:	4b7c      	ldr	r3, [pc, #496]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c26:	60fb      	str	r3, [r7, #12]
 8007c28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c2e:	4b79      	ldr	r3, [pc, #484]	; (8007e14 <HAL_RCC_OscConfig+0x4bc>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d118      	bne.n	8007c6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c3a:	4b76      	ldr	r3, [pc, #472]	; (8007e14 <HAL_RCC_OscConfig+0x4bc>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a75      	ldr	r2, [pc, #468]	; (8007e14 <HAL_RCC_OscConfig+0x4bc>)
 8007c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c46:	f7fe fcb5 	bl	80065b4 <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c4c:	e008      	b.n	8007c60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c4e:	f7fe fcb1 	bl	80065b4 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e183      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c60:	4b6c      	ldr	r3, [pc, #432]	; (8007e14 <HAL_RCC_OscConfig+0x4bc>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0f0      	beq.n	8007c4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d108      	bne.n	8007c86 <HAL_RCC_OscConfig+0x32e>
 8007c74:	4b66      	ldr	r3, [pc, #408]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7a:	4a65      	ldr	r2, [pc, #404]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c7c:	f043 0301 	orr.w	r3, r3, #1
 8007c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c84:	e024      	b.n	8007cd0 <HAL_RCC_OscConfig+0x378>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	689b      	ldr	r3, [r3, #8]
 8007c8a:	2b05      	cmp	r3, #5
 8007c8c:	d110      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x358>
 8007c8e:	4b60      	ldr	r3, [pc, #384]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c94:	4a5e      	ldr	r2, [pc, #376]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007c96:	f043 0304 	orr.w	r3, r3, #4
 8007c9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c9e:	4b5c      	ldr	r3, [pc, #368]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca4:	4a5a      	ldr	r2, [pc, #360]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007ca6:	f043 0301 	orr.w	r3, r3, #1
 8007caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cae:	e00f      	b.n	8007cd0 <HAL_RCC_OscConfig+0x378>
 8007cb0:	4b57      	ldr	r3, [pc, #348]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb6:	4a56      	ldr	r2, [pc, #344]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007cb8:	f023 0301 	bic.w	r3, r3, #1
 8007cbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cc0:	4b53      	ldr	r3, [pc, #332]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc6:	4a52      	ldr	r2, [pc, #328]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007cc8:	f023 0304 	bic.w	r3, r3, #4
 8007ccc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d016      	beq.n	8007d06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cd8:	f7fe fc6c 	bl	80065b4 <HAL_GetTick>
 8007cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cde:	e00a      	b.n	8007cf6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ce0:	f7fe fc68 	bl	80065b4 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cee:	4293      	cmp	r3, r2
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e138      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cf6:	4b46      	ldr	r3, [pc, #280]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d0ed      	beq.n	8007ce0 <HAL_RCC_OscConfig+0x388>
 8007d04:	e015      	b.n	8007d32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d06:	f7fe fc55 	bl	80065b4 <HAL_GetTick>
 8007d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d0c:	e00a      	b.n	8007d24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d0e:	f7fe fc51 	bl	80065b4 <HAL_GetTick>
 8007d12:	4602      	mov	r2, r0
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	1ad3      	subs	r3, r2, r3
 8007d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d901      	bls.n	8007d24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e121      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d24:	4b3a      	ldr	r3, [pc, #232]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1ed      	bne.n	8007d0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d32:	7ffb      	ldrb	r3, [r7, #31]
 8007d34:	2b01      	cmp	r3, #1
 8007d36:	d105      	bne.n	8007d44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d38:	4b35      	ldr	r3, [pc, #212]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d3c:	4a34      	ldr	r2, [pc, #208]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0320 	and.w	r3, r3, #32
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d03c      	beq.n	8007dca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d01c      	beq.n	8007d92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d58:	4b2d      	ldr	r3, [pc, #180]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d5e:	4a2c      	ldr	r2, [pc, #176]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d60:	f043 0301 	orr.w	r3, r3, #1
 8007d64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d68:	f7fe fc24 	bl	80065b4 <HAL_GetTick>
 8007d6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d6e:	e008      	b.n	8007d82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d70:	f7fe fc20 	bl	80065b4 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d901      	bls.n	8007d82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e0f2      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d82:	4b23      	ldr	r3, [pc, #140]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d88:	f003 0302 	and.w	r3, r3, #2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d0ef      	beq.n	8007d70 <HAL_RCC_OscConfig+0x418>
 8007d90:	e01b      	b.n	8007dca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d92:	4b1f      	ldr	r3, [pc, #124]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d98:	4a1d      	ldr	r2, [pc, #116]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007d9a:	f023 0301 	bic.w	r3, r3, #1
 8007d9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da2:	f7fe fc07 	bl	80065b4 <HAL_GetTick>
 8007da6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007da8:	e008      	b.n	8007dbc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007daa:	f7fe fc03 	bl	80065b4 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d901      	bls.n	8007dbc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	e0d5      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007dbc:	4b14      	ldr	r3, [pc, #80]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007dbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dc2:	f003 0302 	and.w	r3, r3, #2
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1ef      	bne.n	8007daa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	69db      	ldr	r3, [r3, #28]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 80c9 	beq.w	8007f66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007dd4:	4b0e      	ldr	r3, [pc, #56]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007dd6:	689b      	ldr	r3, [r3, #8]
 8007dd8:	f003 030c 	and.w	r3, r3, #12
 8007ddc:	2b0c      	cmp	r3, #12
 8007dde:	f000 8083 	beq.w	8007ee8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	2b02      	cmp	r3, #2
 8007de8:	d15e      	bne.n	8007ea8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dea:	4b09      	ldr	r3, [pc, #36]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a08      	ldr	r2, [pc, #32]	; (8007e10 <HAL_RCC_OscConfig+0x4b8>)
 8007df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df6:	f7fe fbdd 	bl	80065b4 <HAL_GetTick>
 8007dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dfc:	e00c      	b.n	8007e18 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dfe:	f7fe fbd9 	bl	80065b4 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d905      	bls.n	8007e18 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e0ab      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
 8007e10:	40021000 	.word	0x40021000
 8007e14:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e18:	4b55      	ldr	r3, [pc, #340]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1ec      	bne.n	8007dfe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e24:	4b52      	ldr	r3, [pc, #328]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	4b52      	ldr	r3, [pc, #328]	; (8007f74 <HAL_RCC_OscConfig+0x61c>)
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	687a      	ldr	r2, [r7, #4]
 8007e2e:	6a11      	ldr	r1, [r2, #32]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e34:	3a01      	subs	r2, #1
 8007e36:	0112      	lsls	r2, r2, #4
 8007e38:	4311      	orrs	r1, r2
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8007e3e:	0212      	lsls	r2, r2, #8
 8007e40:	4311      	orrs	r1, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007e46:	0852      	lsrs	r2, r2, #1
 8007e48:	3a01      	subs	r2, #1
 8007e4a:	0552      	lsls	r2, r2, #21
 8007e4c:	4311      	orrs	r1, r2
 8007e4e:	687a      	ldr	r2, [r7, #4]
 8007e50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007e52:	0852      	lsrs	r2, r2, #1
 8007e54:	3a01      	subs	r2, #1
 8007e56:	0652      	lsls	r2, r2, #25
 8007e58:	4311      	orrs	r1, r2
 8007e5a:	687a      	ldr	r2, [r7, #4]
 8007e5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e5e:	06d2      	lsls	r2, r2, #27
 8007e60:	430a      	orrs	r2, r1
 8007e62:	4943      	ldr	r1, [pc, #268]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e68:	4b41      	ldr	r3, [pc, #260]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a40      	ldr	r2, [pc, #256]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007e6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007e74:	4b3e      	ldr	r3, [pc, #248]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	4a3d      	ldr	r2, [pc, #244]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007e7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e80:	f7fe fb98 	bl	80065b4 <HAL_GetTick>
 8007e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e86:	e008      	b.n	8007e9a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e88:	f7fe fb94 	bl	80065b4 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	2b02      	cmp	r3, #2
 8007e94:	d901      	bls.n	8007e9a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007e96:	2303      	movs	r3, #3
 8007e98:	e066      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007e9a:	4b35      	ldr	r3, [pc, #212]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d0f0      	beq.n	8007e88 <HAL_RCC_OscConfig+0x530>
 8007ea6:	e05e      	b.n	8007f66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ea8:	4b31      	ldr	r3, [pc, #196]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a30      	ldr	r2, [pc, #192]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eb4:	f7fe fb7e 	bl	80065b4 <HAL_GetTick>
 8007eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007eba:	e008      	b.n	8007ece <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ebc:	f7fe fb7a 	bl	80065b4 <HAL_GetTick>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	1ad3      	subs	r3, r2, r3
 8007ec6:	2b02      	cmp	r3, #2
 8007ec8:	d901      	bls.n	8007ece <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8007eca:	2303      	movs	r3, #3
 8007ecc:	e04c      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ece:	4b28      	ldr	r3, [pc, #160]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d1f0      	bne.n	8007ebc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007eda:	4b25      	ldr	r3, [pc, #148]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007edc:	68da      	ldr	r2, [r3, #12]
 8007ede:	4924      	ldr	r1, [pc, #144]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007ee0:	4b25      	ldr	r3, [pc, #148]	; (8007f78 <HAL_RCC_OscConfig+0x620>)
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	60cb      	str	r3, [r1, #12]
 8007ee6:	e03e      	b.n	8007f66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	69db      	ldr	r3, [r3, #28]
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d101      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e039      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8007ef4:	4b1e      	ldr	r3, [pc, #120]	; (8007f70 <HAL_RCC_OscConfig+0x618>)
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f003 0203 	and.w	r2, r3, #3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a1b      	ldr	r3, [r3, #32]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d12c      	bne.n	8007f62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	3b01      	subs	r3, #1
 8007f14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f16:	429a      	cmp	r2, r3
 8007f18:	d123      	bne.n	8007f62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d11b      	bne.n	8007f62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d113      	bne.n	8007f62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f44:	085b      	lsrs	r3, r3, #1
 8007f46:	3b01      	subs	r3, #1
 8007f48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f4a:	429a      	cmp	r2, r3
 8007f4c:	d109      	bne.n	8007f62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f58:	085b      	lsrs	r3, r3, #1
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d001      	beq.n	8007f66 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8007f62:	2301      	movs	r3, #1
 8007f64:	e000      	b.n	8007f68 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3720      	adds	r7, #32
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	40021000 	.word	0x40021000
 8007f74:	019f800c 	.word	0x019f800c
 8007f78:	feeefffc 	.word	0xfeeefffc

08007f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
 8007f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d101      	bne.n	8007f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
 8007f92:	e11e      	b.n	80081d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f94:	4b91      	ldr	r3, [pc, #580]	; (80081dc <HAL_RCC_ClockConfig+0x260>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f003 030f 	and.w	r3, r3, #15
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d910      	bls.n	8007fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007fa2:	4b8e      	ldr	r3, [pc, #568]	; (80081dc <HAL_RCC_ClockConfig+0x260>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f023 020f 	bic.w	r2, r3, #15
 8007faa:	498c      	ldr	r1, [pc, #560]	; (80081dc <HAL_RCC_ClockConfig+0x260>)
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fb2:	4b8a      	ldr	r3, [pc, #552]	; (80081dc <HAL_RCC_ClockConfig+0x260>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f003 030f 	and.w	r3, r3, #15
 8007fba:	683a      	ldr	r2, [r7, #0]
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d001      	beq.n	8007fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	e106      	b.n	80081d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0301 	and.w	r3, r3, #1
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d073      	beq.n	80080b8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	2b03      	cmp	r3, #3
 8007fd6:	d129      	bne.n	800802c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007fd8:	4b81      	ldr	r3, [pc, #516]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e0f4      	b.n	80081d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8007fe8:	f000 f966 	bl	80082b8 <RCC_GetSysClockFreqFromPLLSource>
 8007fec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	4a7c      	ldr	r2, [pc, #496]	; (80081e4 <HAL_RCC_ClockConfig+0x268>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d93f      	bls.n	8008076 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007ff6:	4b7a      	ldr	r3, [pc, #488]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8007ff8:	689b      	ldr	r3, [r3, #8]
 8007ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d009      	beq.n	8008016 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800800a:	2b00      	cmp	r3, #0
 800800c:	d033      	beq.n	8008076 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008012:	2b00      	cmp	r3, #0
 8008014:	d12f      	bne.n	8008076 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008016:	4b72      	ldr	r3, [pc, #456]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800801e:	4a70      	ldr	r2, [pc, #448]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8008020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008024:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008026:	2380      	movs	r3, #128	; 0x80
 8008028:	617b      	str	r3, [r7, #20]
 800802a:	e024      	b.n	8008076 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	2b02      	cmp	r3, #2
 8008032:	d107      	bne.n	8008044 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008034:	4b6a      	ldr	r3, [pc, #424]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d109      	bne.n	8008054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e0c6      	b.n	80081d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008044:	4b66      	ldr	r3, [pc, #408]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800804c:	2b00      	cmp	r3, #0
 800804e:	d101      	bne.n	8008054 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e0be      	b.n	80081d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008054:	f000 f8ce 	bl	80081f4 <HAL_RCC_GetSysClockFreq>
 8008058:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	4a61      	ldr	r2, [pc, #388]	; (80081e4 <HAL_RCC_ClockConfig+0x268>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d909      	bls.n	8008076 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008062:	4b5f      	ldr	r3, [pc, #380]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800806a:	4a5d      	ldr	r2, [pc, #372]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 800806c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008070:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008072:	2380      	movs	r3, #128	; 0x80
 8008074:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008076:	4b5a      	ldr	r3, [pc, #360]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f023 0203 	bic.w	r2, r3, #3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	4957      	ldr	r1, [pc, #348]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8008084:	4313      	orrs	r3, r2
 8008086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008088:	f7fe fa94 	bl	80065b4 <HAL_GetTick>
 800808c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800808e:	e00a      	b.n	80080a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008090:	f7fe fa90 	bl	80065b4 <HAL_GetTick>
 8008094:	4602      	mov	r2, r0
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	1ad3      	subs	r3, r2, r3
 800809a:	f241 3288 	movw	r2, #5000	; 0x1388
 800809e:	4293      	cmp	r3, r2
 80080a0:	d901      	bls.n	80080a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e095      	b.n	80081d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080a6:	4b4e      	ldr	r3, [pc, #312]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f003 020c 	and.w	r2, r3, #12
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	009b      	lsls	r3, r3, #2
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d1eb      	bne.n	8008090 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0302 	and.w	r3, r3, #2
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d023      	beq.n	800810c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0304 	and.w	r3, r3, #4
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d005      	beq.n	80080dc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80080d0:	4b43      	ldr	r3, [pc, #268]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	4a42      	ldr	r2, [pc, #264]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 80080d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80080da:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f003 0308 	and.w	r3, r3, #8
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d007      	beq.n	80080f8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80080e8:	4b3d      	ldr	r3, [pc, #244]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 80080ea:	689b      	ldr	r3, [r3, #8]
 80080ec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80080f0:	4a3b      	ldr	r2, [pc, #236]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 80080f2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80080f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080f8:	4b39      	ldr	r3, [pc, #228]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	4936      	ldr	r1, [pc, #216]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8008106:	4313      	orrs	r3, r2
 8008108:	608b      	str	r3, [r1, #8]
 800810a:	e008      	b.n	800811e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	2b80      	cmp	r3, #128	; 0x80
 8008110:	d105      	bne.n	800811e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008112:	4b33      	ldr	r3, [pc, #204]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	4a32      	ldr	r2, [pc, #200]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8008118:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800811c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800811e:	4b2f      	ldr	r3, [pc, #188]	; (80081dc <HAL_RCC_ClockConfig+0x260>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 030f 	and.w	r3, r3, #15
 8008126:	683a      	ldr	r2, [r7, #0]
 8008128:	429a      	cmp	r2, r3
 800812a:	d21d      	bcs.n	8008168 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800812c:	4b2b      	ldr	r3, [pc, #172]	; (80081dc <HAL_RCC_ClockConfig+0x260>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f023 020f 	bic.w	r2, r3, #15
 8008134:	4929      	ldr	r1, [pc, #164]	; (80081dc <HAL_RCC_ClockConfig+0x260>)
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	4313      	orrs	r3, r2
 800813a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800813c:	f7fe fa3a 	bl	80065b4 <HAL_GetTick>
 8008140:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008142:	e00a      	b.n	800815a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008144:	f7fe fa36 	bl	80065b4 <HAL_GetTick>
 8008148:	4602      	mov	r2, r0
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	1ad3      	subs	r3, r2, r3
 800814e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008152:	4293      	cmp	r3, r2
 8008154:	d901      	bls.n	800815a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e03b      	b.n	80081d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800815a:	4b20      	ldr	r3, [pc, #128]	; (80081dc <HAL_RCC_ClockConfig+0x260>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 030f 	and.w	r3, r3, #15
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	429a      	cmp	r2, r3
 8008166:	d1ed      	bne.n	8008144 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0304 	and.w	r3, r3, #4
 8008170:	2b00      	cmp	r3, #0
 8008172:	d008      	beq.n	8008186 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008174:	4b1a      	ldr	r3, [pc, #104]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	68db      	ldr	r3, [r3, #12]
 8008180:	4917      	ldr	r1, [pc, #92]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8008182:	4313      	orrs	r3, r2
 8008184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0308 	and.w	r3, r3, #8
 800818e:	2b00      	cmp	r3, #0
 8008190:	d009      	beq.n	80081a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008192:	4b13      	ldr	r3, [pc, #76]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 8008194:	689b      	ldr	r3, [r3, #8]
 8008196:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	00db      	lsls	r3, r3, #3
 80081a0:	490f      	ldr	r1, [pc, #60]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 80081a2:	4313      	orrs	r3, r2
 80081a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80081a6:	f000 f825 	bl	80081f4 <HAL_RCC_GetSysClockFreq>
 80081aa:	4602      	mov	r2, r0
 80081ac:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <HAL_RCC_ClockConfig+0x264>)
 80081ae:	689b      	ldr	r3, [r3, #8]
 80081b0:	091b      	lsrs	r3, r3, #4
 80081b2:	f003 030f 	and.w	r3, r3, #15
 80081b6:	490c      	ldr	r1, [pc, #48]	; (80081e8 <HAL_RCC_ClockConfig+0x26c>)
 80081b8:	5ccb      	ldrb	r3, [r1, r3]
 80081ba:	f003 031f 	and.w	r3, r3, #31
 80081be:	fa22 f303 	lsr.w	r3, r2, r3
 80081c2:	4a0a      	ldr	r2, [pc, #40]	; (80081ec <HAL_RCC_ClockConfig+0x270>)
 80081c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80081c6:	4b0a      	ldr	r3, [pc, #40]	; (80081f0 <HAL_RCC_ClockConfig+0x274>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fe f9a6 	bl	800651c <HAL_InitTick>
 80081d0:	4603      	mov	r3, r0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3718      	adds	r7, #24
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	40022000 	.word	0x40022000
 80081e0:	40021000 	.word	0x40021000
 80081e4:	04c4b400 	.word	0x04c4b400
 80081e8:	0800b4c4 	.word	0x0800b4c4
 80081ec:	20000000 	.word	0x20000000
 80081f0:	20000004 	.word	0x20000004

080081f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b087      	sub	sp, #28
 80081f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80081fa:	4b2c      	ldr	r3, [pc, #176]	; (80082ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f003 030c 	and.w	r3, r3, #12
 8008202:	2b04      	cmp	r3, #4
 8008204:	d102      	bne.n	800820c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008206:	4b2a      	ldr	r3, [pc, #168]	; (80082b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008208:	613b      	str	r3, [r7, #16]
 800820a:	e047      	b.n	800829c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800820c:	4b27      	ldr	r3, [pc, #156]	; (80082ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800820e:	689b      	ldr	r3, [r3, #8]
 8008210:	f003 030c 	and.w	r3, r3, #12
 8008214:	2b08      	cmp	r3, #8
 8008216:	d102      	bne.n	800821e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008218:	4b26      	ldr	r3, [pc, #152]	; (80082b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800821a:	613b      	str	r3, [r7, #16]
 800821c:	e03e      	b.n	800829c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800821e:	4b23      	ldr	r3, [pc, #140]	; (80082ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f003 030c 	and.w	r3, r3, #12
 8008226:	2b0c      	cmp	r3, #12
 8008228:	d136      	bne.n	8008298 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800822a:	4b20      	ldr	r3, [pc, #128]	; (80082ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f003 0303 	and.w	r3, r3, #3
 8008232:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008234:	4b1d      	ldr	r3, [pc, #116]	; (80082ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8008236:	68db      	ldr	r3, [r3, #12]
 8008238:	091b      	lsrs	r3, r3, #4
 800823a:	f003 030f 	and.w	r3, r3, #15
 800823e:	3301      	adds	r3, #1
 8008240:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2b03      	cmp	r3, #3
 8008246:	d10c      	bne.n	8008262 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008248:	4a1a      	ldr	r2, [pc, #104]	; (80082b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008250:	4a16      	ldr	r2, [pc, #88]	; (80082ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8008252:	68d2      	ldr	r2, [r2, #12]
 8008254:	0a12      	lsrs	r2, r2, #8
 8008256:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800825a:	fb02 f303 	mul.w	r3, r2, r3
 800825e:	617b      	str	r3, [r7, #20]
      break;
 8008260:	e00c      	b.n	800827c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008262:	4a13      	ldr	r2, [pc, #76]	; (80082b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	fbb2 f3f3 	udiv	r3, r2, r3
 800826a:	4a10      	ldr	r2, [pc, #64]	; (80082ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800826c:	68d2      	ldr	r2, [r2, #12]
 800826e:	0a12      	lsrs	r2, r2, #8
 8008270:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008274:	fb02 f303 	mul.w	r3, r2, r3
 8008278:	617b      	str	r3, [r7, #20]
      break;
 800827a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800827c:	4b0b      	ldr	r3, [pc, #44]	; (80082ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	0e5b      	lsrs	r3, r3, #25
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	3301      	adds	r3, #1
 8008288:	005b      	lsls	r3, r3, #1
 800828a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800828c:	697a      	ldr	r2, [r7, #20]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	fbb2 f3f3 	udiv	r3, r2, r3
 8008294:	613b      	str	r3, [r7, #16]
 8008296:	e001      	b.n	800829c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008298:	2300      	movs	r3, #0
 800829a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800829c:	693b      	ldr	r3, [r7, #16]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	371c      	adds	r7, #28
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr
 80082aa:	bf00      	nop
 80082ac:	40021000 	.word	0x40021000
 80082b0:	00f42400 	.word	0x00f42400
 80082b4:	007a1200 	.word	0x007a1200

080082b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80082b8:	b480      	push	{r7}
 80082ba:	b087      	sub	sp, #28
 80082bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80082be:	4b1e      	ldr	r3, [pc, #120]	; (8008338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80082c8:	4b1b      	ldr	r3, [pc, #108]	; (8008338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	091b      	lsrs	r3, r3, #4
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	3301      	adds	r3, #1
 80082d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d10c      	bne.n	80082f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082dc:	4a17      	ldr	r2, [pc, #92]	; (800833c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082e4:	4a14      	ldr	r2, [pc, #80]	; (8008338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80082e6:	68d2      	ldr	r2, [r2, #12]
 80082e8:	0a12      	lsrs	r2, r2, #8
 80082ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80082ee:	fb02 f303 	mul.w	r3, r2, r3
 80082f2:	617b      	str	r3, [r7, #20]
    break;
 80082f4:	e00c      	b.n	8008310 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80082f6:	4a12      	ldr	r2, [pc, #72]	; (8008340 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80082fe:	4a0e      	ldr	r2, [pc, #56]	; (8008338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008300:	68d2      	ldr	r2, [r2, #12]
 8008302:	0a12      	lsrs	r2, r2, #8
 8008304:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008308:	fb02 f303 	mul.w	r3, r2, r3
 800830c:	617b      	str	r3, [r7, #20]
    break;
 800830e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008310:	4b09      	ldr	r3, [pc, #36]	; (8008338 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	0e5b      	lsrs	r3, r3, #25
 8008316:	f003 0303 	and.w	r3, r3, #3
 800831a:	3301      	adds	r3, #1
 800831c:	005b      	lsls	r3, r3, #1
 800831e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	68bb      	ldr	r3, [r7, #8]
 8008324:	fbb2 f3f3 	udiv	r3, r2, r3
 8008328:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800832a:	687b      	ldr	r3, [r7, #4]
}
 800832c:	4618      	mov	r0, r3
 800832e:	371c      	adds	r7, #28
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr
 8008338:	40021000 	.word	0x40021000
 800833c:	007a1200 	.word	0x007a1200
 8008340:	00f42400 	.word	0x00f42400

08008344 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b086      	sub	sp, #24
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800834c:	2300      	movs	r3, #0
 800834e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008350:	2300      	movs	r3, #0
 8008352:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800835c:	2b00      	cmp	r3, #0
 800835e:	f000 8098 	beq.w	8008492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008362:	2300      	movs	r3, #0
 8008364:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008366:	4b43      	ldr	r3, [pc, #268]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800836a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d10d      	bne.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008372:	4b40      	ldr	r3, [pc, #256]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008376:	4a3f      	ldr	r2, [pc, #252]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800837c:	6593      	str	r3, [r2, #88]	; 0x58
 800837e:	4b3d      	ldr	r3, [pc, #244]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008386:	60bb      	str	r3, [r7, #8]
 8008388:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800838a:	2301      	movs	r3, #1
 800838c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800838e:	4b3a      	ldr	r3, [pc, #232]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a39      	ldr	r2, [pc, #228]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008394:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008398:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800839a:	f7fe f90b 	bl	80065b4 <HAL_GetTick>
 800839e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083a0:	e009      	b.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083a2:	f7fe f907 	bl	80065b4 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d902      	bls.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	74fb      	strb	r3, [r7, #19]
        break;
 80083b4:	e005      	b.n	80083c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80083b6:	4b30      	ldr	r3, [pc, #192]	; (8008478 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0ef      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80083c2:	7cfb      	ldrb	r3, [r7, #19]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d159      	bne.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80083c8:	4b2a      	ldr	r3, [pc, #168]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d01e      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d019      	beq.n	8008418 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80083e4:	4b23      	ldr	r3, [pc, #140]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083f0:	4b20      	ldr	r3, [pc, #128]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f6:	4a1f      	ldr	r2, [pc, #124]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80083f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008400:	4b1c      	ldr	r3, [pc, #112]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008406:	4a1b      	ldr	r2, [pc, #108]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008408:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800840c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008410:	4a18      	ldr	r2, [pc, #96]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d016      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008422:	f7fe f8c7 	bl	80065b4 <HAL_GetTick>
 8008426:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008428:	e00b      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800842a:	f7fe f8c3 	bl	80065b4 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	f241 3288 	movw	r2, #5000	; 0x1388
 8008438:	4293      	cmp	r3, r2
 800843a:	d902      	bls.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800843c:	2303      	movs	r3, #3
 800843e:	74fb      	strb	r3, [r7, #19]
            break;
 8008440:	e006      	b.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008442:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008448:	f003 0302 	and.w	r3, r3, #2
 800844c:	2b00      	cmp	r3, #0
 800844e:	d0ec      	beq.n	800842a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008450:	7cfb      	ldrb	r3, [r7, #19]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d10b      	bne.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008456:	4b07      	ldr	r3, [pc, #28]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800845c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008464:	4903      	ldr	r1, [pc, #12]	; (8008474 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008466:	4313      	orrs	r3, r2
 8008468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800846c:	e008      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800846e:	7cfb      	ldrb	r3, [r7, #19]
 8008470:	74bb      	strb	r3, [r7, #18]
 8008472:	e005      	b.n	8008480 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008474:	40021000 	.word	0x40021000
 8008478:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800847c:	7cfb      	ldrb	r3, [r7, #19]
 800847e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008480:	7c7b      	ldrb	r3, [r7, #17]
 8008482:	2b01      	cmp	r3, #1
 8008484:	d105      	bne.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008486:	4ba6      	ldr	r3, [pc, #664]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800848a:	4aa5      	ldr	r2, [pc, #660]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800848c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008490:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0301 	and.w	r3, r3, #1
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00a      	beq.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800849e:	4ba0      	ldr	r3, [pc, #640]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a4:	f023 0203 	bic.w	r2, r3, #3
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	685b      	ldr	r3, [r3, #4]
 80084ac:	499c      	ldr	r1, [pc, #624]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084ae:	4313      	orrs	r3, r2
 80084b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f003 0302 	and.w	r3, r3, #2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00a      	beq.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084c0:	4b97      	ldr	r3, [pc, #604]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084c6:	f023 020c 	bic.w	r2, r3, #12
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	4994      	ldr	r1, [pc, #592]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f003 0304 	and.w	r3, r3, #4
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00a      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80084e2:	4b8f      	ldr	r3, [pc, #572]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	498b      	ldr	r1, [pc, #556]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80084f2:	4313      	orrs	r3, r2
 80084f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f003 0308 	and.w	r3, r3, #8
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00a      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008504:	4b86      	ldr	r3, [pc, #536]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800850a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	691b      	ldr	r3, [r3, #16]
 8008512:	4983      	ldr	r1, [pc, #524]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008514:	4313      	orrs	r3, r2
 8008516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00a      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008526:	4b7e      	ldr	r3, [pc, #504]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800852c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	695b      	ldr	r3, [r3, #20]
 8008534:	497a      	ldr	r1, [pc, #488]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008536:	4313      	orrs	r3, r2
 8008538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008548:	4b75      	ldr	r3, [pc, #468]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800854a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800854e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	4972      	ldr	r1, [pc, #456]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008558:	4313      	orrs	r3, r2
 800855a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800856a:	4b6d      	ldr	r3, [pc, #436]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800856c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008570:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	69db      	ldr	r3, [r3, #28]
 8008578:	4969      	ldr	r1, [pc, #420]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800857a:	4313      	orrs	r3, r2
 800857c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008588:	2b00      	cmp	r3, #0
 800858a:	d00a      	beq.n	80085a2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800858c:	4b64      	ldr	r3, [pc, #400]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800858e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008592:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6a1b      	ldr	r3, [r3, #32]
 800859a:	4961      	ldr	r1, [pc, #388]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800859c:	4313      	orrs	r3, r2
 800859e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00a      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085ae:	4b5c      	ldr	r3, [pc, #368]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085bc:	4958      	ldr	r1, [pc, #352]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d015      	beq.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085d0:	4b53      	ldr	r3, [pc, #332]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085de:	4950      	ldr	r1, [pc, #320]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085ee:	d105      	bne.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085f0:	4b4b      	ldr	r3, [pc, #300]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085f2:	68db      	ldr	r3, [r3, #12]
 80085f4:	4a4a      	ldr	r2, [pc, #296]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80085f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008604:	2b00      	cmp	r3, #0
 8008606:	d015      	beq.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008608:	4b45      	ldr	r3, [pc, #276]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800860a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800860e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008616:	4942      	ldr	r1, [pc, #264]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008618:	4313      	orrs	r3, r2
 800861a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008626:	d105      	bne.n	8008634 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008628:	4b3d      	ldr	r3, [pc, #244]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800862a:	68db      	ldr	r3, [r3, #12]
 800862c:	4a3c      	ldr	r2, [pc, #240]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800862e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008632:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800863c:	2b00      	cmp	r3, #0
 800863e:	d015      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008640:	4b37      	ldr	r3, [pc, #220]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008646:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800864e:	4934      	ldr	r1, [pc, #208]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008650:	4313      	orrs	r3, r2
 8008652:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800865e:	d105      	bne.n	800866c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008660:	4b2f      	ldr	r3, [pc, #188]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	4a2e      	ldr	r2, [pc, #184]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008666:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800866a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008674:	2b00      	cmp	r3, #0
 8008676:	d015      	beq.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008678:	4b29      	ldr	r3, [pc, #164]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800867a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800867e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008686:	4926      	ldr	r1, [pc, #152]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8008688:	4313      	orrs	r3, r2
 800868a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008692:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008696:	d105      	bne.n	80086a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008698:	4b21      	ldr	r3, [pc, #132]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	4a20      	ldr	r2, [pc, #128]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800869e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086a2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d015      	beq.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80086b0:	4b1b      	ldr	r3, [pc, #108]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086be:	4918      	ldr	r1, [pc, #96]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086ce:	d105      	bne.n	80086dc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80086d0:	4b13      	ldr	r3, [pc, #76]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086d2:	68db      	ldr	r3, [r3, #12]
 80086d4:	4a12      	ldr	r2, [pc, #72]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80086da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d015      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80086e8:	4b0d      	ldr	r3, [pc, #52]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086f6:	490a      	ldr	r1, [pc, #40]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80086f8:	4313      	orrs	r3, r2
 80086fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008702:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008706:	d105      	bne.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008708:	4b05      	ldr	r3, [pc, #20]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800870a:	68db      	ldr	r3, [r3, #12]
 800870c:	4a04      	ldr	r2, [pc, #16]	; (8008720 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800870e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008712:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008714:	7cbb      	ldrb	r3, [r7, #18]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	40021000 	.word	0x40021000

08008724 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d101      	bne.n	8008736 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008732:	2301      	movs	r3, #1
 8008734:	e049      	b.n	80087ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b00      	cmp	r3, #0
 8008740:	d106      	bne.n	8008750 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7fd fc9e 	bl	800608c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2202      	movs	r2, #2
 8008754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681a      	ldr	r2, [r3, #0]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	3304      	adds	r3, #4
 8008760:	4619      	mov	r1, r3
 8008762:	4610      	mov	r0, r2
 8008764:	f000 fd7e 	bl	8009264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2201      	movs	r2, #1
 800876c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2201      	movs	r2, #1
 8008774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d001      	beq.n	80087ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e04a      	b.n	8008882 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	68da      	ldr	r2, [r3, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f042 0201 	orr.w	r2, r2, #1
 8008802:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a21      	ldr	r2, [pc, #132]	; (8008890 <HAL_TIM_Base_Start_IT+0xbc>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d018      	beq.n	8008840 <HAL_TIM_Base_Start_IT+0x6c>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008816:	d013      	beq.n	8008840 <HAL_TIM_Base_Start_IT+0x6c>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a1d      	ldr	r2, [pc, #116]	; (8008894 <HAL_TIM_Base_Start_IT+0xc0>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d00e      	beq.n	8008840 <HAL_TIM_Base_Start_IT+0x6c>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a1c      	ldr	r2, [pc, #112]	; (8008898 <HAL_TIM_Base_Start_IT+0xc4>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d009      	beq.n	8008840 <HAL_TIM_Base_Start_IT+0x6c>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a1a      	ldr	r2, [pc, #104]	; (800889c <HAL_TIM_Base_Start_IT+0xc8>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d004      	beq.n	8008840 <HAL_TIM_Base_Start_IT+0x6c>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a19      	ldr	r2, [pc, #100]	; (80088a0 <HAL_TIM_Base_Start_IT+0xcc>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d115      	bne.n	800886c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	689a      	ldr	r2, [r3, #8]
 8008846:	4b17      	ldr	r3, [pc, #92]	; (80088a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8008848:	4013      	ands	r3, r2
 800884a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b06      	cmp	r3, #6
 8008850:	d015      	beq.n	800887e <HAL_TIM_Base_Start_IT+0xaa>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008858:	d011      	beq.n	800887e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f042 0201 	orr.w	r2, r2, #1
 8008868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800886a:	e008      	b.n	800887e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	681a      	ldr	r2, [r3, #0]
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f042 0201 	orr.w	r2, r2, #1
 800887a:	601a      	str	r2, [r3, #0]
 800887c:	e000      	b.n	8008880 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008880:	2300      	movs	r3, #0
}
 8008882:	4618      	mov	r0, r3
 8008884:	3714      	adds	r7, #20
 8008886:	46bd      	mov	sp, r7
 8008888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888c:	4770      	bx	lr
 800888e:	bf00      	nop
 8008890:	40012c00 	.word	0x40012c00
 8008894:	40000400 	.word	0x40000400
 8008898:	40000800 	.word	0x40000800
 800889c:	40013400 	.word	0x40013400
 80088a0:	40014000 	.word	0x40014000
 80088a4:	00010007 	.word	0x00010007

080088a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d101      	bne.n	80088ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	e049      	b.n	800894e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d106      	bne.n	80088d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f7fd fc2a 	bl	8006128 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2202      	movs	r2, #2
 80088d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	3304      	adds	r3, #4
 80088e4:	4619      	mov	r1, r3
 80088e6:	4610      	mov	r0, r2
 80088e8:	f000 fcbc 	bl	8009264 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3708      	adds	r7, #8
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
	...

08008958 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	2b00      	cmp	r3, #0
 8008966:	d109      	bne.n	800897c <HAL_TIM_PWM_Start+0x24>
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b01      	cmp	r3, #1
 8008972:	bf14      	ite	ne
 8008974:	2301      	movne	r3, #1
 8008976:	2300      	moveq	r3, #0
 8008978:	b2db      	uxtb	r3, r3
 800897a:	e03c      	b.n	80089f6 <HAL_TIM_PWM_Start+0x9e>
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b04      	cmp	r3, #4
 8008980:	d109      	bne.n	8008996 <HAL_TIM_PWM_Start+0x3e>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008988:	b2db      	uxtb	r3, r3
 800898a:	2b01      	cmp	r3, #1
 800898c:	bf14      	ite	ne
 800898e:	2301      	movne	r3, #1
 8008990:	2300      	moveq	r3, #0
 8008992:	b2db      	uxtb	r3, r3
 8008994:	e02f      	b.n	80089f6 <HAL_TIM_PWM_Start+0x9e>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	2b08      	cmp	r3, #8
 800899a:	d109      	bne.n	80089b0 <HAL_TIM_PWM_Start+0x58>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089a2:	b2db      	uxtb	r3, r3
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	bf14      	ite	ne
 80089a8:	2301      	movne	r3, #1
 80089aa:	2300      	moveq	r3, #0
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	e022      	b.n	80089f6 <HAL_TIM_PWM_Start+0x9e>
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	2b0c      	cmp	r3, #12
 80089b4:	d109      	bne.n	80089ca <HAL_TIM_PWM_Start+0x72>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089bc:	b2db      	uxtb	r3, r3
 80089be:	2b01      	cmp	r3, #1
 80089c0:	bf14      	ite	ne
 80089c2:	2301      	movne	r3, #1
 80089c4:	2300      	moveq	r3, #0
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	e015      	b.n	80089f6 <HAL_TIM_PWM_Start+0x9e>
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	2b10      	cmp	r3, #16
 80089ce:	d109      	bne.n	80089e4 <HAL_TIM_PWM_Start+0x8c>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089d6:	b2db      	uxtb	r3, r3
 80089d8:	2b01      	cmp	r3, #1
 80089da:	bf14      	ite	ne
 80089dc:	2301      	movne	r3, #1
 80089de:	2300      	moveq	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	e008      	b.n	80089f6 <HAL_TIM_PWM_Start+0x9e>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b01      	cmp	r3, #1
 80089ee:	bf14      	ite	ne
 80089f0:	2301      	movne	r3, #1
 80089f2:	2300      	moveq	r3, #0
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d001      	beq.n	80089fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	e097      	b.n	8008b2e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d104      	bne.n	8008a0e <HAL_TIM_PWM_Start+0xb6>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2202      	movs	r2, #2
 8008a08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a0c:	e023      	b.n	8008a56 <HAL_TIM_PWM_Start+0xfe>
 8008a0e:	683b      	ldr	r3, [r7, #0]
 8008a10:	2b04      	cmp	r3, #4
 8008a12:	d104      	bne.n	8008a1e <HAL_TIM_PWM_Start+0xc6>
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2202      	movs	r2, #2
 8008a18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a1c:	e01b      	b.n	8008a56 <HAL_TIM_PWM_Start+0xfe>
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	2b08      	cmp	r3, #8
 8008a22:	d104      	bne.n	8008a2e <HAL_TIM_PWM_Start+0xd6>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2202      	movs	r2, #2
 8008a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a2c:	e013      	b.n	8008a56 <HAL_TIM_PWM_Start+0xfe>
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	2b0c      	cmp	r3, #12
 8008a32:	d104      	bne.n	8008a3e <HAL_TIM_PWM_Start+0xe6>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2202      	movs	r2, #2
 8008a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a3c:	e00b      	b.n	8008a56 <HAL_TIM_PWM_Start+0xfe>
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	2b10      	cmp	r3, #16
 8008a42:	d104      	bne.n	8008a4e <HAL_TIM_PWM_Start+0xf6>
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2202      	movs	r2, #2
 8008a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a4c:	e003      	b.n	8008a56 <HAL_TIM_PWM_Start+0xfe>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2202      	movs	r2, #2
 8008a52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	4618      	mov	r0, r3
 8008a60:	f001 f82e 	bl	8009ac0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a33      	ldr	r2, [pc, #204]	; (8008b38 <HAL_TIM_PWM_Start+0x1e0>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d013      	beq.n	8008a96 <HAL_TIM_PWM_Start+0x13e>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a32      	ldr	r2, [pc, #200]	; (8008b3c <HAL_TIM_PWM_Start+0x1e4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d00e      	beq.n	8008a96 <HAL_TIM_PWM_Start+0x13e>
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	4a30      	ldr	r2, [pc, #192]	; (8008b40 <HAL_TIM_PWM_Start+0x1e8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	d009      	beq.n	8008a96 <HAL_TIM_PWM_Start+0x13e>
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4a2f      	ldr	r2, [pc, #188]	; (8008b44 <HAL_TIM_PWM_Start+0x1ec>)
 8008a88:	4293      	cmp	r3, r2
 8008a8a:	d004      	beq.n	8008a96 <HAL_TIM_PWM_Start+0x13e>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a2d      	ldr	r2, [pc, #180]	; (8008b48 <HAL_TIM_PWM_Start+0x1f0>)
 8008a92:	4293      	cmp	r3, r2
 8008a94:	d101      	bne.n	8008a9a <HAL_TIM_PWM_Start+0x142>
 8008a96:	2301      	movs	r3, #1
 8008a98:	e000      	b.n	8008a9c <HAL_TIM_PWM_Start+0x144>
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d007      	beq.n	8008ab0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008aae:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a20      	ldr	r2, [pc, #128]	; (8008b38 <HAL_TIM_PWM_Start+0x1e0>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d018      	beq.n	8008aec <HAL_TIM_PWM_Start+0x194>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ac2:	d013      	beq.n	8008aec <HAL_TIM_PWM_Start+0x194>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a20      	ldr	r2, [pc, #128]	; (8008b4c <HAL_TIM_PWM_Start+0x1f4>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d00e      	beq.n	8008aec <HAL_TIM_PWM_Start+0x194>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a1f      	ldr	r2, [pc, #124]	; (8008b50 <HAL_TIM_PWM_Start+0x1f8>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d009      	beq.n	8008aec <HAL_TIM_PWM_Start+0x194>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a17      	ldr	r2, [pc, #92]	; (8008b3c <HAL_TIM_PWM_Start+0x1e4>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d004      	beq.n	8008aec <HAL_TIM_PWM_Start+0x194>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a16      	ldr	r2, [pc, #88]	; (8008b40 <HAL_TIM_PWM_Start+0x1e8>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d115      	bne.n	8008b18 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	4b18      	ldr	r3, [pc, #96]	; (8008b54 <HAL_TIM_PWM_Start+0x1fc>)
 8008af4:	4013      	ands	r3, r2
 8008af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b06      	cmp	r3, #6
 8008afc:	d015      	beq.n	8008b2a <HAL_TIM_PWM_Start+0x1d2>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b04:	d011      	beq.n	8008b2a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f042 0201 	orr.w	r2, r2, #1
 8008b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b16:	e008      	b.n	8008b2a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0201 	orr.w	r2, r2, #1
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	e000      	b.n	8008b2c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008b2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3710      	adds	r7, #16
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	40012c00 	.word	0x40012c00
 8008b3c:	40013400 	.word	0x40013400
 8008b40:	40014000 	.word	0x40014000
 8008b44:	40014400 	.word	0x40014400
 8008b48:	40014800 	.word	0x40014800
 8008b4c:	40000400 	.word	0x40000400
 8008b50:	40000800 	.word	0x40000800
 8008b54:	00010007 	.word	0x00010007

08008b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b084      	sub	sp, #16
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d020      	beq.n	8008bbc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f003 0302 	and.w	r3, r3, #2
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d01b      	beq.n	8008bbc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f06f 0202 	mvn.w	r2, #2
 8008b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2201      	movs	r2, #1
 8008b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	699b      	ldr	r3, [r3, #24]
 8008b9a:	f003 0303 	and.w	r3, r3, #3
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fb40 	bl	8009228 <HAL_TIM_IC_CaptureCallback>
 8008ba8:	e005      	b.n	8008bb6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fb32 	bl	8009214 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fb43 	bl	800923c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	f003 0304 	and.w	r3, r3, #4
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d020      	beq.n	8008c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f003 0304 	and.w	r3, r3, #4
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d01b      	beq.n	8008c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f06f 0204 	mvn.w	r2, #4
 8008bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2202      	movs	r2, #2
 8008bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	699b      	ldr	r3, [r3, #24]
 8008be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d003      	beq.n	8008bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fb1a 	bl	8009228 <HAL_TIM_IC_CaptureCallback>
 8008bf4:	e005      	b.n	8008c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 fb0c 	bl	8009214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bfc:	6878      	ldr	r0, [r7, #4]
 8008bfe:	f000 fb1d 	bl	800923c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	f003 0308 	and.w	r3, r3, #8
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d020      	beq.n	8008c54 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f003 0308 	and.w	r3, r3, #8
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d01b      	beq.n	8008c54 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f06f 0208 	mvn.w	r2, #8
 8008c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2204      	movs	r2, #4
 8008c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	f003 0303 	and.w	r3, r3, #3
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d003      	beq.n	8008c42 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 faf4 	bl	8009228 <HAL_TIM_IC_CaptureCallback>
 8008c40:	e005      	b.n	8008c4e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c42:	6878      	ldr	r0, [r7, #4]
 8008c44:	f000 fae6 	bl	8009214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c48:	6878      	ldr	r0, [r7, #4]
 8008c4a:	f000 faf7 	bl	800923c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	f003 0310 	and.w	r3, r3, #16
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d020      	beq.n	8008ca0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f003 0310 	and.w	r3, r3, #16
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d01b      	beq.n	8008ca0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f06f 0210 	mvn.w	r2, #16
 8008c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	2208      	movs	r2, #8
 8008c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d003      	beq.n	8008c8e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 face 	bl	8009228 <HAL_TIM_IC_CaptureCallback>
 8008c8c:	e005      	b.n	8008c9a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 fac0 	bl	8009214 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fad1 	bl	800923c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00c      	beq.n	8008cc4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d007      	beq.n	8008cc4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f06f 0201 	mvn.w	r2, #1
 8008cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7f9 f8a4 	bl	8001e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d104      	bne.n	8008cd8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d00c      	beq.n	8008cf2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d007      	beq.n	8008cf2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8008cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f001 f825 	bl	8009d3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00c      	beq.n	8008d16 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d007      	beq.n	8008d16 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f001 f81d 	bl	8009d50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d00c      	beq.n	8008d3a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d007      	beq.n	8008d3a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fa8b 	bl	8009250 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	f003 0320 	and.w	r3, r3, #32
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d00c      	beq.n	8008d5e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f003 0320 	and.w	r3, r3, #32
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d007      	beq.n	8008d5e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f06f 0220 	mvn.w	r2, #32
 8008d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f000 ffe5 	bl	8009d28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d00c      	beq.n	8008d82 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d007      	beq.n	8008d82 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fff1 	bl	8009d64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d00c      	beq.n	8008da6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d007      	beq.n	8008da6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008da0:	6878      	ldr	r0, [r7, #4]
 8008da2:	f000 ffe9 	bl	8009d78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d00c      	beq.n	8008dca <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d007      	beq.n	8008dca <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 ffe1 	bl	8009d8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8008dca:	68bb      	ldr	r3, [r7, #8]
 8008dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d00c      	beq.n	8008dee <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d007      	beq.n	8008dee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 ffd9 	bl	8009da0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008dee:	bf00      	nop
 8008df0:	3710      	adds	r7, #16
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}
	...

08008df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	60b9      	str	r1, [r7, #8]
 8008e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e04:	2300      	movs	r3, #0
 8008e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d101      	bne.n	8008e16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e12:	2302      	movs	r3, #2
 8008e14:	e0ff      	b.n	8009016 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2201      	movs	r2, #1
 8008e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2b14      	cmp	r3, #20
 8008e22:	f200 80f0 	bhi.w	8009006 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008e26:	a201      	add	r2, pc, #4	; (adr r2, 8008e2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e2c:	08008e81 	.word	0x08008e81
 8008e30:	08009007 	.word	0x08009007
 8008e34:	08009007 	.word	0x08009007
 8008e38:	08009007 	.word	0x08009007
 8008e3c:	08008ec1 	.word	0x08008ec1
 8008e40:	08009007 	.word	0x08009007
 8008e44:	08009007 	.word	0x08009007
 8008e48:	08009007 	.word	0x08009007
 8008e4c:	08008f03 	.word	0x08008f03
 8008e50:	08009007 	.word	0x08009007
 8008e54:	08009007 	.word	0x08009007
 8008e58:	08009007 	.word	0x08009007
 8008e5c:	08008f43 	.word	0x08008f43
 8008e60:	08009007 	.word	0x08009007
 8008e64:	08009007 	.word	0x08009007
 8008e68:	08009007 	.word	0x08009007
 8008e6c:	08008f85 	.word	0x08008f85
 8008e70:	08009007 	.word	0x08009007
 8008e74:	08009007 	.word	0x08009007
 8008e78:	08009007 	.word	0x08009007
 8008e7c:	08008fc5 	.word	0x08008fc5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68b9      	ldr	r1, [r7, #8]
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 fa88 	bl	800939c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699a      	ldr	r2, [r3, #24]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f042 0208 	orr.w	r2, r2, #8
 8008e9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	699a      	ldr	r2, [r3, #24]
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f022 0204 	bic.w	r2, r2, #4
 8008eaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6999      	ldr	r1, [r3, #24]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	691a      	ldr	r2, [r3, #16]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	430a      	orrs	r2, r1
 8008ebc:	619a      	str	r2, [r3, #24]
      break;
 8008ebe:	e0a5      	b.n	800900c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68b9      	ldr	r1, [r7, #8]
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	f000 faf8 	bl	80094bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699a      	ldr	r2, [r3, #24]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008eda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699a      	ldr	r2, [r3, #24]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008eea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6999      	ldr	r1, [r3, #24]
 8008ef2:	68bb      	ldr	r3, [r7, #8]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	021a      	lsls	r2, r3, #8
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	430a      	orrs	r2, r1
 8008efe:	619a      	str	r2, [r3, #24]
      break;
 8008f00:	e084      	b.n	800900c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68b9      	ldr	r1, [r7, #8]
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f000 fb61 	bl	80095d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69da      	ldr	r2, [r3, #28]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f042 0208 	orr.w	r2, r2, #8
 8008f1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	69da      	ldr	r2, [r3, #28]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f022 0204 	bic.w	r2, r2, #4
 8008f2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	69d9      	ldr	r1, [r3, #28]
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	691a      	ldr	r2, [r3, #16]
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	430a      	orrs	r2, r1
 8008f3e:	61da      	str	r2, [r3, #28]
      break;
 8008f40:	e064      	b.n	800900c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68b9      	ldr	r1, [r7, #8]
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f000 fbc9 	bl	80096e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	69da      	ldr	r2, [r3, #28]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69da      	ldr	r2, [r3, #28]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	69d9      	ldr	r1, [r3, #28]
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	021a      	lsls	r2, r3, #8
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	430a      	orrs	r2, r1
 8008f80:	61da      	str	r2, [r3, #28]
      break;
 8008f82:	e043      	b.n	800900c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68b9      	ldr	r1, [r7, #8]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fc32 	bl	80097f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0208 	orr.w	r2, r2, #8
 8008f9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f022 0204 	bic.w	r2, r2, #4
 8008fae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	691a      	ldr	r2, [r3, #16]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008fc2:	e023      	b.n	800900c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68b9      	ldr	r1, [r7, #8]
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 fc76 	bl	80098bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fde:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	021a      	lsls	r2, r3, #8
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	430a      	orrs	r2, r1
 8009002:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009004:	e002      	b.n	800900c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	75fb      	strb	r3, [r7, #23]
      break;
 800900a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	2200      	movs	r2, #0
 8009010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009014:	7dfb      	ldrb	r3, [r7, #23]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
 800901e:	bf00      	nop

08009020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009034:	2b01      	cmp	r3, #1
 8009036:	d101      	bne.n	800903c <HAL_TIM_ConfigClockSource+0x1c>
 8009038:	2302      	movs	r3, #2
 800903a:	e0de      	b.n	80091fa <HAL_TIM_ConfigClockSource+0x1da>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	2201      	movs	r2, #1
 8009040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	2202      	movs	r2, #2
 8009048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800905a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800905e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009066:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	4a63      	ldr	r2, [pc, #396]	; (8009204 <HAL_TIM_ConfigClockSource+0x1e4>)
 8009076:	4293      	cmp	r3, r2
 8009078:	f000 80a9 	beq.w	80091ce <HAL_TIM_ConfigClockSource+0x1ae>
 800907c:	4a61      	ldr	r2, [pc, #388]	; (8009204 <HAL_TIM_ConfigClockSource+0x1e4>)
 800907e:	4293      	cmp	r3, r2
 8009080:	f200 80ae 	bhi.w	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009084:	4a60      	ldr	r2, [pc, #384]	; (8009208 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009086:	4293      	cmp	r3, r2
 8009088:	f000 80a1 	beq.w	80091ce <HAL_TIM_ConfigClockSource+0x1ae>
 800908c:	4a5e      	ldr	r2, [pc, #376]	; (8009208 <HAL_TIM_ConfigClockSource+0x1e8>)
 800908e:	4293      	cmp	r3, r2
 8009090:	f200 80a6 	bhi.w	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009094:	4a5d      	ldr	r2, [pc, #372]	; (800920c <HAL_TIM_ConfigClockSource+0x1ec>)
 8009096:	4293      	cmp	r3, r2
 8009098:	f000 8099 	beq.w	80091ce <HAL_TIM_ConfigClockSource+0x1ae>
 800909c:	4a5b      	ldr	r2, [pc, #364]	; (800920c <HAL_TIM_ConfigClockSource+0x1ec>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	f200 809e 	bhi.w	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80090a4:	4a5a      	ldr	r2, [pc, #360]	; (8009210 <HAL_TIM_ConfigClockSource+0x1f0>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	f000 8091 	beq.w	80091ce <HAL_TIM_ConfigClockSource+0x1ae>
 80090ac:	4a58      	ldr	r2, [pc, #352]	; (8009210 <HAL_TIM_ConfigClockSource+0x1f0>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	f200 8096 	bhi.w	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80090b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80090b8:	f000 8089 	beq.w	80091ce <HAL_TIM_ConfigClockSource+0x1ae>
 80090bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80090c0:	f200 808e 	bhi.w	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80090c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090c8:	d03e      	beq.n	8009148 <HAL_TIM_ConfigClockSource+0x128>
 80090ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ce:	f200 8087 	bhi.w	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80090d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d6:	f000 8086 	beq.w	80091e6 <HAL_TIM_ConfigClockSource+0x1c6>
 80090da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090de:	d87f      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80090e0:	2b70      	cmp	r3, #112	; 0x70
 80090e2:	d01a      	beq.n	800911a <HAL_TIM_ConfigClockSource+0xfa>
 80090e4:	2b70      	cmp	r3, #112	; 0x70
 80090e6:	d87b      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80090e8:	2b60      	cmp	r3, #96	; 0x60
 80090ea:	d050      	beq.n	800918e <HAL_TIM_ConfigClockSource+0x16e>
 80090ec:	2b60      	cmp	r3, #96	; 0x60
 80090ee:	d877      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80090f0:	2b50      	cmp	r3, #80	; 0x50
 80090f2:	d03c      	beq.n	800916e <HAL_TIM_ConfigClockSource+0x14e>
 80090f4:	2b50      	cmp	r3, #80	; 0x50
 80090f6:	d873      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
 80090f8:	2b40      	cmp	r3, #64	; 0x40
 80090fa:	d058      	beq.n	80091ae <HAL_TIM_ConfigClockSource+0x18e>
 80090fc:	2b40      	cmp	r3, #64	; 0x40
 80090fe:	d86f      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009100:	2b30      	cmp	r3, #48	; 0x30
 8009102:	d064      	beq.n	80091ce <HAL_TIM_ConfigClockSource+0x1ae>
 8009104:	2b30      	cmp	r3, #48	; 0x30
 8009106:	d86b      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009108:	2b20      	cmp	r3, #32
 800910a:	d060      	beq.n	80091ce <HAL_TIM_ConfigClockSource+0x1ae>
 800910c:	2b20      	cmp	r3, #32
 800910e:	d867      	bhi.n	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
 8009110:	2b00      	cmp	r3, #0
 8009112:	d05c      	beq.n	80091ce <HAL_TIM_ConfigClockSource+0x1ae>
 8009114:	2b10      	cmp	r3, #16
 8009116:	d05a      	beq.n	80091ce <HAL_TIM_ConfigClockSource+0x1ae>
 8009118:	e062      	b.n	80091e0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800912a:	f000 fca9 	bl	8009a80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800913c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68ba      	ldr	r2, [r7, #8]
 8009144:	609a      	str	r2, [r3, #8]
      break;
 8009146:	e04f      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009158:	f000 fc92 	bl	8009a80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800916a:	609a      	str	r2, [r3, #8]
      break;
 800916c:	e03c      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800917a:	461a      	mov	r2, r3
 800917c:	f000 fc04 	bl	8009988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2150      	movs	r1, #80	; 0x50
 8009186:	4618      	mov	r0, r3
 8009188:	f000 fc5d 	bl	8009a46 <TIM_ITRx_SetConfig>
      break;
 800918c:	e02c      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800919a:	461a      	mov	r2, r3
 800919c:	f000 fc23 	bl	80099e6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	2160      	movs	r1, #96	; 0x60
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fc4d 	bl	8009a46 <TIM_ITRx_SetConfig>
      break;
 80091ac:	e01c      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80091ba:	461a      	mov	r2, r3
 80091bc:	f000 fbe4 	bl	8009988 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	2140      	movs	r1, #64	; 0x40
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 fc3d 	bl	8009a46 <TIM_ITRx_SetConfig>
      break;
 80091cc:	e00c      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681a      	ldr	r2, [r3, #0]
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4619      	mov	r1, r3
 80091d8:	4610      	mov	r0, r2
 80091da:	f000 fc34 	bl	8009a46 <TIM_ITRx_SetConfig>
      break;
 80091de:	e003      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80091e0:	2301      	movs	r3, #1
 80091e2:	73fb      	strb	r3, [r7, #15]
      break;
 80091e4:	e000      	b.n	80091e8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80091e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2201      	movs	r2, #1
 80091ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2200      	movs	r2, #0
 80091f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	00100070 	.word	0x00100070
 8009208:	00100040 	.word	0x00100040
 800920c:	00100030 	.word	0x00100030
 8009210:	00100020 	.word	0x00100020

08009214 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009230:	bf00      	nop
 8009232:	370c      	adds	r7, #12
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr

0800923c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009264:	b480      	push	{r7}
 8009266:	b085      	sub	sp, #20
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a42      	ldr	r2, [pc, #264]	; (8009380 <TIM_Base_SetConfig+0x11c>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d00f      	beq.n	800929c <TIM_Base_SetConfig+0x38>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009282:	d00b      	beq.n	800929c <TIM_Base_SetConfig+0x38>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a3f      	ldr	r2, [pc, #252]	; (8009384 <TIM_Base_SetConfig+0x120>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d007      	beq.n	800929c <TIM_Base_SetConfig+0x38>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a3e      	ldr	r2, [pc, #248]	; (8009388 <TIM_Base_SetConfig+0x124>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d003      	beq.n	800929c <TIM_Base_SetConfig+0x38>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a3d      	ldr	r2, [pc, #244]	; (800938c <TIM_Base_SetConfig+0x128>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d108      	bne.n	80092ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	68fa      	ldr	r2, [r7, #12]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4a33      	ldr	r2, [pc, #204]	; (8009380 <TIM_Base_SetConfig+0x11c>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d01b      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092bc:	d017      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a30      	ldr	r2, [pc, #192]	; (8009384 <TIM_Base_SetConfig+0x120>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d013      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a2f      	ldr	r2, [pc, #188]	; (8009388 <TIM_Base_SetConfig+0x124>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d00f      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a2e      	ldr	r2, [pc, #184]	; (800938c <TIM_Base_SetConfig+0x128>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d00b      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a2d      	ldr	r2, [pc, #180]	; (8009390 <TIM_Base_SetConfig+0x12c>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d007      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a2c      	ldr	r2, [pc, #176]	; (8009394 <TIM_Base_SetConfig+0x130>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d003      	beq.n	80092ee <TIM_Base_SetConfig+0x8a>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a2b      	ldr	r2, [pc, #172]	; (8009398 <TIM_Base_SetConfig+0x134>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d108      	bne.n	8009300 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	68fa      	ldr	r2, [r7, #12]
 80092fc:	4313      	orrs	r3, r2
 80092fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	4313      	orrs	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	689a      	ldr	r2, [r3, #8]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	4a16      	ldr	r2, [pc, #88]	; (8009380 <TIM_Base_SetConfig+0x11c>)
 8009328:	4293      	cmp	r3, r2
 800932a:	d00f      	beq.n	800934c <TIM_Base_SetConfig+0xe8>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	4a17      	ldr	r2, [pc, #92]	; (800938c <TIM_Base_SetConfig+0x128>)
 8009330:	4293      	cmp	r3, r2
 8009332:	d00b      	beq.n	800934c <TIM_Base_SetConfig+0xe8>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	4a16      	ldr	r2, [pc, #88]	; (8009390 <TIM_Base_SetConfig+0x12c>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d007      	beq.n	800934c <TIM_Base_SetConfig+0xe8>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a15      	ldr	r2, [pc, #84]	; (8009394 <TIM_Base_SetConfig+0x130>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_Base_SetConfig+0xe8>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a14      	ldr	r2, [pc, #80]	; (8009398 <TIM_Base_SetConfig+0x134>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d103      	bne.n	8009354 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	691a      	ldr	r2, [r3, #16]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	f003 0301 	and.w	r3, r3, #1
 8009362:	2b01      	cmp	r3, #1
 8009364:	d105      	bne.n	8009372 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	f023 0201 	bic.w	r2, r3, #1
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	611a      	str	r2, [r3, #16]
  }
}
 8009372:	bf00      	nop
 8009374:	3714      	adds	r7, #20
 8009376:	46bd      	mov	sp, r7
 8009378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937c:	4770      	bx	lr
 800937e:	bf00      	nop
 8009380:	40012c00 	.word	0x40012c00
 8009384:	40000400 	.word	0x40000400
 8009388:	40000800 	.word	0x40000800
 800938c:	40013400 	.word	0x40013400
 8009390:	40014000 	.word	0x40014000
 8009394:	40014400 	.word	0x40014400
 8009398:	40014800 	.word	0x40014800

0800939c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	f023 0201 	bic.w	r2, r3, #1
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	699b      	ldr	r3, [r3, #24]
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f023 0303 	bic.w	r3, r3, #3
 80093d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	f023 0302 	bic.w	r3, r3, #2
 80093e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	697a      	ldr	r2, [r7, #20]
 80093f0:	4313      	orrs	r3, r2
 80093f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	4a2c      	ldr	r2, [pc, #176]	; (80094a8 <TIM_OC1_SetConfig+0x10c>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d00f      	beq.n	800941c <TIM_OC1_SetConfig+0x80>
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	4a2b      	ldr	r2, [pc, #172]	; (80094ac <TIM_OC1_SetConfig+0x110>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d00b      	beq.n	800941c <TIM_OC1_SetConfig+0x80>
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	4a2a      	ldr	r2, [pc, #168]	; (80094b0 <TIM_OC1_SetConfig+0x114>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d007      	beq.n	800941c <TIM_OC1_SetConfig+0x80>
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	4a29      	ldr	r2, [pc, #164]	; (80094b4 <TIM_OC1_SetConfig+0x118>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d003      	beq.n	800941c <TIM_OC1_SetConfig+0x80>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	4a28      	ldr	r2, [pc, #160]	; (80094b8 <TIM_OC1_SetConfig+0x11c>)
 8009418:	4293      	cmp	r3, r2
 800941a:	d10c      	bne.n	8009436 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	f023 0308 	bic.w	r3, r3, #8
 8009422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	68db      	ldr	r3, [r3, #12]
 8009428:	697a      	ldr	r2, [r7, #20]
 800942a:	4313      	orrs	r3, r2
 800942c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	f023 0304 	bic.w	r3, r3, #4
 8009434:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	4a1b      	ldr	r2, [pc, #108]	; (80094a8 <TIM_OC1_SetConfig+0x10c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d00f      	beq.n	800945e <TIM_OC1_SetConfig+0xc2>
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	4a1a      	ldr	r2, [pc, #104]	; (80094ac <TIM_OC1_SetConfig+0x110>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00b      	beq.n	800945e <TIM_OC1_SetConfig+0xc2>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	4a19      	ldr	r2, [pc, #100]	; (80094b0 <TIM_OC1_SetConfig+0x114>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d007      	beq.n	800945e <TIM_OC1_SetConfig+0xc2>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	4a18      	ldr	r2, [pc, #96]	; (80094b4 <TIM_OC1_SetConfig+0x118>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d003      	beq.n	800945e <TIM_OC1_SetConfig+0xc2>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	4a17      	ldr	r2, [pc, #92]	; (80094b8 <TIM_OC1_SetConfig+0x11c>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d111      	bne.n	8009482 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800946c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	695b      	ldr	r3, [r3, #20]
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	4313      	orrs	r3, r2
 8009476:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4313      	orrs	r3, r2
 8009480:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	693a      	ldr	r2, [r7, #16]
 8009486:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	621a      	str	r2, [r3, #32]
}
 800949c:	bf00      	nop
 800949e:	371c      	adds	r7, #28
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	40012c00 	.word	0x40012c00
 80094ac:	40013400 	.word	0x40013400
 80094b0:	40014000 	.word	0x40014000
 80094b4:	40014400 	.word	0x40014400
 80094b8:	40014800 	.word	0x40014800

080094bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094bc:	b480      	push	{r7}
 80094be:	b087      	sub	sp, #28
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6a1b      	ldr	r3, [r3, #32]
 80094ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	6a1b      	ldr	r3, [r3, #32]
 80094d0:	f023 0210 	bic.w	r2, r3, #16
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	685b      	ldr	r3, [r3, #4]
 80094dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	699b      	ldr	r3, [r3, #24]
 80094e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80094ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	021b      	lsls	r3, r3, #8
 80094fe:	68fa      	ldr	r2, [r7, #12]
 8009500:	4313      	orrs	r3, r2
 8009502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	f023 0320 	bic.w	r3, r3, #32
 800950a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800950c:	683b      	ldr	r3, [r7, #0]
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	011b      	lsls	r3, r3, #4
 8009512:	697a      	ldr	r2, [r7, #20]
 8009514:	4313      	orrs	r3, r2
 8009516:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	4a28      	ldr	r2, [pc, #160]	; (80095bc <TIM_OC2_SetConfig+0x100>)
 800951c:	4293      	cmp	r3, r2
 800951e:	d003      	beq.n	8009528 <TIM_OC2_SetConfig+0x6c>
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4a27      	ldr	r2, [pc, #156]	; (80095c0 <TIM_OC2_SetConfig+0x104>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d10d      	bne.n	8009544 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009528:	697b      	ldr	r3, [r7, #20]
 800952a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800952e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	68db      	ldr	r3, [r3, #12]
 8009534:	011b      	lsls	r3, r3, #4
 8009536:	697a      	ldr	r2, [r7, #20]
 8009538:	4313      	orrs	r3, r2
 800953a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800953c:	697b      	ldr	r3, [r7, #20]
 800953e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009542:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	4a1d      	ldr	r2, [pc, #116]	; (80095bc <TIM_OC2_SetConfig+0x100>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d00f      	beq.n	800956c <TIM_OC2_SetConfig+0xb0>
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	4a1c      	ldr	r2, [pc, #112]	; (80095c0 <TIM_OC2_SetConfig+0x104>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d00b      	beq.n	800956c <TIM_OC2_SetConfig+0xb0>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	4a1b      	ldr	r2, [pc, #108]	; (80095c4 <TIM_OC2_SetConfig+0x108>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d007      	beq.n	800956c <TIM_OC2_SetConfig+0xb0>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	4a1a      	ldr	r2, [pc, #104]	; (80095c8 <TIM_OC2_SetConfig+0x10c>)
 8009560:	4293      	cmp	r3, r2
 8009562:	d003      	beq.n	800956c <TIM_OC2_SetConfig+0xb0>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	4a19      	ldr	r2, [pc, #100]	; (80095cc <TIM_OC2_SetConfig+0x110>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d113      	bne.n	8009594 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800956c:	693b      	ldr	r3, [r7, #16]
 800956e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009572:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800957a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	695b      	ldr	r3, [r3, #20]
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	693a      	ldr	r2, [r7, #16]
 8009584:	4313      	orrs	r3, r2
 8009586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	009b      	lsls	r3, r3, #2
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	4313      	orrs	r3, r2
 8009592:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68fa      	ldr	r2, [r7, #12]
 800959e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	685a      	ldr	r2, [r3, #4]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	697a      	ldr	r2, [r7, #20]
 80095ac:	621a      	str	r2, [r3, #32]
}
 80095ae:	bf00      	nop
 80095b0:	371c      	adds	r7, #28
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	40012c00 	.word	0x40012c00
 80095c0:	40013400 	.word	0x40013400
 80095c4:	40014000 	.word	0x40014000
 80095c8:	40014400 	.word	0x40014400
 80095cc:	40014800 	.word	0x40014800

080095d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b087      	sub	sp, #28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	6078      	str	r0, [r7, #4]
 80095d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a1b      	ldr	r3, [r3, #32]
 80095e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	69db      	ldr	r3, [r3, #28]
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80095fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009602:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f023 0303 	bic.w	r3, r3, #3
 800960a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	4313      	orrs	r3, r2
 8009614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800961c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	689b      	ldr	r3, [r3, #8]
 8009622:	021b      	lsls	r3, r3, #8
 8009624:	697a      	ldr	r2, [r7, #20]
 8009626:	4313      	orrs	r3, r2
 8009628:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a27      	ldr	r2, [pc, #156]	; (80096cc <TIM_OC3_SetConfig+0xfc>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d003      	beq.n	800963a <TIM_OC3_SetConfig+0x6a>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a26      	ldr	r2, [pc, #152]	; (80096d0 <TIM_OC3_SetConfig+0x100>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d10d      	bne.n	8009656 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009642:	683b      	ldr	r3, [r7, #0]
 8009644:	68db      	ldr	r3, [r3, #12]
 8009646:	021b      	lsls	r3, r3, #8
 8009648:	697a      	ldr	r2, [r7, #20]
 800964a:	4313      	orrs	r3, r2
 800964c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	4a1c      	ldr	r2, [pc, #112]	; (80096cc <TIM_OC3_SetConfig+0xfc>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d00f      	beq.n	800967e <TIM_OC3_SetConfig+0xae>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	4a1b      	ldr	r2, [pc, #108]	; (80096d0 <TIM_OC3_SetConfig+0x100>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d00b      	beq.n	800967e <TIM_OC3_SetConfig+0xae>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	4a1a      	ldr	r2, [pc, #104]	; (80096d4 <TIM_OC3_SetConfig+0x104>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d007      	beq.n	800967e <TIM_OC3_SetConfig+0xae>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a19      	ldr	r2, [pc, #100]	; (80096d8 <TIM_OC3_SetConfig+0x108>)
 8009672:	4293      	cmp	r3, r2
 8009674:	d003      	beq.n	800967e <TIM_OC3_SetConfig+0xae>
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a18      	ldr	r2, [pc, #96]	; (80096dc <TIM_OC3_SetConfig+0x10c>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d113      	bne.n	80096a6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009686:	693b      	ldr	r3, [r7, #16]
 8009688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800968c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	695b      	ldr	r3, [r3, #20]
 8009692:	011b      	lsls	r3, r3, #4
 8009694:	693a      	ldr	r2, [r7, #16]
 8009696:	4313      	orrs	r3, r2
 8009698:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	011b      	lsls	r3, r3, #4
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	68fa      	ldr	r2, [r7, #12]
 80096b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685a      	ldr	r2, [r3, #4]
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	697a      	ldr	r2, [r7, #20]
 80096be:	621a      	str	r2, [r3, #32]
}
 80096c0:	bf00      	nop
 80096c2:	371c      	adds	r7, #28
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	40012c00 	.word	0x40012c00
 80096d0:	40013400 	.word	0x40013400
 80096d4:	40014000 	.word	0x40014000
 80096d8:	40014400 	.word	0x40014400
 80096dc:	40014800 	.word	0x40014800

080096e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6a1b      	ldr	r3, [r3, #32]
 80096ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6a1b      	ldr	r3, [r3, #32]
 80096f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	685b      	ldr	r3, [r3, #4]
 8009700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	69db      	ldr	r3, [r3, #28]
 8009706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800970e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800971a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	021b      	lsls	r3, r3, #8
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	4313      	orrs	r3, r2
 8009726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800972e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	689b      	ldr	r3, [r3, #8]
 8009734:	031b      	lsls	r3, r3, #12
 8009736:	697a      	ldr	r2, [r7, #20]
 8009738:	4313      	orrs	r3, r2
 800973a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	4a28      	ldr	r2, [pc, #160]	; (80097e0 <TIM_OC4_SetConfig+0x100>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d003      	beq.n	800974c <TIM_OC4_SetConfig+0x6c>
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a27      	ldr	r2, [pc, #156]	; (80097e4 <TIM_OC4_SetConfig+0x104>)
 8009748:	4293      	cmp	r3, r2
 800974a:	d10d      	bne.n	8009768 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	031b      	lsls	r3, r3, #12
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	4313      	orrs	r3, r2
 800975e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009760:	697b      	ldr	r3, [r7, #20]
 8009762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009766:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a1d      	ldr	r2, [pc, #116]	; (80097e0 <TIM_OC4_SetConfig+0x100>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d00f      	beq.n	8009790 <TIM_OC4_SetConfig+0xb0>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a1c      	ldr	r2, [pc, #112]	; (80097e4 <TIM_OC4_SetConfig+0x104>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00b      	beq.n	8009790 <TIM_OC4_SetConfig+0xb0>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a1b      	ldr	r2, [pc, #108]	; (80097e8 <TIM_OC4_SetConfig+0x108>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d007      	beq.n	8009790 <TIM_OC4_SetConfig+0xb0>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a1a      	ldr	r2, [pc, #104]	; (80097ec <TIM_OC4_SetConfig+0x10c>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d003      	beq.n	8009790 <TIM_OC4_SetConfig+0xb0>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a19      	ldr	r2, [pc, #100]	; (80097f0 <TIM_OC4_SetConfig+0x110>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d113      	bne.n	80097b8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009796:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800979e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	019b      	lsls	r3, r3, #6
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	4313      	orrs	r3, r2
 80097aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	699b      	ldr	r3, [r3, #24]
 80097b0:	019b      	lsls	r3, r3, #6
 80097b2:	693a      	ldr	r2, [r7, #16]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	685a      	ldr	r2, [r3, #4]
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	697a      	ldr	r2, [r7, #20]
 80097d0:	621a      	str	r2, [r3, #32]
}
 80097d2:	bf00      	nop
 80097d4:	371c      	adds	r7, #28
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	40012c00 	.word	0x40012c00
 80097e4:	40013400 	.word	0x40013400
 80097e8:	40014000 	.word	0x40014000
 80097ec:	40014400 	.word	0x40014400
 80097f0:	40014800 	.word	0x40014800

080097f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b087      	sub	sp, #28
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a1b      	ldr	r3, [r3, #32]
 8009802:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	6a1b      	ldr	r3, [r3, #32]
 8009808:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800981a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	4313      	orrs	r3, r2
 8009830:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009838:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	689b      	ldr	r3, [r3, #8]
 800983e:	041b      	lsls	r3, r3, #16
 8009840:	693a      	ldr	r2, [r7, #16]
 8009842:	4313      	orrs	r3, r2
 8009844:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a17      	ldr	r2, [pc, #92]	; (80098a8 <TIM_OC5_SetConfig+0xb4>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d00f      	beq.n	800986e <TIM_OC5_SetConfig+0x7a>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a16      	ldr	r2, [pc, #88]	; (80098ac <TIM_OC5_SetConfig+0xb8>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d00b      	beq.n	800986e <TIM_OC5_SetConfig+0x7a>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a15      	ldr	r2, [pc, #84]	; (80098b0 <TIM_OC5_SetConfig+0xbc>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d007      	beq.n	800986e <TIM_OC5_SetConfig+0x7a>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a14      	ldr	r2, [pc, #80]	; (80098b4 <TIM_OC5_SetConfig+0xc0>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d003      	beq.n	800986e <TIM_OC5_SetConfig+0x7a>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a13      	ldr	r2, [pc, #76]	; (80098b8 <TIM_OC5_SetConfig+0xc4>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d109      	bne.n	8009882 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800986e:	697b      	ldr	r3, [r7, #20]
 8009870:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009874:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	695b      	ldr	r3, [r3, #20]
 800987a:	021b      	lsls	r3, r3, #8
 800987c:	697a      	ldr	r2, [r7, #20]
 800987e:	4313      	orrs	r3, r2
 8009880:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	685a      	ldr	r2, [r3, #4]
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	621a      	str	r2, [r3, #32]
}
 800989c:	bf00      	nop
 800989e:	371c      	adds	r7, #28
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	40012c00 	.word	0x40012c00
 80098ac:	40013400 	.word	0x40013400
 80098b0:	40014000 	.word	0x40014000
 80098b4:	40014400 	.word	0x40014400
 80098b8:	40014800 	.word	0x40014800

080098bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80098bc:	b480      	push	{r7}
 80098be:	b087      	sub	sp, #28
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80098ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	021b      	lsls	r3, r3, #8
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	051b      	lsls	r3, r3, #20
 800990a:	693a      	ldr	r2, [r7, #16]
 800990c:	4313      	orrs	r3, r2
 800990e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a18      	ldr	r2, [pc, #96]	; (8009974 <TIM_OC6_SetConfig+0xb8>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d00f      	beq.n	8009938 <TIM_OC6_SetConfig+0x7c>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a17      	ldr	r2, [pc, #92]	; (8009978 <TIM_OC6_SetConfig+0xbc>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d00b      	beq.n	8009938 <TIM_OC6_SetConfig+0x7c>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a16      	ldr	r2, [pc, #88]	; (800997c <TIM_OC6_SetConfig+0xc0>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d007      	beq.n	8009938 <TIM_OC6_SetConfig+0x7c>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a15      	ldr	r2, [pc, #84]	; (8009980 <TIM_OC6_SetConfig+0xc4>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d003      	beq.n	8009938 <TIM_OC6_SetConfig+0x7c>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a14      	ldr	r2, [pc, #80]	; (8009984 <TIM_OC6_SetConfig+0xc8>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d109      	bne.n	800994c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800993e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	695b      	ldr	r3, [r3, #20]
 8009944:	029b      	lsls	r3, r3, #10
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	4313      	orrs	r3, r2
 800994a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	621a      	str	r2, [r3, #32]
}
 8009966:	bf00      	nop
 8009968:	371c      	adds	r7, #28
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	40012c00 	.word	0x40012c00
 8009978:	40013400 	.word	0x40013400
 800997c:	40014000 	.word	0x40014000
 8009980:	40014400 	.word	0x40014400
 8009984:	40014800 	.word	0x40014800

08009988 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009988:	b480      	push	{r7}
 800998a:	b087      	sub	sp, #28
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	6a1b      	ldr	r3, [r3, #32]
 8009998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	6a1b      	ldr	r3, [r3, #32]
 800999e:	f023 0201 	bic.w	r2, r3, #1
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	699b      	ldr	r3, [r3, #24]
 80099aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80099b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	011b      	lsls	r3, r3, #4
 80099b8:	693a      	ldr	r2, [r7, #16]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	f023 030a 	bic.w	r3, r3, #10
 80099c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	693a      	ldr	r2, [r7, #16]
 80099d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	621a      	str	r2, [r3, #32]
}
 80099da:	bf00      	nop
 80099dc:	371c      	adds	r7, #28
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099e6:	b480      	push	{r7}
 80099e8:	b087      	sub	sp, #28
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	60b9      	str	r1, [r7, #8]
 80099f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6a1b      	ldr	r3, [r3, #32]
 80099fc:	f023 0210 	bic.w	r2, r3, #16
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a0a:	693b      	ldr	r3, [r7, #16]
 8009a0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009a10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	031b      	lsls	r3, r3, #12
 8009a16:	693a      	ldr	r2, [r7, #16]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009a22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	011b      	lsls	r3, r3, #4
 8009a28:	697a      	ldr	r2, [r7, #20]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	693a      	ldr	r2, [r7, #16]
 8009a32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	621a      	str	r2, [r3, #32]
}
 8009a3a:	bf00      	nop
 8009a3c:	371c      	adds	r7, #28
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr

08009a46 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009a46:	b480      	push	{r7}
 8009a48:	b085      	sub	sp, #20
 8009a4a:	af00      	add	r7, sp, #0
 8009a4c:	6078      	str	r0, [r7, #4]
 8009a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	689b      	ldr	r3, [r3, #8]
 8009a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a62:	683a      	ldr	r2, [r7, #0]
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	f043 0307 	orr.w	r3, r3, #7
 8009a6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	609a      	str	r2, [r3, #8]
}
 8009a74:	bf00      	nop
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b087      	sub	sp, #28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	60f8      	str	r0, [r7, #12]
 8009a88:	60b9      	str	r1, [r7, #8]
 8009a8a:	607a      	str	r2, [r7, #4]
 8009a8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a94:	697b      	ldr	r3, [r7, #20]
 8009a96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	021a      	lsls	r2, r3, #8
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	431a      	orrs	r2, r3
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	697a      	ldr	r2, [r7, #20]
 8009aaa:	4313      	orrs	r3, r2
 8009aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	609a      	str	r2, [r3, #8]
}
 8009ab4:	bf00      	nop
 8009ab6:	371c      	adds	r7, #28
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	f003 031f 	and.w	r3, r3, #31
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	6a1a      	ldr	r2, [r3, #32]
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	43db      	mvns	r3, r3
 8009ae2:	401a      	ands	r2, r3
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	6a1a      	ldr	r2, [r3, #32]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	f003 031f 	and.w	r3, r3, #31
 8009af2:	6879      	ldr	r1, [r7, #4]
 8009af4:	fa01 f303 	lsl.w	r3, r1, r3
 8009af8:	431a      	orrs	r2, r3
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	621a      	str	r2, [r3, #32]
}
 8009afe:	bf00      	nop
 8009b00:	371c      	adds	r7, #28
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
	...

08009b0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b085      	sub	sp, #20
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	6078      	str	r0, [r7, #4]
 8009b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d101      	bne.n	8009b24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009b20:	2302      	movs	r3, #2
 8009b22:	e065      	b.n	8009bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2202      	movs	r2, #2
 8009b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	4a2c      	ldr	r2, [pc, #176]	; (8009bfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	d004      	beq.n	8009b58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a2b      	ldr	r2, [pc, #172]	; (8009c00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d108      	bne.n	8009b6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	68fa      	ldr	r2, [r7, #12]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b74:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	68fa      	ldr	r2, [r7, #12]
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68fa      	ldr	r2, [r7, #12]
 8009b86:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	4a1b      	ldr	r2, [pc, #108]	; (8009bfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d018      	beq.n	8009bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b9a:	d013      	beq.n	8009bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a18      	ldr	r2, [pc, #96]	; (8009c04 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009ba2:	4293      	cmp	r3, r2
 8009ba4:	d00e      	beq.n	8009bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	4a17      	ldr	r2, [pc, #92]	; (8009c08 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d009      	beq.n	8009bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a12      	ldr	r2, [pc, #72]	; (8009c00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d004      	beq.n	8009bc4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	4a13      	ldr	r2, [pc, #76]	; (8009c0c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d10c      	bne.n	8009bde <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	68ba      	ldr	r2, [r7, #8]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2201      	movs	r2, #1
 8009be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2200      	movs	r2, #0
 8009bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bee:	2300      	movs	r3, #0
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	3714      	adds	r7, #20
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	40012c00 	.word	0x40012c00
 8009c00:	40013400 	.word	0x40013400
 8009c04:	40000400 	.word	0x40000400
 8009c08:	40000800 	.word	0x40000800
 8009c0c:	40014000 	.word	0x40014000

08009c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b085      	sub	sp, #20
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d101      	bne.n	8009c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	e073      	b.n	8009d14 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	68db      	ldr	r3, [r3, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	4313      	orrs	r3, r2
 8009c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	685b      	ldr	r3, [r3, #4]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4313      	orrs	r3, r2
 8009c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	695b      	ldr	r3, [r3, #20]
 8009c84:	4313      	orrs	r3, r2
 8009c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	699b      	ldr	r3, [r3, #24]
 8009ca0:	041b      	lsls	r3, r3, #16
 8009ca2:	4313      	orrs	r3, r2
 8009ca4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	69db      	ldr	r3, [r3, #28]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4a19      	ldr	r2, [pc, #100]	; (8009d20 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d004      	beq.n	8009cc8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4a18      	ldr	r2, [pc, #96]	; (8009d24 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8009cc4:	4293      	cmp	r3, r2
 8009cc6:	d11c      	bne.n	8009d02 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd2:	051b      	lsls	r3, r3, #20
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	6a1b      	ldr	r3, [r3, #32]
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf0:	4313      	orrs	r3, r2
 8009cf2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68fa      	ldr	r2, [r7, #12]
 8009d08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	40012c00 	.word	0x40012c00
 8009d24:	40013400 	.word	0x40013400

08009d28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b083      	sub	sp, #12
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009d30:	bf00      	nop
 8009d32:	370c      	adds	r7, #12
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr

08009d3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009d44:	bf00      	nop
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b083      	sub	sp, #12
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009d58:	bf00      	nop
 8009d5a:	370c      	adds	r7, #12
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009d6c:	bf00      	nop
 8009d6e:	370c      	adds	r7, #12
 8009d70:	46bd      	mov	sp, r7
 8009d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d76:	4770      	bx	lr

08009d78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009d78:	b480      	push	{r7}
 8009d7a:	b083      	sub	sp, #12
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009d80:	bf00      	nop
 8009d82:	370c      	adds	r7, #12
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b083      	sub	sp, #12
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <_ZdlPvj>:
 8009db4:	f000 b97a 	b.w	800a0ac <_ZdlPv>

08009db8 <_ZNSaIcEC1Ev>:
 8009db8:	4770      	bx	lr

08009dba <_ZNSaIcED1Ev>:
 8009dba:	4770      	bx	lr

08009dbc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 8009dbc:	b10a      	cbz	r2, 8009dc2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 8009dbe:	f000 bd34 	b.w	800a82a <memcpy>
 8009dc2:	4770      	bx	lr

08009dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 8009dc4:	b508      	push	{r3, lr}
 8009dc6:	680b      	ldr	r3, [r1, #0]
 8009dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dcc:	d302      	bcc.n	8009dd4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 8009dce:	480d      	ldr	r0, [pc, #52]	; (8009e04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 8009dd0:	f000 f985 	bl	800a0de <_ZSt20__throw_length_errorPKc>
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d90b      	bls.n	8009df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8009dd8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 8009ddc:	ea4f 0042 	mov.w	r0, r2, lsl #1
 8009de0:	d206      	bcs.n	8009df0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 8009de2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8009de6:	bf2a      	itet	cs
 8009de8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 8009dec:	6008      	strcc	r0, [r1, #0]
 8009dee:	600b      	strcs	r3, [r1, #0]
 8009df0:	6808      	ldr	r0, [r1, #0]
 8009df2:	3001      	adds	r0, #1
 8009df4:	d501      	bpl.n	8009dfa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 8009df6:	f000 f96c 	bl	800a0d2 <_ZSt17__throw_bad_allocv>
 8009dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009dfe:	f000 b957 	b.w	800a0b0 <_Znwj>
 8009e02:	bf00      	nop
 8009e04:	0800b4e4 	.word	0x0800b4e4

08009e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8009e08:	f850 3b08 	ldr.w	r3, [r0], #8
 8009e0c:	4283      	cmp	r3, r0
 8009e0e:	d002      	beq.n	8009e16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8009e10:	4618      	mov	r0, r3
 8009e12:	f000 b94b 	b.w	800a0ac <_ZdlPv>
 8009e16:	4770      	bx	lr

08009e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8009e18:	2a01      	cmp	r2, #1
 8009e1a:	b410      	push	{r4}
 8009e1c:	d104      	bne.n	8009e28 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8009e1e:	780a      	ldrb	r2, [r1, #0]
 8009e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e24:	7002      	strb	r2, [r0, #0]
 8009e26:	4770      	bx	lr
 8009e28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e2c:	f7ff bfc6 	b.w	8009dbc <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08009e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 8009e30:	b508      	push	{r3, lr}
 8009e32:	1a52      	subs	r2, r2, r1
 8009e34:	f7ff fff0 	bl	8009e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009e38:	bd08      	pop	{r3, pc}

08009e3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8009e3a:	b508      	push	{r3, lr}
 8009e3c:	1a52      	subs	r2, r2, r1
 8009e3e:	f7ff ffeb 	bl	8009e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009e42:	bd08      	pop	{r3, pc}

08009e44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8009e44:	4288      	cmp	r0, r1
 8009e46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e48:	4604      	mov	r4, r0
 8009e4a:	460e      	mov	r6, r1
 8009e4c:	d01e      	beq.n	8009e8c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	684d      	ldr	r5, [r1, #4]
 8009e52:	f853 2b08 	ldr.w	r2, [r3], #8
 8009e56:	429a      	cmp	r2, r3
 8009e58:	bf14      	ite	ne
 8009e5a:	6882      	ldrne	r2, [r0, #8]
 8009e5c:	220f      	moveq	r2, #15
 8009e5e:	42aa      	cmp	r2, r5
 8009e60:	d20a      	bcs.n	8009e78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 8009e62:	a901      	add	r1, sp, #4
 8009e64:	9501      	str	r5, [sp, #4]
 8009e66:	f7ff ffad 	bl	8009dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009e6a:	4607      	mov	r7, r0
 8009e6c:	4620      	mov	r0, r4
 8009e6e:	f7ff ffcb 	bl	8009e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009e72:	9b01      	ldr	r3, [sp, #4]
 8009e74:	6027      	str	r7, [r4, #0]
 8009e76:	60a3      	str	r3, [r4, #8]
 8009e78:	b125      	cbz	r5, 8009e84 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 8009e7a:	6831      	ldr	r1, [r6, #0]
 8009e7c:	6820      	ldr	r0, [r4, #0]
 8009e7e:	462a      	mov	r2, r5
 8009e80:	f7ff ffca 	bl	8009e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009e84:	6823      	ldr	r3, [r4, #0]
 8009e86:	6065      	str	r5, [r4, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	555a      	strb	r2, [r3, r5]
 8009e8c:	b003      	add	sp, #12
 8009e8e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8009e90:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009e96:	461f      	mov	r7, r3
 8009e98:	6843      	ldr	r3, [r0, #4]
 8009e9a:	eb01 0802 	add.w	r8, r1, r2
 8009e9e:	1ab2      	subs	r2, r6, r2
 8009ea0:	441a      	add	r2, r3
 8009ea2:	eba3 0908 	sub.w	r9, r3, r8
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	9201      	str	r2, [sp, #4]
 8009eaa:	f853 2b08 	ldr.w	r2, [r3], #8
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	bf18      	it	ne
 8009eb2:	6882      	ldrne	r2, [r0, #8]
 8009eb4:	460d      	mov	r5, r1
 8009eb6:	bf08      	it	eq
 8009eb8:	220f      	moveq	r2, #15
 8009eba:	a901      	add	r1, sp, #4
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	f7ff ff81 	bl	8009dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009ec2:	4682      	mov	sl, r0
 8009ec4:	b11d      	cbz	r5, 8009ece <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8009ec6:	6821      	ldr	r1, [r4, #0]
 8009ec8:	462a      	mov	r2, r5
 8009eca:	f7ff ffa5 	bl	8009e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009ece:	b137      	cbz	r7, 8009ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009ed0:	b12e      	cbz	r6, 8009ede <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8009ed2:	4632      	mov	r2, r6
 8009ed4:	4639      	mov	r1, r7
 8009ed6:	eb0a 0005 	add.w	r0, sl, r5
 8009eda:	f7ff ff9d 	bl	8009e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009ede:	f1b9 0f00 	cmp.w	r9, #0
 8009ee2:	d007      	beq.n	8009ef4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8009ee4:	6821      	ldr	r1, [r4, #0]
 8009ee6:	4435      	add	r5, r6
 8009ee8:	464a      	mov	r2, r9
 8009eea:	4441      	add	r1, r8
 8009eec:	eb0a 0005 	add.w	r0, sl, r5
 8009ef0:	f7ff ff92 	bl	8009e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f7ff ff87 	bl	8009e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009efa:	9b01      	ldr	r3, [sp, #4]
 8009efc:	f8c4 a000 	str.w	sl, [r4]
 8009f00:	60a3      	str	r3, [r4, #8]
 8009f02:	b002      	add	sp, #8
 8009f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009f08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8009f08:	f100 0208 	add.w	r2, r0, #8
 8009f0c:	6002      	str	r2, [r0, #0]
 8009f0e:	2200      	movs	r2, #0
 8009f10:	6042      	str	r2, [r0, #4]
 8009f12:	7202      	strb	r2, [r0, #8]
 8009f14:	4770      	bx	lr

08009f16 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8009f16:	b510      	push	{r4, lr}
 8009f18:	4604      	mov	r4, r0
 8009f1a:	f7ff ff75 	bl	8009e08 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009f1e:	4620      	mov	r0, r4
 8009f20:	bd10      	pop	{r4, pc}

08009f22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8009f22:	b510      	push	{r4, lr}
 8009f24:	4604      	mov	r4, r0
 8009f26:	f7ff ff8d 	bl	8009e44 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	bd10      	pop	{r4, pc}

08009f2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 8009f2e:	b570      	push	{r4, r5, r6, lr}
 8009f30:	460c      	mov	r4, r1
 8009f32:	f851 3b08 	ldr.w	r3, [r1], #8
 8009f36:	4299      	cmp	r1, r3
 8009f38:	4605      	mov	r5, r0
 8009f3a:	6800      	ldr	r0, [r0, #0]
 8009f3c:	d110      	bne.n	8009f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x32>
 8009f3e:	42a5      	cmp	r5, r4
 8009f40:	d008      	beq.n	8009f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 8009f42:	6862      	ldr	r2, [r4, #4]
 8009f44:	b10a      	cbz	r2, 8009f4a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x1c>
 8009f46:	f7ff ff67 	bl	8009e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009f4a:	6863      	ldr	r3, [r4, #4]
 8009f4c:	682a      	ldr	r2, [r5, #0]
 8009f4e:	606b      	str	r3, [r5, #4]
 8009f50:	2100      	movs	r1, #0
 8009f52:	54d1      	strb	r1, [r2, r3]
 8009f54:	6822      	ldr	r2, [r4, #0]
 8009f56:	2300      	movs	r3, #0
 8009f58:	6063      	str	r3, [r4, #4]
 8009f5a:	7013      	strb	r3, [r2, #0]
 8009f5c:	4628      	mov	r0, r5
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}
 8009f60:	602b      	str	r3, [r5, #0]
 8009f62:	f105 0608 	add.w	r6, r5, #8
 8009f66:	6863      	ldr	r3, [r4, #4]
 8009f68:	606b      	str	r3, [r5, #4]
 8009f6a:	42b0      	cmp	r0, r6
 8009f6c:	68a3      	ldr	r3, [r4, #8]
 8009f6e:	bf18      	it	ne
 8009f70:	68aa      	ldrne	r2, [r5, #8]
 8009f72:	60ab      	str	r3, [r5, #8]
 8009f74:	bf08      	it	eq
 8009f76:	2000      	moveq	r0, #0
 8009f78:	b110      	cbz	r0, 8009f80 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x52>
 8009f7a:	6020      	str	r0, [r4, #0]
 8009f7c:	60a2      	str	r2, [r4, #8]
 8009f7e:	e7e9      	b.n	8009f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>
 8009f80:	6021      	str	r1, [r4, #0]
 8009f82:	e7e7      	b.n	8009f54 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x26>

08009f84 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8009f84:	6840      	ldr	r0, [r0, #4]
 8009f86:	4770      	bx	lr

08009f88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 8009f88:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f8a:	4604      	mov	r4, r0
 8009f8c:	4623      	mov	r3, r4
 8009f8e:	6840      	ldr	r0, [r0, #4]
 8009f90:	f853 6b08 	ldr.w	r6, [r3], #8
 8009f94:	429e      	cmp	r6, r3
 8009f96:	bf18      	it	ne
 8009f98:	68a3      	ldrne	r3, [r4, #8]
 8009f9a:	eb00 0502 	add.w	r5, r0, r2
 8009f9e:	bf08      	it	eq
 8009fa0:	230f      	moveq	r3, #15
 8009fa2:	429d      	cmp	r5, r3
 8009fa4:	d80a      	bhi.n	8009fbc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x34>
 8009fa6:	b112      	cbz	r2, 8009fae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>
 8009fa8:	4430      	add	r0, r6
 8009faa:	f7ff ff35 	bl	8009e18 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	6065      	str	r5, [r4, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	4620      	mov	r0, r4
 8009fb6:	555a      	strb	r2, [r3, r5]
 8009fb8:	b002      	add	sp, #8
 8009fba:	bd70      	pop	{r4, r5, r6, pc}
 8009fbc:	9200      	str	r2, [sp, #0]
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	4620      	mov	r0, r4
 8009fc6:	f7ff ff63 	bl	8009e90 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8009fca:	e7f0      	b.n	8009fae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x26>

08009fcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 8009fcc:	b508      	push	{r3, lr}
 8009fce:	e9d1 1200 	ldrd	r1, r2, [r1]
 8009fd2:	f7ff ffd9 	bl	8009f88 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 8009fd6:	bd08      	pop	{r3, pc}

08009fd8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEpLERKS4_>:
 8009fd8:	b508      	push	{r3, lr}
 8009fda:	f7ff fff7 	bl	8009fcc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
 8009fde:	bd08      	pop	{r3, pc}

08009fe0 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 8009fe0:	6800      	ldr	r0, [r0, #0]
 8009fe2:	4770      	bx	lr

08009fe4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8009fe4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	4616      	mov	r6, r2
 8009fea:	460d      	mov	r5, r1
 8009fec:	b919      	cbnz	r1, 8009ff6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8009fee:	b112      	cbz	r2, 8009ff6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 8009ff0:	480d      	ldr	r0, [pc, #52]	; (800a028 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 8009ff2:	f000 f871 	bl	800a0d8 <_ZSt19__throw_logic_errorPKc>
 8009ff6:	1b73      	subs	r3, r6, r5
 8009ff8:	2b0f      	cmp	r3, #15
 8009ffa:	9301      	str	r3, [sp, #4]
 8009ffc:	d907      	bls.n	800a00e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 8009ffe:	2200      	movs	r2, #0
 800a000:	a901      	add	r1, sp, #4
 800a002:	4620      	mov	r0, r4
 800a004:	f7ff fede 	bl	8009dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a008:	9b01      	ldr	r3, [sp, #4]
 800a00a:	6020      	str	r0, [r4, #0]
 800a00c:	60a3      	str	r3, [r4, #8]
 800a00e:	4632      	mov	r2, r6
 800a010:	4629      	mov	r1, r5
 800a012:	6820      	ldr	r0, [r4, #0]
 800a014:	f7ff ff0c 	bl	8009e30 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 800a018:	9b01      	ldr	r3, [sp, #4]
 800a01a:	6822      	ldr	r2, [r4, #0]
 800a01c:	6063      	str	r3, [r4, #4]
 800a01e:	2100      	movs	r1, #0
 800a020:	54d1      	strb	r1, [r2, r3]
 800a022:	b002      	add	sp, #8
 800a024:	bd70      	pop	{r4, r5, r6, pc}
 800a026:	bf00      	nop
 800a028:	0800b4fc 	.word	0x0800b4fc

0800a02c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 800a02c:	b538      	push	{r3, r4, r5, lr}
 800a02e:	f100 0308 	add.w	r3, r0, #8
 800a032:	6003      	str	r3, [r0, #0]
 800a034:	e9d1 5200 	ldrd	r5, r2, [r1]
 800a038:	4604      	mov	r4, r0
 800a03a:	f04f 0300 	mov.w	r3, #0
 800a03e:	442a      	add	r2, r5
 800a040:	4629      	mov	r1, r5
 800a042:	f7ff ffcf 	bl	8009fe4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 800a046:	4620      	mov	r0, r4
 800a048:	bd38      	pop	{r3, r4, r5, pc}
	...

0800a04c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800a04c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a04e:	4604      	mov	r4, r0
 800a050:	4616      	mov	r6, r2
 800a052:	460d      	mov	r5, r1
 800a054:	b919      	cbnz	r1, 800a05e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a056:	b112      	cbz	r2, 800a05e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800a058:	480d      	ldr	r0, [pc, #52]	; (800a090 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800a05a:	f000 f83d 	bl	800a0d8 <_ZSt19__throw_logic_errorPKc>
 800a05e:	1b73      	subs	r3, r6, r5
 800a060:	2b0f      	cmp	r3, #15
 800a062:	9301      	str	r3, [sp, #4]
 800a064:	d907      	bls.n	800a076 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800a066:	2200      	movs	r2, #0
 800a068:	a901      	add	r1, sp, #4
 800a06a:	4620      	mov	r0, r4
 800a06c:	f7ff feaa 	bl	8009dc4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a070:	9b01      	ldr	r3, [sp, #4]
 800a072:	6020      	str	r0, [r4, #0]
 800a074:	60a3      	str	r3, [r4, #8]
 800a076:	4632      	mov	r2, r6
 800a078:	4629      	mov	r1, r5
 800a07a:	6820      	ldr	r0, [r4, #0]
 800a07c:	f7ff fedd 	bl	8009e3a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800a080:	9b01      	ldr	r3, [sp, #4]
 800a082:	6822      	ldr	r2, [r4, #0]
 800a084:	6063      	str	r3, [r4, #4]
 800a086:	2100      	movs	r1, #0
 800a088:	54d1      	strb	r1, [r2, r3]
 800a08a:	b002      	add	sp, #8
 800a08c:	bd70      	pop	{r4, r5, r6, pc}
 800a08e:	bf00      	nop
 800a090:	0800b4fc 	.word	0x0800b4fc

0800a094 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcjRKS3_>:
 800a094:	b510      	push	{r4, lr}
 800a096:	f100 0308 	add.w	r3, r0, #8
 800a09a:	4604      	mov	r4, r0
 800a09c:	6003      	str	r3, [r0, #0]
 800a09e:	440a      	add	r2, r1
 800a0a0:	f04f 0300 	mov.w	r3, #0
 800a0a4:	f7ff ffd2 	bl	800a04c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	bd10      	pop	{r4, pc}

0800a0ac <_ZdlPv>:
 800a0ac:	f000 b832 	b.w	800a114 <free>

0800a0b0 <_Znwj>:
 800a0b0:	2801      	cmp	r0, #1
 800a0b2:	bf38      	it	cc
 800a0b4:	2001      	movcc	r0, #1
 800a0b6:	b510      	push	{r4, lr}
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 f822 	bl	800a104 <malloc>
 800a0c0:	b100      	cbz	r0, 800a0c4 <_Znwj+0x14>
 800a0c2:	bd10      	pop	{r4, pc}
 800a0c4:	f000 f80e 	bl	800a0e4 <_ZSt15get_new_handlerv>
 800a0c8:	b908      	cbnz	r0, 800a0ce <_Znwj+0x1e>
 800a0ca:	f000 f813 	bl	800a0f4 <abort>
 800a0ce:	4780      	blx	r0
 800a0d0:	e7f3      	b.n	800a0ba <_Znwj+0xa>

0800a0d2 <_ZSt17__throw_bad_allocv>:
 800a0d2:	b508      	push	{r3, lr}
 800a0d4:	f000 f80e 	bl	800a0f4 <abort>

0800a0d8 <_ZSt19__throw_logic_errorPKc>:
 800a0d8:	b508      	push	{r3, lr}
 800a0da:	f000 f80b 	bl	800a0f4 <abort>

0800a0de <_ZSt20__throw_length_errorPKc>:
 800a0de:	b508      	push	{r3, lr}
 800a0e0:	f000 f808 	bl	800a0f4 <abort>

0800a0e4 <_ZSt15get_new_handlerv>:
 800a0e4:	4b02      	ldr	r3, [pc, #8]	; (800a0f0 <_ZSt15get_new_handlerv+0xc>)
 800a0e6:	6818      	ldr	r0, [r3, #0]
 800a0e8:	f3bf 8f5b 	dmb	ish
 800a0ec:	4770      	bx	lr
 800a0ee:	bf00      	nop
 800a0f0:	20000714 	.word	0x20000714

0800a0f4 <abort>:
 800a0f4:	b508      	push	{r3, lr}
 800a0f6:	2006      	movs	r0, #6
 800a0f8:	f000 faf8 	bl	800a6ec <raise>
 800a0fc:	2001      	movs	r0, #1
 800a0fe:	f7fc f90b 	bl	8006318 <_exit>
	...

0800a104 <malloc>:
 800a104:	4b02      	ldr	r3, [pc, #8]	; (800a110 <malloc+0xc>)
 800a106:	4601      	mov	r1, r0
 800a108:	6818      	ldr	r0, [r3, #0]
 800a10a:	f000 b82b 	b.w	800a164 <_malloc_r>
 800a10e:	bf00      	nop
 800a110:	20000064 	.word	0x20000064

0800a114 <free>:
 800a114:	4b02      	ldr	r3, [pc, #8]	; (800a120 <free+0xc>)
 800a116:	4601      	mov	r1, r0
 800a118:	6818      	ldr	r0, [r3, #0]
 800a11a:	f000 bb95 	b.w	800a848 <_free_r>
 800a11e:	bf00      	nop
 800a120:	20000064 	.word	0x20000064

0800a124 <sbrk_aligned>:
 800a124:	b570      	push	{r4, r5, r6, lr}
 800a126:	4e0e      	ldr	r6, [pc, #56]	; (800a160 <sbrk_aligned+0x3c>)
 800a128:	460c      	mov	r4, r1
 800a12a:	6831      	ldr	r1, [r6, #0]
 800a12c:	4605      	mov	r5, r0
 800a12e:	b911      	cbnz	r1, 800a136 <sbrk_aligned+0x12>
 800a130:	f000 fb2c 	bl	800a78c <_sbrk_r>
 800a134:	6030      	str	r0, [r6, #0]
 800a136:	4621      	mov	r1, r4
 800a138:	4628      	mov	r0, r5
 800a13a:	f000 fb27 	bl	800a78c <_sbrk_r>
 800a13e:	1c43      	adds	r3, r0, #1
 800a140:	d00a      	beq.n	800a158 <sbrk_aligned+0x34>
 800a142:	1cc4      	adds	r4, r0, #3
 800a144:	f024 0403 	bic.w	r4, r4, #3
 800a148:	42a0      	cmp	r0, r4
 800a14a:	d007      	beq.n	800a15c <sbrk_aligned+0x38>
 800a14c:	1a21      	subs	r1, r4, r0
 800a14e:	4628      	mov	r0, r5
 800a150:	f000 fb1c 	bl	800a78c <_sbrk_r>
 800a154:	3001      	adds	r0, #1
 800a156:	d101      	bne.n	800a15c <sbrk_aligned+0x38>
 800a158:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a15c:	4620      	mov	r0, r4
 800a15e:	bd70      	pop	{r4, r5, r6, pc}
 800a160:	2000071c 	.word	0x2000071c

0800a164 <_malloc_r>:
 800a164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a168:	1ccd      	adds	r5, r1, #3
 800a16a:	f025 0503 	bic.w	r5, r5, #3
 800a16e:	3508      	adds	r5, #8
 800a170:	2d0c      	cmp	r5, #12
 800a172:	bf38      	it	cc
 800a174:	250c      	movcc	r5, #12
 800a176:	2d00      	cmp	r5, #0
 800a178:	4607      	mov	r7, r0
 800a17a:	db01      	blt.n	800a180 <_malloc_r+0x1c>
 800a17c:	42a9      	cmp	r1, r5
 800a17e:	d905      	bls.n	800a18c <_malloc_r+0x28>
 800a180:	230c      	movs	r3, #12
 800a182:	603b      	str	r3, [r7, #0]
 800a184:	2600      	movs	r6, #0
 800a186:	4630      	mov	r0, r6
 800a188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a18c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a260 <_malloc_r+0xfc>
 800a190:	f000 f868 	bl	800a264 <__malloc_lock>
 800a194:	f8d8 3000 	ldr.w	r3, [r8]
 800a198:	461c      	mov	r4, r3
 800a19a:	bb5c      	cbnz	r4, 800a1f4 <_malloc_r+0x90>
 800a19c:	4629      	mov	r1, r5
 800a19e:	4638      	mov	r0, r7
 800a1a0:	f7ff ffc0 	bl	800a124 <sbrk_aligned>
 800a1a4:	1c43      	adds	r3, r0, #1
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	d155      	bne.n	800a256 <_malloc_r+0xf2>
 800a1aa:	f8d8 4000 	ldr.w	r4, [r8]
 800a1ae:	4626      	mov	r6, r4
 800a1b0:	2e00      	cmp	r6, #0
 800a1b2:	d145      	bne.n	800a240 <_malloc_r+0xdc>
 800a1b4:	2c00      	cmp	r4, #0
 800a1b6:	d048      	beq.n	800a24a <_malloc_r+0xe6>
 800a1b8:	6823      	ldr	r3, [r4, #0]
 800a1ba:	4631      	mov	r1, r6
 800a1bc:	4638      	mov	r0, r7
 800a1be:	eb04 0903 	add.w	r9, r4, r3
 800a1c2:	f000 fae3 	bl	800a78c <_sbrk_r>
 800a1c6:	4581      	cmp	r9, r0
 800a1c8:	d13f      	bne.n	800a24a <_malloc_r+0xe6>
 800a1ca:	6821      	ldr	r1, [r4, #0]
 800a1cc:	1a6d      	subs	r5, r5, r1
 800a1ce:	4629      	mov	r1, r5
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	f7ff ffa7 	bl	800a124 <sbrk_aligned>
 800a1d6:	3001      	adds	r0, #1
 800a1d8:	d037      	beq.n	800a24a <_malloc_r+0xe6>
 800a1da:	6823      	ldr	r3, [r4, #0]
 800a1dc:	442b      	add	r3, r5
 800a1de:	6023      	str	r3, [r4, #0]
 800a1e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d038      	beq.n	800a25a <_malloc_r+0xf6>
 800a1e8:	685a      	ldr	r2, [r3, #4]
 800a1ea:	42a2      	cmp	r2, r4
 800a1ec:	d12b      	bne.n	800a246 <_malloc_r+0xe2>
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	605a      	str	r2, [r3, #4]
 800a1f2:	e00f      	b.n	800a214 <_malloc_r+0xb0>
 800a1f4:	6822      	ldr	r2, [r4, #0]
 800a1f6:	1b52      	subs	r2, r2, r5
 800a1f8:	d41f      	bmi.n	800a23a <_malloc_r+0xd6>
 800a1fa:	2a0b      	cmp	r2, #11
 800a1fc:	d917      	bls.n	800a22e <_malloc_r+0xca>
 800a1fe:	1961      	adds	r1, r4, r5
 800a200:	42a3      	cmp	r3, r4
 800a202:	6025      	str	r5, [r4, #0]
 800a204:	bf18      	it	ne
 800a206:	6059      	strne	r1, [r3, #4]
 800a208:	6863      	ldr	r3, [r4, #4]
 800a20a:	bf08      	it	eq
 800a20c:	f8c8 1000 	streq.w	r1, [r8]
 800a210:	5162      	str	r2, [r4, r5]
 800a212:	604b      	str	r3, [r1, #4]
 800a214:	4638      	mov	r0, r7
 800a216:	f104 060b 	add.w	r6, r4, #11
 800a21a:	f000 f829 	bl	800a270 <__malloc_unlock>
 800a21e:	f026 0607 	bic.w	r6, r6, #7
 800a222:	1d23      	adds	r3, r4, #4
 800a224:	1af2      	subs	r2, r6, r3
 800a226:	d0ae      	beq.n	800a186 <_malloc_r+0x22>
 800a228:	1b9b      	subs	r3, r3, r6
 800a22a:	50a3      	str	r3, [r4, r2]
 800a22c:	e7ab      	b.n	800a186 <_malloc_r+0x22>
 800a22e:	42a3      	cmp	r3, r4
 800a230:	6862      	ldr	r2, [r4, #4]
 800a232:	d1dd      	bne.n	800a1f0 <_malloc_r+0x8c>
 800a234:	f8c8 2000 	str.w	r2, [r8]
 800a238:	e7ec      	b.n	800a214 <_malloc_r+0xb0>
 800a23a:	4623      	mov	r3, r4
 800a23c:	6864      	ldr	r4, [r4, #4]
 800a23e:	e7ac      	b.n	800a19a <_malloc_r+0x36>
 800a240:	4634      	mov	r4, r6
 800a242:	6876      	ldr	r6, [r6, #4]
 800a244:	e7b4      	b.n	800a1b0 <_malloc_r+0x4c>
 800a246:	4613      	mov	r3, r2
 800a248:	e7cc      	b.n	800a1e4 <_malloc_r+0x80>
 800a24a:	230c      	movs	r3, #12
 800a24c:	603b      	str	r3, [r7, #0]
 800a24e:	4638      	mov	r0, r7
 800a250:	f000 f80e 	bl	800a270 <__malloc_unlock>
 800a254:	e797      	b.n	800a186 <_malloc_r+0x22>
 800a256:	6025      	str	r5, [r4, #0]
 800a258:	e7dc      	b.n	800a214 <_malloc_r+0xb0>
 800a25a:	605b      	str	r3, [r3, #4]
 800a25c:	deff      	udf	#255	; 0xff
 800a25e:	bf00      	nop
 800a260:	20000718 	.word	0x20000718

0800a264 <__malloc_lock>:
 800a264:	4801      	ldr	r0, [pc, #4]	; (800a26c <__malloc_lock+0x8>)
 800a266:	f000 bade 	b.w	800a826 <__retarget_lock_acquire_recursive>
 800a26a:	bf00      	nop
 800a26c:	20000860 	.word	0x20000860

0800a270 <__malloc_unlock>:
 800a270:	4801      	ldr	r0, [pc, #4]	; (800a278 <__malloc_unlock+0x8>)
 800a272:	f000 bad9 	b.w	800a828 <__retarget_lock_release_recursive>
 800a276:	bf00      	nop
 800a278:	20000860 	.word	0x20000860

0800a27c <std>:
 800a27c:	2300      	movs	r3, #0
 800a27e:	b510      	push	{r4, lr}
 800a280:	4604      	mov	r4, r0
 800a282:	e9c0 3300 	strd	r3, r3, [r0]
 800a286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a28a:	6083      	str	r3, [r0, #8]
 800a28c:	8181      	strh	r1, [r0, #12]
 800a28e:	6643      	str	r3, [r0, #100]	; 0x64
 800a290:	81c2      	strh	r2, [r0, #14]
 800a292:	6183      	str	r3, [r0, #24]
 800a294:	4619      	mov	r1, r3
 800a296:	2208      	movs	r2, #8
 800a298:	305c      	adds	r0, #92	; 0x5c
 800a29a:	f000 f9f7 	bl	800a68c <memset>
 800a29e:	4b0d      	ldr	r3, [pc, #52]	; (800a2d4 <std+0x58>)
 800a2a0:	6263      	str	r3, [r4, #36]	; 0x24
 800a2a2:	4b0d      	ldr	r3, [pc, #52]	; (800a2d8 <std+0x5c>)
 800a2a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a2a6:	4b0d      	ldr	r3, [pc, #52]	; (800a2dc <std+0x60>)
 800a2a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a2aa:	4b0d      	ldr	r3, [pc, #52]	; (800a2e0 <std+0x64>)
 800a2ac:	6323      	str	r3, [r4, #48]	; 0x30
 800a2ae:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <std+0x68>)
 800a2b0:	6224      	str	r4, [r4, #32]
 800a2b2:	429c      	cmp	r4, r3
 800a2b4:	d006      	beq.n	800a2c4 <std+0x48>
 800a2b6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a2ba:	4294      	cmp	r4, r2
 800a2bc:	d002      	beq.n	800a2c4 <std+0x48>
 800a2be:	33d0      	adds	r3, #208	; 0xd0
 800a2c0:	429c      	cmp	r4, r3
 800a2c2:	d105      	bne.n	800a2d0 <std+0x54>
 800a2c4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a2c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2cc:	f000 baaa 	b.w	800a824 <__retarget_lock_init_recursive>
 800a2d0:	bd10      	pop	{r4, pc}
 800a2d2:	bf00      	nop
 800a2d4:	0800a4dd 	.word	0x0800a4dd
 800a2d8:	0800a4ff 	.word	0x0800a4ff
 800a2dc:	0800a537 	.word	0x0800a537
 800a2e0:	0800a55b 	.word	0x0800a55b
 800a2e4:	20000720 	.word	0x20000720

0800a2e8 <stdio_exit_handler>:
 800a2e8:	4a02      	ldr	r2, [pc, #8]	; (800a2f4 <stdio_exit_handler+0xc>)
 800a2ea:	4903      	ldr	r1, [pc, #12]	; (800a2f8 <stdio_exit_handler+0x10>)
 800a2ec:	4803      	ldr	r0, [pc, #12]	; (800a2fc <stdio_exit_handler+0x14>)
 800a2ee:	f000 b869 	b.w	800a3c4 <_fwalk_sglue>
 800a2f2:	bf00      	nop
 800a2f4:	2000000c 	.word	0x2000000c
 800a2f8:	0800af95 	.word	0x0800af95
 800a2fc:	20000018 	.word	0x20000018

0800a300 <cleanup_stdio>:
 800a300:	6841      	ldr	r1, [r0, #4]
 800a302:	4b0c      	ldr	r3, [pc, #48]	; (800a334 <cleanup_stdio+0x34>)
 800a304:	4299      	cmp	r1, r3
 800a306:	b510      	push	{r4, lr}
 800a308:	4604      	mov	r4, r0
 800a30a:	d001      	beq.n	800a310 <cleanup_stdio+0x10>
 800a30c:	f000 fe42 	bl	800af94 <_fflush_r>
 800a310:	68a1      	ldr	r1, [r4, #8]
 800a312:	4b09      	ldr	r3, [pc, #36]	; (800a338 <cleanup_stdio+0x38>)
 800a314:	4299      	cmp	r1, r3
 800a316:	d002      	beq.n	800a31e <cleanup_stdio+0x1e>
 800a318:	4620      	mov	r0, r4
 800a31a:	f000 fe3b 	bl	800af94 <_fflush_r>
 800a31e:	68e1      	ldr	r1, [r4, #12]
 800a320:	4b06      	ldr	r3, [pc, #24]	; (800a33c <cleanup_stdio+0x3c>)
 800a322:	4299      	cmp	r1, r3
 800a324:	d004      	beq.n	800a330 <cleanup_stdio+0x30>
 800a326:	4620      	mov	r0, r4
 800a328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a32c:	f000 be32 	b.w	800af94 <_fflush_r>
 800a330:	bd10      	pop	{r4, pc}
 800a332:	bf00      	nop
 800a334:	20000720 	.word	0x20000720
 800a338:	20000788 	.word	0x20000788
 800a33c:	200007f0 	.word	0x200007f0

0800a340 <global_stdio_init.part.0>:
 800a340:	b510      	push	{r4, lr}
 800a342:	4b0b      	ldr	r3, [pc, #44]	; (800a370 <global_stdio_init.part.0+0x30>)
 800a344:	4c0b      	ldr	r4, [pc, #44]	; (800a374 <global_stdio_init.part.0+0x34>)
 800a346:	4a0c      	ldr	r2, [pc, #48]	; (800a378 <global_stdio_init.part.0+0x38>)
 800a348:	601a      	str	r2, [r3, #0]
 800a34a:	4620      	mov	r0, r4
 800a34c:	2200      	movs	r2, #0
 800a34e:	2104      	movs	r1, #4
 800a350:	f7ff ff94 	bl	800a27c <std>
 800a354:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a358:	2201      	movs	r2, #1
 800a35a:	2109      	movs	r1, #9
 800a35c:	f7ff ff8e 	bl	800a27c <std>
 800a360:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a364:	2202      	movs	r2, #2
 800a366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a36a:	2112      	movs	r1, #18
 800a36c:	f7ff bf86 	b.w	800a27c <std>
 800a370:	20000858 	.word	0x20000858
 800a374:	20000720 	.word	0x20000720
 800a378:	0800a2e9 	.word	0x0800a2e9

0800a37c <__sfp_lock_acquire>:
 800a37c:	4801      	ldr	r0, [pc, #4]	; (800a384 <__sfp_lock_acquire+0x8>)
 800a37e:	f000 ba52 	b.w	800a826 <__retarget_lock_acquire_recursive>
 800a382:	bf00      	nop
 800a384:	20000861 	.word	0x20000861

0800a388 <__sfp_lock_release>:
 800a388:	4801      	ldr	r0, [pc, #4]	; (800a390 <__sfp_lock_release+0x8>)
 800a38a:	f000 ba4d 	b.w	800a828 <__retarget_lock_release_recursive>
 800a38e:	bf00      	nop
 800a390:	20000861 	.word	0x20000861

0800a394 <__sinit>:
 800a394:	b510      	push	{r4, lr}
 800a396:	4604      	mov	r4, r0
 800a398:	f7ff fff0 	bl	800a37c <__sfp_lock_acquire>
 800a39c:	6a23      	ldr	r3, [r4, #32]
 800a39e:	b11b      	cbz	r3, 800a3a8 <__sinit+0x14>
 800a3a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3a4:	f7ff bff0 	b.w	800a388 <__sfp_lock_release>
 800a3a8:	4b04      	ldr	r3, [pc, #16]	; (800a3bc <__sinit+0x28>)
 800a3aa:	6223      	str	r3, [r4, #32]
 800a3ac:	4b04      	ldr	r3, [pc, #16]	; (800a3c0 <__sinit+0x2c>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d1f5      	bne.n	800a3a0 <__sinit+0xc>
 800a3b4:	f7ff ffc4 	bl	800a340 <global_stdio_init.part.0>
 800a3b8:	e7f2      	b.n	800a3a0 <__sinit+0xc>
 800a3ba:	bf00      	nop
 800a3bc:	0800a301 	.word	0x0800a301
 800a3c0:	20000858 	.word	0x20000858

0800a3c4 <_fwalk_sglue>:
 800a3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c8:	4607      	mov	r7, r0
 800a3ca:	4688      	mov	r8, r1
 800a3cc:	4614      	mov	r4, r2
 800a3ce:	2600      	movs	r6, #0
 800a3d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3d4:	f1b9 0901 	subs.w	r9, r9, #1
 800a3d8:	d505      	bpl.n	800a3e6 <_fwalk_sglue+0x22>
 800a3da:	6824      	ldr	r4, [r4, #0]
 800a3dc:	2c00      	cmp	r4, #0
 800a3de:	d1f7      	bne.n	800a3d0 <_fwalk_sglue+0xc>
 800a3e0:	4630      	mov	r0, r6
 800a3e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e6:	89ab      	ldrh	r3, [r5, #12]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d907      	bls.n	800a3fc <_fwalk_sglue+0x38>
 800a3ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3f0:	3301      	adds	r3, #1
 800a3f2:	d003      	beq.n	800a3fc <_fwalk_sglue+0x38>
 800a3f4:	4629      	mov	r1, r5
 800a3f6:	4638      	mov	r0, r7
 800a3f8:	47c0      	blx	r8
 800a3fa:	4306      	orrs	r6, r0
 800a3fc:	3568      	adds	r5, #104	; 0x68
 800a3fe:	e7e9      	b.n	800a3d4 <_fwalk_sglue+0x10>

0800a400 <iprintf>:
 800a400:	b40f      	push	{r0, r1, r2, r3}
 800a402:	b507      	push	{r0, r1, r2, lr}
 800a404:	4906      	ldr	r1, [pc, #24]	; (800a420 <iprintf+0x20>)
 800a406:	ab04      	add	r3, sp, #16
 800a408:	6808      	ldr	r0, [r1, #0]
 800a40a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a40e:	6881      	ldr	r1, [r0, #8]
 800a410:	9301      	str	r3, [sp, #4]
 800a412:	f000 fa8f 	bl	800a934 <_vfiprintf_r>
 800a416:	b003      	add	sp, #12
 800a418:	f85d eb04 	ldr.w	lr, [sp], #4
 800a41c:	b004      	add	sp, #16
 800a41e:	4770      	bx	lr
 800a420:	20000064 	.word	0x20000064

0800a424 <_puts_r>:
 800a424:	6a03      	ldr	r3, [r0, #32]
 800a426:	b570      	push	{r4, r5, r6, lr}
 800a428:	6884      	ldr	r4, [r0, #8]
 800a42a:	4605      	mov	r5, r0
 800a42c:	460e      	mov	r6, r1
 800a42e:	b90b      	cbnz	r3, 800a434 <_puts_r+0x10>
 800a430:	f7ff ffb0 	bl	800a394 <__sinit>
 800a434:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a436:	07db      	lsls	r3, r3, #31
 800a438:	d405      	bmi.n	800a446 <_puts_r+0x22>
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	0598      	lsls	r0, r3, #22
 800a43e:	d402      	bmi.n	800a446 <_puts_r+0x22>
 800a440:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a442:	f000 f9f0 	bl	800a826 <__retarget_lock_acquire_recursive>
 800a446:	89a3      	ldrh	r3, [r4, #12]
 800a448:	0719      	lsls	r1, r3, #28
 800a44a:	d513      	bpl.n	800a474 <_puts_r+0x50>
 800a44c:	6923      	ldr	r3, [r4, #16]
 800a44e:	b18b      	cbz	r3, 800a474 <_puts_r+0x50>
 800a450:	3e01      	subs	r6, #1
 800a452:	68a3      	ldr	r3, [r4, #8]
 800a454:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a458:	3b01      	subs	r3, #1
 800a45a:	60a3      	str	r3, [r4, #8]
 800a45c:	b9e9      	cbnz	r1, 800a49a <_puts_r+0x76>
 800a45e:	2b00      	cmp	r3, #0
 800a460:	da2e      	bge.n	800a4c0 <_puts_r+0x9c>
 800a462:	4622      	mov	r2, r4
 800a464:	210a      	movs	r1, #10
 800a466:	4628      	mov	r0, r5
 800a468:	f000 f87b 	bl	800a562 <__swbuf_r>
 800a46c:	3001      	adds	r0, #1
 800a46e:	d007      	beq.n	800a480 <_puts_r+0x5c>
 800a470:	250a      	movs	r5, #10
 800a472:	e007      	b.n	800a484 <_puts_r+0x60>
 800a474:	4621      	mov	r1, r4
 800a476:	4628      	mov	r0, r5
 800a478:	f000 f8b0 	bl	800a5dc <__swsetup_r>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d0e7      	beq.n	800a450 <_puts_r+0x2c>
 800a480:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a484:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a486:	07da      	lsls	r2, r3, #31
 800a488:	d405      	bmi.n	800a496 <_puts_r+0x72>
 800a48a:	89a3      	ldrh	r3, [r4, #12]
 800a48c:	059b      	lsls	r3, r3, #22
 800a48e:	d402      	bmi.n	800a496 <_puts_r+0x72>
 800a490:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a492:	f000 f9c9 	bl	800a828 <__retarget_lock_release_recursive>
 800a496:	4628      	mov	r0, r5
 800a498:	bd70      	pop	{r4, r5, r6, pc}
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	da04      	bge.n	800a4a8 <_puts_r+0x84>
 800a49e:	69a2      	ldr	r2, [r4, #24]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	dc06      	bgt.n	800a4b2 <_puts_r+0x8e>
 800a4a4:	290a      	cmp	r1, #10
 800a4a6:	d004      	beq.n	800a4b2 <_puts_r+0x8e>
 800a4a8:	6823      	ldr	r3, [r4, #0]
 800a4aa:	1c5a      	adds	r2, r3, #1
 800a4ac:	6022      	str	r2, [r4, #0]
 800a4ae:	7019      	strb	r1, [r3, #0]
 800a4b0:	e7cf      	b.n	800a452 <_puts_r+0x2e>
 800a4b2:	4622      	mov	r2, r4
 800a4b4:	4628      	mov	r0, r5
 800a4b6:	f000 f854 	bl	800a562 <__swbuf_r>
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	d1c9      	bne.n	800a452 <_puts_r+0x2e>
 800a4be:	e7df      	b.n	800a480 <_puts_r+0x5c>
 800a4c0:	6823      	ldr	r3, [r4, #0]
 800a4c2:	250a      	movs	r5, #10
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	6022      	str	r2, [r4, #0]
 800a4c8:	701d      	strb	r5, [r3, #0]
 800a4ca:	e7db      	b.n	800a484 <_puts_r+0x60>

0800a4cc <puts>:
 800a4cc:	4b02      	ldr	r3, [pc, #8]	; (800a4d8 <puts+0xc>)
 800a4ce:	4601      	mov	r1, r0
 800a4d0:	6818      	ldr	r0, [r3, #0]
 800a4d2:	f7ff bfa7 	b.w	800a424 <_puts_r>
 800a4d6:	bf00      	nop
 800a4d8:	20000064 	.word	0x20000064

0800a4dc <__sread>:
 800a4dc:	b510      	push	{r4, lr}
 800a4de:	460c      	mov	r4, r1
 800a4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4e4:	f000 f92c 	bl	800a740 <_read_r>
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	bfab      	itete	ge
 800a4ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4ee:	89a3      	ldrhlt	r3, [r4, #12]
 800a4f0:	181b      	addge	r3, r3, r0
 800a4f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a4f6:	bfac      	ite	ge
 800a4f8:	6563      	strge	r3, [r4, #84]	; 0x54
 800a4fa:	81a3      	strhlt	r3, [r4, #12]
 800a4fc:	bd10      	pop	{r4, pc}

0800a4fe <__swrite>:
 800a4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a502:	461f      	mov	r7, r3
 800a504:	898b      	ldrh	r3, [r1, #12]
 800a506:	05db      	lsls	r3, r3, #23
 800a508:	4605      	mov	r5, r0
 800a50a:	460c      	mov	r4, r1
 800a50c:	4616      	mov	r6, r2
 800a50e:	d505      	bpl.n	800a51c <__swrite+0x1e>
 800a510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a514:	2302      	movs	r3, #2
 800a516:	2200      	movs	r2, #0
 800a518:	f000 f900 	bl	800a71c <_lseek_r>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a526:	81a3      	strh	r3, [r4, #12]
 800a528:	4632      	mov	r2, r6
 800a52a:	463b      	mov	r3, r7
 800a52c:	4628      	mov	r0, r5
 800a52e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a532:	f000 b93b 	b.w	800a7ac <_write_r>

0800a536 <__sseek>:
 800a536:	b510      	push	{r4, lr}
 800a538:	460c      	mov	r4, r1
 800a53a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a53e:	f000 f8ed 	bl	800a71c <_lseek_r>
 800a542:	1c43      	adds	r3, r0, #1
 800a544:	89a3      	ldrh	r3, [r4, #12]
 800a546:	bf15      	itete	ne
 800a548:	6560      	strne	r0, [r4, #84]	; 0x54
 800a54a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a54e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a552:	81a3      	strheq	r3, [r4, #12]
 800a554:	bf18      	it	ne
 800a556:	81a3      	strhne	r3, [r4, #12]
 800a558:	bd10      	pop	{r4, pc}

0800a55a <__sclose>:
 800a55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a55e:	f000 b8cd 	b.w	800a6fc <_close_r>

0800a562 <__swbuf_r>:
 800a562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a564:	460e      	mov	r6, r1
 800a566:	4614      	mov	r4, r2
 800a568:	4605      	mov	r5, r0
 800a56a:	b118      	cbz	r0, 800a574 <__swbuf_r+0x12>
 800a56c:	6a03      	ldr	r3, [r0, #32]
 800a56e:	b90b      	cbnz	r3, 800a574 <__swbuf_r+0x12>
 800a570:	f7ff ff10 	bl	800a394 <__sinit>
 800a574:	69a3      	ldr	r3, [r4, #24]
 800a576:	60a3      	str	r3, [r4, #8]
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	071a      	lsls	r2, r3, #28
 800a57c:	d525      	bpl.n	800a5ca <__swbuf_r+0x68>
 800a57e:	6923      	ldr	r3, [r4, #16]
 800a580:	b31b      	cbz	r3, 800a5ca <__swbuf_r+0x68>
 800a582:	6823      	ldr	r3, [r4, #0]
 800a584:	6922      	ldr	r2, [r4, #16]
 800a586:	1a98      	subs	r0, r3, r2
 800a588:	6963      	ldr	r3, [r4, #20]
 800a58a:	b2f6      	uxtb	r6, r6
 800a58c:	4283      	cmp	r3, r0
 800a58e:	4637      	mov	r7, r6
 800a590:	dc04      	bgt.n	800a59c <__swbuf_r+0x3a>
 800a592:	4621      	mov	r1, r4
 800a594:	4628      	mov	r0, r5
 800a596:	f000 fcfd 	bl	800af94 <_fflush_r>
 800a59a:	b9e0      	cbnz	r0, 800a5d6 <__swbuf_r+0x74>
 800a59c:	68a3      	ldr	r3, [r4, #8]
 800a59e:	3b01      	subs	r3, #1
 800a5a0:	60a3      	str	r3, [r4, #8]
 800a5a2:	6823      	ldr	r3, [r4, #0]
 800a5a4:	1c5a      	adds	r2, r3, #1
 800a5a6:	6022      	str	r2, [r4, #0]
 800a5a8:	701e      	strb	r6, [r3, #0]
 800a5aa:	6962      	ldr	r2, [r4, #20]
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	429a      	cmp	r2, r3
 800a5b0:	d004      	beq.n	800a5bc <__swbuf_r+0x5a>
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	07db      	lsls	r3, r3, #31
 800a5b6:	d506      	bpl.n	800a5c6 <__swbuf_r+0x64>
 800a5b8:	2e0a      	cmp	r6, #10
 800a5ba:	d104      	bne.n	800a5c6 <__swbuf_r+0x64>
 800a5bc:	4621      	mov	r1, r4
 800a5be:	4628      	mov	r0, r5
 800a5c0:	f000 fce8 	bl	800af94 <_fflush_r>
 800a5c4:	b938      	cbnz	r0, 800a5d6 <__swbuf_r+0x74>
 800a5c6:	4638      	mov	r0, r7
 800a5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	f000 f805 	bl	800a5dc <__swsetup_r>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d0d5      	beq.n	800a582 <__swbuf_r+0x20>
 800a5d6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a5da:	e7f4      	b.n	800a5c6 <__swbuf_r+0x64>

0800a5dc <__swsetup_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4b2a      	ldr	r3, [pc, #168]	; (800a688 <__swsetup_r+0xac>)
 800a5e0:	4605      	mov	r5, r0
 800a5e2:	6818      	ldr	r0, [r3, #0]
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	b118      	cbz	r0, 800a5f0 <__swsetup_r+0x14>
 800a5e8:	6a03      	ldr	r3, [r0, #32]
 800a5ea:	b90b      	cbnz	r3, 800a5f0 <__swsetup_r+0x14>
 800a5ec:	f7ff fed2 	bl	800a394 <__sinit>
 800a5f0:	89a3      	ldrh	r3, [r4, #12]
 800a5f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5f6:	0718      	lsls	r0, r3, #28
 800a5f8:	d422      	bmi.n	800a640 <__swsetup_r+0x64>
 800a5fa:	06d9      	lsls	r1, r3, #27
 800a5fc:	d407      	bmi.n	800a60e <__swsetup_r+0x32>
 800a5fe:	2309      	movs	r3, #9
 800a600:	602b      	str	r3, [r5, #0]
 800a602:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a606:	81a3      	strh	r3, [r4, #12]
 800a608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a60c:	e034      	b.n	800a678 <__swsetup_r+0x9c>
 800a60e:	0758      	lsls	r0, r3, #29
 800a610:	d512      	bpl.n	800a638 <__swsetup_r+0x5c>
 800a612:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a614:	b141      	cbz	r1, 800a628 <__swsetup_r+0x4c>
 800a616:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a61a:	4299      	cmp	r1, r3
 800a61c:	d002      	beq.n	800a624 <__swsetup_r+0x48>
 800a61e:	4628      	mov	r0, r5
 800a620:	f000 f912 	bl	800a848 <_free_r>
 800a624:	2300      	movs	r3, #0
 800a626:	6363      	str	r3, [r4, #52]	; 0x34
 800a628:	89a3      	ldrh	r3, [r4, #12]
 800a62a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a62e:	81a3      	strh	r3, [r4, #12]
 800a630:	2300      	movs	r3, #0
 800a632:	6063      	str	r3, [r4, #4]
 800a634:	6923      	ldr	r3, [r4, #16]
 800a636:	6023      	str	r3, [r4, #0]
 800a638:	89a3      	ldrh	r3, [r4, #12]
 800a63a:	f043 0308 	orr.w	r3, r3, #8
 800a63e:	81a3      	strh	r3, [r4, #12]
 800a640:	6923      	ldr	r3, [r4, #16]
 800a642:	b94b      	cbnz	r3, 800a658 <__swsetup_r+0x7c>
 800a644:	89a3      	ldrh	r3, [r4, #12]
 800a646:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a64a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a64e:	d003      	beq.n	800a658 <__swsetup_r+0x7c>
 800a650:	4621      	mov	r1, r4
 800a652:	4628      	mov	r0, r5
 800a654:	f000 fcec 	bl	800b030 <__smakebuf_r>
 800a658:	89a0      	ldrh	r0, [r4, #12]
 800a65a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a65e:	f010 0301 	ands.w	r3, r0, #1
 800a662:	d00a      	beq.n	800a67a <__swsetup_r+0x9e>
 800a664:	2300      	movs	r3, #0
 800a666:	60a3      	str	r3, [r4, #8]
 800a668:	6963      	ldr	r3, [r4, #20]
 800a66a:	425b      	negs	r3, r3
 800a66c:	61a3      	str	r3, [r4, #24]
 800a66e:	6923      	ldr	r3, [r4, #16]
 800a670:	b943      	cbnz	r3, 800a684 <__swsetup_r+0xa8>
 800a672:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a676:	d1c4      	bne.n	800a602 <__swsetup_r+0x26>
 800a678:	bd38      	pop	{r3, r4, r5, pc}
 800a67a:	0781      	lsls	r1, r0, #30
 800a67c:	bf58      	it	pl
 800a67e:	6963      	ldrpl	r3, [r4, #20]
 800a680:	60a3      	str	r3, [r4, #8]
 800a682:	e7f4      	b.n	800a66e <__swsetup_r+0x92>
 800a684:	2000      	movs	r0, #0
 800a686:	e7f7      	b.n	800a678 <__swsetup_r+0x9c>
 800a688:	20000064 	.word	0x20000064

0800a68c <memset>:
 800a68c:	4402      	add	r2, r0
 800a68e:	4603      	mov	r3, r0
 800a690:	4293      	cmp	r3, r2
 800a692:	d100      	bne.n	800a696 <memset+0xa>
 800a694:	4770      	bx	lr
 800a696:	f803 1b01 	strb.w	r1, [r3], #1
 800a69a:	e7f9      	b.n	800a690 <memset+0x4>

0800a69c <_raise_r>:
 800a69c:	291f      	cmp	r1, #31
 800a69e:	b538      	push	{r3, r4, r5, lr}
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	460d      	mov	r5, r1
 800a6a4:	d904      	bls.n	800a6b0 <_raise_r+0x14>
 800a6a6:	2316      	movs	r3, #22
 800a6a8:	6003      	str	r3, [r0, #0]
 800a6aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a6b2:	b112      	cbz	r2, 800a6ba <_raise_r+0x1e>
 800a6b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6b8:	b94b      	cbnz	r3, 800a6ce <_raise_r+0x32>
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f000 f864 	bl	800a788 <_getpid_r>
 800a6c0:	462a      	mov	r2, r5
 800a6c2:	4601      	mov	r1, r0
 800a6c4:	4620      	mov	r0, r4
 800a6c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6ca:	f000 b84b 	b.w	800a764 <_kill_r>
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d00a      	beq.n	800a6e8 <_raise_r+0x4c>
 800a6d2:	1c59      	adds	r1, r3, #1
 800a6d4:	d103      	bne.n	800a6de <_raise_r+0x42>
 800a6d6:	2316      	movs	r3, #22
 800a6d8:	6003      	str	r3, [r0, #0]
 800a6da:	2001      	movs	r0, #1
 800a6dc:	e7e7      	b.n	800a6ae <_raise_r+0x12>
 800a6de:	2400      	movs	r4, #0
 800a6e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6e4:	4628      	mov	r0, r5
 800a6e6:	4798      	blx	r3
 800a6e8:	2000      	movs	r0, #0
 800a6ea:	e7e0      	b.n	800a6ae <_raise_r+0x12>

0800a6ec <raise>:
 800a6ec:	4b02      	ldr	r3, [pc, #8]	; (800a6f8 <raise+0xc>)
 800a6ee:	4601      	mov	r1, r0
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	f7ff bfd3 	b.w	800a69c <_raise_r>
 800a6f6:	bf00      	nop
 800a6f8:	20000064 	.word	0x20000064

0800a6fc <_close_r>:
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	4d06      	ldr	r5, [pc, #24]	; (800a718 <_close_r+0x1c>)
 800a700:	2300      	movs	r3, #0
 800a702:	4604      	mov	r4, r0
 800a704:	4608      	mov	r0, r1
 800a706:	602b      	str	r3, [r5, #0]
 800a708:	f7fb fe49 	bl	800639e <_close>
 800a70c:	1c43      	adds	r3, r0, #1
 800a70e:	d102      	bne.n	800a716 <_close_r+0x1a>
 800a710:	682b      	ldr	r3, [r5, #0]
 800a712:	b103      	cbz	r3, 800a716 <_close_r+0x1a>
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	bd38      	pop	{r3, r4, r5, pc}
 800a718:	2000085c 	.word	0x2000085c

0800a71c <_lseek_r>:
 800a71c:	b538      	push	{r3, r4, r5, lr}
 800a71e:	4d07      	ldr	r5, [pc, #28]	; (800a73c <_lseek_r+0x20>)
 800a720:	4604      	mov	r4, r0
 800a722:	4608      	mov	r0, r1
 800a724:	4611      	mov	r1, r2
 800a726:	2200      	movs	r2, #0
 800a728:	602a      	str	r2, [r5, #0]
 800a72a:	461a      	mov	r2, r3
 800a72c:	f7fb fe5e 	bl	80063ec <_lseek>
 800a730:	1c43      	adds	r3, r0, #1
 800a732:	d102      	bne.n	800a73a <_lseek_r+0x1e>
 800a734:	682b      	ldr	r3, [r5, #0]
 800a736:	b103      	cbz	r3, 800a73a <_lseek_r+0x1e>
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	bd38      	pop	{r3, r4, r5, pc}
 800a73c:	2000085c 	.word	0x2000085c

0800a740 <_read_r>:
 800a740:	b538      	push	{r3, r4, r5, lr}
 800a742:	4d07      	ldr	r5, [pc, #28]	; (800a760 <_read_r+0x20>)
 800a744:	4604      	mov	r4, r0
 800a746:	4608      	mov	r0, r1
 800a748:	4611      	mov	r1, r2
 800a74a:	2200      	movs	r2, #0
 800a74c:	602a      	str	r2, [r5, #0]
 800a74e:	461a      	mov	r2, r3
 800a750:	f7fb fdec 	bl	800632c <_read>
 800a754:	1c43      	adds	r3, r0, #1
 800a756:	d102      	bne.n	800a75e <_read_r+0x1e>
 800a758:	682b      	ldr	r3, [r5, #0]
 800a75a:	b103      	cbz	r3, 800a75e <_read_r+0x1e>
 800a75c:	6023      	str	r3, [r4, #0]
 800a75e:	bd38      	pop	{r3, r4, r5, pc}
 800a760:	2000085c 	.word	0x2000085c

0800a764 <_kill_r>:
 800a764:	b538      	push	{r3, r4, r5, lr}
 800a766:	4d07      	ldr	r5, [pc, #28]	; (800a784 <_kill_r+0x20>)
 800a768:	2300      	movs	r3, #0
 800a76a:	4604      	mov	r4, r0
 800a76c:	4608      	mov	r0, r1
 800a76e:	4611      	mov	r1, r2
 800a770:	602b      	str	r3, [r5, #0]
 800a772:	f7fb fdc1 	bl	80062f8 <_kill>
 800a776:	1c43      	adds	r3, r0, #1
 800a778:	d102      	bne.n	800a780 <_kill_r+0x1c>
 800a77a:	682b      	ldr	r3, [r5, #0]
 800a77c:	b103      	cbz	r3, 800a780 <_kill_r+0x1c>
 800a77e:	6023      	str	r3, [r4, #0]
 800a780:	bd38      	pop	{r3, r4, r5, pc}
 800a782:	bf00      	nop
 800a784:	2000085c 	.word	0x2000085c

0800a788 <_getpid_r>:
 800a788:	f7fb bdae 	b.w	80062e8 <_getpid>

0800a78c <_sbrk_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4d06      	ldr	r5, [pc, #24]	; (800a7a8 <_sbrk_r+0x1c>)
 800a790:	2300      	movs	r3, #0
 800a792:	4604      	mov	r4, r0
 800a794:	4608      	mov	r0, r1
 800a796:	602b      	str	r3, [r5, #0]
 800a798:	f7fb fe36 	bl	8006408 <_sbrk>
 800a79c:	1c43      	adds	r3, r0, #1
 800a79e:	d102      	bne.n	800a7a6 <_sbrk_r+0x1a>
 800a7a0:	682b      	ldr	r3, [r5, #0]
 800a7a2:	b103      	cbz	r3, 800a7a6 <_sbrk_r+0x1a>
 800a7a4:	6023      	str	r3, [r4, #0]
 800a7a6:	bd38      	pop	{r3, r4, r5, pc}
 800a7a8:	2000085c 	.word	0x2000085c

0800a7ac <_write_r>:
 800a7ac:	b538      	push	{r3, r4, r5, lr}
 800a7ae:	4d07      	ldr	r5, [pc, #28]	; (800a7cc <_write_r+0x20>)
 800a7b0:	4604      	mov	r4, r0
 800a7b2:	4608      	mov	r0, r1
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	602a      	str	r2, [r5, #0]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	f7fb fdd3 	bl	8006366 <_write>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d102      	bne.n	800a7ca <_write_r+0x1e>
 800a7c4:	682b      	ldr	r3, [r5, #0]
 800a7c6:	b103      	cbz	r3, 800a7ca <_write_r+0x1e>
 800a7c8:	6023      	str	r3, [r4, #0]
 800a7ca:	bd38      	pop	{r3, r4, r5, pc}
 800a7cc:	2000085c 	.word	0x2000085c

0800a7d0 <__errno>:
 800a7d0:	4b01      	ldr	r3, [pc, #4]	; (800a7d8 <__errno+0x8>)
 800a7d2:	6818      	ldr	r0, [r3, #0]
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	20000064 	.word	0x20000064

0800a7dc <__libc_init_array>:
 800a7dc:	b570      	push	{r4, r5, r6, lr}
 800a7de:	4d0d      	ldr	r5, [pc, #52]	; (800a814 <__libc_init_array+0x38>)
 800a7e0:	4c0d      	ldr	r4, [pc, #52]	; (800a818 <__libc_init_array+0x3c>)
 800a7e2:	1b64      	subs	r4, r4, r5
 800a7e4:	10a4      	asrs	r4, r4, #2
 800a7e6:	2600      	movs	r6, #0
 800a7e8:	42a6      	cmp	r6, r4
 800a7ea:	d109      	bne.n	800a800 <__libc_init_array+0x24>
 800a7ec:	4d0b      	ldr	r5, [pc, #44]	; (800a81c <__libc_init_array+0x40>)
 800a7ee:	4c0c      	ldr	r4, [pc, #48]	; (800a820 <__libc_init_array+0x44>)
 800a7f0:	f000 fc7c 	bl	800b0ec <_init>
 800a7f4:	1b64      	subs	r4, r4, r5
 800a7f6:	10a4      	asrs	r4, r4, #2
 800a7f8:	2600      	movs	r6, #0
 800a7fa:	42a6      	cmp	r6, r4
 800a7fc:	d105      	bne.n	800a80a <__libc_init_array+0x2e>
 800a7fe:	bd70      	pop	{r4, r5, r6, pc}
 800a800:	f855 3b04 	ldr.w	r3, [r5], #4
 800a804:	4798      	blx	r3
 800a806:	3601      	adds	r6, #1
 800a808:	e7ee      	b.n	800a7e8 <__libc_init_array+0xc>
 800a80a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a80e:	4798      	blx	r3
 800a810:	3601      	adds	r6, #1
 800a812:	e7f2      	b.n	800a7fa <__libc_init_array+0x1e>
 800a814:	0800b55c 	.word	0x0800b55c
 800a818:	0800b55c 	.word	0x0800b55c
 800a81c:	0800b55c 	.word	0x0800b55c
 800a820:	0800b564 	.word	0x0800b564

0800a824 <__retarget_lock_init_recursive>:
 800a824:	4770      	bx	lr

0800a826 <__retarget_lock_acquire_recursive>:
 800a826:	4770      	bx	lr

0800a828 <__retarget_lock_release_recursive>:
 800a828:	4770      	bx	lr

0800a82a <memcpy>:
 800a82a:	440a      	add	r2, r1
 800a82c:	4291      	cmp	r1, r2
 800a82e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a832:	d100      	bne.n	800a836 <memcpy+0xc>
 800a834:	4770      	bx	lr
 800a836:	b510      	push	{r4, lr}
 800a838:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a83c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a840:	4291      	cmp	r1, r2
 800a842:	d1f9      	bne.n	800a838 <memcpy+0xe>
 800a844:	bd10      	pop	{r4, pc}
	...

0800a848 <_free_r>:
 800a848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a84a:	2900      	cmp	r1, #0
 800a84c:	d044      	beq.n	800a8d8 <_free_r+0x90>
 800a84e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a852:	9001      	str	r0, [sp, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	f1a1 0404 	sub.w	r4, r1, #4
 800a85a:	bfb8      	it	lt
 800a85c:	18e4      	addlt	r4, r4, r3
 800a85e:	f7ff fd01 	bl	800a264 <__malloc_lock>
 800a862:	4a1e      	ldr	r2, [pc, #120]	; (800a8dc <_free_r+0x94>)
 800a864:	9801      	ldr	r0, [sp, #4]
 800a866:	6813      	ldr	r3, [r2, #0]
 800a868:	b933      	cbnz	r3, 800a878 <_free_r+0x30>
 800a86a:	6063      	str	r3, [r4, #4]
 800a86c:	6014      	str	r4, [r2, #0]
 800a86e:	b003      	add	sp, #12
 800a870:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a874:	f7ff bcfc 	b.w	800a270 <__malloc_unlock>
 800a878:	42a3      	cmp	r3, r4
 800a87a:	d908      	bls.n	800a88e <_free_r+0x46>
 800a87c:	6825      	ldr	r5, [r4, #0]
 800a87e:	1961      	adds	r1, r4, r5
 800a880:	428b      	cmp	r3, r1
 800a882:	bf01      	itttt	eq
 800a884:	6819      	ldreq	r1, [r3, #0]
 800a886:	685b      	ldreq	r3, [r3, #4]
 800a888:	1949      	addeq	r1, r1, r5
 800a88a:	6021      	streq	r1, [r4, #0]
 800a88c:	e7ed      	b.n	800a86a <_free_r+0x22>
 800a88e:	461a      	mov	r2, r3
 800a890:	685b      	ldr	r3, [r3, #4]
 800a892:	b10b      	cbz	r3, 800a898 <_free_r+0x50>
 800a894:	42a3      	cmp	r3, r4
 800a896:	d9fa      	bls.n	800a88e <_free_r+0x46>
 800a898:	6811      	ldr	r1, [r2, #0]
 800a89a:	1855      	adds	r5, r2, r1
 800a89c:	42a5      	cmp	r5, r4
 800a89e:	d10b      	bne.n	800a8b8 <_free_r+0x70>
 800a8a0:	6824      	ldr	r4, [r4, #0]
 800a8a2:	4421      	add	r1, r4
 800a8a4:	1854      	adds	r4, r2, r1
 800a8a6:	42a3      	cmp	r3, r4
 800a8a8:	6011      	str	r1, [r2, #0]
 800a8aa:	d1e0      	bne.n	800a86e <_free_r+0x26>
 800a8ac:	681c      	ldr	r4, [r3, #0]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	6053      	str	r3, [r2, #4]
 800a8b2:	440c      	add	r4, r1
 800a8b4:	6014      	str	r4, [r2, #0]
 800a8b6:	e7da      	b.n	800a86e <_free_r+0x26>
 800a8b8:	d902      	bls.n	800a8c0 <_free_r+0x78>
 800a8ba:	230c      	movs	r3, #12
 800a8bc:	6003      	str	r3, [r0, #0]
 800a8be:	e7d6      	b.n	800a86e <_free_r+0x26>
 800a8c0:	6825      	ldr	r5, [r4, #0]
 800a8c2:	1961      	adds	r1, r4, r5
 800a8c4:	428b      	cmp	r3, r1
 800a8c6:	bf04      	itt	eq
 800a8c8:	6819      	ldreq	r1, [r3, #0]
 800a8ca:	685b      	ldreq	r3, [r3, #4]
 800a8cc:	6063      	str	r3, [r4, #4]
 800a8ce:	bf04      	itt	eq
 800a8d0:	1949      	addeq	r1, r1, r5
 800a8d2:	6021      	streq	r1, [r4, #0]
 800a8d4:	6054      	str	r4, [r2, #4]
 800a8d6:	e7ca      	b.n	800a86e <_free_r+0x26>
 800a8d8:	b003      	add	sp, #12
 800a8da:	bd30      	pop	{r4, r5, pc}
 800a8dc:	20000718 	.word	0x20000718

0800a8e0 <__sfputc_r>:
 800a8e0:	6893      	ldr	r3, [r2, #8]
 800a8e2:	3b01      	subs	r3, #1
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	b410      	push	{r4}
 800a8e8:	6093      	str	r3, [r2, #8]
 800a8ea:	da08      	bge.n	800a8fe <__sfputc_r+0x1e>
 800a8ec:	6994      	ldr	r4, [r2, #24]
 800a8ee:	42a3      	cmp	r3, r4
 800a8f0:	db01      	blt.n	800a8f6 <__sfputc_r+0x16>
 800a8f2:	290a      	cmp	r1, #10
 800a8f4:	d103      	bne.n	800a8fe <__sfputc_r+0x1e>
 800a8f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8fa:	f7ff be32 	b.w	800a562 <__swbuf_r>
 800a8fe:	6813      	ldr	r3, [r2, #0]
 800a900:	1c58      	adds	r0, r3, #1
 800a902:	6010      	str	r0, [r2, #0]
 800a904:	7019      	strb	r1, [r3, #0]
 800a906:	4608      	mov	r0, r1
 800a908:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a90c:	4770      	bx	lr

0800a90e <__sfputs_r>:
 800a90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a910:	4606      	mov	r6, r0
 800a912:	460f      	mov	r7, r1
 800a914:	4614      	mov	r4, r2
 800a916:	18d5      	adds	r5, r2, r3
 800a918:	42ac      	cmp	r4, r5
 800a91a:	d101      	bne.n	800a920 <__sfputs_r+0x12>
 800a91c:	2000      	movs	r0, #0
 800a91e:	e007      	b.n	800a930 <__sfputs_r+0x22>
 800a920:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a924:	463a      	mov	r2, r7
 800a926:	4630      	mov	r0, r6
 800a928:	f7ff ffda 	bl	800a8e0 <__sfputc_r>
 800a92c:	1c43      	adds	r3, r0, #1
 800a92e:	d1f3      	bne.n	800a918 <__sfputs_r+0xa>
 800a930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a934 <_vfiprintf_r>:
 800a934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a938:	460d      	mov	r5, r1
 800a93a:	b09d      	sub	sp, #116	; 0x74
 800a93c:	4614      	mov	r4, r2
 800a93e:	4698      	mov	r8, r3
 800a940:	4606      	mov	r6, r0
 800a942:	b118      	cbz	r0, 800a94c <_vfiprintf_r+0x18>
 800a944:	6a03      	ldr	r3, [r0, #32]
 800a946:	b90b      	cbnz	r3, 800a94c <_vfiprintf_r+0x18>
 800a948:	f7ff fd24 	bl	800a394 <__sinit>
 800a94c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a94e:	07d9      	lsls	r1, r3, #31
 800a950:	d405      	bmi.n	800a95e <_vfiprintf_r+0x2a>
 800a952:	89ab      	ldrh	r3, [r5, #12]
 800a954:	059a      	lsls	r2, r3, #22
 800a956:	d402      	bmi.n	800a95e <_vfiprintf_r+0x2a>
 800a958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a95a:	f7ff ff64 	bl	800a826 <__retarget_lock_acquire_recursive>
 800a95e:	89ab      	ldrh	r3, [r5, #12]
 800a960:	071b      	lsls	r3, r3, #28
 800a962:	d501      	bpl.n	800a968 <_vfiprintf_r+0x34>
 800a964:	692b      	ldr	r3, [r5, #16]
 800a966:	b99b      	cbnz	r3, 800a990 <_vfiprintf_r+0x5c>
 800a968:	4629      	mov	r1, r5
 800a96a:	4630      	mov	r0, r6
 800a96c:	f7ff fe36 	bl	800a5dc <__swsetup_r>
 800a970:	b170      	cbz	r0, 800a990 <_vfiprintf_r+0x5c>
 800a972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a974:	07dc      	lsls	r4, r3, #31
 800a976:	d504      	bpl.n	800a982 <_vfiprintf_r+0x4e>
 800a978:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a97c:	b01d      	add	sp, #116	; 0x74
 800a97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a982:	89ab      	ldrh	r3, [r5, #12]
 800a984:	0598      	lsls	r0, r3, #22
 800a986:	d4f7      	bmi.n	800a978 <_vfiprintf_r+0x44>
 800a988:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a98a:	f7ff ff4d 	bl	800a828 <__retarget_lock_release_recursive>
 800a98e:	e7f3      	b.n	800a978 <_vfiprintf_r+0x44>
 800a990:	2300      	movs	r3, #0
 800a992:	9309      	str	r3, [sp, #36]	; 0x24
 800a994:	2320      	movs	r3, #32
 800a996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a99a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a99e:	2330      	movs	r3, #48	; 0x30
 800a9a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800ab54 <_vfiprintf_r+0x220>
 800a9a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a9a8:	f04f 0901 	mov.w	r9, #1
 800a9ac:	4623      	mov	r3, r4
 800a9ae:	469a      	mov	sl, r3
 800a9b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a9b4:	b10a      	cbz	r2, 800a9ba <_vfiprintf_r+0x86>
 800a9b6:	2a25      	cmp	r2, #37	; 0x25
 800a9b8:	d1f9      	bne.n	800a9ae <_vfiprintf_r+0x7a>
 800a9ba:	ebba 0b04 	subs.w	fp, sl, r4
 800a9be:	d00b      	beq.n	800a9d8 <_vfiprintf_r+0xa4>
 800a9c0:	465b      	mov	r3, fp
 800a9c2:	4622      	mov	r2, r4
 800a9c4:	4629      	mov	r1, r5
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	f7ff ffa1 	bl	800a90e <__sfputs_r>
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	f000 80a9 	beq.w	800ab24 <_vfiprintf_r+0x1f0>
 800a9d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a9d4:	445a      	add	r2, fp
 800a9d6:	9209      	str	r2, [sp, #36]	; 0x24
 800a9d8:	f89a 3000 	ldrb.w	r3, [sl]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	f000 80a1 	beq.w	800ab24 <_vfiprintf_r+0x1f0>
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a9e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a9ec:	f10a 0a01 	add.w	sl, sl, #1
 800a9f0:	9304      	str	r3, [sp, #16]
 800a9f2:	9307      	str	r3, [sp, #28]
 800a9f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a9f8:	931a      	str	r3, [sp, #104]	; 0x68
 800a9fa:	4654      	mov	r4, sl
 800a9fc:	2205      	movs	r2, #5
 800a9fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa02:	4854      	ldr	r0, [pc, #336]	; (800ab54 <_vfiprintf_r+0x220>)
 800aa04:	f7f5 fc0c 	bl	8000220 <memchr>
 800aa08:	9a04      	ldr	r2, [sp, #16]
 800aa0a:	b9d8      	cbnz	r0, 800aa44 <_vfiprintf_r+0x110>
 800aa0c:	06d1      	lsls	r1, r2, #27
 800aa0e:	bf44      	itt	mi
 800aa10:	2320      	movmi	r3, #32
 800aa12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa16:	0713      	lsls	r3, r2, #28
 800aa18:	bf44      	itt	mi
 800aa1a:	232b      	movmi	r3, #43	; 0x2b
 800aa1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aa20:	f89a 3000 	ldrb.w	r3, [sl]
 800aa24:	2b2a      	cmp	r3, #42	; 0x2a
 800aa26:	d015      	beq.n	800aa54 <_vfiprintf_r+0x120>
 800aa28:	9a07      	ldr	r2, [sp, #28]
 800aa2a:	4654      	mov	r4, sl
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	f04f 0c0a 	mov.w	ip, #10
 800aa32:	4621      	mov	r1, r4
 800aa34:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aa38:	3b30      	subs	r3, #48	; 0x30
 800aa3a:	2b09      	cmp	r3, #9
 800aa3c:	d94d      	bls.n	800aada <_vfiprintf_r+0x1a6>
 800aa3e:	b1b0      	cbz	r0, 800aa6e <_vfiprintf_r+0x13a>
 800aa40:	9207      	str	r2, [sp, #28]
 800aa42:	e014      	b.n	800aa6e <_vfiprintf_r+0x13a>
 800aa44:	eba0 0308 	sub.w	r3, r0, r8
 800aa48:	fa09 f303 	lsl.w	r3, r9, r3
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	9304      	str	r3, [sp, #16]
 800aa50:	46a2      	mov	sl, r4
 800aa52:	e7d2      	b.n	800a9fa <_vfiprintf_r+0xc6>
 800aa54:	9b03      	ldr	r3, [sp, #12]
 800aa56:	1d19      	adds	r1, r3, #4
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	9103      	str	r1, [sp, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bfbb      	ittet	lt
 800aa60:	425b      	neglt	r3, r3
 800aa62:	f042 0202 	orrlt.w	r2, r2, #2
 800aa66:	9307      	strge	r3, [sp, #28]
 800aa68:	9307      	strlt	r3, [sp, #28]
 800aa6a:	bfb8      	it	lt
 800aa6c:	9204      	strlt	r2, [sp, #16]
 800aa6e:	7823      	ldrb	r3, [r4, #0]
 800aa70:	2b2e      	cmp	r3, #46	; 0x2e
 800aa72:	d10c      	bne.n	800aa8e <_vfiprintf_r+0x15a>
 800aa74:	7863      	ldrb	r3, [r4, #1]
 800aa76:	2b2a      	cmp	r3, #42	; 0x2a
 800aa78:	d134      	bne.n	800aae4 <_vfiprintf_r+0x1b0>
 800aa7a:	9b03      	ldr	r3, [sp, #12]
 800aa7c:	1d1a      	adds	r2, r3, #4
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	9203      	str	r2, [sp, #12]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	bfb8      	it	lt
 800aa86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800aa8a:	3402      	adds	r4, #2
 800aa8c:	9305      	str	r3, [sp, #20]
 800aa8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ab64 <_vfiprintf_r+0x230>
 800aa92:	7821      	ldrb	r1, [r4, #0]
 800aa94:	2203      	movs	r2, #3
 800aa96:	4650      	mov	r0, sl
 800aa98:	f7f5 fbc2 	bl	8000220 <memchr>
 800aa9c:	b138      	cbz	r0, 800aaae <_vfiprintf_r+0x17a>
 800aa9e:	9b04      	ldr	r3, [sp, #16]
 800aaa0:	eba0 000a 	sub.w	r0, r0, sl
 800aaa4:	2240      	movs	r2, #64	; 0x40
 800aaa6:	4082      	lsls	r2, r0
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	3401      	adds	r4, #1
 800aaac:	9304      	str	r3, [sp, #16]
 800aaae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aab2:	4829      	ldr	r0, [pc, #164]	; (800ab58 <_vfiprintf_r+0x224>)
 800aab4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aab8:	2206      	movs	r2, #6
 800aaba:	f7f5 fbb1 	bl	8000220 <memchr>
 800aabe:	2800      	cmp	r0, #0
 800aac0:	d03f      	beq.n	800ab42 <_vfiprintf_r+0x20e>
 800aac2:	4b26      	ldr	r3, [pc, #152]	; (800ab5c <_vfiprintf_r+0x228>)
 800aac4:	bb1b      	cbnz	r3, 800ab0e <_vfiprintf_r+0x1da>
 800aac6:	9b03      	ldr	r3, [sp, #12]
 800aac8:	3307      	adds	r3, #7
 800aaca:	f023 0307 	bic.w	r3, r3, #7
 800aace:	3308      	adds	r3, #8
 800aad0:	9303      	str	r3, [sp, #12]
 800aad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aad4:	443b      	add	r3, r7
 800aad6:	9309      	str	r3, [sp, #36]	; 0x24
 800aad8:	e768      	b.n	800a9ac <_vfiprintf_r+0x78>
 800aada:	fb0c 3202 	mla	r2, ip, r2, r3
 800aade:	460c      	mov	r4, r1
 800aae0:	2001      	movs	r0, #1
 800aae2:	e7a6      	b.n	800aa32 <_vfiprintf_r+0xfe>
 800aae4:	2300      	movs	r3, #0
 800aae6:	3401      	adds	r4, #1
 800aae8:	9305      	str	r3, [sp, #20]
 800aaea:	4619      	mov	r1, r3
 800aaec:	f04f 0c0a 	mov.w	ip, #10
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaf6:	3a30      	subs	r2, #48	; 0x30
 800aaf8:	2a09      	cmp	r2, #9
 800aafa:	d903      	bls.n	800ab04 <_vfiprintf_r+0x1d0>
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d0c6      	beq.n	800aa8e <_vfiprintf_r+0x15a>
 800ab00:	9105      	str	r1, [sp, #20]
 800ab02:	e7c4      	b.n	800aa8e <_vfiprintf_r+0x15a>
 800ab04:	fb0c 2101 	mla	r1, ip, r1, r2
 800ab08:	4604      	mov	r4, r0
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e7f0      	b.n	800aaf0 <_vfiprintf_r+0x1bc>
 800ab0e:	ab03      	add	r3, sp, #12
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	462a      	mov	r2, r5
 800ab14:	4b12      	ldr	r3, [pc, #72]	; (800ab60 <_vfiprintf_r+0x22c>)
 800ab16:	a904      	add	r1, sp, #16
 800ab18:	4630      	mov	r0, r6
 800ab1a:	f3af 8000 	nop.w
 800ab1e:	4607      	mov	r7, r0
 800ab20:	1c78      	adds	r0, r7, #1
 800ab22:	d1d6      	bne.n	800aad2 <_vfiprintf_r+0x19e>
 800ab24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab26:	07d9      	lsls	r1, r3, #31
 800ab28:	d405      	bmi.n	800ab36 <_vfiprintf_r+0x202>
 800ab2a:	89ab      	ldrh	r3, [r5, #12]
 800ab2c:	059a      	lsls	r2, r3, #22
 800ab2e:	d402      	bmi.n	800ab36 <_vfiprintf_r+0x202>
 800ab30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab32:	f7ff fe79 	bl	800a828 <__retarget_lock_release_recursive>
 800ab36:	89ab      	ldrh	r3, [r5, #12]
 800ab38:	065b      	lsls	r3, r3, #25
 800ab3a:	f53f af1d 	bmi.w	800a978 <_vfiprintf_r+0x44>
 800ab3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ab40:	e71c      	b.n	800a97c <_vfiprintf_r+0x48>
 800ab42:	ab03      	add	r3, sp, #12
 800ab44:	9300      	str	r3, [sp, #0]
 800ab46:	462a      	mov	r2, r5
 800ab48:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <_vfiprintf_r+0x22c>)
 800ab4a:	a904      	add	r1, sp, #16
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	f000 f879 	bl	800ac44 <_printf_i>
 800ab52:	e7e4      	b.n	800ab1e <_vfiprintf_r+0x1ea>
 800ab54:	0800b526 	.word	0x0800b526
 800ab58:	0800b530 	.word	0x0800b530
 800ab5c:	00000000 	.word	0x00000000
 800ab60:	0800a90f 	.word	0x0800a90f
 800ab64:	0800b52c 	.word	0x0800b52c

0800ab68 <_printf_common>:
 800ab68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab6c:	4616      	mov	r6, r2
 800ab6e:	4699      	mov	r9, r3
 800ab70:	688a      	ldr	r2, [r1, #8]
 800ab72:	690b      	ldr	r3, [r1, #16]
 800ab74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	bfb8      	it	lt
 800ab7c:	4613      	movlt	r3, r2
 800ab7e:	6033      	str	r3, [r6, #0]
 800ab80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ab84:	4607      	mov	r7, r0
 800ab86:	460c      	mov	r4, r1
 800ab88:	b10a      	cbz	r2, 800ab8e <_printf_common+0x26>
 800ab8a:	3301      	adds	r3, #1
 800ab8c:	6033      	str	r3, [r6, #0]
 800ab8e:	6823      	ldr	r3, [r4, #0]
 800ab90:	0699      	lsls	r1, r3, #26
 800ab92:	bf42      	ittt	mi
 800ab94:	6833      	ldrmi	r3, [r6, #0]
 800ab96:	3302      	addmi	r3, #2
 800ab98:	6033      	strmi	r3, [r6, #0]
 800ab9a:	6825      	ldr	r5, [r4, #0]
 800ab9c:	f015 0506 	ands.w	r5, r5, #6
 800aba0:	d106      	bne.n	800abb0 <_printf_common+0x48>
 800aba2:	f104 0a19 	add.w	sl, r4, #25
 800aba6:	68e3      	ldr	r3, [r4, #12]
 800aba8:	6832      	ldr	r2, [r6, #0]
 800abaa:	1a9b      	subs	r3, r3, r2
 800abac:	42ab      	cmp	r3, r5
 800abae:	dc26      	bgt.n	800abfe <_printf_common+0x96>
 800abb0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800abb4:	1e13      	subs	r3, r2, #0
 800abb6:	6822      	ldr	r2, [r4, #0]
 800abb8:	bf18      	it	ne
 800abba:	2301      	movne	r3, #1
 800abbc:	0692      	lsls	r2, r2, #26
 800abbe:	d42b      	bmi.n	800ac18 <_printf_common+0xb0>
 800abc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800abc4:	4649      	mov	r1, r9
 800abc6:	4638      	mov	r0, r7
 800abc8:	47c0      	blx	r8
 800abca:	3001      	adds	r0, #1
 800abcc:	d01e      	beq.n	800ac0c <_printf_common+0xa4>
 800abce:	6823      	ldr	r3, [r4, #0]
 800abd0:	6922      	ldr	r2, [r4, #16]
 800abd2:	f003 0306 	and.w	r3, r3, #6
 800abd6:	2b04      	cmp	r3, #4
 800abd8:	bf02      	ittt	eq
 800abda:	68e5      	ldreq	r5, [r4, #12]
 800abdc:	6833      	ldreq	r3, [r6, #0]
 800abde:	1aed      	subeq	r5, r5, r3
 800abe0:	68a3      	ldr	r3, [r4, #8]
 800abe2:	bf0c      	ite	eq
 800abe4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800abe8:	2500      	movne	r5, #0
 800abea:	4293      	cmp	r3, r2
 800abec:	bfc4      	itt	gt
 800abee:	1a9b      	subgt	r3, r3, r2
 800abf0:	18ed      	addgt	r5, r5, r3
 800abf2:	2600      	movs	r6, #0
 800abf4:	341a      	adds	r4, #26
 800abf6:	42b5      	cmp	r5, r6
 800abf8:	d11a      	bne.n	800ac30 <_printf_common+0xc8>
 800abfa:	2000      	movs	r0, #0
 800abfc:	e008      	b.n	800ac10 <_printf_common+0xa8>
 800abfe:	2301      	movs	r3, #1
 800ac00:	4652      	mov	r2, sl
 800ac02:	4649      	mov	r1, r9
 800ac04:	4638      	mov	r0, r7
 800ac06:	47c0      	blx	r8
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d103      	bne.n	800ac14 <_printf_common+0xac>
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac14:	3501      	adds	r5, #1
 800ac16:	e7c6      	b.n	800aba6 <_printf_common+0x3e>
 800ac18:	18e1      	adds	r1, r4, r3
 800ac1a:	1c5a      	adds	r2, r3, #1
 800ac1c:	2030      	movs	r0, #48	; 0x30
 800ac1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ac22:	4422      	add	r2, r4
 800ac24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ac28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ac2c:	3302      	adds	r3, #2
 800ac2e:	e7c7      	b.n	800abc0 <_printf_common+0x58>
 800ac30:	2301      	movs	r3, #1
 800ac32:	4622      	mov	r2, r4
 800ac34:	4649      	mov	r1, r9
 800ac36:	4638      	mov	r0, r7
 800ac38:	47c0      	blx	r8
 800ac3a:	3001      	adds	r0, #1
 800ac3c:	d0e6      	beq.n	800ac0c <_printf_common+0xa4>
 800ac3e:	3601      	adds	r6, #1
 800ac40:	e7d9      	b.n	800abf6 <_printf_common+0x8e>
	...

0800ac44 <_printf_i>:
 800ac44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac48:	7e0f      	ldrb	r7, [r1, #24]
 800ac4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ac4c:	2f78      	cmp	r7, #120	; 0x78
 800ac4e:	4691      	mov	r9, r2
 800ac50:	4680      	mov	r8, r0
 800ac52:	460c      	mov	r4, r1
 800ac54:	469a      	mov	sl, r3
 800ac56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ac5a:	d807      	bhi.n	800ac6c <_printf_i+0x28>
 800ac5c:	2f62      	cmp	r7, #98	; 0x62
 800ac5e:	d80a      	bhi.n	800ac76 <_printf_i+0x32>
 800ac60:	2f00      	cmp	r7, #0
 800ac62:	f000 80d4 	beq.w	800ae0e <_printf_i+0x1ca>
 800ac66:	2f58      	cmp	r7, #88	; 0x58
 800ac68:	f000 80c0 	beq.w	800adec <_printf_i+0x1a8>
 800ac6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ac74:	e03a      	b.n	800acec <_printf_i+0xa8>
 800ac76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ac7a:	2b15      	cmp	r3, #21
 800ac7c:	d8f6      	bhi.n	800ac6c <_printf_i+0x28>
 800ac7e:	a101      	add	r1, pc, #4	; (adr r1, 800ac84 <_printf_i+0x40>)
 800ac80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ac84:	0800acdd 	.word	0x0800acdd
 800ac88:	0800acf1 	.word	0x0800acf1
 800ac8c:	0800ac6d 	.word	0x0800ac6d
 800ac90:	0800ac6d 	.word	0x0800ac6d
 800ac94:	0800ac6d 	.word	0x0800ac6d
 800ac98:	0800ac6d 	.word	0x0800ac6d
 800ac9c:	0800acf1 	.word	0x0800acf1
 800aca0:	0800ac6d 	.word	0x0800ac6d
 800aca4:	0800ac6d 	.word	0x0800ac6d
 800aca8:	0800ac6d 	.word	0x0800ac6d
 800acac:	0800ac6d 	.word	0x0800ac6d
 800acb0:	0800adf5 	.word	0x0800adf5
 800acb4:	0800ad1d 	.word	0x0800ad1d
 800acb8:	0800adaf 	.word	0x0800adaf
 800acbc:	0800ac6d 	.word	0x0800ac6d
 800acc0:	0800ac6d 	.word	0x0800ac6d
 800acc4:	0800ae17 	.word	0x0800ae17
 800acc8:	0800ac6d 	.word	0x0800ac6d
 800accc:	0800ad1d 	.word	0x0800ad1d
 800acd0:	0800ac6d 	.word	0x0800ac6d
 800acd4:	0800ac6d 	.word	0x0800ac6d
 800acd8:	0800adb7 	.word	0x0800adb7
 800acdc:	682b      	ldr	r3, [r5, #0]
 800acde:	1d1a      	adds	r2, r3, #4
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	602a      	str	r2, [r5, #0]
 800ace4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ace8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800acec:	2301      	movs	r3, #1
 800acee:	e09f      	b.n	800ae30 <_printf_i+0x1ec>
 800acf0:	6820      	ldr	r0, [r4, #0]
 800acf2:	682b      	ldr	r3, [r5, #0]
 800acf4:	0607      	lsls	r7, r0, #24
 800acf6:	f103 0104 	add.w	r1, r3, #4
 800acfa:	6029      	str	r1, [r5, #0]
 800acfc:	d501      	bpl.n	800ad02 <_printf_i+0xbe>
 800acfe:	681e      	ldr	r6, [r3, #0]
 800ad00:	e003      	b.n	800ad0a <_printf_i+0xc6>
 800ad02:	0646      	lsls	r6, r0, #25
 800ad04:	d5fb      	bpl.n	800acfe <_printf_i+0xba>
 800ad06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ad0a:	2e00      	cmp	r6, #0
 800ad0c:	da03      	bge.n	800ad16 <_printf_i+0xd2>
 800ad0e:	232d      	movs	r3, #45	; 0x2d
 800ad10:	4276      	negs	r6, r6
 800ad12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad16:	485a      	ldr	r0, [pc, #360]	; (800ae80 <_printf_i+0x23c>)
 800ad18:	230a      	movs	r3, #10
 800ad1a:	e012      	b.n	800ad42 <_printf_i+0xfe>
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	6820      	ldr	r0, [r4, #0]
 800ad20:	1d19      	adds	r1, r3, #4
 800ad22:	6029      	str	r1, [r5, #0]
 800ad24:	0605      	lsls	r5, r0, #24
 800ad26:	d501      	bpl.n	800ad2c <_printf_i+0xe8>
 800ad28:	681e      	ldr	r6, [r3, #0]
 800ad2a:	e002      	b.n	800ad32 <_printf_i+0xee>
 800ad2c:	0641      	lsls	r1, r0, #25
 800ad2e:	d5fb      	bpl.n	800ad28 <_printf_i+0xe4>
 800ad30:	881e      	ldrh	r6, [r3, #0]
 800ad32:	4853      	ldr	r0, [pc, #332]	; (800ae80 <_printf_i+0x23c>)
 800ad34:	2f6f      	cmp	r7, #111	; 0x6f
 800ad36:	bf0c      	ite	eq
 800ad38:	2308      	moveq	r3, #8
 800ad3a:	230a      	movne	r3, #10
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ad42:	6865      	ldr	r5, [r4, #4]
 800ad44:	60a5      	str	r5, [r4, #8]
 800ad46:	2d00      	cmp	r5, #0
 800ad48:	bfa2      	ittt	ge
 800ad4a:	6821      	ldrge	r1, [r4, #0]
 800ad4c:	f021 0104 	bicge.w	r1, r1, #4
 800ad50:	6021      	strge	r1, [r4, #0]
 800ad52:	b90e      	cbnz	r6, 800ad58 <_printf_i+0x114>
 800ad54:	2d00      	cmp	r5, #0
 800ad56:	d04b      	beq.n	800adf0 <_printf_i+0x1ac>
 800ad58:	4615      	mov	r5, r2
 800ad5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800ad5e:	fb03 6711 	mls	r7, r3, r1, r6
 800ad62:	5dc7      	ldrb	r7, [r0, r7]
 800ad64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ad68:	4637      	mov	r7, r6
 800ad6a:	42bb      	cmp	r3, r7
 800ad6c:	460e      	mov	r6, r1
 800ad6e:	d9f4      	bls.n	800ad5a <_printf_i+0x116>
 800ad70:	2b08      	cmp	r3, #8
 800ad72:	d10b      	bne.n	800ad8c <_printf_i+0x148>
 800ad74:	6823      	ldr	r3, [r4, #0]
 800ad76:	07de      	lsls	r6, r3, #31
 800ad78:	d508      	bpl.n	800ad8c <_printf_i+0x148>
 800ad7a:	6923      	ldr	r3, [r4, #16]
 800ad7c:	6861      	ldr	r1, [r4, #4]
 800ad7e:	4299      	cmp	r1, r3
 800ad80:	bfde      	ittt	le
 800ad82:	2330      	movle	r3, #48	; 0x30
 800ad84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ad88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ad8c:	1b52      	subs	r2, r2, r5
 800ad8e:	6122      	str	r2, [r4, #16]
 800ad90:	f8cd a000 	str.w	sl, [sp]
 800ad94:	464b      	mov	r3, r9
 800ad96:	aa03      	add	r2, sp, #12
 800ad98:	4621      	mov	r1, r4
 800ad9a:	4640      	mov	r0, r8
 800ad9c:	f7ff fee4 	bl	800ab68 <_printf_common>
 800ada0:	3001      	adds	r0, #1
 800ada2:	d14a      	bne.n	800ae3a <_printf_i+0x1f6>
 800ada4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ada8:	b004      	add	sp, #16
 800adaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adae:	6823      	ldr	r3, [r4, #0]
 800adb0:	f043 0320 	orr.w	r3, r3, #32
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	4833      	ldr	r0, [pc, #204]	; (800ae84 <_printf_i+0x240>)
 800adb8:	2778      	movs	r7, #120	; 0x78
 800adba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800adbe:	6823      	ldr	r3, [r4, #0]
 800adc0:	6829      	ldr	r1, [r5, #0]
 800adc2:	061f      	lsls	r7, r3, #24
 800adc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800adc8:	d402      	bmi.n	800add0 <_printf_i+0x18c>
 800adca:	065f      	lsls	r7, r3, #25
 800adcc:	bf48      	it	mi
 800adce:	b2b6      	uxthmi	r6, r6
 800add0:	07df      	lsls	r7, r3, #31
 800add2:	bf48      	it	mi
 800add4:	f043 0320 	orrmi.w	r3, r3, #32
 800add8:	6029      	str	r1, [r5, #0]
 800adda:	bf48      	it	mi
 800addc:	6023      	strmi	r3, [r4, #0]
 800adde:	b91e      	cbnz	r6, 800ade8 <_printf_i+0x1a4>
 800ade0:	6823      	ldr	r3, [r4, #0]
 800ade2:	f023 0320 	bic.w	r3, r3, #32
 800ade6:	6023      	str	r3, [r4, #0]
 800ade8:	2310      	movs	r3, #16
 800adea:	e7a7      	b.n	800ad3c <_printf_i+0xf8>
 800adec:	4824      	ldr	r0, [pc, #144]	; (800ae80 <_printf_i+0x23c>)
 800adee:	e7e4      	b.n	800adba <_printf_i+0x176>
 800adf0:	4615      	mov	r5, r2
 800adf2:	e7bd      	b.n	800ad70 <_printf_i+0x12c>
 800adf4:	682b      	ldr	r3, [r5, #0]
 800adf6:	6826      	ldr	r6, [r4, #0]
 800adf8:	6961      	ldr	r1, [r4, #20]
 800adfa:	1d18      	adds	r0, r3, #4
 800adfc:	6028      	str	r0, [r5, #0]
 800adfe:	0635      	lsls	r5, r6, #24
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	d501      	bpl.n	800ae08 <_printf_i+0x1c4>
 800ae04:	6019      	str	r1, [r3, #0]
 800ae06:	e002      	b.n	800ae0e <_printf_i+0x1ca>
 800ae08:	0670      	lsls	r0, r6, #25
 800ae0a:	d5fb      	bpl.n	800ae04 <_printf_i+0x1c0>
 800ae0c:	8019      	strh	r1, [r3, #0]
 800ae0e:	2300      	movs	r3, #0
 800ae10:	6123      	str	r3, [r4, #16]
 800ae12:	4615      	mov	r5, r2
 800ae14:	e7bc      	b.n	800ad90 <_printf_i+0x14c>
 800ae16:	682b      	ldr	r3, [r5, #0]
 800ae18:	1d1a      	adds	r2, r3, #4
 800ae1a:	602a      	str	r2, [r5, #0]
 800ae1c:	681d      	ldr	r5, [r3, #0]
 800ae1e:	6862      	ldr	r2, [r4, #4]
 800ae20:	2100      	movs	r1, #0
 800ae22:	4628      	mov	r0, r5
 800ae24:	f7f5 f9fc 	bl	8000220 <memchr>
 800ae28:	b108      	cbz	r0, 800ae2e <_printf_i+0x1ea>
 800ae2a:	1b40      	subs	r0, r0, r5
 800ae2c:	6060      	str	r0, [r4, #4]
 800ae2e:	6863      	ldr	r3, [r4, #4]
 800ae30:	6123      	str	r3, [r4, #16]
 800ae32:	2300      	movs	r3, #0
 800ae34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae38:	e7aa      	b.n	800ad90 <_printf_i+0x14c>
 800ae3a:	6923      	ldr	r3, [r4, #16]
 800ae3c:	462a      	mov	r2, r5
 800ae3e:	4649      	mov	r1, r9
 800ae40:	4640      	mov	r0, r8
 800ae42:	47d0      	blx	sl
 800ae44:	3001      	adds	r0, #1
 800ae46:	d0ad      	beq.n	800ada4 <_printf_i+0x160>
 800ae48:	6823      	ldr	r3, [r4, #0]
 800ae4a:	079b      	lsls	r3, r3, #30
 800ae4c:	d413      	bmi.n	800ae76 <_printf_i+0x232>
 800ae4e:	68e0      	ldr	r0, [r4, #12]
 800ae50:	9b03      	ldr	r3, [sp, #12]
 800ae52:	4298      	cmp	r0, r3
 800ae54:	bfb8      	it	lt
 800ae56:	4618      	movlt	r0, r3
 800ae58:	e7a6      	b.n	800ada8 <_printf_i+0x164>
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	4632      	mov	r2, r6
 800ae5e:	4649      	mov	r1, r9
 800ae60:	4640      	mov	r0, r8
 800ae62:	47d0      	blx	sl
 800ae64:	3001      	adds	r0, #1
 800ae66:	d09d      	beq.n	800ada4 <_printf_i+0x160>
 800ae68:	3501      	adds	r5, #1
 800ae6a:	68e3      	ldr	r3, [r4, #12]
 800ae6c:	9903      	ldr	r1, [sp, #12]
 800ae6e:	1a5b      	subs	r3, r3, r1
 800ae70:	42ab      	cmp	r3, r5
 800ae72:	dcf2      	bgt.n	800ae5a <_printf_i+0x216>
 800ae74:	e7eb      	b.n	800ae4e <_printf_i+0x20a>
 800ae76:	2500      	movs	r5, #0
 800ae78:	f104 0619 	add.w	r6, r4, #25
 800ae7c:	e7f5      	b.n	800ae6a <_printf_i+0x226>
 800ae7e:	bf00      	nop
 800ae80:	0800b537 	.word	0x0800b537
 800ae84:	0800b548 	.word	0x0800b548

0800ae88 <__sflush_r>:
 800ae88:	898a      	ldrh	r2, [r1, #12]
 800ae8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae8e:	4605      	mov	r5, r0
 800ae90:	0710      	lsls	r0, r2, #28
 800ae92:	460c      	mov	r4, r1
 800ae94:	d458      	bmi.n	800af48 <__sflush_r+0xc0>
 800ae96:	684b      	ldr	r3, [r1, #4]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	dc05      	bgt.n	800aea8 <__sflush_r+0x20>
 800ae9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	dc02      	bgt.n	800aea8 <__sflush_r+0x20>
 800aea2:	2000      	movs	r0, #0
 800aea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aea8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aeaa:	2e00      	cmp	r6, #0
 800aeac:	d0f9      	beq.n	800aea2 <__sflush_r+0x1a>
 800aeae:	2300      	movs	r3, #0
 800aeb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aeb4:	682f      	ldr	r7, [r5, #0]
 800aeb6:	6a21      	ldr	r1, [r4, #32]
 800aeb8:	602b      	str	r3, [r5, #0]
 800aeba:	d032      	beq.n	800af22 <__sflush_r+0x9a>
 800aebc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aebe:	89a3      	ldrh	r3, [r4, #12]
 800aec0:	075a      	lsls	r2, r3, #29
 800aec2:	d505      	bpl.n	800aed0 <__sflush_r+0x48>
 800aec4:	6863      	ldr	r3, [r4, #4]
 800aec6:	1ac0      	subs	r0, r0, r3
 800aec8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aeca:	b10b      	cbz	r3, 800aed0 <__sflush_r+0x48>
 800aecc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aece:	1ac0      	subs	r0, r0, r3
 800aed0:	2300      	movs	r3, #0
 800aed2:	4602      	mov	r2, r0
 800aed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aed6:	6a21      	ldr	r1, [r4, #32]
 800aed8:	4628      	mov	r0, r5
 800aeda:	47b0      	blx	r6
 800aedc:	1c43      	adds	r3, r0, #1
 800aede:	89a3      	ldrh	r3, [r4, #12]
 800aee0:	d106      	bne.n	800aef0 <__sflush_r+0x68>
 800aee2:	6829      	ldr	r1, [r5, #0]
 800aee4:	291d      	cmp	r1, #29
 800aee6:	d82b      	bhi.n	800af40 <__sflush_r+0xb8>
 800aee8:	4a29      	ldr	r2, [pc, #164]	; (800af90 <__sflush_r+0x108>)
 800aeea:	410a      	asrs	r2, r1
 800aeec:	07d6      	lsls	r6, r2, #31
 800aeee:	d427      	bmi.n	800af40 <__sflush_r+0xb8>
 800aef0:	2200      	movs	r2, #0
 800aef2:	6062      	str	r2, [r4, #4]
 800aef4:	04d9      	lsls	r1, r3, #19
 800aef6:	6922      	ldr	r2, [r4, #16]
 800aef8:	6022      	str	r2, [r4, #0]
 800aefa:	d504      	bpl.n	800af06 <__sflush_r+0x7e>
 800aefc:	1c42      	adds	r2, r0, #1
 800aefe:	d101      	bne.n	800af04 <__sflush_r+0x7c>
 800af00:	682b      	ldr	r3, [r5, #0]
 800af02:	b903      	cbnz	r3, 800af06 <__sflush_r+0x7e>
 800af04:	6560      	str	r0, [r4, #84]	; 0x54
 800af06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af08:	602f      	str	r7, [r5, #0]
 800af0a:	2900      	cmp	r1, #0
 800af0c:	d0c9      	beq.n	800aea2 <__sflush_r+0x1a>
 800af0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af12:	4299      	cmp	r1, r3
 800af14:	d002      	beq.n	800af1c <__sflush_r+0x94>
 800af16:	4628      	mov	r0, r5
 800af18:	f7ff fc96 	bl	800a848 <_free_r>
 800af1c:	2000      	movs	r0, #0
 800af1e:	6360      	str	r0, [r4, #52]	; 0x34
 800af20:	e7c0      	b.n	800aea4 <__sflush_r+0x1c>
 800af22:	2301      	movs	r3, #1
 800af24:	4628      	mov	r0, r5
 800af26:	47b0      	blx	r6
 800af28:	1c41      	adds	r1, r0, #1
 800af2a:	d1c8      	bne.n	800aebe <__sflush_r+0x36>
 800af2c:	682b      	ldr	r3, [r5, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d0c5      	beq.n	800aebe <__sflush_r+0x36>
 800af32:	2b1d      	cmp	r3, #29
 800af34:	d001      	beq.n	800af3a <__sflush_r+0xb2>
 800af36:	2b16      	cmp	r3, #22
 800af38:	d101      	bne.n	800af3e <__sflush_r+0xb6>
 800af3a:	602f      	str	r7, [r5, #0]
 800af3c:	e7b1      	b.n	800aea2 <__sflush_r+0x1a>
 800af3e:	89a3      	ldrh	r3, [r4, #12]
 800af40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af44:	81a3      	strh	r3, [r4, #12]
 800af46:	e7ad      	b.n	800aea4 <__sflush_r+0x1c>
 800af48:	690f      	ldr	r7, [r1, #16]
 800af4a:	2f00      	cmp	r7, #0
 800af4c:	d0a9      	beq.n	800aea2 <__sflush_r+0x1a>
 800af4e:	0793      	lsls	r3, r2, #30
 800af50:	680e      	ldr	r6, [r1, #0]
 800af52:	bf08      	it	eq
 800af54:	694b      	ldreq	r3, [r1, #20]
 800af56:	600f      	str	r7, [r1, #0]
 800af58:	bf18      	it	ne
 800af5a:	2300      	movne	r3, #0
 800af5c:	eba6 0807 	sub.w	r8, r6, r7
 800af60:	608b      	str	r3, [r1, #8]
 800af62:	f1b8 0f00 	cmp.w	r8, #0
 800af66:	dd9c      	ble.n	800aea2 <__sflush_r+0x1a>
 800af68:	6a21      	ldr	r1, [r4, #32]
 800af6a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af6c:	4643      	mov	r3, r8
 800af6e:	463a      	mov	r2, r7
 800af70:	4628      	mov	r0, r5
 800af72:	47b0      	blx	r6
 800af74:	2800      	cmp	r0, #0
 800af76:	dc06      	bgt.n	800af86 <__sflush_r+0xfe>
 800af78:	89a3      	ldrh	r3, [r4, #12]
 800af7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af7e:	81a3      	strh	r3, [r4, #12]
 800af80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af84:	e78e      	b.n	800aea4 <__sflush_r+0x1c>
 800af86:	4407      	add	r7, r0
 800af88:	eba8 0800 	sub.w	r8, r8, r0
 800af8c:	e7e9      	b.n	800af62 <__sflush_r+0xda>
 800af8e:	bf00      	nop
 800af90:	dfbffffe 	.word	0xdfbffffe

0800af94 <_fflush_r>:
 800af94:	b538      	push	{r3, r4, r5, lr}
 800af96:	690b      	ldr	r3, [r1, #16]
 800af98:	4605      	mov	r5, r0
 800af9a:	460c      	mov	r4, r1
 800af9c:	b913      	cbnz	r3, 800afa4 <_fflush_r+0x10>
 800af9e:	2500      	movs	r5, #0
 800afa0:	4628      	mov	r0, r5
 800afa2:	bd38      	pop	{r3, r4, r5, pc}
 800afa4:	b118      	cbz	r0, 800afae <_fflush_r+0x1a>
 800afa6:	6a03      	ldr	r3, [r0, #32]
 800afa8:	b90b      	cbnz	r3, 800afae <_fflush_r+0x1a>
 800afaa:	f7ff f9f3 	bl	800a394 <__sinit>
 800afae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d0f3      	beq.n	800af9e <_fflush_r+0xa>
 800afb6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800afb8:	07d0      	lsls	r0, r2, #31
 800afba:	d404      	bmi.n	800afc6 <_fflush_r+0x32>
 800afbc:	0599      	lsls	r1, r3, #22
 800afbe:	d402      	bmi.n	800afc6 <_fflush_r+0x32>
 800afc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afc2:	f7ff fc30 	bl	800a826 <__retarget_lock_acquire_recursive>
 800afc6:	4628      	mov	r0, r5
 800afc8:	4621      	mov	r1, r4
 800afca:	f7ff ff5d 	bl	800ae88 <__sflush_r>
 800afce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800afd0:	07da      	lsls	r2, r3, #31
 800afd2:	4605      	mov	r5, r0
 800afd4:	d4e4      	bmi.n	800afa0 <_fflush_r+0xc>
 800afd6:	89a3      	ldrh	r3, [r4, #12]
 800afd8:	059b      	lsls	r3, r3, #22
 800afda:	d4e1      	bmi.n	800afa0 <_fflush_r+0xc>
 800afdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800afde:	f7ff fc23 	bl	800a828 <__retarget_lock_release_recursive>
 800afe2:	e7dd      	b.n	800afa0 <_fflush_r+0xc>

0800afe4 <__swhatbuf_r>:
 800afe4:	b570      	push	{r4, r5, r6, lr}
 800afe6:	460c      	mov	r4, r1
 800afe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afec:	2900      	cmp	r1, #0
 800afee:	b096      	sub	sp, #88	; 0x58
 800aff0:	4615      	mov	r5, r2
 800aff2:	461e      	mov	r6, r3
 800aff4:	da0d      	bge.n	800b012 <__swhatbuf_r+0x2e>
 800aff6:	89a3      	ldrh	r3, [r4, #12]
 800aff8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800affc:	f04f 0100 	mov.w	r1, #0
 800b000:	bf0c      	ite	eq
 800b002:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b006:	2340      	movne	r3, #64	; 0x40
 800b008:	2000      	movs	r0, #0
 800b00a:	6031      	str	r1, [r6, #0]
 800b00c:	602b      	str	r3, [r5, #0]
 800b00e:	b016      	add	sp, #88	; 0x58
 800b010:	bd70      	pop	{r4, r5, r6, pc}
 800b012:	466a      	mov	r2, sp
 800b014:	f000 f848 	bl	800b0a8 <_fstat_r>
 800b018:	2800      	cmp	r0, #0
 800b01a:	dbec      	blt.n	800aff6 <__swhatbuf_r+0x12>
 800b01c:	9901      	ldr	r1, [sp, #4]
 800b01e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b022:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b026:	4259      	negs	r1, r3
 800b028:	4159      	adcs	r1, r3
 800b02a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b02e:	e7eb      	b.n	800b008 <__swhatbuf_r+0x24>

0800b030 <__smakebuf_r>:
 800b030:	898b      	ldrh	r3, [r1, #12]
 800b032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b034:	079d      	lsls	r5, r3, #30
 800b036:	4606      	mov	r6, r0
 800b038:	460c      	mov	r4, r1
 800b03a:	d507      	bpl.n	800b04c <__smakebuf_r+0x1c>
 800b03c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b040:	6023      	str	r3, [r4, #0]
 800b042:	6123      	str	r3, [r4, #16]
 800b044:	2301      	movs	r3, #1
 800b046:	6163      	str	r3, [r4, #20]
 800b048:	b002      	add	sp, #8
 800b04a:	bd70      	pop	{r4, r5, r6, pc}
 800b04c:	ab01      	add	r3, sp, #4
 800b04e:	466a      	mov	r2, sp
 800b050:	f7ff ffc8 	bl	800afe4 <__swhatbuf_r>
 800b054:	9900      	ldr	r1, [sp, #0]
 800b056:	4605      	mov	r5, r0
 800b058:	4630      	mov	r0, r6
 800b05a:	f7ff f883 	bl	800a164 <_malloc_r>
 800b05e:	b948      	cbnz	r0, 800b074 <__smakebuf_r+0x44>
 800b060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b064:	059a      	lsls	r2, r3, #22
 800b066:	d4ef      	bmi.n	800b048 <__smakebuf_r+0x18>
 800b068:	f023 0303 	bic.w	r3, r3, #3
 800b06c:	f043 0302 	orr.w	r3, r3, #2
 800b070:	81a3      	strh	r3, [r4, #12]
 800b072:	e7e3      	b.n	800b03c <__smakebuf_r+0xc>
 800b074:	89a3      	ldrh	r3, [r4, #12]
 800b076:	6020      	str	r0, [r4, #0]
 800b078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b07c:	81a3      	strh	r3, [r4, #12]
 800b07e:	9b00      	ldr	r3, [sp, #0]
 800b080:	6163      	str	r3, [r4, #20]
 800b082:	9b01      	ldr	r3, [sp, #4]
 800b084:	6120      	str	r0, [r4, #16]
 800b086:	b15b      	cbz	r3, 800b0a0 <__smakebuf_r+0x70>
 800b088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b08c:	4630      	mov	r0, r6
 800b08e:	f000 f81d 	bl	800b0cc <_isatty_r>
 800b092:	b128      	cbz	r0, 800b0a0 <__smakebuf_r+0x70>
 800b094:	89a3      	ldrh	r3, [r4, #12]
 800b096:	f023 0303 	bic.w	r3, r3, #3
 800b09a:	f043 0301 	orr.w	r3, r3, #1
 800b09e:	81a3      	strh	r3, [r4, #12]
 800b0a0:	89a3      	ldrh	r3, [r4, #12]
 800b0a2:	431d      	orrs	r5, r3
 800b0a4:	81a5      	strh	r5, [r4, #12]
 800b0a6:	e7cf      	b.n	800b048 <__smakebuf_r+0x18>

0800b0a8 <_fstat_r>:
 800b0a8:	b538      	push	{r3, r4, r5, lr}
 800b0aa:	4d07      	ldr	r5, [pc, #28]	; (800b0c8 <_fstat_r+0x20>)
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	4604      	mov	r4, r0
 800b0b0:	4608      	mov	r0, r1
 800b0b2:	4611      	mov	r1, r2
 800b0b4:	602b      	str	r3, [r5, #0]
 800b0b6:	f7fb f97e 	bl	80063b6 <_fstat>
 800b0ba:	1c43      	adds	r3, r0, #1
 800b0bc:	d102      	bne.n	800b0c4 <_fstat_r+0x1c>
 800b0be:	682b      	ldr	r3, [r5, #0]
 800b0c0:	b103      	cbz	r3, 800b0c4 <_fstat_r+0x1c>
 800b0c2:	6023      	str	r3, [r4, #0]
 800b0c4:	bd38      	pop	{r3, r4, r5, pc}
 800b0c6:	bf00      	nop
 800b0c8:	2000085c 	.word	0x2000085c

0800b0cc <_isatty_r>:
 800b0cc:	b538      	push	{r3, r4, r5, lr}
 800b0ce:	4d06      	ldr	r5, [pc, #24]	; (800b0e8 <_isatty_r+0x1c>)
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	4608      	mov	r0, r1
 800b0d6:	602b      	str	r3, [r5, #0]
 800b0d8:	f7fb f97d 	bl	80063d6 <_isatty>
 800b0dc:	1c43      	adds	r3, r0, #1
 800b0de:	d102      	bne.n	800b0e6 <_isatty_r+0x1a>
 800b0e0:	682b      	ldr	r3, [r5, #0]
 800b0e2:	b103      	cbz	r3, 800b0e6 <_isatty_r+0x1a>
 800b0e4:	6023      	str	r3, [r4, #0]
 800b0e6:	bd38      	pop	{r3, r4, r5, pc}
 800b0e8:	2000085c 	.word	0x2000085c

0800b0ec <_init>:
 800b0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ee:	bf00      	nop
 800b0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0f2:	bc08      	pop	{r3}
 800b0f4:	469e      	mov	lr, r3
 800b0f6:	4770      	bx	lr

0800b0f8 <_fini>:
 800b0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0fa:	bf00      	nop
 800b0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0fe:	bc08      	pop	{r3}
 800b100:	469e      	mov	lr, r3
 800b102:	4770      	bx	lr
